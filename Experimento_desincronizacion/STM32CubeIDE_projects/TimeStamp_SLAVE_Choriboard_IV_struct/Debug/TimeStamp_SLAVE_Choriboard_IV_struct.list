
TimeStamp_SLAVE_Choriboard_IV_struct.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a574  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a73c  0800a73c  0001a73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a79c  0800a79c  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800a79c  0800a79c  0001a79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7a4  0800a7a4  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800a7a4  0800a7a4  0001a7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a7b0  0800a7b0  0001a7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800a7b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000377c  20000174  0800a92c  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200038f0  0800a92c  000238f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000210ea  00000000  00000000  000201e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d0c  00000000  00000000  000412d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a40  00000000  00000000  00046fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013ff  00000000  00000000  00048a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e3e3  00000000  00000000  00049e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000245ce  00000000  00000000  00078202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9c4d  00000000  00000000  0009c7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006fd8  00000000  00000000  00196420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0019d3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000174 	.word	0x20000174
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a724 	.word	0x0800a724

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000178 	.word	0x20000178
 8000204:	0800a724 	.word	0x0800a724

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm11timestamp_t>:
#include "CANmsg.h"

#define MASK_GET_NODE_ID 0x00000007

bool CANmsg_make_from_raw_data(CANmsg_t *me, uint8_t *rxData, uint32_t DLC, uint32_t StdId, timestamp_t timestamp)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
 8000510:	603b      	str	r3, [r7, #0]
	if( (rxData == 0) || (me == 0) || (DLC > MAX_LEN_PAYLOAD_CAN) )
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d005      	beq.n	8000524 <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm11timestamp_t+0x20>
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d002      	beq.n	8000524 <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm11timestamp_t+0x20>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b08      	cmp	r3, #8
 8000522:	d901      	bls.n	8000528 <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm11timestamp_t+0x24>
	{
		return false;
 8000524:	2300      	movs	r3, #0
 8000526:	e018      	b.n	800055a <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm11timestamp_t+0x56>
	}

	me->id = StdId>>3;
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	08da      	lsrs	r2, r3, #3
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	60da      	str	r2, [r3, #12]
	me->lenPayload = DLC;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	609a      	str	r2, [r3, #8]
	me->nodeID = StdId & MASK_GET_NODE_ID;
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	f003 0207 	and.w	r2, r3, #7
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	611a      	str	r2, [r3, #16]
	me->timestamp = timestamp;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	69ba      	ldr	r2, [r7, #24]
 8000544:	615a      	str	r2, [r3, #20]
	if(DLC>0)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d005      	beq.n	8000558 <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm11timestamp_t+0x54>
	{
		memcpy(me->payload, rxData, DLC);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	68b9      	ldr	r1, [r7, #8]
 8000552:	4618      	mov	r0, r3
 8000554:	f00a f88c 	bl	800a670 <memcpy>
	}
	return true;
 8000558:	2301      	movs	r3, #1
}
 800055a:	4618      	mov	r0, r3
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <_Z18CANmsg_set_payloadP8CANmsg_tPhm>:

bool CANmsg_set_payload(CANmsg_t *me, uint8_t *payload, uint32_t lenPayload)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b084      	sub	sp, #16
 8000566:	af00      	add	r7, sp, #0
 8000568:	60f8      	str	r0, [r7, #12]
 800056a:	60b9      	str	r1, [r7, #8]
 800056c:	607a      	str	r2, [r7, #4]
	if( (me==0) || (payload==0) )
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d002      	beq.n	800057a <_Z18CANmsg_set_payloadP8CANmsg_tPhm+0x18>
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d101      	bne.n	800057e <_Z18CANmsg_set_payloadP8CANmsg_tPhm+0x1c>
	{
		return false;
 800057a:	2300      	movs	r3, #0
 800057c:	e010      	b.n	80005a0 <_Z18CANmsg_set_payloadP8CANmsg_tPhm+0x3e>
	}

	if(lenPayload>0)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d009      	beq.n	8000598 <_Z18CANmsg_set_payloadP8CANmsg_tPhm+0x36>
	{
		memcpy(me->payload, payload, lenPayload);
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	68b9      	ldr	r1, [r7, #8]
 800058a:	4618      	mov	r0, r3
 800058c:	f00a f870 	bl	800a670 <memcpy>
		me->lenPayload = lenPayload;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	e002      	b.n	800059e <_Z18CANmsg_set_payloadP8CANmsg_tPhm+0x3c>
	}
	else
	{
		me->lenPayload = 0;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
	}

	return true;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d005      	beq.n	80005c4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	2203      	movs	r2, #3
 80005c2:	4798      	blx	r3
    }
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <_Z20CANslave_constructorP10CANslave_tP19__CAN_HandleTypeDefmP12localClock_t>:
//static CANmsg_t msgTimeStampStopServiceTest = {{0x04,0x03,0x02,0x01},4,timeStampServiceData,0x00};

static CANmsg_t msgTimeStampStartServiceData = {{},0,timeStampServiceData,0x00};

void CANslave_constructor(CANslave_t *me, CAN_HandleTypeDef *canHandler, uint32_t nodeID, localClock_t *localClock)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
 80005dc:	603b      	str	r3, [r7, #0]
	uint32_t i;

	stateMachine_constructor(&me->super, (stateHandler_t)&CANslave_initial);
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	4915      	ldr	r1, [pc, #84]	; (8000638 <_Z20CANslave_constructorP10CANslave_tP19__CAN_HandleTypeDefmP12localClock_t+0x68>)
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 f906 	bl	80017f4 <_Z24stateMachine_constructorP14stateMachine_tPF7state_tPvhE>

	me->m_canHandler = canHandler;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	605a      	str	r2, [r3, #4]
	me->m_nodeID = nodeID;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	621a      	str	r2, [r3, #32]

	me->m_canTxHeader.ExtId = 0;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
	me->m_canTxHeader.IDE = CAN_ID_STD;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
	me->m_canTxHeader.RTR = CAN_RTR_DATA;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
	me->m_canTxHeader.TransmitGlobalTime = DISABLE;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2200      	movs	r2, #0
 800060a:	771a      	strb	r2, [r3, #28]

	p_localClock = localClock;
 800060c:	4a0b      	ldr	r2, [pc, #44]	; (800063c <_Z20CANslave_constructorP10CANslave_tP19__CAN_HandleTypeDefmP12localClock_t+0x6c>)
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	6013      	str	r3, [r2, #0]

	for(i = 0; i < MAX_AUX_CAN_MSGS; i++)
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	e007      	b.n	8000628 <_Z20CANslave_constructorP10CANslave_tP19__CAN_HandleTypeDefmP12localClock_t+0x58>
	{
		messageIsInUse[i] = false;
 8000618:	4a09      	ldr	r2, [pc, #36]	; (8000640 <_Z20CANslave_constructorP10CANslave_tP19__CAN_HandleTypeDefmP12localClock_t+0x70>)
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	4413      	add	r3, r2
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < MAX_AUX_CAN_MSGS; i++)
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	3301      	adds	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	2b0b      	cmp	r3, #11
 800062c:	d9f4      	bls.n	8000618 <_Z20CANslave_constructorP10CANslave_tP19__CAN_HandleTypeDefmP12localClock_t+0x48>
	}
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	08000645 	.word	0x08000645
 800063c:	20000190 	.word	0x20000190
 8000640:	20000374 	.word	0x20000374

08000644 <_Z16CANslave_initialP10CANslave_t>:


state_t CANslave_initial(CANslave_t *me)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	; 0x30
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef canFilterConfigTimeMsgs;

	canFilterConfigTimeMsgs.FilterActivation = CAN_FILTER_ENABLE;
 800064c:	2301      	movs	r3, #1
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
	canFilterConfigTimeMsgs.FilterBank = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
	canFilterConfigTimeMsgs.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
	canFilterConfigTimeMsgs.FilterIdHigh = 0x0000;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
	canFilterConfigTimeMsgs.FilterIdLow = 0x0000;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
	canFilterConfigTimeMsgs.FilterMaskIdHigh = 0x00E0;
 8000660:	23e0      	movs	r3, #224	; 0xe0
 8000662:	613b      	str	r3, [r7, #16]
	canFilterConfigTimeMsgs.FilterMaskIdLow = 0x0000;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
	canFilterConfigTimeMsgs.FilterMode = CAN_FILTERMODE_IDMASK;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
	canFilterConfigTimeMsgs.FilterScale = CAN_FILTERSCALE_32BIT;
 800066c:	2301      	movs	r3, #1
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
	canFilterConfigTimeMsgs.SlaveStartFilterBank = 14;
 8000670:	230e      	movs	r3, #14
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(me->m_canHandler, &canFilterConfigTimeMsgs);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	f107 0208 	add.w	r2, r7, #8
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fbd2 	bl	8001e28 <HAL_CAN_ConfigFilter>

	return stateMachine_transition((stateMachine_t*)me, (stateHandler_t) CANslave_off);
 8000684:	4904      	ldr	r1, [pc, #16]	; (8000698 <_Z16CANslave_initialP10CANslave_t+0x54>)
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f001 f8f7 	bl	800187a <_Z23stateMachine_transitionP14stateMachine_tPF7state_tPvhE>
 800068c:	4603      	mov	r3, r0
}
 800068e:	4618      	mov	r0, r3
 8000690:	3730      	adds	r7, #48	; 0x30
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	0800069d 	.word	0x0800069d

0800069c <_Z12CANslave_offP10CANslave_th>:

state_t CANslave_off(CANslave_t *me, event_t const e)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]
	switch(e)
 80006a8:	78fb      	ldrb	r3, [r7, #3]
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	d116      	bne.n	80006dc <_Z12CANslave_offP10CANslave_th+0x40>
	{
		case EV_CAN_TURN_ON:
			HAL_CAN_Start(me->m_canHandler);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fc98 	bl	8001fe8 <HAL_CAN_Start>
			HAL_CAN_ActivateNotification(me->m_canHandler, CAN_IT_RX_FIFO0_MSG_PENDING);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	2102      	movs	r1, #2
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 ff36 	bl	8002530 <HAL_CAN_ActivateNotification>
			HAL_CAN_ActivateNotification(me->m_canHandler, CAN_IT_TX_MAILBOX_EMPTY);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	2101      	movs	r1, #1
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 ff30 	bl	8002530 <HAL_CAN_ActivateNotification>
			//HAL_CAN_ActivateNotification(me->m_canHandler, CAN_IT_ERROR);
			//HAL_CAN_ActivateNotification(me->m_canHandler, CAN_IT_BUSOFF);

			return stateMachine_transition((stateMachine_t*)me, (stateHandler_t) CANslave_on);
 80006d0:	4905      	ldr	r1, [pc, #20]	; (80006e8 <_Z12CANslave_offP10CANslave_th+0x4c>)
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f001 f8d1 	bl	800187a <_Z23stateMachine_transitionP14stateMachine_tPF7state_tPvhE>
 80006d8:	4603      	mov	r3, r0
 80006da:	e000      	b.n	80006de <_Z12CANslave_offP10CANslave_th+0x42>
	}

	return IGNORED;
 80006dc:	2301      	movs	r3, #1
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	080006ed 	.word	0x080006ed

080006ec <_Z11CANslave_onP10CANslave_th>:

state_t CANslave_on(CANslave_t *me, event_t const e)
{
 80006ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ee:	b093      	sub	sp, #76	; 0x4c
 80006f0:	af04      	add	r7, sp, #16
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
	uint32_t freeMailboxes;
	uint32_t i;
	uint32_t txMailbox;
	uint8_t  timeStampData[MAX_LEN_PAYLOAD_CAN];

	switch(e)
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	2b07      	cmp	r3, #7
 80006fe:	f200 8121 	bhi.w	8000944 <_Z11CANslave_onP10CANslave_th+0x258>
 8000702:	a201      	add	r2, pc, #4	; (adr r2, 8000708 <_Z11CANslave_onP10CANslave_th+0x1c>)
 8000704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000708:	08000729 	.word	0x08000729
 800070c:	0800072d 	.word	0x0800072d
 8000710:	08000945 	.word	0x08000945
 8000714:	08000945 	.word	0x08000945
 8000718:	08000731 	.word	0x08000731
 800071c:	08000819 	.word	0x08000819
 8000720:	08000897 	.word	0x08000897
 8000724:	0800075f 	.word	0x0800075f
	{
		case EV_ENTRY:

			return HANDLED;
 8000728:	2300      	movs	r3, #0
 800072a:	e10c      	b.n	8000946 <_Z11CANslave_onP10CANslave_th+0x25a>

		case EV_EXIT:

			return HANDLED;
 800072c:	2300      	movs	r3, #0
 800072e:	e10a      	b.n	8000946 <_Z11CANslave_onP10CANslave_th+0x25a>

		case EV_CAN_TURN_OFF:
			HAL_CAN_DeactivateNotification(me->m_canHandler, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	2102      	movs	r1, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f001 ff20 	bl	800257c <HAL_CAN_DeactivateNotification>
			//HAL_CAN_DeactivateNotification(me->m_canHandler, CAN_IT_ERROR);
			//HAL_CAN_DeactivateNotification(me->m_canHandler, CAN_IT_BUSOFF);
			HAL_CAN_DeactivateNotification(me->m_canHandler, CAN_IT_TX_MAILBOX_EMPTY);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	2101      	movs	r1, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f001 ff1a 	bl	800257c <HAL_CAN_DeactivateNotification>
			HAL_CAN_Stop(me->m_canHandler);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	4618      	mov	r0, r3
 800074e:	f001 fc8f 	bl	8002070 <HAL_CAN_Stop>

			return stateMachine_transition((stateMachine_t*)me, (stateHandler_t) CANslave_off);
 8000752:	497f      	ldr	r1, [pc, #508]	; (8000950 <_Z11CANslave_onP10CANslave_th+0x264>)
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f001 f890 	bl	800187a <_Z23stateMachine_transitionP14stateMachine_tPF7state_tPvhE>
 800075a:	4603      	mov	r3, r0
 800075c:	e0f3      	b.n	8000946 <_Z11CANslave_onP10CANslave_th+0x25a>

		case EV_CAN_FETCH_NEW_MSGS:
			for(i = 0; i < MAX_AUX_CAN_MSGS; i++)
 800075e:	2300      	movs	r3, #0
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
 8000762:	e054      	b.n	800080e <_Z11CANslave_onP10CANslave_th+0x122>
			{
				if(messageIsInUse[i] == true)
 8000764:	4a7b      	ldr	r2, [pc, #492]	; (8000954 <_Z11CANslave_onP10CANslave_th+0x268>)
 8000766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000768:	4413      	add	r3, r2
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b01      	cmp	r3, #1
 8000770:	bf0c      	ite	eq
 8000772:	2301      	moveq	r3, #1
 8000774:	2300      	movne	r3, #0
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	d045      	beq.n	8000808 <_Z11CANslave_onP10CANslave_th+0x11c>
				{
					if( CANmsg_make_from_raw_data(&canMsg, auxCANmessages[i].rxData, auxCANmessages[i].rxHeader.DLC, auxCANmessages[i].rxHeader.StdId, auxCANmessages[i].timestamp) == true )
 800077c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800077e:	4613      	mov	r3, r2
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4413      	add	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	3318      	adds	r3, #24
 8000788:	4a73      	ldr	r2, [pc, #460]	; (8000958 <_Z11CANslave_onP10CANslave_th+0x26c>)
 800078a:	4413      	add	r3, r2
 800078c:	1d19      	adds	r1, r3, #4
 800078e:	4872      	ldr	r0, [pc, #456]	; (8000958 <_Z11CANslave_onP10CANslave_th+0x26c>)
 8000790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000792:	4613      	mov	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4413      	add	r3, r2
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	4403      	add	r3, r0
 800079c:	3310      	adds	r3, #16
 800079e:	681c      	ldr	r4, [r3, #0]
 80007a0:	486d      	ldr	r0, [pc, #436]	; (8000958 <_Z11CANslave_onP10CANslave_th+0x26c>)
 80007a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007a4:	4613      	mov	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	4403      	add	r3, r0
 80007ae:	681d      	ldr	r5, [r3, #0]
 80007b0:	f107 0018 	add.w	r0, r7, #24
 80007b4:	4e68      	ldr	r6, [pc, #416]	; (8000958 <_Z11CANslave_onP10CANslave_th+0x26c>)
 80007b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	4433      	add	r3, r6
 80007c2:	3324      	adds	r3, #36	; 0x24
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	462b      	mov	r3, r5
 80007ca:	4622      	mov	r2, r4
 80007cc:	f7ff fe9a 	bl	8000504 <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm11timestamp_t>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	bf0c      	ite	eq
 80007d6:	2301      	moveq	r3, #1
 80007d8:	2300      	movne	r3, #0
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d013      	beq.n	8000808 <_Z11CANslave_onP10CANslave_th+0x11c>
					{
						p_canRxBuffer->write(canMsg);
 80007e0:	4b5e      	ldr	r3, [pc, #376]	; (800095c <_Z11CANslave_onP10CANslave_th+0x270>)
 80007e2:	681d      	ldr	r5, [r3, #0]
 80007e4:	466c      	mov	r4, sp
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007f8:	4628      	mov	r0, r5
 80007fa:	f000 f921 	bl	8000a40 <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_>
						messageIsInUse[i] = false;
 80007fe:	4a55      	ldr	r2, [pc, #340]	; (8000954 <_Z11CANslave_onP10CANslave_th+0x268>)
 8000800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000802:	4413      	add	r3, r2
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
			for(i = 0; i < MAX_AUX_CAN_MSGS; i++)
 8000808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080a:	3301      	adds	r3, #1
 800080c:	637b      	str	r3, [r7, #52]	; 0x34
 800080e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000810:	2b0b      	cmp	r3, #11
 8000812:	d9a7      	bls.n	8000764 <_Z11CANslave_onP10CANslave_th+0x78>
					}
				}
			}

			return HANDLED;
 8000814:	2300      	movs	r3, #0
 8000816:	e096      	b.n	8000946 <_Z11CANslave_onP10CANslave_th+0x25a>

		case EV_CAN_SEND_NEXT_MSG:
			freeMailboxes = HAL_CAN_GetTxMailboxesFreeLevel(me->m_canHandler);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fd40 	bl	80022a2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000822:	6338      	str	r0, [r7, #48]	; 0x30
			i = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	637b      	str	r3, [r7, #52]	; 0x34
			while( (!(p_canTxBuffer->is_empty())) && (i < freeMailboxes))
 8000828:	e01f      	b.n	800086a <_Z11CANslave_onP10CANslave_th+0x17e>
			{
				p_canTxBuffer->read(&canMsg);
 800082a:	4b4d      	ldr	r3, [pc, #308]	; (8000960 <_Z11CANslave_onP10CANslave_th+0x274>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f107 0218 	add.w	r2, r7, #24
 8000832:	4611      	mov	r1, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f000 f975 	bl	8000b24 <_ZN11circ_bufferI8CANmsg_tLm128EtE4readEPS0_>
				me->m_canTxHeader.StdId = CAN_MSG_GET_STD_ID(canMsg.id, me->m_nodeID);
 800083a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083c:	00da      	lsls	r2, r3, #3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6a1b      	ldr	r3, [r3, #32]
 8000842:	431a      	orrs	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	609a      	str	r2, [r3, #8]
				me->m_canTxHeader.DLC = canMsg.lenPayload;
 8000848:	6a3a      	ldr	r2, [r7, #32]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	619a      	str	r2, [r3, #24]
				HAL_CAN_AddTxMessage(me->m_canHandler, &me->m_canTxHeader, canMsg.payload, &txMailbox);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6858      	ldr	r0, [r3, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f103 0108 	add.w	r1, r3, #8
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	f107 0218 	add.w	r2, r7, #24
 8000860:	f001 fc4f 	bl	8002102 <HAL_CAN_AddTxMessage>
				i++;
 8000864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000866:	3301      	adds	r3, #1
 8000868:	637b      	str	r3, [r7, #52]	; 0x34
			while( (!(p_canTxBuffer->is_empty())) && (i < freeMailboxes))
 800086a:	4b3d      	ldr	r3, [pc, #244]	; (8000960 <_Z11CANslave_onP10CANslave_th+0x274>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f94b 	bl	8000b0a <_ZN11circ_bufferI8CANmsg_tLm128EtE8is_emptyEv>
 8000874:	4603      	mov	r3, r0
 8000876:	f083 0301 	eor.w	r3, r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d005      	beq.n	800088c <_Z11CANslave_onP10CANslave_th+0x1a0>
 8000880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000884:	429a      	cmp	r2, r3
 8000886:	d201      	bcs.n	800088c <_Z11CANslave_onP10CANslave_th+0x1a0>
 8000888:	2301      	movs	r3, #1
 800088a:	e000      	b.n	800088e <_Z11CANslave_onP10CANslave_th+0x1a2>
 800088c:	2300      	movs	r3, #0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d1cb      	bne.n	800082a <_Z11CANslave_onP10CANslave_th+0x13e>
			}

			return HANDLED;
 8000892:	2300      	movs	r3, #0
 8000894:	e057      	b.n	8000946 <_Z11CANslave_onP10CANslave_th+0x25a>

		case EV_CAN_PROCESS_NEW_MSG:
			i = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	637b      	str	r3, [r7, #52]	; 0x34
			while( (p_canRxBuffer->read(&canMsg) != 0) && (i < 3) )
 800089a:	e03e      	b.n	800091a <_Z11CANslave_onP10CANslave_th+0x22e>
			{
				switch(canMsg.id)
 800089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089e:	2b07      	cmp	r3, #7
 80008a0:	d020      	beq.n	80008e4 <_Z11CANslave_onP10CANslave_th+0x1f8>
 80008a2:	2b07      	cmp	r3, #7
 80008a4:	d835      	bhi.n	8000912 <_Z11CANslave_onP10CANslave_th+0x226>
 80008a6:	2b05      	cmp	r3, #5
 80008a8:	d002      	beq.n	80008b0 <_Z11CANslave_onP10CANslave_th+0x1c4>
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	d006      	beq.n	80008bc <_Z11CANslave_onP10CANslave_th+0x1d0>
						CANmsg_set_payload(&msgTimeStampStartServiceData, timeStampData, sizeof(canMsg.timestamp.timeStampCounter));
						p_canTxBuffer->write(msgTimeStampStartServiceData);
						break;

					default:
						break;
 80008ae:	e030      	b.n	8000912 <_Z11CANslave_onP10CANslave_th+0x226>
						localClock_start(p_localClock);
 80008b0:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <_Z11CANslave_onP10CANslave_th+0x278>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 fcbb 	bl	8001230 <_Z16localClock_startP12localClock_t>
						break;
 80008ba:	e02b      	b.n	8000914 <_Z11CANslave_onP10CANslave_th+0x228>
						localClock_stop(p_localClock);
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <_Z11CANslave_onP10CANslave_th+0x278>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fcce 	bl	8001262 <_Z15localClock_stopP12localClock_t>
						for(i = 0; i < MAX_AUX_CAN_MSGS; i++)
 80008c6:	2300      	movs	r3, #0
 80008c8:	637b      	str	r3, [r7, #52]	; 0x34
 80008ca:	e007      	b.n	80008dc <_Z11CANslave_onP10CANslave_th+0x1f0>
							messageIsInUse[i] = false;
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <_Z11CANslave_onP10CANslave_th+0x268>)
 80008ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d0:	4413      	add	r3, r2
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
						for(i = 0; i < MAX_AUX_CAN_MSGS; i++)
 80008d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d8:	3301      	adds	r3, #1
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
 80008dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008de:	2b0b      	cmp	r3, #11
 80008e0:	d9f4      	bls.n	80008cc <_Z11CANslave_onP10CANslave_th+0x1e0>
						break;
 80008e2:	e017      	b.n	8000914 <_Z11CANslave_onP10CANslave_th+0x228>
 80008e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
						memcpy(timeStampData, &(canMsg.timestamp.timeStampCounter), sizeof(canMsg.timestamp.timeStampCounter));
 80008e6:	60fb      	str	r3, [r7, #12]
						CANmsg_set_payload(&msgTimeStampStartServiceData, timeStampData, sizeof(canMsg.timestamp.timeStampCounter));
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	2204      	movs	r2, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	481d      	ldr	r0, [pc, #116]	; (8000968 <_Z11CANslave_onP10CANslave_th+0x27c>)
 80008f2:	f7ff fe36 	bl	8000562 <_Z18CANmsg_set_payloadP8CANmsg_tPhm>
						p_canTxBuffer->write(msgTimeStampStartServiceData);
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <_Z11CANslave_onP10CANslave_th+0x274>)
 80008f8:	681d      	ldr	r5, [r3, #0]
 80008fa:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <_Z11CANslave_onP10CANslave_th+0x27c>)
 80008fc:	466c      	mov	r4, sp
 80008fe:	f103 020c 	add.w	r2, r3, #12
 8000902:	ca07      	ldmia	r2, {r0, r1, r2}
 8000904:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000908:	cb0e      	ldmia	r3, {r1, r2, r3}
 800090a:	4628      	mov	r0, r5
 800090c:	f000 f898 	bl	8000a40 <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_>
						break;
 8000910:	e000      	b.n	8000914 <_Z11CANslave_onP10CANslave_th+0x228>
						break;
 8000912:	bf00      	nop
				}
				i++;
 8000914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000916:	3301      	adds	r3, #1
 8000918:	637b      	str	r3, [r7, #52]	; 0x34
			while( (p_canRxBuffer->read(&canMsg) != 0) && (i < 3) )
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <_Z11CANslave_onP10CANslave_th+0x270>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f107 0218 	add.w	r2, r7, #24
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f000 f8fd 	bl	8000b24 <_ZN11circ_bufferI8CANmsg_tLm128EtE4readEPS0_>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d004      	beq.n	800093a <_Z11CANslave_onP10CANslave_th+0x24e>
 8000930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000932:	2b02      	cmp	r3, #2
 8000934:	d801      	bhi.n	800093a <_Z11CANslave_onP10CANslave_th+0x24e>
 8000936:	2301      	movs	r3, #1
 8000938:	e000      	b.n	800093c <_Z11CANslave_onP10CANslave_th+0x250>
 800093a:	2300      	movs	r3, #0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1ad      	bne.n	800089c <_Z11CANslave_onP10CANslave_th+0x1b0>
			}

			return HANDLED;
 8000940:	2300      	movs	r3, #0
 8000942:	e000      	b.n	8000946 <_Z11CANslave_onP10CANslave_th+0x25a>
	}

	return IGNORED;
 8000944:	2301      	movs	r3, #1
}
 8000946:	4618      	mov	r0, r3
 8000948:	373c      	adds	r7, #60	; 0x3c
 800094a:	46bd      	mov	sp, r7
 800094c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094e:	bf00      	nop
 8000950:	0800069d 	.word	0x0800069d
 8000954:	20000374 	.word	0x20000374
 8000958:	20000194 	.word	0x20000194
 800095c:	0800a788 	.word	0x0800a788
 8000960:	0800a784 	.word	0x0800a784
 8000964:	20000190 	.word	0x20000190
 8000968:	20000000 	.word	0x20000000

0800096c <HAL_CAN_RxFifo0MsgPendingCallback>:

/** Callback para la interrupción de CAN. Esta interrupción salta cuando hay
 *  nuevos datos en la FIFO 0 de CAN. */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]

	while((i < MAX_AUX_CAN_MSGS) && (messageIsInUse[i] == true))
 8000978:	e002      	b.n	8000980 <HAL_CAN_RxFifo0MsgPendingCallback+0x14>
	{
		i++;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	3301      	adds	r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
	while((i < MAX_AUX_CAN_MSGS) && (messageIsInUse[i] == true))
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2b0b      	cmp	r3, #11
 8000984:	d808      	bhi.n	8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
 8000986:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b01      	cmp	r3, #1
 8000992:	d101      	bne.n	8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
 8000994:	2301      	movs	r3, #1
 8000996:	e000      	b.n	800099a <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
 8000998:	2300      	movs	r3, #0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1ed      	bne.n	800097a <HAL_CAN_RxFifo0MsgPendingCallback+0xe>
	}
	if(i < MAX_AUX_CAN_MSGS)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2b0b      	cmp	r3, #11
 80009a2:	d833      	bhi.n	8000a0c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
	{
		auxCANmessages[i].timestamp = localClock_get_timestamp(p_localClock);
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80009a6:	6819      	ldr	r1, [r3, #0]
 80009a8:	481c      	ldr	r0, [pc, #112]	; (8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	4613      	mov	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4413      	add	r3, r2
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	4403      	add	r3, r0
 80009b6:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80009ba:	4608      	mov	r0, r1
 80009bc:	f000 fc64 	bl	8001288 <_Z24localClock_get_timestampP12localClock_t>
 80009c0:	6020      	str	r0, [r4, #0]
		if( HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &(auxCANmessages[i].rxHeader), auxCANmessages[i].rxData) == HAL_OK )
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4613      	mov	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80009ce:	1899      	adds	r1, r3, r2
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	4613      	mov	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	3318      	adds	r3, #24
 80009dc:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80009de:	4413      	add	r3, r2
 80009e0:	3304      	adds	r3, #4
 80009e2:	460a      	mov	r2, r1
 80009e4:	2100      	movs	r1, #0
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f001 fc90 	bl	800230c <HAL_CAN_GetRxMessage>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	bf0c      	ite	eq
 80009f2:	2301      	moveq	r3, #1
 80009f4:	2300      	movne	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d007      	beq.n	8000a0c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
		{
			messageIsInUse[i] = true;
 80009fc:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	4413      	add	r3, r2
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
			flagNewCANdataRx0 = 1;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd90      	pop	{r4, r7, pc}
 8000a14:	20000374 	.word	0x20000374
 8000a18:	20000190 	.word	0x20000190
 8000a1c:	20000194 	.word	0x20000194
 8000a20:	20000440 	.word	0x20000440

08000a24 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	canMsgLostLED.toggle();
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 8000a2e:	f000 faed 	bl	800100c <_ZN5STM324gpio6toggleEv>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000380 	.word	0x20000380

08000a40 <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_>:
	mSize_ = 0;

}

template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::write(bufferDataType data)
 8000a40:	b084      	sub	sp, #16
 8000a42:	b4b0      	push	{r4, r5, r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	f107 001c 	add.w	r0, r7, #28
 8000a4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//if (mFull_){
	//    bufferOverloaded = true;
	//    return EXIT_ERROR;
	//}

	mBuffer_[mHead_] = data;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	; 0xc04
 8000a58:	4619      	mov	r1, r3
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	440b      	add	r3, r1
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	4413      	add	r3, r2
 8000a66:	1d1c      	adds	r4, r3, #4
 8000a68:	f107 051c 	add.w	r5, r7, #28
 8000a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a74:	e884 0003 	stmia.w	r4, {r0, r1}
	mEmpty_ = false;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09


	if(++mHead_ == sCapacity_){
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	; 0xc04
 8000a86:	3301      	adds	r3, #1
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f8b3 3c04 	ldrh.w	r3, [r3, #3076]	; 0xc04
 8000a96:	2b80      	cmp	r3, #128	; 0x80
 8000a98:	bf0c      	ite	eq
 8000a9a:	2301      	moveq	r3, #1
 8000a9c:	2300      	movne	r3, #0
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_+0x6c>
		mHead_ = 0;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
	}

	// In case buffer was full, tail object must be updated so that old data is overwritten, ow check is buffer is full
	if(mFull_ == true){
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f893 3c08 	ldrb.w	r3, [r3, #3080]	; 0xc08
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d10f      	bne.n	8000ad6 <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_+0x96>
		mTail_ = mTail_ + 1 == sCapacity_ ? 0 : mTail_ + 1; // mTail_ = ++mTail_ == sCapacity_ ? 0 : mTail_;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000abc:	2b7f      	cmp	r3, #127	; 0x7f
 8000abe:	d005      	beq.n	8000acc <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_+0x8c>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	e000      	b.n	8000ace <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_+0x8e>
 8000acc:	2200      	movs	r2, #0
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
 8000ad4:	e012      	b.n	8000afc <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_+0xbc>
	}else if(++mSize_ == sCapacity_){
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	801a      	strh	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	2b80      	cmp	r3, #128	; 0x80
 8000ae8:	bf0c      	ite	eq
 8000aea:	2301      	moveq	r3, #1
 8000aec:	2300      	movne	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_+0xbc>
		mFull_ = true;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2201      	movs	r2, #1
 8000af8:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
	}
	return EXIT_OK;
 8000afc:	2301      	movs	r3, #1
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bcb0      	pop	{r4, r5, r7}
 8000b06:	b004      	add	sp, #16
 8000b08:	4770      	bx	lr

08000b0a <_ZN11circ_bufferI8CANmsg_tLm128EtE8is_emptyEv>:
// bufferDataType* circ_buffer<bufferDataType, N, sizeDataType>::get_tail_ptr(){
//     return &mBuffer_[mTail_];
// }

template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::is_empty(){
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
	return mEmpty_;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f893 3c09 	ldrb.w	r3, [r3, #3081]	; 0xc09
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <_ZN11circ_bufferI8CANmsg_tLm128EtE4readEPS0_>:
bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::read(bufferDataType* pData)
 8000b24:	b4b0      	push	{r4, r5, r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
	if (mEmpty_){
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f893 3c09 	ldrb.w	r3, [r3, #3081]	; 0xc09
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <_ZN11circ_bufferI8CANmsg_tLm128EtE4readEPS0_+0x18>
		return EXIT_ERROR;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e040      	b.n	8000bbe <_ZN11circ_bufferI8CANmsg_tLm128EtE4readEPS0_+0x9a>
	*pData = mBuffer_[mTail_];
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000b42:	4619      	mov	r1, r3
 8000b44:	6838      	ldr	r0, [r7, #0]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	440b      	add	r3, r1
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	4413      	add	r3, r2
 8000b52:	4605      	mov	r5, r0
 8000b54:	1d1c      	adds	r4, r3, #4
 8000b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b5e:	e885 0003 	stmia.w	r5, {r0, r1}
	mFull_ = false;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
	if(--mSize_ == 0){
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	801a      	strh	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	bf0c      	ite	eq
 8000b7e:	2301      	moveq	r3, #1
 8000b80:	2300      	movne	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <_ZN11circ_bufferI8CANmsg_tLm128EtE4readEPS0_+0x6c>
		mEmpty_ = true;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09
	if(++mTail_ == sCapacity_){
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000b96:	3301      	adds	r3, #1
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8000ba6:	2b80      	cmp	r3, #128	; 0x80
 8000ba8:	bf0c      	ite	eq
 8000baa:	2301      	moveq	r3, #1
 8000bac:	2300      	movne	r3, #0
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d003      	beq.n	8000bbc <_ZN11circ_bufferI8CANmsg_tLm128EtE4readEPS0_+0x98>
		mTail_ = 0;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
	return EXIT_OK;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bcb0      	pop	{r4, r5, r7}
 8000bc6:	4770      	bx	lr

08000bc8 <_ZNSt8functionIFvvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fce8 	bl	80005a8 <_ZNSt14_Function_baseD1Ev>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <_ZN5STM324gpioD1Ev>:
};


namespace STM32{

    class gpio{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ffeb 	bl	8000bc8 <_ZNSt8functionIFvvEED1Ev>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_Z41__static_initialization_and_destruction_0ii>:
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d109      	bne.n	8000c20 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d104      	bne.n	8000c20 <_Z41__static_initialization_and_destruction_0ii+0x24>
static STM32::gpio canMsgLostLED(LED5_GPIO_Port, LED5_Pin);
 8000c16:	2210      	movs	r2, #16
 8000c18:	4909      	ldr	r1, [pc, #36]	; (8000c40 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000c1a:	480a      	ldr	r0, [pc, #40]	; (8000c44 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8000c1c:	f000 f9e0 	bl	8000fe0 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d107      	bne.n	8000c36 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d102      	bne.n	8000c36 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8000c32:	f7ff ffd6 	bl	8000be2 <_ZN5STM324gpioD1Ev>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40021400 	.word	0x40021400
 8000c44:	20000380 	.word	0x20000380

08000c48 <_GLOBAL__sub_I__Z20CANslave_constructorP10CANslave_tP19__CAN_HandleTypeDefmP12localClock_t>:
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c50:	2001      	movs	r0, #1
 8000c52:	f7ff ffd3 	bl	8000bfc <_Z41__static_initialization_and_destruction_0ii>
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_GLOBAL__sub_D__Z20CANslave_constructorP10CANslave_tP19__CAN_HandleTypeDefmP12localClock_t>:
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff ffcb 	bl	8000bfc <_Z41__static_initialization_and_destruction_0ii>
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_CAN1_Init+0x68>)
 8000c6e:	4a19      	ldr	r2, [pc, #100]	; (8000cd4 <MX_CAN1_Init+0x6c>)
 8000c70:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_CAN1_Init+0x68>)
 8000c74:	2206      	movs	r2, #6
 8000c76:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_CAN1_Init+0x68>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_CAN1_Init+0x68>)
 8000c80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c84:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_CAN1_Init+0x68>)
 8000c88:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000c8c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_CAN1_Init+0x68>)
 8000c90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c94:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_CAN1_Init+0x68>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_CAN1_Init+0x68>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_CAN1_Init+0x68>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_CAN1_Init+0x68>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_CAN1_Init+0x68>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_CAN1_Init+0x68>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_CAN1_Init+0x68>)
 8000cbc:	f000 ffb8 	bl	8001c30 <HAL_CAN_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000cc6:	f000 fbfd 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000398 	.word	0x20000398
 8000cd4:	40006400 	.word	0x40006400

08000cd8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_CAN2_Init+0x68>)
 8000cde:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <MX_CAN2_Init+0x6c>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <MX_CAN2_Init+0x68>)
 8000ce4:	2206      	movs	r2, #6
 8000ce6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_CAN2_Init+0x68>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <MX_CAN2_Init+0x68>)
 8000cf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000cf4:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_CAN2_Init+0x68>)
 8000cf8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000cfc:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_CAN2_Init+0x68>)
 8000d00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d04:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_CAN2_Init+0x68>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_CAN2_Init+0x68>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_CAN2_Init+0x68>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_CAN2_Init+0x68>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_CAN2_Init+0x68>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_CAN2_Init+0x68>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_CAN2_Init+0x68>)
 8000d2c:	f000 ff80 	bl	8001c30 <HAL_CAN_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000d36:	f000 fbc5 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200003c0 	.word	0x200003c0
 8000d44:	40006800 	.word	0x40006800

08000d48 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	; 0x30
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a45      	ldr	r2, [pc, #276]	; (8000e7c <HAL_CAN_MspInit+0x134>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d142      	bne.n	8000df0 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d6a:	4b45      	ldr	r3, [pc, #276]	; (8000e80 <HAL_CAN_MspInit+0x138>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	4a43      	ldr	r2, [pc, #268]	; (8000e80 <HAL_CAN_MspInit+0x138>)
 8000d72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000d74:	4b42      	ldr	r3, [pc, #264]	; (8000e80 <HAL_CAN_MspInit+0x138>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d10b      	bne.n	8000d94 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000d7c:	4b41      	ldr	r3, [pc, #260]	; (8000e84 <HAL_CAN_MspInit+0x13c>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	4a40      	ldr	r2, [pc, #256]	; (8000e84 <HAL_CAN_MspInit+0x13c>)
 8000d82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
 8000d88:	4b3e      	ldr	r3, [pc, #248]	; (8000e84 <HAL_CAN_MspInit+0x13c>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <HAL_CAN_MspInit+0x13c>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a3a      	ldr	r2, [pc, #232]	; (8000e84 <HAL_CAN_MspInit+0x13c>)
 8000d9a:	f043 0302 	orr.w	r3, r3, #2
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <HAL_CAN_MspInit+0x13c>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000dbe:	2309      	movs	r3, #9
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	482f      	ldr	r0, [pc, #188]	; (8000e88 <HAL_CAN_MspInit+0x140>)
 8000dca:	f001 ff35 	bl	8002c38 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2014      	movs	r0, #20
 8000dd4:	f001 fef9 	bl	8002bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000dd8:	2014      	movs	r0, #20
 8000dda:	f001 ff12 	bl	8002c02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	2016      	movs	r0, #22
 8000de4:	f001 fef1 	bl	8002bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000de8:	2016      	movs	r0, #22
 8000dea:	f001 ff0a 	bl	8002c02 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000dee:	e041      	b.n	8000e74 <HAL_CAN_MspInit+0x12c>
  else if(canHandle->Instance==CAN2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a25      	ldr	r2, [pc, #148]	; (8000e8c <HAL_CAN_MspInit+0x144>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d13c      	bne.n	8000e74 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000dfa:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <HAL_CAN_MspInit+0x13c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <HAL_CAN_MspInit+0x13c>)
 8000e00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <HAL_CAN_MspInit+0x13c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <HAL_CAN_MspInit+0x138>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	3301      	adds	r3, #1
 8000e18:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_CAN_MspInit+0x138>)
 8000e1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_CAN_MspInit+0x138>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d10b      	bne.n	8000e3c <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <HAL_CAN_MspInit+0x13c>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	4a16      	ldr	r2, [pc, #88]	; (8000e84 <HAL_CAN_MspInit+0x13c>)
 8000e2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <HAL_CAN_MspInit+0x13c>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_CAN_MspInit+0x13c>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_CAN_MspInit+0x13c>)
 8000e42:	f043 0302 	orr.w	r3, r3, #2
 8000e46:	6313      	str	r3, [r2, #48]	; 0x30
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_CAN_MspInit+0x13c>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e54:	2360      	movs	r3, #96	; 0x60
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000e64:	2309      	movs	r3, #9
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <HAL_CAN_MspInit+0x140>)
 8000e70:	f001 fee2 	bl	8002c38 <HAL_GPIO_Init>
}
 8000e74:	bf00      	nop
 8000e76:	3730      	adds	r7, #48	; 0x30
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40006400 	.word	0x40006400
 8000e80:	200003e8 	.word	0x200003e8
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	40006800 	.word	0x40006800

08000e90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	; 0x30
 8000e94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea6:	4b49      	ldr	r3, [pc, #292]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a48      	ldr	r2, [pc, #288]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000eac:	f043 0310 	orr.w	r3, r3, #16
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	61bb      	str	r3, [r7, #24]
 8000ebc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ebe:	4b43      	ldr	r3, [pc, #268]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a42      	ldr	r2, [pc, #264]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000ec4:	f043 0320 	orr.w	r3, r3, #32
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b40      	ldr	r3, [pc, #256]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0320 	and.w	r3, r3, #32
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed6:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a3c      	ldr	r2, [pc, #240]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	4b37      	ldr	r3, [pc, #220]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a36      	ldr	r2, [pc, #216]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b34      	ldr	r3, [pc, #208]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a30      	ldr	r2, [pc, #192]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b2e      	ldr	r3, [pc, #184]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a2a      	ldr	r2, [pc, #168]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <MX_GPIO_Init+0x13c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED2_Pin|LED1_Pin|LED7_Pin|LED4_Pin
 8000f36:	2200      	movs	r2, #0
 8000f38:	217a      	movs	r1, #122	; 0x7a
 8000f3a:	4825      	ldr	r0, [pc, #148]	; (8000fd0 <MX_GPIO_Init+0x140>)
 8000f3c:	f002 f828 	bl	8002f90 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED6_Pin|LED8_Pin|LED5_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	211c      	movs	r1, #28
 8000f44:	4823      	ldr	r0, [pc, #140]	; (8000fd4 <MX_GPIO_Init+0x144>)
 8000f46:	f002 f823 	bl	8002f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f50:	4821      	ldr	r0, [pc, #132]	; (8000fd8 <MX_GPIO_Init+0x148>)
 8000f52:	f002 f81d 	bl	8002f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED7_Pin|LED4_Pin
 8000f56:	237a      	movs	r3, #122	; 0x7a
 8000f58:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4818      	ldr	r0, [pc, #96]	; (8000fd0 <MX_GPIO_Init+0x140>)
 8000f6e:	f001 fe63 	bl	8002c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED6_Pin|LED8_Pin|LED5_Pin;
 8000f72:	231c      	movs	r3, #28
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	4812      	ldr	r0, [pc, #72]	; (8000fd4 <MX_GPIO_Init+0x144>)
 8000f8a:	f001 fe55 	bl	8002c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <MX_GPIO_Init+0x148>)
 8000fa8:	f001 fe46 	bl	8002c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_SW_Pin;
 8000fac:	2308      	movs	r3, #8
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_SW_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4807      	ldr	r0, [pc, #28]	; (8000fdc <MX_GPIO_Init+0x14c>)
 8000fc0:	f001 fe3a 	bl	8002c38 <HAL_GPIO_Init>

}
 8000fc4:	bf00      	nop
 8000fc6:	3730      	adds	r7, #48	; 0x30
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40021400 	.word	0x40021400
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40020c00 	.word	0x40020c00

08000fe0 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>:
#include "stm32f7xx_hal.h"


namespace STM32{

    gpio::gpio(GPIO_TypeDef* pPortHandler, uint16_t pin)
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	4613      	mov	r3, r2
 8000fec:	80fb      	strh	r3, [r7, #6]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f854 	bl	800109e <_ZNSt8functionIFvvEEC1Ev>
    {
        m_portHandler = pPortHandler;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	611a      	str	r2, [r3, #16]
        m_pin = pin;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	88fa      	ldrh	r2, [r7, #6]
 8001000:	829a      	strh	r2, [r3, #20]
    }
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <_ZN5STM324gpio6toggleEv>:
        GPIO_PinState ret = HAL_GPIO_ReadPin(m_portHandler, m_pin);
        return ret == GPIO_PIN_SET ? GPIO_ST::HIGH : GPIO_ST::LOW;
    }

    void gpio::toggle()
    {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
        HAL_GPIO_TogglePin(m_portHandler, m_pin);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691a      	ldr	r2, [r3, #16]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	8a9b      	ldrh	r3, [r3, #20]
 800101c:	4619      	mov	r1, r3
 800101e:	4610      	mov	r0, r2
 8001020:	f001 ffcf 	bl	8002fc2 <HAL_GPIO_TogglePin>
    }
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <_ZN5STM324gpio5writeE7GPIO_ST>:

    void gpio::write(GPIO_ST st)
    {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
        GPIO_PinState pinState = map_hal_st_to_igpio_st(st); 
 8001036:	6838      	ldr	r0, [r7, #0]
 8001038:	f000 f80e 	bl	8001058 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>
 800103c:	4603      	mov	r3, r0
 800103e:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(m_portHandler, m_pin, pinState);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6918      	ldr	r0, [r3, #16]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	8a9b      	ldrh	r3, [r3, #20]
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	4619      	mov	r1, r3
 800104c:	f001 ffa0 	bl	8002f90 <HAL_GPIO_WritePin>
    }
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>:

    GPIO_PinState gpio::map_hal_st_to_igpio_st(GPIO_ST st)
	{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
		return st == GPIO_ST::HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x12>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x14>
 800106a:	2300      	movs	r3, #0
	}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	461a      	mov	r2, r3
 8001084:	2300      	movs	r3, #0
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	6053      	str	r3, [r2, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	461a      	mov	r2, r3
 80010aa:	2300      	movs	r3, #0
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	6053      	str	r3, [r2, #4]
 80010b0:	6093      	str	r3, [r2, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ffdf 	bl	8001078 <_ZNSt14_Function_baseC1Ev>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_I2C4_Init+0x74>)
 80010d2:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <MX_I2C4_Init+0x78>)
 80010d4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_I2C4_Init+0x74>)
 80010d8:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <MX_I2C4_Init+0x7c>)
 80010da:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_I2C4_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_I2C4_Init+0x74>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_I2C4_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_I2C4_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <MX_I2C4_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_I2C4_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_I2C4_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001106:	480e      	ldr	r0, [pc, #56]	; (8001140 <MX_I2C4_Init+0x74>)
 8001108:	f001 ff76 	bl	8002ff8 <HAL_I2C_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001112:	f000 f9d7 	bl	80014c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001116:	2100      	movs	r1, #0
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <MX_I2C4_Init+0x74>)
 800111a:	f001 fffd 	bl	8003118 <HAL_I2CEx_ConfigAnalogFilter>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001124:	f000 f9ce 	bl	80014c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001128:	2100      	movs	r1, #0
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_I2C4_Init+0x74>)
 800112c:	f002 f83f 	bl	80031ae <HAL_I2CEx_ConfigDigitalFilter>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001136:	f000 f9c5 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200003ec 	.word	0x200003ec
 8001144:	40006000 	.word	0x40006000
 8001148:	20404768 	.word	0x20404768

0800114c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b0aa      	sub	sp, #168	; 0xa8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	2284      	movs	r2, #132	; 0x84
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f009 fa3b 	bl	800a5e8 <memset>
  if(i2cHandle->Instance==I2C4)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a22      	ldr	r2, [pc, #136]	; (8001200 <HAL_I2C_MspInit+0xb4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d13d      	bne.n	80011f8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800117c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001180:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4618      	mov	r0, r3
 800118e:	f003 ffc5 	bl	800511c <HAL_RCCEx_PeriphCLKConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001198:	f000 f994 	bl	80014c4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_I2C_MspInit+0xb8>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a18      	ldr	r2, [pc, #96]	; (8001204 <HAL_I2C_MspInit+0xb8>)
 80011a2:	f043 0320 	orr.w	r3, r3, #32
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_I2C_MspInit+0xb8>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f003 0320 	and.w	r3, r3, #32
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80011b4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011bc:	2312      	movs	r3, #18
 80011be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80011ce:	2304      	movs	r3, #4
 80011d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011d8:	4619      	mov	r1, r3
 80011da:	480b      	ldr	r0, [pc, #44]	; (8001208 <HAL_I2C_MspInit+0xbc>)
 80011dc:	f001 fd2c 	bl	8002c38 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_I2C_MspInit+0xb8>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_I2C_MspInit+0xb8>)
 80011e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_I2C_MspInit+0xb8>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80011f8:	bf00      	nop
 80011fa:	37a8      	adds	r7, #168	; 0xa8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40006000 	.word	0x40006000
 8001204:	40023800 	.word	0x40023800
 8001208:	40021400 	.word	0x40021400

0800120c <_Z22localClock_constructorP12localClock_tP17TIM_HandleTypeDefPN5STM324gpioE>:
 *  del clock (esto es diferente a cuando se quiere utilizar un clock de 16 bits, ya que
 *  2^16 us = 65.536 ms, es muchísimo menos que 72 hs. Para poder contar hasta valores más grandes,
 *  utilizando un clock de 16 bits, se deben tomar otros recaudos. */

void localClock_constructor(localClock_t *me, TIM_HandleTypeDef *htim, STM32::gpio *ledClockRunning)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
	me->m_htim = htim;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	601a      	str	r2, [r3, #0]
	me->m_ledClockRunning = ledClockRunning;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	605a      	str	r2, [r3, #4]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <_Z16localClock_startP12localClock_t>:

void localClock_start(localClock_t *me)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	me->m_ledClockRunning->write(GPIO_ST::HIGH);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2101      	movs	r1, #1
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fef4 	bl	800102c <_ZN5STM324gpio5writeE7GPIO_ST>
	//__HAL_TIM_SET_COUNTER(me->m_htim, 0);
	HAL_TIM_GenerateEvent(me->m_htim, TIM_EVENTSOURCE_UPDATE);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	4618      	mov	r0, r3
 800124c:	f004 fcff 	bl	8005c4e <HAL_TIM_GenerateEvent>
	HAL_TIM_Base_Start_IT(me->m_htim);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f004 fc53 	bl	8005b00 <HAL_TIM_Base_Start_IT>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_Z15localClock_stopP12localClock_t>:

void localClock_stop(localClock_t *me)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(me->m_htim);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f004 fcbe 	bl	8005bf0 <HAL_TIM_Base_Stop_IT>
	me->m_ledClockRunning->write(GPIO_ST::LOW);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fed6 	bl	800102c <_ZN5STM324gpio5writeE7GPIO_ST>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <_Z24localClock_get_timestampP12localClock_t>:

timestamp_t localClock_get_timestamp(localClock_t *me)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	timestamp_t timestamp;

	timestamp.timeStampCounter = __HAL_TIM_GET_COUNTER(me->m_htim);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	60fb      	str	r3, [r7, #12]

	return timestamp;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b090      	sub	sp, #64	; 0x40
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ae:	f000 fc3e 	bl	8001b2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b2:	f000 f88b 	bl	80013cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b6:	f7ff fdeb 	bl	8000e90 <MX_GPIO_Init>
  MX_SPI2_Init();
 80012ba:	f000 fa19 	bl	80016f0 <MX_SPI2_Init>
  MX_I2C4_Init();
 80012be:	f7ff ff05 	bl	80010cc <MX_I2C4_Init>
  MX_USB_DEVICE_Init();
 80012c2:	f008 fb75 	bl	80099b0 <MX_USB_DEVICE_Init>
  MX_CAN1_Init();
 80012c6:	f7ff fccf 	bl	8000c68 <MX_CAN1_Init>
  MX_CAN2_Init();
 80012ca:	f7ff fd05 	bl	8000cd8 <MX_CAN2_Init>
  MX_TIM5_Init();
 80012ce:	f000 fb97 	bl	8001a00 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  STM32::gpio redLED(LED1_GPIO_Port, LED1_Pin);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	2210      	movs	r2, #16
 80012d8:	4934      	ldr	r1, [pc, #208]	; (80013ac <main+0x104>)
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe80 	bl	8000fe0 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>
  STM32::gpio greenLED(LED2_GPIO_Port, LED2_Pin);
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2208      	movs	r2, #8
 80012e4:	4931      	ldr	r1, [pc, #196]	; (80013ac <main+0x104>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fe7a 	bl	8000fe0 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

  // Prendo un LED para indicar que hay alimentación en la chori
  greenLED.write(GPIO_ST::HIGH);
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2101      	movs	r1, #1
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe9b 	bl	800102c <_ZN5STM324gpio5writeE7GPIO_ST>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  localClock_constructor(&localClock, &htim5, &redLED);
 80012f6:	f107 021c 	add.w	r2, r7, #28
 80012fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012fe:	492c      	ldr	r1, [pc, #176]	; (80013b0 <main+0x108>)
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff83 	bl	800120c <_Z22localClock_constructorP12localClock_tP17TIM_HandleTypeDefPN5STM324gpioE>
  CANslave_constructor(&canSlave, &hcan1, CAN_SLAVE_NODE_ID, &localClock);
 8001306:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800130a:	2203      	movs	r2, #3
 800130c:	4929      	ldr	r1, [pc, #164]	; (80013b4 <main+0x10c>)
 800130e:	482a      	ldr	r0, [pc, #168]	; (80013b8 <main+0x110>)
 8001310:	f7ff f95e 	bl	80005d0 <_Z20CANslave_constructorP10CANslave_tP19__CAN_HandleTypeDefmP12localClock_t>

  stateMachine_init((stateMachine_t*)&canSlave);
 8001314:	4828      	ldr	r0, [pc, #160]	; (80013b8 <main+0x110>)
 8001316:	f000 fa7b 	bl	8001810 <_Z17stateMachine_initP14stateMachine_t>

  HAL_Delay(5000);
 800131a:	f241 3088 	movw	r0, #5000	; 0x1388
 800131e:	f000 fc63 	bl	8001be8 <HAL_Delay>

  p_eventsBuffer->write(EV_CAN_TURN_ON);
 8001322:	2104      	movs	r1, #4
 8001324:	4825      	ldr	r0, [pc, #148]	; (80013bc <main+0x114>)
 8001326:	f000 f90e 	bl	8001546 <_ZN11circ_bufferIhLm128EtE5writeEh>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Verifica si hay nuevos datos provenientes del bus CAN.
	if(flagNewCANdataRx0 == 1)
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <main+0x118>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b01      	cmp	r3, #1
 8001332:	bf0c      	ite	eq
 8001334:	2301      	moveq	r3, #1
 8001336:	2300      	movne	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <main+0xa4>
	{
		p_eventsBuffer->write(EV_CAN_FETCH_NEW_MSGS);
 800133e:	2108      	movs	r1, #8
 8001340:	481e      	ldr	r0, [pc, #120]	; (80013bc <main+0x114>)
 8001342:	f000 f900 	bl	8001546 <_ZN11circ_bufferIhLm128EtE5writeEh>

		// Bajo el flag, indicando que ya le avisé al CAN master acerca de los datos nuevos
		flagNewCANdataRx0 = 0;
 8001346:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <main+0x118>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
	}

	// Verifica si hay mensajes de CAN esperando para ser enviados. En dicho caso, genera un evento.
	if(!p_canTxBuffer->is_empty())
 800134c:	481d      	ldr	r0, [pc, #116]	; (80013c4 <main+0x11c>)
 800134e:	f7ff fbdc 	bl	8000b0a <_ZN11circ_bufferI8CANmsg_tLm128EtE8is_emptyEv>
 8001352:	4603      	mov	r3, r0
 8001354:	f083 0301 	eor.w	r3, r3, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <main+0xbe>
	{
		p_eventsBuffer->write(EV_CAN_SEND_NEXT_MSG);
 800135e:	2106      	movs	r1, #6
 8001360:	4816      	ldr	r0, [pc, #88]	; (80013bc <main+0x114>)
 8001362:	f000 f8f0 	bl	8001546 <_ZN11circ_bufferIhLm128EtE5writeEh>
	}

	// Verifica si hay mensajes de CAN que están esperando para ser leidos. En dicho caso, genera un evento.
	if(!p_canRxBuffer->is_empty())
 8001366:	4818      	ldr	r0, [pc, #96]	; (80013c8 <main+0x120>)
 8001368:	f7ff fbcf 	bl	8000b0a <_ZN11circ_bufferI8CANmsg_tLm128EtE8is_emptyEv>
 800136c:	4603      	mov	r3, r0
 800136e:	f083 0301 	eor.w	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <main+0xd8>
	{
		p_eventsBuffer->write(EV_CAN_PROCESS_NEW_MSG);
 8001378:	2107      	movs	r1, #7
 800137a:	4810      	ldr	r0, [pc, #64]	; (80013bc <main+0x114>)
 800137c:	f000 f8e3 	bl	8001546 <_ZN11circ_bufferIhLm128EtE5writeEh>
	}

	// Si hay eventos en el buffer de eventos, toma uno y lo dispatchea.
	if(!p_eventsBuffer->is_empty())
 8001380:	480e      	ldr	r0, [pc, #56]	; (80013bc <main+0x114>)
 8001382:	f000 f937 	bl	80015f4 <_ZN11circ_bufferIhLm128EtE8is_emptyEv>
 8001386:	4603      	mov	r3, r0
 8001388:	f083 0301 	eor.w	r3, r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0cb      	beq.n	800132a <main+0x82>
	{
		p_eventsBuffer->read(&event);
 8001392:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8001396:	4619      	mov	r1, r3
 8001398:	4808      	ldr	r0, [pc, #32]	; (80013bc <main+0x114>)
 800139a:	f000 f938 	bl	800160e <_ZN11circ_bufferIhLm128EtE4readEPh>
		stateMachine_dispatch((stateMachine_t*)&canSlave, event);
 800139e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80013a2:	4619      	mov	r1, r3
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <main+0x110>)
 80013a6:	f000 fa48 	bl	800183a <_Z21stateMachine_dispatchP14stateMachine_th>
	if(flagNewCANdataRx0 == 1)
 80013aa:	e7be      	b.n	800132a <main+0x82>
 80013ac:	40021000 	.word	0x40021000
 80013b0:	20001d70 	.word	0x20001d70
 80013b4:	20000398 	.word	0x20000398
 80013b8:	20000444 	.word	0x20000444
 80013bc:	20000468 	.word	0x20000468
 80013c0:	20000440 	.word	0x20000440
 80013c4:	200004f0 	.word	0x200004f0
 80013c8:	200010fc 	.word	0x200010fc

080013cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b094      	sub	sp, #80	; 0x50
 80013d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d2:	f107 0320 	add.w	r3, r7, #32
 80013d6:	2230      	movs	r2, #48	; 0x30
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f009 f904 	bl	800a5e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f0:	4b32      	ldr	r3, [pc, #200]	; (80014bc <SystemClock_Config+0xf0>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	4a31      	ldr	r2, [pc, #196]	; (80014bc <SystemClock_Config+0xf0>)
 80013f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fa:	6413      	str	r3, [r2, #64]	; 0x40
 80013fc:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <SystemClock_Config+0xf0>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001408:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <SystemClock_Config+0xf4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a2c      	ldr	r2, [pc, #176]	; (80014c0 <SystemClock_Config+0xf4>)
 800140e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <SystemClock_Config+0xf4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001420:	2301      	movs	r3, #1
 8001422:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142a:	2302      	movs	r3, #2
 800142c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800142e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001434:	2306      	movs	r3, #6
 8001436:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001438:	23d8      	movs	r3, #216	; 0xd8
 800143a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800143c:	2302      	movs	r3, #2
 800143e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001440:	2309      	movs	r3, #9
 8001442:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001444:	f107 0320 	add.w	r3, r7, #32
 8001448:	4618      	mov	r0, r3
 800144a:	f003 fa05 	bl	8004858 <HAL_RCC_OscConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf14      	ite	ne
 8001454:	2301      	movne	r3, #1
 8001456:	2300      	moveq	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800145e:	f000 f831 	bl	80014c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001462:	f003 f9a9 	bl	80047b8 <HAL_PWREx_EnableOverDrive>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	bf14      	ite	ne
 800146c:	2301      	movne	r3, #1
 800146e:	2300      	moveq	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001476:	f000 f825 	bl	80014c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147a:	230f      	movs	r3, #15
 800147c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147e:	2302      	movs	r3, #2
 8001480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001486:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800148a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800148c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001490:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	2107      	movs	r1, #7
 8001498:	4618      	mov	r0, r3
 800149a:	f003 fc81 	bl	8004da0 <HAL_RCC_ClockConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf14      	ite	ne
 80014a4:	2301      	movne	r3, #1
 80014a6:	2300      	moveq	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80014ae:	f000 f809 	bl	80014c4 <Error_Handler>
  }
}
 80014b2:	bf00      	nop
 80014b4:	3750      	adds	r7, #80	; 0x50
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40007000 	.word	0x40007000

080014c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014cc:	e7fe      	b.n	80014cc <Error_Handler+0x8>

080014ce <_ZN11circ_bufferIhLm128EtEC1Ev>:
circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
	mFull_ = false;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	mEmpty_ = true;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	mHead_ = 0;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	mTail_ = 0;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	mSize_ = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	801a      	strh	r2, [r3, #0]
}
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <_ZN11circ_bufferI8CANmsg_tLm128EtEC1Ev>:
circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
	mFull_ = false;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2c08 	strb.w	r2, [r3, #3080]	; 0xc08
	mEmpty_ = true;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2c09 	strb.w	r2, [r3, #3081]	; 0xc09
	mHead_ = 0;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
	mTail_ = 0;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
	mSize_ = 0;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	801a      	strh	r2, [r3, #0]
}
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <_ZN11circ_bufferIhLm128EtE5writeEh>:
bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::write(bufferDataType data)
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	70fb      	strb	r3, [r7, #3]
	mBuffer_[mHead_] = data;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001558:	461a      	mov	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	78fa      	ldrb	r2, [r7, #3]
 8001560:	709a      	strb	r2, [r3, #2]
	mEmpty_ = false;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	if(++mHead_ == sCapacity_){
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001570:	3301      	adds	r3, #1
 8001572:	b29a      	uxth	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001580:	2b80      	cmp	r3, #128	; 0x80
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <_ZN11circ_bufferIhLm128EtE5writeEh+0x50>
		mHead_ = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	if(mFull_ == true){
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800159c:	2b01      	cmp	r3, #1
 800159e:	d10f      	bne.n	80015c0 <_ZN11circ_bufferIhLm128EtE5writeEh+0x7a>
		mTail_ = mTail_ + 1 == sCapacity_ ? 0 : mTail_ + 1; // mTail_ = ++mTail_ == sCapacity_ ? 0 : mTail_;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80015a6:	2b7f      	cmp	r3, #127	; 0x7f
 80015a8:	d005      	beq.n	80015b6 <_ZN11circ_bufferIhLm128EtE5writeEh+0x70>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80015b0:	3301      	adds	r3, #1
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	e000      	b.n	80015b8 <_ZN11circ_bufferIhLm128EtE5writeEh+0x72>
 80015b6:	2200      	movs	r2, #0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80015be:	e012      	b.n	80015e6 <_ZN11circ_bufferIhLm128EtE5writeEh+0xa0>
	}else if(++mSize_ == sCapacity_){
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	3301      	adds	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	801a      	strh	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	2b80      	cmp	r3, #128	; 0x80
 80015d2:	bf0c      	ite	eq
 80015d4:	2301      	moveq	r3, #1
 80015d6:	2300      	movne	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <_ZN11circ_bufferIhLm128EtE5writeEh+0xa0>
		mFull_ = true;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	return EXIT_OK;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_ZN11circ_bufferIhLm128EtE8is_emptyEv>:
bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::is_empty(){
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	return mEmpty_;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZN11circ_bufferIhLm128EtE4readEPh>:
bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::read(bufferDataType* pData)
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
	if (mEmpty_){
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <_ZN11circ_bufferIhLm128EtE4readEPh+0x18>
		return EXIT_ERROR;
 8001622:	2300      	movs	r3, #0
 8001624:	e036      	b.n	8001694 <_ZN11circ_bufferIhLm128EtE4readEPh+0x86>
	*pData = mBuffer_[mTail_];
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800162c:	461a      	mov	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	789a      	ldrb	r2, [r3, #2]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	701a      	strb	r2, [r3, #0]
	mFull_ = false;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	if(--mSize_ == 0){
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	3b01      	subs	r3, #1
 8001646:	b29a      	uxth	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	801a      	strh	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf0c      	ite	eq
 8001654:	2301      	moveq	r3, #1
 8001656:	2300      	movne	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <_ZN11circ_bufferIhLm128EtE4readEPh+0x58>
		mEmpty_ = true;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	if(++mTail_ == sCapacity_){
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800166c:	3301      	adds	r3, #1
 800166e:	b29a      	uxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800167c:	2b80      	cmp	r3, #128	; 0x80
 800167e:	bf0c      	ite	eq
 8001680:	2301      	moveq	r3, #1
 8001682:	2300      	movne	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <_ZN11circ_bufferIhLm128EtE4readEPh+0x84>
		mTail_ = 0;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	return EXIT_OK;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d10d      	bne.n	80016cc <_Z41__static_initialization_and_destruction_0ii+0x2c>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d108      	bne.n	80016cc <_Z41__static_initialization_and_destruction_0ii+0x2c>
static evBuffer eventsBuffer;
 80016ba:	4806      	ldr	r0, [pc, #24]	; (80016d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80016bc:	f7ff ff07 	bl	80014ce <_ZN11circ_bufferIhLm128EtEC1Ev>
static canMsgBuffer canTxBuffer;
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80016c2:	f7ff ff22 	bl	800150a <_ZN11circ_bufferI8CANmsg_tLm128EtEC1Ev>
static canMsgBuffer canRxBuffer;
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80016c8:	f7ff ff1f 	bl	800150a <_ZN11circ_bufferI8CANmsg_tLm128EtEC1Ev>
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000468 	.word	0x20000468
 80016d8:	200004f0 	.word	0x200004f0
 80016dc:	200010fc 	.word	0x200010fc

080016e0 <_GLOBAL__sub_I_flagNewCANdataRx0>:
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff ffd9 	bl	80016a0 <_Z41__static_initialization_and_destruction_0ii>
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_SPI2_Init+0x74>)
 80016f6:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <MX_SPI2_Init+0x78>)
 80016f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_SPI2_Init+0x74>)
 80016fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001700:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <MX_SPI2_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <MX_SPI2_Init+0x74>)
 800170a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800170e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_SPI2_Init+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <MX_SPI2_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_SPI2_Init+0x74>)
 800171e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001722:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_SPI2_Init+0x74>)
 8001726:	2220      	movs	r2, #32
 8001728:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_SPI2_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_SPI2_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <MX_SPI2_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_SPI2_Init+0x74>)
 800173e:	2207      	movs	r2, #7
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <MX_SPI2_Init+0x74>)
 8001744:	2200      	movs	r2, #0
 8001746:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_SPI2_Init+0x74>)
 800174a:	2208      	movs	r2, #8
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_SPI2_Init+0x74>)
 8001750:	f004 f8d4 	bl	80058fc <HAL_SPI_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800175a:	f7ff feb3 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20001d08 	.word	0x20001d08
 8001768:	40003800 	.word	0x40003800

0800176c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <HAL_SPI_MspInit+0x7c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d128      	bne.n	80017e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_SPI_MspInit+0x80>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a16      	ldr	r2, [pc, #88]	; (80017ec <HAL_SPI_MspInit+0x80>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_SPI_MspInit+0x80>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_SPI_MspInit+0x80>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a10      	ldr	r2, [pc, #64]	; (80017ec <HAL_SPI_MspInit+0x80>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_SPI_MspInit+0x80>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017be:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80017c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017d0:	2305      	movs	r3, #5
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <HAL_SPI_MspInit+0x84>)
 80017dc:	f001 fa2c 	bl	8002c38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80017e0:	bf00      	nop
 80017e2:	3728      	adds	r7, #40	; 0x28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40003800 	.word	0x40003800
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020400 	.word	0x40020400

080017f4 <_Z24stateMachine_constructorP14stateMachine_tPF7state_tPvhE>:
#include "stateMachine.h"

#define EV_NONE 0

void stateMachine_constructor(stateMachine_t *me, stateHandler_t initial)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
	me->m_state = initial;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	601a      	str	r2, [r3, #0]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_Z17stateMachine_initP14stateMachine_t>:

void stateMachine_init(stateMachine_t *me)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	event_t e = EV_NONE;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]

	(me->m_state)(me, e);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	7bfa      	ldrb	r2, [r7, #15]
 8001822:	4611      	mov	r1, r2
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4798      	blx	r3
	(me->m_state)(me, EV_ENTRY);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2101      	movs	r1, #1
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	4798      	blx	r3
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_Z21stateMachine_dispatchP14stateMachine_th>:

void stateMachine_dispatch(stateMachine_t *me, event_t const e)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	460b      	mov	r3, r1
 8001844:	70fb      	strb	r3, [r7, #3]
	stateHandler_t s = me->m_state;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	60fb      	str	r3, [r7, #12]
	state_t r = (*s)(me, e);
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4611      	mov	r1, r2
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	4798      	blx	r3
 8001856:	4603      	mov	r3, r0
 8001858:	72fb      	strb	r3, [r7, #11]

	if(r == TRANSITION)
 800185a:	7afb      	ldrb	r3, [r7, #11]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d108      	bne.n	8001872 <_Z21stateMachine_dispatchP14stateMachine_th+0x38>
	{
		(*s)(me, EV_EXIT);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2102      	movs	r1, #2
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	4798      	blx	r3
		(me->m_state)(me, EV_ENTRY);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2101      	movs	r1, #1
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	4798      	blx	r3
	}
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_Z23stateMachine_transitionP14stateMachine_tPF7state_tPvhE>:

state_t stateMachine_transition(stateMachine_t *me, stateHandler_t target)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
	me->m_state = target;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	601a      	str	r2, [r3, #0]
	return TRANSITION;
 800188a:	2302      	movs	r3, #2
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_MspInit+0x44>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_MspInit+0x44>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_MspInit+0x44>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_MspInit+0x44>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x44>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	; 0x44
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x44>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018e4:	e7fe      	b.n	80018e4 <NMI_Handler+0x4>

080018e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <HardFault_Handler+0x4>

080018ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <MemManage_Handler+0x4>

080018f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <UsageFault_Handler+0x4>

080018fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192c:	f000 f93c 	bl	8001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}

08001934 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <CAN1_RX0_IRQHandler+0x10>)
 800193a:	f000 fe46 	bl	80025ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000398 	.word	0x20000398

08001948 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <CAN1_SCE_IRQHandler+0x10>)
 800194e:	f000 fe3c 	bl	80025ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000398 	.word	0x20000398

0800195c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <OTG_FS_IRQHandler+0x10>)
 8001962:	f001 fdb6 	bl	80034d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200032a0 	.word	0x200032a0

08001970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <_sbrk+0x5c>)
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <_sbrk+0x60>)
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <_sbrk+0x64>)
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <_sbrk+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a0:	f008 fe3a 	bl	800a618 <__errno>
 80019a4:	4603      	mov	r3, r0
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20050000 	.word	0x20050000
 80019d0:	00000400 	.word	0x00000400
 80019d4:	20001d6c 	.word	0x20001d6c
 80019d8:	200038f0 	.word	0x200038f0

080019dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a06:	f107 0310 	add.w	r3, r7, #16
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <MX_TIM5_Init+0x94>)
 8001a20:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <MX_TIM5_Init+0x98>)
 8001a22:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108-1;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <MX_TIM5_Init+0x94>)
 8001a26:	226b      	movs	r2, #107	; 0x6b
 8001a28:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <MX_TIM5_Init+0x94>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <MX_TIM5_Init+0x94>)
 8001a32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a36:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <MX_TIM5_Init+0x94>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <MX_TIM5_Init+0x94>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a44:	4813      	ldr	r0, [pc, #76]	; (8001a94 <MX_TIM5_Init+0x94>)
 8001a46:	f004 f804 	bl	8005a52 <HAL_TIM_Base_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001a50:	f7ff fd38 	bl	80014c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a5a:	f107 0310 	add.w	r3, r7, #16
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480c      	ldr	r0, [pc, #48]	; (8001a94 <MX_TIM5_Init+0x94>)
 8001a62:	f004 f91b 	bl	8005c9c <HAL_TIM_ConfigClockSource>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001a6c:	f7ff fd2a 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_TIM5_Init+0x94>)
 8001a7e:	f004 fb11 	bl	80060a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001a88:	f7ff fd1c 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	3720      	adds	r7, #32
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20001d70 	.word	0x20001d70
 8001a98:	40000c00 	.word	0x40000c00

08001a9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_TIM_Base_MspInit+0x38>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d10b      	bne.n	8001ac6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ab4:	f043 0308 	orr.w	r3, r3, #8
 8001ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_TIM_Base_MspInit+0x3c>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40000c00 	.word	0x40000c00
 8001ad8:	40023800 	.word	0x40023800

08001adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ae0:	480d      	ldr	r0, [pc, #52]	; (8001b18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ae2:	490e      	ldr	r1, [pc, #56]	; (8001b1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ae4:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae8:	e002      	b.n	8001af0 <LoopCopyDataInit>

08001aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aee:	3304      	adds	r3, #4

08001af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af4:	d3f9      	bcc.n	8001aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af6:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001af8:	4c0b      	ldr	r4, [pc, #44]	; (8001b28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001afc:	e001      	b.n	8001b02 <LoopFillZerobss>

08001afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b00:	3204      	adds	r2, #4

08001b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b04:	d3fb      	bcc.n	8001afe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b06:	f7ff ff69 	bl	80019dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b0a:	f008 fd8b 	bl	800a624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b0e:	f7ff fbcb 	bl	80012a8 <main>
  bx  lr    
 8001b12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b14:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b1c:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8001b20:	0800a7b8 	.word	0x0800a7b8
  ldr r2, =_sbss
 8001b24:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001b28:	200038f0 	.word	0x200038f0

08001b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b2c:	e7fe      	b.n	8001b2c <ADC_IRQHandler>

08001b2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b32:	2003      	movs	r0, #3
 8001b34:	f001 f83e 	bl	8002bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b38:	200f      	movs	r0, #15
 8001b3a:	f000 f805 	bl	8001b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3e:	f7ff feab 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_InitTick+0x54>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_InitTick+0x58>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 f859 	bl	8002c1e <HAL_SYSTICK_Config>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00e      	b.n	8001b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	d80a      	bhi.n	8001b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b84:	f001 f821 	bl	8002bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b88:	4a06      	ldr	r2, [pc, #24]	; (8001ba4 <HAL_InitTick+0x5c>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000018 	.word	0x20000018
 8001ba0:	20000020 	.word	0x20000020
 8001ba4:	2000001c 	.word	0x2000001c

08001ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_IncTick+0x20>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_IncTick+0x24>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <HAL_IncTick+0x24>)
 8001bba:	6013      	str	r3, [r2, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000020 	.word	0x20000020
 8001bcc:	20001dbc 	.word	0x20001dbc

08001bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <HAL_GetTick+0x14>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20001dbc 	.word	0x20001dbc

08001be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff ffee 	bl	8001bd0 <HAL_GetTick>
 8001bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c00:	d005      	beq.n	8001c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_Delay+0x44>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c0e:	bf00      	nop
 8001c10:	f7ff ffde 	bl	8001bd0 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d8f7      	bhi.n	8001c10 <HAL_Delay+0x28>
  {
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000020 	.word	0x20000020

08001c30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e0ed      	b.n	8001e1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff f87a 	bl	8000d48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c64:	f7ff ffb4 	bl	8001bd0 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c6a:	e012      	b.n	8001c92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c6c:	f7ff ffb0 	bl	8001bd0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b0a      	cmp	r3, #10
 8001c78:	d90b      	bls.n	8001c92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2205      	movs	r2, #5
 8001c8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e0c5      	b.n	8001e1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0e5      	beq.n	8001c6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0202 	bic.w	r2, r2, #2
 8001cae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb0:	f7ff ff8e 	bl	8001bd0 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cb6:	e012      	b.n	8001cde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cb8:	f7ff ff8a 	bl	8001bd0 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b0a      	cmp	r3, #10
 8001cc4:	d90b      	bls.n	8001cde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2205      	movs	r2, #5
 8001cd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e09f      	b.n	8001e1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e5      	bne.n	8001cb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7e1b      	ldrb	r3, [r3, #24]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d108      	bne.n	8001d06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	e007      	b.n	8001d16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7e5b      	ldrb	r3, [r3, #25]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d108      	bne.n	8001d30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e007      	b.n	8001d40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7e9b      	ldrb	r3, [r3, #26]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d108      	bne.n	8001d5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0220 	orr.w	r2, r2, #32
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e007      	b.n	8001d6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0220 	bic.w	r2, r2, #32
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7edb      	ldrb	r3, [r3, #27]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d108      	bne.n	8001d84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0210 	bic.w	r2, r2, #16
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	e007      	b.n	8001d94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0210 	orr.w	r2, r2, #16
 8001d92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7f1b      	ldrb	r3, [r3, #28]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d108      	bne.n	8001dae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0208 	orr.w	r2, r2, #8
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e007      	b.n	8001dbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0208 	bic.w	r2, r2, #8
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7f5b      	ldrb	r3, [r3, #29]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d108      	bne.n	8001dd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0204 	orr.w	r2, r2, #4
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e007      	b.n	8001de8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0204 	bic.w	r2, r2, #4
 8001de6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	ea42 0103 	orr.w	r1, r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	1e5a      	subs	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e3e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e40:	7cfb      	ldrb	r3, [r7, #19]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d003      	beq.n	8001e4e <HAL_CAN_ConfigFilter+0x26>
 8001e46:	7cfb      	ldrb	r3, [r7, #19]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	f040 80be 	bne.w	8001fca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001e4e:	4b65      	ldr	r3, [pc, #404]	; (8001fe4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001e50:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e68:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	2201      	movs	r2, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d123      	bne.n	8001ef8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	401a      	ands	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ed2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3248      	adds	r2, #72	; 0x48
 8001ed8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001eec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eee:	6979      	ldr	r1, [r7, #20]
 8001ef0:	3348      	adds	r3, #72	; 0x48
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	440b      	add	r3, r1
 8001ef6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d122      	bne.n	8001f46 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f20:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	3248      	adds	r2, #72	; 0x48
 8001f26:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f3a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f3c:	6979      	ldr	r1, [r7, #20]
 8001f3e:	3348      	adds	r3, #72	; 0x48
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	401a      	ands	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f60:	e007      	b.n	8001f72 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	401a      	ands	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001f8c:	e007      	b.n	8001f9e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d107      	bne.n	8001fb6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fbc:	f023 0201 	bic.w	r2, r3, #1
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e006      	b.n	8001fd8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
  }
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	40006400 	.word	0x40006400

08001fe8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d12e      	bne.n	800205a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002014:	f7ff fddc 	bl	8001bd0 <HAL_GetTick>
 8002018:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800201a:	e012      	b.n	8002042 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800201c:	f7ff fdd8 	bl	8001bd0 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b0a      	cmp	r3, #10
 8002028:	d90b      	bls.n	8002042 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2205      	movs	r2, #5
 800203a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e012      	b.n	8002068 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1e5      	bne.n	800201c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e006      	b.n	8002068 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
  }
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d133      	bne.n	80020ec <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002094:	f7ff fd9c 	bl	8001bd0 <HAL_GetTick>
 8002098:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800209a:	e012      	b.n	80020c2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800209c:	f7ff fd98 	bl	8001bd0 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b0a      	cmp	r3, #10
 80020a8:	d90b      	bls.n	80020c2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2205      	movs	r2, #5
 80020ba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e01b      	b.n	80020fa <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0e5      	beq.n	800209c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0202 	bic.w	r2, r2, #2
 80020de:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e006      	b.n	80020fa <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
  }
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002102:	b480      	push	{r7}
 8002104:	b089      	sub	sp, #36	; 0x24
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002116:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002120:	7ffb      	ldrb	r3, [r7, #31]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d003      	beq.n	800212e <HAL_CAN_AddTxMessage+0x2c>
 8002126:	7ffb      	ldrb	r3, [r7, #31]
 8002128:	2b02      	cmp	r3, #2
 800212a:	f040 80ad 	bne.w	8002288 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10a      	bne.n	800214e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800213e:	2b00      	cmp	r3, #0
 8002140:	d105      	bne.n	800214e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 8095 	beq.w	8002278 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	0e1b      	lsrs	r3, r3, #24
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002158:	2201      	movs	r2, #1
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	409a      	lsls	r2, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10d      	bne.n	8002186 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002174:	68f9      	ldr	r1, [r7, #12]
 8002176:	6809      	ldr	r1, [r1, #0]
 8002178:	431a      	orrs	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3318      	adds	r3, #24
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	440b      	add	r3, r1
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e00f      	b.n	80021a6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002190:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002196:	68f9      	ldr	r1, [r7, #12]
 8002198:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800219a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3318      	adds	r3, #24
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	440b      	add	r3, r1
 80021a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6819      	ldr	r1, [r3, #0]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3318      	adds	r3, #24
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	440b      	add	r3, r1
 80021b6:	3304      	adds	r3, #4
 80021b8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	7d1b      	ldrb	r3, [r3, #20]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d111      	bne.n	80021e6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3318      	adds	r3, #24
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	4413      	add	r3, r2
 80021ce:	3304      	adds	r3, #4
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	6811      	ldr	r1, [r2, #0]
 80021d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3318      	adds	r3, #24
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	440b      	add	r3, r1
 80021e2:	3304      	adds	r3, #4
 80021e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3307      	adds	r3, #7
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	061a      	lsls	r2, r3, #24
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3306      	adds	r3, #6
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	041b      	lsls	r3, r3, #16
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3305      	adds	r3, #5
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	4313      	orrs	r3, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	3204      	adds	r2, #4
 8002206:	7812      	ldrb	r2, [r2, #0]
 8002208:	4610      	mov	r0, r2
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	6811      	ldr	r1, [r2, #0]
 800220e:	ea43 0200 	orr.w	r2, r3, r0
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	440b      	add	r3, r1
 8002218:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800221c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3303      	adds	r3, #3
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	061a      	lsls	r2, r3, #24
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3302      	adds	r3, #2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	041b      	lsls	r3, r3, #16
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3301      	adds	r3, #1
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	4313      	orrs	r3, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	4610      	mov	r0, r2
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	6811      	ldr	r1, [r2, #0]
 8002244:	ea43 0200 	orr.w	r2, r3, r0
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	440b      	add	r3, r1
 800224e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002252:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	3318      	adds	r3, #24
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	4413      	add	r3, r2
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	6811      	ldr	r1, [r2, #0]
 8002266:	f043 0201 	orr.w	r2, r3, #1
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	3318      	adds	r3, #24
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	440b      	add	r3, r1
 8002272:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	e00e      	b.n	8002296 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e006      	b.n	8002296 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
  }
}
 8002296:	4618      	mov	r0, r3
 8002298:	3724      	adds	r7, #36	; 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b085      	sub	sp, #20
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d002      	beq.n	80022c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80022bc:	7afb      	ldrb	r3, [r7, #11]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d11d      	bne.n	80022fe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3301      	adds	r3, #1
 80022d4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3301      	adds	r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3301      	adds	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80022fe:	68fb      	ldr	r3, [r7, #12]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002320:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d003      	beq.n	8002330 <HAL_CAN_GetRxMessage+0x24>
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	2b02      	cmp	r3, #2
 800232c:	f040 80f3 	bne.w	8002516 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10e      	bne.n	8002354 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d116      	bne.n	8002372 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0e7      	b.n	8002524 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d107      	bne.n	8002372 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0d8      	b.n	8002524 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	331b      	adds	r3, #27
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4413      	add	r3, r2
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0204 	and.w	r2, r3, #4
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10c      	bne.n	80023aa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	331b      	adds	r3, #27
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	4413      	add	r3, r2
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	0d5b      	lsrs	r3, r3, #21
 80023a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	e00b      	b.n	80023c2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	331b      	adds	r3, #27
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	4413      	add	r3, r2
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	08db      	lsrs	r3, r3, #3
 80023ba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	331b      	adds	r3, #27
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	4413      	add	r3, r2
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0202 	and.w	r2, r3, #2
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	331b      	adds	r3, #27
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	4413      	add	r3, r2
 80023e4:	3304      	adds	r3, #4
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 020f 	and.w	r2, r3, #15
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	331b      	adds	r3, #27
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	4413      	add	r3, r2
 80023fc:	3304      	adds	r3, #4
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	b2da      	uxtb	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	331b      	adds	r3, #27
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	4413      	add	r3, r2
 8002414:	3304      	adds	r3, #4
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	b29a      	uxth	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	4413      	add	r3, r2
 800242a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	4413      	add	r3, r2
 8002440:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0a1a      	lsrs	r2, r3, #8
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	4413      	add	r3, r2
 800245a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0c1a      	lsrs	r2, r3, #16
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	3302      	adds	r3, #2
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	4413      	add	r3, r2
 8002474:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	0e1a      	lsrs	r2, r3, #24
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	3303      	adds	r3, #3
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	4413      	add	r3, r2
 800248e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	3304      	adds	r3, #4
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	0a1a      	lsrs	r2, r3, #8
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	3305      	adds	r3, #5
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	4413      	add	r3, r2
 80024c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0c1a      	lsrs	r2, r3, #16
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	3306      	adds	r3, #6
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	4413      	add	r3, r2
 80024da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0e1a      	lsrs	r2, r3, #24
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	3307      	adds	r3, #7
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d108      	bne.n	8002502 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0220 	orr.w	r2, r2, #32
 80024fe:	60da      	str	r2, [r3, #12]
 8002500:	e007      	b.n	8002512 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0220 	orr.w	r2, r2, #32
 8002510:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e006      	b.n	8002524 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
  }
}
 8002524:	4618      	mov	r0, r3
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002540:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d002      	beq.n	800254e <HAL_CAN_ActivateNotification+0x1e>
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d109      	bne.n	8002562 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6959      	ldr	r1, [r3, #20]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e006      	b.n	8002570 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
  }
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800258c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d002      	beq.n	800259a <HAL_CAN_DeactivateNotification+0x1e>
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d10a      	bne.n	80025b0 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6959      	ldr	r1, [r3, #20]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	43da      	mvns	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	400a      	ands	r2, r1
 80025aa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e006      	b.n	80025be <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
  }
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b08a      	sub	sp, #40	; 0x28
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d07c      	beq.n	800270a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d023      	beq.n	8002662 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2201      	movs	r2, #1
 8002620:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7fe f9f9 	bl	8000a24 <HAL_CAN_TxMailbox0CompleteCallback>
 8002632:	e016      	b.n	8002662 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b00      	cmp	r3, #0
 800263c:	d004      	beq.n	8002648 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
 8002646:	e00c      	b.n	8002662 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d004      	beq.n	800265c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
 800265a:	e002      	b.n	8002662 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f97f 	bl	8002960 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d024      	beq.n	80026b6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002674:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f959 	bl	8002938 <HAL_CAN_TxMailbox1CompleteCallback>
 8002686:	e016      	b.n	80026b6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268e:	2b00      	cmp	r3, #0
 8002690:	d004      	beq.n	800269c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
 800269a:	e00c      	b.n	80026b6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d004      	beq.n	80026b0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
 80026ae:	e002      	b.n	80026b6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f95f 	bl	8002974 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d024      	beq.n	800270a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f939 	bl	800294c <HAL_CAN_TxMailbox2CompleteCallback>
 80026da:	e016      	b.n	800270a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	e00c      	b.n	800270a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
 8002702:	e002      	b.n	800270a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f93f 	bl	8002988 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00c      	beq.n	800272e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002724:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2210      	movs	r2, #16
 800272c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00b      	beq.n	8002750 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d006      	beq.n	8002750 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2208      	movs	r2, #8
 8002748:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f926 	bl	800299c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7fe f8ff 	bl	800096c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00c      	beq.n	8002792 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002788:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2210      	movs	r2, #16
 8002790:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00b      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d006      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2208      	movs	r2, #8
 80027ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f908 	bl	80029c4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f8ef 	bl	80029b0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00b      	beq.n	80027f4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d006      	beq.n	80027f4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2210      	movs	r2, #16
 80027ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8f2 	bl	80029d8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2208      	movs	r2, #8
 800280e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8eb 	bl	80029ec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d07b      	beq.n	8002918 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	d072      	beq.n	8002910 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002884:	2b00      	cmp	r3, #0
 8002886:	d043      	beq.n	8002910 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800288e:	2b00      	cmp	r3, #0
 8002890:	d03e      	beq.n	8002910 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002898:	2b60      	cmp	r3, #96	; 0x60
 800289a:	d02b      	beq.n	80028f4 <HAL_CAN_IRQHandler+0x32a>
 800289c:	2b60      	cmp	r3, #96	; 0x60
 800289e:	d82e      	bhi.n	80028fe <HAL_CAN_IRQHandler+0x334>
 80028a0:	2b50      	cmp	r3, #80	; 0x50
 80028a2:	d022      	beq.n	80028ea <HAL_CAN_IRQHandler+0x320>
 80028a4:	2b50      	cmp	r3, #80	; 0x50
 80028a6:	d82a      	bhi.n	80028fe <HAL_CAN_IRQHandler+0x334>
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d019      	beq.n	80028e0 <HAL_CAN_IRQHandler+0x316>
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d826      	bhi.n	80028fe <HAL_CAN_IRQHandler+0x334>
 80028b0:	2b30      	cmp	r3, #48	; 0x30
 80028b2:	d010      	beq.n	80028d6 <HAL_CAN_IRQHandler+0x30c>
 80028b4:	2b30      	cmp	r3, #48	; 0x30
 80028b6:	d822      	bhi.n	80028fe <HAL_CAN_IRQHandler+0x334>
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d002      	beq.n	80028c2 <HAL_CAN_IRQHandler+0x2f8>
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d005      	beq.n	80028cc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80028c0:	e01d      	b.n	80028fe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	f043 0308 	orr.w	r3, r3, #8
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028ca:	e019      	b.n	8002900 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	f043 0310 	orr.w	r3, r3, #16
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028d4:	e014      	b.n	8002900 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	f043 0320 	orr.w	r3, r3, #32
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028de:	e00f      	b.n	8002900 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028e8:	e00a      	b.n	8002900 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028f2:	e005      	b.n	8002900 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028fc:	e000      	b.n	8002900 <HAL_CAN_IRQHandler+0x336>
            break;
 80028fe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800290e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2204      	movs	r2, #4
 8002916:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f868 	bl	8002a00 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002930:	bf00      	nop
 8002932:	3728      	adds	r7, #40	; 0x28
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <__NVIC_SetPriorityGrouping+0x40>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a30:	4013      	ands	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <__NVIC_SetPriorityGrouping+0x44>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a42:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <__NVIC_SetPriorityGrouping+0x40>)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	60d3      	str	r3, [r2, #12]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000ed00 	.word	0xe000ed00
 8002a58:	05fa0000 	.word	0x05fa0000

08002a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <__NVIC_GetPriorityGrouping+0x18>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	f003 0307 	and.w	r3, r3, #7
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	db0b      	blt.n	8002aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	f003 021f 	and.w	r2, r3, #31
 8002a90:	4907      	ldr	r1, [pc, #28]	; (8002ab0 <__NVIC_EnableIRQ+0x38>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2001      	movs	r0, #1
 8002a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000e100 	.word	0xe000e100

08002ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	6039      	str	r1, [r7, #0]
 8002abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	db0a      	blt.n	8002ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	490c      	ldr	r1, [pc, #48]	; (8002b00 <__NVIC_SetPriority+0x4c>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002adc:	e00a      	b.n	8002af4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4908      	ldr	r1, [pc, #32]	; (8002b04 <__NVIC_SetPriority+0x50>)
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	3b04      	subs	r3, #4
 8002aec:	0112      	lsls	r2, r2, #4
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	440b      	add	r3, r1
 8002af2:	761a      	strb	r2, [r3, #24]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000e100 	.word	0xe000e100
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	; 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f1c3 0307 	rsb	r3, r3, #7
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	bf28      	it	cs
 8002b26:	2304      	movcs	r3, #4
 8002b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d902      	bls.n	8002b38 <NVIC_EncodePriority+0x30>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3b03      	subs	r3, #3
 8002b36:	e000      	b.n	8002b3a <NVIC_EncodePriority+0x32>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43da      	mvns	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	43d9      	mvns	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	4313      	orrs	r3, r2
         );
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3724      	adds	r7, #36	; 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b80:	d301      	bcc.n	8002b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00f      	b.n	8002ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <SysTick_Config+0x40>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8e:	210f      	movs	r1, #15
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b94:	f7ff ff8e 	bl	8002ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <SysTick_Config+0x40>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9e:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <SysTick_Config+0x40>)
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	e000e010 	.word	0xe000e010

08002bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff29 	bl	8002a14 <__NVIC_SetPriorityGrouping>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bdc:	f7ff ff3e 	bl	8002a5c <__NVIC_GetPriorityGrouping>
 8002be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f7ff ff8e 	bl	8002b08 <NVIC_EncodePriority>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff5d 	bl	8002ab4 <__NVIC_SetPriority>
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	4603      	mov	r3, r0
 8002c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff31 	bl	8002a78 <__NVIC_EnableIRQ>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff ffa2 	bl	8002b70 <SysTick_Config>
 8002c2c:	4603      	mov	r3, r0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b089      	sub	sp, #36	; 0x24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	e175      	b.n	8002f44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c58:	2201      	movs	r2, #1
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	f040 8164 	bne.w	8002f3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d005      	beq.n	8002c8e <HAL_GPIO_Init+0x56>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d130      	bne.n	8002cf0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	2203      	movs	r2, #3
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 0201 	and.w	r2, r3, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d017      	beq.n	8002d2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2203      	movs	r2, #3
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d123      	bne.n	8002d80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	08da      	lsrs	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3208      	adds	r2, #8
 8002d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	220f      	movs	r2, #15
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	08da      	lsrs	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3208      	adds	r2, #8
 8002d7a:	69b9      	ldr	r1, [r7, #24]
 8002d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0203 	and.w	r2, r3, #3
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80be 	beq.w	8002f3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc2:	4b66      	ldr	r3, [pc, #408]	; (8002f5c <HAL_GPIO_Init+0x324>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	4a65      	ldr	r2, [pc, #404]	; (8002f5c <HAL_GPIO_Init+0x324>)
 8002dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dce:	4b63      	ldr	r3, [pc, #396]	; (8002f5c <HAL_GPIO_Init+0x324>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002dda:	4a61      	ldr	r2, [pc, #388]	; (8002f60 <HAL_GPIO_Init+0x328>)
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	089b      	lsrs	r3, r3, #2
 8002de0:	3302      	adds	r3, #2
 8002de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	220f      	movs	r2, #15
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a58      	ldr	r2, [pc, #352]	; (8002f64 <HAL_GPIO_Init+0x32c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d037      	beq.n	8002e76 <HAL_GPIO_Init+0x23e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a57      	ldr	r2, [pc, #348]	; (8002f68 <HAL_GPIO_Init+0x330>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d031      	beq.n	8002e72 <HAL_GPIO_Init+0x23a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a56      	ldr	r2, [pc, #344]	; (8002f6c <HAL_GPIO_Init+0x334>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d02b      	beq.n	8002e6e <HAL_GPIO_Init+0x236>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a55      	ldr	r2, [pc, #340]	; (8002f70 <HAL_GPIO_Init+0x338>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d025      	beq.n	8002e6a <HAL_GPIO_Init+0x232>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a54      	ldr	r2, [pc, #336]	; (8002f74 <HAL_GPIO_Init+0x33c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d01f      	beq.n	8002e66 <HAL_GPIO_Init+0x22e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a53      	ldr	r2, [pc, #332]	; (8002f78 <HAL_GPIO_Init+0x340>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d019      	beq.n	8002e62 <HAL_GPIO_Init+0x22a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a52      	ldr	r2, [pc, #328]	; (8002f7c <HAL_GPIO_Init+0x344>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_GPIO_Init+0x226>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a51      	ldr	r2, [pc, #324]	; (8002f80 <HAL_GPIO_Init+0x348>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00d      	beq.n	8002e5a <HAL_GPIO_Init+0x222>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a50      	ldr	r2, [pc, #320]	; (8002f84 <HAL_GPIO_Init+0x34c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d007      	beq.n	8002e56 <HAL_GPIO_Init+0x21e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a4f      	ldr	r2, [pc, #316]	; (8002f88 <HAL_GPIO_Init+0x350>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d101      	bne.n	8002e52 <HAL_GPIO_Init+0x21a>
 8002e4e:	2309      	movs	r3, #9
 8002e50:	e012      	b.n	8002e78 <HAL_GPIO_Init+0x240>
 8002e52:	230a      	movs	r3, #10
 8002e54:	e010      	b.n	8002e78 <HAL_GPIO_Init+0x240>
 8002e56:	2308      	movs	r3, #8
 8002e58:	e00e      	b.n	8002e78 <HAL_GPIO_Init+0x240>
 8002e5a:	2307      	movs	r3, #7
 8002e5c:	e00c      	b.n	8002e78 <HAL_GPIO_Init+0x240>
 8002e5e:	2306      	movs	r3, #6
 8002e60:	e00a      	b.n	8002e78 <HAL_GPIO_Init+0x240>
 8002e62:	2305      	movs	r3, #5
 8002e64:	e008      	b.n	8002e78 <HAL_GPIO_Init+0x240>
 8002e66:	2304      	movs	r3, #4
 8002e68:	e006      	b.n	8002e78 <HAL_GPIO_Init+0x240>
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e004      	b.n	8002e78 <HAL_GPIO_Init+0x240>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e002      	b.n	8002e78 <HAL_GPIO_Init+0x240>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_GPIO_Init+0x240>
 8002e76:	2300      	movs	r3, #0
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	f002 0203 	and.w	r2, r2, #3
 8002e7e:	0092      	lsls	r2, r2, #2
 8002e80:	4093      	lsls	r3, r2
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e88:	4935      	ldr	r1, [pc, #212]	; (8002f60 <HAL_GPIO_Init+0x328>)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	089b      	lsrs	r3, r3, #2
 8002e8e:	3302      	adds	r3, #2
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e96:	4b3d      	ldr	r3, [pc, #244]	; (8002f8c <HAL_GPIO_Init+0x354>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eba:	4a34      	ldr	r2, [pc, #208]	; (8002f8c <HAL_GPIO_Init+0x354>)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ec0:	4b32      	ldr	r3, [pc, #200]	; (8002f8c <HAL_GPIO_Init+0x354>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ee4:	4a29      	ldr	r2, [pc, #164]	; (8002f8c <HAL_GPIO_Init+0x354>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eea:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <HAL_GPIO_Init+0x354>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f0e:	4a1f      	ldr	r2, [pc, #124]	; (8002f8c <HAL_GPIO_Init+0x354>)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_GPIO_Init+0x354>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f38:	4a14      	ldr	r2, [pc, #80]	; (8002f8c <HAL_GPIO_Init+0x354>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3301      	adds	r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b0f      	cmp	r3, #15
 8002f48:	f67f ae86 	bls.w	8002c58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	3724      	adds	r7, #36	; 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40013800 	.word	0x40013800
 8002f64:	40020000 	.word	0x40020000
 8002f68:	40020400 	.word	0x40020400
 8002f6c:	40020800 	.word	0x40020800
 8002f70:	40020c00 	.word	0x40020c00
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40021400 	.word	0x40021400
 8002f7c:	40021800 	.word	0x40021800
 8002f80:	40021c00 	.word	0x40021c00
 8002f84:	40022000 	.word	0x40022000
 8002f88:	40022400 	.word	0x40022400
 8002f8c:	40013c00 	.word	0x40013c00

08002f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	807b      	strh	r3, [r7, #2]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa0:	787b      	ldrb	r3, [r7, #1]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fa6:	887a      	ldrh	r2, [r7, #2]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fac:	e003      	b.n	8002fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fae:	887b      	ldrh	r3, [r7, #2]
 8002fb0:	041a      	lsls	r2, r3, #16
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	619a      	str	r2, [r3, #24]
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fd4:	887a      	ldrh	r2, [r7, #2]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	041a      	lsls	r2, r3, #16
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	43d9      	mvns	r1, r3
 8002fe0:	887b      	ldrh	r3, [r7, #2]
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	619a      	str	r2, [r3, #24]
}
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e07f      	b.n	800310a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fe f894 	bl	800114c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003048:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003058:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	e006      	b.n	8003080 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800307e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d104      	bne.n	8003092 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003090:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_I2C_Init+0x11c>)
 800309e:	430b      	orrs	r3, r1
 80030a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69d9      	ldr	r1, [r3, #28]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1a      	ldr	r2, [r3, #32]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	02008000 	.word	0x02008000

08003118 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b20      	cmp	r3, #32
 800312c:	d138      	bne.n	80031a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003138:	2302      	movs	r3, #2
 800313a:	e032      	b.n	80031a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2224      	movs	r2, #36	; 0x24
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800316a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6819      	ldr	r1, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	e000      	b.n	80031a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031a0:	2302      	movs	r3, #2
  }
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d139      	bne.n	8003238 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e033      	b.n	800323a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2224      	movs	r2, #36	; 0x24
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003200:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	e000      	b.n	800323a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003238:	2302      	movs	r3, #2
  }
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003246:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003248:	b08f      	sub	sp, #60	; 0x3c
 800324a:	af0a      	add	r7, sp, #40	; 0x28
 800324c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e116      	b.n	8003486 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f006 fd8e 	bl	8009d94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2203      	movs	r2, #3
 800327c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f003 f89d 	bl	80063d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	603b      	str	r3, [r7, #0]
 80032a2:	687e      	ldr	r6, [r7, #4]
 80032a4:	466d      	mov	r5, sp
 80032a6:	f106 0410 	add.w	r4, r6, #16
 80032aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80032ba:	1d33      	adds	r3, r6, #4
 80032bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032be:	6838      	ldr	r0, [r7, #0]
 80032c0:	f002 ff7e 	bl	80061c0 <USB_CoreInit>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2202      	movs	r2, #2
 80032ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e0d7      	b.n	8003486 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2100      	movs	r1, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	f003 f88b 	bl	80063f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e2:	2300      	movs	r3, #0
 80032e4:	73fb      	strb	r3, [r7, #15]
 80032e6:	e04a      	b.n	800337e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	333d      	adds	r3, #61	; 0x3d
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032fc:	7bfa      	ldrb	r2, [r7, #15]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	333c      	adds	r3, #60	; 0x3c
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	b298      	uxth	r0, r3
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	3344      	adds	r3, #68	; 0x44
 8003324:	4602      	mov	r2, r0
 8003326:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	3340      	adds	r3, #64	; 0x40
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	3348      	adds	r3, #72	; 0x48
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003350:	7bfa      	ldrb	r2, [r7, #15]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	334c      	adds	r3, #76	; 0x4c
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	3354      	adds	r3, #84	; 0x54
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	3301      	adds	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
 800337e:	7bfa      	ldrb	r2, [r7, #15]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	d3af      	bcc.n	80032e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003388:	2300      	movs	r3, #0
 800338a:	73fb      	strb	r3, [r7, #15]
 800338c:	e044      	b.n	8003418 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033a4:	7bfa      	ldrb	r2, [r7, #15]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033ba:	7bfa      	ldrb	r2, [r7, #15]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033e6:	7bfa      	ldrb	r2, [r7, #15]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033fc:	7bfa      	ldrb	r2, [r7, #15]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	3301      	adds	r3, #1
 8003416:	73fb      	strb	r3, [r7, #15]
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	429a      	cmp	r2, r3
 8003420:	d3b5      	bcc.n	800338e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	687e      	ldr	r6, [r7, #4]
 800342a:	466d      	mov	r5, sp
 800342c:	f106 0410 	add.w	r4, r6, #16
 8003430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003438:	e894 0003 	ldmia.w	r4, {r0, r1}
 800343c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003440:	1d33      	adds	r3, r6, #4
 8003442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003444:	6838      	ldr	r0, [r7, #0]
 8003446:	f003 f823 	bl	8006490 <USB_DevInit>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e014      	b.n	8003486 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	2b01      	cmp	r3, #1
 8003472:	d102      	bne.n	800347a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f001 f97b 	bl	8004770 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f004 f971 	bl	8007766 <USB_DevDisconnect>

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800348e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_PCD_Start+0x16>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e012      	b.n	80034ca <HAL_PCD_Start+0x3c>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f002 ff7f 	bl	80063b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f004 f932 	bl	8007724 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034d2:	b590      	push	{r4, r7, lr}
 80034d4:	b08d      	sub	sp, #52	; 0x34
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f004 f9f0 	bl	80078ce <USB_GetMode>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f040 84b7 	bne.w	8003e64 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f004 f954 	bl	80077a8 <USB_ReadInterrupts>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 84ad 	beq.w	8003e62 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	0a1b      	lsrs	r3, r3, #8
 8003512:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f004 f941 	bl	80077a8 <USB_ReadInterrupts>
 8003526:	4603      	mov	r3, r0
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b02      	cmp	r3, #2
 800352e:	d107      	bne.n	8003540 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f002 0202 	and.w	r2, r2, #2
 800353e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f004 f92f 	bl	80077a8 <USB_ReadInterrupts>
 800354a:	4603      	mov	r3, r0
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	2b10      	cmp	r3, #16
 8003552:	d161      	bne.n	8003618 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0210 	bic.w	r2, r2, #16
 8003562:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f003 020f 	and.w	r2, r3, #15
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	4413      	add	r3, r2
 8003580:	3304      	adds	r3, #4
 8003582:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	0c5b      	lsrs	r3, r3, #17
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	2b02      	cmp	r3, #2
 800358e:	d124      	bne.n	80035da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003596:	4013      	ands	r3, r2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d035      	beq.n	8003608 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	6a38      	ldr	r0, [r7, #32]
 80035b0:	f003 ff66 	bl	8007480 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035c0:	441a      	add	r2, r3
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	6a1a      	ldr	r2, [r3, #32]
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035d2:	441a      	add	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	621a      	str	r2, [r3, #32]
 80035d8:	e016      	b.n	8003608 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	0c5b      	lsrs	r3, r3, #17
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	2b06      	cmp	r3, #6
 80035e4:	d110      	bne.n	8003608 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035ec:	2208      	movs	r2, #8
 80035ee:	4619      	mov	r1, r3
 80035f0:	6a38      	ldr	r0, [r7, #32]
 80035f2:	f003 ff45 	bl	8007480 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	6a1a      	ldr	r2, [r3, #32]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003602:	441a      	add	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0210 	orr.w	r2, r2, #16
 8003616:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f004 f8c3 	bl	80077a8 <USB_ReadInterrupts>
 8003622:	4603      	mov	r3, r0
 8003624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003628:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800362c:	f040 80a7 	bne.w	800377e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f004 f8c8 	bl	80077ce <USB_ReadDevAllOutEpInterrupt>
 800363e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003640:	e099      	b.n	8003776 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 808e 	beq.w	800376a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	4611      	mov	r1, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f004 f8ec 	bl	8007836 <USB_ReadDevOutEPInterrupt>
 800365e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00c      	beq.n	8003684 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	4413      	add	r3, r2
 8003672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003676:	461a      	mov	r2, r3
 8003678:	2301      	movs	r3, #1
 800367a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800367c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fef0 	bl	8004464 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00c      	beq.n	80036a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800369a:	461a      	mov	r2, r3
 800369c:	2308      	movs	r3, #8
 800369e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80036a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 ffc6 	bl	8004634 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d008      	beq.n	80036c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036be:	461a      	mov	r2, r3
 80036c0:	2310      	movs	r3, #16
 80036c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d030      	beq.n	8003730 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b80      	cmp	r3, #128	; 0x80
 80036d8:	d109      	bne.n	80036ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80036ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4413      	add	r3, r2
 8003700:	3304      	adds	r3, #4
 8003702:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	78db      	ldrb	r3, [r3, #3]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d108      	bne.n	800371e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2200      	movs	r2, #0
 8003710:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	b2db      	uxtb	r3, r3
 8003716:	4619      	mov	r1, r3
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f006 fc5f 	bl	8009fdc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372a:	461a      	mov	r2, r3
 800372c:	2302      	movs	r3, #2
 800372e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	4413      	add	r3, r2
 8003742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003746:	461a      	mov	r2, r3
 8003748:	2320      	movs	r3, #32
 800374a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003762:	461a      	mov	r2, r3
 8003764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003768:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	3301      	adds	r3, #1
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	085b      	lsrs	r3, r3, #1
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	f47f af62 	bne.w	8003642 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f004 f810 	bl	80077a8 <USB_ReadInterrupts>
 8003788:	4603      	mov	r3, r0
 800378a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800378e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003792:	f040 80db 	bne.w	800394c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f004 f831 	bl	8007802 <USB_ReadDevAllInEpInterrupt>
 80037a0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80037a6:	e0cd      	b.n	8003944 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80c2 	beq.w	8003938 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	4611      	mov	r1, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f004 f857 	bl	8007872 <USB_ReadDevInEPInterrupt>
 80037c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d057      	beq.n	8003880 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	2201      	movs	r2, #1
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69f9      	ldr	r1, [r7, #28]
 80037ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037f0:	4013      	ands	r3, r2
 80037f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003800:	461a      	mov	r2, r3
 8003802:	2301      	movs	r3, #1
 8003804:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d132      	bne.n	8003874 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003812:	4613      	mov	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	334c      	adds	r3, #76	; 0x4c
 800381e:	6819      	ldr	r1, [r3, #0]
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003824:	4613      	mov	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4403      	add	r3, r0
 800382e:	3348      	adds	r3, #72	; 0x48
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4419      	add	r1, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4403      	add	r3, r0
 8003842:	334c      	adds	r3, #76	; 0x4c
 8003844:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	2b00      	cmp	r3, #0
 800384a:	d113      	bne.n	8003874 <HAL_PCD_IRQHandler+0x3a2>
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	3354      	adds	r3, #84	; 0x54
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d108      	bne.n	8003874 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800386c:	461a      	mov	r2, r3
 800386e:	2101      	movs	r1, #1
 8003870:	f004 f860 	bl	8007934 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	b2db      	uxtb	r3, r3
 8003878:	4619      	mov	r1, r3
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f006 fb29 	bl	8009ed2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003896:	461a      	mov	r2, r3
 8003898:	2308      	movs	r3, #8
 800389a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d008      	beq.n	80038b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b2:	461a      	mov	r2, r3
 80038b4:	2310      	movs	r3, #16
 80038b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d008      	beq.n	80038d4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ce:	461a      	mov	r2, r3
 80038d0:	2340      	movs	r3, #64	; 0x40
 80038d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d023      	beq.n	8003926 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80038de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038e0:	6a38      	ldr	r0, [r7, #32]
 80038e2:	f002 ff33 	bl	800674c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80038e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e8:	4613      	mov	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	3338      	adds	r3, #56	; 0x38
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	3304      	adds	r3, #4
 80038f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	78db      	ldrb	r3, [r3, #3]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d108      	bne.n	8003914 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2200      	movs	r2, #0
 8003906:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	b2db      	uxtb	r3, r3
 800390c:	4619      	mov	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f006 fb76 	bl	800a000 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003920:	461a      	mov	r2, r3
 8003922:	2302      	movs	r3, #2
 8003924:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fd08 	bl	8004348 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	3301      	adds	r3, #1
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	2b00      	cmp	r3, #0
 8003948:	f47f af2e 	bne.w	80037a8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f003 ff29 	bl	80077a8 <USB_ReadInterrupts>
 8003956:	4603      	mov	r3, r0
 8003958:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800395c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003960:	d122      	bne.n	80039a8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800397c:	2b01      	cmp	r3, #1
 800397e:	d108      	bne.n	8003992 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003988:	2100      	movs	r1, #0
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f006 fcf0 	bl	800a370 <HAL_PCDEx_LPM_Callback>
 8003990:	e002      	b.n	8003998 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f006 fb14 	bl	8009fc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80039a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f003 fefb 	bl	80077a8 <USB_ReadInterrupts>
 80039b2:	4603      	mov	r3, r0
 80039b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039bc:	d112      	bne.n	80039e4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d102      	bne.n	80039d4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f006 fad0 	bl	8009f74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80039e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f003 fedd 	bl	80077a8 <USB_ReadInterrupts>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039f8:	d121      	bne.n	8003a3e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003a08:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d111      	bne.n	8003a38 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	f003 020f 	and.w	r2, r3, #15
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a2e:	2101      	movs	r1, #1
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f006 fc9d 	bl	800a370 <HAL_PCDEx_LPM_Callback>
 8003a36:	e002      	b.n	8003a3e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f006 fa9b 	bl	8009f74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f003 feb0 	bl	80077a8 <USB_ReadInterrupts>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a52:	f040 80b7 	bne.w	8003bc4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2110      	movs	r1, #16
 8003a70:	4618      	mov	r0, r3
 8003a72:	f002 fe6b 	bl	800674c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a76:	2300      	movs	r3, #0
 8003a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a7a:	e046      	b.n	8003b0a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a8e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa0:	0151      	lsls	r1, r2, #5
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	440a      	add	r2, r1
 8003aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003aae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abc:	461a      	mov	r2, r3
 8003abe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ac2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ad4:	0151      	lsls	r1, r2, #5
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	440a      	add	r2, r1
 8003ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ade:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ae2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003af4:	0151      	lsls	r1, r2, #5
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	440a      	add	r2, r1
 8003afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003afe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b02:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b06:	3301      	adds	r3, #1
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d3b3      	bcc.n	8003a7c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b22:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003b26:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d016      	beq.n	8003b5e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b40:	f043 030b 	orr.w	r3, r3, #11
 8003b44:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b56:	f043 030b 	orr.w	r3, r3, #11
 8003b5a:	6453      	str	r3, [r2, #68]	; 0x44
 8003b5c:	e015      	b.n	8003b8a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	f242 032b 	movw	r3, #8235	; 0x202b
 8003b72:	4313      	orrs	r3, r2
 8003b74:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b84:	f043 030b 	orr.w	r3, r3, #11
 8003b88:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b98:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003b9c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f003 fec0 	bl	8007934 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003bc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f003 fded 	bl	80077a8 <USB_ReadInterrupts>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd8:	d124      	bne.n	8003c24 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f003 fe84 	bl	80078ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f002 fe2c 	bl	8006846 <USB_GetDevSpeed>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681c      	ldr	r4, [r3, #0]
 8003bfa:	f001 fa83 	bl	8005104 <HAL_RCC_GetHCLKFreq>
 8003bfe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f002 fb31 	bl	8006270 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f006 f987 	bl	8009f22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003c22:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f003 fdbd 	bl	80077a8 <USB_ReadInterrupts>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d10a      	bne.n	8003c4e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f006 f964 	bl	8009f06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695a      	ldr	r2, [r3, #20]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f002 0208 	and.w	r2, r2, #8
 8003c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f003 fda8 	bl	80077a8 <USB_ReadInterrupts>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	2b80      	cmp	r3, #128	; 0x80
 8003c60:	d122      	bne.n	8003ca8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c6e:	2301      	movs	r3, #1
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
 8003c72:	e014      	b.n	8003c9e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d105      	bne.n	8003c98 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	4619      	mov	r1, r3
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fb27 	bl	80042e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d3e5      	bcc.n	8003c74 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f003 fd7b 	bl	80077a8 <USB_ReadInterrupts>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cbc:	d13b      	bne.n	8003d36 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc2:	e02b      	b.n	8003d1c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd8:	4613      	mov	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	3340      	adds	r3, #64	; 0x40
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d115      	bne.n	8003d16 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003cea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	da12      	bge.n	8003d16 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	333f      	adds	r3, #63	; 0x3f
 8003d00:	2201      	movs	r2, #1
 8003d02:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fae8 	bl	80042e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	3301      	adds	r3, #1
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d3ce      	bcc.n	8003cc4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695a      	ldr	r2, [r3, #20]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003d34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f003 fd34 	bl	80077a8 <USB_ReadInterrupts>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d4a:	d155      	bne.n	8003df8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d50:	e045      	b.n	8003dde <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d66:	4613      	mov	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d12e      	bne.n	8003dd8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	da2b      	bge.n	8003dd8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003d8c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d121      	bne.n	8003dd8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd4:	6053      	str	r3, [r2, #4]
            break;
 8003dd6:	e007      	b.n	8003de8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	3301      	adds	r3, #1
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d3b4      	bcc.n	8003d52 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f003 fcd3 	bl	80077a8 <USB_ReadInterrupts>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0c:	d10a      	bne.n	8003e24 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f006 f908 	bl	800a024 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f003 fcbd 	bl	80077a8 <USB_ReadInterrupts>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d115      	bne.n	8003e64 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f006 f8f8 	bl	800a040 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6859      	ldr	r1, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	605a      	str	r2, [r3, #4]
 8003e60:	e000      	b.n	8003e64 <HAL_PCD_IRQHandler+0x992>
      return;
 8003e62:	bf00      	nop
    }
  }
}
 8003e64:	3734      	adds	r7, #52	; 0x34
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd90      	pop	{r4, r7, pc}

08003e6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	460b      	mov	r3, r1
 8003e74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_PCD_SetAddress+0x1a>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e013      	b.n	8003eac <HAL_PCD_SetAddress+0x42>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f003 fc1b 	bl	80076d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	4608      	mov	r0, r1
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	70fb      	strb	r3, [r7, #3]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	803b      	strh	r3, [r7, #0]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	da0f      	bge.n	8003efa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	f003 020f 	and.w	r2, r3, #15
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	3338      	adds	r3, #56	; 0x38
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	4413      	add	r3, r2
 8003eee:	3304      	adds	r3, #4
 8003ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	705a      	strb	r2, [r3, #1]
 8003ef8:	e00f      	b.n	8003f1a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	f003 020f 	and.w	r2, r3, #15
 8003f00:	4613      	mov	r3, r2
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4413      	add	r3, r2
 8003f10:	3304      	adds	r3, #4
 8003f12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f1a:	78fb      	ldrb	r3, [r7, #3]
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f26:	883a      	ldrh	r2, [r7, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	78ba      	ldrb	r2, [r7, #2]
 8003f30:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	785b      	ldrb	r3, [r3, #1]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d004      	beq.n	8003f44 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f44:	78bb      	ldrb	r3, [r7, #2]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d102      	bne.n	8003f50 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_PCD_EP_Open+0xaa>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e00e      	b.n	8003f7c <HAL_PCD_EP_Open+0xc8>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68f9      	ldr	r1, [r7, #12]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f002 fc8f 	bl	8006890 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003f7a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	da0f      	bge.n	8003fb8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	f003 020f 	and.w	r2, r3, #15
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	3338      	adds	r3, #56	; 0x38
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	4413      	add	r3, r2
 8003fac:	3304      	adds	r3, #4
 8003fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	705a      	strb	r2, [r3, #1]
 8003fb6:	e00f      	b.n	8003fd8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	f003 020f 	and.w	r2, r3, #15
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	4413      	add	r3, r2
 8003fce:	3304      	adds	r3, #4
 8003fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_PCD_EP_Close+0x6e>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e00e      	b.n	8004010 <HAL_PCD_EP_Close+0x8c>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68f9      	ldr	r1, [r7, #12]
 8004000:	4618      	mov	r0, r3
 8004002:	f002 fccd 	bl	80069a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	460b      	mov	r3, r1
 8004026:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004028:	7afb      	ldrb	r3, [r7, #11]
 800402a:	f003 020f 	and.w	r2, r3, #15
 800402e:	4613      	mov	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4413      	add	r3, r2
 800403e:	3304      	adds	r3, #4
 8004040:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2200      	movs	r2, #0
 8004052:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2200      	movs	r2, #0
 8004058:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800405a:	7afb      	ldrb	r3, [r7, #11]
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	b2da      	uxtb	r2, r3
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d102      	bne.n	8004074 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004074:	7afb      	ldrb	r3, [r7, #11]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	461a      	mov	r2, r3
 800408a:	6979      	ldr	r1, [r7, #20]
 800408c:	f002 ffb4 	bl	8006ff8 <USB_EP0StartXfer>
 8004090:	e008      	b.n	80040a4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	6979      	ldr	r1, [r7, #20]
 80040a0:	f002 fd5a 	bl	8006b58 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	460b      	mov	r3, r1
 80040b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	f003 020f 	and.w	r2, r3, #15
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4413      	add	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80040d0:	681b      	ldr	r3, [r3, #0]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
 80040ea:	460b      	mov	r3, r1
 80040ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ee:	7afb      	ldrb	r3, [r7, #11]
 80040f0:	f003 020f 	and.w	r2, r3, #15
 80040f4:	4613      	mov	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	3338      	adds	r3, #56	; 0x38
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4413      	add	r3, r2
 8004102:	3304      	adds	r3, #4
 8004104:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2200      	movs	r2, #0
 8004116:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2201      	movs	r2, #1
 800411c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800411e:	7afb      	ldrb	r3, [r7, #11]
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	b2da      	uxtb	r2, r3
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d102      	bne.n	8004138 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004138:	7afb      	ldrb	r3, [r7, #11]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	6979      	ldr	r1, [r7, #20]
 8004150:	f002 ff52 	bl	8006ff8 <USB_EP0StartXfer>
 8004154:	e008      	b.n	8004168 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	b2db      	uxtb	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	6979      	ldr	r1, [r7, #20]
 8004164:	f002 fcf8 	bl	8006b58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	460b      	mov	r3, r1
 800417c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800417e:	78fb      	ldrb	r3, [r7, #3]
 8004180:	f003 020f 	and.w	r2, r3, #15
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	429a      	cmp	r2, r3
 800418a:	d901      	bls.n	8004190 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e050      	b.n	8004232 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004194:	2b00      	cmp	r3, #0
 8004196:	da0f      	bge.n	80041b8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	f003 020f 	and.w	r2, r3, #15
 800419e:	4613      	mov	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	3338      	adds	r3, #56	; 0x38
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	4413      	add	r3, r2
 80041ac:	3304      	adds	r3, #4
 80041ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	705a      	strb	r2, [r3, #1]
 80041b6:	e00d      	b.n	80041d4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	3304      	adds	r3, #4
 80041cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_PCD_EP_SetStall+0x82>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e01e      	b.n	8004232 <HAL_PCD_EP_SetStall+0xc0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68f9      	ldr	r1, [r7, #12]
 8004202:	4618      	mov	r0, r3
 8004204:	f003 f994 	bl	8007530 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	b2d9      	uxtb	r1, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004222:	461a      	mov	r2, r3
 8004224:	f003 fb86 	bl	8007934 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	460b      	mov	r3, r1
 8004244:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	f003 020f 	and.w	r2, r3, #15
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	429a      	cmp	r2, r3
 8004252:	d901      	bls.n	8004258 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e042      	b.n	80042de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800425c:	2b00      	cmp	r3, #0
 800425e:	da0f      	bge.n	8004280 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	f003 020f 	and.w	r2, r3, #15
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	3338      	adds	r3, #56	; 0x38
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4413      	add	r3, r2
 8004274:	3304      	adds	r3, #4
 8004276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	705a      	strb	r2, [r3, #1]
 800427e:	e00f      	b.n	80042a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	f003 020f 	and.w	r2, r3, #15
 8004286:	4613      	mov	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	3304      	adds	r3, #4
 8004298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_PCD_EP_ClrStall+0x86>
 80042bc:	2302      	movs	r3, #2
 80042be:	e00e      	b.n	80042de <HAL_PCD_EP_ClrStall+0xa4>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68f9      	ldr	r1, [r7, #12]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f003 f99c 	bl	800760c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	460b      	mov	r3, r1
 80042f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80042f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	da0c      	bge.n	8004314 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	f003 020f 	and.w	r2, r3, #15
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	3338      	adds	r3, #56	; 0x38
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	4413      	add	r3, r2
 800430e:	3304      	adds	r3, #4
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	e00c      	b.n	800432e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	f003 020f 	and.w	r2, r3, #15
 800431a:	4613      	mov	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	4413      	add	r3, r2
 800432a:	3304      	adds	r3, #4
 800432c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68f9      	ldr	r1, [r7, #12]
 8004334:	4618      	mov	r0, r3
 8004336:	f002 ffbb 	bl	80072b0 <USB_EPStopXfer>
 800433a:	4603      	mov	r3, r0
 800433c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800433e:	7afb      	ldrb	r3, [r7, #11]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08a      	sub	sp, #40	; 0x28
 800434c:	af02      	add	r7, sp, #8
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	4613      	mov	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4413      	add	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	3338      	adds	r3, #56	; 0x38
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	4413      	add	r3, r2
 800436c:	3304      	adds	r3, #4
 800436e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a1a      	ldr	r2, [r3, #32]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	429a      	cmp	r2, r3
 800437a:	d901      	bls.n	8004380 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e06c      	b.n	800445a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	699a      	ldr	r2, [r3, #24]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	429a      	cmp	r2, r3
 8004394:	d902      	bls.n	800439c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	3303      	adds	r3, #3
 80043a0:	089b      	lsrs	r3, r3, #2
 80043a2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043a4:	e02b      	b.n	80043fe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d902      	bls.n	80043c2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	3303      	adds	r3, #3
 80043c6:	089b      	lsrs	r3, r3, #2
 80043c8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6919      	ldr	r1, [r3, #16]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	4603      	mov	r3, r0
 80043e0:	6978      	ldr	r0, [r7, #20]
 80043e2:	f003 f80f 	bl	8007404 <USB_WritePacket>

    ep->xfer_buff  += len;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	441a      	add	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a1a      	ldr	r2, [r3, #32]
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	441a      	add	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	429a      	cmp	r2, r3
 8004412:	d809      	bhi.n	8004428 <PCD_WriteEmptyTxFifo+0xe0>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1a      	ldr	r2, [r3, #32]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800441c:	429a      	cmp	r2, r3
 800441e:	d203      	bcs.n	8004428 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1be      	bne.n	80043a6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	699a      	ldr	r2, [r3, #24]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	429a      	cmp	r2, r3
 8004432:	d811      	bhi.n	8004458 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	2201      	movs	r2, #1
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	43db      	mvns	r3, r3
 800444e:	6939      	ldr	r1, [r7, #16]
 8004450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004454:	4013      	ands	r3, r2
 8004456:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	333c      	adds	r3, #60	; 0x3c
 800447c:	3304      	adds	r3, #4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	4413      	add	r3, r2
 800448a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d17b      	bne.n	8004592 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d015      	beq.n	80044d0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	4a61      	ldr	r2, [pc, #388]	; (800462c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	f240 80b9 	bls.w	8004620 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80b3 	beq.w	8004620 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c6:	461a      	mov	r2, r3
 80044c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044cc:	6093      	str	r3, [r2, #8]
 80044ce:	e0a7      	b.n	8004620 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d009      	beq.n	80044ee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e6:	461a      	mov	r2, r3
 80044e8:	2320      	movs	r3, #32
 80044ea:	6093      	str	r3, [r2, #8]
 80044ec:	e098      	b.n	8004620 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f040 8093 	bne.w	8004620 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	4a4b      	ldr	r2, [pc, #300]	; (800462c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d90f      	bls.n	8004522 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004518:	461a      	mov	r2, r3
 800451a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451e:	6093      	str	r3, [r2, #8]
 8004520:	e07e      	b.n	8004620 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	4613      	mov	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	4413      	add	r3, r2
 8004534:	3304      	adds	r3, #4
 8004536:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	69da      	ldr	r2, [r3, #28]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	0159      	lsls	r1, r3, #5
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	440b      	add	r3, r1
 8004544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800454e:	1ad2      	subs	r2, r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d114      	bne.n	8004584 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800456c:	461a      	mov	r2, r3
 800456e:	2101      	movs	r1, #1
 8004570:	f003 f9e0 	bl	8007934 <USB_EP0_OutStart>
 8004574:	e006      	b.n	8004584 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	441a      	add	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	4619      	mov	r1, r3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f005 fc86 	bl	8009e9c <HAL_PCD_DataOutStageCallback>
 8004590:	e046      	b.n	8004620 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	4a26      	ldr	r2, [pc, #152]	; (8004630 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d124      	bne.n	80045e4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b0:	461a      	mov	r2, r3
 80045b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045b6:	6093      	str	r3, [r2, #8]
 80045b8:	e032      	b.n	8004620 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d0:	461a      	mov	r2, r3
 80045d2:	2320      	movs	r3, #32
 80045d4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f005 fc5d 	bl	8009e9c <HAL_PCD_DataOutStageCallback>
 80045e2:	e01d      	b.n	8004620 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d114      	bne.n	8004614 <PCD_EP_OutXfrComplete_int+0x1b0>
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	4613      	mov	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	440b      	add	r3, r1
 80045f8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d108      	bne.n	8004614 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800460c:	461a      	mov	r2, r3
 800460e:	2100      	movs	r1, #0
 8004610:	f003 f990 	bl	8007934 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	4619      	mov	r1, r3
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f005 fc3e 	bl	8009e9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3720      	adds	r7, #32
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	4f54300a 	.word	0x4f54300a
 8004630:	4f54310a 	.word	0x4f54310a

08004634 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	333c      	adds	r3, #60	; 0x3c
 800464c:	3304      	adds	r3, #4
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a15      	ldr	r2, [pc, #84]	; (80046bc <PCD_EP_OutSetupPacket_int+0x88>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d90e      	bls.n	8004688 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004680:	461a      	mov	r2, r3
 8004682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004686:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f005 fbf5 	bl	8009e78 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <PCD_EP_OutSetupPacket_int+0x88>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d90c      	bls.n	80046b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d108      	bne.n	80046b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046a8:	461a      	mov	r2, r3
 80046aa:	2101      	movs	r1, #1
 80046ac:	f003 f942 	bl	8007934 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	4f54300a 	.word	0x4f54300a

080046c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	70fb      	strb	r3, [r7, #3]
 80046cc:	4613      	mov	r3, r2
 80046ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d107      	bne.n	80046ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80046de:	883b      	ldrh	r3, [r7, #0]
 80046e0:	0419      	lsls	r1, r3, #16
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28
 80046ec:	e028      	b.n	8004740 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	0c1b      	lsrs	r3, r3, #16
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	4413      	add	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046fc:	2300      	movs	r3, #0
 80046fe:	73fb      	strb	r3, [r7, #15]
 8004700:	e00d      	b.n	800471e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	3340      	adds	r3, #64	; 0x40
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	0c1b      	lsrs	r3, r3, #16
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	4413      	add	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	3301      	adds	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
 800471e:	7bfa      	ldrb	r2, [r7, #15]
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	3b01      	subs	r3, #1
 8004724:	429a      	cmp	r2, r3
 8004726:	d3ec      	bcc.n	8004702 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004728:	883b      	ldrh	r3, [r7, #0]
 800472a:	0418      	lsls	r0, r3, #16
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6819      	ldr	r1, [r3, #0]
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	3b01      	subs	r3, #1
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	4302      	orrs	r2, r0
 8004738:	3340      	adds	r3, #64	; 0x40
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	460b      	mov	r3, r1
 8004758:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	887a      	ldrh	r2, [r7, #2]
 8004760:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	10000003 	.word	0x10000003

080047b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80047be:	2300      	movs	r3, #0
 80047c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80047c2:	4b23      	ldr	r3, [pc, #140]	; (8004850 <HAL_PWREx_EnableOverDrive+0x98>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	4a22      	ldr	r2, [pc, #136]	; (8004850 <HAL_PWREx_EnableOverDrive+0x98>)
 80047c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047cc:	6413      	str	r3, [r2, #64]	; 0x40
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <HAL_PWREx_EnableOverDrive+0x98>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80047da:	4b1e      	ldr	r3, [pc, #120]	; (8004854 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1d      	ldr	r2, [pc, #116]	; (8004854 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047e6:	f7fd f9f3 	bl	8001bd0 <HAL_GetTick>
 80047ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80047ec:	e009      	b.n	8004802 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047ee:	f7fd f9ef 	bl	8001bd0 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047fc:	d901      	bls.n	8004802 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e022      	b.n	8004848 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004802:	4b14      	ldr	r3, [pc, #80]	; (8004854 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800480a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800480e:	d1ee      	bne.n	80047ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004810:	4b10      	ldr	r3, [pc, #64]	; (8004854 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a0f      	ldr	r2, [pc, #60]	; (8004854 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800481a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800481c:	f7fd f9d8 	bl	8001bd0 <HAL_GetTick>
 8004820:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004822:	e009      	b.n	8004838 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004824:	f7fd f9d4 	bl	8001bd0 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004832:	d901      	bls.n	8004838 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e007      	b.n	8004848 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004838:	4b06      	ldr	r3, [pc, #24]	; (8004854 <HAL_PWREx_EnableOverDrive+0x9c>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004844:	d1ee      	bne.n	8004824 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40023800 	.word	0x40023800
 8004854:	40007000 	.word	0x40007000

08004858 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004860:	2300      	movs	r3, #0
 8004862:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e291      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8087 	beq.w	800498a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800487c:	4b96      	ldr	r3, [pc, #600]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 030c 	and.w	r3, r3, #12
 8004884:	2b04      	cmp	r3, #4
 8004886:	d00c      	beq.n	80048a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004888:	4b93      	ldr	r3, [pc, #588]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 030c 	and.w	r3, r3, #12
 8004890:	2b08      	cmp	r3, #8
 8004892:	d112      	bne.n	80048ba <HAL_RCC_OscConfig+0x62>
 8004894:	4b90      	ldr	r3, [pc, #576]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a0:	d10b      	bne.n	80048ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a2:	4b8d      	ldr	r3, [pc, #564]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d06c      	beq.n	8004988 <HAL_RCC_OscConfig+0x130>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d168      	bne.n	8004988 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e26b      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c2:	d106      	bne.n	80048d2 <HAL_RCC_OscConfig+0x7a>
 80048c4:	4b84      	ldr	r3, [pc, #528]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a83      	ldr	r2, [pc, #524]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 80048ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	e02e      	b.n	8004930 <HAL_RCC_OscConfig+0xd8>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10c      	bne.n	80048f4 <HAL_RCC_OscConfig+0x9c>
 80048da:	4b7f      	ldr	r3, [pc, #508]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a7e      	ldr	r2, [pc, #504]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 80048e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4b7c      	ldr	r3, [pc, #496]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a7b      	ldr	r2, [pc, #492]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 80048ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e01d      	b.n	8004930 <HAL_RCC_OscConfig+0xd8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048fc:	d10c      	bne.n	8004918 <HAL_RCC_OscConfig+0xc0>
 80048fe:	4b76      	ldr	r3, [pc, #472]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a75      	ldr	r2, [pc, #468]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	4b73      	ldr	r3, [pc, #460]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a72      	ldr	r2, [pc, #456]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	e00b      	b.n	8004930 <HAL_RCC_OscConfig+0xd8>
 8004918:	4b6f      	ldr	r3, [pc, #444]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a6e      	ldr	r2, [pc, #440]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 800491e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	4b6c      	ldr	r3, [pc, #432]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a6b      	ldr	r2, [pc, #428]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 800492a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d013      	beq.n	8004960 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fd f94a 	bl	8001bd0 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004940:	f7fd f946 	bl	8001bd0 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	; 0x64
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e21f      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004952:	4b61      	ldr	r3, [pc, #388]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0xe8>
 800495e:	e014      	b.n	800498a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7fd f936 	bl	8001bd0 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004968:	f7fd f932 	bl	8001bd0 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	; 0x64
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e20b      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800497a:	4b57      	ldr	r3, [pc, #348]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x110>
 8004986:	e000      	b.n	800498a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d069      	beq.n	8004a6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004996:	4b50      	ldr	r3, [pc, #320]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049a2:	4b4d      	ldr	r3, [pc, #308]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d11c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x190>
 80049ae:	4b4a      	ldr	r3, [pc, #296]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d116      	bne.n	80049e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ba:	4b47      	ldr	r3, [pc, #284]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <HAL_RCC_OscConfig+0x17a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d001      	beq.n	80049d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e1df      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d2:	4b41      	ldr	r3, [pc, #260]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	493d      	ldr	r1, [pc, #244]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e6:	e040      	b.n	8004a6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d023      	beq.n	8004a38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049f0:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a38      	ldr	r2, [pc, #224]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fc:	f7fd f8e8 	bl	8001bd0 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a04:	f7fd f8e4 	bl	8001bd0 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e1bd      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a16:	4b30      	ldr	r3, [pc, #192]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a22:	4b2d      	ldr	r3, [pc, #180]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4929      	ldr	r1, [pc, #164]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]
 8004a36:	e018      	b.n	8004a6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a38:	4b27      	ldr	r3, [pc, #156]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a26      	ldr	r2, [pc, #152]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fd f8c4 	bl	8001bd0 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a4c:	f7fd f8c0 	bl	8001bd0 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e199      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5e:	4b1e      	ldr	r3, [pc, #120]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d038      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d019      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a7e:	4b16      	ldr	r3, [pc, #88]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a82:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8a:	f7fd f8a1 	bl	8001bd0 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a92:	f7fd f89d 	bl	8001bd0 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e176      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aa4:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0x23a>
 8004ab0:	e01a      	b.n	8004ae8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ab2:	4b09      	ldr	r3, [pc, #36]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab6:	4a08      	ldr	r2, [pc, #32]	; (8004ad8 <HAL_RCC_OscConfig+0x280>)
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abe:	f7fd f887 	bl	8001bd0 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac4:	e00a      	b.n	8004adc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac6:	f7fd f883 	bl	8001bd0 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d903      	bls.n	8004adc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e15c      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>
 8004ad8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004adc:	4b91      	ldr	r3, [pc, #580]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1ee      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80a4 	beq.w	8004c3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004af6:	4b8b      	ldr	r3, [pc, #556]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10d      	bne.n	8004b1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b02:	4b88      	ldr	r3, [pc, #544]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	4a87      	ldr	r2, [pc, #540]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b0e:	4b85      	ldr	r3, [pc, #532]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b16:	60bb      	str	r3, [r7, #8]
 8004b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b1e:	4b82      	ldr	r3, [pc, #520]	; (8004d28 <HAL_RCC_OscConfig+0x4d0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d118      	bne.n	8004b5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b2a:	4b7f      	ldr	r3, [pc, #508]	; (8004d28 <HAL_RCC_OscConfig+0x4d0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a7e      	ldr	r2, [pc, #504]	; (8004d28 <HAL_RCC_OscConfig+0x4d0>)
 8004b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b36:	f7fd f84b 	bl	8001bd0 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b3e:	f7fd f847 	bl	8001bd0 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b64      	cmp	r3, #100	; 0x64
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e120      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b50:	4b75      	ldr	r3, [pc, #468]	; (8004d28 <HAL_RCC_OscConfig+0x4d0>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d106      	bne.n	8004b72 <HAL_RCC_OscConfig+0x31a>
 8004b64:	4b6f      	ldr	r3, [pc, #444]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b68:	4a6e      	ldr	r2, [pc, #440]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004b6a:	f043 0301 	orr.w	r3, r3, #1
 8004b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b70:	e02d      	b.n	8004bce <HAL_RCC_OscConfig+0x376>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10c      	bne.n	8004b94 <HAL_RCC_OscConfig+0x33c>
 8004b7a:	4b6a      	ldr	r3, [pc, #424]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7e:	4a69      	ldr	r2, [pc, #420]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004b80:	f023 0301 	bic.w	r3, r3, #1
 8004b84:	6713      	str	r3, [r2, #112]	; 0x70
 8004b86:	4b67      	ldr	r3, [pc, #412]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	4a66      	ldr	r2, [pc, #408]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004b8c:	f023 0304 	bic.w	r3, r3, #4
 8004b90:	6713      	str	r3, [r2, #112]	; 0x70
 8004b92:	e01c      	b.n	8004bce <HAL_RCC_OscConfig+0x376>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b05      	cmp	r3, #5
 8004b9a:	d10c      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x35e>
 8004b9c:	4b61      	ldr	r3, [pc, #388]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba0:	4a60      	ldr	r2, [pc, #384]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004ba2:	f043 0304 	orr.w	r3, r3, #4
 8004ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba8:	4b5e      	ldr	r3, [pc, #376]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bac:	4a5d      	ldr	r2, [pc, #372]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb4:	e00b      	b.n	8004bce <HAL_RCC_OscConfig+0x376>
 8004bb6:	4b5b      	ldr	r3, [pc, #364]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	4a5a      	ldr	r2, [pc, #360]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc2:	4b58      	ldr	r3, [pc, #352]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	4a57      	ldr	r2, [pc, #348]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004bc8:	f023 0304 	bic.w	r3, r3, #4
 8004bcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d015      	beq.n	8004c02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd6:	f7fc fffb 	bl	8001bd0 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bdc:	e00a      	b.n	8004bf4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bde:	f7fc fff7 	bl	8001bd0 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e0ce      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf4:	4b4b      	ldr	r3, [pc, #300]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0ee      	beq.n	8004bde <HAL_RCC_OscConfig+0x386>
 8004c00:	e014      	b.n	8004c2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c02:	f7fc ffe5 	bl	8001bd0 <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c08:	e00a      	b.n	8004c20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0a:	f7fc ffe1 	bl	8001bd0 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e0b8      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c20:	4b40      	ldr	r3, [pc, #256]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1ee      	bne.n	8004c0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c2c:	7dfb      	ldrb	r3, [r7, #23]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d105      	bne.n	8004c3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c32:	4b3c      	ldr	r3, [pc, #240]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	4a3b      	ldr	r2, [pc, #236]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80a4 	beq.w	8004d90 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c48:	4b36      	ldr	r3, [pc, #216]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 030c 	and.w	r3, r3, #12
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d06b      	beq.n	8004d2c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d149      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5c:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a30      	ldr	r2, [pc, #192]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7fc ffb2 	bl	8001bd0 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c70:	f7fc ffae 	bl	8001bd0 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e087      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c82:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69da      	ldr	r2, [r3, #28]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	019b      	lsls	r3, r3, #6
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	085b      	lsrs	r3, r3, #1
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	041b      	lsls	r3, r3, #16
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	061b      	lsls	r3, r3, #24
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	4a1b      	ldr	r2, [pc, #108]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004cb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cbc:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a18      	ldr	r2, [pc, #96]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fc ff82 	bl	8001bd0 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fc ff7e 	bl	8001bd0 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e057      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce2:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x478>
 8004cee:	e04f      	b.n	8004d90 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf0:	4b0c      	ldr	r3, [pc, #48]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a0b      	ldr	r2, [pc, #44]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fc ff68 	bl	8001bd0 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d04:	f7fc ff64 	bl	8001bd0 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e03d      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d16:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <HAL_RCC_OscConfig+0x4cc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x4ac>
 8004d22:	e035      	b.n	8004d90 <HAL_RCC_OscConfig+0x538>
 8004d24:	40023800 	.word	0x40023800
 8004d28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d2c:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <HAL_RCC_OscConfig+0x544>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d028      	beq.n	8004d8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d121      	bne.n	8004d8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d11a      	bne.n	8004d8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d111      	bne.n	8004d8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d72:	085b      	lsrs	r3, r3, #1
 8004d74:	3b01      	subs	r3, #1
 8004d76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d107      	bne.n	8004d8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40023800 	.word	0x40023800

08004da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0d0      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004db8:	4b6a      	ldr	r3, [pc, #424]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d910      	bls.n	8004de8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b67      	ldr	r3, [pc, #412]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f023 020f 	bic.w	r2, r3, #15
 8004dce:	4965      	ldr	r1, [pc, #404]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd6:	4b63      	ldr	r3, [pc, #396]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d001      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0b8      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d020      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e00:	4b59      	ldr	r3, [pc, #356]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	4a58      	ldr	r2, [pc, #352]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e18:	4b53      	ldr	r3, [pc, #332]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4a52      	ldr	r2, [pc, #328]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e24:	4b50      	ldr	r3, [pc, #320]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	494d      	ldr	r1, [pc, #308]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d040      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4a:	4b47      	ldr	r3, [pc, #284]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d115      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e07f      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d107      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e62:	4b41      	ldr	r3, [pc, #260]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e073      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e72:	4b3d      	ldr	r3, [pc, #244]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e06b      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e82:	4b39      	ldr	r3, [pc, #228]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f023 0203 	bic.w	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4936      	ldr	r1, [pc, #216]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e94:	f7fc fe9c 	bl	8001bd0 <HAL_GetTick>
 8004e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	e00a      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e9c:	f7fc fe98 	bl	8001bd0 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e053      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb2:	4b2d      	ldr	r3, [pc, #180]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 020c 	and.w	r2, r3, #12
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d1eb      	bne.n	8004e9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b27      	ldr	r3, [pc, #156]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d210      	bcs.n	8004ef4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b24      	ldr	r3, [pc, #144]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 020f 	bic.w	r2, r3, #15
 8004eda:	4922      	ldr	r1, [pc, #136]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e032      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d008      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f00:	4b19      	ldr	r3, [pc, #100]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4916      	ldr	r1, [pc, #88]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d009      	beq.n	8004f32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f1e:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	490e      	ldr	r1, [pc, #56]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f32:	f000 f821 	bl	8004f78 <HAL_RCC_GetSysClockFreq>
 8004f36:	4602      	mov	r2, r0
 8004f38:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	091b      	lsrs	r3, r3, #4
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	490a      	ldr	r1, [pc, #40]	; (8004f6c <HAL_RCC_ClockConfig+0x1cc>)
 8004f44:	5ccb      	ldrb	r3, [r1, r3]
 8004f46:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4a:	4a09      	ldr	r2, [pc, #36]	; (8004f70 <HAL_RCC_ClockConfig+0x1d0>)
 8004f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f4e:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <HAL_RCC_ClockConfig+0x1d4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fc fdf8 	bl	8001b48 <HAL_InitTick>

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40023c00 	.word	0x40023c00
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	0800a78c 	.word	0x0800a78c
 8004f70:	20000018 	.word	0x20000018
 8004f74:	2000001c 	.word	0x2000001c

08004f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f7c:	b090      	sub	sp, #64	; 0x40
 8004f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	637b      	str	r3, [r7, #52]	; 0x34
 8004f84:	2300      	movs	r3, #0
 8004f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f88:	2300      	movs	r3, #0
 8004f8a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f90:	4b59      	ldr	r3, [pc, #356]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 030c 	and.w	r3, r3, #12
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d00d      	beq.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	f200 80a1 	bhi.w	80050e4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_RCC_GetSysClockFreq+0x34>
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d003      	beq.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004faa:	e09b      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fac:	4b53      	ldr	r3, [pc, #332]	; (80050fc <HAL_RCC_GetSysClockFreq+0x184>)
 8004fae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fb0:	e09b      	b.n	80050ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fb2:	4b53      	ldr	r3, [pc, #332]	; (8005100 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fb6:	e098      	b.n	80050ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fb8:	4b4f      	ldr	r3, [pc, #316]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fc0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004fc2:	4b4d      	ldr	r3, [pc, #308]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d028      	beq.n	8005020 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fce:	4b4a      	ldr	r3, [pc, #296]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	099b      	lsrs	r3, r3, #6
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	623b      	str	r3, [r7, #32]
 8004fd8:	627a      	str	r2, [r7, #36]	; 0x24
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4b47      	ldr	r3, [pc, #284]	; (8005100 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fe4:	fb03 f201 	mul.w	r2, r3, r1
 8004fe8:	2300      	movs	r3, #0
 8004fea:	fb00 f303 	mul.w	r3, r0, r3
 8004fee:	4413      	add	r3, r2
 8004ff0:	4a43      	ldr	r2, [pc, #268]	; (8005100 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ff2:	fba0 1202 	umull	r1, r2, r0, r2
 8004ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ff8:	460a      	mov	r2, r1
 8004ffa:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ffe:	4413      	add	r3, r2
 8005000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005004:	2200      	movs	r2, #0
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	61fa      	str	r2, [r7, #28]
 800500a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800500e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005012:	f7fb f8f9 	bl	8000208 <__aeabi_uldivmod>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4613      	mov	r3, r2
 800501c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800501e:	e053      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005020:	4b35      	ldr	r3, [pc, #212]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	099b      	lsrs	r3, r3, #6
 8005026:	2200      	movs	r2, #0
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	617a      	str	r2, [r7, #20]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005032:	f04f 0b00 	mov.w	fp, #0
 8005036:	4652      	mov	r2, sl
 8005038:	465b      	mov	r3, fp
 800503a:	f04f 0000 	mov.w	r0, #0
 800503e:	f04f 0100 	mov.w	r1, #0
 8005042:	0159      	lsls	r1, r3, #5
 8005044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005048:	0150      	lsls	r0, r2, #5
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	ebb2 080a 	subs.w	r8, r2, sl
 8005052:	eb63 090b 	sbc.w	r9, r3, fp
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005062:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005066:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800506a:	ebb2 0408 	subs.w	r4, r2, r8
 800506e:	eb63 0509 	sbc.w	r5, r3, r9
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	00eb      	lsls	r3, r5, #3
 800507c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005080:	00e2      	lsls	r2, r4, #3
 8005082:	4614      	mov	r4, r2
 8005084:	461d      	mov	r5, r3
 8005086:	eb14 030a 	adds.w	r3, r4, sl
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	eb45 030b 	adc.w	r3, r5, fp
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800509e:	4629      	mov	r1, r5
 80050a0:	028b      	lsls	r3, r1, #10
 80050a2:	4621      	mov	r1, r4
 80050a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050a8:	4621      	mov	r1, r4
 80050aa:	028a      	lsls	r2, r1, #10
 80050ac:	4610      	mov	r0, r2
 80050ae:	4619      	mov	r1, r3
 80050b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b2:	2200      	movs	r2, #0
 80050b4:	60bb      	str	r3, [r7, #8]
 80050b6:	60fa      	str	r2, [r7, #12]
 80050b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050bc:	f7fb f8a4 	bl	8000208 <__aeabi_uldivmod>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4613      	mov	r3, r2
 80050c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80050c8:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	0c1b      	lsrs	r3, r3, #16
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	3301      	adds	r3, #1
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80050d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050e2:	e002      	b.n	80050ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_RCC_GetSysClockFreq+0x184>)
 80050e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3740      	adds	r7, #64	; 0x40
 80050f0:	46bd      	mov	sp, r7
 80050f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050f6:	bf00      	nop
 80050f8:	40023800 	.word	0x40023800
 80050fc:	00f42400 	.word	0x00f42400
 8005100:	00b71b00 	.word	0x00b71b00

08005104 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005108:	4b03      	ldr	r3, [pc, #12]	; (8005118 <HAL_RCC_GetHCLKFreq+0x14>)
 800510a:	681b      	ldr	r3, [r3, #0]
}
 800510c:	4618      	mov	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	20000018 	.word	0x20000018

0800511c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005134:	2300      	movs	r3, #0
 8005136:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d012      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005144:	4b69      	ldr	r3, [pc, #420]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	4a68      	ldr	r2, [pc, #416]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800514a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800514e:	6093      	str	r3, [r2, #8]
 8005150:	4b66      	ldr	r3, [pc, #408]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005158:	4964      	ldr	r1, [pc, #400]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515a:	4313      	orrs	r3, r2
 800515c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005166:	2301      	movs	r3, #1
 8005168:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d017      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005176:	4b5d      	ldr	r3, [pc, #372]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800517c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005184:	4959      	ldr	r1, [pc, #356]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005194:	d101      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005196:	2301      	movs	r3, #1
 8005198:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80051a2:	2301      	movs	r3, #1
 80051a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d017      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051b2:	4b4e      	ldr	r3, [pc, #312]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	494a      	ldr	r1, [pc, #296]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d0:	d101      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80051d2:	2301      	movs	r3, #1
 80051d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80051de:	2301      	movs	r3, #1
 80051e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80051ee:	2301      	movs	r3, #1
 80051f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 808b 	beq.w	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005200:	4b3a      	ldr	r3, [pc, #232]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	4a39      	ldr	r2, [pc, #228]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520a:	6413      	str	r3, [r2, #64]	; 0x40
 800520c:	4b37      	ldr	r3, [pc, #220]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005214:	60bb      	str	r3, [r7, #8]
 8005216:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005218:	4b35      	ldr	r3, [pc, #212]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a34      	ldr	r2, [pc, #208]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800521e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005222:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005224:	f7fc fcd4 	bl	8001bd0 <HAL_GetTick>
 8005228:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800522a:	e008      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800522c:	f7fc fcd0 	bl	8001bd0 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b64      	cmp	r3, #100	; 0x64
 8005238:	d901      	bls.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e357      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800523e:	4b2c      	ldr	r3, [pc, #176]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800524a:	4b28      	ldr	r3, [pc, #160]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d035      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	429a      	cmp	r2, r3
 8005266:	d02e      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005268:	4b20      	ldr	r3, [pc, #128]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005270:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005272:	4b1e      	ldr	r3, [pc, #120]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	4a1d      	ldr	r2, [pc, #116]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800527e:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005282:	4a1a      	ldr	r2, [pc, #104]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005288:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800528a:	4a18      	ldr	r2, [pc, #96]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005290:	4b16      	ldr	r3, [pc, #88]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b01      	cmp	r3, #1
 800529a:	d114      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529c:	f7fc fc98 	bl	8001bd0 <HAL_GetTick>
 80052a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a2:	e00a      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a4:	f7fc fc94 	bl	8001bd0 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d901      	bls.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e319      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ba:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0ee      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d2:	d111      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052e0:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80052e2:	400b      	ands	r3, r1
 80052e4:	4901      	ldr	r1, [pc, #4]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
 80052ea:	e00b      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80052ec:	40023800 	.word	0x40023800
 80052f0:	40007000 	.word	0x40007000
 80052f4:	0ffffcff 	.word	0x0ffffcff
 80052f8:	4baa      	ldr	r3, [pc, #680]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	4aa9      	ldr	r2, [pc, #676]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005302:	6093      	str	r3, [r2, #8]
 8005304:	4ba7      	ldr	r3, [pc, #668]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005306:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005310:	49a4      	ldr	r1, [pc, #656]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005312:	4313      	orrs	r3, r2
 8005314:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b00      	cmp	r3, #0
 8005320:	d010      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005322:	4ba0      	ldr	r3, [pc, #640]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005328:	4a9e      	ldr	r2, [pc, #632]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800532a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800532e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005332:	4b9c      	ldr	r3, [pc, #624]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005334:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	4999      	ldr	r1, [pc, #612]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005350:	4b94      	ldr	r3, [pc, #592]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005356:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800535e:	4991      	ldr	r1, [pc, #580]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005372:	4b8c      	ldr	r3, [pc, #560]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005378:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005380:	4988      	ldr	r1, [pc, #544]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005394:	4b83      	ldr	r3, [pc, #524]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053a2:	4980      	ldr	r1, [pc, #512]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053b6:	4b7b      	ldr	r3, [pc, #492]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c4:	4977      	ldr	r1, [pc, #476]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053d8:	4b72      	ldr	r3, [pc, #456]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053de:	f023 0203 	bic.w	r2, r3, #3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	496f      	ldr	r1, [pc, #444]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053fa:	4b6a      	ldr	r3, [pc, #424]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005400:	f023 020c 	bic.w	r2, r3, #12
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005408:	4966      	ldr	r1, [pc, #408]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800541c:	4b61      	ldr	r3, [pc, #388]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005422:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542a:	495e      	ldr	r1, [pc, #376]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800543e:	4b59      	ldr	r3, [pc, #356]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005444:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544c:	4955      	ldr	r1, [pc, #340]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005460:	4b50      	ldr	r3, [pc, #320]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	494d      	ldr	r1, [pc, #308]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005482:	4b48      	ldr	r3, [pc, #288]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005488:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005490:	4944      	ldr	r1, [pc, #272]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80054a4:	4b3f      	ldr	r3, [pc, #252]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b2:	493c      	ldr	r1, [pc, #240]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80054c6:	4b37      	ldr	r3, [pc, #220]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d4:	4933      	ldr	r1, [pc, #204]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054e8:	4b2e      	ldr	r3, [pc, #184]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054f6:	492b      	ldr	r1, [pc, #172]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d011      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800550a:	4b26      	ldr	r3, [pc, #152]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800550c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005510:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005518:	4922      	ldr	r1, [pc, #136]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005528:	d101      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800552a:	2301      	movs	r3, #1
 800552c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800553a:	2301      	movs	r3, #1
 800553c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800554a:	4b16      	ldr	r3, [pc, #88]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800554c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005550:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005558:	4912      	ldr	r1, [pc, #72]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00b      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800556c:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800557c:	4909      	ldr	r1, [pc, #36]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d006      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 80d9 	beq.w	800574a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005598:	4b02      	ldr	r3, [pc, #8]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a01      	ldr	r2, [pc, #4]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800559e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055a2:	e001      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80055a4:	40023800 	.word	0x40023800
 80055a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055aa:	f7fc fb11 	bl	8001bd0 <HAL_GetTick>
 80055ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055b0:	e008      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055b2:	f7fc fb0d 	bl	8001bd0 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b64      	cmp	r3, #100	; 0x64
 80055be:	d901      	bls.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e194      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055c4:	4b6c      	ldr	r3, [pc, #432]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1f0      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d021      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d11d      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055e4:	4b64      	ldr	r3, [pc, #400]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ea:	0c1b      	lsrs	r3, r3, #16
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055f2:	4b61      	ldr	r3, [pc, #388]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f8:	0e1b      	lsrs	r3, r3, #24
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	019a      	lsls	r2, r3, #6
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	041b      	lsls	r3, r3, #16
 800560a:	431a      	orrs	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	061b      	lsls	r3, r3, #24
 8005610:	431a      	orrs	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	071b      	lsls	r3, r3, #28
 8005618:	4957      	ldr	r1, [pc, #348]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d004      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800563e:	2b00      	cmp	r3, #0
 8005640:	d02e      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800564a:	d129      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800564c:	4b4a      	ldr	r3, [pc, #296]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005652:	0c1b      	lsrs	r3, r3, #16
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800565a:	4b47      	ldr	r3, [pc, #284]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800565c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005660:	0f1b      	lsrs	r3, r3, #28
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	019a      	lsls	r2, r3, #6
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	041b      	lsls	r3, r3, #16
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	061b      	lsls	r3, r3, #24
 800567a:	431a      	orrs	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	071b      	lsls	r3, r3, #28
 8005680:	493d      	ldr	r1, [pc, #244]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005688:	4b3b      	ldr	r3, [pc, #236]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800568a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800568e:	f023 021f 	bic.w	r2, r3, #31
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	3b01      	subs	r3, #1
 8005698:	4937      	ldr	r1, [pc, #220]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01d      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056ac:	4b32      	ldr	r3, [pc, #200]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b2:	0e1b      	lsrs	r3, r3, #24
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056ba:	4b2f      	ldr	r3, [pc, #188]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c0:	0f1b      	lsrs	r3, r3, #28
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	019a      	lsls	r2, r3, #6
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	041b      	lsls	r3, r3, #16
 80056d4:	431a      	orrs	r2, r3
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	061b      	lsls	r3, r3, #24
 80056da:	431a      	orrs	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	071b      	lsls	r3, r3, #28
 80056e0:	4925      	ldr	r1, [pc, #148]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d011      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	019a      	lsls	r2, r3, #6
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	041b      	lsls	r3, r3, #16
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	061b      	lsls	r3, r3, #24
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	071b      	lsls	r3, r3, #28
 8005710:	4919      	ldr	r1, [pc, #100]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005718:	4b17      	ldr	r3, [pc, #92]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a16      	ldr	r2, [pc, #88]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800571e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005724:	f7fc fa54 	bl	8001bd0 <HAL_GetTick>
 8005728:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800572a:	e008      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800572c:	f7fc fa50 	bl	8001bd0 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b64      	cmp	r3, #100	; 0x64
 8005738:	d901      	bls.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e0d7      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800573e:	4b0e      	ldr	r3, [pc, #56]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b01      	cmp	r3, #1
 800574e:	f040 80cd 	bne.w	80058ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005752:	4b09      	ldr	r3, [pc, #36]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a08      	ldr	r2, [pc, #32]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800575c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575e:	f7fc fa37 	bl	8001bd0 <HAL_GetTick>
 8005762:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005764:	e00a      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005766:	f7fc fa33 	bl	8001bd0 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b64      	cmp	r3, #100	; 0x64
 8005772:	d903      	bls.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e0ba      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005778:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800577c:	4b5e      	ldr	r3, [pc, #376]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005788:	d0ed      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d02e      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d12a      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057b2:	4b51      	ldr	r3, [pc, #324]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b8:	0c1b      	lsrs	r3, r3, #16
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057c0:	4b4d      	ldr	r3, [pc, #308]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c6:	0f1b      	lsrs	r3, r3, #28
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	019a      	lsls	r2, r3, #6
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	041b      	lsls	r3, r3, #16
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	061b      	lsls	r3, r3, #24
 80057e0:	431a      	orrs	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	071b      	lsls	r3, r3, #28
 80057e6:	4944      	ldr	r1, [pc, #272]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057ee:	4b42      	ldr	r3, [pc, #264]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fc:	3b01      	subs	r3, #1
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	493d      	ldr	r1, [pc, #244]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d022      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800581c:	d11d      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800581e:	4b36      	ldr	r3, [pc, #216]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005824:	0e1b      	lsrs	r3, r3, #24
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800582c:	4b32      	ldr	r3, [pc, #200]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800582e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005832:	0f1b      	lsrs	r3, r3, #28
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	019a      	lsls	r2, r3, #6
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	041b      	lsls	r3, r3, #16
 8005846:	431a      	orrs	r2, r3
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	061b      	lsls	r3, r3, #24
 800584c:	431a      	orrs	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	071b      	lsls	r3, r3, #28
 8005852:	4929      	ldr	r1, [pc, #164]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d028      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005866:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586c:	0e1b      	lsrs	r3, r3, #24
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005874:	4b20      	ldr	r3, [pc, #128]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587a:	0c1b      	lsrs	r3, r3, #16
 800587c:	f003 0303 	and.w	r3, r3, #3
 8005880:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	019a      	lsls	r2, r3, #6
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	041b      	lsls	r3, r3, #16
 800588c:	431a      	orrs	r2, r3
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	061b      	lsls	r3, r3, #24
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	071b      	lsls	r3, r3, #28
 800589a:	4917      	ldr	r1, [pc, #92]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058a2:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	4911      	ldr	r1, [pc, #68]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058b8:	4b0f      	ldr	r3, [pc, #60]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a0e      	ldr	r2, [pc, #56]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c4:	f7fc f984 	bl	8001bd0 <HAL_GetTick>
 80058c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058cc:	f7fc f980 	bl	8001bd0 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b64      	cmp	r3, #100	; 0x64
 80058d8:	d901      	bls.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e007      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058de:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ea:	d1ef      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3720      	adds	r7, #32
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40023800 	.word	0x40023800

080058fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e09d      	b.n	8005a4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	2b00      	cmp	r3, #0
 8005914:	d108      	bne.n	8005928 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800591e:	d009      	beq.n	8005934 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	61da      	str	r2, [r3, #28]
 8005926:	e005      	b.n	8005934 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d106      	bne.n	8005954 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fb ff0c 	bl	800176c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800596a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005974:	d902      	bls.n	800597c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	e002      	b.n	8005982 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800597c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005980:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800598a:	d007      	beq.n	800599c <HAL_SPI_Init+0xa0>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005994:	d002      	beq.n	800599c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059de:	ea42 0103 	orr.w	r1, r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	0c1b      	lsrs	r3, r3, #16
 80059f8:	f003 0204 	and.w	r2, r3, #4
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	431a      	orrs	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a18:	ea42 0103 	orr.w	r1, r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b082      	sub	sp, #8
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e049      	b.n	8005af8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d106      	bne.n	8005a7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7fc f80f 	bl	8001a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2202      	movs	r2, #2
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4610      	mov	r0, r2
 8005a92:	f000 f9cd 	bl	8005e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d001      	beq.n	8005b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e054      	b.n	8005bc2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a26      	ldr	r2, [pc, #152]	; (8005bd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d022      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b42:	d01d      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a22      	ldr	r2, [pc, #136]	; (8005bd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d018      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a21      	ldr	r2, [pc, #132]	; (8005bd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1f      	ldr	r2, [pc, #124]	; (8005bdc <HAL_TIM_Base_Start_IT+0xdc>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00e      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1e      	ldr	r2, [pc, #120]	; (8005be0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d009      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a1b      	ldr	r2, [pc, #108]	; (8005be8 <HAL_TIM_Base_Start_IT+0xe8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d115      	bne.n	8005bac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	4b19      	ldr	r3, [pc, #100]	; (8005bec <HAL_TIM_Base_Start_IT+0xec>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b06      	cmp	r3, #6
 8005b90:	d015      	beq.n	8005bbe <HAL_TIM_Base_Start_IT+0xbe>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b98:	d011      	beq.n	8005bbe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0201 	orr.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005baa:	e008      	b.n	8005bbe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	e000      	b.n	8005bc0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40010000 	.word	0x40010000
 8005bd4:	40000400 	.word	0x40000400
 8005bd8:	40000800 	.word	0x40000800
 8005bdc:	40000c00 	.word	0x40000c00
 8005be0:	40010400 	.word	0x40010400
 8005be4:	40014000 	.word	0x40014000
 8005be8:	40001800 	.word	0x40001800
 8005bec:	00010007 	.word	0x00010007

08005bf0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0201 	bic.w	r2, r2, #1
 8005c06:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6a1a      	ldr	r2, [r3, #32]
 8005c0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c12:	4013      	ands	r3, r2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10f      	bne.n	8005c38 <HAL_TIM_Base_Stop_IT+0x48>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6a1a      	ldr	r2, [r3, #32]
 8005c1e:	f240 4344 	movw	r3, #1092	; 0x444
 8005c22:	4013      	ands	r3, r2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d107      	bne.n	8005c38 <HAL_TIM_Base_Stop_IT+0x48>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0201 	bic.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_TIM_GenerateEvent+0x18>
 8005c62:	2302      	movs	r3, #2
 8005c64:	e014      	b.n	8005c90 <HAL_TIM_GenerateEvent+0x42>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2202      	movs	r2, #2
 8005c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_TIM_ConfigClockSource+0x1c>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e0b4      	b.n	8005e22 <HAL_TIM_ConfigClockSource+0x186>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	4b56      	ldr	r3, [pc, #344]	; (8005e2c <HAL_TIM_ConfigClockSource+0x190>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf0:	d03e      	beq.n	8005d70 <HAL_TIM_ConfigClockSource+0xd4>
 8005cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf6:	f200 8087 	bhi.w	8005e08 <HAL_TIM_ConfigClockSource+0x16c>
 8005cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfe:	f000 8086 	beq.w	8005e0e <HAL_TIM_ConfigClockSource+0x172>
 8005d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d06:	d87f      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x16c>
 8005d08:	2b70      	cmp	r3, #112	; 0x70
 8005d0a:	d01a      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0xa6>
 8005d0c:	2b70      	cmp	r3, #112	; 0x70
 8005d0e:	d87b      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x16c>
 8005d10:	2b60      	cmp	r3, #96	; 0x60
 8005d12:	d050      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0x11a>
 8005d14:	2b60      	cmp	r3, #96	; 0x60
 8005d16:	d877      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x16c>
 8005d18:	2b50      	cmp	r3, #80	; 0x50
 8005d1a:	d03c      	beq.n	8005d96 <HAL_TIM_ConfigClockSource+0xfa>
 8005d1c:	2b50      	cmp	r3, #80	; 0x50
 8005d1e:	d873      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x16c>
 8005d20:	2b40      	cmp	r3, #64	; 0x40
 8005d22:	d058      	beq.n	8005dd6 <HAL_TIM_ConfigClockSource+0x13a>
 8005d24:	2b40      	cmp	r3, #64	; 0x40
 8005d26:	d86f      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x16c>
 8005d28:	2b30      	cmp	r3, #48	; 0x30
 8005d2a:	d064      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x15a>
 8005d2c:	2b30      	cmp	r3, #48	; 0x30
 8005d2e:	d86b      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x16c>
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d060      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x15a>
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d867      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x16c>
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d05c      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x15a>
 8005d3c:	2b10      	cmp	r3, #16
 8005d3e:	d05a      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x15a>
 8005d40:	e062      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d52:	f000 f987 	bl	8006064 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	609a      	str	r2, [r3, #8]
      break;
 8005d6e:	e04f      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d80:	f000 f970 	bl	8006064 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d92:	609a      	str	r2, [r3, #8]
      break;
 8005d94:	e03c      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005da2:	461a      	mov	r2, r3
 8005da4:	f000 f8e4 	bl	8005f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2150      	movs	r1, #80	; 0x50
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 f93d 	bl	800602e <TIM_ITRx_SetConfig>
      break;
 8005db4:	e02c      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f000 f903 	bl	8005fce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2160      	movs	r1, #96	; 0x60
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 f92d 	bl	800602e <TIM_ITRx_SetConfig>
      break;
 8005dd4:	e01c      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de2:	461a      	mov	r2, r3
 8005de4:	f000 f8c4 	bl	8005f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2140      	movs	r1, #64	; 0x40
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 f91d 	bl	800602e <TIM_ITRx_SetConfig>
      break;
 8005df4:	e00c      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4610      	mov	r0, r2
 8005e02:	f000 f914 	bl	800602e <TIM_ITRx_SetConfig>
      break;
 8005e06:	e003      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e0c:	e000      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	fffeff88 	.word	0xfffeff88

08005e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a40      	ldr	r2, [pc, #256]	; (8005f44 <TIM_Base_SetConfig+0x114>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d013      	beq.n	8005e70 <TIM_Base_SetConfig+0x40>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4e:	d00f      	beq.n	8005e70 <TIM_Base_SetConfig+0x40>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a3d      	ldr	r2, [pc, #244]	; (8005f48 <TIM_Base_SetConfig+0x118>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00b      	beq.n	8005e70 <TIM_Base_SetConfig+0x40>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a3c      	ldr	r2, [pc, #240]	; (8005f4c <TIM_Base_SetConfig+0x11c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d007      	beq.n	8005e70 <TIM_Base_SetConfig+0x40>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a3b      	ldr	r2, [pc, #236]	; (8005f50 <TIM_Base_SetConfig+0x120>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_Base_SetConfig+0x40>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a3a      	ldr	r2, [pc, #232]	; (8005f54 <TIM_Base_SetConfig+0x124>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d108      	bne.n	8005e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a2f      	ldr	r2, [pc, #188]	; (8005f44 <TIM_Base_SetConfig+0x114>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d02b      	beq.n	8005ee2 <TIM_Base_SetConfig+0xb2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e90:	d027      	beq.n	8005ee2 <TIM_Base_SetConfig+0xb2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a2c      	ldr	r2, [pc, #176]	; (8005f48 <TIM_Base_SetConfig+0x118>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d023      	beq.n	8005ee2 <TIM_Base_SetConfig+0xb2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a2b      	ldr	r2, [pc, #172]	; (8005f4c <TIM_Base_SetConfig+0x11c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d01f      	beq.n	8005ee2 <TIM_Base_SetConfig+0xb2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a2a      	ldr	r2, [pc, #168]	; (8005f50 <TIM_Base_SetConfig+0x120>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d01b      	beq.n	8005ee2 <TIM_Base_SetConfig+0xb2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a29      	ldr	r2, [pc, #164]	; (8005f54 <TIM_Base_SetConfig+0x124>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d017      	beq.n	8005ee2 <TIM_Base_SetConfig+0xb2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a28      	ldr	r2, [pc, #160]	; (8005f58 <TIM_Base_SetConfig+0x128>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d013      	beq.n	8005ee2 <TIM_Base_SetConfig+0xb2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a27      	ldr	r2, [pc, #156]	; (8005f5c <TIM_Base_SetConfig+0x12c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d00f      	beq.n	8005ee2 <TIM_Base_SetConfig+0xb2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a26      	ldr	r2, [pc, #152]	; (8005f60 <TIM_Base_SetConfig+0x130>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00b      	beq.n	8005ee2 <TIM_Base_SetConfig+0xb2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a25      	ldr	r2, [pc, #148]	; (8005f64 <TIM_Base_SetConfig+0x134>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d007      	beq.n	8005ee2 <TIM_Base_SetConfig+0xb2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a24      	ldr	r2, [pc, #144]	; (8005f68 <TIM_Base_SetConfig+0x138>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <TIM_Base_SetConfig+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a23      	ldr	r2, [pc, #140]	; (8005f6c <TIM_Base_SetConfig+0x13c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d108      	bne.n	8005ef4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a0a      	ldr	r2, [pc, #40]	; (8005f44 <TIM_Base_SetConfig+0x114>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d003      	beq.n	8005f28 <TIM_Base_SetConfig+0xf8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a0c      	ldr	r2, [pc, #48]	; (8005f54 <TIM_Base_SetConfig+0x124>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d103      	bne.n	8005f30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	615a      	str	r2, [r3, #20]
}
 8005f36:	bf00      	nop
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	40010000 	.word	0x40010000
 8005f48:	40000400 	.word	0x40000400
 8005f4c:	40000800 	.word	0x40000800
 8005f50:	40000c00 	.word	0x40000c00
 8005f54:	40010400 	.word	0x40010400
 8005f58:	40014000 	.word	0x40014000
 8005f5c:	40014400 	.word	0x40014400
 8005f60:	40014800 	.word	0x40014800
 8005f64:	40001800 	.word	0x40001800
 8005f68:	40001c00 	.word	0x40001c00
 8005f6c:	40002000 	.word	0x40002000

08005f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f023 0201 	bic.w	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f023 030a 	bic.w	r3, r3, #10
 8005fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	621a      	str	r2, [r3, #32]
}
 8005fc2:	bf00      	nop
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b087      	sub	sp, #28
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	f023 0210 	bic.w	r2, r3, #16
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ff8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	031b      	lsls	r3, r3, #12
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	4313      	orrs	r3, r2
 8006002:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800600a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	621a      	str	r2, [r3, #32]
}
 8006022:	bf00      	nop
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800602e:	b480      	push	{r7}
 8006030:	b085      	sub	sp, #20
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006044:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	f043 0307 	orr.w	r3, r3, #7
 8006050:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	609a      	str	r2, [r3, #8]
}
 8006058:	bf00      	nop
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800607e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	021a      	lsls	r2, r3, #8
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	431a      	orrs	r2, r3
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4313      	orrs	r3, r2
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	609a      	str	r2, [r3, #8]
}
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e06d      	b.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a30      	ldr	r2, [pc, #192]	; (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d004      	beq.n	80060f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a2f      	ldr	r2, [pc, #188]	; (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d108      	bne.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006108:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a20      	ldr	r2, [pc, #128]	; (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d022      	beq.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612e:	d01d      	beq.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1d      	ldr	r2, [pc, #116]	; (80061ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d018      	beq.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a1c      	ldr	r2, [pc, #112]	; (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d013      	beq.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a1a      	ldr	r2, [pc, #104]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00e      	beq.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a15      	ldr	r2, [pc, #84]	; (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d009      	beq.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a16      	ldr	r2, [pc, #88]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d004      	beq.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a15      	ldr	r2, [pc, #84]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d10c      	bne.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006172:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	4313      	orrs	r3, r2
 800617c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	40010000 	.word	0x40010000
 80061a8:	40010400 	.word	0x40010400
 80061ac:	40000400 	.word	0x40000400
 80061b0:	40000800 	.word	0x40000800
 80061b4:	40000c00 	.word	0x40000c00
 80061b8:	40014000 	.word	0x40014000
 80061bc:	40001800 	.word	0x40001800

080061c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061c0:	b084      	sub	sp, #16
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	f107 001c 	add.w	r0, r7, #28
 80061ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d120      	bne.n	800621a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	4b20      	ldr	r3, [pc, #128]	; (800626c <USB_CoreInit+0xac>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d105      	bne.n	800620e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 fbee 	bl	80079f0 <USB_CoreReset>
 8006214:	4603      	mov	r3, r0
 8006216:	73fb      	strb	r3, [r7, #15]
 8006218:	e010      	b.n	800623c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f001 fbe2 	bl	80079f0 <USB_CoreReset>
 800622c:	4603      	mov	r3, r0
 800622e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	2b01      	cmp	r3, #1
 8006240:	d10b      	bne.n	800625a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f043 0206 	orr.w	r2, r3, #6
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f043 0220 	orr.w	r2, r3, #32
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800625a:	7bfb      	ldrb	r3, [r7, #15]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006266:	b004      	add	sp, #16
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	ffbdffbf 	.word	0xffbdffbf

08006270 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	4613      	mov	r3, r2
 800627c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	2b02      	cmp	r3, #2
 8006282:	d165      	bne.n	8006350 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4a41      	ldr	r2, [pc, #260]	; (800638c <USB_SetTurnaroundTime+0x11c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d906      	bls.n	800629a <USB_SetTurnaroundTime+0x2a>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4a40      	ldr	r2, [pc, #256]	; (8006390 <USB_SetTurnaroundTime+0x120>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d202      	bcs.n	800629a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006294:	230f      	movs	r3, #15
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	e062      	b.n	8006360 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4a3c      	ldr	r2, [pc, #240]	; (8006390 <USB_SetTurnaroundTime+0x120>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d306      	bcc.n	80062b0 <USB_SetTurnaroundTime+0x40>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4a3b      	ldr	r2, [pc, #236]	; (8006394 <USB_SetTurnaroundTime+0x124>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d202      	bcs.n	80062b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80062aa:	230e      	movs	r3, #14
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	e057      	b.n	8006360 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4a38      	ldr	r2, [pc, #224]	; (8006394 <USB_SetTurnaroundTime+0x124>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d306      	bcc.n	80062c6 <USB_SetTurnaroundTime+0x56>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4a37      	ldr	r2, [pc, #220]	; (8006398 <USB_SetTurnaroundTime+0x128>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d202      	bcs.n	80062c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80062c0:	230d      	movs	r3, #13
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	e04c      	b.n	8006360 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4a33      	ldr	r2, [pc, #204]	; (8006398 <USB_SetTurnaroundTime+0x128>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d306      	bcc.n	80062dc <USB_SetTurnaroundTime+0x6c>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	4a32      	ldr	r2, [pc, #200]	; (800639c <USB_SetTurnaroundTime+0x12c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d802      	bhi.n	80062dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80062d6:	230c      	movs	r3, #12
 80062d8:	617b      	str	r3, [r7, #20]
 80062da:	e041      	b.n	8006360 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4a2f      	ldr	r2, [pc, #188]	; (800639c <USB_SetTurnaroundTime+0x12c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d906      	bls.n	80062f2 <USB_SetTurnaroundTime+0x82>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4a2e      	ldr	r2, [pc, #184]	; (80063a0 <USB_SetTurnaroundTime+0x130>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d802      	bhi.n	80062f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062ec:	230b      	movs	r3, #11
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	e036      	b.n	8006360 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	4a2a      	ldr	r2, [pc, #168]	; (80063a0 <USB_SetTurnaroundTime+0x130>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d906      	bls.n	8006308 <USB_SetTurnaroundTime+0x98>
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	4a29      	ldr	r2, [pc, #164]	; (80063a4 <USB_SetTurnaroundTime+0x134>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d802      	bhi.n	8006308 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006302:	230a      	movs	r3, #10
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	e02b      	b.n	8006360 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4a26      	ldr	r2, [pc, #152]	; (80063a4 <USB_SetTurnaroundTime+0x134>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d906      	bls.n	800631e <USB_SetTurnaroundTime+0xae>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4a25      	ldr	r2, [pc, #148]	; (80063a8 <USB_SetTurnaroundTime+0x138>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d202      	bcs.n	800631e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006318:	2309      	movs	r3, #9
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	e020      	b.n	8006360 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	4a21      	ldr	r2, [pc, #132]	; (80063a8 <USB_SetTurnaroundTime+0x138>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d306      	bcc.n	8006334 <USB_SetTurnaroundTime+0xc4>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	4a20      	ldr	r2, [pc, #128]	; (80063ac <USB_SetTurnaroundTime+0x13c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d802      	bhi.n	8006334 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800632e:	2308      	movs	r3, #8
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	e015      	b.n	8006360 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4a1d      	ldr	r2, [pc, #116]	; (80063ac <USB_SetTurnaroundTime+0x13c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d906      	bls.n	800634a <USB_SetTurnaroundTime+0xda>
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	4a1c      	ldr	r2, [pc, #112]	; (80063b0 <USB_SetTurnaroundTime+0x140>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d202      	bcs.n	800634a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006344:	2307      	movs	r3, #7
 8006346:	617b      	str	r3, [r7, #20]
 8006348:	e00a      	b.n	8006360 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800634a:	2306      	movs	r3, #6
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	e007      	b.n	8006360 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006350:	79fb      	ldrb	r3, [r7, #7]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d102      	bne.n	800635c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006356:	2309      	movs	r3, #9
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	e001      	b.n	8006360 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800635c:	2309      	movs	r3, #9
 800635e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	029b      	lsls	r3, r3, #10
 8006374:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006378:	431a      	orrs	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	00d8acbf 	.word	0x00d8acbf
 8006390:	00e4e1c0 	.word	0x00e4e1c0
 8006394:	00f42400 	.word	0x00f42400
 8006398:	01067380 	.word	0x01067380
 800639c:	011a499f 	.word	0x011a499f
 80063a0:	01312cff 	.word	0x01312cff
 80063a4:	014ca43f 	.word	0x014ca43f
 80063a8:	016e3600 	.word	0x016e3600
 80063ac:	01a6ab1f 	.word	0x01a6ab1f
 80063b0:	01e84800 	.word	0x01e84800

080063b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f043 0201 	orr.w	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f023 0201 	bic.w	r2, r3, #1
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d115      	bne.n	8006446 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006426:	2001      	movs	r0, #1
 8006428:	f7fb fbde 	bl	8001be8 <HAL_Delay>
      ms++;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	3301      	adds	r3, #1
 8006430:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f001 fa4b 	bl	80078ce <USB_GetMode>
 8006438:	4603      	mov	r3, r0
 800643a:	2b01      	cmp	r3, #1
 800643c:	d01e      	beq.n	800647c <USB_SetCurrentMode+0x84>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b31      	cmp	r3, #49	; 0x31
 8006442:	d9f0      	bls.n	8006426 <USB_SetCurrentMode+0x2e>
 8006444:	e01a      	b.n	800647c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d115      	bne.n	8006478 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006458:	2001      	movs	r0, #1
 800645a:	f7fb fbc5 	bl	8001be8 <HAL_Delay>
      ms++;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3301      	adds	r3, #1
 8006462:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f001 fa32 	bl	80078ce <USB_GetMode>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <USB_SetCurrentMode+0x84>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b31      	cmp	r3, #49	; 0x31
 8006474:	d9f0      	bls.n	8006458 <USB_SetCurrentMode+0x60>
 8006476:	e001      	b.n	800647c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e005      	b.n	8006488 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b32      	cmp	r3, #50	; 0x32
 8006480:	d101      	bne.n	8006486 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006490:	b084      	sub	sp, #16
 8006492:	b580      	push	{r7, lr}
 8006494:	b086      	sub	sp, #24
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800649e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80064aa:	2300      	movs	r3, #0
 80064ac:	613b      	str	r3, [r7, #16]
 80064ae:	e009      	b.n	80064c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	3340      	adds	r3, #64	; 0x40
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	2200      	movs	r2, #0
 80064bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	3301      	adds	r3, #1
 80064c2:	613b      	str	r3, [r7, #16]
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b0e      	cmp	r3, #14
 80064c8:	d9f2      	bls.n	80064b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80064ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d11c      	bne.n	800650a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064de:	f043 0302 	orr.w	r3, r3, #2
 80064e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	e005      	b.n	8006516 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800651c:	461a      	mov	r2, r3
 800651e:	2300      	movs	r3, #0
 8006520:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006528:	4619      	mov	r1, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006530:	461a      	mov	r2, r3
 8006532:	680b      	ldr	r3, [r1, #0]
 8006534:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	2b01      	cmp	r3, #1
 800653a:	d10c      	bne.n	8006556 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800653c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653e:	2b00      	cmp	r3, #0
 8006540:	d104      	bne.n	800654c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006542:	2100      	movs	r1, #0
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f965 	bl	8006814 <USB_SetDevSpeed>
 800654a:	e008      	b.n	800655e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800654c:	2101      	movs	r1, #1
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f960 	bl	8006814 <USB_SetDevSpeed>
 8006554:	e003      	b.n	800655e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006556:	2103      	movs	r1, #3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f95b 	bl	8006814 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800655e:	2110      	movs	r1, #16
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f8f3 	bl	800674c <USB_FlushTxFifo>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f91f 	bl	80067b4 <USB_FlushRxFifo>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006586:	461a      	mov	r2, r3
 8006588:	2300      	movs	r3, #0
 800658a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006592:	461a      	mov	r2, r3
 8006594:	2300      	movs	r3, #0
 8006596:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659e:	461a      	mov	r2, r3
 80065a0:	2300      	movs	r3, #0
 80065a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065a4:	2300      	movs	r3, #0
 80065a6:	613b      	str	r3, [r7, #16]
 80065a8:	e043      	b.n	8006632 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065c0:	d118      	bne.n	80065f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d4:	461a      	mov	r2, r3
 80065d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	e013      	b.n	8006606 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ea:	461a      	mov	r2, r3
 80065ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	e008      	b.n	8006606 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006600:	461a      	mov	r2, r3
 8006602:	2300      	movs	r3, #0
 8006604:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006612:	461a      	mov	r2, r3
 8006614:	2300      	movs	r3, #0
 8006616:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006624:	461a      	mov	r2, r3
 8006626:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800662a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	3301      	adds	r3, #1
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	429a      	cmp	r2, r3
 8006638:	d3b7      	bcc.n	80065aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800663a:	2300      	movs	r3, #0
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	e043      	b.n	80066c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006656:	d118      	bne.n	800668a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10a      	bne.n	8006674 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666a:	461a      	mov	r2, r3
 800666c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	e013      	b.n	800669c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006680:	461a      	mov	r2, r3
 8006682:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	e008      	b.n	800669c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006696:	461a      	mov	r2, r3
 8006698:	2300      	movs	r3, #0
 800669a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a8:	461a      	mov	r2, r3
 80066aa:	2300      	movs	r3, #0
 80066ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ba:	461a      	mov	r2, r3
 80066bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	3301      	adds	r3, #1
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d3b7      	bcc.n	8006640 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80066f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d105      	bne.n	8006704 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	f043 0210 	orr.w	r2, r3, #16
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	699a      	ldr	r2, [r3, #24]
 8006708:	4b0e      	ldr	r3, [pc, #56]	; (8006744 <USB_DevInit+0x2b4>)
 800670a:	4313      	orrs	r3, r2
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	f043 0208 	orr.w	r2, r3, #8
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006724:	2b01      	cmp	r3, #1
 8006726:	d105      	bne.n	8006734 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	699a      	ldr	r2, [r3, #24]
 800672c:	4b06      	ldr	r3, [pc, #24]	; (8006748 <USB_DevInit+0x2b8>)
 800672e:	4313      	orrs	r3, r2
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006734:	7dfb      	ldrb	r3, [r7, #23]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006740:	b004      	add	sp, #16
 8006742:	4770      	bx	lr
 8006744:	803c3800 	.word	0x803c3800
 8006748:	40000004 	.word	0x40000004

0800674c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3301      	adds	r3, #1
 800675e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4a13      	ldr	r2, [pc, #76]	; (80067b0 <USB_FlushTxFifo+0x64>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d901      	bls.n	800676c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e01b      	b.n	80067a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	daf2      	bge.n	800675a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	019b      	lsls	r3, r3, #6
 800677c:	f043 0220 	orr.w	r2, r3, #32
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3301      	adds	r3, #1
 8006788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4a08      	ldr	r2, [pc, #32]	; (80067b0 <USB_FlushTxFifo+0x64>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d901      	bls.n	8006796 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e006      	b.n	80067a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b20      	cmp	r3, #32
 80067a0:	d0f0      	beq.n	8006784 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	00030d40 	.word	0x00030d40

080067b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3301      	adds	r3, #1
 80067c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4a11      	ldr	r2, [pc, #68]	; (8006810 <USB_FlushRxFifo+0x5c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d901      	bls.n	80067d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e018      	b.n	8006804 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	daf2      	bge.n	80067c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2210      	movs	r2, #16
 80067e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3301      	adds	r3, #1
 80067e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4a08      	ldr	r2, [pc, #32]	; (8006810 <USB_FlushRxFifo+0x5c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d901      	bls.n	80067f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e006      	b.n	8006804 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0310 	and.w	r3, r3, #16
 80067fe:	2b10      	cmp	r3, #16
 8006800:	d0f0      	beq.n	80067e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	00030d40 	.word	0x00030d40

08006814 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	68f9      	ldr	r1, [r7, #12]
 8006830:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006834:	4313      	orrs	r3, r2
 8006836:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006846:	b480      	push	{r7}
 8006848:	b087      	sub	sp, #28
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f003 0306 	and.w	r3, r3, #6
 800685e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d102      	bne.n	800686c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006866:	2300      	movs	r3, #0
 8006868:	75fb      	strb	r3, [r7, #23]
 800686a:	e00a      	b.n	8006882 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b02      	cmp	r3, #2
 8006870:	d002      	beq.n	8006878 <USB_GetDevSpeed+0x32>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b06      	cmp	r3, #6
 8006876:	d102      	bne.n	800687e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006878:	2302      	movs	r3, #2
 800687a:	75fb      	strb	r3, [r7, #23]
 800687c:	e001      	b.n	8006882 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800687e:	230f      	movs	r3, #15
 8006880:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006882:	7dfb      	ldrb	r3, [r7, #23]
}
 8006884:	4618      	mov	r0, r3
 8006886:	371c      	adds	r7, #28
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	785b      	ldrb	r3, [r3, #1]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d139      	bne.n	8006920 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b2:	69da      	ldr	r2, [r3, #28]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	2101      	movs	r1, #1
 80068be:	fa01 f303 	lsl.w	r3, r1, r3
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	68f9      	ldr	r1, [r7, #12]
 80068c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ca:	4313      	orrs	r3, r2
 80068cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d153      	bne.n	800698c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	791b      	ldrb	r3, [r3, #4]
 80068fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006900:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	059b      	lsls	r3, r3, #22
 8006906:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006908:	431a      	orrs	r2, r3
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	0159      	lsls	r1, r3, #5
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	440b      	add	r3, r1
 8006912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006916:	4619      	mov	r1, r3
 8006918:	4b20      	ldr	r3, [pc, #128]	; (800699c <USB_ActivateEndpoint+0x10c>)
 800691a:	4313      	orrs	r3, r2
 800691c:	600b      	str	r3, [r1, #0]
 800691e:	e035      	b.n	800698c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	f003 030f 	and.w	r3, r3, #15
 8006930:	2101      	movs	r1, #1
 8006932:	fa01 f303 	lsl.w	r3, r1, r3
 8006936:	041b      	lsls	r3, r3, #16
 8006938:	68f9      	ldr	r1, [r7, #12]
 800693a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800693e:	4313      	orrs	r3, r2
 8006940:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d119      	bne.n	800698c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	791b      	ldrb	r3, [r3, #4]
 8006972:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006974:	430b      	orrs	r3, r1
 8006976:	431a      	orrs	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	0159      	lsls	r1, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	440b      	add	r3, r1
 8006980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006984:	4619      	mov	r1, r3
 8006986:	4b05      	ldr	r3, [pc, #20]	; (800699c <USB_ActivateEndpoint+0x10c>)
 8006988:	4313      	orrs	r3, r2
 800698a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	10008000 	.word	0x10008000

080069a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	785b      	ldrb	r3, [r3, #1]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d161      	bne.n	8006a80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069d2:	d11f      	bne.n	8006a14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	0151      	lsls	r1, r2, #5
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	440a      	add	r2, r1
 80069ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	f003 030f 	and.w	r3, r3, #15
 8006a24:	2101      	movs	r1, #1
 8006a26:	fa01 f303 	lsl.w	r3, r1, r3
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	68f9      	ldr	r1, [r7, #12]
 8006a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a34:	4013      	ands	r3, r2
 8006a36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3e:	69da      	ldr	r2, [r3, #28]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	f003 030f 	and.w	r3, r3, #15
 8006a48:	2101      	movs	r1, #1
 8006a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	43db      	mvns	r3, r3
 8006a52:	68f9      	ldr	r1, [r7, #12]
 8006a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a58:	4013      	ands	r3, r2
 8006a5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	0159      	lsls	r1, r3, #5
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	440b      	add	r3, r1
 8006a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a76:	4619      	mov	r1, r3
 8006a78:	4b35      	ldr	r3, [pc, #212]	; (8006b50 <USB_DeactivateEndpoint+0x1b0>)
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	600b      	str	r3, [r1, #0]
 8006a7e:	e060      	b.n	8006b42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a96:	d11f      	bne.n	8006ad8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	0151      	lsls	r1, r2, #5
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	440a      	add	r2, r1
 8006aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ab6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	0151      	lsls	r1, r2, #5
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	440a      	add	r2, r1
 8006ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ad6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	f003 030f 	and.w	r3, r3, #15
 8006ae8:	2101      	movs	r1, #1
 8006aea:	fa01 f303 	lsl.w	r3, r1, r3
 8006aee:	041b      	lsls	r3, r3, #16
 8006af0:	43db      	mvns	r3, r3
 8006af2:	68f9      	ldr	r1, [r7, #12]
 8006af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006af8:	4013      	ands	r3, r2
 8006afa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b02:	69da      	ldr	r2, [r3, #28]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b12:	041b      	lsls	r3, r3, #16
 8006b14:	43db      	mvns	r3, r3
 8006b16:	68f9      	ldr	r1, [r7, #12]
 8006b18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	0159      	lsls	r1, r3, #5
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	440b      	add	r3, r1
 8006b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <USB_DeactivateEndpoint+0x1b4>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	ec337800 	.word	0xec337800
 8006b54:	eff37800 	.word	0xeff37800

08006b58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08a      	sub	sp, #40	; 0x28
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	785b      	ldrb	r3, [r3, #1]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	f040 8163 	bne.w	8006e40 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d132      	bne.n	8006be8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8e:	691a      	ldr	r2, [r3, #16]
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	0159      	lsls	r1, r3, #5
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	440b      	add	r3, r1
 8006b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4ba5      	ldr	r3, [pc, #660]	; (8006e34 <USB_EPStartXfer+0x2dc>)
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	0151      	lsls	r1, r2, #5
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	440a      	add	r2, r1
 8006bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd0:	691a      	ldr	r2, [r3, #16]
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	0159      	lsls	r1, r3, #5
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	440b      	add	r3, r1
 8006bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bde:	4619      	mov	r1, r3
 8006be0:	4b95      	ldr	r3, [pc, #596]	; (8006e38 <USB_EPStartXfer+0x2e0>)
 8006be2:	4013      	ands	r3, r2
 8006be4:	610b      	str	r3, [r1, #16]
 8006be6:	e074      	b.n	8006cd2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf4:	691a      	ldr	r2, [r3, #16]
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	0159      	lsls	r1, r3, #5
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	440b      	add	r3, r1
 8006bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c02:	4619      	mov	r1, r3
 8006c04:	4b8c      	ldr	r3, [pc, #560]	; (8006e38 <USB_EPStartXfer+0x2e0>)
 8006c06:	4013      	ands	r3, r2
 8006c08:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	0159      	lsls	r1, r3, #5
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	440b      	add	r3, r1
 8006c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c24:	4619      	mov	r1, r3
 8006c26:	4b83      	ldr	r3, [pc, #524]	; (8006e34 <USB_EPStartXfer+0x2dc>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c38:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	6999      	ldr	r1, [r3, #24]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	440b      	add	r3, r1
 8006c44:	1e59      	subs	r1, r3, #1
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c4e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006c50:	4b7a      	ldr	r3, [pc, #488]	; (8006e3c <USB_EPStartXfer+0x2e4>)
 8006c52:	400b      	ands	r3, r1
 8006c54:	69b9      	ldr	r1, [r7, #24]
 8006c56:	0148      	lsls	r0, r1, #5
 8006c58:	69f9      	ldr	r1, [r7, #28]
 8006c5a:	4401      	add	r1, r0
 8006c5c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c60:	4313      	orrs	r3, r2
 8006c62:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c7a:	69b9      	ldr	r1, [r7, #24]
 8006c7c:	0148      	lsls	r0, r1, #5
 8006c7e:	69f9      	ldr	r1, [r7, #28]
 8006c80:	4401      	add	r1, r0
 8006c82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c86:	4313      	orrs	r3, r2
 8006c88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	791b      	ldrb	r3, [r3, #4]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d11f      	bne.n	8006cd2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	0151      	lsls	r1, r2, #5
 8006ca4:	69fa      	ldr	r2, [r7, #28]
 8006ca6:	440a      	add	r2, r1
 8006ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006cb0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	0151      	lsls	r1, r2, #5
 8006cc4:	69fa      	ldr	r2, [r7, #28]
 8006cc6:	440a      	add	r2, r1
 8006cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ccc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cd0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006cd2:	79fb      	ldrb	r3, [r7, #7]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d14b      	bne.n	8006d70 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d009      	beq.n	8006cf4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cec:	461a      	mov	r2, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	791b      	ldrb	r3, [r3, #4]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d128      	bne.n	8006d4e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d110      	bne.n	8006d2e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	0151      	lsls	r1, r2, #5
 8006d1e:	69fa      	ldr	r2, [r7, #28]
 8006d20:	440a      	add	r2, r1
 8006d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	e00f      	b.n	8006d4e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	0151      	lsls	r1, r2, #5
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	440a      	add	r2, r1
 8006d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d4c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	0151      	lsls	r1, r2, #5
 8006d60:	69fa      	ldr	r2, [r7, #28]
 8006d62:	440a      	add	r2, r1
 8006d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	e137      	b.n	8006fe0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	0151      	lsls	r1, r2, #5
 8006d82:	69fa      	ldr	r2, [r7, #28]
 8006d84:	440a      	add	r2, r1
 8006d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d8e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	791b      	ldrb	r3, [r3, #4]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d015      	beq.n	8006dc4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 811f 	beq.w	8006fe0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	f003 030f 	and.w	r3, r3, #15
 8006db2:	2101      	movs	r1, #1
 8006db4:	fa01 f303 	lsl.w	r3, r1, r3
 8006db8:	69f9      	ldr	r1, [r7, #28]
 8006dba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	634b      	str	r3, [r1, #52]	; 0x34
 8006dc2:	e10d      	b.n	8006fe0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d110      	bne.n	8006df6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	0151      	lsls	r1, r2, #5
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	440a      	add	r2, r1
 8006dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	e00f      	b.n	8006e16 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	0151      	lsls	r1, r2, #5
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	440a      	add	r2, r1
 8006e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e14:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	6919      	ldr	r1, [r3, #16]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	781a      	ldrb	r2, [r3, #0]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	b298      	uxth	r0, r3
 8006e24:	79fb      	ldrb	r3, [r7, #7]
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	4603      	mov	r3, r0
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f000 faea 	bl	8007404 <USB_WritePacket>
 8006e30:	e0d6      	b.n	8006fe0 <USB_EPStartXfer+0x488>
 8006e32:	bf00      	nop
 8006e34:	e007ffff 	.word	0xe007ffff
 8006e38:	fff80000 	.word	0xfff80000
 8006e3c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4c:	691a      	ldr	r2, [r3, #16]
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	0159      	lsls	r1, r3, #5
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	440b      	add	r3, r1
 8006e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	4b63      	ldr	r3, [pc, #396]	; (8006fec <USB_EPStartXfer+0x494>)
 8006e5e:	4013      	ands	r3, r2
 8006e60:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6e:	691a      	ldr	r2, [r3, #16]
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	0159      	lsls	r1, r3, #5
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	440b      	add	r3, r1
 8006e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4b5c      	ldr	r3, [pc, #368]	; (8006ff0 <USB_EPStartXfer+0x498>)
 8006e80:	4013      	ands	r3, r2
 8006e82:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d123      	bne.n	8006ed4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e98:	691a      	ldr	r2, [r3, #16]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ea2:	69b9      	ldr	r1, [r7, #24]
 8006ea4:	0148      	lsls	r0, r1, #5
 8006ea6:	69f9      	ldr	r1, [r7, #28]
 8006ea8:	4401      	add	r1, r0
 8006eaa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	0151      	lsls	r1, r2, #5
 8006ec4:	69fa      	ldr	r2, [r7, #28]
 8006ec6:	440a      	add	r2, r1
 8006ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ecc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ed0:	6113      	str	r3, [r2, #16]
 8006ed2:	e037      	b.n	8006f44 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	699a      	ldr	r2, [r3, #24]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	4413      	add	r3, r2
 8006ede:	1e5a      	subs	r2, r3, #1
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	8afa      	ldrh	r2, [r7, #22]
 8006ef0:	fb03 f202 	mul.w	r2, r3, r2
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f04:	691a      	ldr	r2, [r3, #16]
 8006f06:	8afb      	ldrh	r3, [r7, #22]
 8006f08:	04d9      	lsls	r1, r3, #19
 8006f0a:	4b3a      	ldr	r3, [pc, #232]	; (8006ff4 <USB_EPStartXfer+0x49c>)
 8006f0c:	400b      	ands	r3, r1
 8006f0e:	69b9      	ldr	r1, [r7, #24]
 8006f10:	0148      	lsls	r0, r1, #5
 8006f12:	69f9      	ldr	r1, [r7, #28]
 8006f14:	4401      	add	r1, r0
 8006f16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f34:	69b9      	ldr	r1, [r7, #24]
 8006f36:	0148      	lsls	r0, r1, #5
 8006f38:	69f9      	ldr	r1, [r7, #28]
 8006f3a:	4401      	add	r1, r0
 8006f3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f40:	4313      	orrs	r3, r2
 8006f42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f44:	79fb      	ldrb	r3, [r7, #7]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d10d      	bne.n	8006f66 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d009      	beq.n	8006f66 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	6919      	ldr	r1, [r3, #16]
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f62:	460a      	mov	r2, r1
 8006f64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	791b      	ldrb	r3, [r3, #4]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d128      	bne.n	8006fc0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d110      	bne.n	8006fa0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	0151      	lsls	r1, r2, #5
 8006f90:	69fa      	ldr	r2, [r7, #28]
 8006f92:	440a      	add	r2, r1
 8006f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	e00f      	b.n	8006fc0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fbe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	0151      	lsls	r1, r2, #5
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	440a      	add	r2, r1
 8006fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3720      	adds	r7, #32
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	fff80000 	.word	0xfff80000
 8006ff0:	e007ffff 	.word	0xe007ffff
 8006ff4:	1ff80000 	.word	0x1ff80000

08006ff8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	4613      	mov	r3, r2
 8007004:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	785b      	ldrb	r3, [r3, #1]
 8007014:	2b01      	cmp	r3, #1
 8007016:	f040 80ce 	bne.w	80071b6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d132      	bne.n	8007088 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	4413      	add	r3, r2
 800702a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702e:	691a      	ldr	r2, [r3, #16]
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	0159      	lsls	r1, r3, #5
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	440b      	add	r3, r1
 8007038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703c:	4619      	mov	r1, r3
 800703e:	4b9a      	ldr	r3, [pc, #616]	; (80072a8 <USB_EP0StartXfer+0x2b0>)
 8007040:	4013      	ands	r3, r2
 8007042:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800705e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007062:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007070:	691a      	ldr	r2, [r3, #16]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	0159      	lsls	r1, r3, #5
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	440b      	add	r3, r1
 800707a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707e:	4619      	mov	r1, r3
 8007080:	4b8a      	ldr	r3, [pc, #552]	; (80072ac <USB_EP0StartXfer+0x2b4>)
 8007082:	4013      	ands	r3, r2
 8007084:	610b      	str	r3, [r1, #16]
 8007086:	e04e      	b.n	8007126 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	0159      	lsls	r1, r3, #5
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	440b      	add	r3, r1
 800709e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a2:	4619      	mov	r1, r3
 80070a4:	4b81      	ldr	r3, [pc, #516]	; (80072ac <USB_EP0StartXfer+0x2b4>)
 80070a6:	4013      	ands	r3, r2
 80070a8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b6:	691a      	ldr	r2, [r3, #16]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	0159      	lsls	r1, r3, #5
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	440b      	add	r3, r1
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	4619      	mov	r1, r3
 80070c6:	4b78      	ldr	r3, [pc, #480]	; (80072a8 <USB_EP0StartXfer+0x2b0>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	699a      	ldr	r2, [r3, #24]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d903      	bls.n	80070e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	68da      	ldr	r2, [r3, #12]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	0151      	lsls	r1, r2, #5
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	440a      	add	r2, r1
 80070f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710c:	691a      	ldr	r2, [r3, #16]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007116:	6939      	ldr	r1, [r7, #16]
 8007118:	0148      	lsls	r0, r1, #5
 800711a:	6979      	ldr	r1, [r7, #20]
 800711c:	4401      	add	r1, r0
 800711e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007122:	4313      	orrs	r3, r2
 8007124:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007126:	79fb      	ldrb	r3, [r7, #7]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d11e      	bne.n	800716a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d009      	beq.n	8007148 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007140:	461a      	mov	r2, r3
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	440a      	add	r2, r1
 800715e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007162:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	e097      	b.n	800729a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	0151      	lsls	r1, r2, #5
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	440a      	add	r2, r1
 8007180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007184:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007188:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	2b00      	cmp	r3, #0
 8007190:	f000 8083 	beq.w	800729a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	f003 030f 	and.w	r3, r3, #15
 80071a4:	2101      	movs	r1, #1
 80071a6:	fa01 f303 	lsl.w	r3, r1, r3
 80071aa:	6979      	ldr	r1, [r7, #20]
 80071ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071b0:	4313      	orrs	r3, r2
 80071b2:	634b      	str	r3, [r1, #52]	; 0x34
 80071b4:	e071      	b.n	800729a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c2:	691a      	ldr	r2, [r3, #16]
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	0159      	lsls	r1, r3, #5
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	440b      	add	r3, r1
 80071cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d0:	4619      	mov	r1, r3
 80071d2:	4b36      	ldr	r3, [pc, #216]	; (80072ac <USB_EP0StartXfer+0x2b4>)
 80071d4:	4013      	ands	r3, r2
 80071d6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e4:	691a      	ldr	r2, [r3, #16]
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	0159      	lsls	r1, r3, #5
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	440b      	add	r3, r1
 80071ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f2:	4619      	mov	r1, r3
 80071f4:	4b2c      	ldr	r3, [pc, #176]	; (80072a8 <USB_EP0StartXfer+0x2b0>)
 80071f6:	4013      	ands	r3, r2
 80071f8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	68da      	ldr	r2, [r3, #12]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	0151      	lsls	r1, r2, #5
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	440a      	add	r2, r1
 8007228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800722c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007230:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723e:	691a      	ldr	r2, [r3, #16]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007248:	6939      	ldr	r1, [r7, #16]
 800724a:	0148      	lsls	r0, r1, #5
 800724c:	6979      	ldr	r1, [r7, #20]
 800724e:	4401      	add	r1, r0
 8007250:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007254:	4313      	orrs	r3, r2
 8007256:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007258:	79fb      	ldrb	r3, [r7, #7]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d10d      	bne.n	800727a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d009      	beq.n	800727a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	6919      	ldr	r1, [r3, #16]
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	4413      	add	r3, r2
 8007272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007276:	460a      	mov	r2, r1
 8007278:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	0151      	lsls	r1, r2, #5
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	440a      	add	r2, r1
 8007290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007294:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007298:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	371c      	adds	r7, #28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	e007ffff 	.word	0xe007ffff
 80072ac:	fff80000 	.word	0xfff80000

080072b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	785b      	ldrb	r3, [r3, #1]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d14a      	bne.n	8007364 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072e6:	f040 8086 	bne.w	80073f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	7812      	ldrb	r2, [r2, #0]
 80072fe:	0151      	lsls	r1, r2, #5
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	440a      	add	r2, r1
 8007304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007308:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800730c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	7812      	ldrb	r2, [r2, #0]
 8007322:	0151      	lsls	r1, r2, #5
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	440a      	add	r2, r1
 8007328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800732c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007330:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3301      	adds	r3, #1
 8007336:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f242 7210 	movw	r2, #10000	; 0x2710
 800733e:	4293      	cmp	r3, r2
 8007340:	d902      	bls.n	8007348 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	75fb      	strb	r3, [r7, #23]
          break;
 8007346:	e056      	b.n	80073f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800735c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007360:	d0e7      	beq.n	8007332 <USB_EPStopXfer+0x82>
 8007362:	e048      	b.n	80073f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	4413      	add	r3, r2
 800736e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800737c:	d13b      	bne.n	80073f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	7812      	ldrb	r2, [r2, #0]
 8007392:	0151      	lsls	r1, r2, #5
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	440a      	add	r2, r1
 8007398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800739c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	7812      	ldrb	r2, [r2, #0]
 80073b6:	0151      	lsls	r1, r2, #5
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	440a      	add	r2, r1
 80073bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	3301      	adds	r3, #1
 80073ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d902      	bls.n	80073dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	75fb      	strb	r3, [r7, #23]
          break;
 80073da:	e00c      	b.n	80073f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073f4:	d0e7      	beq.n	80073c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	371c      	adds	r7, #28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007404:	b480      	push	{r7}
 8007406:	b089      	sub	sp, #36	; 0x24
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	4611      	mov	r1, r2
 8007410:	461a      	mov	r2, r3
 8007412:	460b      	mov	r3, r1
 8007414:	71fb      	strb	r3, [r7, #7]
 8007416:	4613      	mov	r3, r2
 8007418:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007422:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007426:	2b00      	cmp	r3, #0
 8007428:	d123      	bne.n	8007472 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800742a:	88bb      	ldrh	r3, [r7, #4]
 800742c:	3303      	adds	r3, #3
 800742e:	089b      	lsrs	r3, r3, #2
 8007430:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007432:	2300      	movs	r3, #0
 8007434:	61bb      	str	r3, [r7, #24]
 8007436:	e018      	b.n	800746a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007438:	79fb      	ldrb	r3, [r7, #7]
 800743a:	031a      	lsls	r2, r3, #12
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	4413      	add	r3, r2
 8007440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007444:	461a      	mov	r2, r3
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	3301      	adds	r3, #1
 8007450:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	3301      	adds	r3, #1
 8007456:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	3301      	adds	r3, #1
 800745c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	3301      	adds	r3, #1
 8007462:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	3301      	adds	r3, #1
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	429a      	cmp	r2, r3
 8007470:	d3e2      	bcc.n	8007438 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3724      	adds	r7, #36	; 0x24
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007480:	b480      	push	{r7}
 8007482:	b08b      	sub	sp, #44	; 0x2c
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	4613      	mov	r3, r2
 800748c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007496:	88fb      	ldrh	r3, [r7, #6]
 8007498:	089b      	lsrs	r3, r3, #2
 800749a:	b29b      	uxth	r3, r3
 800749c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	f003 0303 	and.w	r3, r3, #3
 80074a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80074a6:	2300      	movs	r3, #0
 80074a8:	623b      	str	r3, [r7, #32]
 80074aa:	e014      	b.n	80074d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	3301      	adds	r3, #1
 80074bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	3301      	adds	r3, #1
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	3301      	adds	r3, #1
 80074c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	3301      	adds	r3, #1
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	3301      	adds	r3, #1
 80074d4:	623b      	str	r3, [r7, #32]
 80074d6:	6a3a      	ldr	r2, [r7, #32]
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d3e6      	bcc.n	80074ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80074de:	8bfb      	ldrh	r3, [r7, #30]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d01e      	beq.n	8007522 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ee:	461a      	mov	r2, r3
 80074f0:	f107 0310 	add.w	r3, r7, #16
 80074f4:	6812      	ldr	r2, [r2, #0]
 80074f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	fa22 f303 	lsr.w	r3, r2, r3
 8007504:	b2da      	uxtb	r2, r3
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	701a      	strb	r2, [r3, #0]
      i++;
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	3301      	adds	r3, #1
 800750e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	3301      	adds	r3, #1
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007516:	8bfb      	ldrh	r3, [r7, #30]
 8007518:	3b01      	subs	r3, #1
 800751a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800751c:	8bfb      	ldrh	r3, [r7, #30]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1ea      	bne.n	80074f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007524:	4618      	mov	r0, r3
 8007526:	372c      	adds	r7, #44	; 0x2c
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	785b      	ldrb	r3, [r3, #1]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d12c      	bne.n	80075a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	db12      	blt.n	8007584 <USB_EPSetStall+0x54>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00f      	beq.n	8007584 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4413      	add	r3, r2
 800756c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	0151      	lsls	r1, r2, #5
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	440a      	add	r2, r1
 800757a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800757e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007582:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	0151      	lsls	r1, r2, #5
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	440a      	add	r2, r1
 800759a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	e02b      	b.n	80075fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	db12      	blt.n	80075de <USB_EPSetStall+0xae>
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00f      	beq.n	80075de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	0151      	lsls	r1, r2, #5
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	440a      	add	r2, r1
 80075d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	0151      	lsls	r1, r2, #5
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	440a      	add	r2, r1
 80075f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	785b      	ldrb	r3, [r3, #1]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d128      	bne.n	800767a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	0151      	lsls	r1, r2, #5
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	440a      	add	r2, r1
 800763e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007642:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007646:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	791b      	ldrb	r3, [r3, #4]
 800764c:	2b03      	cmp	r3, #3
 800764e:	d003      	beq.n	8007658 <USB_EPClearStall+0x4c>
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	791b      	ldrb	r3, [r3, #4]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d138      	bne.n	80076ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	0151      	lsls	r1, r2, #5
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	440a      	add	r2, r1
 800766e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	e027      	b.n	80076ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	0151      	lsls	r1, r2, #5
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	440a      	add	r2, r1
 8007690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007694:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007698:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	791b      	ldrb	r3, [r3, #4]
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d003      	beq.n	80076aa <USB_EPClearStall+0x9e>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	791b      	ldrb	r3, [r3, #4]
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d10f      	bne.n	80076ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	0151      	lsls	r1, r2, #5
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	440a      	add	r2, r1
 80076c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	460b      	mov	r3, r1
 80076e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80076fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	78fb      	ldrb	r3, [r7, #3]
 8007706:	011b      	lsls	r3, r3, #4
 8007708:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800770c:	68f9      	ldr	r1, [r7, #12]
 800770e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007712:	4313      	orrs	r3, r2
 8007714:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800773e:	f023 0303 	bic.w	r3, r3, #3
 8007742:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007752:	f023 0302 	bic.w	r3, r3, #2
 8007756:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007780:	f023 0303 	bic.w	r3, r3, #3
 8007784:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007794:	f043 0302 	orr.w	r3, r3, #2
 8007798:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4013      	ands	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80077c0:	68fb      	ldr	r3, [r7, #12]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b085      	sub	sp, #20
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	4013      	ands	r3, r2
 80077f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	0c1b      	lsrs	r3, r3, #16
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007802:	b480      	push	{r7}
 8007804:	b085      	sub	sp, #20
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	4013      	ands	r3, r2
 8007824:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	b29b      	uxth	r3, r3
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007836:	b480      	push	{r7}
 8007838:	b085      	sub	sp, #20
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	460b      	mov	r3, r1
 8007840:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007846:	78fb      	ldrb	r3, [r7, #3]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	4013      	ands	r3, r2
 8007862:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007864:	68bb      	ldr	r3, [r7, #8]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007872:	b480      	push	{r7}
 8007874:	b087      	sub	sp, #28
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	460b      	mov	r3, r1
 800787c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007894:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007896:	78fb      	ldrb	r3, [r7, #3]
 8007898:	f003 030f 	and.w	r3, r3, #15
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	fa22 f303 	lsr.w	r3, r2, r3
 80078a2:	01db      	lsls	r3, r3, #7
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	4013      	ands	r3, r2
 80078be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078c0:	68bb      	ldr	r3, [r7, #8]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	371c      	adds	r7, #28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	f003 0301 	and.w	r3, r3, #1
}
 80078de:	4618      	mov	r0, r3
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
	...

080078ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007906:	4619      	mov	r1, r3
 8007908:	4b09      	ldr	r3, [pc, #36]	; (8007930 <USB_ActivateSetup+0x44>)
 800790a:	4013      	ands	r3, r2
 800790c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800791c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007920:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	fffff800 	.word	0xfffff800

08007934 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	460b      	mov	r3, r1
 800793e:	607a      	str	r2, [r7, #4]
 8007940:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	333c      	adds	r3, #60	; 0x3c
 800794a:	3304      	adds	r3, #4
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	4a26      	ldr	r2, [pc, #152]	; (80079ec <USB_EP0_OutStart+0xb8>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d90a      	bls.n	800796e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007968:	d101      	bne.n	800796e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	e037      	b.n	80079de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007974:	461a      	mov	r2, r3
 8007976:	2300      	movs	r3, #0
 8007978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007988:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800798c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800799c:	f043 0318 	orr.w	r3, r3, #24
 80079a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80079b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80079b6:	7afb      	ldrb	r3, [r7, #11]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d10f      	bne.n	80079dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c2:	461a      	mov	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80079da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	371c      	adds	r7, #28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	4f54300a 	.word	0x4f54300a

080079f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3301      	adds	r3, #1
 8007a00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4a13      	ldr	r2, [pc, #76]	; (8007a54 <USB_CoreReset+0x64>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d901      	bls.n	8007a0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e01b      	b.n	8007a46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	daf2      	bge.n	80079fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	f043 0201 	orr.w	r2, r3, #1
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4a09      	ldr	r2, [pc, #36]	; (8007a54 <USB_CoreReset+0x64>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d901      	bls.n	8007a38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e006      	b.n	8007a46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d0f0      	beq.n	8007a26 <USB_CoreReset+0x36>

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	00030d40 	.word	0x00030d40

08007a58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a68:	f002 fd02 	bl	800a470 <malloc>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d109      	bne.n	8007a8a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	32b0      	adds	r2, #176	; 0xb0
 8007a80:	2100      	movs	r1, #0
 8007a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007a86:	2302      	movs	r3, #2
 8007a88:	e0d4      	b.n	8007c34 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007a8a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007a8e:	2100      	movs	r1, #0
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f002 fda9 	bl	800a5e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	32b0      	adds	r2, #176	; 0xb0
 8007aa0:	68f9      	ldr	r1, [r7, #12]
 8007aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	32b0      	adds	r2, #176	; 0xb0
 8007ab0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	7c1b      	ldrb	r3, [r3, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d138      	bne.n	8007b34 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ac2:	4b5e      	ldr	r3, [pc, #376]	; (8007c3c <USBD_CDC_Init+0x1e4>)
 8007ac4:	7819      	ldrb	r1, [r3, #0]
 8007ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aca:	2202      	movs	r2, #2
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f002 fb2c 	bl	800a12a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ad2:	4b5a      	ldr	r3, [pc, #360]	; (8007c3c <USBD_CDC_Init+0x1e4>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	f003 020f 	and.w	r2, r3, #15
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	4613      	mov	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	440b      	add	r3, r1
 8007ae6:	3324      	adds	r3, #36	; 0x24
 8007ae8:	2201      	movs	r2, #1
 8007aea:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007aec:	4b54      	ldr	r3, [pc, #336]	; (8007c40 <USBD_CDC_Init+0x1e8>)
 8007aee:	7819      	ldrb	r1, [r3, #0]
 8007af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007af4:	2202      	movs	r2, #2
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f002 fb17 	bl	800a12a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007afc:	4b50      	ldr	r3, [pc, #320]	; (8007c40 <USBD_CDC_Init+0x1e8>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	f003 020f 	and.w	r2, r3, #15
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	440b      	add	r3, r1
 8007b10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b14:	2201      	movs	r2, #1
 8007b16:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b18:	4b4a      	ldr	r3, [pc, #296]	; (8007c44 <USBD_CDC_Init+0x1ec>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	f003 020f 	and.w	r2, r3, #15
 8007b20:	6879      	ldr	r1, [r7, #4]
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	3326      	adds	r3, #38	; 0x26
 8007b2e:	2210      	movs	r2, #16
 8007b30:	801a      	strh	r2, [r3, #0]
 8007b32:	e035      	b.n	8007ba0 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b34:	4b41      	ldr	r3, [pc, #260]	; (8007c3c <USBD_CDC_Init+0x1e4>)
 8007b36:	7819      	ldrb	r1, [r3, #0]
 8007b38:	2340      	movs	r3, #64	; 0x40
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f002 faf4 	bl	800a12a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b42:	4b3e      	ldr	r3, [pc, #248]	; (8007c3c <USBD_CDC_Init+0x1e4>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	f003 020f 	and.w	r2, r3, #15
 8007b4a:	6879      	ldr	r1, [r7, #4]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	440b      	add	r3, r1
 8007b56:	3324      	adds	r3, #36	; 0x24
 8007b58:	2201      	movs	r2, #1
 8007b5a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b5c:	4b38      	ldr	r3, [pc, #224]	; (8007c40 <USBD_CDC_Init+0x1e8>)
 8007b5e:	7819      	ldrb	r1, [r3, #0]
 8007b60:	2340      	movs	r3, #64	; 0x40
 8007b62:	2202      	movs	r2, #2
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f002 fae0 	bl	800a12a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b6a:	4b35      	ldr	r3, [pc, #212]	; (8007c40 <USBD_CDC_Init+0x1e8>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	f003 020f 	and.w	r2, r3, #15
 8007b72:	6879      	ldr	r1, [r7, #4]
 8007b74:	4613      	mov	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4413      	add	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	440b      	add	r3, r1
 8007b7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b82:	2201      	movs	r2, #1
 8007b84:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b86:	4b2f      	ldr	r3, [pc, #188]	; (8007c44 <USBD_CDC_Init+0x1ec>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	f003 020f 	and.w	r2, r3, #15
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	4613      	mov	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	440b      	add	r3, r1
 8007b9a:	3326      	adds	r3, #38	; 0x26
 8007b9c:	2210      	movs	r2, #16
 8007b9e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ba0:	4b28      	ldr	r3, [pc, #160]	; (8007c44 <USBD_CDC_Init+0x1ec>)
 8007ba2:	7819      	ldrb	r1, [r3, #0]
 8007ba4:	2308      	movs	r3, #8
 8007ba6:	2203      	movs	r2, #3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f002 fabe 	bl	800a12a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007bae:	4b25      	ldr	r3, [pc, #148]	; (8007c44 <USBD_CDC_Init+0x1ec>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	f003 020f 	and.w	r2, r3, #15
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	3324      	adds	r3, #36	; 0x24
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	33b0      	adds	r3, #176	; 0xb0
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8007bfe:	2302      	movs	r3, #2
 8007c00:	e018      	b.n	8007c34 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	7c1b      	ldrb	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10a      	bne.n	8007c20 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c0a:	4b0d      	ldr	r3, [pc, #52]	; (8007c40 <USBD_CDC_Init+0x1e8>)
 8007c0c:	7819      	ldrb	r1, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f002 fb75 	bl	800a308 <USBD_LL_PrepareReceive>
 8007c1e:	e008      	b.n	8007c32 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c20:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <USBD_CDC_Init+0x1e8>)
 8007c22:	7819      	ldrb	r1, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c2a:	2340      	movs	r3, #64	; 0x40
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f002 fb6b 	bl	800a308 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	200000ab 	.word	0x200000ab
 8007c40:	200000ac 	.word	0x200000ac
 8007c44:	200000ad 	.word	0x200000ad

08007c48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007c54:	4b3a      	ldr	r3, [pc, #232]	; (8007d40 <USBD_CDC_DeInit+0xf8>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f002 fa8b 	bl	800a176 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007c60:	4b37      	ldr	r3, [pc, #220]	; (8007d40 <USBD_CDC_DeInit+0xf8>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	f003 020f 	and.w	r2, r3, #15
 8007c68:	6879      	ldr	r1, [r7, #4]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	440b      	add	r3, r1
 8007c74:	3324      	adds	r3, #36	; 0x24
 8007c76:	2200      	movs	r2, #0
 8007c78:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007c7a:	4b32      	ldr	r3, [pc, #200]	; (8007d44 <USBD_CDC_DeInit+0xfc>)
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f002 fa78 	bl	800a176 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007c86:	4b2f      	ldr	r3, [pc, #188]	; (8007d44 <USBD_CDC_DeInit+0xfc>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	f003 020f 	and.w	r2, r3, #15
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	4613      	mov	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	440b      	add	r3, r1
 8007c9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007ca2:	4b29      	ldr	r3, [pc, #164]	; (8007d48 <USBD_CDC_DeInit+0x100>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f002 fa64 	bl	800a176 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007cae:	4b26      	ldr	r3, [pc, #152]	; (8007d48 <USBD_CDC_DeInit+0x100>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	f003 020f 	and.w	r2, r3, #15
 8007cb6:	6879      	ldr	r1, [r7, #4]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	440b      	add	r3, r1
 8007cc2:	3324      	adds	r3, #36	; 0x24
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007cc8:	4b1f      	ldr	r3, [pc, #124]	; (8007d48 <USBD_CDC_DeInit+0x100>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	f003 020f 	and.w	r2, r3, #15
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	440b      	add	r3, r1
 8007cdc:	3326      	adds	r3, #38	; 0x26
 8007cde:	2200      	movs	r2, #0
 8007ce0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	32b0      	adds	r2, #176	; 0xb0
 8007cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d01f      	beq.n	8007d34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	33b0      	adds	r3, #176	; 0xb0
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	32b0      	adds	r2, #176	; 0xb0
 8007d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f002 fbb2 	bl	800a480 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	32b0      	adds	r2, #176	; 0xb0
 8007d26:	2100      	movs	r1, #0
 8007d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	200000ab 	.word	0x200000ab
 8007d44:	200000ac 	.word	0x200000ac
 8007d48:	200000ad 	.word	0x200000ad

08007d4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	32b0      	adds	r2, #176	; 0xb0
 8007d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e0bf      	b.n	8007efc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d050      	beq.n	8007e2a <USBD_CDC_Setup+0xde>
 8007d88:	2b20      	cmp	r3, #32
 8007d8a:	f040 80af 	bne.w	8007eec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	88db      	ldrh	r3, [r3, #6]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d03a      	beq.n	8007e0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	b25b      	sxtb	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	da1b      	bge.n	8007dd8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	33b0      	adds	r3, #176	; 0xb0
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007db6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	88d2      	ldrh	r2, [r2, #6]
 8007dbc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	88db      	ldrh	r3, [r3, #6]
 8007dc2:	2b07      	cmp	r3, #7
 8007dc4:	bf28      	it	cs
 8007dc6:	2307      	movcs	r3, #7
 8007dc8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	89fa      	ldrh	r2, [r7, #14]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 fd6d 	bl	80098b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007dd6:	e090      	b.n	8007efa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	785a      	ldrb	r2, [r3, #1]
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	88db      	ldrh	r3, [r3, #6]
 8007de6:	2b3f      	cmp	r3, #63	; 0x3f
 8007de8:	d803      	bhi.n	8007df2 <USBD_CDC_Setup+0xa6>
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	88db      	ldrh	r3, [r3, #6]
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	e000      	b.n	8007df4 <USBD_CDC_Setup+0xa8>
 8007df2:	2240      	movs	r2, #64	; 0x40
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007dfa:	6939      	ldr	r1, [r7, #16]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007e02:	461a      	mov	r2, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 fd7f 	bl	8009908 <USBD_CtlPrepareRx>
      break;
 8007e0a:	e076      	b.n	8007efa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	33b0      	adds	r3, #176	; 0xb0
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	7850      	ldrb	r0, [r2, #1]
 8007e22:	2200      	movs	r2, #0
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	4798      	blx	r3
      break;
 8007e28:	e067      	b.n	8007efa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	785b      	ldrb	r3, [r3, #1]
 8007e2e:	2b0b      	cmp	r3, #11
 8007e30:	d851      	bhi.n	8007ed6 <USBD_CDC_Setup+0x18a>
 8007e32:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <USBD_CDC_Setup+0xec>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e69 	.word	0x08007e69
 8007e3c:	08007ee5 	.word	0x08007ee5
 8007e40:	08007ed7 	.word	0x08007ed7
 8007e44:	08007ed7 	.word	0x08007ed7
 8007e48:	08007ed7 	.word	0x08007ed7
 8007e4c:	08007ed7 	.word	0x08007ed7
 8007e50:	08007ed7 	.word	0x08007ed7
 8007e54:	08007ed7 	.word	0x08007ed7
 8007e58:	08007ed7 	.word	0x08007ed7
 8007e5c:	08007ed7 	.word	0x08007ed7
 8007e60:	08007e93 	.word	0x08007e93
 8007e64:	08007ebd 	.word	0x08007ebd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d107      	bne.n	8007e84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e74:	f107 030a 	add.w	r3, r7, #10
 8007e78:	2202      	movs	r2, #2
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 fd17 	bl	80098b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e82:	e032      	b.n	8007eea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f001 fca1 	bl	80097ce <USBD_CtlError>
            ret = USBD_FAIL;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	75fb      	strb	r3, [r7, #23]
          break;
 8007e90:	e02b      	b.n	8007eea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d107      	bne.n	8007eae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e9e:	f107 030d 	add.w	r3, r7, #13
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f001 fd02 	bl	80098b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007eac:	e01d      	b.n	8007eea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f001 fc8c 	bl	80097ce <USBD_CtlError>
            ret = USBD_FAIL;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	75fb      	strb	r3, [r7, #23]
          break;
 8007eba:	e016      	b.n	8007eea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d00f      	beq.n	8007ee8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f001 fc7f 	bl	80097ce <USBD_CtlError>
            ret = USBD_FAIL;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ed4:	e008      	b.n	8007ee8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 fc78 	bl	80097ce <USBD_CtlError>
          ret = USBD_FAIL;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ee2:	e002      	b.n	8007eea <USBD_CDC_Setup+0x19e>
          break;
 8007ee4:	bf00      	nop
 8007ee6:	e008      	b.n	8007efa <USBD_CDC_Setup+0x1ae>
          break;
 8007ee8:	bf00      	nop
      }
      break;
 8007eea:	e006      	b.n	8007efa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 fc6d 	bl	80097ce <USBD_CtlError>
      ret = USBD_FAIL;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	32b0      	adds	r2, #176	; 0xb0
 8007f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e065      	b.n	8007ffa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	32b0      	adds	r2, #176	; 0xb0
 8007f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	f003 020f 	and.w	r2, r3, #15
 8007f44:	6879      	ldr	r1, [r7, #4]
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	440b      	add	r3, r1
 8007f50:	3318      	adds	r3, #24
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d02f      	beq.n	8007fb8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007f58:	78fb      	ldrb	r3, [r7, #3]
 8007f5a:	f003 020f 	and.w	r2, r3, #15
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	4613      	mov	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	440b      	add	r3, r1
 8007f6a:	3318      	adds	r3, #24
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	f003 010f 	and.w	r1, r3, #15
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	460b      	mov	r3, r1
 8007f78:	00db      	lsls	r3, r3, #3
 8007f7a:	440b      	add	r3, r1
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4403      	add	r3, r0
 8007f80:	3348      	adds	r3, #72	; 0x48
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f88:	fb01 f303 	mul.w	r3, r1, r3
 8007f8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d112      	bne.n	8007fb8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007f92:	78fb      	ldrb	r3, [r7, #3]
 8007f94:	f003 020f 	and.w	r2, r3, #15
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	440b      	add	r3, r1
 8007fa4:	3318      	adds	r3, #24
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007faa:	78f9      	ldrb	r1, [r7, #3]
 8007fac:	2300      	movs	r3, #0
 8007fae:	2200      	movs	r2, #0
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f002 f988 	bl	800a2c6 <USBD_LL_Transmit>
 8007fb6:	e01f      	b.n	8007ff8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	33b0      	adds	r3, #176	; 0xb0
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d010      	beq.n	8007ff8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	33b0      	adds	r3, #176	; 0xb0
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007ff4:	78fa      	ldrb	r2, [r7, #3]
 8007ff6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	460b      	mov	r3, r1
 800800c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	32b0      	adds	r2, #176	; 0xb0
 8008018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800801c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	32b0      	adds	r2, #176	; 0xb0
 8008028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008030:	2303      	movs	r3, #3
 8008032:	e01a      	b.n	800806a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f002 f986 	bl	800a34a <USBD_LL_GetRxDataSize>
 800803e:	4602      	mov	r2, r0
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	33b0      	adds	r3, #176	; 0xb0
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008064:	4611      	mov	r1, r2
 8008066:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	32b0      	adds	r2, #176	; 0xb0
 8008084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008088:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008090:	2303      	movs	r3, #3
 8008092:	e025      	b.n	80080e0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	33b0      	adds	r3, #176	; 0xb0
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d01a      	beq.n	80080de <USBD_CDC_EP0_RxReady+0x6c>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80080ae:	2bff      	cmp	r3, #255	; 0xff
 80080b0:	d015      	beq.n	80080de <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	33b0      	adds	r3, #176	; 0xb0
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4413      	add	r3, r2
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80080ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80080d2:	b292      	uxth	r2, r2
 80080d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	22ff      	movs	r2, #255	; 0xff
 80080da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080f0:	2182      	movs	r1, #130	; 0x82
 80080f2:	4818      	ldr	r0, [pc, #96]	; (8008154 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080f4:	f000 fd09 	bl	8008b0a <USBD_GetEpDesc>
 80080f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080fa:	2101      	movs	r1, #1
 80080fc:	4815      	ldr	r0, [pc, #84]	; (8008154 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080fe:	f000 fd04 	bl	8008b0a <USBD_GetEpDesc>
 8008102:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008104:	2181      	movs	r1, #129	; 0x81
 8008106:	4813      	ldr	r0, [pc, #76]	; (8008154 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008108:	f000 fcff 	bl	8008b0a <USBD_GetEpDesc>
 800810c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	2210      	movs	r2, #16
 8008118:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d006      	beq.n	800812e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	2200      	movs	r2, #0
 8008124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008128:	711a      	strb	r2, [r3, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d006      	beq.n	8008142 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800813c:	711a      	strb	r2, [r3, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2243      	movs	r2, #67	; 0x43
 8008146:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008148:	4b02      	ldr	r3, [pc, #8]	; (8008154 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20000068 	.word	0x20000068

08008158 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008160:	2182      	movs	r1, #130	; 0x82
 8008162:	4818      	ldr	r0, [pc, #96]	; (80081c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008164:	f000 fcd1 	bl	8008b0a <USBD_GetEpDesc>
 8008168:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800816a:	2101      	movs	r1, #1
 800816c:	4815      	ldr	r0, [pc, #84]	; (80081c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800816e:	f000 fccc 	bl	8008b0a <USBD_GetEpDesc>
 8008172:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008174:	2181      	movs	r1, #129	; 0x81
 8008176:	4813      	ldr	r0, [pc, #76]	; (80081c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008178:	f000 fcc7 	bl	8008b0a <USBD_GetEpDesc>
 800817c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2210      	movs	r2, #16
 8008188:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d006      	beq.n	800819e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	2200      	movs	r2, #0
 8008194:	711a      	strb	r2, [r3, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f042 0202 	orr.w	r2, r2, #2
 800819c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d006      	beq.n	80081b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	711a      	strb	r2, [r3, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f042 0202 	orr.w	r2, r2, #2
 80081b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2243      	movs	r2, #67	; 0x43
 80081b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081b8:	4b02      	ldr	r3, [pc, #8]	; (80081c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20000068 	.word	0x20000068

080081c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081d0:	2182      	movs	r1, #130	; 0x82
 80081d2:	4818      	ldr	r0, [pc, #96]	; (8008234 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80081d4:	f000 fc99 	bl	8008b0a <USBD_GetEpDesc>
 80081d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081da:	2101      	movs	r1, #1
 80081dc:	4815      	ldr	r0, [pc, #84]	; (8008234 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80081de:	f000 fc94 	bl	8008b0a <USBD_GetEpDesc>
 80081e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081e4:	2181      	movs	r1, #129	; 0x81
 80081e6:	4813      	ldr	r0, [pc, #76]	; (8008234 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80081e8:	f000 fc8f 	bl	8008b0a <USBD_GetEpDesc>
 80081ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	2210      	movs	r2, #16
 80081f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d006      	beq.n	800820e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	2200      	movs	r2, #0
 8008204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008208:	711a      	strb	r2, [r3, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d006      	beq.n	8008222 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800821c:	711a      	strb	r2, [r3, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2243      	movs	r2, #67	; 0x43
 8008226:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008228:	4b02      	ldr	r3, [pc, #8]	; (8008234 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800822a:	4618      	mov	r0, r3
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	20000068 	.word	0x20000068

08008238 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	220a      	movs	r2, #10
 8008244:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008246:	4b03      	ldr	r3, [pc, #12]	; (8008254 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008248:	4618      	mov	r0, r3
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	20000024 	.word	0x20000024

08008258 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008268:	2303      	movs	r3, #3
 800826a:	e009      	b.n	8008280 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	33b0      	adds	r3, #176	; 0xb0
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	32b0      	adds	r2, #176	; 0xb0
 80082a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e008      	b.n	80082c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	371c      	adds	r7, #28
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	32b0      	adds	r2, #176	; 0xb0
 80082e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e004      	b.n	80082fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
	...

0800830c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	32b0      	adds	r2, #176	; 0xb0
 800831e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008322:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	32b0      	adds	r2, #176	; 0xb0
 800832e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008336:	2303      	movs	r3, #3
 8008338:	e018      	b.n	800836c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	7c1b      	ldrb	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10a      	bne.n	8008358 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008342:	4b0c      	ldr	r3, [pc, #48]	; (8008374 <USBD_CDC_ReceivePacket+0x68>)
 8008344:	7819      	ldrb	r1, [r3, #0]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800834c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 ffd9 	bl	800a308 <USBD_LL_PrepareReceive>
 8008356:	e008      	b.n	800836a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008358:	4b06      	ldr	r3, [pc, #24]	; (8008374 <USBD_CDC_ReceivePacket+0x68>)
 800835a:	7819      	ldrb	r1, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008362:	2340      	movs	r3, #64	; 0x40
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 ffcf 	bl	800a308 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	200000ac 	.word	0x200000ac

08008378 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	4613      	mov	r3, r2
 8008384:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800838c:	2303      	movs	r3, #3
 800838e:	e01f      	b.n	80083d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	79fa      	ldrb	r2, [r7, #7]
 80083c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f001 fe49 	bl	800a05c <USBD_LL_Init>
 80083ca:	4603      	mov	r3, r0
 80083cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80083ec:	2303      	movs	r3, #3
 80083ee:	e025      	b.n	800843c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	32ae      	adds	r2, #174	; 0xae
 8008402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00f      	beq.n	800842c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	32ae      	adds	r2, #174	; 0xae
 8008416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	f107 020e 	add.w	r2, r7, #14
 8008420:	4610      	mov	r0, r2
 8008422:	4798      	blx	r3
 8008424:	4602      	mov	r2, r0
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f001 fe51 	bl	800a0f4 <USBD_LL_Start>
 8008452:	4603      	mov	r3, r0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008464:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008466:	4618      	mov	r0, r3
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	460b      	mov	r3, r1
 800847c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008488:	2b00      	cmp	r3, #0
 800848a:	d009      	beq.n	80084a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	78fa      	ldrb	r2, [r7, #3]
 8008496:	4611      	mov	r1, r2
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	4798      	blx	r3
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	460b      	mov	r3, r1
 80084b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	78fa      	ldrb	r2, [r7, #3]
 80084c4:	4611      	mov	r1, r2
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	4798      	blx	r3
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80084d0:	2303      	movs	r3, #3
 80084d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f001 f932 	bl	800975a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008504:	461a      	mov	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008512:	f003 031f 	and.w	r3, r3, #31
 8008516:	2b02      	cmp	r3, #2
 8008518:	d01a      	beq.n	8008550 <USBD_LL_SetupStage+0x72>
 800851a:	2b02      	cmp	r3, #2
 800851c:	d822      	bhi.n	8008564 <USBD_LL_SetupStage+0x86>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d002      	beq.n	8008528 <USBD_LL_SetupStage+0x4a>
 8008522:	2b01      	cmp	r3, #1
 8008524:	d00a      	beq.n	800853c <USBD_LL_SetupStage+0x5e>
 8008526:	e01d      	b.n	8008564 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fb5f 	bl	8008bf4 <USBD_StdDevReq>
 8008536:	4603      	mov	r3, r0
 8008538:	73fb      	strb	r3, [r7, #15]
      break;
 800853a:	e020      	b.n	800857e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fbc7 	bl	8008cd8 <USBD_StdItfReq>
 800854a:	4603      	mov	r3, r0
 800854c:	73fb      	strb	r3, [r7, #15]
      break;
 800854e:	e016      	b.n	800857e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fc29 	bl	8008db0 <USBD_StdEPReq>
 800855e:	4603      	mov	r3, r0
 8008560:	73fb      	strb	r3, [r7, #15]
      break;
 8008562:	e00c      	b.n	800857e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800856a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800856e:	b2db      	uxtb	r3, r3
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f001 fe1e 	bl	800a1b4 <USBD_LL_StallEP>
 8008578:	4603      	mov	r3, r0
 800857a:	73fb      	strb	r3, [r7, #15]
      break;
 800857c:	bf00      	nop
  }

  return ret;
 800857e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	460b      	mov	r3, r1
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800859a:	7afb      	ldrb	r3, [r7, #11]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d16e      	bne.n	800867e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80085a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	f040 8098 	bne.w	80086e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	689a      	ldr	r2, [r3, #8]
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d913      	bls.n	80085e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	689a      	ldr	r2, [r3, #8]
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	1ad2      	subs	r2, r2, r3
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	4293      	cmp	r3, r2
 80085d8:	bf28      	it	cs
 80085da:	4613      	movcs	r3, r2
 80085dc:	461a      	mov	r2, r3
 80085de:	6879      	ldr	r1, [r7, #4]
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f001 f9ae 	bl	8009942 <USBD_CtlContinueRx>
 80085e6:	e07d      	b.n	80086e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085ee:	f003 031f 	and.w	r3, r3, #31
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d014      	beq.n	8008620 <USBD_LL_DataOutStage+0x98>
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d81d      	bhi.n	8008636 <USBD_LL_DataOutStage+0xae>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d002      	beq.n	8008604 <USBD_LL_DataOutStage+0x7c>
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d003      	beq.n	800860a <USBD_LL_DataOutStage+0x82>
 8008602:	e018      	b.n	8008636 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	75bb      	strb	r3, [r7, #22]
            break;
 8008608:	e018      	b.n	800863c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008610:	b2db      	uxtb	r3, r3
 8008612:	4619      	mov	r1, r3
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 fa5e 	bl	8008ad6 <USBD_CoreFindIF>
 800861a:	4603      	mov	r3, r0
 800861c:	75bb      	strb	r3, [r7, #22]
            break;
 800861e:	e00d      	b.n	800863c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008626:	b2db      	uxtb	r3, r3
 8008628:	4619      	mov	r1, r3
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 fa60 	bl	8008af0 <USBD_CoreFindEP>
 8008630:	4603      	mov	r3, r0
 8008632:	75bb      	strb	r3, [r7, #22]
            break;
 8008634:	e002      	b.n	800863c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008636:	2300      	movs	r3, #0
 8008638:	75bb      	strb	r3, [r7, #22]
            break;
 800863a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800863c:	7dbb      	ldrb	r3, [r7, #22]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d119      	bne.n	8008676 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b03      	cmp	r3, #3
 800864c:	d113      	bne.n	8008676 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800864e:	7dba      	ldrb	r2, [r7, #22]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	32ae      	adds	r2, #174	; 0xae
 8008654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00b      	beq.n	8008676 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800865e:	7dba      	ldrb	r2, [r7, #22]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008666:	7dba      	ldrb	r2, [r7, #22]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	32ae      	adds	r2, #174	; 0xae
 800866c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f001 f974 	bl	8009964 <USBD_CtlSendStatus>
 800867c:	e032      	b.n	80086e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800867e:	7afb      	ldrb	r3, [r7, #11]
 8008680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008684:	b2db      	uxtb	r3, r3
 8008686:	4619      	mov	r1, r3
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 fa31 	bl	8008af0 <USBD_CoreFindEP>
 800868e:	4603      	mov	r3, r0
 8008690:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008692:	7dbb      	ldrb	r3, [r7, #22]
 8008694:	2bff      	cmp	r3, #255	; 0xff
 8008696:	d025      	beq.n	80086e4 <USBD_LL_DataOutStage+0x15c>
 8008698:	7dbb      	ldrb	r3, [r7, #22]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d122      	bne.n	80086e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d117      	bne.n	80086da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80086aa:	7dba      	ldrb	r2, [r7, #22]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	32ae      	adds	r2, #174	; 0xae
 80086b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00f      	beq.n	80086da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80086ba:	7dba      	ldrb	r2, [r7, #22]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80086c2:	7dba      	ldrb	r2, [r7, #22]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	32ae      	adds	r2, #174	; 0xae
 80086c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	7afa      	ldrb	r2, [r7, #11]
 80086d0:	4611      	mov	r1, r2
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	4798      	blx	r3
 80086d6:	4603      	mov	r3, r0
 80086d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	e000      	b.n	80086e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b086      	sub	sp, #24
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	460b      	mov	r3, r1
 80086f8:	607a      	str	r2, [r7, #4]
 80086fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80086fc:	7afb      	ldrb	r3, [r7, #11]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d16f      	bne.n	80087e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	3314      	adds	r3, #20
 8008706:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800870e:	2b02      	cmp	r3, #2
 8008710:	d15a      	bne.n	80087c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	689a      	ldr	r2, [r3, #8]
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	429a      	cmp	r2, r3
 800871c:	d914      	bls.n	8008748 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	689a      	ldr	r2, [r3, #8]
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	1ad2      	subs	r2, r2, r3
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	461a      	mov	r2, r3
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f001 f8d6 	bl	80098e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800873a:	2300      	movs	r3, #0
 800873c:	2200      	movs	r2, #0
 800873e:	2100      	movs	r1, #0
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f001 fde1 	bl	800a308 <USBD_LL_PrepareReceive>
 8008746:	e03f      	b.n	80087c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	429a      	cmp	r2, r3
 8008752:	d11c      	bne.n	800878e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800875c:	429a      	cmp	r2, r3
 800875e:	d316      	bcc.n	800878e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800876a:	429a      	cmp	r2, r3
 800876c:	d20f      	bcs.n	800878e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800876e:	2200      	movs	r2, #0
 8008770:	2100      	movs	r1, #0
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f001 f8b7 	bl	80098e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008780:	2300      	movs	r3, #0
 8008782:	2200      	movs	r2, #0
 8008784:	2100      	movs	r1, #0
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f001 fdbe 	bl	800a308 <USBD_LL_PrepareReceive>
 800878c:	e01c      	b.n	80087c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b03      	cmp	r3, #3
 8008798:	d10f      	bne.n	80087ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d009      	beq.n	80087ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80087ba:	2180      	movs	r1, #128	; 0x80
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f001 fcf9 	bl	800a1b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f001 f8e1 	bl	800998a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d03a      	beq.n	8008848 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f7ff fe42 	bl	800845c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80087e0:	e032      	b.n	8008848 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80087e2:	7afb      	ldrb	r3, [r7, #11]
 80087e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	4619      	mov	r1, r3
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 f97f 	bl	8008af0 <USBD_CoreFindEP>
 80087f2:	4603      	mov	r3, r0
 80087f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	2bff      	cmp	r3, #255	; 0xff
 80087fa:	d025      	beq.n	8008848 <USBD_LL_DataInStage+0x15a>
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d122      	bne.n	8008848 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b03      	cmp	r3, #3
 800880c:	d11c      	bne.n	8008848 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800880e:	7dfa      	ldrb	r2, [r7, #23]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	32ae      	adds	r2, #174	; 0xae
 8008814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d014      	beq.n	8008848 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800881e:	7dfa      	ldrb	r2, [r7, #23]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008826:	7dfa      	ldrb	r2, [r7, #23]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	32ae      	adds	r2, #174	; 0xae
 800882c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	7afa      	ldrb	r2, [r7, #11]
 8008834:	4611      	mov	r1, r2
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	4798      	blx	r3
 800883a:	4603      	mov	r3, r0
 800883c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800883e:	7dbb      	ldrb	r3, [r7, #22]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008844:	7dbb      	ldrb	r3, [r7, #22]
 8008846:	e000      	b.n	800884a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3718      	adds	r7, #24
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800888a:	2b00      	cmp	r3, #0
 800888c:	d014      	beq.n	80088b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00e      	beq.n	80088b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	6852      	ldr	r2, [r2, #4]
 80088a6:	b2d2      	uxtb	r2, r2
 80088a8:	4611      	mov	r1, r2
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	4798      	blx	r3
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d001      	beq.n	80088b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80088b4:	2303      	movs	r3, #3
 80088b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088b8:	2340      	movs	r3, #64	; 0x40
 80088ba:	2200      	movs	r2, #0
 80088bc:	2100      	movs	r1, #0
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f001 fc33 	bl	800a12a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2240      	movs	r2, #64	; 0x40
 80088d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088d4:	2340      	movs	r3, #64	; 0x40
 80088d6:	2200      	movs	r2, #0
 80088d8:	2180      	movs	r1, #128	; 0x80
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 fc25 	bl	800a12a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2240      	movs	r2, #64	; 0x40
 80088ea:	621a      	str	r2, [r3, #32]

  return ret;
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	460b      	mov	r3, r1
 8008900:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	78fa      	ldrb	r2, [r7, #3]
 8008906:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008924:	b2da      	uxtb	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2204      	movs	r2, #4
 8008930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008942:	b480      	push	{r7}
 8008944:	b083      	sub	sp, #12
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b04      	cmp	r3, #4
 8008954:	d106      	bne.n	8008964 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800895c:	b2da      	uxtb	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b03      	cmp	r3, #3
 8008984:	d110      	bne.n	80089a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008996:	69db      	ldr	r3, [r3, #28]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d005      	beq.n	80089a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	460b      	mov	r3, r1
 80089bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	32ae      	adds	r2, #174	; 0xae
 80089c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e01c      	b.n	8008a0e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d115      	bne.n	8008a0c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	32ae      	adds	r2, #174	; 0xae
 80089ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	32ae      	adds	r2, #174	; 0xae
 80089fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	78fa      	ldrb	r2, [r7, #3]
 8008a06:	4611      	mov	r1, r2
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b082      	sub	sp, #8
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	460b      	mov	r3, r1
 8008a20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	32ae      	adds	r2, #174	; 0xae
 8008a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e01c      	b.n	8008a72 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d115      	bne.n	8008a70 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	32ae      	adds	r2, #174	; 0xae
 8008a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00b      	beq.n	8008a70 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	32ae      	adds	r2, #174	; 0xae
 8008a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a68:	78fa      	ldrb	r2, [r7, #3]
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b083      	sub	sp, #12
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00e      	beq.n	8008acc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	6852      	ldr	r2, [r2, #4]
 8008aba:	b2d2      	uxtb	r2, r2
 8008abc:	4611      	mov	r1, r2
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	4798      	blx	r3
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b083      	sub	sp, #12
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ae2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008afc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	370c      	adds	r7, #12
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b086      	sub	sp, #24
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	460b      	mov	r3, r1
 8008b14:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	885b      	ldrh	r3, [r3, #2]
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d920      	bls.n	8008b74 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008b3a:	e013      	b.n	8008b64 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008b3c:	f107 030a 	add.w	r3, r7, #10
 8008b40:	4619      	mov	r1, r3
 8008b42:	6978      	ldr	r0, [r7, #20]
 8008b44:	f000 f81b 	bl	8008b7e <USBD_GetNextDesc>
 8008b48:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	785b      	ldrb	r3, [r3, #1]
 8008b4e:	2b05      	cmp	r3, #5
 8008b50:	d108      	bne.n	8008b64 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	789b      	ldrb	r3, [r3, #2]
 8008b5a:	78fa      	ldrb	r2, [r7, #3]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d008      	beq.n	8008b72 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008b60:	2300      	movs	r3, #0
 8008b62:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	885b      	ldrh	r3, [r3, #2]
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	897b      	ldrh	r3, [r7, #10]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d8e5      	bhi.n	8008b3c <USBD_GetEpDesc+0x32>
 8008b70:	e000      	b.n	8008b74 <USBD_GetEpDesc+0x6a>
          break;
 8008b72:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008b74:	693b      	ldr	r3, [r7, #16]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b085      	sub	sp, #20
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	881a      	ldrh	r2, [r3, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	4413      	add	r3, r2
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008baa:	68fb      	ldr	r3, [r7, #12]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b087      	sub	sp, #28
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008bd6:	8a3b      	ldrh	r3, [r7, #16]
 8008bd8:	021b      	lsls	r3, r3, #8
 8008bda:	b21a      	sxth	r2, r3
 8008bdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	b21b      	sxth	r3, r3
 8008be4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008be6:	89fb      	ldrh	r3, [r7, #14]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	371c      	adds	r7, #28
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c0a:	2b40      	cmp	r3, #64	; 0x40
 8008c0c:	d005      	beq.n	8008c1a <USBD_StdDevReq+0x26>
 8008c0e:	2b40      	cmp	r3, #64	; 0x40
 8008c10:	d857      	bhi.n	8008cc2 <USBD_StdDevReq+0xce>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00f      	beq.n	8008c36 <USBD_StdDevReq+0x42>
 8008c16:	2b20      	cmp	r3, #32
 8008c18:	d153      	bne.n	8008cc2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	32ae      	adds	r2, #174	; 0xae
 8008c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	4798      	blx	r3
 8008c30:	4603      	mov	r3, r0
 8008c32:	73fb      	strb	r3, [r7, #15]
      break;
 8008c34:	e04a      	b.n	8008ccc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	785b      	ldrb	r3, [r3, #1]
 8008c3a:	2b09      	cmp	r3, #9
 8008c3c:	d83b      	bhi.n	8008cb6 <USBD_StdDevReq+0xc2>
 8008c3e:	a201      	add	r2, pc, #4	; (adr r2, 8008c44 <USBD_StdDevReq+0x50>)
 8008c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c44:	08008c99 	.word	0x08008c99
 8008c48:	08008cad 	.word	0x08008cad
 8008c4c:	08008cb7 	.word	0x08008cb7
 8008c50:	08008ca3 	.word	0x08008ca3
 8008c54:	08008cb7 	.word	0x08008cb7
 8008c58:	08008c77 	.word	0x08008c77
 8008c5c:	08008c6d 	.word	0x08008c6d
 8008c60:	08008cb7 	.word	0x08008cb7
 8008c64:	08008c8f 	.word	0x08008c8f
 8008c68:	08008c81 	.word	0x08008c81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fa3c 	bl	80090ec <USBD_GetDescriptor>
          break;
 8008c74:	e024      	b.n	8008cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fbcb 	bl	8009414 <USBD_SetAddress>
          break;
 8008c7e:	e01f      	b.n	8008cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fc0a 	bl	800949c <USBD_SetConfig>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73fb      	strb	r3, [r7, #15]
          break;
 8008c8c:	e018      	b.n	8008cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fcad 	bl	80095f0 <USBD_GetConfig>
          break;
 8008c96:	e013      	b.n	8008cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fcde 	bl	800965c <USBD_GetStatus>
          break;
 8008ca0:	e00e      	b.n	8008cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fd0d 	bl	80096c4 <USBD_SetFeature>
          break;
 8008caa:	e009      	b.n	8008cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008cac:	6839      	ldr	r1, [r7, #0]
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fd31 	bl	8009716 <USBD_ClrFeature>
          break;
 8008cb4:	e004      	b.n	8008cc0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fd88 	bl	80097ce <USBD_CtlError>
          break;
 8008cbe:	bf00      	nop
      }
      break;
 8008cc0:	e004      	b.n	8008ccc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fd82 	bl	80097ce <USBD_CtlError>
      break;
 8008cca:	bf00      	nop
  }

  return ret;
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop

08008cd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cee:	2b40      	cmp	r3, #64	; 0x40
 8008cf0:	d005      	beq.n	8008cfe <USBD_StdItfReq+0x26>
 8008cf2:	2b40      	cmp	r3, #64	; 0x40
 8008cf4:	d852      	bhi.n	8008d9c <USBD_StdItfReq+0xc4>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <USBD_StdItfReq+0x26>
 8008cfa:	2b20      	cmp	r3, #32
 8008cfc:	d14e      	bne.n	8008d9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	3b01      	subs	r3, #1
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d840      	bhi.n	8008d8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	889b      	ldrh	r3, [r3, #4]
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d836      	bhi.n	8008d84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	889b      	ldrh	r3, [r3, #4]
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f7ff fed9 	bl	8008ad6 <USBD_CoreFindIF>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d28:	7bbb      	ldrb	r3, [r7, #14]
 8008d2a:	2bff      	cmp	r3, #255	; 0xff
 8008d2c:	d01d      	beq.n	8008d6a <USBD_StdItfReq+0x92>
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d11a      	bne.n	8008d6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008d34:	7bba      	ldrb	r2, [r7, #14]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	32ae      	adds	r2, #174	; 0xae
 8008d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00f      	beq.n	8008d64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008d44:	7bba      	ldrb	r2, [r7, #14]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d4c:	7bba      	ldrb	r2, [r7, #14]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	32ae      	adds	r2, #174	; 0xae
 8008d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	4798      	blx	r3
 8008d5e:	4603      	mov	r3, r0
 8008d60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d62:	e004      	b.n	8008d6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008d64:	2303      	movs	r3, #3
 8008d66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d68:	e001      	b.n	8008d6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	88db      	ldrh	r3, [r3, #6]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d110      	bne.n	8008d98 <USBD_StdItfReq+0xc0>
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10d      	bne.n	8008d98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fdf1 	bl	8009964 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d82:	e009      	b.n	8008d98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fd21 	bl	80097ce <USBD_CtlError>
          break;
 8008d8c:	e004      	b.n	8008d98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fd1c 	bl	80097ce <USBD_CtlError>
          break;
 8008d96:	e000      	b.n	8008d9a <USBD_StdItfReq+0xc2>
          break;
 8008d98:	bf00      	nop
      }
      break;
 8008d9a:	e004      	b.n	8008da6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fd15 	bl	80097ce <USBD_CtlError>
      break;
 8008da4:	bf00      	nop
  }

  return ret;
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	889b      	ldrh	r3, [r3, #4]
 8008dc2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dcc:	2b40      	cmp	r3, #64	; 0x40
 8008dce:	d007      	beq.n	8008de0 <USBD_StdEPReq+0x30>
 8008dd0:	2b40      	cmp	r3, #64	; 0x40
 8008dd2:	f200 817f 	bhi.w	80090d4 <USBD_StdEPReq+0x324>
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d02a      	beq.n	8008e30 <USBD_StdEPReq+0x80>
 8008dda:	2b20      	cmp	r3, #32
 8008ddc:	f040 817a 	bne.w	80090d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7ff fe83 	bl	8008af0 <USBD_CoreFindEP>
 8008dea:	4603      	mov	r3, r0
 8008dec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dee:	7b7b      	ldrb	r3, [r7, #13]
 8008df0:	2bff      	cmp	r3, #255	; 0xff
 8008df2:	f000 8174 	beq.w	80090de <USBD_StdEPReq+0x32e>
 8008df6:	7b7b      	ldrb	r3, [r7, #13]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f040 8170 	bne.w	80090de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008dfe:	7b7a      	ldrb	r2, [r7, #13]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008e06:	7b7a      	ldrb	r2, [r7, #13]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	32ae      	adds	r2, #174	; 0xae
 8008e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 8163 	beq.w	80090de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008e18:	7b7a      	ldrb	r2, [r7, #13]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	32ae      	adds	r2, #174	; 0xae
 8008e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	4798      	blx	r3
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e2e:	e156      	b.n	80090de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	785b      	ldrb	r3, [r3, #1]
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d008      	beq.n	8008e4a <USBD_StdEPReq+0x9a>
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	f300 8145 	bgt.w	80090c8 <USBD_StdEPReq+0x318>
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f000 809b 	beq.w	8008f7a <USBD_StdEPReq+0x1ca>
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d03c      	beq.n	8008ec2 <USBD_StdEPReq+0x112>
 8008e48:	e13e      	b.n	80090c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d002      	beq.n	8008e5c <USBD_StdEPReq+0xac>
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d016      	beq.n	8008e88 <USBD_StdEPReq+0xd8>
 8008e5a:	e02c      	b.n	8008eb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e5c:	7bbb      	ldrb	r3, [r7, #14]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00d      	beq.n	8008e7e <USBD_StdEPReq+0xce>
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
 8008e64:	2b80      	cmp	r3, #128	; 0x80
 8008e66:	d00a      	beq.n	8008e7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f001 f9a1 	bl	800a1b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e72:	2180      	movs	r1, #128	; 0x80
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f001 f99d 	bl	800a1b4 <USBD_LL_StallEP>
 8008e7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e7c:	e020      	b.n	8008ec0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fca4 	bl	80097ce <USBD_CtlError>
              break;
 8008e86:	e01b      	b.n	8008ec0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	885b      	ldrh	r3, [r3, #2]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10e      	bne.n	8008eae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00b      	beq.n	8008eae <USBD_StdEPReq+0xfe>
 8008e96:	7bbb      	ldrb	r3, [r7, #14]
 8008e98:	2b80      	cmp	r3, #128	; 0x80
 8008e9a:	d008      	beq.n	8008eae <USBD_StdEPReq+0xfe>
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	88db      	ldrh	r3, [r3, #6]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d104      	bne.n	8008eae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f001 f983 	bl	800a1b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fd58 	bl	8009964 <USBD_CtlSendStatus>

              break;
 8008eb4:	e004      	b.n	8008ec0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008eb6:	6839      	ldr	r1, [r7, #0]
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fc88 	bl	80097ce <USBD_CtlError>
              break;
 8008ebe:	bf00      	nop
          }
          break;
 8008ec0:	e107      	b.n	80090d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d002      	beq.n	8008ed4 <USBD_StdEPReq+0x124>
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d016      	beq.n	8008f00 <USBD_StdEPReq+0x150>
 8008ed2:	e04b      	b.n	8008f6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ed4:	7bbb      	ldrb	r3, [r7, #14]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00d      	beq.n	8008ef6 <USBD_StdEPReq+0x146>
 8008eda:	7bbb      	ldrb	r3, [r7, #14]
 8008edc:	2b80      	cmp	r3, #128	; 0x80
 8008ede:	d00a      	beq.n	8008ef6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ee0:	7bbb      	ldrb	r3, [r7, #14]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f001 f965 	bl	800a1b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eea:	2180      	movs	r1, #128	; 0x80
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f001 f961 	bl	800a1b4 <USBD_LL_StallEP>
 8008ef2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ef4:	e040      	b.n	8008f78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fc68 	bl	80097ce <USBD_CtlError>
              break;
 8008efe:	e03b      	b.n	8008f78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	885b      	ldrh	r3, [r3, #2]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d136      	bne.n	8008f76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
 8008f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d004      	beq.n	8008f1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f12:	7bbb      	ldrb	r3, [r7, #14]
 8008f14:	4619      	mov	r1, r3
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f001 f96b 	bl	800a1f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fd21 	bl	8009964 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f22:	7bbb      	ldrb	r3, [r7, #14]
 8008f24:	4619      	mov	r1, r3
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7ff fde2 	bl	8008af0 <USBD_CoreFindEP>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f30:	7b7b      	ldrb	r3, [r7, #13]
 8008f32:	2bff      	cmp	r3, #255	; 0xff
 8008f34:	d01f      	beq.n	8008f76 <USBD_StdEPReq+0x1c6>
 8008f36:	7b7b      	ldrb	r3, [r7, #13]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d11c      	bne.n	8008f76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008f3c:	7b7a      	ldrb	r2, [r7, #13]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008f44:	7b7a      	ldrb	r2, [r7, #13]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	32ae      	adds	r2, #174	; 0xae
 8008f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d010      	beq.n	8008f76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f54:	7b7a      	ldrb	r2, [r7, #13]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	32ae      	adds	r2, #174	; 0xae
 8008f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	4798      	blx	r3
 8008f66:	4603      	mov	r3, r0
 8008f68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008f6a:	e004      	b.n	8008f76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fc2d 	bl	80097ce <USBD_CtlError>
              break;
 8008f74:	e000      	b.n	8008f78 <USBD_StdEPReq+0x1c8>
              break;
 8008f76:	bf00      	nop
          }
          break;
 8008f78:	e0ab      	b.n	80090d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d002      	beq.n	8008f8c <USBD_StdEPReq+0x1dc>
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	d032      	beq.n	8008ff0 <USBD_StdEPReq+0x240>
 8008f8a:	e097      	b.n	80090bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f8c:	7bbb      	ldrb	r3, [r7, #14]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d007      	beq.n	8008fa2 <USBD_StdEPReq+0x1f2>
 8008f92:	7bbb      	ldrb	r3, [r7, #14]
 8008f94:	2b80      	cmp	r3, #128	; 0x80
 8008f96:	d004      	beq.n	8008fa2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008f98:	6839      	ldr	r1, [r7, #0]
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fc17 	bl	80097ce <USBD_CtlError>
                break;
 8008fa0:	e091      	b.n	80090c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	da0b      	bge.n	8008fc2 <USBD_StdEPReq+0x212>
 8008faa:	7bbb      	ldrb	r3, [r7, #14]
 8008fac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	3310      	adds	r3, #16
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	e00b      	b.n	8008fda <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
 8008fc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fc8:	4613      	mov	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4413      	add	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	3304      	adds	r3, #4
 8008fda:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	2202      	movs	r2, #2
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fc61 	bl	80098b0 <USBD_CtlSendData>
              break;
 8008fee:	e06a      	b.n	80090c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	da11      	bge.n	800901c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
 8008ffa:	f003 020f 	and.w	r2, r3, #15
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	4613      	mov	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	440b      	add	r3, r1
 800900a:	3324      	adds	r3, #36	; 0x24
 800900c:	881b      	ldrh	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d117      	bne.n	8009042 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009012:	6839      	ldr	r1, [r7, #0]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fbda 	bl	80097ce <USBD_CtlError>
                  break;
 800901a:	e054      	b.n	80090c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800901c:	7bbb      	ldrb	r3, [r7, #14]
 800901e:	f003 020f 	and.w	r2, r3, #15
 8009022:	6879      	ldr	r1, [r7, #4]
 8009024:	4613      	mov	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	440b      	add	r3, r1
 800902e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009032:	881b      	ldrh	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d104      	bne.n	8009042 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fbc7 	bl	80097ce <USBD_CtlError>
                  break;
 8009040:	e041      	b.n	80090c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009046:	2b00      	cmp	r3, #0
 8009048:	da0b      	bge.n	8009062 <USBD_StdEPReq+0x2b2>
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009050:	4613      	mov	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	3310      	adds	r3, #16
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	4413      	add	r3, r2
 800905e:	3304      	adds	r3, #4
 8009060:	e00b      	b.n	800907a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009062:	7bbb      	ldrb	r3, [r7, #14]
 8009064:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009068:	4613      	mov	r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	4413      	add	r3, r2
 8009078:	3304      	adds	r3, #4
 800907a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800907c:	7bbb      	ldrb	r3, [r7, #14]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d002      	beq.n	8009088 <USBD_StdEPReq+0x2d8>
 8009082:	7bbb      	ldrb	r3, [r7, #14]
 8009084:	2b80      	cmp	r3, #128	; 0x80
 8009086:	d103      	bne.n	8009090 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	2200      	movs	r2, #0
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	e00e      	b.n	80090ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009090:	7bbb      	ldrb	r3, [r7, #14]
 8009092:	4619      	mov	r1, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f001 f8cb 	bl	800a230 <USBD_LL_IsStallEP>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d003      	beq.n	80090a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2201      	movs	r2, #1
 80090a4:	601a      	str	r2, [r3, #0]
 80090a6:	e002      	b.n	80090ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2200      	movs	r2, #0
 80090ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	2202      	movs	r2, #2
 80090b2:	4619      	mov	r1, r3
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fbfb 	bl	80098b0 <USBD_CtlSendData>
              break;
 80090ba:	e004      	b.n	80090c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fb85 	bl	80097ce <USBD_CtlError>
              break;
 80090c4:	bf00      	nop
          }
          break;
 80090c6:	e004      	b.n	80090d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fb7f 	bl	80097ce <USBD_CtlError>
          break;
 80090d0:	bf00      	nop
      }
      break;
 80090d2:	e005      	b.n	80090e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80090d4:	6839      	ldr	r1, [r7, #0]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fb79 	bl	80097ce <USBD_CtlError>
      break;
 80090dc:	e000      	b.n	80090e0 <USBD_StdEPReq+0x330>
      break;
 80090de:	bf00      	nop
  }

  return ret;
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
	...

080090ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090f6:	2300      	movs	r3, #0
 80090f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80090fe:	2300      	movs	r3, #0
 8009100:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	885b      	ldrh	r3, [r3, #2]
 8009106:	0a1b      	lsrs	r3, r3, #8
 8009108:	b29b      	uxth	r3, r3
 800910a:	3b01      	subs	r3, #1
 800910c:	2b0e      	cmp	r3, #14
 800910e:	f200 8152 	bhi.w	80093b6 <USBD_GetDescriptor+0x2ca>
 8009112:	a201      	add	r2, pc, #4	; (adr r2, 8009118 <USBD_GetDescriptor+0x2c>)
 8009114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009118:	08009189 	.word	0x08009189
 800911c:	080091a1 	.word	0x080091a1
 8009120:	080091e1 	.word	0x080091e1
 8009124:	080093b7 	.word	0x080093b7
 8009128:	080093b7 	.word	0x080093b7
 800912c:	08009357 	.word	0x08009357
 8009130:	08009383 	.word	0x08009383
 8009134:	080093b7 	.word	0x080093b7
 8009138:	080093b7 	.word	0x080093b7
 800913c:	080093b7 	.word	0x080093b7
 8009140:	080093b7 	.word	0x080093b7
 8009144:	080093b7 	.word	0x080093b7
 8009148:	080093b7 	.word	0x080093b7
 800914c:	080093b7 	.word	0x080093b7
 8009150:	08009155 	.word	0x08009155
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800915a:	69db      	ldr	r3, [r3, #28]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00b      	beq.n	8009178 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009166:	69db      	ldr	r3, [r3, #28]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	7c12      	ldrb	r2, [r2, #16]
 800916c:	f107 0108 	add.w	r1, r7, #8
 8009170:	4610      	mov	r0, r2
 8009172:	4798      	blx	r3
 8009174:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009176:	e126      	b.n	80093c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fb27 	bl	80097ce <USBD_CtlError>
        err++;
 8009180:	7afb      	ldrb	r3, [r7, #11]
 8009182:	3301      	adds	r3, #1
 8009184:	72fb      	strb	r3, [r7, #11]
      break;
 8009186:	e11e      	b.n	80093c6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	7c12      	ldrb	r2, [r2, #16]
 8009194:	f107 0108 	add.w	r1, r7, #8
 8009198:	4610      	mov	r0, r2
 800919a:	4798      	blx	r3
 800919c:	60f8      	str	r0, [r7, #12]
      break;
 800919e:	e112      	b.n	80093c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	7c1b      	ldrb	r3, [r3, #16]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10d      	bne.n	80091c4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b0:	f107 0208 	add.w	r2, r7, #8
 80091b4:	4610      	mov	r0, r2
 80091b6:	4798      	blx	r3
 80091b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3301      	adds	r3, #1
 80091be:	2202      	movs	r2, #2
 80091c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80091c2:	e100      	b.n	80093c6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091cc:	f107 0208 	add.w	r2, r7, #8
 80091d0:	4610      	mov	r0, r2
 80091d2:	4798      	blx	r3
 80091d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3301      	adds	r3, #1
 80091da:	2202      	movs	r2, #2
 80091dc:	701a      	strb	r2, [r3, #0]
      break;
 80091de:	e0f2      	b.n	80093c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	885b      	ldrh	r3, [r3, #2]
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b05      	cmp	r3, #5
 80091e8:	f200 80ac 	bhi.w	8009344 <USBD_GetDescriptor+0x258>
 80091ec:	a201      	add	r2, pc, #4	; (adr r2, 80091f4 <USBD_GetDescriptor+0x108>)
 80091ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f2:	bf00      	nop
 80091f4:	0800920d 	.word	0x0800920d
 80091f8:	08009241 	.word	0x08009241
 80091fc:	08009275 	.word	0x08009275
 8009200:	080092a9 	.word	0x080092a9
 8009204:	080092dd 	.word	0x080092dd
 8009208:	08009311 	.word	0x08009311
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00b      	beq.n	8009230 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	7c12      	ldrb	r2, [r2, #16]
 8009224:	f107 0108 	add.w	r1, r7, #8
 8009228:	4610      	mov	r0, r2
 800922a:	4798      	blx	r3
 800922c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800922e:	e091      	b.n	8009354 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 facb 	bl	80097ce <USBD_CtlError>
            err++;
 8009238:	7afb      	ldrb	r3, [r7, #11]
 800923a:	3301      	adds	r3, #1
 800923c:	72fb      	strb	r3, [r7, #11]
          break;
 800923e:	e089      	b.n	8009354 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00b      	beq.n	8009264 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	7c12      	ldrb	r2, [r2, #16]
 8009258:	f107 0108 	add.w	r1, r7, #8
 800925c:	4610      	mov	r0, r2
 800925e:	4798      	blx	r3
 8009260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009262:	e077      	b.n	8009354 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fab1 	bl	80097ce <USBD_CtlError>
            err++;
 800926c:	7afb      	ldrb	r3, [r7, #11]
 800926e:	3301      	adds	r3, #1
 8009270:	72fb      	strb	r3, [r7, #11]
          break;
 8009272:	e06f      	b.n	8009354 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00b      	beq.n	8009298 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	7c12      	ldrb	r2, [r2, #16]
 800928c:	f107 0108 	add.w	r1, r7, #8
 8009290:	4610      	mov	r0, r2
 8009292:	4798      	blx	r3
 8009294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009296:	e05d      	b.n	8009354 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fa97 	bl	80097ce <USBD_CtlError>
            err++;
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	3301      	adds	r3, #1
 80092a4:	72fb      	strb	r3, [r7, #11]
          break;
 80092a6:	e055      	b.n	8009354 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00b      	beq.n	80092cc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	7c12      	ldrb	r2, [r2, #16]
 80092c0:	f107 0108 	add.w	r1, r7, #8
 80092c4:	4610      	mov	r0, r2
 80092c6:	4798      	blx	r3
 80092c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ca:	e043      	b.n	8009354 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fa7d 	bl	80097ce <USBD_CtlError>
            err++;
 80092d4:	7afb      	ldrb	r3, [r7, #11]
 80092d6:	3301      	adds	r3, #1
 80092d8:	72fb      	strb	r3, [r7, #11]
          break;
 80092da:	e03b      	b.n	8009354 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00b      	beq.n	8009300 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	7c12      	ldrb	r2, [r2, #16]
 80092f4:	f107 0108 	add.w	r1, r7, #8
 80092f8:	4610      	mov	r0, r2
 80092fa:	4798      	blx	r3
 80092fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092fe:	e029      	b.n	8009354 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fa63 	bl	80097ce <USBD_CtlError>
            err++;
 8009308:	7afb      	ldrb	r3, [r7, #11]
 800930a:	3301      	adds	r3, #1
 800930c:	72fb      	strb	r3, [r7, #11]
          break;
 800930e:	e021      	b.n	8009354 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00b      	beq.n	8009334 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	7c12      	ldrb	r2, [r2, #16]
 8009328:	f107 0108 	add.w	r1, r7, #8
 800932c:	4610      	mov	r0, r2
 800932e:	4798      	blx	r3
 8009330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009332:	e00f      	b.n	8009354 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fa49 	bl	80097ce <USBD_CtlError>
            err++;
 800933c:	7afb      	ldrb	r3, [r7, #11]
 800933e:	3301      	adds	r3, #1
 8009340:	72fb      	strb	r3, [r7, #11]
          break;
 8009342:	e007      	b.n	8009354 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fa41 	bl	80097ce <USBD_CtlError>
          err++;
 800934c:	7afb      	ldrb	r3, [r7, #11]
 800934e:	3301      	adds	r3, #1
 8009350:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009352:	bf00      	nop
      }
      break;
 8009354:	e037      	b.n	80093c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	7c1b      	ldrb	r3, [r3, #16]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d109      	bne.n	8009372 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009366:	f107 0208 	add.w	r2, r7, #8
 800936a:	4610      	mov	r0, r2
 800936c:	4798      	blx	r3
 800936e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009370:	e029      	b.n	80093c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fa2a 	bl	80097ce <USBD_CtlError>
        err++;
 800937a:	7afb      	ldrb	r3, [r7, #11]
 800937c:	3301      	adds	r3, #1
 800937e:	72fb      	strb	r3, [r7, #11]
      break;
 8009380:	e021      	b.n	80093c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	7c1b      	ldrb	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10d      	bne.n	80093a6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009392:	f107 0208 	add.w	r2, r7, #8
 8009396:	4610      	mov	r0, r2
 8009398:	4798      	blx	r3
 800939a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	3301      	adds	r3, #1
 80093a0:	2207      	movs	r2, #7
 80093a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093a4:	e00f      	b.n	80093c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fa10 	bl	80097ce <USBD_CtlError>
        err++;
 80093ae:	7afb      	ldrb	r3, [r7, #11]
 80093b0:	3301      	adds	r3, #1
 80093b2:	72fb      	strb	r3, [r7, #11]
      break;
 80093b4:	e007      	b.n	80093c6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fa08 	bl	80097ce <USBD_CtlError>
      err++;
 80093be:	7afb      	ldrb	r3, [r7, #11]
 80093c0:	3301      	adds	r3, #1
 80093c2:	72fb      	strb	r3, [r7, #11]
      break;
 80093c4:	bf00      	nop
  }

  if (err != 0U)
 80093c6:	7afb      	ldrb	r3, [r7, #11]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d11e      	bne.n	800940a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	88db      	ldrh	r3, [r3, #6]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d016      	beq.n	8009402 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80093d4:	893b      	ldrh	r3, [r7, #8]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00e      	beq.n	80093f8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	88da      	ldrh	r2, [r3, #6]
 80093de:	893b      	ldrh	r3, [r7, #8]
 80093e0:	4293      	cmp	r3, r2
 80093e2:	bf28      	it	cs
 80093e4:	4613      	movcs	r3, r2
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80093ea:	893b      	ldrh	r3, [r7, #8]
 80093ec:	461a      	mov	r2, r3
 80093ee:	68f9      	ldr	r1, [r7, #12]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fa5d 	bl	80098b0 <USBD_CtlSendData>
 80093f6:	e009      	b.n	800940c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f9e7 	bl	80097ce <USBD_CtlError>
 8009400:	e004      	b.n	800940c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 faae 	bl	8009964 <USBD_CtlSendStatus>
 8009408:	e000      	b.n	800940c <USBD_GetDescriptor+0x320>
    return;
 800940a:	bf00      	nop
  }
}
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop

08009414 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	889b      	ldrh	r3, [r3, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d131      	bne.n	800948a <USBD_SetAddress+0x76>
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	88db      	ldrh	r3, [r3, #6]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d12d      	bne.n	800948a <USBD_SetAddress+0x76>
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	885b      	ldrh	r3, [r3, #2]
 8009432:	2b7f      	cmp	r3, #127	; 0x7f
 8009434:	d829      	bhi.n	800948a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	885b      	ldrh	r3, [r3, #2]
 800943a:	b2db      	uxtb	r3, r3
 800943c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009440:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b03      	cmp	r3, #3
 800944c:	d104      	bne.n	8009458 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 f9bc 	bl	80097ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009456:	e01d      	b.n	8009494 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	7bfa      	ldrb	r2, [r7, #15]
 800945c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 ff0f 	bl	800a288 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fa7a 	bl	8009964 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d004      	beq.n	8009480 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2202      	movs	r2, #2
 800947a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800947e:	e009      	b.n	8009494 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009488:	e004      	b.n	8009494 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f99e 	bl	80097ce <USBD_CtlError>
  }
}
 8009492:	bf00      	nop
 8009494:	bf00      	nop
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	885b      	ldrh	r3, [r3, #2]
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	4b4e      	ldr	r3, [pc, #312]	; (80095ec <USBD_SetConfig+0x150>)
 80094b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80094b4:	4b4d      	ldr	r3, [pc, #308]	; (80095ec <USBD_SetConfig+0x150>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d905      	bls.n	80094c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f985 	bl	80097ce <USBD_CtlError>
    return USBD_FAIL;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e08c      	b.n	80095e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d002      	beq.n	80094da <USBD_SetConfig+0x3e>
 80094d4:	2b03      	cmp	r3, #3
 80094d6:	d029      	beq.n	800952c <USBD_SetConfig+0x90>
 80094d8:	e075      	b.n	80095c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80094da:	4b44      	ldr	r3, [pc, #272]	; (80095ec <USBD_SetConfig+0x150>)
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d020      	beq.n	8009524 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80094e2:	4b42      	ldr	r3, [pc, #264]	; (80095ec <USBD_SetConfig+0x150>)
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	461a      	mov	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094ec:	4b3f      	ldr	r3, [pc, #252]	; (80095ec <USBD_SetConfig+0x150>)
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7fe ffbd 	bl	8008472 <USBD_SetClassConfig>
 80094f8:	4603      	mov	r3, r0
 80094fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d008      	beq.n	8009514 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f962 	bl	80097ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2202      	movs	r2, #2
 800950e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009512:	e065      	b.n	80095e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fa25 	bl	8009964 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2203      	movs	r2, #3
 800951e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009522:	e05d      	b.n	80095e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fa1d 	bl	8009964 <USBD_CtlSendStatus>
      break;
 800952a:	e059      	b.n	80095e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800952c:	4b2f      	ldr	r3, [pc, #188]	; (80095ec <USBD_SetConfig+0x150>)
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d112      	bne.n	800955a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2202      	movs	r2, #2
 8009538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800953c:	4b2b      	ldr	r3, [pc, #172]	; (80095ec <USBD_SetConfig+0x150>)
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	461a      	mov	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009546:	4b29      	ldr	r3, [pc, #164]	; (80095ec <USBD_SetConfig+0x150>)
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	4619      	mov	r1, r3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7fe ffac 	bl	80084aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fa06 	bl	8009964 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009558:	e042      	b.n	80095e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800955a:	4b24      	ldr	r3, [pc, #144]	; (80095ec <USBD_SetConfig+0x150>)
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	429a      	cmp	r2, r3
 8009566:	d02a      	beq.n	80095be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	b2db      	uxtb	r3, r3
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7fe ff9a 	bl	80084aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009576:	4b1d      	ldr	r3, [pc, #116]	; (80095ec <USBD_SetConfig+0x150>)
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009580:	4b1a      	ldr	r3, [pc, #104]	; (80095ec <USBD_SetConfig+0x150>)
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7fe ff73 	bl	8008472 <USBD_SetClassConfig>
 800958c:	4603      	mov	r3, r0
 800958e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009590:	7bfb      	ldrb	r3, [r7, #15]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00f      	beq.n	80095b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f918 	bl	80097ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7fe ff7f 	bl	80084aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2202      	movs	r2, #2
 80095b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095b4:	e014      	b.n	80095e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f9d4 	bl	8009964 <USBD_CtlSendStatus>
      break;
 80095bc:	e010      	b.n	80095e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f9d0 	bl	8009964 <USBD_CtlSendStatus>
      break;
 80095c4:	e00c      	b.n	80095e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f900 	bl	80097ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095ce:	4b07      	ldr	r3, [pc, #28]	; (80095ec <USBD_SetConfig+0x150>)
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7fe ff68 	bl	80084aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80095da:	2303      	movs	r3, #3
 80095dc:	73fb      	strb	r3, [r7, #15]
      break;
 80095de:	bf00      	nop
  }

  return ret;
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20001dc0 	.word	0x20001dc0

080095f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	88db      	ldrh	r3, [r3, #6]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d004      	beq.n	800960c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009602:	6839      	ldr	r1, [r7, #0]
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f8e2 	bl	80097ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800960a:	e023      	b.n	8009654 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b02      	cmp	r3, #2
 8009616:	dc02      	bgt.n	800961e <USBD_GetConfig+0x2e>
 8009618:	2b00      	cmp	r3, #0
 800961a:	dc03      	bgt.n	8009624 <USBD_GetConfig+0x34>
 800961c:	e015      	b.n	800964a <USBD_GetConfig+0x5a>
 800961e:	2b03      	cmp	r3, #3
 8009620:	d00b      	beq.n	800963a <USBD_GetConfig+0x4a>
 8009622:	e012      	b.n	800964a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	3308      	adds	r3, #8
 800962e:	2201      	movs	r2, #1
 8009630:	4619      	mov	r1, r3
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f93c 	bl	80098b0 <USBD_CtlSendData>
        break;
 8009638:	e00c      	b.n	8009654 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	3304      	adds	r3, #4
 800963e:	2201      	movs	r2, #1
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f934 	bl	80098b0 <USBD_CtlSendData>
        break;
 8009648:	e004      	b.n	8009654 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f8be 	bl	80097ce <USBD_CtlError>
        break;
 8009652:	bf00      	nop
}
 8009654:	bf00      	nop
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800966c:	b2db      	uxtb	r3, r3
 800966e:	3b01      	subs	r3, #1
 8009670:	2b02      	cmp	r3, #2
 8009672:	d81e      	bhi.n	80096b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	88db      	ldrh	r3, [r3, #6]
 8009678:	2b02      	cmp	r3, #2
 800967a:	d004      	beq.n	8009686 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f8a5 	bl	80097ce <USBD_CtlError>
        break;
 8009684:	e01a      	b.n	80096bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009692:	2b00      	cmp	r3, #0
 8009694:	d005      	beq.n	80096a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	f043 0202 	orr.w	r2, r3, #2
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	330c      	adds	r3, #12
 80096a6:	2202      	movs	r2, #2
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f900 	bl	80098b0 <USBD_CtlSendData>
      break;
 80096b0:	e004      	b.n	80096bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f88a 	bl	80097ce <USBD_CtlError>
      break;
 80096ba:	bf00      	nop
  }
}
 80096bc:	bf00      	nop
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	885b      	ldrh	r3, [r3, #2]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d107      	bne.n	80096e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f940 	bl	8009964 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80096e4:	e013      	b.n	800970e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	885b      	ldrh	r3, [r3, #2]
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d10b      	bne.n	8009706 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	889b      	ldrh	r3, [r3, #4]
 80096f2:	0a1b      	lsrs	r3, r3, #8
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f930 	bl	8009964 <USBD_CtlSendStatus>
}
 8009704:	e003      	b.n	800970e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f860 	bl	80097ce <USBD_CtlError>
}
 800970e:	bf00      	nop
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b082      	sub	sp, #8
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009726:	b2db      	uxtb	r3, r3
 8009728:	3b01      	subs	r3, #1
 800972a:	2b02      	cmp	r3, #2
 800972c:	d80b      	bhi.n	8009746 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	885b      	ldrh	r3, [r3, #2]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d10c      	bne.n	8009750 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f910 	bl	8009964 <USBD_CtlSendStatus>
      }
      break;
 8009744:	e004      	b.n	8009750 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f840 	bl	80097ce <USBD_CtlError>
      break;
 800974e:	e000      	b.n	8009752 <USBD_ClrFeature+0x3c>
      break;
 8009750:	bf00      	nop
  }
}
 8009752:	bf00      	nop
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b084      	sub	sp, #16
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	781a      	ldrb	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	3301      	adds	r3, #1
 8009774:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	781a      	ldrb	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3301      	adds	r3, #1
 8009782:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f7ff fa17 	bl	8008bb8 <SWAPBYTE>
 800978a:	4603      	mov	r3, r0
 800978c:	461a      	mov	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	3301      	adds	r3, #1
 8009796:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3301      	adds	r3, #1
 800979c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f7ff fa0a 	bl	8008bb8 <SWAPBYTE>
 80097a4:	4603      	mov	r3, r0
 80097a6:	461a      	mov	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	3301      	adds	r3, #1
 80097b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3301      	adds	r3, #1
 80097b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f7ff f9fd 	bl	8008bb8 <SWAPBYTE>
 80097be:	4603      	mov	r3, r0
 80097c0:	461a      	mov	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	80da      	strh	r2, [r3, #6]
}
 80097c6:	bf00      	nop
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b082      	sub	sp, #8
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80097d8:	2180      	movs	r1, #128	; 0x80
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fcea 	bl	800a1b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80097e0:	2100      	movs	r1, #0
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fce6 	bl	800a1b4 <USBD_LL_StallEP>
}
 80097e8:	bf00      	nop
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097fc:	2300      	movs	r3, #0
 80097fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d036      	beq.n	8009874 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800980a:	6938      	ldr	r0, [r7, #16]
 800980c:	f000 f836 	bl	800987c <USBD_GetLen>
 8009810:	4603      	mov	r3, r0
 8009812:	3301      	adds	r3, #1
 8009814:	b29b      	uxth	r3, r3
 8009816:	005b      	lsls	r3, r3, #1
 8009818:	b29a      	uxth	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	4413      	add	r3, r2
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	7812      	ldrb	r2, [r2, #0]
 8009828:	701a      	strb	r2, [r3, #0]
  idx++;
 800982a:	7dfb      	ldrb	r3, [r7, #23]
 800982c:	3301      	adds	r3, #1
 800982e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009830:	7dfb      	ldrb	r3, [r7, #23]
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	4413      	add	r3, r2
 8009836:	2203      	movs	r2, #3
 8009838:	701a      	strb	r2, [r3, #0]
  idx++;
 800983a:	7dfb      	ldrb	r3, [r7, #23]
 800983c:	3301      	adds	r3, #1
 800983e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009840:	e013      	b.n	800986a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009842:	7dfb      	ldrb	r3, [r7, #23]
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	4413      	add	r3, r2
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	7812      	ldrb	r2, [r2, #0]
 800984c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	3301      	adds	r3, #1
 8009852:	613b      	str	r3, [r7, #16]
    idx++;
 8009854:	7dfb      	ldrb	r3, [r7, #23]
 8009856:	3301      	adds	r3, #1
 8009858:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	4413      	add	r3, r2
 8009860:	2200      	movs	r2, #0
 8009862:	701a      	strb	r2, [r3, #0]
    idx++;
 8009864:	7dfb      	ldrb	r3, [r7, #23]
 8009866:	3301      	adds	r3, #1
 8009868:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1e7      	bne.n	8009842 <USBD_GetString+0x52>
 8009872:	e000      	b.n	8009876 <USBD_GetString+0x86>
    return;
 8009874:	bf00      	nop
  }
}
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009884:	2300      	movs	r3, #0
 8009886:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800988c:	e005      	b.n	800989a <USBD_GetLen+0x1e>
  {
    len++;
 800988e:	7bfb      	ldrb	r3, [r7, #15]
 8009890:	3301      	adds	r3, #1
 8009892:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	3301      	adds	r3, #1
 8009898:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1f5      	bne.n	800988e <USBD_GetLen+0x12>
  }

  return len;
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2202      	movs	r2, #2
 80098c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	2100      	movs	r1, #0
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 fcf5 	bl	800a2c6 <USBD_LL_Transmit>

  return USBD_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b084      	sub	sp, #16
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	60f8      	str	r0, [r7, #12]
 80098ee:	60b9      	str	r1, [r7, #8]
 80098f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	2100      	movs	r1, #0
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f000 fce4 	bl	800a2c6 <USBD_LL_Transmit>

  return USBD_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2203      	movs	r2, #3
 8009918:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	2100      	movs	r1, #0
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f000 fce8 	bl	800a308 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b084      	sub	sp, #16
 8009946:	af00      	add	r7, sp, #0
 8009948:	60f8      	str	r0, [r7, #12]
 800994a:	60b9      	str	r1, [r7, #8]
 800994c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	2100      	movs	r1, #0
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f000 fcd7 	bl	800a308 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2204      	movs	r2, #4
 8009970:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009974:	2300      	movs	r3, #0
 8009976:	2200      	movs	r2, #0
 8009978:	2100      	movs	r1, #0
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fca3 	bl	800a2c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2205      	movs	r2, #5
 8009996:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800999a:	2300      	movs	r3, #0
 800999c:	2200      	movs	r2, #0
 800999e:	2100      	movs	r1, #0
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fcb1 	bl	800a308 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80099b4:	2200      	movs	r2, #0
 80099b6:	4912      	ldr	r1, [pc, #72]	; (8009a00 <MX_USB_DEVICE_Init+0x50>)
 80099b8:	4812      	ldr	r0, [pc, #72]	; (8009a04 <MX_USB_DEVICE_Init+0x54>)
 80099ba:	f7fe fcdd 	bl	8008378 <USBD_Init>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80099c4:	f7f7 fd7e 	bl	80014c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80099c8:	490f      	ldr	r1, [pc, #60]	; (8009a08 <MX_USB_DEVICE_Init+0x58>)
 80099ca:	480e      	ldr	r0, [pc, #56]	; (8009a04 <MX_USB_DEVICE_Init+0x54>)
 80099cc:	f7fe fd04 	bl	80083d8 <USBD_RegisterClass>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80099d6:	f7f7 fd75 	bl	80014c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80099da:	490c      	ldr	r1, [pc, #48]	; (8009a0c <MX_USB_DEVICE_Init+0x5c>)
 80099dc:	4809      	ldr	r0, [pc, #36]	; (8009a04 <MX_USB_DEVICE_Init+0x54>)
 80099de:	f7fe fc3b 	bl	8008258 <USBD_CDC_RegisterInterface>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80099e8:	f7f7 fd6c 	bl	80014c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80099ec:	4805      	ldr	r0, [pc, #20]	; (8009a04 <MX_USB_DEVICE_Init+0x54>)
 80099ee:	f7fe fd29 	bl	8008444 <USBD_Start>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d001      	beq.n	80099fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099f8:	f7f7 fd64 	bl	80014c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099fc:	bf00      	nop
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	200000c4 	.word	0x200000c4
 8009a04:	20001dc4 	.word	0x20001dc4
 8009a08:	20000030 	.word	0x20000030
 8009a0c:	200000b0 	.word	0x200000b0

08009a10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a14:	2200      	movs	r2, #0
 8009a16:	4905      	ldr	r1, [pc, #20]	; (8009a2c <CDC_Init_FS+0x1c>)
 8009a18:	4805      	ldr	r0, [pc, #20]	; (8009a30 <CDC_Init_FS+0x20>)
 8009a1a:	f7fe fc37 	bl	800828c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a1e:	4905      	ldr	r1, [pc, #20]	; (8009a34 <CDC_Init_FS+0x24>)
 8009a20:	4803      	ldr	r0, [pc, #12]	; (8009a30 <CDC_Init_FS+0x20>)
 8009a22:	f7fe fc55 	bl	80082d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	200028a0 	.word	0x200028a0
 8009a30:	20001dc4 	.word	0x20001dc4
 8009a34:	200020a0 	.word	0x200020a0

08009a38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	6039      	str	r1, [r7, #0]
 8009a52:	71fb      	strb	r3, [r7, #7]
 8009a54:	4613      	mov	r3, r2
 8009a56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a58:	79fb      	ldrb	r3, [r7, #7]
 8009a5a:	2b23      	cmp	r3, #35	; 0x23
 8009a5c:	d84a      	bhi.n	8009af4 <CDC_Control_FS+0xac>
 8009a5e:	a201      	add	r2, pc, #4	; (adr r2, 8009a64 <CDC_Control_FS+0x1c>)
 8009a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a64:	08009af5 	.word	0x08009af5
 8009a68:	08009af5 	.word	0x08009af5
 8009a6c:	08009af5 	.word	0x08009af5
 8009a70:	08009af5 	.word	0x08009af5
 8009a74:	08009af5 	.word	0x08009af5
 8009a78:	08009af5 	.word	0x08009af5
 8009a7c:	08009af5 	.word	0x08009af5
 8009a80:	08009af5 	.word	0x08009af5
 8009a84:	08009af5 	.word	0x08009af5
 8009a88:	08009af5 	.word	0x08009af5
 8009a8c:	08009af5 	.word	0x08009af5
 8009a90:	08009af5 	.word	0x08009af5
 8009a94:	08009af5 	.word	0x08009af5
 8009a98:	08009af5 	.word	0x08009af5
 8009a9c:	08009af5 	.word	0x08009af5
 8009aa0:	08009af5 	.word	0x08009af5
 8009aa4:	08009af5 	.word	0x08009af5
 8009aa8:	08009af5 	.word	0x08009af5
 8009aac:	08009af5 	.word	0x08009af5
 8009ab0:	08009af5 	.word	0x08009af5
 8009ab4:	08009af5 	.word	0x08009af5
 8009ab8:	08009af5 	.word	0x08009af5
 8009abc:	08009af5 	.word	0x08009af5
 8009ac0:	08009af5 	.word	0x08009af5
 8009ac4:	08009af5 	.word	0x08009af5
 8009ac8:	08009af5 	.word	0x08009af5
 8009acc:	08009af5 	.word	0x08009af5
 8009ad0:	08009af5 	.word	0x08009af5
 8009ad4:	08009af5 	.word	0x08009af5
 8009ad8:	08009af5 	.word	0x08009af5
 8009adc:	08009af5 	.word	0x08009af5
 8009ae0:	08009af5 	.word	0x08009af5
 8009ae4:	08009af5 	.word	0x08009af5
 8009ae8:	08009af5 	.word	0x08009af5
 8009aec:	08009af5 	.word	0x08009af5
 8009af0:	08009af5 	.word	0x08009af5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009af4:	bf00      	nop
  }

  return (USBD_OK);
 8009af6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b0e:	6879      	ldr	r1, [r7, #4]
 8009b10:	4805      	ldr	r0, [pc, #20]	; (8009b28 <CDC_Receive_FS+0x24>)
 8009b12:	f7fe fbdd 	bl	80082d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b16:	4804      	ldr	r0, [pc, #16]	; (8009b28 <CDC_Receive_FS+0x24>)
 8009b18:	f7fe fbf8 	bl	800830c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	20001dc4 	.word	0x20001dc4

08009b2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	4613      	mov	r3, r2
 8009b38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009b3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	371c      	adds	r7, #28
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
	...

08009b50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	6039      	str	r1, [r7, #0]
 8009b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2212      	movs	r2, #18
 8009b60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b62:	4b03      	ldr	r3, [pc, #12]	; (8009b70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	200000e4 	.word	0x200000e4

08009b74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	6039      	str	r1, [r7, #0]
 8009b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	2204      	movs	r2, #4
 8009b84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b86:	4b03      	ldr	r3, [pc, #12]	; (8009b94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	20000104 	.word	0x20000104

08009b98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	6039      	str	r1, [r7, #0]
 8009ba2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ba4:	79fb      	ldrb	r3, [r7, #7]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d105      	bne.n	8009bb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	4907      	ldr	r1, [pc, #28]	; (8009bcc <USBD_FS_ProductStrDescriptor+0x34>)
 8009bae:	4808      	ldr	r0, [pc, #32]	; (8009bd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bb0:	f7ff fe1e 	bl	80097f0 <USBD_GetString>
 8009bb4:	e004      	b.n	8009bc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	4904      	ldr	r1, [pc, #16]	; (8009bcc <USBD_FS_ProductStrDescriptor+0x34>)
 8009bba:	4805      	ldr	r0, [pc, #20]	; (8009bd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bbc:	f7ff fe18 	bl	80097f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bc0:	4b02      	ldr	r3, [pc, #8]	; (8009bcc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	200030a0 	.word	0x200030a0
 8009bd0:	0800a73c 	.word	0x0800a73c

08009bd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	6039      	str	r1, [r7, #0]
 8009bde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	4904      	ldr	r1, [pc, #16]	; (8009bf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009be4:	4804      	ldr	r0, [pc, #16]	; (8009bf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009be6:	f7ff fe03 	bl	80097f0 <USBD_GetString>
  return USBD_StrDesc;
 8009bea:	4b02      	ldr	r3, [pc, #8]	; (8009bf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	200030a0 	.word	0x200030a0
 8009bf8:	0800a754 	.word	0x0800a754

08009bfc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	4603      	mov	r3, r0
 8009c04:	6039      	str	r1, [r7, #0]
 8009c06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	221a      	movs	r2, #26
 8009c0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c0e:	f000 f855 	bl	8009cbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c12:	4b02      	ldr	r3, [pc, #8]	; (8009c1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	20000108 	.word	0x20000108

08009c20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	4603      	mov	r3, r0
 8009c28:	6039      	str	r1, [r7, #0]
 8009c2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d105      	bne.n	8009c3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	4907      	ldr	r1, [pc, #28]	; (8009c54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c36:	4808      	ldr	r0, [pc, #32]	; (8009c58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c38:	f7ff fdda 	bl	80097f0 <USBD_GetString>
 8009c3c:	e004      	b.n	8009c48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	4904      	ldr	r1, [pc, #16]	; (8009c54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c42:	4805      	ldr	r0, [pc, #20]	; (8009c58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c44:	f7ff fdd4 	bl	80097f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c48:	4b02      	ldr	r3, [pc, #8]	; (8009c54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	200030a0 	.word	0x200030a0
 8009c58:	0800a768 	.word	0x0800a768

08009c5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	4603      	mov	r3, r0
 8009c64:	6039      	str	r1, [r7, #0]
 8009c66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c68:	79fb      	ldrb	r3, [r7, #7]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d105      	bne.n	8009c7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	4907      	ldr	r1, [pc, #28]	; (8009c90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c72:	4808      	ldr	r0, [pc, #32]	; (8009c94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c74:	f7ff fdbc 	bl	80097f0 <USBD_GetString>
 8009c78:	e004      	b.n	8009c84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	4904      	ldr	r1, [pc, #16]	; (8009c90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c7e:	4805      	ldr	r0, [pc, #20]	; (8009c94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c80:	f7ff fdb6 	bl	80097f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c84:	4b02      	ldr	r3, [pc, #8]	; (8009c90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	200030a0 	.word	0x200030a0
 8009c94:	0800a774 	.word	0x0800a774

08009c98 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	6039      	str	r1, [r7, #0]
 8009ca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	220c      	movs	r2, #12
 8009ca8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009caa:	4b03      	ldr	r3, [pc, #12]	; (8009cb8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr
 8009cb8:	200000f8 	.word	0x200000f8

08009cbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cc2:	4b0f      	ldr	r3, [pc, #60]	; (8009d00 <Get_SerialNum+0x44>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009cc8:	4b0e      	ldr	r3, [pc, #56]	; (8009d04 <Get_SerialNum+0x48>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009cce:	4b0e      	ldr	r3, [pc, #56]	; (8009d08 <Get_SerialNum+0x4c>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4413      	add	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d009      	beq.n	8009cf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ce2:	2208      	movs	r2, #8
 8009ce4:	4909      	ldr	r1, [pc, #36]	; (8009d0c <Get_SerialNum+0x50>)
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f000 f814 	bl	8009d14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009cec:	2204      	movs	r2, #4
 8009cee:	4908      	ldr	r1, [pc, #32]	; (8009d10 <Get_SerialNum+0x54>)
 8009cf0:	68b8      	ldr	r0, [r7, #8]
 8009cf2:	f000 f80f 	bl	8009d14 <IntToUnicode>
  }
}
 8009cf6:	bf00      	nop
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	1ff0f420 	.word	0x1ff0f420
 8009d04:	1ff0f424 	.word	0x1ff0f424
 8009d08:	1ff0f428 	.word	0x1ff0f428
 8009d0c:	2000010a 	.word	0x2000010a
 8009d10:	2000011a 	.word	0x2000011a

08009d14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	4613      	mov	r3, r2
 8009d20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d26:	2300      	movs	r3, #0
 8009d28:	75fb      	strb	r3, [r7, #23]
 8009d2a:	e027      	b.n	8009d7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	0f1b      	lsrs	r3, r3, #28
 8009d30:	2b09      	cmp	r3, #9
 8009d32:	d80b      	bhi.n	8009d4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	0f1b      	lsrs	r3, r3, #28
 8009d38:	b2da      	uxtb	r2, r3
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
 8009d3c:	005b      	lsls	r3, r3, #1
 8009d3e:	4619      	mov	r1, r3
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	440b      	add	r3, r1
 8009d44:	3230      	adds	r2, #48	; 0x30
 8009d46:	b2d2      	uxtb	r2, r2
 8009d48:	701a      	strb	r2, [r3, #0]
 8009d4a:	e00a      	b.n	8009d62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	0f1b      	lsrs	r3, r3, #28
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	7dfb      	ldrb	r3, [r7, #23]
 8009d54:	005b      	lsls	r3, r3, #1
 8009d56:	4619      	mov	r1, r3
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	440b      	add	r3, r1
 8009d5c:	3237      	adds	r2, #55	; 0x37
 8009d5e:	b2d2      	uxtb	r2, r2
 8009d60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	011b      	lsls	r3, r3, #4
 8009d66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d68:	7dfb      	ldrb	r3, [r7, #23]
 8009d6a:	005b      	lsls	r3, r3, #1
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	4413      	add	r3, r2
 8009d72:	2200      	movs	r2, #0
 8009d74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d76:	7dfb      	ldrb	r3, [r7, #23]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	75fb      	strb	r3, [r7, #23]
 8009d7c:	7dfa      	ldrb	r2, [r7, #23]
 8009d7e:	79fb      	ldrb	r3, [r7, #7]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d3d3      	bcc.n	8009d2c <IntToUnicode+0x18>
  }
}
 8009d84:	bf00      	nop
 8009d86:	bf00      	nop
 8009d88:	371c      	adds	r7, #28
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
	...

08009d94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b0ac      	sub	sp, #176	; 0xb0
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009da0:	2200      	movs	r2, #0
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	605a      	str	r2, [r3, #4]
 8009da6:	609a      	str	r2, [r3, #8]
 8009da8:	60da      	str	r2, [r3, #12]
 8009daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009dac:	f107 0318 	add.w	r3, r7, #24
 8009db0:	2284      	movs	r2, #132	; 0x84
 8009db2:	2100      	movs	r1, #0
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 fc17 	bl	800a5e8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009dc2:	d151      	bne.n	8009e68 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009dc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009dc8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009dd0:	f107 0318 	add.w	r3, r7, #24
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fb f9a1 	bl	800511c <HAL_RCCEx_PeriphCLKConfig>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d001      	beq.n	8009de4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8009de0:	f7f7 fb70 	bl	80014c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009de4:	4b22      	ldr	r3, [pc, #136]	; (8009e70 <HAL_PCD_MspInit+0xdc>)
 8009de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de8:	4a21      	ldr	r2, [pc, #132]	; (8009e70 <HAL_PCD_MspInit+0xdc>)
 8009dea:	f043 0301 	orr.w	r3, r3, #1
 8009dee:	6313      	str	r3, [r2, #48]	; 0x30
 8009df0:	4b1f      	ldr	r3, [pc, #124]	; (8009e70 <HAL_PCD_MspInit+0xdc>)
 8009df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	617b      	str	r3, [r7, #20]
 8009dfa:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009dfc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009e00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e04:	2302      	movs	r3, #2
 8009e06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e10:	2303      	movs	r3, #3
 8009e12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e16:	230a      	movs	r3, #10
 8009e18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009e20:	4619      	mov	r1, r3
 8009e22:	4814      	ldr	r0, [pc, #80]	; (8009e74 <HAL_PCD_MspInit+0xe0>)
 8009e24:	f7f8 ff08 	bl	8002c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e28:	4b11      	ldr	r3, [pc, #68]	; (8009e70 <HAL_PCD_MspInit+0xdc>)
 8009e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2c:	4a10      	ldr	r2, [pc, #64]	; (8009e70 <HAL_PCD_MspInit+0xdc>)
 8009e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e32:	6353      	str	r3, [r2, #52]	; 0x34
 8009e34:	4b0e      	ldr	r3, [pc, #56]	; (8009e70 <HAL_PCD_MspInit+0xdc>)
 8009e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e3c:	613b      	str	r3, [r7, #16]
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	4b0b      	ldr	r3, [pc, #44]	; (8009e70 <HAL_PCD_MspInit+0xdc>)
 8009e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e44:	4a0a      	ldr	r2, [pc, #40]	; (8009e70 <HAL_PCD_MspInit+0xdc>)
 8009e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e4a:	6453      	str	r3, [r2, #68]	; 0x44
 8009e4c:	4b08      	ldr	r3, [pc, #32]	; (8009e70 <HAL_PCD_MspInit+0xdc>)
 8009e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e54:	60fb      	str	r3, [r7, #12]
 8009e56:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009e58:	2200      	movs	r2, #0
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	2043      	movs	r0, #67	; 0x43
 8009e5e:	f7f8 feb4 	bl	8002bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009e62:	2043      	movs	r0, #67	; 0x43
 8009e64:	f7f8 fecd 	bl	8002c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009e68:	bf00      	nop
 8009e6a:	37b0      	adds	r7, #176	; 0xb0
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	40023800 	.word	0x40023800
 8009e74:	40020000 	.word	0x40020000

08009e78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4610      	mov	r0, r2
 8009e90:	f7fe fb25 	bl	80084de <USBD_LL_SetupStage>
}
 8009e94:	bf00      	nop
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8009eae:	78fa      	ldrb	r2, [r7, #3]
 8009eb0:	6879      	ldr	r1, [r7, #4]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	00db      	lsls	r3, r3, #3
 8009eb6:	4413      	add	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	440b      	add	r3, r1
 8009ebc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	78fb      	ldrb	r3, [r7, #3]
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	f7fe fb5f 	bl	8008588 <USBD_LL_DataOutStage>
}
 8009eca:	bf00      	nop
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	460b      	mov	r3, r1
 8009edc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8009ee4:	78fa      	ldrb	r2, [r7, #3]
 8009ee6:	6879      	ldr	r1, [r7, #4]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	00db      	lsls	r3, r3, #3
 8009eec:	4413      	add	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	440b      	add	r3, r1
 8009ef2:	334c      	adds	r3, #76	; 0x4c
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	78fb      	ldrb	r3, [r7, #3]
 8009ef8:	4619      	mov	r1, r3
 8009efa:	f7fe fbf8 	bl	80086ee <USBD_LL_DataInStage>
}
 8009efe:	bf00      	nop
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7fe fd2c 	bl	8008972 <USBD_LL_SOF>
}
 8009f1a:	bf00      	nop
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b084      	sub	sp, #16
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d102      	bne.n	8009f3c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009f36:	2300      	movs	r3, #0
 8009f38:	73fb      	strb	r3, [r7, #15]
 8009f3a:	e008      	b.n	8009f4e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d102      	bne.n	8009f4a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009f44:	2301      	movs	r3, #1
 8009f46:	73fb      	strb	r3, [r7, #15]
 8009f48:	e001      	b.n	8009f4e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009f4a:	f7f7 fabb 	bl	80014c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009f54:	7bfa      	ldrb	r2, [r7, #15]
 8009f56:	4611      	mov	r1, r2
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fe fccc 	bl	80088f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fe fc74 	bl	8008852 <USBD_LL_Reset>
}
 8009f6a:	bf00      	nop
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
	...

08009f74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe fcc7 	bl	8008916 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	6812      	ldr	r2, [r2, #0]
 8009f96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f9a:	f043 0301 	orr.w	r3, r3, #1
 8009f9e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d005      	beq.n	8009fb4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009fa8:	4b04      	ldr	r3, [pc, #16]	; (8009fbc <HAL_PCD_SuspendCallback+0x48>)
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	4a03      	ldr	r2, [pc, #12]	; (8009fbc <HAL_PCD_SuspendCallback+0x48>)
 8009fae:	f043 0306 	orr.w	r3, r3, #6
 8009fb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	e000ed00 	.word	0xe000ed00

08009fc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fe fcb7 	bl	8008942 <USBD_LL_Resume>
}
 8009fd4:	bf00      	nop
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009fee:	78fa      	ldrb	r2, [r7, #3]
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fe fd0f 	bl	8008a16 <USBD_LL_IsoOUTIncomplete>
}
 8009ff8:	bf00      	nop
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	460b      	mov	r3, r1
 800a00a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a012:	78fa      	ldrb	r2, [r7, #3]
 800a014:	4611      	mov	r1, r2
 800a016:	4618      	mov	r0, r3
 800a018:	f7fe fccb 	bl	80089b2 <USBD_LL_IsoINIncomplete>
}
 800a01c:	bf00      	nop
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe fd21 	bl	8008a7a <USBD_LL_DevConnected>
}
 800a038:	bf00      	nop
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fe fd1e 	bl	8008a90 <USBD_LL_DevDisconnected>
}
 800a054:	bf00      	nop
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d13c      	bne.n	800a0e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a06c:	4a20      	ldr	r2, [pc, #128]	; (800a0f0 <USBD_LL_Init+0x94>)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a1e      	ldr	r2, [pc, #120]	; (800a0f0 <USBD_LL_Init+0x94>)
 800a078:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a07c:	4b1c      	ldr	r3, [pc, #112]	; (800a0f0 <USBD_LL_Init+0x94>)
 800a07e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a082:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a084:	4b1a      	ldr	r3, [pc, #104]	; (800a0f0 <USBD_LL_Init+0x94>)
 800a086:	2206      	movs	r2, #6
 800a088:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a08a:	4b19      	ldr	r3, [pc, #100]	; (800a0f0 <USBD_LL_Init+0x94>)
 800a08c:	2202      	movs	r2, #2
 800a08e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a090:	4b17      	ldr	r3, [pc, #92]	; (800a0f0 <USBD_LL_Init+0x94>)
 800a092:	2200      	movs	r2, #0
 800a094:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a096:	4b16      	ldr	r3, [pc, #88]	; (800a0f0 <USBD_LL_Init+0x94>)
 800a098:	2202      	movs	r2, #2
 800a09a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a09c:	4b14      	ldr	r3, [pc, #80]	; (800a0f0 <USBD_LL_Init+0x94>)
 800a09e:	2200      	movs	r2, #0
 800a0a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a0a2:	4b13      	ldr	r3, [pc, #76]	; (800a0f0 <USBD_LL_Init+0x94>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a0a8:	4b11      	ldr	r3, [pc, #68]	; (800a0f0 <USBD_LL_Init+0x94>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a0ae:	4b10      	ldr	r3, [pc, #64]	; (800a0f0 <USBD_LL_Init+0x94>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a0b4:	4b0e      	ldr	r3, [pc, #56]	; (800a0f0 <USBD_LL_Init+0x94>)
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a0ba:	480d      	ldr	r0, [pc, #52]	; (800a0f0 <USBD_LL_Init+0x94>)
 800a0bc:	f7f9 f8c3 	bl	8003246 <HAL_PCD_Init>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a0c6:	f7f7 f9fd 	bl	80014c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a0ca:	2180      	movs	r1, #128	; 0x80
 800a0cc:	4808      	ldr	r0, [pc, #32]	; (800a0f0 <USBD_LL_Init+0x94>)
 800a0ce:	f7fa fb3e 	bl	800474e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a0d2:	2240      	movs	r2, #64	; 0x40
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	4806      	ldr	r0, [pc, #24]	; (800a0f0 <USBD_LL_Init+0x94>)
 800a0d8:	f7fa faf2 	bl	80046c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a0dc:	2280      	movs	r2, #128	; 0x80
 800a0de:	2101      	movs	r1, #1
 800a0e0:	4803      	ldr	r0, [pc, #12]	; (800a0f0 <USBD_LL_Init+0x94>)
 800a0e2:	f7fa faed 	bl	80046c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	200032a0 	.word	0x200032a0

0800a0f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7f9 f9bf 	bl	800348e <HAL_PCD_Start>
 800a110:	4603      	mov	r3, r0
 800a112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a114:	7bfb      	ldrb	r3, [r7, #15]
 800a116:	4618      	mov	r0, r3
 800a118:	f000 f97e 	bl	800a418 <USBD_Get_USB_Status>
 800a11c:	4603      	mov	r3, r0
 800a11e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a120:	7bbb      	ldrb	r3, [r7, #14]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	4608      	mov	r0, r1
 800a134:	4611      	mov	r1, r2
 800a136:	461a      	mov	r2, r3
 800a138:	4603      	mov	r3, r0
 800a13a:	70fb      	strb	r3, [r7, #3]
 800a13c:	460b      	mov	r3, r1
 800a13e:	70bb      	strb	r3, [r7, #2]
 800a140:	4613      	mov	r3, r2
 800a142:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a152:	78bb      	ldrb	r3, [r7, #2]
 800a154:	883a      	ldrh	r2, [r7, #0]
 800a156:	78f9      	ldrb	r1, [r7, #3]
 800a158:	f7f9 feac 	bl	8003eb4 <HAL_PCD_EP_Open>
 800a15c:	4603      	mov	r3, r0
 800a15e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a160:	7bfb      	ldrb	r3, [r7, #15]
 800a162:	4618      	mov	r0, r3
 800a164:	f000 f958 	bl	800a418 <USBD_Get_USB_Status>
 800a168:	4603      	mov	r3, r0
 800a16a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a16c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b084      	sub	sp, #16
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	460b      	mov	r3, r1
 800a180:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a182:	2300      	movs	r3, #0
 800a184:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a186:	2300      	movs	r3, #0
 800a188:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a190:	78fa      	ldrb	r2, [r7, #3]
 800a192:	4611      	mov	r1, r2
 800a194:	4618      	mov	r0, r3
 800a196:	f7f9 fef5 	bl	8003f84 <HAL_PCD_EP_Close>
 800a19a:	4603      	mov	r3, r0
 800a19c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a19e:	7bfb      	ldrb	r3, [r7, #15]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 f939 	bl	800a418 <USBD_Get_USB_Status>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	460b      	mov	r3, r1
 800a1be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1ce:	78fa      	ldrb	r2, [r7, #3]
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7f9 ffcd 	bl	8004172 <HAL_PCD_EP_SetStall>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 f91a 	bl	800a418 <USBD_Get_USB_Status>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a20c:	78fa      	ldrb	r2, [r7, #3]
 800a20e:	4611      	mov	r1, r2
 800a210:	4618      	mov	r0, r3
 800a212:	f7fa f812 	bl	800423a <HAL_PCD_EP_ClrStall>
 800a216:	4603      	mov	r3, r0
 800a218:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a21a:	7bfb      	ldrb	r3, [r7, #15]
 800a21c:	4618      	mov	r0, r3
 800a21e:	f000 f8fb 	bl	800a418 <USBD_Get_USB_Status>
 800a222:	4603      	mov	r3, r0
 800a224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a226:	7bbb      	ldrb	r3, [r7, #14]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	460b      	mov	r3, r1
 800a23a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a242:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	da0b      	bge.n	800a264 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a24c:	78fb      	ldrb	r3, [r7, #3]
 800a24e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a252:	68f9      	ldr	r1, [r7, #12]
 800a254:	4613      	mov	r3, r2
 800a256:	00db      	lsls	r3, r3, #3
 800a258:	4413      	add	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	440b      	add	r3, r1
 800a25e:	333e      	adds	r3, #62	; 0x3e
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	e00b      	b.n	800a27c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a264:	78fb      	ldrb	r3, [r7, #3]
 800a266:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a26a:	68f9      	ldr	r1, [r7, #12]
 800a26c:	4613      	mov	r3, r2
 800a26e:	00db      	lsls	r3, r3, #3
 800a270:	4413      	add	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	440b      	add	r3, r1
 800a276:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a27a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3714      	adds	r7, #20
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	460b      	mov	r3, r1
 800a292:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a294:	2300      	movs	r3, #0
 800a296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2a2:	78fa      	ldrb	r2, [r7, #3]
 800a2a4:	4611      	mov	r1, r2
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7f9 fddf 	bl	8003e6a <HAL_PCD_SetAddress>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 f8b0 	bl	800a418 <USBD_Get_USB_Status>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b086      	sub	sp, #24
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	60f8      	str	r0, [r7, #12]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	603b      	str	r3, [r7, #0]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a2e4:	7af9      	ldrb	r1, [r7, #11]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	f7f9 fef8 	bl	80040de <HAL_PCD_EP_Transmit>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2f2:	7dfb      	ldrb	r3, [r7, #23]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 f88f 	bl	800a418 <USBD_Get_USB_Status>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3718      	adds	r7, #24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	607a      	str	r2, [r7, #4]
 800a312:	603b      	str	r3, [r7, #0]
 800a314:	460b      	mov	r3, r1
 800a316:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a326:	7af9      	ldrb	r1, [r7, #11]
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	f7f9 fe74 	bl	8004018 <HAL_PCD_EP_Receive>
 800a330:	4603      	mov	r3, r0
 800a332:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a334:	7dfb      	ldrb	r3, [r7, #23]
 800a336:	4618      	mov	r0, r3
 800a338:	f000 f86e 	bl	800a418 <USBD_Get_USB_Status>
 800a33c:	4603      	mov	r3, r0
 800a33e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a340:	7dbb      	ldrb	r3, [r7, #22]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3718      	adds	r7, #24
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b082      	sub	sp, #8
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	460b      	mov	r3, r1
 800a354:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a35c:	78fa      	ldrb	r2, [r7, #3]
 800a35e:	4611      	mov	r1, r2
 800a360:	4618      	mov	r0, r3
 800a362:	f7f9 fea4 	bl	80040ae <HAL_PCD_EP_GetRxCount>
 800a366:	4603      	mov	r3, r0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	460b      	mov	r3, r1
 800a37a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a37c:	78fb      	ldrb	r3, [r7, #3]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d002      	beq.n	800a388 <HAL_PCDEx_LPM_Callback+0x18>
 800a382:	2b01      	cmp	r3, #1
 800a384:	d01f      	beq.n	800a3c6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a386:	e03b      	b.n	800a400 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a1b      	ldr	r3, [r3, #32]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d007      	beq.n	800a3a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a390:	f000 f83c 	bl	800a40c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a394:	4b1c      	ldr	r3, [pc, #112]	; (800a408 <HAL_PCDEx_LPM_Callback+0x98>)
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	4a1b      	ldr	r2, [pc, #108]	; (800a408 <HAL_PCDEx_LPM_Callback+0x98>)
 800a39a:	f023 0306 	bic.w	r3, r3, #6
 800a39e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	6812      	ldr	r2, [r2, #0]
 800a3ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3b2:	f023 0301 	bic.w	r3, r3, #1
 800a3b6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fe fabf 	bl	8008942 <USBD_LL_Resume>
    break;
 800a3c4:	e01c      	b.n	800a400 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	6812      	ldr	r2, [r2, #0]
 800a3d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3d8:	f043 0301 	orr.w	r3, r3, #1
 800a3dc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fe fa96 	bl	8008916 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d005      	beq.n	800a3fe <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3f2:	4b05      	ldr	r3, [pc, #20]	; (800a408 <HAL_PCDEx_LPM_Callback+0x98>)
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	4a04      	ldr	r2, [pc, #16]	; (800a408 <HAL_PCDEx_LPM_Callback+0x98>)
 800a3f8:	f043 0306 	orr.w	r3, r3, #6
 800a3fc:	6113      	str	r3, [r2, #16]
    break;
 800a3fe:	bf00      	nop
}
 800a400:	bf00      	nop
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	e000ed00 	.word	0xe000ed00

0800a40c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a410:	f7f6 ffdc 	bl	80013cc <SystemClock_Config>
}
 800a414:	bf00      	nop
 800a416:	bd80      	pop	{r7, pc}

0800a418 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	4603      	mov	r3, r0
 800a420:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a426:	79fb      	ldrb	r3, [r7, #7]
 800a428:	2b03      	cmp	r3, #3
 800a42a:	d817      	bhi.n	800a45c <USBD_Get_USB_Status+0x44>
 800a42c:	a201      	add	r2, pc, #4	; (adr r2, 800a434 <USBD_Get_USB_Status+0x1c>)
 800a42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a432:	bf00      	nop
 800a434:	0800a445 	.word	0x0800a445
 800a438:	0800a44b 	.word	0x0800a44b
 800a43c:	0800a451 	.word	0x0800a451
 800a440:	0800a457 	.word	0x0800a457
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a444:	2300      	movs	r3, #0
 800a446:	73fb      	strb	r3, [r7, #15]
    break;
 800a448:	e00b      	b.n	800a462 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a44a:	2303      	movs	r3, #3
 800a44c:	73fb      	strb	r3, [r7, #15]
    break;
 800a44e:	e008      	b.n	800a462 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a450:	2301      	movs	r3, #1
 800a452:	73fb      	strb	r3, [r7, #15]
    break;
 800a454:	e005      	b.n	800a462 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a456:	2303      	movs	r3, #3
 800a458:	73fb      	strb	r3, [r7, #15]
    break;
 800a45a:	e002      	b.n	800a462 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a45c:	2303      	movs	r3, #3
 800a45e:	73fb      	strb	r3, [r7, #15]
    break;
 800a460:	bf00      	nop
  }
  return usb_status;
 800a462:	7bfb      	ldrb	r3, [r7, #15]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <malloc>:
 800a470:	4b02      	ldr	r3, [pc, #8]	; (800a47c <malloc+0xc>)
 800a472:	4601      	mov	r1, r0
 800a474:	6818      	ldr	r0, [r3, #0]
 800a476:	f000 b82b 	b.w	800a4d0 <_malloc_r>
 800a47a:	bf00      	nop
 800a47c:	20000170 	.word	0x20000170

0800a480 <free>:
 800a480:	4b02      	ldr	r3, [pc, #8]	; (800a48c <free+0xc>)
 800a482:	4601      	mov	r1, r0
 800a484:	6818      	ldr	r0, [r3, #0]
 800a486:	f000 b901 	b.w	800a68c <_free_r>
 800a48a:	bf00      	nop
 800a48c:	20000170 	.word	0x20000170

0800a490 <sbrk_aligned>:
 800a490:	b570      	push	{r4, r5, r6, lr}
 800a492:	4e0e      	ldr	r6, [pc, #56]	; (800a4cc <sbrk_aligned+0x3c>)
 800a494:	460c      	mov	r4, r1
 800a496:	6831      	ldr	r1, [r6, #0]
 800a498:	4605      	mov	r5, r0
 800a49a:	b911      	cbnz	r1, 800a4a2 <sbrk_aligned+0x12>
 800a49c:	f000 f8ac 	bl	800a5f8 <_sbrk_r>
 800a4a0:	6030      	str	r0, [r6, #0]
 800a4a2:	4621      	mov	r1, r4
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	f000 f8a7 	bl	800a5f8 <_sbrk_r>
 800a4aa:	1c43      	adds	r3, r0, #1
 800a4ac:	d00a      	beq.n	800a4c4 <sbrk_aligned+0x34>
 800a4ae:	1cc4      	adds	r4, r0, #3
 800a4b0:	f024 0403 	bic.w	r4, r4, #3
 800a4b4:	42a0      	cmp	r0, r4
 800a4b6:	d007      	beq.n	800a4c8 <sbrk_aligned+0x38>
 800a4b8:	1a21      	subs	r1, r4, r0
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	f000 f89c 	bl	800a5f8 <_sbrk_r>
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	d101      	bne.n	800a4c8 <sbrk_aligned+0x38>
 800a4c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	bd70      	pop	{r4, r5, r6, pc}
 800a4cc:	200037ac 	.word	0x200037ac

0800a4d0 <_malloc_r>:
 800a4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4d4:	1ccd      	adds	r5, r1, #3
 800a4d6:	f025 0503 	bic.w	r5, r5, #3
 800a4da:	3508      	adds	r5, #8
 800a4dc:	2d0c      	cmp	r5, #12
 800a4de:	bf38      	it	cc
 800a4e0:	250c      	movcc	r5, #12
 800a4e2:	2d00      	cmp	r5, #0
 800a4e4:	4607      	mov	r7, r0
 800a4e6:	db01      	blt.n	800a4ec <_malloc_r+0x1c>
 800a4e8:	42a9      	cmp	r1, r5
 800a4ea:	d905      	bls.n	800a4f8 <_malloc_r+0x28>
 800a4ec:	230c      	movs	r3, #12
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	2600      	movs	r6, #0
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a5cc <_malloc_r+0xfc>
 800a4fc:	f000 f868 	bl	800a5d0 <__malloc_lock>
 800a500:	f8d8 3000 	ldr.w	r3, [r8]
 800a504:	461c      	mov	r4, r3
 800a506:	bb5c      	cbnz	r4, 800a560 <_malloc_r+0x90>
 800a508:	4629      	mov	r1, r5
 800a50a:	4638      	mov	r0, r7
 800a50c:	f7ff ffc0 	bl	800a490 <sbrk_aligned>
 800a510:	1c43      	adds	r3, r0, #1
 800a512:	4604      	mov	r4, r0
 800a514:	d155      	bne.n	800a5c2 <_malloc_r+0xf2>
 800a516:	f8d8 4000 	ldr.w	r4, [r8]
 800a51a:	4626      	mov	r6, r4
 800a51c:	2e00      	cmp	r6, #0
 800a51e:	d145      	bne.n	800a5ac <_malloc_r+0xdc>
 800a520:	2c00      	cmp	r4, #0
 800a522:	d048      	beq.n	800a5b6 <_malloc_r+0xe6>
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	4631      	mov	r1, r6
 800a528:	4638      	mov	r0, r7
 800a52a:	eb04 0903 	add.w	r9, r4, r3
 800a52e:	f000 f863 	bl	800a5f8 <_sbrk_r>
 800a532:	4581      	cmp	r9, r0
 800a534:	d13f      	bne.n	800a5b6 <_malloc_r+0xe6>
 800a536:	6821      	ldr	r1, [r4, #0]
 800a538:	1a6d      	subs	r5, r5, r1
 800a53a:	4629      	mov	r1, r5
 800a53c:	4638      	mov	r0, r7
 800a53e:	f7ff ffa7 	bl	800a490 <sbrk_aligned>
 800a542:	3001      	adds	r0, #1
 800a544:	d037      	beq.n	800a5b6 <_malloc_r+0xe6>
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	442b      	add	r3, r5
 800a54a:	6023      	str	r3, [r4, #0]
 800a54c:	f8d8 3000 	ldr.w	r3, [r8]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d038      	beq.n	800a5c6 <_malloc_r+0xf6>
 800a554:	685a      	ldr	r2, [r3, #4]
 800a556:	42a2      	cmp	r2, r4
 800a558:	d12b      	bne.n	800a5b2 <_malloc_r+0xe2>
 800a55a:	2200      	movs	r2, #0
 800a55c:	605a      	str	r2, [r3, #4]
 800a55e:	e00f      	b.n	800a580 <_malloc_r+0xb0>
 800a560:	6822      	ldr	r2, [r4, #0]
 800a562:	1b52      	subs	r2, r2, r5
 800a564:	d41f      	bmi.n	800a5a6 <_malloc_r+0xd6>
 800a566:	2a0b      	cmp	r2, #11
 800a568:	d917      	bls.n	800a59a <_malloc_r+0xca>
 800a56a:	1961      	adds	r1, r4, r5
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	6025      	str	r5, [r4, #0]
 800a570:	bf18      	it	ne
 800a572:	6059      	strne	r1, [r3, #4]
 800a574:	6863      	ldr	r3, [r4, #4]
 800a576:	bf08      	it	eq
 800a578:	f8c8 1000 	streq.w	r1, [r8]
 800a57c:	5162      	str	r2, [r4, r5]
 800a57e:	604b      	str	r3, [r1, #4]
 800a580:	4638      	mov	r0, r7
 800a582:	f104 060b 	add.w	r6, r4, #11
 800a586:	f000 f829 	bl	800a5dc <__malloc_unlock>
 800a58a:	f026 0607 	bic.w	r6, r6, #7
 800a58e:	1d23      	adds	r3, r4, #4
 800a590:	1af2      	subs	r2, r6, r3
 800a592:	d0ae      	beq.n	800a4f2 <_malloc_r+0x22>
 800a594:	1b9b      	subs	r3, r3, r6
 800a596:	50a3      	str	r3, [r4, r2]
 800a598:	e7ab      	b.n	800a4f2 <_malloc_r+0x22>
 800a59a:	42a3      	cmp	r3, r4
 800a59c:	6862      	ldr	r2, [r4, #4]
 800a59e:	d1dd      	bne.n	800a55c <_malloc_r+0x8c>
 800a5a0:	f8c8 2000 	str.w	r2, [r8]
 800a5a4:	e7ec      	b.n	800a580 <_malloc_r+0xb0>
 800a5a6:	4623      	mov	r3, r4
 800a5a8:	6864      	ldr	r4, [r4, #4]
 800a5aa:	e7ac      	b.n	800a506 <_malloc_r+0x36>
 800a5ac:	4634      	mov	r4, r6
 800a5ae:	6876      	ldr	r6, [r6, #4]
 800a5b0:	e7b4      	b.n	800a51c <_malloc_r+0x4c>
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	e7cc      	b.n	800a550 <_malloc_r+0x80>
 800a5b6:	230c      	movs	r3, #12
 800a5b8:	603b      	str	r3, [r7, #0]
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	f000 f80e 	bl	800a5dc <__malloc_unlock>
 800a5c0:	e797      	b.n	800a4f2 <_malloc_r+0x22>
 800a5c2:	6025      	str	r5, [r4, #0]
 800a5c4:	e7dc      	b.n	800a580 <_malloc_r+0xb0>
 800a5c6:	605b      	str	r3, [r3, #4]
 800a5c8:	deff      	udf	#255	; 0xff
 800a5ca:	bf00      	nop
 800a5cc:	200037a8 	.word	0x200037a8

0800a5d0 <__malloc_lock>:
 800a5d0:	4801      	ldr	r0, [pc, #4]	; (800a5d8 <__malloc_lock+0x8>)
 800a5d2:	f000 b84b 	b.w	800a66c <__retarget_lock_acquire_recursive>
 800a5d6:	bf00      	nop
 800a5d8:	200038ec 	.word	0x200038ec

0800a5dc <__malloc_unlock>:
 800a5dc:	4801      	ldr	r0, [pc, #4]	; (800a5e4 <__malloc_unlock+0x8>)
 800a5de:	f000 b846 	b.w	800a66e <__retarget_lock_release_recursive>
 800a5e2:	bf00      	nop
 800a5e4:	200038ec 	.word	0x200038ec

0800a5e8 <memset>:
 800a5e8:	4402      	add	r2, r0
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d100      	bne.n	800a5f2 <memset+0xa>
 800a5f0:	4770      	bx	lr
 800a5f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a5f6:	e7f9      	b.n	800a5ec <memset+0x4>

0800a5f8 <_sbrk_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4d06      	ldr	r5, [pc, #24]	; (800a614 <_sbrk_r+0x1c>)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4604      	mov	r4, r0
 800a600:	4608      	mov	r0, r1
 800a602:	602b      	str	r3, [r5, #0]
 800a604:	f7f7 f9b4 	bl	8001970 <_sbrk>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d102      	bne.n	800a612 <_sbrk_r+0x1a>
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	b103      	cbz	r3, 800a612 <_sbrk_r+0x1a>
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	200038e8 	.word	0x200038e8

0800a618 <__errno>:
 800a618:	4b01      	ldr	r3, [pc, #4]	; (800a620 <__errno+0x8>)
 800a61a:	6818      	ldr	r0, [r3, #0]
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop
 800a620:	20000170 	.word	0x20000170

0800a624 <__libc_init_array>:
 800a624:	b570      	push	{r4, r5, r6, lr}
 800a626:	4d0d      	ldr	r5, [pc, #52]	; (800a65c <__libc_init_array+0x38>)
 800a628:	4c0d      	ldr	r4, [pc, #52]	; (800a660 <__libc_init_array+0x3c>)
 800a62a:	1b64      	subs	r4, r4, r5
 800a62c:	10a4      	asrs	r4, r4, #2
 800a62e:	2600      	movs	r6, #0
 800a630:	42a6      	cmp	r6, r4
 800a632:	d109      	bne.n	800a648 <__libc_init_array+0x24>
 800a634:	4d0b      	ldr	r5, [pc, #44]	; (800a664 <__libc_init_array+0x40>)
 800a636:	4c0c      	ldr	r4, [pc, #48]	; (800a668 <__libc_init_array+0x44>)
 800a638:	f000 f874 	bl	800a724 <_init>
 800a63c:	1b64      	subs	r4, r4, r5
 800a63e:	10a4      	asrs	r4, r4, #2
 800a640:	2600      	movs	r6, #0
 800a642:	42a6      	cmp	r6, r4
 800a644:	d105      	bne.n	800a652 <__libc_init_array+0x2e>
 800a646:	bd70      	pop	{r4, r5, r6, pc}
 800a648:	f855 3b04 	ldr.w	r3, [r5], #4
 800a64c:	4798      	blx	r3
 800a64e:	3601      	adds	r6, #1
 800a650:	e7ee      	b.n	800a630 <__libc_init_array+0xc>
 800a652:	f855 3b04 	ldr.w	r3, [r5], #4
 800a656:	4798      	blx	r3
 800a658:	3601      	adds	r6, #1
 800a65a:	e7f2      	b.n	800a642 <__libc_init_array+0x1e>
 800a65c:	0800a7a4 	.word	0x0800a7a4
 800a660:	0800a7a4 	.word	0x0800a7a4
 800a664:	0800a7a4 	.word	0x0800a7a4
 800a668:	0800a7b0 	.word	0x0800a7b0

0800a66c <__retarget_lock_acquire_recursive>:
 800a66c:	4770      	bx	lr

0800a66e <__retarget_lock_release_recursive>:
 800a66e:	4770      	bx	lr

0800a670 <memcpy>:
 800a670:	440a      	add	r2, r1
 800a672:	4291      	cmp	r1, r2
 800a674:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a678:	d100      	bne.n	800a67c <memcpy+0xc>
 800a67a:	4770      	bx	lr
 800a67c:	b510      	push	{r4, lr}
 800a67e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a682:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a686:	4291      	cmp	r1, r2
 800a688:	d1f9      	bne.n	800a67e <memcpy+0xe>
 800a68a:	bd10      	pop	{r4, pc}

0800a68c <_free_r>:
 800a68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a68e:	2900      	cmp	r1, #0
 800a690:	d044      	beq.n	800a71c <_free_r+0x90>
 800a692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a696:	9001      	str	r0, [sp, #4]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f1a1 0404 	sub.w	r4, r1, #4
 800a69e:	bfb8      	it	lt
 800a6a0:	18e4      	addlt	r4, r4, r3
 800a6a2:	f7ff ff95 	bl	800a5d0 <__malloc_lock>
 800a6a6:	4a1e      	ldr	r2, [pc, #120]	; (800a720 <_free_r+0x94>)
 800a6a8:	9801      	ldr	r0, [sp, #4]
 800a6aa:	6813      	ldr	r3, [r2, #0]
 800a6ac:	b933      	cbnz	r3, 800a6bc <_free_r+0x30>
 800a6ae:	6063      	str	r3, [r4, #4]
 800a6b0:	6014      	str	r4, [r2, #0]
 800a6b2:	b003      	add	sp, #12
 800a6b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6b8:	f7ff bf90 	b.w	800a5dc <__malloc_unlock>
 800a6bc:	42a3      	cmp	r3, r4
 800a6be:	d908      	bls.n	800a6d2 <_free_r+0x46>
 800a6c0:	6825      	ldr	r5, [r4, #0]
 800a6c2:	1961      	adds	r1, r4, r5
 800a6c4:	428b      	cmp	r3, r1
 800a6c6:	bf01      	itttt	eq
 800a6c8:	6819      	ldreq	r1, [r3, #0]
 800a6ca:	685b      	ldreq	r3, [r3, #4]
 800a6cc:	1949      	addeq	r1, r1, r5
 800a6ce:	6021      	streq	r1, [r4, #0]
 800a6d0:	e7ed      	b.n	800a6ae <_free_r+0x22>
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	b10b      	cbz	r3, 800a6dc <_free_r+0x50>
 800a6d8:	42a3      	cmp	r3, r4
 800a6da:	d9fa      	bls.n	800a6d2 <_free_r+0x46>
 800a6dc:	6811      	ldr	r1, [r2, #0]
 800a6de:	1855      	adds	r5, r2, r1
 800a6e0:	42a5      	cmp	r5, r4
 800a6e2:	d10b      	bne.n	800a6fc <_free_r+0x70>
 800a6e4:	6824      	ldr	r4, [r4, #0]
 800a6e6:	4421      	add	r1, r4
 800a6e8:	1854      	adds	r4, r2, r1
 800a6ea:	42a3      	cmp	r3, r4
 800a6ec:	6011      	str	r1, [r2, #0]
 800a6ee:	d1e0      	bne.n	800a6b2 <_free_r+0x26>
 800a6f0:	681c      	ldr	r4, [r3, #0]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	6053      	str	r3, [r2, #4]
 800a6f6:	440c      	add	r4, r1
 800a6f8:	6014      	str	r4, [r2, #0]
 800a6fa:	e7da      	b.n	800a6b2 <_free_r+0x26>
 800a6fc:	d902      	bls.n	800a704 <_free_r+0x78>
 800a6fe:	230c      	movs	r3, #12
 800a700:	6003      	str	r3, [r0, #0]
 800a702:	e7d6      	b.n	800a6b2 <_free_r+0x26>
 800a704:	6825      	ldr	r5, [r4, #0]
 800a706:	1961      	adds	r1, r4, r5
 800a708:	428b      	cmp	r3, r1
 800a70a:	bf04      	itt	eq
 800a70c:	6819      	ldreq	r1, [r3, #0]
 800a70e:	685b      	ldreq	r3, [r3, #4]
 800a710:	6063      	str	r3, [r4, #4]
 800a712:	bf04      	itt	eq
 800a714:	1949      	addeq	r1, r1, r5
 800a716:	6021      	streq	r1, [r4, #0]
 800a718:	6054      	str	r4, [r2, #4]
 800a71a:	e7ca      	b.n	800a6b2 <_free_r+0x26>
 800a71c:	b003      	add	sp, #12
 800a71e:	bd30      	pop	{r4, r5, pc}
 800a720:	200037a8 	.word	0x200037a8

0800a724 <_init>:
 800a724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a726:	bf00      	nop
 800a728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a72a:	bc08      	pop	{r3}
 800a72c:	469e      	mov	lr, r3
 800a72e:	4770      	bx	lr

0800a730 <_fini>:
 800a730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a732:	bf00      	nop
 800a734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a736:	bc08      	pop	{r3}
 800a738:	469e      	mov	lr, r3
 800a73a:	4770      	bx	lr
