
TimeStamp_MASTER_struct.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdc0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800bf88  0800bf88  0001bf88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bffc  0800bffc  000203b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bffc  0800bffc  0001bffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c004  0800c004  000203b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800c004  0800c004  0001c004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800c014  0800c014  0001c014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800c020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000270  0800c290  00020270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000310  0800c330  00020310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000054e8  200003b0  0800c3d0  000203b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005898  0800c3d0  00025898  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000203e0  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002477a  00000000  00000000  00020423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005aa8  00000000  00000000  00044b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001a18  00000000  00000000  0004a648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001404  00000000  00000000  0004c060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002f449  00000000  00000000  0004d464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00023374  00000000  00000000  0007c8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00102b50  00000000  00000000  0009fc21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000070e0  00000000  00000000  001a2774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000078  00000000  00000000  001a9854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200003b0 	.word	0x200003b0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800bf70 	.word	0x0800bf70

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200003b4 	.word	0x200003b4
 8000204:	0800bf70 	.word	0x0800bf70

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d005      	beq.n	8000520 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	2203      	movs	r2, #3
 800051e:	4798      	blx	r3
    }
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4618      	mov	r0, r3
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <_Z21CANmaster_constructorP11CANmaster_tP19__CAN_HandleTypeDefm>:
static PCIFmsg_t msgConfirmationCANsnifferActivated = {{"Modo sniffer activado"}, sizeof("Activado el modo sniffer")-1, activateCANsniffer};
static PCIFmsg_t msgConfirmationCANsnifferDeactivated = {{"Modo sniffer desactivado"}, sizeof("Modo sniffer desactivado")-1, deactivateCANsniffer};

void CANmaster_constructor(CANmaster_t *me, CAN_HandleTypeDef *canHandler, uint32_t nodeID)
//void CANmaster_constructor(CANmaster_t *me, CAN_HandleTypeDef *canHandler, uint32_t nodeID, STM32::gpio *ledMsgRxNodeID1, STM32::gpio *ledMsgRxNodeID2, STM32::gpio *ledMsgRxNodeID3)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
	stateMachine_constructor(&me->super, (stateHandler_t)&CANmaster_initial);
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	490f      	ldr	r1, [pc, #60]	; (8000578 <_Z21CANmaster_constructorP11CANmaster_tP19__CAN_HandleTypeDefm+0x4c>)
 800053c:	4618      	mov	r0, r3
 800053e:	f001 fb7b 	bl	8001c38 <_Z24stateMachine_constructorP14stateMachine_tPF7state_tPvhE>

	me->m_canHandler = canHandler;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	68ba      	ldr	r2, [r7, #8]
 8000546:	605a      	str	r2, [r3, #4]
	me->m_nodeID = nodeID;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	625a      	str	r2, [r3, #36]	; 0x24
	//me->m_ledCanMsgReceived = ledCanMsgReceived;
//	me->m_ledMsgRxNodeID1 = ledMsgRxNodeID1;
//	me->m_ledMsgRxNodeID2 = ledMsgRxNodeID2;
//	me->m_ledMsgRxNodeID3 = ledMsgRxNodeID3;

	me->m_canTxHeader.ExtId = 0;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
	me->m_canTxHeader.IDE = CAN_ID_STD;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
	me->m_canTxHeader.RTR = CAN_RTR_DATA;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	2200      	movs	r2, #0
 800055e:	615a      	str	r2, [r3, #20]
	me->m_canTxHeader.TransmitGlobalTime = DISABLE;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	2200      	movs	r2, #0
 8000564:	771a      	strb	r2, [r3, #28]

	me->m_snifferOn = false;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 800056e:	bf00      	nop
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	0800057d 	.word	0x0800057d

0800057c <_Z17CANmaster_initialP11CANmaster_t>:


state_t CANmaster_initial(CANmaster_t *me)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08c      	sub	sp, #48	; 0x30
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef canFilterConfigTimeMsgs;

	canFilterConfigTimeMsgs.FilterActivation = CAN_FILTER_ENABLE;
 8000584:	2301      	movs	r3, #1
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28
	canFilterConfigTimeMsgs.FilterBank = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
	canFilterConfigTimeMsgs.FilterFIFOAssignment = CAN_RX_FIFO0;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
	canFilterConfigTimeMsgs.FilterIdHigh = 0x0700;
 8000590:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000594:	60bb      	str	r3, [r7, #8]
	canFilterConfigTimeMsgs.FilterIdLow = 0x0000;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
	canFilterConfigTimeMsgs.FilterMaskIdHigh = 0xFF00;
 800059a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800059e:	613b      	str	r3, [r7, #16]
	canFilterConfigTimeMsgs.FilterMaskIdLow = 0x0000;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
	canFilterConfigTimeMsgs.FilterMode = CAN_FILTERMODE_IDMASK;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
	canFilterConfigTimeMsgs.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a8:	2301      	movs	r3, #1
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
	canFilterConfigTimeMsgs.SlaveStartFilterBank = 14;
 80005ac:	230e      	movs	r3, #14
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Se configura el filtro de mensajes de prueba. Se deja deshabilitado
	canFilterConfigTestMsgs.FilterActivation = CAN_FILTER_DISABLE;
 80005b0:	4b1a      	ldr	r3, [pc, #104]	; (800061c <_Z17CANmaster_initialP11CANmaster_t+0xa0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	621a      	str	r2, [r3, #32]
	canFilterConfigTestMsgs.FilterBank = 1;
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <_Z17CANmaster_initialP11CANmaster_t+0xa0>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	615a      	str	r2, [r3, #20]
	canFilterConfigTestMsgs.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005bc:	4b17      	ldr	r3, [pc, #92]	; (800061c <_Z17CANmaster_initialP11CANmaster_t+0xa0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
	canFilterConfigTestMsgs.FilterIdHigh = 0x0000;
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <_Z17CANmaster_initialP11CANmaster_t+0xa0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
	canFilterConfigTestMsgs.FilterIdLow = 0x0000;
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <_Z17CANmaster_initialP11CANmaster_t+0xa0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]
	canFilterConfigTestMsgs.FilterMaskIdHigh = 0x0000;
 80005ce:	4b13      	ldr	r3, [pc, #76]	; (800061c <_Z17CANmaster_initialP11CANmaster_t+0xa0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
	canFilterConfigTestMsgs.FilterMaskIdLow = 0x0000;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <_Z17CANmaster_initialP11CANmaster_t+0xa0>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
	canFilterConfigTestMsgs.FilterMode = CAN_FILTERMODE_IDMASK;
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <_Z17CANmaster_initialP11CANmaster_t+0xa0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
	canFilterConfigTestMsgs.FilterScale = CAN_FILTERSCALE_32BIT;
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <_Z17CANmaster_initialP11CANmaster_t+0xa0>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	61da      	str	r2, [r3, #28]
	canFilterConfigTestMsgs.SlaveStartFilterBank = 14;
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <_Z17CANmaster_initialP11CANmaster_t+0xa0>)
 80005e8:	220e      	movs	r2, #14
 80005ea:	625a      	str	r2, [r3, #36]	; 0x24


	HAL_CAN_ConfigFilter(me->m_canHandler, &canFilterConfigTimeMsgs);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	f107 0208 	add.w	r2, r7, #8
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 f85a 	bl	80026b0 <HAL_CAN_ConfigFilter>
	HAL_CAN_ConfigFilter(me->m_canHandler, &canFilterConfigTestMsgs);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	4906      	ldr	r1, [pc, #24]	; (800061c <_Z17CANmaster_initialP11CANmaster_t+0xa0>)
 8000602:	4618      	mov	r0, r3
 8000604:	f002 f854 	bl	80026b0 <HAL_CAN_ConfigFilter>
	//me->m_ledCanMsgReceived->write(GPIO_ST::LOW);

	return stateMachine_transition((stateMachine_t*)me, (stateHandler_t) CANmaster_off);
 8000608:	4905      	ldr	r1, [pc, #20]	; (8000620 <_Z17CANmaster_initialP11CANmaster_t+0xa4>)
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f001 fb57 	bl	8001cbe <_Z23stateMachine_transitionP14stateMachine_tPF7state_tPvhE>
 8000610:	4603      	mov	r3, r0
}
 8000612:	4618      	mov	r0, r3
 8000614:	3730      	adds	r7, #48	; 0x30
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200003cc 	.word	0x200003cc
 8000620:	08000625 	.word	0x08000625

08000624 <_Z13CANmaster_offP11CANmaster_th>:

state_t CANmaster_off(CANmaster_t *me, event_t const e)
{
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	b08b      	sub	sp, #44	; 0x2c
 8000628:	af06      	add	r7, sp, #24
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	460b      	mov	r3, r1
 800062e:	72fb      	strb	r3, [r7, #11]
	switch(e)
 8000630:	7afb      	ldrb	r3, [r7, #11]
 8000632:	2b0a      	cmp	r3, #10
 8000634:	d039      	beq.n	80006aa <_Z13CANmaster_offP11CANmaster_th+0x86>
 8000636:	2b0a      	cmp	r3, #10
 8000638:	dc59      	bgt.n	80006ee <_Z13CANmaster_offP11CANmaster_th+0xca>
 800063a:	2b04      	cmp	r3, #4
 800063c:	d002      	beq.n	8000644 <_Z13CANmaster_offP11CANmaster_th+0x20>
 800063e:	2b09      	cmp	r3, #9
 8000640:	d011      	beq.n	8000666 <_Z13CANmaster_offP11CANmaster_th+0x42>
 8000642:	e054      	b.n	80006ee <_Z13CANmaster_offP11CANmaster_th+0xca>
	{
		case EV_CAN_TURN_ON:
			HAL_CAN_Start(me->m_canHandler);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	4618      	mov	r0, r3
 800064a:	f002 f911 	bl	8002870 <HAL_CAN_Start>
			HAL_CAN_ActivateNotification(me->m_canHandler, CAN_IT_RX_FIFO0_MSG_PENDING);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	2102      	movs	r1, #2
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fbd7 	bl	8002e08 <HAL_CAN_ActivateNotification>
			//HAL_CAN_ActivateNotification(me->m_canHandler, CAN_IT_RX_FIFO0_FULL);
			// HAL_CAN_ActivateNotification(me->m_canHandler, CAN_IT_RX_FIFO1_MSG_PENDING);

			return stateMachine_transition((stateMachine_t*)me, (stateHandler_t) CANmaster_on);
 800065a:	4927      	ldr	r1, [pc, #156]	; (80006f8 <_Z13CANmaster_offP11CANmaster_th+0xd4>)
 800065c:	68f8      	ldr	r0, [r7, #12]
 800065e:	f001 fb2e 	bl	8001cbe <_Z23stateMachine_transitionP14stateMachine_tPF7state_tPvhE>
 8000662:	4603      	mov	r3, r0
 8000664:	e044      	b.n	80006f0 <_Z13CANmaster_offP11CANmaster_th+0xcc>

		case EV_CAN_ACTIVATE_SNIFFER:
			canFilterConfigTestMsgs.FilterActivation = CAN_FILTER_ENABLE;
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <_Z13CANmaster_offP11CANmaster_th+0xd8>)
 8000668:	2201      	movs	r2, #1
 800066a:	621a      	str	r2, [r3, #32]
			HAL_CAN_ConfigFilter(me->m_canHandler, &canFilterConfigTestMsgs);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	4922      	ldr	r1, [pc, #136]	; (80006fc <_Z13CANmaster_offP11CANmaster_th+0xd8>)
 8000672:	4618      	mov	r0, r3
 8000674:	f002 f81c 	bl	80026b0 <HAL_CAN_ConfigFilter>
			me->m_snifferOn = true;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2201      	movs	r2, #1
 800067c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			p_PCIFTxBuffer->write(msgConfirmationCANsnifferActivated);
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <_Z13CANmaster_offP11CANmaster_th+0xdc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4e1f      	ldr	r6, [pc, #124]	; (8000704 <_Z13CANmaster_offP11CANmaster_th+0xe0>)
 8000688:	466c      	mov	r4, sp
 800068a:	f106 050c 	add.w	r5, r6, #12
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000696:	6020      	str	r0, [r4, #0]
 8000698:	3404      	adds	r4, #4
 800069a:	8021      	strh	r1, [r4, #0]
 800069c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f9bb 	bl	8000a1c <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_>

			return HANDLED;
 80006a6:	2300      	movs	r3, #0
 80006a8:	e022      	b.n	80006f0 <_Z13CANmaster_offP11CANmaster_th+0xcc>

		case EV_CAN_DEACTIVATE_SNIFFER:
			canFilterConfigTestMsgs.FilterActivation = CAN_FILTER_DISABLE;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <_Z13CANmaster_offP11CANmaster_th+0xd8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
			HAL_CAN_ConfigFilter(me->m_canHandler, &canFilterConfigTestMsgs);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4911      	ldr	r1, [pc, #68]	; (80006fc <_Z13CANmaster_offP11CANmaster_th+0xd8>)
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fffa 	bl	80026b0 <HAL_CAN_ConfigFilter>
			me->m_snifferOn = false;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2200      	movs	r2, #0
 80006c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			p_PCIFTxBuffer->write(msgConfirmationCANsnifferDeactivated);
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <_Z13CANmaster_offP11CANmaster_th+0xdc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4e0f      	ldr	r6, [pc, #60]	; (8000708 <_Z13CANmaster_offP11CANmaster_th+0xe4>)
 80006cc:	466c      	mov	r4, sp
 80006ce:	f106 050c 	add.w	r5, r6, #12
 80006d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006da:	6020      	str	r0, [r4, #0]
 80006dc:	3404      	adds	r4, #4
 80006de:	8021      	strh	r1, [r4, #0]
 80006e0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 f999 	bl	8000a1c <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_>

			return HANDLED;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e000      	b.n	80006f0 <_Z13CANmaster_offP11CANmaster_th+0xcc>
	}

	return IGNORED;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006f8:	0800070d 	.word	0x0800070d
 80006fc:	200003cc 	.word	0x200003cc
 8000700:	0800bfdc 	.word	0x0800bfdc
 8000704:	20000048 	.word	0x20000048
 8000708:	2000006c 	.word	0x2000006c

0800070c <_Z12CANmaster_onP11CANmaster_th>:

state_t CANmaster_on(CANmaster_t *me, event_t const e)
{
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070e:	b0a7      	sub	sp, #156	; 0x9c
 8000710:	af06      	add	r7, sp, #24
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	460b      	mov	r3, r1
 8000716:	72fb      	strb	r3, [r7, #11]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[MAX_LEN_PAYLOAD_CAN];
	uint32_t fifoFillLevel;
	PCIFmsg_t pcifMsg;

	switch(e)
 8000718:	7afb      	ldrb	r3, [r7, #11]
 800071a:	3b01      	subs	r3, #1
 800071c:	2b07      	cmp	r3, #7
 800071e:	f200 8141 	bhi.w	80009a4 <_Z12CANmaster_onP11CANmaster_th+0x298>
 8000722:	a201      	add	r2, pc, #4	; (adr r2, 8000728 <_Z12CANmaster_onP11CANmaster_th+0x1c>)
 8000724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000728:	08000749 	.word	0x08000749
 800072c:	08000773 	.word	0x08000773
 8000730:	080009a5 	.word	0x080009a5
 8000734:	080009a5 	.word	0x080009a5
 8000738:	0800079d 	.word	0x0800079d
 800073c:	08000841 	.word	0x08000841
 8000740:	080008bf 	.word	0x080008bf
 8000744:	080007bf 	.word	0x080007bf
	{

		case EV_ENTRY:
			p_PCIFTxBuffer->write(msgConfirmationCANenabled);
 8000748:	4b99      	ldr	r3, [pc, #612]	; (80009b0 <_Z12CANmaster_onP11CANmaster_th+0x2a4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4e99      	ldr	r6, [pc, #612]	; (80009b4 <_Z12CANmaster_onP11CANmaster_th+0x2a8>)
 8000750:	466c      	mov	r4, sp
 8000752:	f106 050c 	add.w	r5, r6, #12
 8000756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800075e:	6020      	str	r0, [r4, #0]
 8000760:	3404      	adds	r4, #4
 8000762:	8021      	strh	r1, [r4, #0]
 8000764:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 f957 	bl	8000a1c <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_>
			return HANDLED;
 800076e:	2300      	movs	r3, #0
 8000770:	e119      	b.n	80009a6 <_Z12CANmaster_onP11CANmaster_th+0x29a>

		case EV_EXIT:
			p_PCIFTxBuffer->write(msgConfirmationCANdisabled);
 8000772:	4b8f      	ldr	r3, [pc, #572]	; (80009b0 <_Z12CANmaster_onP11CANmaster_th+0x2a4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	4e8f      	ldr	r6, [pc, #572]	; (80009b8 <_Z12CANmaster_onP11CANmaster_th+0x2ac>)
 800077a:	466c      	mov	r4, sp
 800077c:	f106 050c 	add.w	r5, r6, #12
 8000780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000784:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000788:	6020      	str	r0, [r4, #0]
 800078a:	3404      	adds	r4, #4
 800078c:	8021      	strh	r1, [r4, #0]
 800078e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f000 f942 	bl	8000a1c <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_>
			return HANDLED;
 8000798:	2300      	movs	r3, #0
 800079a:	e104      	b.n	80009a6 <_Z12CANmaster_onP11CANmaster_th+0x29a>

		case EV_CAN_TURN_OFF:
			HAL_CAN_DeactivateNotification(me->m_canHandler, CAN_IT_RX_FIFO0_MSG_PENDING);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	2102      	movs	r1, #2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fb56 	bl	8002e54 <HAL_CAN_DeactivateNotification>
			//HAL_CAN_DeactivateNotification(me->m_canHandler, CAN_IT_RX_FIFO0_FULL);
			//HAL_CAN_DeactivateNotification(me->m_canHandler, CAN_IT_RX_FIFO1_MSG_PENDING);
			HAL_CAN_Stop(me->m_canHandler);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f002 f8a3 	bl	80028f8 <HAL_CAN_Stop>

			return stateMachine_transition((stateMachine_t*)me, (stateHandler_t) CANmaster_off);
 80007b2:	4982      	ldr	r1, [pc, #520]	; (80009bc <_Z12CANmaster_onP11CANmaster_th+0x2b0>)
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f001 fa82 	bl	8001cbe <_Z23stateMachine_transitionP14stateMachine_tPF7state_tPvhE>
 80007ba:	4603      	mov	r3, r0
 80007bc:	e0f3      	b.n	80009a6 <_Z12CANmaster_onP11CANmaster_th+0x29a>

		case EV_CAN_FETCH_NEW_MSGS:
			i = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	67fb      	str	r3, [r7, #124]	; 0x7c
			fifoFillLevel = HAL_CAN_GetRxFifoFillLevel(me->m_canHandler, CAN_RX_FIFO0);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 faf5 	bl	8002db8 <HAL_CAN_GetRxFifoFillLevel>
 80007ce:	67b8      	str	r0, [r7, #120]	; 0x78
			while(i < fifoFillLevel)
 80007d0:	e02a      	b.n	8000828 <_Z12CANmaster_onP11CANmaster_th+0x11c>
			{
				HAL_CAN_GetRxMessage(me->m_canHandler, CAN_RX_FIFO0, &rxHeader, rxData);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	6858      	ldr	r0, [r3, #4]
 80007d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007da:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80007de:	2100      	movs	r1, #0
 80007e0:	f002 f9d8 	bl	8002b94 <HAL_CAN_GetRxMessage>
				if( CANmsg_make_from_raw_data(&canMsg, rxData, rxHeader.DLC, rxHeader.StdId) == true )
 80007e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80007e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007e8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80007ec:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80007f0:	f000 faae 	bl	8000d50 <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	bf0c      	ite	eq
 80007fa:	2301      	moveq	r3, #1
 80007fc:	2300      	movne	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00e      	beq.n	8000822 <_Z12CANmaster_onP11CANmaster_th+0x116>
				{
					p_canRxBuffer->write(canMsg);
 8000804:	4b6e      	ldr	r3, [pc, #440]	; (80009c0 <_Z12CANmaster_onP11CANmaster_th+0x2b4>)
 8000806:	681c      	ldr	r4, [r3, #0]
 8000808:	466a      	mov	r2, sp
 800080a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800080e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000812:	e882 0003 	stmia.w	r2, {r0, r1}
 8000816:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800081a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800081c:	4620      	mov	r0, r4
 800081e:	f000 f986 	bl	8000b2e <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_>
//					if(p_canRxBuffer->is_full())
//					{
//						me->m_ledMsgRxNodeID3->write(GPIO_ST::HIGH);
//					}
				}
				i++;
 8000822:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000824:	3301      	adds	r3, #1
 8000826:	67fb      	str	r3, [r7, #124]	; 0x7c
			while(i < fifoFillLevel)
 8000828:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800082a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800082c:	429a      	cmp	r2, r3
 800082e:	d3d0      	bcc.n	80007d2 <_Z12CANmaster_onP11CANmaster_th+0xc6>
			}
			HAL_CAN_ActivateNotification(me->m_canHandler, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	2102      	movs	r1, #2
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fae6 	bl	8002e08 <HAL_CAN_ActivateNotification>

			return HANDLED;
 800083c:	2300      	movs	r3, #0
 800083e:	e0b2      	b.n	80009a6 <_Z12CANmaster_onP11CANmaster_th+0x29a>


		case EV_CAN_SEND_NEXT_MSG:
			freeMailboxes = HAL_CAN_GetTxMailboxesFreeLevel(me->m_canHandler);
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	4618      	mov	r0, r3
 8000846:	f002 f970 	bl	8002b2a <HAL_CAN_GetTxMailboxesFreeLevel>
 800084a:	6778      	str	r0, [r7, #116]	; 0x74
			i = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	67fb      	str	r3, [r7, #124]	; 0x7c
			while( (!(p_canTxBuffer->is_empty())) && (i < freeMailboxes))
 8000850:	e01f      	b.n	8000892 <_Z12CANmaster_onP11CANmaster_th+0x186>
			{
				p_canTxBuffer->read(&canMsg);
 8000852:	4b5c      	ldr	r3, [pc, #368]	; (80009c4 <_Z12CANmaster_onP11CANmaster_th+0x2b8>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f9d6 	bl	8000c0e <_ZN11circ_bufferI8CANmsg_tLm128EtE4readEPS0_>
				me->m_canTxHeader.StdId = CAN_MSG_GET_STD_ID(canMsg.id, me->m_nodeID);
 8000862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000864:	00da      	lsls	r2, r3, #3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086a:	431a      	orrs	r2, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	609a      	str	r2, [r3, #8]
				me->m_canTxHeader.DLC = canMsg.lenPayload;
 8000870:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	619a      	str	r2, [r3, #24]
				HAL_CAN_AddTxMessage(me->m_canHandler, &me->m_canTxHeader, canMsg.payload, &txMailbox);
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6858      	ldr	r0, [r3, #4]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f103 0108 	add.w	r1, r3, #8
 8000880:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000884:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000888:	f002 f87f 	bl	800298a <HAL_CAN_AddTxMessage>
				i++;
 800088c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800088e:	3301      	adds	r3, #1
 8000890:	67fb      	str	r3, [r7, #124]	; 0x7c
			while( (!(p_canTxBuffer->is_empty())) && (i < freeMailboxes))
 8000892:	4b4c      	ldr	r3, [pc, #304]	; (80009c4 <_Z12CANmaster_onP11CANmaster_th+0x2b8>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f9ac 	bl	8000bf4 <_ZN11circ_bufferI8CANmsg_tLm128EtE8is_emptyEv>
 800089c:	4603      	mov	r3, r0
 800089e:	f083 0301 	eor.w	r3, r3, #1
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d005      	beq.n	80008b4 <_Z12CANmaster_onP11CANmaster_th+0x1a8>
 80008a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80008aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d201      	bcs.n	80008b4 <_Z12CANmaster_onP11CANmaster_th+0x1a8>
 80008b0:	2301      	movs	r3, #1
 80008b2:	e000      	b.n	80008b6 <_Z12CANmaster_onP11CANmaster_th+0x1aa>
 80008b4:	2300      	movs	r3, #0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1cb      	bne.n	8000852 <_Z12CANmaster_onP11CANmaster_th+0x146>
			}

			return HANDLED;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e073      	b.n	80009a6 <_Z12CANmaster_onP11CANmaster_th+0x29a>


		case EV_CAN_PROCESS_NEW_MSG:
			i = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	67fb      	str	r3, [r7, #124]	; 0x7c
			//me->m_ledCanMsgReceived->write(GPIO_ST::HIGH);
			while( (p_canRxBuffer->read(&canMsg) != 0) && (i < 3) )
 80008c2:	e05a      	b.n	800097a <_Z12CANmaster_onP11CANmaster_th+0x26e>
			{
				switch(canMsg.id)
 80008c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008c6:	2b07      	cmp	r3, #7
 80008c8:	d126      	bne.n	8000918 <_Z12CANmaster_onP11CANmaster_th+0x20c>
//						else if(canMsg.nodeID == 3)
//						{
//							me->m_ledMsgRxNodeID3->toggle();
//						}

						pcifMsg.cmd = dataTimeStampService;
 80008ca:	2304      	movs	r3, #4
 80008cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80008d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
						memcpy(pcifMsg.payload, &(canMsg.nodeID), sizeof(canMsg.nodeID));
 80008d2:	617b      	str	r3, [r7, #20]
						memcpy(&(pcifMsg.payload[sizeof(canMsg.nodeID)]), canMsg.payload, canMsg.lenPayload);
 80008d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80008d6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	3304      	adds	r3, #4
 80008e0:	4618      	mov	r0, r3
 80008e2:	f00b faeb 	bl	800bebc <memcpy>
						pcifMsg.lenPayload = canMsg.lenPayload + sizeof(canMsg.nodeID);
 80008e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	3304      	adds	r3, #4
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//						if( p_PCIFTxBuffer->is_full() )
//						{
//							me->m_ledMsgRxNodeID2->write(GPIO_ST::HIGH);
//						}

						p_PCIFTxBuffer->write(pcifMsg);
 80008f2:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <_Z12CANmaster_onP11CANmaster_th+0x2a4>)
 80008f4:	681e      	ldr	r6, [r3, #0]
 80008f6:	466c      	mov	r4, sp
 80008f8:	f107 0520 	add.w	r5, r7, #32
 80008fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000900:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000904:	6020      	str	r0, [r4, #0]
 8000906:	3404      	adds	r4, #4
 8000908:	8021      	strh	r1, [r4, #0]
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000910:	4630      	mov	r0, r6
 8000912:	f000 f883 	bl	8000a1c <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_>
						break;
 8000916:	e02d      	b.n	8000974 <_Z12CANmaster_onP11CANmaster_th+0x268>

					default:
						if(me->m_snifferOn)
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800091e:	2b00      	cmp	r3, #0
 8000920:	d027      	beq.n	8000972 <_Z12CANmaster_onP11CANmaster_th+0x266>
						{
							pcifMsg.cmd = forwardCANmsg;
 8000922:	2307      	movs	r3, #7
 8000924:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000928:	6f3b      	ldr	r3, [r7, #112]	; 0x70
							memcpy(pcifMsg.payload, &(canMsg.nodeID), sizeof(canMsg.nodeID));
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
							memcpy(&(pcifMsg.payload[sizeof(canMsg.nodeID)]), &(canMsg.id), sizeof(canMsg.id));
 800092e:	61bb      	str	r3, [r7, #24]
							memcpy(&(pcifMsg.payload[sizeof(canMsg.nodeID) + sizeof(canMsg.id)]), canMsg.payload, canMsg.lenPayload);
 8000930:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000932:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	3308      	adds	r3, #8
 800093c:	4618      	mov	r0, r3
 800093e:	f00b fabd 	bl	800bebc <memcpy>
							pcifMsg.lenPayload = canMsg.lenPayload + sizeof(canMsg.nodeID) + sizeof(canMsg.id);
 8000942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000944:	b2db      	uxtb	r3, r3
 8000946:	3308      	adds	r3, #8
 8000948:	b2db      	uxtb	r3, r3
 800094a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
							p_PCIFTxBuffer->write(pcifMsg);
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <_Z12CANmaster_onP11CANmaster_th+0x2a4>)
 8000950:	681e      	ldr	r6, [r3, #0]
 8000952:	466c      	mov	r4, sp
 8000954:	f107 0520 	add.w	r5, r7, #32
 8000958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000960:	6020      	str	r0, [r4, #0]
 8000962:	3404      	adds	r4, #4
 8000964:	8021      	strh	r1, [r4, #0]
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800096c:	4630      	mov	r0, r6
 800096e:	f000 f855 	bl	8000a1c <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_>
						}
						break;
 8000972:	bf00      	nop
				}
				i++;
 8000974:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000976:	3301      	adds	r3, #1
 8000978:	67fb      	str	r3, [r7, #124]	; 0x7c
			while( (p_canRxBuffer->read(&canMsg) != 0) && (i < 3) )
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <_Z12CANmaster_onP11CANmaster_th+0x2b4>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f000 f942 	bl	8000c0e <_ZN11circ_bufferI8CANmsg_tLm128EtE4readEPS0_>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d004      	beq.n	800099a <_Z12CANmaster_onP11CANmaster_th+0x28e>
 8000990:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000992:	2b02      	cmp	r3, #2
 8000994:	d801      	bhi.n	800099a <_Z12CANmaster_onP11CANmaster_th+0x28e>
 8000996:	2301      	movs	r3, #1
 8000998:	e000      	b.n	800099c <_Z12CANmaster_onP11CANmaster_th+0x290>
 800099a:	2300      	movs	r3, #0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d191      	bne.n	80008c4 <_Z12CANmaster_onP11CANmaster_th+0x1b8>
			}

			//me->m_ledCanMsgReceived->write(GPIO_ST::LOW);
			return HANDLED;
 80009a0:	2300      	movs	r3, #0
 80009a2:	e000      	b.n	80009a6 <_Z12CANmaster_onP11CANmaster_th+0x29a>

	}
	return IGNORED;
 80009a4:	2301      	movs	r3, #1
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3784      	adds	r7, #132	; 0x84
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ae:	bf00      	nop
 80009b0:	0800bfdc 	.word	0x0800bfdc
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000024 	.word	0x20000024
 80009bc:	08000625 	.word	0x08000625
 80009c0:	0800bfd8 	.word	0x0800bfd8
 80009c4:	0800bfd4 	.word	0x0800bfd4

080009c8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/** Callback para la interrupción de CAN. Esta interrupción salta cuando hay
 *  nuevos datos en la FIFO 0 de CAN. */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	flagNewCANdataRx0 = 1;
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80009d6:	2102      	movs	r1, #2
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f002 fa3b 	bl	8002e54 <HAL_CAN_DeactivateNotification>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000066d 	.word	0x2000066d

080009ec <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	if(msgLost == false)
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <HAL_CAN_RxFifo0FullCallback+0x28>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d106      	bne.n	8000a0a <HAL_CAN_RxFifo0FullCallback+0x1e>
	{
		canMsgLostLED.write(GPIO_ST::HIGH);
 80009fc:	2101      	movs	r1, #1
 80009fe:	4806      	ldr	r0, [pc, #24]	; (8000a18 <HAL_CAN_RxFifo0FullCallback+0x2c>)
 8000a00:	f000 fcb9 	bl	8001376 <_ZN5STM324gpio5writeE7GPIO_ST>
		msgLost = true;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <HAL_CAN_RxFifo0FullCallback+0x28>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200003f4 	.word	0x200003f4
 8000a18:	200003f8 	.word	0x200003f8

08000a1c <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_>:
	mSize_ = 0;

}

template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::write(bufferDataType data)
 8000a1c:	b084      	sub	sp, #16
 8000a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//if (mFull_){
	//    bufferOverloaded = true;
	//    return EXIT_ERROR;
	//}

	mBuffer_[mHead_] = data;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a34:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000a38:	4619      	mov	r1, r3
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	440b      	add	r3, r1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000a4a:	f103 0c02 	add.w	ip, r3, #2
 8000a4e:	f104 0e20 	add.w	lr, r4, #32
 8000a52:	4665      	mov	r5, ip
 8000a54:	4626      	mov	r6, r4
 8000a56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a58:	6028      	str	r0, [r5, #0]
 8000a5a:	6069      	str	r1, [r5, #4]
 8000a5c:	60aa      	str	r2, [r5, #8]
 8000a5e:	60eb      	str	r3, [r5, #12]
 8000a60:	3410      	adds	r4, #16
 8000a62:	f10c 0c10 	add.w	ip, ip, #16
 8000a66:	4574      	cmp	r4, lr
 8000a68:	d1f3      	bne.n	8000a52 <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_+0x36>
 8000a6a:	4662      	mov	r2, ip
 8000a6c:	4623      	mov	r3, r4
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	8013      	strh	r3, [r2, #0]
	mEmpty_ = false;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107


	if(++mHead_ == sCapacity_){
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a84:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000a88:	3301      	adds	r3, #1
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a92:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a9c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000aa0:	2b80      	cmp	r3, #128	; 0x80
 8000aa2:	bf0c      	ite	eq
 8000aa4:	2301      	moveq	r3, #1
 8000aa6:	2300      	movne	r3, #0
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d005      	beq.n	8000aba <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_+0x9e>
		mHead_ = 0;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	}

	// In case buffer was full, tail object must be updated so that old data is overwritten, ow check is buffer is full
	if(mFull_ == true){
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ac0:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d115      	bne.n	8000af4 <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_+0xd8>
		mTail_ = mTail_ + 1 == sCapacity_ ? 0 : mTail_ + 1; // mTail_ = ++mTail_ == sCapacity_ ? 0 : mTail_;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ace:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ad4:	d007      	beq.n	8000ae6 <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_+0xca>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000adc:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	e000      	b.n	8000ae8 <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_+0xcc>
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000aee:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8000af2:	e014      	b.n	8000b1e <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_+0x102>
	}else if(++mSize_ == sCapacity_){
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	3301      	adds	r3, #1
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	801a      	strh	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	2b80      	cmp	r3, #128	; 0x80
 8000b06:	bf0c      	ite	eq
 8000b08:	2301      	moveq	r3, #1
 8000b0a:	2300      	movne	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d005      	beq.n	8000b1e <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_+0x102>
		mFull_ = true;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
	}
	return EXIT_OK;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000b2a:	b004      	add	sp, #16
 8000b2c:	4770      	bx	lr

08000b2e <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_>:
bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::write(bufferDataType data)
 8000b2e:	b084      	sub	sp, #16
 8000b30:	b4b0      	push	{r4, r5, r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	f107 001c 	add.w	r0, r7, #28
 8000b3c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	mBuffer_[mHead_] = data;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f8b3 3a04 	ldrh.w	r3, [r3, #2564]	; 0xa04
 8000b46:	4619      	mov	r1, r3
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	440b      	add	r3, r1
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	1d1c      	adds	r4, r3, #4
 8000b56:	f107 051c 	add.w	r5, r7, #28
 8000b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b5e:	682b      	ldr	r3, [r5, #0]
 8000b60:	6023      	str	r3, [r4, #0]
	mEmpty_ = false;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2a09 	strb.w	r2, [r3, #2569]	; 0xa09
	if(++mHead_ == sCapacity_){
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f8b3 3a04 	ldrh.w	r3, [r3, #2564]	; 0xa04
 8000b70:	3301      	adds	r3, #1
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f8a3 2a04 	strh.w	r2, [r3, #2564]	; 0xa04
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f8b3 3a04 	ldrh.w	r3, [r3, #2564]	; 0xa04
 8000b80:	2b80      	cmp	r3, #128	; 0x80
 8000b82:	bf0c      	ite	eq
 8000b84:	2301      	moveq	r3, #1
 8000b86:	2300      	movne	r3, #0
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_+0x68>
		mHead_ = 0;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	f8a3 2a04 	strh.w	r2, [r3, #2564]	; 0xa04
	if(mFull_ == true){
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f893 3a08 	ldrb.w	r3, [r3, #2568]	; 0xa08
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d10f      	bne.n	8000bc0 <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_+0x92>
		mTail_ = mTail_ + 1 == sCapacity_ ? 0 : mTail_ + 1; // mTail_ = ++mTail_ == sCapacity_ ? 0 : mTail_;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f8b3 3a06 	ldrh.w	r3, [r3, #2566]	; 0xa06
 8000ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba8:	d005      	beq.n	8000bb6 <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_+0x88>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f8b3 3a06 	ldrh.w	r3, [r3, #2566]	; 0xa06
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	e000      	b.n	8000bb8 <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_+0x8a>
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f8a3 2a06 	strh.w	r2, [r3, #2566]	; 0xa06
 8000bbe:	e012      	b.n	8000be6 <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_+0xb8>
	}else if(++mSize_ == sCapacity_){
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	801a      	strh	r2, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	2b80      	cmp	r3, #128	; 0x80
 8000bd2:	bf0c      	ite	eq
 8000bd4:	2301      	moveq	r3, #1
 8000bd6:	2300      	movne	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_+0xb8>
		mFull_ = true;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2201      	movs	r2, #1
 8000be2:	f883 2a08 	strb.w	r2, [r3, #2568]	; 0xa08
	return EXIT_OK;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bcb0      	pop	{r4, r5, r7}
 8000bf0:	b004      	add	sp, #16
 8000bf2:	4770      	bx	lr

08000bf4 <_ZN11circ_bufferI8CANmsg_tLm128EtE8is_emptyEv>:
// bufferDataType* circ_buffer<bufferDataType, N, sizeDataType>::get_tail_ptr(){
//     return &mBuffer_[mTail_];
// }

template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::is_empty(){
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	return mEmpty_;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f893 3a09 	ldrb.w	r3, [r3, #2569]	; 0xa09
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <_ZN11circ_bufferI8CANmsg_tLm128EtE4readEPS0_>:
bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::read(bufferDataType* pData)
 8000c0e:	b4b0      	push	{r4, r5, r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	6039      	str	r1, [r7, #0]
	if (mEmpty_){
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f893 3a09 	ldrb.w	r3, [r3, #2569]	; 0xa09
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <_ZN11circ_bufferI8CANmsg_tLm128EtE4readEPS0_+0x18>
		return EXIT_ERROR;
 8000c22:	2300      	movs	r3, #0
 8000c24:	e03e      	b.n	8000ca4 <_ZN11circ_bufferI8CANmsg_tLm128EtE4readEPS0_+0x96>
	*pData = mBuffer_[mTail_];
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f8b3 3a06 	ldrh.w	r3, [r3, #2566]	; 0xa06
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	6838      	ldr	r0, [r7, #0]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	460b      	mov	r3, r1
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	440b      	add	r3, r1
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4605      	mov	r5, r0
 8000c3e:	1d1c      	adds	r4, r3, #4
 8000c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	602b      	str	r3, [r5, #0]
	mFull_ = false;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2a08 	strb.w	r2, [r3, #2568]	; 0xa08
	if(--mSize_ == 0){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	801a      	strh	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	bf0c      	ite	eq
 8000c64:	2301      	moveq	r3, #1
 8000c66:	2300      	movne	r3, #0
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <_ZN11circ_bufferI8CANmsg_tLm128EtE4readEPS0_+0x68>
		mEmpty_ = true;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2201      	movs	r2, #1
 8000c72:	f883 2a09 	strb.w	r2, [r3, #2569]	; 0xa09
	if(++mTail_ == sCapacity_){
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f8b3 3a06 	ldrh.w	r3, [r3, #2566]	; 0xa06
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f8a3 2a06 	strh.w	r2, [r3, #2566]	; 0xa06
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f8b3 3a06 	ldrh.w	r3, [r3, #2566]	; 0xa06
 8000c8c:	2b80      	cmp	r3, #128	; 0x80
 8000c8e:	bf0c      	ite	eq
 8000c90:	2301      	moveq	r3, #1
 8000c92:	2300      	movne	r3, #0
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <_ZN11circ_bufferI8CANmsg_tLm128EtE4readEPS0_+0x94>
		mTail_ = 0;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f8a3 2a06 	strh.w	r2, [r3, #2566]	; 0xa06
	return EXIT_OK;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bcb0      	pop	{r4, r5, r7}
 8000cac:	4770      	bx	lr

08000cae <_ZNSt8functionIFvvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fc23 	bl	8000504 <_ZNSt14_Function_baseD1Ev>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <_ZN5STM324gpioD1Ev>:
};


namespace STM32{

    class gpio{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ffeb 	bl	8000cae <_ZNSt8functionIFvvEED1Ev>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <_Z41__static_initialization_and_destruction_0ii>:
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d109      	bne.n	8000d08 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d104      	bne.n	8000d08 <_Z41__static_initialization_and_destruction_0ii+0x24>
static STM32::gpio canMsgLostLED(LD2_GPIO_Port, LD2_Pin);
 8000cfe:	2280      	movs	r2, #128	; 0x80
 8000d00:	4909      	ldr	r1, [pc, #36]	; (8000d28 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000d02:	480a      	ldr	r0, [pc, #40]	; (8000d2c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8000d04:	f000 fb21 	bl	800134a <_ZN5STM324gpioC1EP12GPIO_TypeDeft>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d107      	bne.n	8000d1e <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d102      	bne.n	8000d1e <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8000d1a:	f7ff ffd5 	bl	8000cc8 <_ZN5STM324gpioD1Ev>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40020400 	.word	0x40020400
 8000d2c:	200003f8 	.word	0x200003f8

08000d30 <_GLOBAL__sub_I__Z21CANmaster_constructorP11CANmaster_tP19__CAN_HandleTypeDefm>:
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff ffd3 	bl	8000ce4 <_Z41__static_initialization_and_destruction_0ii>
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_GLOBAL__sub_D__Z21CANmaster_constructorP11CANmaster_tP19__CAN_HandleTypeDefm>:
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff ffcb 	bl	8000ce4 <_Z41__static_initialization_and_destruction_0ii>
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm>:
#include "CANmsg.h"

#define MASK_GET_NODE_ID 0x00000007

bool CANmsg_make_from_raw_data(CANmsg_t *me, uint8_t *rxData, uint32_t DLC, uint32_t StdId)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	603b      	str	r3, [r7, #0]
	if( (rxData == 0) || (me == 0) || (DLC > MAX_LEN_PAYLOAD_CAN) )
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d005      	beq.n	8000d70 <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm+0x20>
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm+0x20>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b08      	cmp	r3, #8
 8000d6e:	d901      	bls.n	8000d74 <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm+0x24>
	{
		return false;
 8000d70:	2300      	movs	r3, #0
 8000d72:	e015      	b.n	8000da0 <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm+0x50>
	}

	me->id = StdId>>3;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	08da      	lsrs	r2, r3, #3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	60da      	str	r2, [r3, #12]
	me->lenPayload = DLC;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	609a      	str	r2, [r3, #8]
	me->nodeID = StdId & MASK_GET_NODE_ID;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	f003 0207 	and.w	r2, r3, #7
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
	if(DLC>0)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d005      	beq.n	8000d9e <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm+0x4e>
	{
		memcpy(me->payload, rxData, DLC);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	68b9      	ldr	r1, [r7, #8]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f00b f88f 	bl	800bebc <memcpy>
	}
	return true;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_Z18CANmsg_set_payloadP8CANmsg_tPhm>:

bool CANmsg_set_payload(CANmsg_t *me, uint8_t *payload, uint32_t lenPayload)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
	if( (me==0) || (payload==0) )
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d002      	beq.n	8000dc0 <_Z18CANmsg_set_payloadP8CANmsg_tPhm+0x18>
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d101      	bne.n	8000dc4 <_Z18CANmsg_set_payloadP8CANmsg_tPhm+0x1c>
	{
		return false;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e015      	b.n	8000df0 <_Z18CANmsg_set_payloadP8CANmsg_tPhm+0x48>
	}

	if(lenPayload > MAX_LEN_PAYLOAD_CAN)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b08      	cmp	r3, #8
 8000dc8:	d901      	bls.n	8000dce <_Z18CANmsg_set_payloadP8CANmsg_tPhm+0x26>
	{
		return false;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e010      	b.n	8000df0 <_Z18CANmsg_set_payloadP8CANmsg_tPhm+0x48>
	}

	if(lenPayload>0)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d009      	beq.n	8000de8 <_Z18CANmsg_set_payloadP8CANmsg_tPhm+0x40>
	{
		memcpy(me->payload, payload, lenPayload);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f00b f86e 	bl	800bebc <memcpy>
		me->lenPayload = lenPayload;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	e002      	b.n	8000dee <_Z18CANmsg_set_payloadP8CANmsg_tPhm+0x46>
	}
	else
	{
		me->lenPayload = 0;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
	}

	return true;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <_Z16PCIF_constructorP6PCIF_t>:

STM32::gpio redLED(PORT_RED_LED, PIN_RED_LED);
uint8_t flagBusy = 0;

void PCIF_constructor(PCIF_t *me)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	stateMachine_constructor(&me->super, (stateHandler_t)&PCIF_initial);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4904      	ldr	r1, [pc, #16]	; (8000e14 <_Z16PCIF_constructorP6PCIF_t+0x1c>)
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 ff17 	bl	8001c38 <_Z24stateMachine_constructorP14stateMachine_tPF7state_tPvhE>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	08000e19 	.word	0x08000e19

08000e18 <_Z12PCIF_initialP6PCIF_t>:

state_t PCIF_initial(PCIF_t *me)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	return stateMachine_transition((stateMachine_t*)me, (stateHandler_t) PCIF_active);
 8000e20:	4904      	ldr	r1, [pc, #16]	; (8000e34 <_Z12PCIF_initialP6PCIF_t+0x1c>)
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 ff4b 	bl	8001cbe <_Z23stateMachine_transitionP14stateMachine_tPF7state_tPvhE>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	08000e39 	.word	0x08000e39

08000e38 <_Z11PCIF_activeP6PCIF_th>:

state_t PCIF_active(PCIF_t *me, event_t const e)
{
 8000e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e3a:	b0a1      	sub	sp, #132	; 0x84
 8000e3c:	af06      	add	r7, sp, #24
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	460b      	mov	r3, r1
 8000e42:	72fb      	strb	r3, [r7, #11]
	uint32_t i;
	PCIFmsg_t msg;
	uint8_t buf[MAX_PACKET_SIZE_PCIF];

	switch(e)
 8000e44:	7afb      	ldrb	r3, [r7, #11]
 8000e46:	2b0c      	cmp	r3, #12
 8000e48:	f000 8088 	beq.w	8000f5c <_Z11PCIF_activeP6PCIF_th+0x124>
 8000e4c:	2b0c      	cmp	r3, #12
 8000e4e:	f300 8126 	bgt.w	800109e <_Z11PCIF_activeP6PCIF_th+0x266>
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d002      	beq.n	8000e5c <_Z11PCIF_activeP6PCIF_th+0x24>
 8000e56:	2b0b      	cmp	r3, #11
 8000e58:	d015      	beq.n	8000e86 <_Z11PCIF_activeP6PCIF_th+0x4e>
 8000e5a:	e120      	b.n	800109e <_Z11PCIF_activeP6PCIF_th+0x266>
	{
		case EV_ENTRY:
			p_PCIFTxBuffer->write(welcome);
 8000e5c:	4b92      	ldr	r3, [pc, #584]	; (80010a8 <_Z11PCIF_activeP6PCIF_th+0x270>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	4e92      	ldr	r6, [pc, #584]	; (80010ac <_Z11PCIF_activeP6PCIF_th+0x274>)
 8000e64:	466c      	mov	r4, sp
 8000e66:	f106 050c 	add.w	r5, r6, #12
 8000e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e72:	6020      	str	r0, [r4, #0]
 8000e74:	3404      	adds	r4, #4
 8000e76:	8021      	strh	r1, [r4, #0]
 8000e78:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff fdcd 	bl	8000a1c <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_>
			return HANDLED;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e10c      	b.n	80010a0 <_Z11PCIF_activeP6PCIF_th+0x268>

		case EV_COMPUTERIF_SEND_MSG:
			i = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	667b      	str	r3, [r7, #100]	; 0x64

			while( (flagUSBsendBusy == 0) && (!(p_PCIFTxBuffer->is_empty())) && (i < MAX_CONSECUTIVE_TRANSFERS))
 8000e8a:	e04d      	b.n	8000f28 <_Z11PCIF_activeP6PCIF_th+0xf0>
			{
				p_PCIFTxBuffer->read(&msg);
 8000e8c:	4b86      	ldr	r3, [pc, #536]	; (80010a8 <_Z11PCIF_activeP6PCIF_th+0x270>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e94:	4611      	mov	r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f929 	bl	80010ee <_ZN11circ_bufferI9PCIFmsg_tLm128EtE4readEPS0_>

				// Setea el command
				buf[0] = msg.cmd;
 8000e9c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000ea0:	753b      	strb	r3, [r7, #20]

				// Setea el len del payload
				buf[1] = msg.lenPayload;
 8000ea2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000ea6:	757b      	strb	r3, [r7, #21]

				// Copia el payload
				memcpy(&buf[2], msg.payload, msg.lenPayload);
 8000ea8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000eac:	461a      	mov	r2, r3
 8000eae:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f00a ffff 	bl	800bebc <memcpy>

				// Se appendea el \r y \n
				buf[2+msg.lenPayload]   = '\r';
 8000ebe:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	3360      	adds	r3, #96	; 0x60
 8000ec6:	f107 0208 	add.w	r2, r7, #8
 8000eca:	4413      	add	r3, r2
 8000ecc:	220d      	movs	r2, #13
 8000ece:	f803 2c54 	strb.w	r2, [r3, #-84]
				buf[2+msg.lenPayload+1] = '\n';
 8000ed2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000ed6:	3303      	adds	r3, #3
 8000ed8:	3360      	adds	r3, #96	; 0x60
 8000eda:	f107 0208 	add.w	r2, r7, #8
 8000ede:	4413      	add	r3, r2
 8000ee0:	220a      	movs	r2, #10
 8000ee2:	f803 2c54 	strb.w	r2, [r3, #-84]

				if( CDC_Transmit_FS(buf, msg.lenPayload+4) == 1 )
 8000ee6:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	3304      	adds	r3, #4
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f00a fa00 	bl	800b2fc <CDC_Transmit_FS>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	bf0c      	ite	eq
 8000f02:	2301      	moveq	r3, #1
 8000f04:	2300      	movne	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00a      	beq.n	8000f22 <_Z11PCIF_activeP6PCIF_th+0xea>
				{
					if( flagBusy == 0 )
 8000f0c:	4b68      	ldr	r3, [pc, #416]	; (80010b0 <_Z11PCIF_activeP6PCIF_th+0x278>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d106      	bne.n	8000f22 <_Z11PCIF_activeP6PCIF_th+0xea>
					{
						redLED.write(GPIO_ST::HIGH);
 8000f14:	2101      	movs	r1, #1
 8000f16:	4867      	ldr	r0, [pc, #412]	; (80010b4 <_Z11PCIF_activeP6PCIF_th+0x27c>)
 8000f18:	f000 fa2d 	bl	8001376 <_ZN5STM324gpio5writeE7GPIO_ST>
						flagBusy = 1;
 8000f1c:	4b64      	ldr	r3, [pc, #400]	; (80010b0 <_Z11PCIF_activeP6PCIF_th+0x278>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
					}
				}
				i++;
 8000f22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f24:	3301      	adds	r3, #1
 8000f26:	667b      	str	r3, [r7, #100]	; 0x64
			while( (flagUSBsendBusy == 0) && (!(p_PCIFTxBuffer->is_empty())) && (i < MAX_CONSECUTIVE_TRANSFERS))
 8000f28:	4b63      	ldr	r3, [pc, #396]	; (80010b8 <_Z11PCIF_activeP6PCIF_th+0x280>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10f      	bne.n	8000f52 <_Z11PCIF_activeP6PCIF_th+0x11a>
 8000f32:	4b5d      	ldr	r3, [pc, #372]	; (80010a8 <_Z11PCIF_activeP6PCIF_th+0x270>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f8ca 	bl	80010d0 <_ZN11circ_bufferI9PCIFmsg_tLm128EtE8is_emptyEv>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f083 0301 	eor.w	r3, r3, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d004      	beq.n	8000f52 <_Z11PCIF_activeP6PCIF_th+0x11a>
 8000f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d801      	bhi.n	8000f52 <_Z11PCIF_activeP6PCIF_th+0x11a>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <_Z11PCIF_activeP6PCIF_th+0x11c>
 8000f52:	2300      	movs	r3, #0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d199      	bne.n	8000e8c <_Z11PCIF_activeP6PCIF_th+0x54>
			}

			return HANDLED;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	e0a1      	b.n	80010a0 <_Z11PCIF_activeP6PCIF_th+0x268>

		case EV_COMPUTERIF_PROCESS_NEW_MSG:
			i = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	667b      	str	r3, [r7, #100]	; 0x64
			while( (p_PCIFRxBuffer->read(&msg) != 0) && (i < MAX_CONSECUTIVE_MSG_PROCESSING) )
 8000f60:	e087      	b.n	8001072 <_Z11PCIF_activeP6PCIF_th+0x23a>
			{
				switch(msg.cmd)
 8000f62:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000f66:	3b01      	subs	r3, #1
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d87c      	bhi.n	8001066 <_Z11PCIF_activeP6PCIF_th+0x22e>
 8000f6c:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <_Z11PCIF_activeP6PCIF_th+0x13c>)
 8000f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f72:	bf00      	nop
 8000f74:	08000f99 	.word	0x08000f99
 8000f78:	08000fdd 	.word	0x08000fdd
 8000f7c:	08000feb 	.word	0x08000feb
 8000f80:	0800105b 	.word	0x0800105b
 8000f84:	08000fc1 	.word	0x08000fc1
 8000f88:	08000fcf 	.word	0x08000fcf
 8000f8c:	08000ff9 	.word	0x08000ff9
 8000f90:	0800103f 	.word	0x0800103f
 8000f94:	0800104d 	.word	0x0800104d
				{
					case whoAmI:
						p_PCIFTxBuffer->write(msgWhoAmI);
 8000f98:	4b43      	ldr	r3, [pc, #268]	; (80010a8 <_Z11PCIF_activeP6PCIF_th+0x270>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4e47      	ldr	r6, [pc, #284]	; (80010bc <_Z11PCIF_activeP6PCIF_th+0x284>)
 8000fa0:	466c      	mov	r4, sp
 8000fa2:	f106 050c 	add.w	r5, r6, #12
 8000fa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000faa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fae:	6020      	str	r0, [r4, #0]
 8000fb0:	3404      	adds	r4, #4
 8000fb2:	8021      	strh	r1, [r4, #0]
 8000fb4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff fd2f 	bl	8000a1c <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_>
						break;
 8000fbe:	e055      	b.n	800106c <_Z11PCIF_activeP6PCIF_th+0x234>

					case enableCANbus:
						p_eventsBuffer->write(EV_CAN_TURN_ON);
 8000fc0:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <_Z11PCIF_activeP6PCIF_th+0x288>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f901 	bl	80011ce <_ZN11circ_bufferIhLm128EtE5writeEh>
						break;
 8000fcc:	e04e      	b.n	800106c <_Z11PCIF_activeP6PCIF_th+0x234>

					case disableCANbus:
						p_eventsBuffer->write(EV_CAN_TURN_OFF);
 8000fce:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <_Z11PCIF_activeP6PCIF_th+0x288>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2105      	movs	r1, #5
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f8fa 	bl	80011ce <_ZN11circ_bufferIhLm128EtE5writeEh>
						break;
 8000fda:	e047      	b.n	800106c <_Z11PCIF_activeP6PCIF_th+0x234>

					case startTimeStampService:
						p_eventsBuffer->write(EV_START_TIMESTAMP_SERVICE);
 8000fdc:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <_Z11PCIF_activeP6PCIF_th+0x288>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	210d      	movs	r1, #13
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f8f3 	bl	80011ce <_ZN11circ_bufferIhLm128EtE5writeEh>
						break;
 8000fe8:	e040      	b.n	800106c <_Z11PCIF_activeP6PCIF_th+0x234>

					case stopTimeStampService:
						p_eventsBuffer->write(EV_STOP_TIMESTAMP_SERVICE);
 8000fea:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <_Z11PCIF_activeP6PCIF_th+0x288>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	210e      	movs	r1, #14
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f8ec 	bl	80011ce <_ZN11circ_bufferIhLm128EtE5writeEh>
						break;
 8000ff6:	e039      	b.n	800106c <_Z11PCIF_activeP6PCIF_th+0x234>

					case forwardCANmsg:
						if( CANmsg_set_payload(&msgToForward, msg.payload, msg.lenPayload) == true )
 8000ff8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001002:	4619      	mov	r1, r3
 8001004:	482f      	ldr	r0, [pc, #188]	; (80010c4 <_Z11PCIF_activeP6PCIF_th+0x28c>)
 8001006:	f7ff fecf 	bl	8000da8 <_Z18CANmsg_set_payloadP8CANmsg_tPhm>
 800100a:	4603      	mov	r3, r0
 800100c:	2b01      	cmp	r3, #1
 800100e:	bf0c      	ite	eq
 8001010:	2301      	moveq	r3, #1
 8001012:	2300      	movne	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d027      	beq.n	800106a <_Z11PCIF_activeP6PCIF_th+0x232>
						{
							msgToForward.id = forwardedData;
 800101a:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <_Z11PCIF_activeP6PCIF_th+0x28c>)
 800101c:	2208      	movs	r2, #8
 800101e:	60da      	str	r2, [r3, #12]
							p_canTxBuffer->write(msgToForward);
 8001020:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <_Z11PCIF_activeP6PCIF_th+0x290>)
 8001022:	681c      	ldr	r4, [r3, #0]
 8001024:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <_Z11PCIF_activeP6PCIF_th+0x28c>)
 8001026:	466d      	mov	r5, sp
 8001028:	f103 020c 	add.w	r2, r3, #12
 800102c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001030:	e885 0003 	stmia.w	r5, {r0, r1}
 8001034:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001036:	4620      	mov	r0, r4
 8001038:	f7ff fd79 	bl	8000b2e <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_>
						}
						break;
 800103c:	e015      	b.n	800106a <_Z11PCIF_activeP6PCIF_th+0x232>

					case activateCANsniffer:
						p_eventsBuffer->write(EV_CAN_ACTIVATE_SNIFFER);
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <_Z11PCIF_activeP6PCIF_th+0x288>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2109      	movs	r1, #9
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f8c2 	bl	80011ce <_ZN11circ_bufferIhLm128EtE5writeEh>
						break;
 800104a:	e00f      	b.n	800106c <_Z11PCIF_activeP6PCIF_th+0x234>

					case deactivateCANsniffer:
						p_eventsBuffer->write(EV_CAN_DEACTIVATE_SNIFFER);
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <_Z11PCIF_activeP6PCIF_th+0x288>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	210a      	movs	r1, #10
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f8bb 	bl	80011ce <_ZN11circ_bufferIhLm128EtE5writeEh>
						break;
 8001058:	e008      	b.n	800106c <_Z11PCIF_activeP6PCIF_th+0x234>

					case dataTimeStampService:
						p_eventsBuffer->write(EV_REQUEST_TIMESTAMP);
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <_Z11PCIF_activeP6PCIF_th+0x288>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	210f      	movs	r1, #15
 8001060:	4618      	mov	r0, r3
 8001062:	f000 f8b4 	bl	80011ce <_ZN11circ_bufferIhLm128EtE5writeEh>

					default:
						break;
 8001066:	bf00      	nop
 8001068:	e000      	b.n	800106c <_Z11PCIF_activeP6PCIF_th+0x234>
						break;
 800106a:	bf00      	nop
				}
				i++;
 800106c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800106e:	3301      	adds	r3, #1
 8001070:	667b      	str	r3, [r7, #100]	; 0x64
			while( (p_PCIFRxBuffer->read(&msg) != 0) && (i < MAX_CONSECUTIVE_MSG_PROCESSING) )
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <_Z11PCIF_activeP6PCIF_th+0x294>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f836 	bl	80010ee <_ZN11circ_bufferI9PCIFmsg_tLm128EtE4readEPS0_>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d004      	beq.n	8001092 <_Z11PCIF_activeP6PCIF_th+0x25a>
 8001088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800108a:	2b02      	cmp	r3, #2
 800108c:	d801      	bhi.n	8001092 <_Z11PCIF_activeP6PCIF_th+0x25a>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <_Z11PCIF_activeP6PCIF_th+0x25c>
 8001092:	2300      	movs	r3, #0
 8001094:	2b00      	cmp	r3, #0
 8001096:	f47f af64 	bne.w	8000f62 <_Z11PCIF_activeP6PCIF_th+0x12a>
			}

			return HANDLED;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <_Z11PCIF_activeP6PCIF_th+0x268>
	}

	return IGNORED;
 800109e:	2301      	movs	r3, #1

}
 80010a0:	4618      	mov	r0, r3
 80010a2:	376c      	adds	r7, #108	; 0x6c
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a8:	0800bfdc 	.word	0x0800bfdc
 80010ac:	200000b4 	.word	0x200000b4
 80010b0:	20000440 	.word	0x20000440
 80010b4:	20000428 	.word	0x20000428
 80010b8:	20000424 	.word	0x20000424
 80010bc:	20000090 	.word	0x20000090
 80010c0:	0800bfd0 	.word	0x0800bfd0
 80010c4:	20000410 	.word	0x20000410
 80010c8:	0800bfd4 	.word	0x0800bfd4
 80010cc:	0800bfe0 	.word	0x0800bfe0

080010d0 <_ZN11circ_bufferI9PCIFmsg_tLm128EtE8is_emptyEv>:
bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::is_empty(){
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	return mEmpty_;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010de:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <_ZN11circ_bufferI9PCIFmsg_tLm128EtE4readEPS0_>:
bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::read(bufferDataType* pData)
 80010ee:	b4f0      	push	{r4, r5, r6, r7}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]
	if (mEmpty_){
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010fe:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <_ZN11circ_bufferI9PCIFmsg_tLm128EtE4readEPS0_+0x1c>
		return EXIT_ERROR;
 8001106:	2300      	movs	r3, #0
 8001108:	e05c      	b.n	80011c4 <_ZN11circ_bufferI9PCIFmsg_tLm128EtE4readEPS0_+0xd6>
	*pData = mBuffer_[mTail_];
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001110:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001114:	4619      	mov	r1, r3
 8001116:	6838      	ldr	r0, [r7, #0]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	440b      	add	r3, r1
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	3302      	adds	r3, #2
 8001126:	f103 0420 	add.w	r4, r3, #32
 800112a:	4602      	mov	r2, r0
 800112c:	4619      	mov	r1, r3
 800112e:	f8d1 c000 	ldr.w	ip, [r1]
 8001132:	684e      	ldr	r6, [r1, #4]
 8001134:	688d      	ldr	r5, [r1, #8]
 8001136:	68c9      	ldr	r1, [r1, #12]
 8001138:	f8c2 c000 	str.w	ip, [r2]
 800113c:	6056      	str	r6, [r2, #4]
 800113e:	6095      	str	r5, [r2, #8]
 8001140:	60d1      	str	r1, [r2, #12]
 8001142:	3310      	adds	r3, #16
 8001144:	3010      	adds	r0, #16
 8001146:	42a3      	cmp	r3, r4
 8001148:	d1ef      	bne.n	800112a <_ZN11circ_bufferI9PCIFmsg_tLm128EtE4readEPS0_+0x3c>
 800114a:	4602      	mov	r2, r0
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	8013      	strh	r3, [r2, #0]
	mFull_ = false;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
	if(--mSize_ == 0){
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	3b01      	subs	r3, #1
 8001162:	b29a      	uxth	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	801a      	strh	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	bf0c      	ite	eq
 8001170:	2301      	moveq	r3, #1
 8001172:	2300      	movne	r3, #0
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d005      	beq.n	8001186 <_ZN11circ_bufferI9PCIFmsg_tLm128EtE4readEPS0_+0x98>
		mEmpty_ = true;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if(++mTail_ == sCapacity_){
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800118c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001190:	3301      	adds	r3, #1
 8001192:	b29a      	uxth	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011a4:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80011a8:	2b80      	cmp	r3, #128	; 0x80
 80011aa:	bf0c      	ite	eq
 80011ac:	2301      	moveq	r3, #1
 80011ae:	2300      	movne	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <_ZN11circ_bufferI9PCIFmsg_tLm128EtE4readEPS0_+0xd4>
		mTail_ = 0;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011bc:	2200      	movs	r2, #0
 80011be:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	return EXIT_OK;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bcf0      	pop	{r4, r5, r6, r7}
 80011cc:	4770      	bx	lr

080011ce <_ZN11circ_bufferIhLm128EtE5writeEh>:
bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::write(bufferDataType data)
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	460b      	mov	r3, r1
 80011d8:	70fb      	strb	r3, [r7, #3]
	mBuffer_[mHead_] = data;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80011e0:	461a      	mov	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	78fa      	ldrb	r2, [r7, #3]
 80011e8:	709a      	strb	r2, [r3, #2]
	mEmpty_ = false;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	if(++mHead_ == sCapacity_){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80011f8:	3301      	adds	r3, #1
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001208:	2b80      	cmp	r3, #128	; 0x80
 800120a:	bf0c      	ite	eq
 800120c:	2301      	moveq	r3, #1
 800120e:	2300      	movne	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <_ZN11circ_bufferIhLm128EtE5writeEh+0x50>
		mHead_ = 0;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	if(mFull_ == true){
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001224:	2b01      	cmp	r3, #1
 8001226:	d10f      	bne.n	8001248 <_ZN11circ_bufferIhLm128EtE5writeEh+0x7a>
		mTail_ = mTail_ + 1 == sCapacity_ ? 0 : mTail_ + 1; // mTail_ = ++mTail_ == sCapacity_ ? 0 : mTail_;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800122e:	2b7f      	cmp	r3, #127	; 0x7f
 8001230:	d005      	beq.n	800123e <_ZN11circ_bufferIhLm128EtE5writeEh+0x70>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001238:	3301      	adds	r3, #1
 800123a:	b29a      	uxth	r2, r3
 800123c:	e000      	b.n	8001240 <_ZN11circ_bufferIhLm128EtE5writeEh+0x72>
 800123e:	2200      	movs	r2, #0
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8001246:	e012      	b.n	800126e <_ZN11circ_bufferIhLm128EtE5writeEh+0xa0>
	}else if(++mSize_ == sCapacity_){
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	b29a      	uxth	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	801a      	strh	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	2b80      	cmp	r3, #128	; 0x80
 800125a:	bf0c      	ite	eq
 800125c:	2301      	moveq	r3, #1
 800125e:	2300      	movne	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <_ZN11circ_bufferIhLm128EtE5writeEh+0xa0>
		mFull_ = true;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	return EXIT_OK;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_Z41__static_initialization_and_destruction_0ii>:
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d10a      	bne.n	80012a2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001292:	4293      	cmp	r3, r2
 8001294:	d105      	bne.n	80012a2 <_Z41__static_initialization_and_destruction_0ii+0x26>
STM32::gpio redLED(PORT_RED_LED, PIN_RED_LED);
 8001296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129a:	4909      	ldr	r1, [pc, #36]	; (80012c0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800129e:	f000 f854 	bl	800134a <_ZN5STM324gpioC1EP12GPIO_TypeDeft>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d107      	bne.n	80012b8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d102      	bne.n	80012b8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80012b4:	f7ff fd08 	bl	8000cc8 <_ZN5STM324gpioD1Ev>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40020400 	.word	0x40020400
 80012c4:	20000428 	.word	0x20000428

080012c8 <_GLOBAL__sub_I_flagUSBsendBusy>:
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012d0:	2001      	movs	r0, #1
 80012d2:	f7ff ffd3 	bl	800127c <_Z41__static_initialization_and_destruction_0ii>
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_GLOBAL__sub_D_flagUSBsendBusy>:
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
 80012dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff ffcb 	bl	800127c <_Z41__static_initialization_and_destruction_0ii>
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_Z23PCIFmsg_make_from_bytesPhhP9PCIFmsg_t>:
#include "PCIFmsg.h"

/** Recibe un array de bytes y lo convierte en un tipo de dato PCIFmsg_t, rellenando los campos correspondientes.
 *  */
uint8_t PCIFmsg_make_from_bytes(uint8_t *buffer, uint8_t lenBuffer, PCIFmsg_t *msg)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	460b      	mov	r3, r1
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	72fb      	strb	r3, [r7, #11]
	if((buffer == 0) || (msg == 0))
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d002      	beq.n	8001302 <_Z23PCIFmsg_make_from_bytesPhhP9PCIFmsg_t+0x1a>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <_Z23PCIFmsg_make_from_bytesPhhP9PCIFmsg_t+0x1e>
	{
		return 1;
 8001302:	2301      	movs	r3, #1
 8001304:	e01d      	b.n	8001342 <_Z23PCIFmsg_make_from_bytesPhhP9PCIFmsg_t+0x5a>
	}
	if(lenBuffer < 4)
 8001306:	7afb      	ldrb	r3, [r7, #11]
 8001308:	2b03      	cmp	r3, #3
 800130a:	d801      	bhi.n	8001310 <_Z23PCIFmsg_make_from_bytesPhhP9PCIFmsg_t+0x28>
	{
		return 2;
 800130c:	2302      	movs	r3, #2
 800130e:	e018      	b.n	8001342 <_Z23PCIFmsg_make_from_bytesPhhP9PCIFmsg_t+0x5a>
	}

	msg->cmd = buffer[0];
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	781a      	ldrb	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	msg->lenPayload = buffer[1];
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	785a      	ldrb	r2, [r3, #1]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f883 2020 	strb.w	r2, [r3, #32]
	if(msg->lenPayload > 0)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3020 	ldrb.w	r3, [r3, #32]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d008      	beq.n	8001340 <_Z23PCIFmsg_make_from_bytesPhhP9PCIFmsg_t+0x58>
	{
		memcpy(&(msg->payload), &buffer[2], msg->lenPayload);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	1c99      	adds	r1, r3, #2
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133a:	461a      	mov	r2, r3
 800133c:	f00a fdbe 	bl	800bebc <memcpy>
	}

	return 0;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <_ZN5STM324gpioC1EP12GPIO_TypeDeft>:
#include "stm32f7xx_hal.h"


namespace STM32{

    gpio::gpio(GPIO_TypeDef* pPortHandler, uint16_t pin)
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	4613      	mov	r3, r2
 8001356:	80fb      	strh	r3, [r7, #6]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f844 	bl	80013e8 <_ZNSt8functionIFvvEEC1Ev>
    {
        m_portHandler = pPortHandler;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	611a      	str	r2, [r3, #16]
        m_pin = pin;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	88fa      	ldrh	r2, [r7, #6]
 800136a:	829a      	strh	r2, [r3, #20]
    }
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <_ZN5STM324gpio5writeE7GPIO_ST>:
    {
        HAL_GPIO_TogglePin(m_portHandler, m_pin);
    }

    void gpio::write(GPIO_ST st)
    {
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
        GPIO_PinState pinState = map_hal_st_to_igpio_st(st); 
 8001380:	6838      	ldr	r0, [r7, #0]
 8001382:	f000 f80e 	bl	80013a2 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(m_portHandler, m_pin, pinState);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6918      	ldr	r0, [r3, #16]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	8a9b      	ldrh	r3, [r3, #20]
 8001392:	7bfa      	ldrb	r2, [r7, #15]
 8001394:	4619      	mov	r1, r3
 8001396:	f002 fd8d 	bl	8003eb4 <HAL_GPIO_WritePin>
    }
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>:

    GPIO_PinState gpio::map_hal_st_to_igpio_st(GPIO_ST st)
	{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
		return st == GPIO_ST::HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x12>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x14>
 80013b4:	2300      	movs	r3, #0
	}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	461a      	mov	r2, r3
 80013ce:	2300      	movs	r3, #0
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	6053      	str	r3, [r2, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	461a      	mov	r2, r3
 80013f4:	2300      	movs	r3, #0
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	6053      	str	r3, [r2, #4]
 80013fa:	6093      	str	r3, [r2, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ffdf 	bl	80013c2 <_ZNSt14_Function_baseC1Ev>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001414:	b5b0      	push	{r4, r5, r7, lr}
 8001416:	b090      	sub	sp, #64	; 0x40
 8001418:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800141a:	f000 ffcc 	bl	80023b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141e:	f000 f8e7 	bl	80015f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001422:	f000 fa77 	bl	8001914 <MX_GPIO_Init>
  MX_ETH_Init();
 8001426:	f000 f991 	bl	800174c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800142a:	f000 fa3f 	bl	80018ac <MX_USART3_UART_Init>
  MX_CAN1_Init();
 800142e:	f000 f951 	bl	80016d4 <MX_CAN1_Init>
  MX_USB_DEVICE_Init();
 8001432:	f009 fe83 	bl	800b13c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001436:	f000 f9db 	bl	80017f0 <MX_TIM3_Init>
  /* USER CODE BEGIN WHILE */
  //STM32::gpio redLED(PORT_RED_LED, PIN_RED_LED);
  //STM32::gpio greenLED(PORT_GREEN_LED, PIN_GREEN_LED);
  //STM32::gpio blueLED(PORT_BLUE_LED, PIN_BLUE_LED);

  CANmaster_constructor(&canMaster, &hcan1, CAN_MASTER_NODE_ID);
 800143a:	2200      	movs	r2, #0
 800143c:	495d      	ldr	r1, [pc, #372]	; (80015b4 <main+0x1a0>)
 800143e:	485e      	ldr	r0, [pc, #376]	; (80015b8 <main+0x1a4>)
 8001440:	f7ff f874 	bl	800052c <_Z21CANmaster_constructorP11CANmaster_tP19__CAN_HandleTypeDefm>
  //CANmaster_constructor(&canMaster, &hcan1, CAN_MASTER_NODE_ID, &blueLED, &redLED, &greenLED);
  PCIF_constructor(&pcIf);
 8001444:	485d      	ldr	r0, [pc, #372]	; (80015bc <main+0x1a8>)
 8001446:	f7ff fcd7 	bl	8000df8 <_Z16PCIF_constructorP6PCIF_t>
  timeStampService_constructor(&timeStampService, &htim3);
 800144a:	495d      	ldr	r1, [pc, #372]	; (80015c0 <main+0x1ac>)
 800144c:	485d      	ldr	r0, [pc, #372]	; (80015c4 <main+0x1b0>)
 800144e:	f000 fe95 	bl	800217c <_Z28timeStampService_constructorP18timeStampService_tP17TIM_HandleTypeDef>


  stateMachine_init((stateMachine_t*)&canMaster);
 8001452:	4859      	ldr	r0, [pc, #356]	; (80015b8 <main+0x1a4>)
 8001454:	f000 fbfe 	bl	8001c54 <_Z17stateMachine_initP14stateMachine_t>
  stateMachine_init((stateMachine_t*)&pcIf);
 8001458:	4858      	ldr	r0, [pc, #352]	; (80015bc <main+0x1a8>)
 800145a:	f000 fbfb 	bl	8001c54 <_Z17stateMachine_initP14stateMachine_t>

  stateMachine_init((stateMachine_t*)&timeStampService);
 800145e:	4859      	ldr	r0, [pc, #356]	; (80015c4 <main+0x1b0>)
 8001460:	f000 fbf8 	bl	8001c54 <_Z17stateMachine_initP14stateMachine_t>


  HAL_Delay(5000);
 8001464:	f241 3088 	movw	r0, #5000	; 0x1388
 8001468:	f001 f802 	bl	8002470 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Me fijo si llegaron datos nuevos de USB.
	if(flagNewUSBdata == 1)
 800146c:	4b56      	ldr	r3, [pc, #344]	; (80015c8 <main+0x1b4>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b01      	cmp	r3, #1
 8001474:	bf0c      	ite	eq
 8001476:	2301      	moveq	r3, #1
 8001478:	2300      	movne	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d020      	beq.n	80014c2 <main+0xae>
	{
		// Genero un tipo de dato PCIFmsg_t y lo encolo.
		if( PCIFmsg_make_from_bytes(bufferNewUSBdata, lenNewUSBdata, &auxMsg) == 0 )
 8001480:	4b52      	ldr	r3, [pc, #328]	; (80015cc <main+0x1b8>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	1d3a      	adds	r2, r7, #4
 8001486:	4619      	mov	r1, r3
 8001488:	4851      	ldr	r0, [pc, #324]	; (80015d0 <main+0x1bc>)
 800148a:	f7ff ff2d 	bl	80012e8 <_Z23PCIFmsg_make_from_bytesPhhP9PCIFmsg_t>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	bf0c      	ite	eq
 8001494:	2301      	moveq	r3, #1
 8001496:	2300      	movne	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00e      	beq.n	80014bc <main+0xa8>
		{
			p_PCIFRxBuffer->write(auxMsg);
 800149e:	466c      	mov	r4, sp
 80014a0:	f107 0510 	add.w	r5, r7, #16
 80014a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014ac:	6020      	str	r0, [r4, #0]
 80014ae:	3404      	adds	r4, #4
 80014b0:	8021      	strh	r1, [r4, #0]
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b6:	4847      	ldr	r0, [pc, #284]	; (80015d4 <main+0x1c0>)
 80014b8:	f7ff fab0 	bl	8000a1c <_ZN11circ_bufferI9PCIFmsg_tLm128EtE5writeES0_>
		}

		// Bajo el flag, indicando que ya puedo seguir recibiendo datos de USB.
		flagNewUSBdata = 0;
 80014bc:	4b42      	ldr	r3, [pc, #264]	; (80015c8 <main+0x1b4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
	}

	// Verifica si hay nuevos datos provenientes del bus CAN.
	if(flagNewCANdataRx0 == 1)
 80014c2:	4b45      	ldr	r3, [pc, #276]	; (80015d8 <main+0x1c4>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	bf0c      	ite	eq
 80014cc:	2301      	moveq	r3, #1
 80014ce:	2300      	movne	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <main+0xd0>
	{
		p_eventsBuffer->write(EV_CAN_FETCH_NEW_MSGS);
 80014d6:	2108      	movs	r1, #8
 80014d8:	4840      	ldr	r0, [pc, #256]	; (80015dc <main+0x1c8>)
 80014da:	f7ff fe78 	bl	80011ce <_ZN11circ_bufferIhLm128EtE5writeEh>

		// Bajo el flag, indicando que ya le avisé al CAN master acerca de los datos nuevos
		flagNewCANdataRx0 = 0;
 80014de:	4b3e      	ldr	r3, [pc, #248]	; (80015d8 <main+0x1c4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
	}

	// Verifica si hay que enviar el próximo mensaje
	if(flagRequestTimestampData == 1)
 80014e4:	4b3e      	ldr	r3, [pc, #248]	; (80015e0 <main+0x1cc>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	bf0c      	ite	eq
 80014ee:	2301      	moveq	r3, #1
 80014f0:	2300      	movne	r3, #0
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <main+0xf2>
	{
		p_eventsBuffer->write(EV_REQUEST_TIMESTAMP);
 80014f8:	210f      	movs	r1, #15
 80014fa:	4838      	ldr	r0, [pc, #224]	; (80015dc <main+0x1c8>)
 80014fc:	f7ff fe67 	bl	80011ce <_ZN11circ_bufferIhLm128EtE5writeEh>
		// Se baja el flag
		flagRequestTimestampData = 0;
 8001500:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <main+0x1cc>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
	}

    // Verifica si hay mensajes de CAN esperando para ser enviados. En dicho caso, genera un evento.
	if(!p_canTxBuffer->is_empty())
 8001506:	4837      	ldr	r0, [pc, #220]	; (80015e4 <main+0x1d0>)
 8001508:	f7ff fb74 	bl	8000bf4 <_ZN11circ_bufferI8CANmsg_tLm128EtE8is_emptyEv>
 800150c:	4603      	mov	r3, r0
 800150e:	f083 0301 	eor.w	r3, r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <main+0x10c>
	{
	  p_eventsBuffer->write(EV_CAN_SEND_NEXT_MSG);
 8001518:	2106      	movs	r1, #6
 800151a:	4830      	ldr	r0, [pc, #192]	; (80015dc <main+0x1c8>)
 800151c:	f7ff fe57 	bl	80011ce <_ZN11circ_bufferIhLm128EtE5writeEh>
	}

	// Verifica si hay mensajes de CAN que están esperando para ser leidos. En dicho caso, genera un evento.
	if(!p_canRxBuffer->is_empty())
 8001520:	4831      	ldr	r0, [pc, #196]	; (80015e8 <main+0x1d4>)
 8001522:	f7ff fb67 	bl	8000bf4 <_ZN11circ_bufferI8CANmsg_tLm128EtE8is_emptyEv>
 8001526:	4603      	mov	r3, r0
 8001528:	f083 0301 	eor.w	r3, r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <main+0x126>
	{
	  p_eventsBuffer->write(EV_CAN_PROCESS_NEW_MSG);
 8001532:	2107      	movs	r1, #7
 8001534:	4829      	ldr	r0, [pc, #164]	; (80015dc <main+0x1c8>)
 8001536:	f7ff fe4a 	bl	80011ce <_ZN11circ_bufferIhLm128EtE5writeEh>
	}

	// Verifica si hay mensajes esperando para ser enviados a la PC. En dicho caso, genera un evento.
	if(!p_PCIFTxBuffer->is_empty())
 800153a:	482c      	ldr	r0, [pc, #176]	; (80015ec <main+0x1d8>)
 800153c:	f7ff fdc8 	bl	80010d0 <_ZN11circ_bufferI9PCIFmsg_tLm128EtE8is_emptyEv>
 8001540:	4603      	mov	r3, r0
 8001542:	f083 0301 	eor.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <main+0x140>
	{
	  p_eventsBuffer->write(EV_COMPUTERIF_SEND_MSG);
 800154c:	210b      	movs	r1, #11
 800154e:	4823      	ldr	r0, [pc, #140]	; (80015dc <main+0x1c8>)
 8001550:	f7ff fe3d 	bl	80011ce <_ZN11circ_bufferIhLm128EtE5writeEh>
	}

	// Verifica si hay mensajes esperando para ser leidos, provenientes de la PC. En dicho caso, genera un evento.
	if(!p_PCIFRxBuffer->is_empty())
 8001554:	481f      	ldr	r0, [pc, #124]	; (80015d4 <main+0x1c0>)
 8001556:	f7ff fdbb 	bl	80010d0 <_ZN11circ_bufferI9PCIFmsg_tLm128EtE8is_emptyEv>
 800155a:	4603      	mov	r3, r0
 800155c:	f083 0301 	eor.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <main+0x15a>
	{
	  p_eventsBuffer->write(EV_COMPUTERIF_PROCESS_NEW_MSG);
 8001566:	210c      	movs	r1, #12
 8001568:	481c      	ldr	r0, [pc, #112]	; (80015dc <main+0x1c8>)
 800156a:	f7ff fe30 	bl	80011ce <_ZN11circ_bufferIhLm128EtE5writeEh>
	}

	// Si hay eventos en el buffer de eventos, toma uno y lo dispatchea.
	if(!p_eventsBuffer->is_empty())
 800156e:	481b      	ldr	r0, [pc, #108]	; (80015dc <main+0x1c8>)
 8001570:	f000 fad9 	bl	8001b26 <_ZN11circ_bufferIhLm128EtE8is_emptyEv>
 8001574:	4603      	mov	r3, r0
 8001576:	f083 0301 	eor.w	r3, r3, #1
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	f43f af75 	beq.w	800146c <main+0x58>
	{
	  p_eventsBuffer->read(&event);
 8001582:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8001586:	4619      	mov	r1, r3
 8001588:	4814      	ldr	r0, [pc, #80]	; (80015dc <main+0x1c8>)
 800158a:	f000 fad9 	bl	8001b40 <_ZN11circ_bufferIhLm128EtE4readEPh>
	  stateMachine_dispatch((stateMachine_t*)&canMaster, event);
 800158e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001592:	4619      	mov	r1, r3
 8001594:	4808      	ldr	r0, [pc, #32]	; (80015b8 <main+0x1a4>)
 8001596:	f000 fb72 	bl	8001c7e <_Z21stateMachine_dispatchP14stateMachine_th>
	  stateMachine_dispatch((stateMachine_t*)&pcIf, event);
 800159a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800159e:	4619      	mov	r1, r3
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <main+0x1a8>)
 80015a2:	f000 fb6c 	bl	8001c7e <_Z21stateMachine_dispatchP14stateMachine_th>
	  stateMachine_dispatch((stateMachine_t*)&timeStampService, event);
 80015a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015aa:	4619      	mov	r1, r3
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <main+0x1b0>)
 80015ae:	f000 fb66 	bl	8001c7e <_Z21stateMachine_dispatchP14stateMachine_th>
	if(flagNewUSBdata == 1)
 80015b2:	e75b      	b.n	800146c <main+0x58>
 80015b4:	2000047c 	.word	0x2000047c
 80015b8:	20000670 	.word	0x20000670
 80015bc:	2000069c 	.word	0x2000069c
 80015c0:	20000554 	.word	0x20000554
 80015c4:	200006a0 	.word	0x200006a0
 80015c8:	20000628 	.word	0x20000628
 80015cc:	2000066c 	.word	0x2000066c
 80015d0:	2000062c 	.word	0x2000062c
 80015d4:	20002c50 	.word	0x20002c50
 80015d8:	2000066d 	.word	0x2000066d
 80015dc:	200006a8 	.word	0x200006a8
 80015e0:	2000066e 	.word	0x2000066e
 80015e4:	20000730 	.word	0x20000730
 80015e8:	2000113c 	.word	0x2000113c
 80015ec:	20001b48 	.word	0x20001b48

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b094      	sub	sp, #80	; 0x50
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	f107 0320 	add.w	r3, r7, #32
 80015fa:	2230      	movs	r2, #48	; 0x30
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f00a fc18 	bl	800be34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001614:	f003 ff20 	bl	8005458 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001618:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <SystemClock_Config+0xdc>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	4a2b      	ldr	r2, [pc, #172]	; (80016cc <SystemClock_Config+0xdc>)
 800161e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001622:	6413      	str	r3, [r2, #64]	; 0x40
 8001624:	4b29      	ldr	r3, [pc, #164]	; (80016cc <SystemClock_Config+0xdc>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <SystemClock_Config+0xe0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001638:	4a25      	ldr	r2, [pc, #148]	; (80016d0 <SystemClock_Config+0xe0>)
 800163a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <SystemClock_Config+0xe0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800164c:	2301      	movs	r3, #1
 800164e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001650:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001656:	2302      	movs	r3, #2
 8001658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800165a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800165e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001660:	2304      	movs	r3, #4
 8001662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001664:	2348      	movs	r3, #72	; 0x48
 8001666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001668:	2302      	movs	r3, #2
 800166a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800166c:	2303      	movs	r3, #3
 800166e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	4618      	mov	r0, r3
 8001676:	f003 feff 	bl	8005478 <HAL_RCC_OscConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800168a:	f000 f9e5 	bl	8001a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800168e:	230f      	movs	r3, #15
 8001690:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001692:	2302      	movs	r3, #2
 8001694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800169a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	2102      	movs	r1, #2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f004 f988 	bl	80059c0 <HAL_RCC_ClockConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80016c0:	f000 f9ca 	bl	8001a58 <Error_Handler>
  }
}
 80016c4:	bf00      	nop
 80016c6:	3750      	adds	r7, #80	; 0x50
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40007000 	.word	0x40007000

080016d4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_CAN1_Init+0x70>)
 80016da:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <MX_CAN1_Init+0x74>)
 80016dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <MX_CAN1_Init+0x70>)
 80016e0:	2203      	movs	r2, #3
 80016e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <MX_CAN1_Init+0x70>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <MX_CAN1_Init+0x70>)
 80016ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016f0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_CAN1_Init+0x70>)
 80016f4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80016f8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_CAN1_Init+0x70>)
 80016fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001700:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <MX_CAN1_Init+0x70>)
 8001704:	2200      	movs	r2, #0
 8001706:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_CAN1_Init+0x70>)
 800170a:	2200      	movs	r2, #0
 800170c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <MX_CAN1_Init+0x70>)
 8001710:	2200      	movs	r2, #0
 8001712:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_CAN1_Init+0x70>)
 8001716:	2201      	movs	r2, #1
 8001718:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <MX_CAN1_Init+0x70>)
 800171c:	2200      	movs	r2, #0
 800171e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_CAN1_Init+0x70>)
 8001722:	2200      	movs	r2, #0
 8001724:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001726:	4807      	ldr	r0, [pc, #28]	; (8001744 <MX_CAN1_Init+0x70>)
 8001728:	f000 fec6 	bl	80024b8 <HAL_CAN_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_CAN1_Init+0x6c>
  {
    Error_Handler();
 800173c:	f000 f98c 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2000047c 	.word	0x2000047c
 8001748:	40006400 	.word	0x40006400

0800174c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001750:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <MX_ETH_Init+0x8c>)
 8001752:	4a22      	ldr	r2, [pc, #136]	; (80017dc <MX_ETH_Init+0x90>)
 8001754:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <MX_ETH_Init+0x94>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800175c:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <MX_ETH_Init+0x94>)
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <MX_ETH_Init+0x94>)
 8001764:	22e1      	movs	r2, #225	; 0xe1
 8001766:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <MX_ETH_Init+0x94>)
 800176a:	2200      	movs	r2, #0
 800176c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <MX_ETH_Init+0x94>)
 8001770:	2200      	movs	r2, #0
 8001772:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <MX_ETH_Init+0x94>)
 8001776:	2200      	movs	r2, #0
 8001778:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_ETH_Init+0x8c>)
 800177c:	4a18      	ldr	r2, [pc, #96]	; (80017e0 <MX_ETH_Init+0x94>)
 800177e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <MX_ETH_Init+0x8c>)
 8001782:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001786:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MX_ETH_Init+0x8c>)
 800178a:	4a16      	ldr	r2, [pc, #88]	; (80017e4 <MX_ETH_Init+0x98>)
 800178c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <MX_ETH_Init+0x8c>)
 8001790:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <MX_ETH_Init+0x9c>)
 8001792:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001794:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_ETH_Init+0x8c>)
 8001796:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800179a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800179c:	480e      	ldr	r0, [pc, #56]	; (80017d8 <MX_ETH_Init+0x8c>)
 800179e:	f001 feb7 	bl	8003510 <HAL_ETH_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_ETH_Init+0x6a>
  {
    Error_Handler();
 80017b2:	f000 f951 	bl	8001a58 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80017b6:	2238      	movs	r2, #56	; 0x38
 80017b8:	2100      	movs	r1, #0
 80017ba:	480c      	ldr	r0, [pc, #48]	; (80017ec <MX_ETH_Init+0xa0>)
 80017bc:	f00a fb3a 	bl	800be34 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <MX_ETH_Init+0xa0>)
 80017c2:	2221      	movs	r2, #33	; 0x21
 80017c4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_ETH_Init+0xa0>)
 80017c8:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80017cc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <MX_ETH_Init+0xa0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200004a4 	.word	0x200004a4
 80017dc:	40028000 	.word	0x40028000
 80017e0:	20003d58 	.word	0x20003d58
 80017e4:	20000310 	.word	0x20000310
 80017e8:	20000270 	.word	0x20000270
 80017ec:	20000444 	.word	0x20000444

080017f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800180e:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <MX_TIM3_Init+0xb4>)
 8001810:	4a25      	ldr	r2, [pc, #148]	; (80018a8 <MX_TIM3_Init+0xb8>)
 8001812:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8001814:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <MX_TIM3_Init+0xb4>)
 8001816:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800181a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <MX_TIM3_Init+0xb4>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <MX_TIM3_Init+0xb4>)
 8001824:	f242 720f 	movw	r2, #9999	; 0x270f
 8001828:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <MX_TIM3_Init+0xb4>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <MX_TIM3_Init+0xb4>)
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001836:	481b      	ldr	r0, [pc, #108]	; (80018a4 <MX_TIM3_Init+0xb4>)
 8001838:	f004 fed8 	bl	80065ec <HAL_TIM_Base_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	bf14      	ite	ne
 8001842:	2301      	movne	r3, #1
 8001844:	2300      	moveq	r3, #0
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800184c:	f000 f904 	bl	8001a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001854:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	4619      	mov	r1, r3
 800185c:	4811      	ldr	r0, [pc, #68]	; (80018a4 <MX_TIM3_Init+0xb4>)
 800185e:	f005 f90b 	bl	8006a78 <HAL_TIM_ConfigClockSource>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf14      	ite	ne
 8001868:	2301      	movne	r3, #1
 800186a:	2300      	moveq	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001872:	f000 f8f1 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	4619      	mov	r1, r3
 8001882:	4808      	ldr	r0, [pc, #32]	; (80018a4 <MX_TIM3_Init+0xb4>)
 8001884:	f005 fb24 	bl	8006ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf14      	ite	ne
 800188e:	2301      	movne	r3, #1
 8001890:	2300      	moveq	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001898:	f000 f8de 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000554 	.word	0x20000554
 80018a8:	40000400 	.word	0x40000400

080018ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_USART3_UART_Init+0x60>)
 80018b2:	4a17      	ldr	r2, [pc, #92]	; (8001910 <MX_USART3_UART_Init+0x64>)
 80018b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <MX_USART3_UART_Init+0x60>)
 80018b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <MX_USART3_UART_Init+0x60>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_USART3_UART_Init+0x60>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <MX_USART3_UART_Init+0x60>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_USART3_UART_Init+0x60>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <MX_USART3_UART_Init+0x60>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_USART3_UART_Init+0x60>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <MX_USART3_UART_Init+0x60>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_USART3_UART_Init+0x60>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018ee:	4807      	ldr	r0, [pc, #28]	; (800190c <MX_USART3_UART_Init+0x60>)
 80018f0:	f005 fb9a 	bl	8007028 <HAL_UART_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bf14      	ite	ne
 80018fa:	2301      	movne	r3, #1
 80018fc:	2300      	moveq	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 8001904:	f000 f8a8 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	200005a0 	.word	0x200005a0
 8001910:	40004800 	.word	0x40004800

08001914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	; 0x30
 8001918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <MX_GPIO_Init+0x134>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a46      	ldr	r2, [pc, #280]	; (8001a48 <MX_GPIO_Init+0x134>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <MX_GPIO_Init+0x134>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001942:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <MX_GPIO_Init+0x134>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a40      	ldr	r2, [pc, #256]	; (8001a48 <MX_GPIO_Init+0x134>)
 8001948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b3e      	ldr	r3, [pc, #248]	; (8001a48 <MX_GPIO_Init+0x134>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <MX_GPIO_Init+0x134>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a3a      	ldr	r2, [pc, #232]	; (8001a48 <MX_GPIO_Init+0x134>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <MX_GPIO_Init+0x134>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001972:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <MX_GPIO_Init+0x134>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a34      	ldr	r2, [pc, #208]	; (8001a48 <MX_GPIO_Init+0x134>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b32      	ldr	r3, [pc, #200]	; (8001a48 <MX_GPIO_Init+0x134>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800198a:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <MX_GPIO_Init+0x134>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a2e      	ldr	r2, [pc, #184]	; (8001a48 <MX_GPIO_Init+0x134>)
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <MX_GPIO_Init+0x134>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <MX_GPIO_Init+0x134>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a28      	ldr	r2, [pc, #160]	; (8001a48 <MX_GPIO_Init+0x134>)
 80019a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <MX_GPIO_Init+0x134>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	f244 0181 	movw	r1, #16513	; 0x4081
 80019c0:	4822      	ldr	r0, [pc, #136]	; (8001a4c <MX_GPIO_Init+0x138>)
 80019c2:	f002 fa77 	bl	8003eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2140      	movs	r1, #64	; 0x40
 80019ca:	4821      	ldr	r0, [pc, #132]	; (8001a50 <MX_GPIO_Init+0x13c>)
 80019cc:	f002 fa72 	bl	8003eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80019d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4619      	mov	r1, r3
 80019e6:	481b      	ldr	r0, [pc, #108]	; (8001a54 <MX_GPIO_Init+0x140>)
 80019e8:	f002 f8b8 	bl	8003b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019ec:	f244 0381 	movw	r3, #16513	; 0x4081
 80019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4811      	ldr	r0, [pc, #68]	; (8001a4c <MX_GPIO_Init+0x138>)
 8001a06:	f002 f8a9 	bl	8003b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a0a:	2340      	movs	r3, #64	; 0x40
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480b      	ldr	r0, [pc, #44]	; (8001a50 <MX_GPIO_Init+0x13c>)
 8001a22:	f002 f89b 	bl	8003b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	4619      	mov	r1, r3
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_GPIO_Init+0x13c>)
 8001a3a:	f002 f88f 	bl	8003b5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a3e:	bf00      	nop
 8001a40:	3730      	adds	r7, #48	; 0x30
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	40021800 	.word	0x40021800
 8001a54:	40020800 	.word	0x40020800

08001a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5c:	b672      	cpsid	i
}
 8001a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <Error_Handler+0x8>

08001a62 <_ZN11circ_bufferIhLm128EtEC1Ev>:
circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
	mFull_ = false;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	mEmpty_ = true;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	mHead_ = 0;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	mTail_ = 0;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	mSize_ = 0;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	801a      	strh	r2, [r3, #0]
}
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <_ZN11circ_bufferI8CANmsg_tLm128EtEC1Ev>:
circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
	mFull_ = false;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2a08 	strb.w	r2, [r3, #2568]	; 0xa08
	mEmpty_ = true;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2a09 	strb.w	r2, [r3, #2569]	; 0xa09
	mHead_ = 0;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f8a3 2a04 	strh.w	r2, [r3, #2564]	; 0xa04
	mTail_ = 0;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f8a3 2a06 	strh.w	r2, [r3, #2566]	; 0xa06
	mSize_ = 0;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	801a      	strh	r2, [r3, #0]
}
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <_ZN11circ_bufferI9PCIFmsg_tLm128EtEC1Ev>:
circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
	mFull_ = false;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
	mEmpty_ = true;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	mHead_ = 0;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b00:	2200      	movs	r2, #0
 8001b02:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	mTail_ = 0;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	mSize_ = 0;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	801a      	strh	r2, [r3, #0]
}
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <_ZN11circ_bufferIhLm128EtE8is_emptyEv>:
bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::is_empty(){
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
	return mEmpty_;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <_ZN11circ_bufferIhLm128EtE4readEPh>:
bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::read(bufferDataType* pData)
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
	if (mEmpty_){
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <_ZN11circ_bufferIhLm128EtE4readEPh+0x18>
		return EXIT_ERROR;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e036      	b.n	8001bc6 <_ZN11circ_bufferIhLm128EtE4readEPh+0x86>
	*pData = mBuffer_[mTail_];
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001b5e:	461a      	mov	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	789a      	ldrb	r2, [r3, #2]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	701a      	strb	r2, [r3, #0]
	mFull_ = false;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	if(--mSize_ == 0){
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	801a      	strh	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	bf0c      	ite	eq
 8001b86:	2301      	moveq	r3, #1
 8001b88:	2300      	movne	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <_ZN11circ_bufferIhLm128EtE4readEPh+0x58>
		mEmpty_ = true;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	if(++mTail_ == sCapacity_){
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001bae:	2b80      	cmp	r3, #128	; 0x80
 8001bb0:	bf0c      	ite	eq
 8001bb2:	2301      	moveq	r3, #1
 8001bb4:	2300      	movne	r3, #0
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <_ZN11circ_bufferIhLm128EtE4readEPh+0x84>
		mTail_ = 0;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	return EXIT_OK;
 8001bc4:	2301      	movs	r3, #1
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d113      	bne.n	8001c0c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d10e      	bne.n	8001c0c <_Z41__static_initialization_and_destruction_0ii+0x38>
static evBuffer eventsBuffer;
 8001bee:	4809      	ldr	r0, [pc, #36]	; (8001c14 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001bf0:	f7ff ff37 	bl	8001a62 <_ZN11circ_bufferIhLm128EtEC1Ev>
static canMsgBuffer canTxBuffer;
 8001bf4:	4808      	ldr	r0, [pc, #32]	; (8001c18 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001bf6:	f7ff ff52 	bl	8001a9e <_ZN11circ_bufferI8CANmsg_tLm128EtEC1Ev>
static canMsgBuffer canRxBuffer;
 8001bfa:	4808      	ldr	r0, [pc, #32]	; (8001c1c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001bfc:	f7ff ff4f 	bl	8001a9e <_ZN11circ_bufferI8CANmsg_tLm128EtEC1Ev>
static PCIFMsgBuffer PCIFTxBuffer;
 8001c00:	4807      	ldr	r0, [pc, #28]	; (8001c20 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001c02:	f7ff ff6a 	bl	8001ada <_ZN11circ_bufferI9PCIFmsg_tLm128EtEC1Ev>
static PCIFMsgBuffer PCIFRxBuffer;
 8001c06:	4807      	ldr	r0, [pc, #28]	; (8001c24 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001c08:	f7ff ff67 	bl	8001ada <_ZN11circ_bufferI9PCIFmsg_tLm128EtEC1Ev>
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	200006a8 	.word	0x200006a8
 8001c18:	20000730 	.word	0x20000730
 8001c1c:	2000113c 	.word	0x2000113c
 8001c20:	20001b48 	.word	0x20001b48
 8001c24:	20002c50 	.word	0x20002c50

08001c28 <_GLOBAL__sub_I_DMARxDscrTab>:
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff ffcf 	bl	8001bd4 <_Z41__static_initialization_and_destruction_0ii>
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_Z24stateMachine_constructorP14stateMachine_tPF7state_tPvhE>:
#include "stateMachine.h"

#define EV_NONE 0

void stateMachine_constructor(stateMachine_t *me, stateHandler_t initial)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
	me->m_state = initial;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	601a      	str	r2, [r3, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_Z17stateMachine_initP14stateMachine_t>:

void stateMachine_init(stateMachine_t *me)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	event_t e = EV_NONE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]

	(me->m_state)(me, e);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	4611      	mov	r1, r2
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	4798      	blx	r3
	(me->m_state)(me, EV_ENTRY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2101      	movs	r1, #1
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	4798      	blx	r3
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_Z21stateMachine_dispatchP14stateMachine_th>:

void stateMachine_dispatch(stateMachine_t *me, event_t const e)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	70fb      	strb	r3, [r7, #3]
	stateHandler_t s = me->m_state;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60fb      	str	r3, [r7, #12]
	state_t r = (*s)(me, e);
 8001c90:	78fa      	ldrb	r2, [r7, #3]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4611      	mov	r1, r2
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	4798      	blx	r3
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	72fb      	strb	r3, [r7, #11]

	if(r == TRANSITION)
 8001c9e:	7afb      	ldrb	r3, [r7, #11]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d108      	bne.n	8001cb6 <_Z21stateMachine_dispatchP14stateMachine_th+0x38>
	{
		(*s)(me, EV_EXIT);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	4798      	blx	r3
		(me->m_state)(me, EV_ENTRY);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	4798      	blx	r3
	}
}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <_Z23stateMachine_transitionP14stateMachine_tPF7state_tPvhE>:

state_t stateMachine_transition(stateMachine_t *me, stateHandler_t target)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
	me->m_state = target;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	601a      	str	r2, [r3, #0]
	return TRANSITION;
 8001cce:	2302      	movs	r3, #2
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_MspInit+0x44>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_MspInit+0x44>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_MspInit+0x44>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_MspInit+0x44>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_MspInit+0x44>)
 8001d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d04:	6453      	str	r3, [r2, #68]	; 0x44
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_MspInit+0x44>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800

08001d24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <HAL_CAN_MspInit+0x9c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d137      	bne.n	8001db6 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <HAL_CAN_MspInit+0xa0>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a1e      	ldr	r2, [pc, #120]	; (8001dc4 <HAL_CAN_MspInit+0xa0>)
 8001d4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <HAL_CAN_MspInit+0xa0>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5e:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_CAN_MspInit+0xa0>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <HAL_CAN_MspInit+0xa0>)
 8001d64:	f043 0308 	orr.w	r3, r3, #8
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <HAL_CAN_MspInit+0xa0>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d76:	2303      	movs	r3, #3
 8001d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d86:	2309      	movs	r3, #9
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <HAL_CAN_MspInit+0xa4>)
 8001d92:	f001 fee3 	bl	8003b5c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2014      	movs	r0, #20
 8001d9c:	f001 fb81 	bl	80034a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001da0:	2014      	movs	r0, #20
 8001da2:	f001 fb9a 	bl	80034da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	2016      	movs	r0, #22
 8001dac:	f001 fb79 	bl	80034a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001db0:	2016      	movs	r0, #22
 8001db2:	f001 fb92 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001db6:	bf00      	nop
 8001db8:	3728      	adds	r7, #40	; 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40006400 	.word	0x40006400
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020c00 	.word	0x40020c00

08001dcc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08e      	sub	sp, #56	; 0x38
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a4e      	ldr	r2, [pc, #312]	; (8001f24 <HAL_ETH_MspInit+0x158>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	f040 8096 	bne.w	8001f1c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001df0:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	4a4c      	ldr	r2, [pc, #304]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001df6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfc:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	623b      	str	r3, [r7, #32]
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	4a46      	ldr	r2, [pc, #280]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e12:	6313      	str	r3, [r2, #48]	; 0x30
 8001e14:	4b44      	ldr	r3, [pc, #272]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	4a40      	ldr	r2, [pc, #256]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2c:	4b3e      	ldr	r3, [pc, #248]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e38:	4b3b      	ldr	r3, [pc, #236]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	4a3a      	ldr	r2, [pc, #232]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e3e:	f043 0304 	orr.w	r3, r3, #4
 8001e42:	6313      	str	r3, [r2, #48]	; 0x30
 8001e44:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e50:	4b35      	ldr	r3, [pc, #212]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	4a34      	ldr	r2, [pc, #208]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5c:	4b32      	ldr	r3, [pc, #200]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e68:	4b2f      	ldr	r3, [pc, #188]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	4a2e      	ldr	r2, [pc, #184]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e6e:	f043 0302 	orr.w	r3, r3, #2
 8001e72:	6313      	str	r3, [r2, #48]	; 0x30
 8001e74:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	4a28      	ldr	r2, [pc, #160]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8c:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <HAL_ETH_MspInit+0x15c>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e98:	2332      	movs	r3, #50	; 0x32
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ea8:	230b      	movs	r3, #11
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	481e      	ldr	r0, [pc, #120]	; (8001f2c <HAL_ETH_MspInit+0x160>)
 8001eb4:	f001 fe52 	bl	8003b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001eb8:	2386      	movs	r3, #134	; 0x86
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ec8:	230b      	movs	r3, #11
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4817      	ldr	r0, [pc, #92]	; (8001f30 <HAL_ETH_MspInit+0x164>)
 8001ed4:	f001 fe42 	bl	8003b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eea:	230b      	movs	r3, #11
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480f      	ldr	r0, [pc, #60]	; (8001f34 <HAL_ETH_MspInit+0x168>)
 8001ef6:	f001 fe31 	bl	8003b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001efa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f0c:	230b      	movs	r3, #11
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f14:	4619      	mov	r1, r3
 8001f16:	4808      	ldr	r0, [pc, #32]	; (8001f38 <HAL_ETH_MspInit+0x16c>)
 8001f18:	f001 fe20 	bl	8003b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001f1c:	bf00      	nop
 8001f1e:	3738      	adds	r7, #56	; 0x38
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40028000 	.word	0x40028000
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40021800 	.word	0x40021800

08001f3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0d      	ldr	r2, [pc, #52]	; (8001f80 <HAL_TIM_Base_MspInit+0x44>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d113      	bne.n	8001f76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_TIM_Base_MspInit+0x48>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	4a0c      	ldr	r2, [pc, #48]	; (8001f84 <HAL_TIM_Base_MspInit+0x48>)
 8001f54:	f043 0302 	orr.w	r3, r3, #2
 8001f58:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_TIM_Base_MspInit+0x48>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	201d      	movs	r0, #29
 8001f6c:	f001 fa99 	bl	80034a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f70:	201d      	movs	r0, #29
 8001f72:	f001 fab2 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40000400 	.word	0x40000400
 8001f84:	40023800 	.word	0x40023800

08001f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b0aa      	sub	sp, #168	; 0xa8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	2284      	movs	r2, #132	; 0x84
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f009 ff43 	bl	800be34 <memset>
  if(huart->Instance==USART3)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a22      	ldr	r2, [pc, #136]	; (800203c <HAL_UART_MspInit+0xb4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d13c      	bne.n	8002032 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fbc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc2:	f107 0310 	add.w	r3, r7, #16
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 ff20 	bl	8005e0c <HAL_RCCEx_PeriphCLKConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001fd2:	f7ff fd41 	bl	8001a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fd6:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <HAL_UART_MspInit+0xb8>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a19      	ldr	r2, [pc, #100]	; (8002040 <HAL_UART_MspInit+0xb8>)
 8001fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe2:	4b17      	ldr	r3, [pc, #92]	; (8002040 <HAL_UART_MspInit+0xb8>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fee:	4b14      	ldr	r3, [pc, #80]	; (8002040 <HAL_UART_MspInit+0xb8>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a13      	ldr	r2, [pc, #76]	; (8002040 <HAL_UART_MspInit+0xb8>)
 8001ff4:	f043 0308 	orr.w	r3, r3, #8
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_UART_MspInit+0xb8>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002006:	f44f 7340 	mov.w	r3, #768	; 0x300
 800200a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002014:	2301      	movs	r3, #1
 8002016:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002020:	2307      	movs	r3, #7
 8002022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002026:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <HAL_UART_MspInit+0xbc>)
 800202e:	f001 fd95 	bl	8003b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002032:	bf00      	nop
 8002034:	37a8      	adds	r7, #168	; 0xa8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40004800 	.word	0x40004800
 8002040:	40023800 	.word	0x40023800
 8002044:	40020c00 	.word	0x40020c00

08002048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800204c:	e7fe      	b.n	800204c <NMI_Handler+0x4>

0800204e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <HardFault_Handler+0x4>

08002054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <MemManage_Handler+0x4>

0800205a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <BusFault_Handler+0x4>

08002060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <UsageFault_Handler+0x4>

08002066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002094:	f000 f9cc 	bl	8002430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}

0800209c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <CAN1_RX0_IRQHandler+0x10>)
 80020a2:	f000 fefe 	bl	8002ea2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	2000047c 	.word	0x2000047c

080020b0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <CAN1_SCE_IRQHandler+0x10>)
 80020b6:	f000 fef4 	bl	8002ea2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	2000047c 	.word	0x2000047c

080020c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <TIM3_IRQHandler+0x10>)
 80020ca:	f004 fb8e 	bl	80067ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000554 	.word	0x20000554

080020d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <OTG_FS_IRQHandler+0x10>)
 80020de:	f002 f848 	bl	8004172 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20005248 	.word	0x20005248

080020ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <_sbrk+0x5c>)
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <_sbrk+0x60>)
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <_sbrk+0x64>)
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <_sbrk+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d207      	bcs.n	800212c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800211c:	f009 fea2 	bl	800be64 <__errno>
 8002120:	4603      	mov	r3, r0
 8002122:	220c      	movs	r2, #12
 8002124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800212a:	e009      	b.n	8002140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <_sbrk+0x64>)
 800213c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20050000 	.word	0x20050000
 800214c:	00000400 	.word	0x00000400
 8002150:	20003d60 	.word	0x20003d60
 8002154:	20005898 	.word	0x20005898

08002158 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <_Z28timeStampService_constructorP18timeStampService_tP17TIM_HandleTypeDef>:
static CANmsg_t msgTimeStampServiceData = {{},0,timeStampServiceData,0x00};


//void timeStampService_constructor(timeStampService_t *me, TIM_HandleTypeDef *htim, STM32::gpio *ledIndicator)
void timeStampService_constructor(timeStampService_t *me, TIM_HandleTypeDef *htim)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
	stateMachine_constructor(&me->super, (stateHandler_t)&timeStampService_initial);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4905      	ldr	r1, [pc, #20]	; (80021a0 <_Z28timeStampService_constructorP18timeStampService_tP17TIM_HandleTypeDef+0x24>)
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fd54 	bl	8001c38 <_Z24stateMachine_constructorP14stateMachine_tPF7state_tPvhE>
	me->m_htim = htim;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	605a      	str	r2, [r3, #4]
	//me->m_ledIndicator = ledIndicator;
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	080021a5 	.word	0x080021a5

080021a4 <_Z24timeStampService_initialP18timeStampService_t>:


state_t timeStampService_initial(timeStampService_t *me)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	//me->m_ledIndicator->write(GPIO_ST::LOW);
	flagRequestTimestampData = 0;
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <_Z24timeStampService_initialP18timeStampService_t+0x20>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]

	return stateMachine_transition((stateMachine_t*)me, (stateHandler_t) timeStampService_off);
 80021b2:	4905      	ldr	r1, [pc, #20]	; (80021c8 <_Z24timeStampService_initialP18timeStampService_t+0x24>)
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff fd82 	bl	8001cbe <_Z23stateMachine_transitionP14stateMachine_tPF7state_tPvhE>
 80021ba:	4603      	mov	r3, r0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	2000066e 	.word	0x2000066e
 80021c8:	080021cd 	.word	0x080021cd

080021cc <_Z20timeStampService_offP18timeStampService_th>:

state_t timeStampService_off(timeStampService_t *me, event_t const e)
{
 80021cc:	b5b0      	push	{r4, r5, r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	70fb      	strb	r3, [r7, #3]
	switch(e)
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	2b0d      	cmp	r3, #13
 80021dc:	d11d      	bne.n	800221a <_Z20timeStampService_offP18timeStampService_th+0x4e>
	{
		case EV_START_TIMESTAMP_SERVICE:
			if( p_canTxBuffer->write(msgTimeStampServiceStart) == EXIT_OK )
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <_Z20timeStampService_offP18timeStampService_th+0x58>)
 80021e0:	681c      	ldr	r4, [r3, #0]
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <_Z20timeStampService_offP18timeStampService_th+0x5c>)
 80021e4:	466d      	mov	r5, sp
 80021e6:	f103 020c 	add.w	r2, r3, #12
 80021ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80021f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f4:	4620      	mov	r0, r4
 80021f6:	f7fe fc9a 	bl	8000b2e <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <_Z20timeStampService_offP18timeStampService_th+0x4a>
			{
				//me->m_ledIndicator->write(GPIO_ST::HIGH);
				return stateMachine_transition((stateMachine_t*)me, (stateHandler_t) timeStampService_running);
 800220a:	4908      	ldr	r1, [pc, #32]	; (800222c <_Z20timeStampService_offP18timeStampService_th+0x60>)
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff fd56 	bl	8001cbe <_Z23stateMachine_transitionP14stateMachine_tPF7state_tPvhE>
 8002212:	4603      	mov	r3, r0
 8002214:	e002      	b.n	800221c <_Z20timeStampService_offP18timeStampService_th+0x50>
			}

			return HANDLED;
 8002216:	2300      	movs	r3, #0
 8002218:	e000      	b.n	800221c <_Z20timeStampService_offP18timeStampService_th+0x50>
	}

	return IGNORED;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bdb0      	pop	{r4, r5, r7, pc}
 8002224:	0800bfd4 	.word	0x0800bfd4
 8002228:	200000dc 	.word	0x200000dc
 800222c:	08002231 	.word	0x08002231

08002230 <_Z24timeStampService_runningP18timeStampService_th>:

state_t timeStampService_running(timeStampService_t *me, event_t const e)
{
 8002230:	b5b0      	push	{r4, r5, r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af02      	add	r7, sp, #8
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	70fb      	strb	r3, [r7, #3]
	switch(e)
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	3b01      	subs	r3, #1
 8002240:	2b0e      	cmp	r3, #14
 8002242:	d866      	bhi.n	8002312 <_Z24timeStampService_runningP18timeStampService_th+0xe2>
 8002244:	a201      	add	r2, pc, #4	; (adr r2, 800224c <_Z24timeStampService_runningP18timeStampService_th+0x1c>)
 8002246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224a:	bf00      	nop
 800224c:	08002289 	.word	0x08002289
 8002250:	080022a9 	.word	0x080022a9
 8002254:	08002313 	.word	0x08002313
 8002258:	08002313 	.word	0x08002313
 800225c:	08002313 	.word	0x08002313
 8002260:	08002313 	.word	0x08002313
 8002264:	08002313 	.word	0x08002313
 8002268:	08002313 	.word	0x08002313
 800226c:	08002313 	.word	0x08002313
 8002270:	08002313 	.word	0x08002313
 8002274:	08002313 	.word	0x08002313
 8002278:	08002313 	.word	0x08002313
 800227c:	08002313 	.word	0x08002313
 8002280:	080022b7 	.word	0x080022b7
 8002284:	080022f3 	.word	0x080022f3
	{
		case EV_ENTRY:

#if ASK_FOR_TIMESTAMPS_PERIODICALLY == 1
			flagRequestTimestampData = 0;
 8002288:	4b24      	ldr	r3, [pc, #144]	; (800231c <_Z24timeStampService_runningP18timeStampService_th+0xec>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_GenerateEvent(me->m_htim, TIM_EVENTSOURCE_UPDATE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2101      	movs	r1, #1
 8002294:	4618      	mov	r0, r3
 8002296:	f004 fbc7 	bl	8006a28 <HAL_TIM_GenerateEvent>
			HAL_TIM_Base_Start_IT(me->m_htim);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 f9fc 	bl	800669c <HAL_TIM_Base_Start_IT>
#endif

			return HANDLED;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e035      	b.n	8002314 <_Z24timeStampService_runningP18timeStampService_th+0xe4>

		case EV_EXIT:

#if ASK_FOR_TIMESTAMPS_PERIODICALLY == 1
			HAL_TIM_Base_Stop_IT(me->m_htim);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f004 fa6d 	bl	800678c <HAL_TIM_Base_Stop_IT>

#endif
			return HANDLED;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e02e      	b.n	8002314 <_Z24timeStampService_runningP18timeStampService_th+0xe4>

		case EV_STOP_TIMESTAMP_SERVICE:
			if( p_canTxBuffer->write(msgTimeStampServiceStop) == EXIT_OK )
 80022b6:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <_Z24timeStampService_runningP18timeStampService_th+0xf0>)
 80022b8:	681c      	ldr	r4, [r3, #0]
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <_Z24timeStampService_runningP18timeStampService_th+0xf4>)
 80022bc:	466d      	mov	r5, sp
 80022be:	f103 020c 	add.w	r2, r3, #12
 80022c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80022ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022cc:	4620      	mov	r0, r4
 80022ce:	f7fe fc2e 	bl	8000b2e <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	bf0c      	ite	eq
 80022d8:	2301      	moveq	r3, #1
 80022da:	2300      	movne	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <_Z24timeStampService_runningP18timeStampService_th+0xbe>
			{
				//me->m_ledIndicator->write(GPIO_ST::LOW);
				return stateMachine_transition((stateMachine_t*)me, (stateHandler_t) timeStampService_off);
 80022e2:	4911      	ldr	r1, [pc, #68]	; (8002328 <_Z24timeStampService_runningP18timeStampService_th+0xf8>)
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff fcea 	bl	8001cbe <_Z23stateMachine_transitionP14stateMachine_tPF7state_tPvhE>
 80022ea:	4603      	mov	r3, r0
 80022ec:	e012      	b.n	8002314 <_Z24timeStampService_runningP18timeStampService_th+0xe4>
			}
			return HANDLED;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e010      	b.n	8002314 <_Z24timeStampService_runningP18timeStampService_th+0xe4>

		case EV_REQUEST_TIMESTAMP:
			p_canTxBuffer->write(msgTimeStampServiceData);
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <_Z24timeStampService_runningP18timeStampService_th+0xf0>)
 80022f4:	681c      	ldr	r4, [r3, #0]
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <_Z24timeStampService_runningP18timeStampService_th+0xfc>)
 80022f8:	466d      	mov	r5, sp
 80022fa:	f103 020c 	add.w	r2, r3, #12
 80022fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002302:	e885 0003 	stmia.w	r5, {r0, r1}
 8002306:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002308:	4620      	mov	r0, r4
 800230a:	f7fe fc10 	bl	8000b2e <_ZN11circ_bufferI8CANmsg_tLm128EtE5writeES0_>
			return HANDLED;
 800230e:	2300      	movs	r3, #0
 8002310:	e000      	b.n	8002314 <_Z24timeStampService_runningP18timeStampService_th+0xe4>
	}
	return IGNORED;
 8002312:	2301      	movs	r3, #1
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bdb0      	pop	{r4, r5, r7, pc}
 800231c:	2000066e 	.word	0x2000066e
 8002320:	0800bfd4 	.word	0x0800bfd4
 8002324:	200000f0 	.word	0x200000f0
 8002328:	080021cd 	.word	0x080021cd
 800232c:	20000104 	.word	0x20000104

08002330 <HAL_TIM_PeriodElapsedCallback>:

#if ASK_FOR_TIMESTAMPS_PERIODICALLY == 1
/** Callback para la interrupción del timer del servicio de timestamps.
	Esta interrupción sirve para pedir los próximos datos de timestamps. */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	if(flagRequestTimestampData == 0)
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	bf0c      	ite	eq
 8002342:	2301      	moveq	r3, #1
 8002344:	2300      	movne	r3, #0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		flagRequestTimestampData = 1;
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
	}
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	2000066e 	.word	0x2000066e

08002364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800239c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002368:	480d      	ldr	r0, [pc, #52]	; (80023a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800236a:	490e      	ldr	r1, [pc, #56]	; (80023a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800236c:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800236e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002370:	e002      	b.n	8002378 <LoopCopyDataInit>

08002372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002376:	3304      	adds	r3, #4

08002378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800237c:	d3f9      	bcc.n	8002372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800237e:	4a0b      	ldr	r2, [pc, #44]	; (80023ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002380:	4c0b      	ldr	r4, [pc, #44]	; (80023b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002384:	e001      	b.n	800238a <LoopFillZerobss>

08002386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002388:	3204      	adds	r2, #4

0800238a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800238c:	d3fb      	bcc.n	8002386 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800238e:	f7ff fee3 	bl	8002158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002392:	f009 fd6d 	bl	800be70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002396:	f7ff f83d 	bl	8001414 <main>
  bx  lr    
 800239a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800239c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80023a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a4:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 80023a8:	0800c020 	.word	0x0800c020
  ldr r2, =_sbss
 80023ac:	200003b0 	.word	0x200003b0
  ldr r4, =_ebss
 80023b0:	20005898 	.word	0x20005898

080023b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023b4:	e7fe      	b.n	80023b4 <ADC_IRQHandler>

080023b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ba:	2003      	movs	r0, #3
 80023bc:	f001 f866 	bl	800348c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f000 f805 	bl	80023d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c6:	f7ff fc89 	bl	8001cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_InitTick+0x54>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <HAL_InitTick+0x58>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	4619      	mov	r1, r3
 80023e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f001 f881 	bl	80034f6 <HAL_SYSTICK_Config>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00e      	b.n	800241c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b0f      	cmp	r3, #15
 8002402:	d80a      	bhi.n	800241a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002404:	2200      	movs	r2, #0
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800240c:	f001 f849 	bl	80034a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002410:	4a06      	ldr	r2, [pc, #24]	; (800242c <HAL_InitTick+0x5c>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	e000      	b.n	800241c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	200000d8 	.word	0x200000d8
 8002428:	2000011c 	.word	0x2000011c
 800242c:	20000118 	.word	0x20000118

08002430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_IncTick+0x20>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_IncTick+0x24>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4413      	add	r3, r2
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <HAL_IncTick+0x24>)
 8002442:	6013      	str	r3, [r2, #0]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	2000011c 	.word	0x2000011c
 8002454:	20003d64 	.word	0x20003d64

08002458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return uwTick;
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_GetTick+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20003d64 	.word	0x20003d64

08002470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff ffee 	bl	8002458 <HAL_GetTick>
 800247c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002488:	d005      	beq.n	8002496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <HAL_Delay+0x44>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4413      	add	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002496:	bf00      	nop
 8002498:	f7ff ffde 	bl	8002458 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d8f7      	bhi.n	8002498 <HAL_Delay+0x28>
  {
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000011c 	.word	0x2000011c

080024b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0ed      	b.n	80026a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d102      	bne.n	80024dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff fc24 	bl	8001d24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ec:	f7ff ffb4 	bl	8002458 <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024f2:	e012      	b.n	800251a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024f4:	f7ff ffb0 	bl	8002458 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b0a      	cmp	r3, #10
 8002500:	d90b      	bls.n	800251a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2205      	movs	r2, #5
 8002512:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e0c5      	b.n	80026a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0e5      	beq.n	80024f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0202 	bic.w	r2, r2, #2
 8002536:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002538:	f7ff ff8e 	bl	8002458 <HAL_GetTick>
 800253c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800253e:	e012      	b.n	8002566 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002540:	f7ff ff8a 	bl	8002458 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b0a      	cmp	r3, #10
 800254c:	d90b      	bls.n	8002566 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2205      	movs	r2, #5
 800255e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e09f      	b.n	80026a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e5      	bne.n	8002540 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7e1b      	ldrb	r3, [r3, #24]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d108      	bne.n	800258e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e007      	b.n	800259e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7e5b      	ldrb	r3, [r3, #25]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d108      	bne.n	80025b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e007      	b.n	80025c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7e9b      	ldrb	r3, [r3, #26]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d108      	bne.n	80025e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0220 	orr.w	r2, r2, #32
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e007      	b.n	80025f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0220 	bic.w	r2, r2, #32
 80025f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7edb      	ldrb	r3, [r3, #27]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d108      	bne.n	800260c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0210 	bic.w	r2, r2, #16
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e007      	b.n	800261c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0210 	orr.w	r2, r2, #16
 800261a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7f1b      	ldrb	r3, [r3, #28]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d108      	bne.n	8002636 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0208 	orr.w	r2, r2, #8
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	e007      	b.n	8002646 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0208 	bic.w	r2, r2, #8
 8002644:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	7f5b      	ldrb	r3, [r3, #29]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d108      	bne.n	8002660 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0204 	orr.w	r2, r2, #4
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e007      	b.n	8002670 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0204 	bic.w	r2, r2, #4
 800266e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	ea42 0103 	orr.w	r1, r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	1e5a      	subs	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d003      	beq.n	80026d6 <HAL_CAN_ConfigFilter+0x26>
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	f040 80be 	bne.w	8002852 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80026d6:	4b65      	ldr	r3, [pc, #404]	; (800286c <HAL_CAN_ConfigFilter+0x1bc>)
 80026d8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	431a      	orrs	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	2201      	movs	r2, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	43db      	mvns	r3, r3
 8002728:	401a      	ands	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d123      	bne.n	8002780 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	43db      	mvns	r3, r3
 8002742:	401a      	ands	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800275a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3248      	adds	r2, #72	; 0x48
 8002760:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002774:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002776:	6979      	ldr	r1, [r7, #20]
 8002778:	3348      	adds	r3, #72	; 0x48
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	440b      	add	r3, r1
 800277e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d122      	bne.n	80027ce <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	431a      	orrs	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	3248      	adds	r2, #72	; 0x48
 80027ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027c4:	6979      	ldr	r1, [r7, #20]
 80027c6:	3348      	adds	r3, #72	; 0x48
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	43db      	mvns	r3, r3
 80027e0:	401a      	ands	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80027e8:	e007      	b.n	80027fa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	43db      	mvns	r3, r3
 800280c:	401a      	ands	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002814:	e007      	b.n	8002826 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	431a      	orrs	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d107      	bne.n	800283e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	431a      	orrs	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002844:	f023 0201 	bic.w	r2, r3, #1
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	e006      	b.n	8002860 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
  }
}
 8002860:	4618      	mov	r0, r3
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40006400 	.word	0x40006400

08002870 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d12e      	bne.n	80028e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800289c:	f7ff fddc 	bl	8002458 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028a2:	e012      	b.n	80028ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028a4:	f7ff fdd8 	bl	8002458 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b0a      	cmp	r3, #10
 80028b0:	d90b      	bls.n	80028ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2205      	movs	r2, #5
 80028c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e012      	b.n	80028f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1e5      	bne.n	80028a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e006      	b.n	80028f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
  }
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d133      	bne.n	8002974 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800291c:	f7ff fd9c 	bl	8002458 <HAL_GetTick>
 8002920:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002922:	e012      	b.n	800294a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002924:	f7ff fd98 	bl	8002458 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b0a      	cmp	r3, #10
 8002930:	d90b      	bls.n	800294a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2205      	movs	r2, #5
 8002942:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e01b      	b.n	8002982 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0e5      	beq.n	8002924 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0202 	bic.w	r2, r2, #2
 8002966:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	e006      	b.n	8002982 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800298a:	b480      	push	{r7}
 800298c:	b089      	sub	sp, #36	; 0x24
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800299e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80029a8:	7ffb      	ldrb	r3, [r7, #31]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d003      	beq.n	80029b6 <HAL_CAN_AddTxMessage+0x2c>
 80029ae:	7ffb      	ldrb	r3, [r7, #31]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	f040 80ad 	bne.w	8002b10 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d105      	bne.n	80029d6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 8095 	beq.w	8002b00 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	0e1b      	lsrs	r3, r3, #24
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80029e0:	2201      	movs	r2, #1
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	409a      	lsls	r2, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10d      	bne.n	8002a0e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029fc:	68f9      	ldr	r1, [r7, #12]
 80029fe:	6809      	ldr	r1, [r1, #0]
 8002a00:	431a      	orrs	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3318      	adds	r3, #24
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	440b      	add	r3, r1
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	e00f      	b.n	8002a2e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a18:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a1e:	68f9      	ldr	r1, [r7, #12]
 8002a20:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a22:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3318      	adds	r3, #24
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	440b      	add	r3, r1
 8002a2c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3318      	adds	r3, #24
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3304      	adds	r3, #4
 8002a40:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	7d1b      	ldrb	r3, [r3, #20]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d111      	bne.n	8002a6e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3318      	adds	r3, #24
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	4413      	add	r3, r2
 8002a56:	3304      	adds	r3, #4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	6811      	ldr	r1, [r2, #0]
 8002a5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	3318      	adds	r3, #24
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	440b      	add	r3, r1
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3307      	adds	r3, #7
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	061a      	lsls	r2, r3, #24
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3306      	adds	r3, #6
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	041b      	lsls	r3, r3, #16
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3305      	adds	r3, #5
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	3204      	adds	r2, #4
 8002a8e:	7812      	ldrb	r2, [r2, #0]
 8002a90:	4610      	mov	r0, r2
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	6811      	ldr	r1, [r2, #0]
 8002a96:	ea43 0200 	orr.w	r2, r3, r0
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002aa4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3303      	adds	r3, #3
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	061a      	lsls	r2, r3, #24
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	041b      	lsls	r3, r3, #16
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3301      	adds	r3, #1
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	7812      	ldrb	r2, [r2, #0]
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	6811      	ldr	r1, [r2, #0]
 8002acc:	ea43 0200 	orr.w	r2, r3, r0
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	440b      	add	r3, r1
 8002ad6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002ada:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3318      	adds	r3, #24
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	4413      	add	r3, r2
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	6811      	ldr	r1, [r2, #0]
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3318      	adds	r3, #24
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	440b      	add	r3, r1
 8002afa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e00e      	b.n	8002b1e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e006      	b.n	8002b1e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b3c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d002      	beq.n	8002b4a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002b44:	7afb      	ldrb	r3, [r7, #11]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d11d      	bne.n	8002b86 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3301      	adds	r3, #1
 8002b84:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d003      	beq.n	8002bb8 <HAL_CAN_GetRxMessage+0x24>
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	f040 80f3 	bne.w	8002d9e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10e      	bne.n	8002bdc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d116      	bne.n	8002bfa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0e7      	b.n	8002dac <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d107      	bne.n	8002bfa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e0d8      	b.n	8002dac <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	331b      	adds	r3, #27
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	4413      	add	r3, r2
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0204 	and.w	r2, r3, #4
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10c      	bne.n	8002c32 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	331b      	adds	r3, #27
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	4413      	add	r3, r2
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	0d5b      	lsrs	r3, r3, #21
 8002c28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e00b      	b.n	8002c4a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	331b      	adds	r3, #27
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	4413      	add	r3, r2
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	08db      	lsrs	r3, r3, #3
 8002c42:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	331b      	adds	r3, #27
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	4413      	add	r3, r2
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0202 	and.w	r2, r3, #2
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	331b      	adds	r3, #27
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 020f 	and.w	r2, r3, #15
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	331b      	adds	r3, #27
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	4413      	add	r3, r2
 8002c84:	3304      	adds	r3, #4
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	331b      	adds	r3, #27
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	0a1a      	lsrs	r2, r3, #8
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	0c1a      	lsrs	r2, r3, #16
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	3302      	adds	r3, #2
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	0e1a      	lsrs	r2, r3, #24
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	3303      	adds	r3, #3
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	0a1a      	lsrs	r2, r3, #8
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	3305      	adds	r3, #5
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	0c1a      	lsrs	r2, r3, #16
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	3306      	adds	r3, #6
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	0e1a      	lsrs	r2, r3, #24
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	3307      	adds	r3, #7
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d108      	bne.n	8002d8a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0220 	orr.w	r2, r2, #32
 8002d86:	60da      	str	r2, [r3, #12]
 8002d88:	e007      	b.n	8002d9a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0220 	orr.w	r2, r2, #32
 8002d98:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e006      	b.n	8002dac <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
  }
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	371c      	adds	r7, #28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dcc:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002dce:	7afb      	ldrb	r3, [r7, #11]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d002      	beq.n	8002dda <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002dd4:	7afb      	ldrb	r3, [r7, #11]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d10f      	bne.n	8002dfa <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d106      	bne.n	8002dee <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e005      	b.n	8002dfa <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e18:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d002      	beq.n	8002e26 <HAL_CAN_ActivateNotification+0x1e>
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d109      	bne.n	8002e3a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6959      	ldr	r1, [r3, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e006      	b.n	8002e48 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
  }
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e64:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d002      	beq.n	8002e72 <HAL_CAN_DeactivateNotification+0x1e>
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d10a      	bne.n	8002e88 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6959      	ldr	r1, [r3, #20]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	400a      	ands	r2, r1
 8002e82:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e006      	b.n	8002e96 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
  }
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b08a      	sub	sp, #40	; 0x28
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d07c      	beq.n	8002fe2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d023      	beq.n	8002f3a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f983 	bl	8003210 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f0a:	e016      	b.n	8002f3a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d004      	beq.n	8002f20 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1e:	e00c      	b.n	8002f3a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d004      	beq.n	8002f34 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
 8002f32:	e002      	b.n	8002f3a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f989 	bl	800324c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d024      	beq.n	8002f8e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f963 	bl	8003224 <HAL_CAN_TxMailbox1CompleteCallback>
 8002f5e:	e016      	b.n	8002f8e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d004      	beq.n	8002f74 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
 8002f72:	e00c      	b.n	8002f8e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d004      	beq.n	8002f88 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
 8002f86:	e002      	b.n	8002f8e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f969 	bl	8003260 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d024      	beq.n	8002fe2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fa0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f943 	bl	8003238 <HAL_CAN_TxMailbox2CompleteCallback>
 8002fb2:	e016      	b.n	8002fe2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d004      	beq.n	8002fc8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc6:	e00c      	b.n	8002fe2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d004      	beq.n	8002fdc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fda:	e002      	b.n	8002fe2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f949 	bl	8003274 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00c      	beq.n	8003006 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2210      	movs	r2, #16
 8003004:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00b      	beq.n	8003028 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d006      	beq.n	8003028 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2208      	movs	r2, #8
 8003020:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fd fce2 	bl	80009ec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7fd fcc1 	bl	80009c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00c      	beq.n	800306a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003060:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2210      	movs	r2, #16
 8003068:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00b      	beq.n	800308c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d006      	beq.n	800308c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2208      	movs	r2, #8
 8003084:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f908 	bl	800329c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f8ef 	bl	8003288 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d006      	beq.n	80030cc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2210      	movs	r2, #16
 80030c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f8f2 	bl	80032b0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d006      	beq.n	80030ee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2208      	movs	r2, #8
 80030e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f8eb 	bl	80032c4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d07b      	beq.n	80031f0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d072      	beq.n	80031e8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	f043 0302 	orr.w	r3, r3, #2
 8003138:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	f043 0304 	orr.w	r3, r3, #4
 8003154:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800315c:	2b00      	cmp	r3, #0
 800315e:	d043      	beq.n	80031e8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003166:	2b00      	cmp	r3, #0
 8003168:	d03e      	beq.n	80031e8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003170:	2b60      	cmp	r3, #96	; 0x60
 8003172:	d02b      	beq.n	80031cc <HAL_CAN_IRQHandler+0x32a>
 8003174:	2b60      	cmp	r3, #96	; 0x60
 8003176:	d82e      	bhi.n	80031d6 <HAL_CAN_IRQHandler+0x334>
 8003178:	2b50      	cmp	r3, #80	; 0x50
 800317a:	d022      	beq.n	80031c2 <HAL_CAN_IRQHandler+0x320>
 800317c:	2b50      	cmp	r3, #80	; 0x50
 800317e:	d82a      	bhi.n	80031d6 <HAL_CAN_IRQHandler+0x334>
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	d019      	beq.n	80031b8 <HAL_CAN_IRQHandler+0x316>
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d826      	bhi.n	80031d6 <HAL_CAN_IRQHandler+0x334>
 8003188:	2b30      	cmp	r3, #48	; 0x30
 800318a:	d010      	beq.n	80031ae <HAL_CAN_IRQHandler+0x30c>
 800318c:	2b30      	cmp	r3, #48	; 0x30
 800318e:	d822      	bhi.n	80031d6 <HAL_CAN_IRQHandler+0x334>
 8003190:	2b10      	cmp	r3, #16
 8003192:	d002      	beq.n	800319a <HAL_CAN_IRQHandler+0x2f8>
 8003194:	2b20      	cmp	r3, #32
 8003196:	d005      	beq.n	80031a4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003198:	e01d      	b.n	80031d6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	f043 0308 	orr.w	r3, r3, #8
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031a2:	e019      	b.n	80031d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	f043 0310 	orr.w	r3, r3, #16
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031ac:	e014      	b.n	80031d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	f043 0320 	orr.w	r3, r3, #32
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031b6:	e00f      	b.n	80031d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031c0:	e00a      	b.n	80031d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031ca:	e005      	b.n	80031d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031d4:	e000      	b.n	80031d8 <HAL_CAN_IRQHandler+0x336>
            break;
 80031d6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80031e6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2204      	movs	r2, #4
 80031ee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d008      	beq.n	8003208 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f868 	bl	80032d8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003208:	bf00      	nop
 800320a:	3728      	adds	r7, #40	; 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <__NVIC_SetPriorityGrouping+0x40>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003308:	4013      	ands	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 8003316:	4313      	orrs	r3, r2
 8003318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331a:	4a04      	ldr	r2, [pc, #16]	; (800332c <__NVIC_SetPriorityGrouping+0x40>)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	60d3      	str	r3, [r2, #12]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00
 8003330:	05fa0000 	.word	0x05fa0000

08003334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <__NVIC_GetPriorityGrouping+0x18>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f003 0307 	and.w	r3, r3, #7
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	2b00      	cmp	r3, #0
 8003360:	db0b      	blt.n	800337a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4907      	ldr	r1, [pc, #28]	; (8003388 <__NVIC_EnableIRQ+0x38>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2001      	movs	r0, #1
 8003372:	fa00 f202 	lsl.w	r2, r0, r2
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000e100 	.word	0xe000e100

0800338c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	2b00      	cmp	r3, #0
 800339e:	db0a      	blt.n	80033b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	490c      	ldr	r1, [pc, #48]	; (80033d8 <__NVIC_SetPriority+0x4c>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	440b      	add	r3, r1
 80033b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b4:	e00a      	b.n	80033cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4908      	ldr	r1, [pc, #32]	; (80033dc <__NVIC_SetPriority+0x50>)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	3b04      	subs	r3, #4
 80033c4:	0112      	lsls	r2, r2, #4
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	440b      	add	r3, r1
 80033ca:	761a      	strb	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f1c3 0307 	rsb	r3, r3, #7
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	bf28      	it	cs
 80033fe:	2304      	movcs	r3, #4
 8003400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3304      	adds	r3, #4
 8003406:	2b06      	cmp	r3, #6
 8003408:	d902      	bls.n	8003410 <NVIC_EncodePriority+0x30>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3b03      	subs	r3, #3
 800340e:	e000      	b.n	8003412 <NVIC_EncodePriority+0x32>
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	401a      	ands	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003428:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	43d9      	mvns	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	4313      	orrs	r3, r2
         );
}
 800343a:	4618      	mov	r0, r3
 800343c:	3724      	adds	r7, #36	; 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003458:	d301      	bcc.n	800345e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800345a:	2301      	movs	r3, #1
 800345c:	e00f      	b.n	800347e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <SysTick_Config+0x40>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003466:	210f      	movs	r1, #15
 8003468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800346c:	f7ff ff8e 	bl	800338c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <SysTick_Config+0x40>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003476:	4b04      	ldr	r3, [pc, #16]	; (8003488 <SysTick_Config+0x40>)
 8003478:	2207      	movs	r2, #7
 800347a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	e000e010 	.word	0xe000e010

0800348c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff29 	bl	80032ec <__NVIC_SetPriorityGrouping>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b086      	sub	sp, #24
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b4:	f7ff ff3e 	bl	8003334 <__NVIC_GetPriorityGrouping>
 80034b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	6978      	ldr	r0, [r7, #20]
 80034c0:	f7ff ff8e 	bl	80033e0 <NVIC_EncodePriority>
 80034c4:	4602      	mov	r2, r0
 80034c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff5d 	bl	800338c <__NVIC_SetPriority>
}
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff31 	bl	8003350 <__NVIC_EnableIRQ>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ffa2 	bl	8003448 <SysTick_Config>
 8003504:	4603      	mov	r3, r0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e06a      	b.n	80035f8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003528:	2b00      	cmp	r3, #0
 800352a:	d106      	bne.n	800353a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2223      	movs	r2, #35	; 0x23
 8003530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7fe fc49 	bl	8001dcc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353a:	4b31      	ldr	r3, [pc, #196]	; (8003600 <HAL_ETH_Init+0xf0>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	4a30      	ldr	r2, [pc, #192]	; (8003600 <HAL_ETH_Init+0xf0>)
 8003540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003544:	6453      	str	r3, [r2, #68]	; 0x44
 8003546:	4b2e      	ldr	r3, [pc, #184]	; (8003600 <HAL_ETH_Init+0xf0>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003552:	4b2c      	ldr	r3, [pc, #176]	; (8003604 <HAL_ETH_Init+0xf4>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4a2b      	ldr	r2, [pc, #172]	; (8003604 <HAL_ETH_Init+0xf4>)
 8003558:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800355c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800355e:	4b29      	ldr	r3, [pc, #164]	; (8003604 <HAL_ETH_Init+0xf4>)
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	4927      	ldr	r1, [pc, #156]	; (8003604 <HAL_ETH_Init+0xf4>)
 8003568:	4313      	orrs	r3, r2
 800356a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800356c:	4b25      	ldr	r3, [pc, #148]	; (8003604 <HAL_ETH_Init+0xf4>)
 800356e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003586:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003588:	f7fe ff66 	bl	8002458 <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800358e:	e011      	b.n	80035b4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003590:	f7fe ff62 	bl	8002458 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800359e:	d909      	bls.n	80035b4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2204      	movs	r2, #4
 80035a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	22e0      	movs	r2, #224	; 0xe0
 80035ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e021      	b.n	80035f8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1e4      	bne.n	8003590 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f958 	bl	800387c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f9ff 	bl	80039d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fa55 	bl	8003a82 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	461a      	mov	r2, r3
 80035de:	2100      	movs	r1, #0
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f9bd 	bl	8003960 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2210      	movs	r2, #16
 80035f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40023800 	.word	0x40023800
 8003604:	40013800 	.word	0x40013800

08003608 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4b51      	ldr	r3, [pc, #324]	; (8003764 <ETH_SetMACConfig+0x15c>)
 800361e:	4013      	ands	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	7c1b      	ldrb	r3, [r3, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d102      	bne.n	8003630 <ETH_SetMACConfig+0x28>
 800362a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800362e:	e000      	b.n	8003632 <ETH_SetMACConfig+0x2a>
 8003630:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	7c5b      	ldrb	r3, [r3, #17]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <ETH_SetMACConfig+0x38>
 800363a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800363e:	e000      	b.n	8003642 <ETH_SetMACConfig+0x3a>
 8003640:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003642:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003648:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	7fdb      	ldrb	r3, [r3, #31]
 800364e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003650:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003656:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	7f92      	ldrb	r2, [r2, #30]
 800365c:	2a00      	cmp	r2, #0
 800365e:	d102      	bne.n	8003666 <ETH_SetMACConfig+0x5e>
 8003660:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003664:	e000      	b.n	8003668 <ETH_SetMACConfig+0x60>
 8003666:	2200      	movs	r2, #0
                        macconf->Speed |
 8003668:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	7f1b      	ldrb	r3, [r3, #28]
 800366e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003670:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003676:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	791b      	ldrb	r3, [r3, #4]
 800367c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800367e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003686:	2a00      	cmp	r2, #0
 8003688:	d102      	bne.n	8003690 <ETH_SetMACConfig+0x88>
 800368a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800368e:	e000      	b.n	8003692 <ETH_SetMACConfig+0x8a>
 8003690:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003692:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	7bdb      	ldrb	r3, [r3, #15]
 8003698:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800369a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80036a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036a8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80036aa:	4313      	orrs	r3, r2
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036c2:	2001      	movs	r0, #1
 80036c4:	f7fe fed4 	bl	8002470 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	f64f 7341 	movw	r3, #65345	; 0xff41
 80036de:	4013      	ands	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80036ee:	2a00      	cmp	r2, #0
 80036f0:	d101      	bne.n	80036f6 <ETH_SetMACConfig+0xee>
 80036f2:	2280      	movs	r2, #128	; 0x80
 80036f4:	e000      	b.n	80036f8 <ETH_SetMACConfig+0xf0>
 80036f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80036f8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80036fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003706:	2a01      	cmp	r2, #1
 8003708:	d101      	bne.n	800370e <ETH_SetMACConfig+0x106>
 800370a:	2208      	movs	r2, #8
 800370c:	e000      	b.n	8003710 <ETH_SetMACConfig+0x108>
 800370e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003710:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003718:	2a01      	cmp	r2, #1
 800371a:	d101      	bne.n	8003720 <ETH_SetMACConfig+0x118>
 800371c:	2204      	movs	r2, #4
 800371e:	e000      	b.n	8003722 <ETH_SetMACConfig+0x11a>
 8003720:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003722:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800372a:	2a01      	cmp	r2, #1
 800372c:	d101      	bne.n	8003732 <ETH_SetMACConfig+0x12a>
 800372e:	2202      	movs	r2, #2
 8003730:	e000      	b.n	8003734 <ETH_SetMACConfig+0x12c>
 8003732:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003734:	4313      	orrs	r3, r2
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800374c:	2001      	movs	r0, #1
 800374e:	f7fe fe8f 	bl	8002470 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	619a      	str	r2, [r3, #24]
}
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	ff20810f 	.word	0xff20810f

08003768 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4b3d      	ldr	r3, [pc, #244]	; (8003878 <ETH_SetDMAConfig+0x110>)
 8003782:	4013      	ands	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	7b1b      	ldrb	r3, [r3, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <ETH_SetDMAConfig+0x2c>
 800378e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003792:	e000      	b.n	8003796 <ETH_SetDMAConfig+0x2e>
 8003794:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	7b5b      	ldrb	r3, [r3, #13]
 800379a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800379c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	7f52      	ldrb	r2, [r2, #29]
 80037a2:	2a00      	cmp	r2, #0
 80037a4:	d102      	bne.n	80037ac <ETH_SetDMAConfig+0x44>
 80037a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037aa:	e000      	b.n	80037ae <ETH_SetDMAConfig+0x46>
 80037ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80037ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	7b9b      	ldrb	r3, [r3, #14]
 80037b4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80037b6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80037bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	7f1b      	ldrb	r3, [r3, #28]
 80037c2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80037c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	7f9b      	ldrb	r3, [r3, #30]
 80037ca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80037cc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80037d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037da:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80037dc:	4313      	orrs	r3, r2
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ec:	461a      	mov	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037fe:	2001      	movs	r0, #1
 8003800:	f7fe fe36 	bl	8002470 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800380c:	461a      	mov	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	791b      	ldrb	r3, [r3, #4]
 8003816:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800381c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003822:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003828:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003830:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003832:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800383a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003840:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800384a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800384e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800385c:	2001      	movs	r0, #1
 800385e:	f7fe fe07 	bl	8002470 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800386a:	461a      	mov	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6013      	str	r3, [r2, #0]
}
 8003870:	bf00      	nop
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	f8de3f23 	.word	0xf8de3f23

0800387c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b0a6      	sub	sp, #152	; 0x98
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003890:	2300      	movs	r3, #0
 8003892:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003894:	2300      	movs	r3, #0
 8003896:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800389a:	2301      	movs	r3, #1
 800389c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80038b8:	2300      	movs	r3, #0
 80038ba:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80038bc:	2300      	movs	r3, #0
 80038be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80038d8:	2300      	movs	r3, #0
 80038da:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80038de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038e2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80038e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80038f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038f4:	4619      	mov	r1, r3
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff fe86 	bl	8003608 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80038fc:	2301      	movs	r3, #1
 80038fe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003900:	2301      	movs	r3, #1
 8003902:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003904:	2301      	movs	r3, #1
 8003906:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800390a:	2301      	movs	r3, #1
 800390c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003912:	2300      	movs	r3, #0
 8003914:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003918:	2300      	movs	r3, #0
 800391a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800391e:	2300      	movs	r3, #0
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003928:	2301      	movs	r3, #1
 800392a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800392c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003930:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003932:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003936:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800393c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003944:	2300      	movs	r3, #0
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003948:	2300      	movs	r3, #0
 800394a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800394c:	f107 0308 	add.w	r3, r7, #8
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff ff08 	bl	8003768 <ETH_SetDMAConfig>
}
 8003958:	bf00      	nop
 800395a:	3798      	adds	r7, #152	; 0x98
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3305      	adds	r3, #5
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	3204      	adds	r2, #4
 8003978:	7812      	ldrb	r2, [r2, #0]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <ETH_MACAddressConfig+0x68>)
 8003982:	4413      	add	r3, r2
 8003984:	461a      	mov	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3303      	adds	r3, #3
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	061a      	lsls	r2, r3, #24
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3302      	adds	r3, #2
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3301      	adds	r3, #1
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	4313      	orrs	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	7812      	ldrb	r2, [r2, #0]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <ETH_MACAddressConfig+0x6c>)
 80039b2:	4413      	add	r3, r2
 80039b4:	461a      	mov	r2, r3
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	6013      	str	r3, [r2, #0]
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40028040 	.word	0x40028040
 80039cc:	40028044 	.word	0x40028044

080039d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e03e      	b.n	8003a5c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68d9      	ldr	r1, [r3, #12]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	440b      	add	r3, r1
 80039ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2200      	movs	r2, #0
 80039fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2200      	movs	r2, #0
 8003a06:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	3206      	adds	r2, #6
 8003a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d80c      	bhi.n	8003a40 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68d9      	ldr	r1, [r3, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	440b      	add	r3, r1
 8003a38:	461a      	mov	r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	60da      	str	r2, [r3, #12]
 8003a3e:	e004      	b.n	8003a4a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	461a      	mov	r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d9bd      	bls.n	80039de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a74:	611a      	str	r2, [r3, #16]
}
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b085      	sub	sp, #20
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e046      	b.n	8003b1e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6919      	ldr	r1, [r3, #16]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	440b      	add	r3, r1
 8003aa0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2200      	movs	r2, #0
 8003abe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003acc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003ad4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	3212      	adds	r2, #18
 8003aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d80c      	bhi.n	8003b0e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6919      	ldr	r1, [r3, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	440b      	add	r3, r1
 8003b06:	461a      	mov	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	60da      	str	r2, [r3, #12]
 8003b0c:	e004      	b.n	8003b18 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	461a      	mov	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d9b5      	bls.n	8003a90 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b4e:	60da      	str	r2, [r3, #12]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b089      	sub	sp, #36	; 0x24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	e175      	b.n	8003e68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	f040 8164 	bne.w	8003e62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d005      	beq.n	8003bb2 <HAL_GPIO_Init+0x56>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d130      	bne.n	8003c14 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003be8:	2201      	movs	r2, #1
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 0201 	and.w	r2, r3, #1
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d017      	beq.n	8003c50 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 0303 	and.w	r3, r3, #3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d123      	bne.n	8003ca4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	08da      	lsrs	r2, r3, #3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3208      	adds	r2, #8
 8003c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	220f      	movs	r2, #15
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	08da      	lsrs	r2, r3, #3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3208      	adds	r2, #8
 8003c9e:	69b9      	ldr	r1, [r7, #24]
 8003ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	2203      	movs	r2, #3
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0203 	and.w	r2, r3, #3
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80be 	beq.w	8003e62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce6:	4b66      	ldr	r3, [pc, #408]	; (8003e80 <HAL_GPIO_Init+0x324>)
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	4a65      	ldr	r2, [pc, #404]	; (8003e80 <HAL_GPIO_Init+0x324>)
 8003cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cf2:	4b63      	ldr	r3, [pc, #396]	; (8003e80 <HAL_GPIO_Init+0x324>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003cfe:	4a61      	ldr	r2, [pc, #388]	; (8003e84 <HAL_GPIO_Init+0x328>)
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	089b      	lsrs	r3, r3, #2
 8003d04:	3302      	adds	r3, #2
 8003d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	220f      	movs	r2, #15
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a58      	ldr	r2, [pc, #352]	; (8003e88 <HAL_GPIO_Init+0x32c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d037      	beq.n	8003d9a <HAL_GPIO_Init+0x23e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a57      	ldr	r2, [pc, #348]	; (8003e8c <HAL_GPIO_Init+0x330>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d031      	beq.n	8003d96 <HAL_GPIO_Init+0x23a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a56      	ldr	r2, [pc, #344]	; (8003e90 <HAL_GPIO_Init+0x334>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d02b      	beq.n	8003d92 <HAL_GPIO_Init+0x236>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a55      	ldr	r2, [pc, #340]	; (8003e94 <HAL_GPIO_Init+0x338>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d025      	beq.n	8003d8e <HAL_GPIO_Init+0x232>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a54      	ldr	r2, [pc, #336]	; (8003e98 <HAL_GPIO_Init+0x33c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d01f      	beq.n	8003d8a <HAL_GPIO_Init+0x22e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a53      	ldr	r2, [pc, #332]	; (8003e9c <HAL_GPIO_Init+0x340>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d019      	beq.n	8003d86 <HAL_GPIO_Init+0x22a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a52      	ldr	r2, [pc, #328]	; (8003ea0 <HAL_GPIO_Init+0x344>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d013      	beq.n	8003d82 <HAL_GPIO_Init+0x226>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a51      	ldr	r2, [pc, #324]	; (8003ea4 <HAL_GPIO_Init+0x348>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00d      	beq.n	8003d7e <HAL_GPIO_Init+0x222>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a50      	ldr	r2, [pc, #320]	; (8003ea8 <HAL_GPIO_Init+0x34c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d007      	beq.n	8003d7a <HAL_GPIO_Init+0x21e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a4f      	ldr	r2, [pc, #316]	; (8003eac <HAL_GPIO_Init+0x350>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d101      	bne.n	8003d76 <HAL_GPIO_Init+0x21a>
 8003d72:	2309      	movs	r3, #9
 8003d74:	e012      	b.n	8003d9c <HAL_GPIO_Init+0x240>
 8003d76:	230a      	movs	r3, #10
 8003d78:	e010      	b.n	8003d9c <HAL_GPIO_Init+0x240>
 8003d7a:	2308      	movs	r3, #8
 8003d7c:	e00e      	b.n	8003d9c <HAL_GPIO_Init+0x240>
 8003d7e:	2307      	movs	r3, #7
 8003d80:	e00c      	b.n	8003d9c <HAL_GPIO_Init+0x240>
 8003d82:	2306      	movs	r3, #6
 8003d84:	e00a      	b.n	8003d9c <HAL_GPIO_Init+0x240>
 8003d86:	2305      	movs	r3, #5
 8003d88:	e008      	b.n	8003d9c <HAL_GPIO_Init+0x240>
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	e006      	b.n	8003d9c <HAL_GPIO_Init+0x240>
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e004      	b.n	8003d9c <HAL_GPIO_Init+0x240>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e002      	b.n	8003d9c <HAL_GPIO_Init+0x240>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <HAL_GPIO_Init+0x240>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	f002 0203 	and.w	r2, r2, #3
 8003da2:	0092      	lsls	r2, r2, #2
 8003da4:	4093      	lsls	r3, r2
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003dac:	4935      	ldr	r1, [pc, #212]	; (8003e84 <HAL_GPIO_Init+0x328>)
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	3302      	adds	r3, #2
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dba:	4b3d      	ldr	r3, [pc, #244]	; (8003eb0 <HAL_GPIO_Init+0x354>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dde:	4a34      	ldr	r2, [pc, #208]	; (8003eb0 <HAL_GPIO_Init+0x354>)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003de4:	4b32      	ldr	r3, [pc, #200]	; (8003eb0 <HAL_GPIO_Init+0x354>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e08:	4a29      	ldr	r2, [pc, #164]	; (8003eb0 <HAL_GPIO_Init+0x354>)
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e0e:	4b28      	ldr	r3, [pc, #160]	; (8003eb0 <HAL_GPIO_Init+0x354>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e32:	4a1f      	ldr	r2, [pc, #124]	; (8003eb0 <HAL_GPIO_Init+0x354>)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e38:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <HAL_GPIO_Init+0x354>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e5c:	4a14      	ldr	r2, [pc, #80]	; (8003eb0 <HAL_GPIO_Init+0x354>)
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3301      	adds	r3, #1
 8003e66:	61fb      	str	r3, [r7, #28]
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	2b0f      	cmp	r3, #15
 8003e6c:	f67f ae86 	bls.w	8003b7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	3724      	adds	r7, #36	; 0x24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40013800 	.word	0x40013800
 8003e88:	40020000 	.word	0x40020000
 8003e8c:	40020400 	.word	0x40020400
 8003e90:	40020800 	.word	0x40020800
 8003e94:	40020c00 	.word	0x40020c00
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40021400 	.word	0x40021400
 8003ea0:	40021800 	.word	0x40021800
 8003ea4:	40021c00 	.word	0x40021c00
 8003ea8:	40022000 	.word	0x40022000
 8003eac:	40022400 	.word	0x40022400
 8003eb0:	40013c00 	.word	0x40013c00

08003eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	807b      	strh	r3, [r7, #2]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ec4:	787b      	ldrb	r3, [r7, #1]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eca:	887a      	ldrh	r2, [r7, #2]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ed0:	e003      	b.n	8003eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ed2:	887b      	ldrh	r3, [r7, #2]
 8003ed4:	041a      	lsls	r2, r3, #16
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	619a      	str	r2, [r3, #24]
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee8:	b08f      	sub	sp, #60	; 0x3c
 8003eea:	af0a      	add	r7, sp, #40	; 0x28
 8003eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e116      	b.n	8004126 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f007 fb54 	bl	800b5c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f003 fdd3 	bl	8007ae2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	687e      	ldr	r6, [r7, #4]
 8003f44:	466d      	mov	r5, sp
 8003f46:	f106 0410 	add.w	r4, r6, #16
 8003f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f56:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f5a:	1d33      	adds	r3, r6, #4
 8003f5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f5e:	6838      	ldr	r0, [r7, #0]
 8003f60:	f003 fcb4 	bl	80078cc <USB_CoreInit>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e0d7      	b.n	8004126 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f003 fdc1 	bl	8007b04 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]
 8003f86:	e04a      	b.n	800401e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	333d      	adds	r3, #61	; 0x3d
 8003f98:	2201      	movs	r2, #1
 8003f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f9c:	7bfa      	ldrb	r2, [r7, #15]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	333c      	adds	r3, #60	; 0x3c
 8003fac:	7bfa      	ldrb	r2, [r7, #15]
 8003fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fb0:	7bfa      	ldrb	r2, [r7, #15]
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	b298      	uxth	r0, r3
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3344      	adds	r3, #68	; 0x44
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fc8:	7bfa      	ldrb	r2, [r7, #15]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	3340      	adds	r3, #64	; 0x40
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fdc:	7bfa      	ldrb	r2, [r7, #15]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	3348      	adds	r3, #72	; 0x48
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	334c      	adds	r3, #76	; 0x4c
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	3354      	adds	r3, #84	; 0x54
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	3301      	adds	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
 800401e:	7bfa      	ldrb	r2, [r7, #15]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	429a      	cmp	r2, r3
 8004026:	d3af      	bcc.n	8003f88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]
 800402c:	e044      	b.n	80040b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800402e:	7bfa      	ldrb	r2, [r7, #15]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004044:	7bfa      	ldrb	r2, [r7, #15]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800405a:	7bfa      	ldrb	r2, [r7, #15]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004070:	7bfa      	ldrb	r2, [r7, #15]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	3301      	adds	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
 80040b8:	7bfa      	ldrb	r2, [r7, #15]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d3b5      	bcc.n	800402e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	687e      	ldr	r6, [r7, #4]
 80040ca:	466d      	mov	r5, sp
 80040cc:	f106 0410 	add.w	r4, r6, #16
 80040d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80040e0:	1d33      	adds	r3, r6, #4
 80040e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040e4:	6838      	ldr	r0, [r7, #0]
 80040e6:	f003 fd59 	bl	8007b9c <USB_DevInit>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e014      	b.n	8004126 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	2b01      	cmp	r3, #1
 8004112:	d102      	bne.n	800411a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f001 f97b 	bl	8005410 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f004 fea7 	bl	8008e72 <USB_DevDisconnect>

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800412e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_PCD_Start+0x16>
 8004140:	2302      	movs	r3, #2
 8004142:	e012      	b.n	800416a <HAL_PCD_Start+0x3c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f003 fcb5 	bl	8007ac0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f004 fe68 	bl	8008e30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004172:	b590      	push	{r4, r7, lr}
 8004174:	b08d      	sub	sp, #52	; 0x34
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f004 ff26 	bl	8008fda <USB_GetMode>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 84b7 	bne.w	8004b04 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f004 fe8a 	bl	8008eb4 <USB_ReadInterrupts>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 84ad 	beq.w	8004b02 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	0a1b      	lsrs	r3, r3, #8
 80041b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f004 fe77 	bl	8008eb4 <USB_ReadInterrupts>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d107      	bne.n	80041e0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f002 0202 	and.w	r2, r2, #2
 80041de:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f004 fe65 	bl	8008eb4 <USB_ReadInterrupts>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d161      	bne.n	80042b8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0210 	bic.w	r2, r2, #16
 8004202:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	f003 020f 	and.w	r2, r3, #15
 8004210:	4613      	mov	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	4413      	add	r3, r2
 8004220:	3304      	adds	r3, #4
 8004222:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	0c5b      	lsrs	r3, r3, #17
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	2b02      	cmp	r3, #2
 800422e:	d124      	bne.n	800427a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d035      	beq.n	80042a8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800424a:	b29b      	uxth	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	6a38      	ldr	r0, [r7, #32]
 8004250:	f004 fc9c 	bl	8008b8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	091b      	lsrs	r3, r3, #4
 800425c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004260:	441a      	add	r2, r3
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	6a1a      	ldr	r2, [r3, #32]
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004272:	441a      	add	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	621a      	str	r2, [r3, #32]
 8004278:	e016      	b.n	80042a8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	0c5b      	lsrs	r3, r3, #17
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	2b06      	cmp	r3, #6
 8004284:	d110      	bne.n	80042a8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800428c:	2208      	movs	r2, #8
 800428e:	4619      	mov	r1, r3
 8004290:	6a38      	ldr	r0, [r7, #32]
 8004292:	f004 fc7b 	bl	8008b8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	6a1a      	ldr	r2, [r3, #32]
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042a2:	441a      	add	r2, r3
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0210 	orr.w	r2, r2, #16
 80042b6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f004 fdf9 	bl	8008eb4 <USB_ReadInterrupts>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042cc:	f040 80a7 	bne.w	800441e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f004 fdfe 	bl	8008eda <USB_ReadDevAllOutEpInterrupt>
 80042de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80042e0:	e099      	b.n	8004416 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 808e 	beq.w	800440a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f004 fe22 	bl	8008f42 <USB_ReadDevOutEPInterrupt>
 80042fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00c      	beq.n	8004324 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004316:	461a      	mov	r2, r3
 8004318:	2301      	movs	r3, #1
 800431a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800431c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fef0 	bl	8005104 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00c      	beq.n	8004348 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433a:	461a      	mov	r2, r3
 800433c:	2308      	movs	r3, #8
 800433e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 ffc6 	bl	80052d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435e:	461a      	mov	r2, r3
 8004360:	2310      	movs	r3, #16
 8004362:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d030      	beq.n	80043d0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004376:	2b80      	cmp	r3, #128	; 0x80
 8004378:	d109      	bne.n	800438e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004388:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800438c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800438e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004390:	4613      	mov	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	4413      	add	r3, r2
 80043a0:	3304      	adds	r3, #4
 80043a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	78db      	ldrb	r3, [r3, #3]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d108      	bne.n	80043be <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2200      	movs	r2, #0
 80043b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	4619      	mov	r1, r3
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f007 fa35 	bl	800b828 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	461a      	mov	r2, r3
 80043cc:	2302      	movs	r3, #2
 80043ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d008      	beq.n	80043ec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e6:	461a      	mov	r2, r3
 80043e8:	2320      	movs	r3, #32
 80043ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004402:	461a      	mov	r2, r3
 8004404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004408:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	3301      	adds	r3, #1
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	2b00      	cmp	r3, #0
 800441a:	f47f af62 	bne.w	80042e2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f004 fd46 	bl	8008eb4 <USB_ReadInterrupts>
 8004428:	4603      	mov	r3, r0
 800442a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800442e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004432:	f040 80db 	bne.w	80045ec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f004 fd67 	bl	8008f0e <USB_ReadDevAllInEpInterrupt>
 8004440:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004446:	e0cd      	b.n	80045e4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 80c2 	beq.w	80045d8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	4611      	mov	r1, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f004 fd8d 	bl	8008f7e <USB_ReadDevInEPInterrupt>
 8004464:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d057      	beq.n	8004520 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	2201      	movs	r2, #1
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	43db      	mvns	r3, r3
 800448a:	69f9      	ldr	r1, [r7, #28]
 800448c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004490:	4013      	ands	r3, r2
 8004492:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a0:	461a      	mov	r2, r3
 80044a2:	2301      	movs	r3, #1
 80044a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d132      	bne.n	8004514 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b2:	4613      	mov	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	334c      	adds	r3, #76	; 0x4c
 80044be:	6819      	ldr	r1, [r3, #0]
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c4:	4613      	mov	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4403      	add	r3, r0
 80044ce:	3348      	adds	r3, #72	; 0x48
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4419      	add	r1, r3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d8:	4613      	mov	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4403      	add	r3, r0
 80044e2:	334c      	adds	r3, #76	; 0x4c
 80044e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d113      	bne.n	8004514 <HAL_PCD_IRQHandler+0x3a2>
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f0:	4613      	mov	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	3354      	adds	r3, #84	; 0x54
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d108      	bne.n	8004514 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800450c:	461a      	mov	r2, r3
 800450e:	2101      	movs	r1, #1
 8004510:	f004 fd96 	bl	8009040 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	b2db      	uxtb	r3, r3
 8004518:	4619      	mov	r1, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f007 f8ff 	bl	800b71e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d008      	beq.n	800453c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004536:	461a      	mov	r2, r3
 8004538:	2308      	movs	r3, #8
 800453a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	d008      	beq.n	8004558 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004552:	461a      	mov	r2, r3
 8004554:	2310      	movs	r3, #16
 8004556:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456e:	461a      	mov	r2, r3
 8004570:	2340      	movs	r3, #64	; 0x40
 8004572:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d023      	beq.n	80045c6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800457e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004580:	6a38      	ldr	r0, [r7, #32]
 8004582:	f003 fc69 	bl	8007e58 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004588:	4613      	mov	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	3338      	adds	r3, #56	; 0x38
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	4413      	add	r3, r2
 8004596:	3304      	adds	r3, #4
 8004598:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	78db      	ldrb	r3, [r3, #3]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d108      	bne.n	80045b4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2200      	movs	r2, #0
 80045a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	4619      	mov	r1, r3
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f007 f94c 	bl	800b84c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c0:	461a      	mov	r2, r3
 80045c2:	2302      	movs	r3, #2
 80045c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80045d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fd08 	bl	8004fe8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	3301      	adds	r3, #1
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	085b      	lsrs	r3, r3, #1
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f47f af2e 	bne.w	8004448 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f004 fc5f 	bl	8008eb4 <USB_ReadInterrupts>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004600:	d122      	bne.n	8004648 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800461c:	2b01      	cmp	r3, #1
 800461e:	d108      	bne.n	8004632 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004628:	2100      	movs	r1, #0
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f007 fac6 	bl	800bbbc <HAL_PCDEx_LPM_Callback>
 8004630:	e002      	b.n	8004638 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f007 f8ea 	bl	800b80c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004646:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f004 fc31 	bl	8008eb4 <USB_ReadInterrupts>
 8004652:	4603      	mov	r3, r0
 8004654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800465c:	d112      	bne.n	8004684 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	d102      	bne.n	8004674 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f007 f8a6 	bl	800b7c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004682:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f004 fc13 	bl	8008eb4 <USB_ReadInterrupts>
 800468e:	4603      	mov	r3, r0
 8004690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004698:	d121      	bne.n	80046de <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695a      	ldr	r2, [r3, #20]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80046a8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d111      	bne.n	80046d8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c2:	089b      	lsrs	r3, r3, #2
 80046c4:	f003 020f 	and.w	r2, r3, #15
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80046ce:	2101      	movs	r1, #1
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f007 fa73 	bl	800bbbc <HAL_PCDEx_LPM_Callback>
 80046d6:	e002      	b.n	80046de <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f007 f871 	bl	800b7c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f004 fbe6 	bl	8008eb4 <USB_ReadInterrupts>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f2:	f040 80b7 	bne.w	8004864 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	69fa      	ldr	r2, [r7, #28]
 8004700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2110      	movs	r1, #16
 8004710:	4618      	mov	r0, r3
 8004712:	f003 fba1 	bl	8007e58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004716:	2300      	movs	r3, #0
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800471a:	e046      	b.n	80047aa <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	461a      	mov	r2, r3
 800472a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800472e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004740:	0151      	lsls	r1, r2, #5
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	440a      	add	r2, r1
 8004746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800474e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475c:	461a      	mov	r2, r3
 800475e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004762:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004774:	0151      	lsls	r1, r2, #5
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	440a      	add	r2, r1
 800477a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800477e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004782:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004794:	0151      	lsls	r1, r2, #5
 8004796:	69fa      	ldr	r2, [r7, #28]
 8004798:	440a      	add	r2, r1
 800479a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800479e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047a2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a6:	3301      	adds	r3, #1
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d3b3      	bcc.n	800471c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047c2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80047c6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d016      	beq.n	80047fe <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047e0:	f043 030b 	orr.w	r3, r3, #11
 80047e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047f6:	f043 030b 	orr.w	r3, r3, #11
 80047fa:	6453      	str	r3, [r2, #68]	; 0x44
 80047fc:	e015      	b.n	800482a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004804:	695a      	ldr	r2, [r3, #20]
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480c:	4619      	mov	r1, r3
 800480e:	f242 032b 	movw	r3, #8235	; 0x202b
 8004812:	4313      	orrs	r3, r2
 8004814:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004824:	f043 030b 	orr.w	r3, r3, #11
 8004828:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004838:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800483c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800484e:	461a      	mov	r2, r3
 8004850:	f004 fbf6 	bl	8009040 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f004 fb23 	bl	8008eb4 <USB_ReadInterrupts>
 800486e:	4603      	mov	r3, r0
 8004870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004878:	d124      	bne.n	80048c4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f004 fbba 	bl	8008ff8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f003 fb62 	bl	8007f52 <USB_GetDevSpeed>
 800488e:	4603      	mov	r3, r0
 8004890:	461a      	mov	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681c      	ldr	r4, [r3, #0]
 800489a:	f001 fa83 	bl	8005da4 <HAL_RCC_GetHCLKFreq>
 800489e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	461a      	mov	r2, r3
 80048a8:	4620      	mov	r0, r4
 80048aa:	f003 f867 	bl	800797c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f006 ff5d 	bl	800b76e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80048c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f004 faf3 	bl	8008eb4 <USB_ReadInterrupts>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d10a      	bne.n	80048ee <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f006 ff3a 	bl	800b752 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695a      	ldr	r2, [r3, #20]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f002 0208 	and.w	r2, r2, #8
 80048ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f004 fade 	bl	8008eb4 <USB_ReadInterrupts>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	d122      	bne.n	8004948 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800490e:	2301      	movs	r3, #1
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
 8004912:	e014      	b.n	800493e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004918:	4613      	mov	r3, r2
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d105      	bne.n	8004938 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	b2db      	uxtb	r3, r3
 8004930:	4619      	mov	r1, r3
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fb27 	bl	8004f86 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	3301      	adds	r3, #1
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004944:	429a      	cmp	r2, r3
 8004946:	d3e5      	bcc.n	8004914 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f004 fab1 	bl	8008eb4 <USB_ReadInterrupts>
 8004952:	4603      	mov	r3, r0
 8004954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800495c:	d13b      	bne.n	80049d6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800495e:	2301      	movs	r3, #1
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
 8004962:	e02b      	b.n	80049bc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004978:	4613      	mov	r3, r2
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4413      	add	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	3340      	adds	r3, #64	; 0x40
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d115      	bne.n	80049b6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800498a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800498c:	2b00      	cmp	r3, #0
 800498e:	da12      	bge.n	80049b6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004994:	4613      	mov	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	333f      	adds	r3, #63	; 0x3f
 80049a0:	2201      	movs	r2, #1
 80049a2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	4619      	mov	r1, r3
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fae8 	bl	8004f86 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	3301      	adds	r3, #1
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d3ce      	bcc.n	8004964 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80049d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f004 fa6a 	bl	8008eb4 <USB_ReadInterrupts>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049ea:	d155      	bne.n	8004a98 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049ec:	2301      	movs	r3, #1
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
 80049f0:	e045      	b.n	8004a7e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a06:	4613      	mov	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d12e      	bne.n	8004a78 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a1a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	da2b      	bge.n	8004a78 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004a2c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d121      	bne.n	8004a78 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a38:	4613      	mov	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004a46:	2201      	movs	r2, #1
 8004a48:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a74:	6053      	str	r3, [r2, #4]
            break;
 8004a76:	e007      	b.n	8004a88 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d3b4      	bcc.n	80049f2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695a      	ldr	r2, [r3, #20]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004a96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f004 fa09 	bl	8008eb4 <USB_ReadInterrupts>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aac:	d10a      	bne.n	8004ac4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f006 fede 	bl	800b870 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f004 f9f3 	bl	8008eb4 <USB_ReadInterrupts>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d115      	bne.n	8004b04 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f006 fece 	bl	800b88c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	605a      	str	r2, [r3, #4]
 8004b00:	e000      	b.n	8004b04 <HAL_PCD_IRQHandler+0x992>
      return;
 8004b02:	bf00      	nop
    }
  }
}
 8004b04:	3734      	adds	r7, #52	; 0x34
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd90      	pop	{r4, r7, pc}

08004b0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	460b      	mov	r3, r1
 8004b14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_PCD_SetAddress+0x1a>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e013      	b.n	8004b4c <HAL_PCD_SetAddress+0x42>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	78fa      	ldrb	r2, [r7, #3]
 8004b30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	78fa      	ldrb	r2, [r7, #3]
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f004 f951 	bl	8008de4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	4611      	mov	r1, r2
 8004b60:	461a      	mov	r2, r3
 8004b62:	4603      	mov	r3, r0
 8004b64:	70fb      	strb	r3, [r7, #3]
 8004b66:	460b      	mov	r3, r1
 8004b68:	803b      	strh	r3, [r7, #0]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	da0f      	bge.n	8004b9a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b7a:	78fb      	ldrb	r3, [r7, #3]
 8004b7c:	f003 020f 	and.w	r2, r3, #15
 8004b80:	4613      	mov	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	3338      	adds	r3, #56	; 0x38
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3304      	adds	r3, #4
 8004b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	705a      	strb	r2, [r3, #1]
 8004b98:	e00f      	b.n	8004bba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	f003 020f 	and.w	r2, r3, #15
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	4413      	add	r3, r2
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004bba:	78fb      	ldrb	r3, [r7, #3]
 8004bbc:	f003 030f 	and.w	r3, r3, #15
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004bc6:	883a      	ldrh	r2, [r7, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	78ba      	ldrb	r2, [r7, #2]
 8004bd0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d004      	beq.n	8004be4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004be4:	78bb      	ldrb	r3, [r7, #2]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d102      	bne.n	8004bf0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_PCD_EP_Open+0xaa>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e00e      	b.n	8004c1c <HAL_PCD_EP_Open+0xc8>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68f9      	ldr	r1, [r7, #12]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f003 f9c5 	bl	8007f9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	da0f      	bge.n	8004c58 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	f003 020f 	and.w	r2, r3, #15
 8004c3e:	4613      	mov	r3, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	3338      	adds	r3, #56	; 0x38
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	705a      	strb	r2, [r3, #1]
 8004c56:	e00f      	b.n	8004c78 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	f003 020f 	and.w	r2, r3, #15
 8004c5e:	4613      	mov	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	3304      	adds	r3, #4
 8004c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <HAL_PCD_EP_Close+0x6e>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e00e      	b.n	8004cb0 <HAL_PCD_EP_Close+0x8c>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68f9      	ldr	r1, [r7, #12]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f003 fa03 	bl	80080ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	607a      	str	r2, [r7, #4]
 8004cc2:	603b      	str	r3, [r7, #0]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cc8:	7afb      	ldrb	r3, [r7, #11]
 8004cca:	f003 020f 	and.w	r2, r3, #15
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4413      	add	r3, r2
 8004cde:	3304      	adds	r3, #4
 8004ce0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cfa:	7afb      	ldrb	r3, [r7, #11]
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d102      	bne.n	8004d14 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d14:	7afb      	ldrb	r3, [r7, #11]
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6979      	ldr	r1, [r7, #20]
 8004d2c:	f003 fcea 	bl	8008704 <USB_EP0StartXfer>
 8004d30:	e008      	b.n	8004d44 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6979      	ldr	r1, [r7, #20]
 8004d40:	f003 fa90 	bl	8008264 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	460b      	mov	r3, r1
 8004d58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	f003 020f 	and.w	r2, r3, #15
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	4613      	mov	r3, r2
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004d70:	681b      	ldr	r3, [r3, #0]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b086      	sub	sp, #24
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d8e:	7afb      	ldrb	r3, [r7, #11]
 8004d90:	f003 020f 	and.w	r2, r3, #15
 8004d94:	4613      	mov	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	3338      	adds	r3, #56	; 0x38
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4413      	add	r3, r2
 8004da2:	3304      	adds	r3, #4
 8004da4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2200      	movs	r2, #0
 8004db6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dbe:	7afb      	ldrb	r3, [r7, #11]
 8004dc0:	f003 030f 	and.w	r3, r3, #15
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d102      	bne.n	8004dd8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004dd8:	7afb      	ldrb	r3, [r7, #11]
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d109      	bne.n	8004df6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	6979      	ldr	r1, [r7, #20]
 8004df0:	f003 fc88 	bl	8008704 <USB_EP0StartXfer>
 8004df4:	e008      	b.n	8004e08 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	461a      	mov	r2, r3
 8004e02:	6979      	ldr	r1, [r7, #20]
 8004e04:	f003 fa2e 	bl	8008264 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004e1e:	78fb      	ldrb	r3, [r7, #3]
 8004e20:	f003 020f 	and.w	r2, r3, #15
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d901      	bls.n	8004e30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e050      	b.n	8004ed2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	da0f      	bge.n	8004e58 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	f003 020f 	and.w	r2, r3, #15
 8004e3e:	4613      	mov	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	3338      	adds	r3, #56	; 0x38
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2201      	movs	r2, #1
 8004e54:	705a      	strb	r2, [r3, #1]
 8004e56:	e00d      	b.n	8004e74 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e58:	78fa      	ldrb	r2, [r7, #3]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	4413      	add	r3, r2
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	f003 030f 	and.w	r3, r3, #15
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_PCD_EP_SetStall+0x82>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e01e      	b.n	8004ed2 <HAL_PCD_EP_SetStall+0xc0>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68f9      	ldr	r1, [r7, #12]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f003 feca 	bl	8008c3c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ea8:	78fb      	ldrb	r3, [r7, #3]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	b2d9      	uxtb	r1, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f004 f8bc 	bl	8009040 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	f003 020f 	and.w	r2, r3, #15
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d901      	bls.n	8004ef8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e042      	b.n	8004f7e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	da0f      	bge.n	8004f20 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	f003 020f 	and.w	r2, r3, #15
 8004f06:	4613      	mov	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	3338      	adds	r3, #56	; 0x38
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	4413      	add	r3, r2
 8004f14:	3304      	adds	r3, #4
 8004f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	705a      	strb	r2, [r3, #1]
 8004f1e:	e00f      	b.n	8004f40 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	f003 020f 	and.w	r2, r3, #15
 8004f26:	4613      	mov	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	4413      	add	r3, r2
 8004f36:	3304      	adds	r3, #4
 8004f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f46:	78fb      	ldrb	r3, [r7, #3]
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_PCD_EP_ClrStall+0x86>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e00e      	b.n	8004f7e <HAL_PCD_EP_ClrStall+0xa4>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68f9      	ldr	r1, [r7, #12]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f003 fed2 	bl	8008d18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	da0c      	bge.n	8004fb4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	f003 020f 	and.w	r2, r3, #15
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	3338      	adds	r3, #56	; 0x38
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	4413      	add	r3, r2
 8004fae:	3304      	adds	r3, #4
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e00c      	b.n	8004fce <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	f003 020f 	and.w	r2, r3, #15
 8004fba:	4613      	mov	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	4413      	add	r3, r2
 8004fca:	3304      	adds	r3, #4
 8004fcc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68f9      	ldr	r1, [r7, #12]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f003 fcf1 	bl	80089bc <USB_EPStopXfer>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004fde:	7afb      	ldrb	r3, [r7, #11]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	4613      	mov	r3, r2
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	4413      	add	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	3338      	adds	r3, #56	; 0x38
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	4413      	add	r3, r2
 800500c:	3304      	adds	r3, #4
 800500e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a1a      	ldr	r2, [r3, #32]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	429a      	cmp	r2, r3
 800501a:	d901      	bls.n	8005020 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e06c      	b.n	80050fa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	699a      	ldr	r2, [r3, #24]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	429a      	cmp	r2, r3
 8005034:	d902      	bls.n	800503c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	3303      	adds	r3, #3
 8005040:	089b      	lsrs	r3, r3, #2
 8005042:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005044:	e02b      	b.n	800509e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	429a      	cmp	r2, r3
 800505a:	d902      	bls.n	8005062 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	3303      	adds	r3, #3
 8005066:	089b      	lsrs	r3, r3, #2
 8005068:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6919      	ldr	r1, [r3, #16]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	b2da      	uxtb	r2, r3
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800507a:	b2db      	uxtb	r3, r3
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	4603      	mov	r3, r0
 8005080:	6978      	ldr	r0, [r7, #20]
 8005082:	f003 fd45 	bl	8008b10 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	441a      	add	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1a      	ldr	r2, [r3, #32]
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	441a      	add	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d809      	bhi.n	80050c8 <PCD_WriteEmptyTxFifo+0xe0>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a1a      	ldr	r2, [r3, #32]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050bc:	429a      	cmp	r2, r3
 80050be:	d203      	bcs.n	80050c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1be      	bne.n	8005046 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	699a      	ldr	r2, [r3, #24]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d811      	bhi.n	80050f8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	2201      	movs	r2, #1
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	6939      	ldr	r1, [r7, #16]
 80050f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050f4:	4013      	ands	r3, r2
 80050f6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3720      	adds	r7, #32
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	333c      	adds	r3, #60	; 0x3c
 800511c:	3304      	adds	r3, #4
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d17b      	bne.n	8005232 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d015      	beq.n	8005170 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	4a61      	ldr	r2, [pc, #388]	; (80052cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	f240 80b9 	bls.w	80052c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 80b3 	beq.w	80052c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005166:	461a      	mov	r2, r3
 8005168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800516c:	6093      	str	r3, [r2, #8]
 800516e:	e0a7      	b.n	80052c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f003 0320 	and.w	r3, r3, #32
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005186:	461a      	mov	r2, r3
 8005188:	2320      	movs	r3, #32
 800518a:	6093      	str	r3, [r2, #8]
 800518c:	e098      	b.n	80052c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005194:	2b00      	cmp	r3, #0
 8005196:	f040 8093 	bne.w	80052c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	4a4b      	ldr	r2, [pc, #300]	; (80052cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d90f      	bls.n	80051c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b8:	461a      	mov	r2, r3
 80051ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051be:	6093      	str	r3, [r2, #8]
 80051c0:	e07e      	b.n	80052c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4413      	add	r3, r2
 80051d4:	3304      	adds	r3, #4
 80051d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	0159      	lsls	r1, r3, #5
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	440b      	add	r3, r1
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ee:	1ad2      	subs	r2, r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d114      	bne.n	8005224 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d109      	bne.n	8005216 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800520c:	461a      	mov	r2, r3
 800520e:	2101      	movs	r1, #1
 8005210:	f003 ff16 	bl	8009040 <USB_EP0_OutStart>
 8005214:	e006      	b.n	8005224 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	441a      	add	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	4619      	mov	r1, r3
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f006 fa5c 	bl	800b6e8 <HAL_PCD_DataOutStageCallback>
 8005230:	e046      	b.n	80052c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	4a26      	ldr	r2, [pc, #152]	; (80052d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d124      	bne.n	8005284 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005250:	461a      	mov	r2, r3
 8005252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005256:	6093      	str	r3, [r2, #8]
 8005258:	e032      	b.n	80052c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f003 0320 	and.w	r3, r3, #32
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	461a      	mov	r2, r3
 8005272:	2320      	movs	r3, #32
 8005274:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	b2db      	uxtb	r3, r3
 800527a:	4619      	mov	r1, r3
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f006 fa33 	bl	800b6e8 <HAL_PCD_DataOutStageCallback>
 8005282:	e01d      	b.n	80052c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d114      	bne.n	80052b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d108      	bne.n	80052b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052ac:	461a      	mov	r2, r3
 80052ae:	2100      	movs	r1, #0
 80052b0:	f003 fec6 	bl	8009040 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f006 fa14 	bl	800b6e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	4f54300a 	.word	0x4f54300a
 80052d0:	4f54310a 	.word	0x4f54310a

080052d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	333c      	adds	r3, #60	; 0x3c
 80052ec:	3304      	adds	r3, #4
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4a15      	ldr	r2, [pc, #84]	; (800535c <PCD_EP_OutSetupPacket_int+0x88>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d90e      	bls.n	8005328 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005310:	2b00      	cmp	r3, #0
 8005312:	d009      	beq.n	8005328 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005320:	461a      	mov	r2, r3
 8005322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005326:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f006 f9cb 	bl	800b6c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4a0a      	ldr	r2, [pc, #40]	; (800535c <PCD_EP_OutSetupPacket_int+0x88>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d90c      	bls.n	8005350 <PCD_EP_OutSetupPacket_int+0x7c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d108      	bne.n	8005350 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005348:	461a      	mov	r2, r3
 800534a:	2101      	movs	r1, #1
 800534c:	f003 fe78 	bl	8009040 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	4f54300a 	.word	0x4f54300a

08005360 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	70fb      	strb	r3, [r7, #3]
 800536c:	4613      	mov	r3, r2
 800536e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d107      	bne.n	800538e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800537e:	883b      	ldrh	r3, [r7, #0]
 8005380:	0419      	lsls	r1, r3, #16
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	430a      	orrs	r2, r1
 800538a:	629a      	str	r2, [r3, #40]	; 0x28
 800538c:	e028      	b.n	80053e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	0c1b      	lsrs	r3, r3, #16
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	4413      	add	r3, r2
 800539a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800539c:	2300      	movs	r3, #0
 800539e:	73fb      	strb	r3, [r7, #15]
 80053a0:	e00d      	b.n	80053be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
 80053a8:	3340      	adds	r3, #64	; 0x40
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	0c1b      	lsrs	r3, r3, #16
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	4413      	add	r3, r2
 80053b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	3301      	adds	r3, #1
 80053bc:	73fb      	strb	r3, [r7, #15]
 80053be:	7bfa      	ldrb	r2, [r7, #15]
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d3ec      	bcc.n	80053a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80053c8:	883b      	ldrh	r3, [r7, #0]
 80053ca:	0418      	lsls	r0, r3, #16
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6819      	ldr	r1, [r3, #0]
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	4302      	orrs	r2, r0
 80053d8:	3340      	adds	r3, #64	; 0x40
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	460b      	mov	r3, r1
 80053f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	887a      	ldrh	r2, [r7, #2]
 8005400:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800543e:	4b05      	ldr	r3, [pc, #20]	; (8005454 <HAL_PCDEx_ActivateLPM+0x44>)
 8005440:	4313      	orrs	r3, r2
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	10000003 	.word	0x10000003

08005458 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a04      	ldr	r2, [pc, #16]	; (8005474 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005466:	6013      	str	r3, [r2, #0]
}
 8005468:	bf00      	nop
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40007000 	.word	0x40007000

08005478 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005480:	2300      	movs	r3, #0
 8005482:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e291      	b.n	80059b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 8087 	beq.w	80055aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800549c:	4b96      	ldr	r3, [pc, #600]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 030c 	and.w	r3, r3, #12
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d00c      	beq.n	80054c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054a8:	4b93      	ldr	r3, [pc, #588]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 030c 	and.w	r3, r3, #12
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d112      	bne.n	80054da <HAL_RCC_OscConfig+0x62>
 80054b4:	4b90      	ldr	r3, [pc, #576]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054c0:	d10b      	bne.n	80054da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c2:	4b8d      	ldr	r3, [pc, #564]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d06c      	beq.n	80055a8 <HAL_RCC_OscConfig+0x130>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d168      	bne.n	80055a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e26b      	b.n	80059b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e2:	d106      	bne.n	80054f2 <HAL_RCC_OscConfig+0x7a>
 80054e4:	4b84      	ldr	r3, [pc, #528]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a83      	ldr	r2, [pc, #524]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 80054ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	e02e      	b.n	8005550 <HAL_RCC_OscConfig+0xd8>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10c      	bne.n	8005514 <HAL_RCC_OscConfig+0x9c>
 80054fa:	4b7f      	ldr	r3, [pc, #508]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a7e      	ldr	r2, [pc, #504]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 8005500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	4b7c      	ldr	r3, [pc, #496]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a7b      	ldr	r2, [pc, #492]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 800550c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	e01d      	b.n	8005550 <HAL_RCC_OscConfig+0xd8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800551c:	d10c      	bne.n	8005538 <HAL_RCC_OscConfig+0xc0>
 800551e:	4b76      	ldr	r3, [pc, #472]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a75      	ldr	r2, [pc, #468]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 8005524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	4b73      	ldr	r3, [pc, #460]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a72      	ldr	r2, [pc, #456]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 8005530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	e00b      	b.n	8005550 <HAL_RCC_OscConfig+0xd8>
 8005538:	4b6f      	ldr	r3, [pc, #444]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a6e      	ldr	r2, [pc, #440]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 800553e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	4b6c      	ldr	r3, [pc, #432]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a6b      	ldr	r2, [pc, #428]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 800554a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800554e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d013      	beq.n	8005580 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005558:	f7fc ff7e 	bl	8002458 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005560:	f7fc ff7a 	bl	8002458 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b64      	cmp	r3, #100	; 0x64
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e21f      	b.n	80059b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005572:	4b61      	ldr	r3, [pc, #388]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f0      	beq.n	8005560 <HAL_RCC_OscConfig+0xe8>
 800557e:	e014      	b.n	80055aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fc ff6a 	bl	8002458 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005588:	f7fc ff66 	bl	8002458 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b64      	cmp	r3, #100	; 0x64
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e20b      	b.n	80059b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800559a:	4b57      	ldr	r3, [pc, #348]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1f0      	bne.n	8005588 <HAL_RCC_OscConfig+0x110>
 80055a6:	e000      	b.n	80055aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d069      	beq.n	800568a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055b6:	4b50      	ldr	r3, [pc, #320]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 030c 	and.w	r3, r3, #12
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00b      	beq.n	80055da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055c2:	4b4d      	ldr	r3, [pc, #308]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 030c 	and.w	r3, r3, #12
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d11c      	bne.n	8005608 <HAL_RCC_OscConfig+0x190>
 80055ce:	4b4a      	ldr	r3, [pc, #296]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d116      	bne.n	8005608 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055da:	4b47      	ldr	r3, [pc, #284]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <HAL_RCC_OscConfig+0x17a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d001      	beq.n	80055f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e1df      	b.n	80059b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f2:	4b41      	ldr	r3, [pc, #260]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	493d      	ldr	r1, [pc, #244]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005606:	e040      	b.n	800568a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d023      	beq.n	8005658 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005610:	4b39      	ldr	r3, [pc, #228]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a38      	ldr	r2, [pc, #224]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 8005616:	f043 0301 	orr.w	r3, r3, #1
 800561a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561c:	f7fc ff1c 	bl	8002458 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005624:	f7fc ff18 	bl	8002458 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e1bd      	b.n	80059b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005636:	4b30      	ldr	r3, [pc, #192]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005642:	4b2d      	ldr	r3, [pc, #180]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4929      	ldr	r1, [pc, #164]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 8005652:	4313      	orrs	r3, r2
 8005654:	600b      	str	r3, [r1, #0]
 8005656:	e018      	b.n	800568a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005658:	4b27      	ldr	r3, [pc, #156]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a26      	ldr	r2, [pc, #152]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005664:	f7fc fef8 	bl	8002458 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800566c:	f7fc fef4 	bl	8002458 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e199      	b.n	80059b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800567e:	4b1e      	ldr	r3, [pc, #120]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f0      	bne.n	800566c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b00      	cmp	r3, #0
 8005694:	d038      	beq.n	8005708 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d019      	beq.n	80056d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800569e:	4b16      	ldr	r3, [pc, #88]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 80056a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a2:	4a15      	ldr	r2, [pc, #84]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056aa:	f7fc fed5 	bl	8002458 <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056b2:	f7fc fed1 	bl	8002458 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e176      	b.n	80059b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c4:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 80056c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0f0      	beq.n	80056b2 <HAL_RCC_OscConfig+0x23a>
 80056d0:	e01a      	b.n	8005708 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056d2:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 80056d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d6:	4a08      	ldr	r2, [pc, #32]	; (80056f8 <HAL_RCC_OscConfig+0x280>)
 80056d8:	f023 0301 	bic.w	r3, r3, #1
 80056dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056de:	f7fc febb 	bl	8002458 <HAL_GetTick>
 80056e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056e4:	e00a      	b.n	80056fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056e6:	f7fc feb7 	bl	8002458 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d903      	bls.n	80056fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e15c      	b.n	80059b2 <HAL_RCC_OscConfig+0x53a>
 80056f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056fc:	4b91      	ldr	r3, [pc, #580]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 80056fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1ee      	bne.n	80056e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 80a4 	beq.w	800585e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005716:	4b8b      	ldr	r3, [pc, #556]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10d      	bne.n	800573e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005722:	4b88      	ldr	r3, [pc, #544]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	4a87      	ldr	r2, [pc, #540]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 8005728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572c:	6413      	str	r3, [r2, #64]	; 0x40
 800572e:	4b85      	ldr	r3, [pc, #532]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005736:	60bb      	str	r3, [r7, #8]
 8005738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800573a:	2301      	movs	r3, #1
 800573c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800573e:	4b82      	ldr	r3, [pc, #520]	; (8005948 <HAL_RCC_OscConfig+0x4d0>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005746:	2b00      	cmp	r3, #0
 8005748:	d118      	bne.n	800577c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800574a:	4b7f      	ldr	r3, [pc, #508]	; (8005948 <HAL_RCC_OscConfig+0x4d0>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a7e      	ldr	r2, [pc, #504]	; (8005948 <HAL_RCC_OscConfig+0x4d0>)
 8005750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005756:	f7fc fe7f 	bl	8002458 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800575e:	f7fc fe7b 	bl	8002458 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b64      	cmp	r3, #100	; 0x64
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e120      	b.n	80059b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005770:	4b75      	ldr	r3, [pc, #468]	; (8005948 <HAL_RCC_OscConfig+0x4d0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0f0      	beq.n	800575e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d106      	bne.n	8005792 <HAL_RCC_OscConfig+0x31a>
 8005784:	4b6f      	ldr	r3, [pc, #444]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 8005786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005788:	4a6e      	ldr	r2, [pc, #440]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 800578a:	f043 0301 	orr.w	r3, r3, #1
 800578e:	6713      	str	r3, [r2, #112]	; 0x70
 8005790:	e02d      	b.n	80057ee <HAL_RCC_OscConfig+0x376>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10c      	bne.n	80057b4 <HAL_RCC_OscConfig+0x33c>
 800579a:	4b6a      	ldr	r3, [pc, #424]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 800579c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579e:	4a69      	ldr	r2, [pc, #420]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 80057a0:	f023 0301 	bic.w	r3, r3, #1
 80057a4:	6713      	str	r3, [r2, #112]	; 0x70
 80057a6:	4b67      	ldr	r3, [pc, #412]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 80057a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057aa:	4a66      	ldr	r2, [pc, #408]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 80057ac:	f023 0304 	bic.w	r3, r3, #4
 80057b0:	6713      	str	r3, [r2, #112]	; 0x70
 80057b2:	e01c      	b.n	80057ee <HAL_RCC_OscConfig+0x376>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b05      	cmp	r3, #5
 80057ba:	d10c      	bne.n	80057d6 <HAL_RCC_OscConfig+0x35e>
 80057bc:	4b61      	ldr	r3, [pc, #388]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 80057be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c0:	4a60      	ldr	r2, [pc, #384]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 80057c2:	f043 0304 	orr.w	r3, r3, #4
 80057c6:	6713      	str	r3, [r2, #112]	; 0x70
 80057c8:	4b5e      	ldr	r3, [pc, #376]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 80057ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057cc:	4a5d      	ldr	r2, [pc, #372]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	6713      	str	r3, [r2, #112]	; 0x70
 80057d4:	e00b      	b.n	80057ee <HAL_RCC_OscConfig+0x376>
 80057d6:	4b5b      	ldr	r3, [pc, #364]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	4a5a      	ldr	r2, [pc, #360]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 80057dc:	f023 0301 	bic.w	r3, r3, #1
 80057e0:	6713      	str	r3, [r2, #112]	; 0x70
 80057e2:	4b58      	ldr	r3, [pc, #352]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 80057e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e6:	4a57      	ldr	r2, [pc, #348]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 80057e8:	f023 0304 	bic.w	r3, r3, #4
 80057ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d015      	beq.n	8005822 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f6:	f7fc fe2f 	bl	8002458 <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057fc:	e00a      	b.n	8005814 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057fe:	f7fc fe2b 	bl	8002458 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	f241 3288 	movw	r2, #5000	; 0x1388
 800580c:	4293      	cmp	r3, r2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e0ce      	b.n	80059b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005814:	4b4b      	ldr	r3, [pc, #300]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 8005816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0ee      	beq.n	80057fe <HAL_RCC_OscConfig+0x386>
 8005820:	e014      	b.n	800584c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005822:	f7fc fe19 	bl	8002458 <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005828:	e00a      	b.n	8005840 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582a:	f7fc fe15 	bl	8002458 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	f241 3288 	movw	r2, #5000	; 0x1388
 8005838:	4293      	cmp	r3, r2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e0b8      	b.n	80059b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005840:	4b40      	ldr	r3, [pc, #256]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 8005842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1ee      	bne.n	800582a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d105      	bne.n	800585e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005852:	4b3c      	ldr	r3, [pc, #240]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	4a3b      	ldr	r2, [pc, #236]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 8005858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800585c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 80a4 	beq.w	80059b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005868:	4b36      	ldr	r3, [pc, #216]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 030c 	and.w	r3, r3, #12
 8005870:	2b08      	cmp	r3, #8
 8005872:	d06b      	beq.n	800594c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	2b02      	cmp	r3, #2
 800587a:	d149      	bne.n	8005910 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587c:	4b31      	ldr	r3, [pc, #196]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a30      	ldr	r2, [pc, #192]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 8005882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fc fde6 	bl	8002458 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005890:	f7fc fde2 	bl	8002458 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e087      	b.n	80059b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a2:	4b28      	ldr	r3, [pc, #160]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69da      	ldr	r2, [r3, #28]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	019b      	lsls	r3, r3, #6
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	085b      	lsrs	r3, r3, #1
 80058c6:	3b01      	subs	r3, #1
 80058c8:	041b      	lsls	r3, r3, #16
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	061b      	lsls	r3, r3, #24
 80058d2:	4313      	orrs	r3, r2
 80058d4:	4a1b      	ldr	r2, [pc, #108]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 80058d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058da:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058dc:	4b19      	ldr	r3, [pc, #100]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a18      	ldr	r2, [pc, #96]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 80058e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e8:	f7fc fdb6 	bl	8002458 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f0:	f7fc fdb2 	bl	8002458 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e057      	b.n	80059b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005902:	4b10      	ldr	r3, [pc, #64]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f0      	beq.n	80058f0 <HAL_RCC_OscConfig+0x478>
 800590e:	e04f      	b.n	80059b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005910:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a0b      	ldr	r2, [pc, #44]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 8005916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800591a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591c:	f7fc fd9c 	bl	8002458 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005924:	f7fc fd98 	bl	8002458 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e03d      	b.n	80059b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005936:	4b03      	ldr	r3, [pc, #12]	; (8005944 <HAL_RCC_OscConfig+0x4cc>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f0      	bne.n	8005924 <HAL_RCC_OscConfig+0x4ac>
 8005942:	e035      	b.n	80059b0 <HAL_RCC_OscConfig+0x538>
 8005944:	40023800 	.word	0x40023800
 8005948:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800594c:	4b1b      	ldr	r3, [pc, #108]	; (80059bc <HAL_RCC_OscConfig+0x544>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d028      	beq.n	80059ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005964:	429a      	cmp	r2, r3
 8005966:	d121      	bne.n	80059ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005972:	429a      	cmp	r2, r3
 8005974:	d11a      	bne.n	80059ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800597c:	4013      	ands	r3, r2
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005982:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005984:	4293      	cmp	r3, r2
 8005986:	d111      	bne.n	80059ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005992:	085b      	lsrs	r3, r3, #1
 8005994:	3b01      	subs	r3, #1
 8005996:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005998:	429a      	cmp	r2, r3
 800599a:	d107      	bne.n	80059ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d001      	beq.n	80059b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40023800 	.word	0x40023800

080059c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e0d0      	b.n	8005b7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059d8:	4b6a      	ldr	r3, [pc, #424]	; (8005b84 <HAL_RCC_ClockConfig+0x1c4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d910      	bls.n	8005a08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e6:	4b67      	ldr	r3, [pc, #412]	; (8005b84 <HAL_RCC_ClockConfig+0x1c4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f023 020f 	bic.w	r2, r3, #15
 80059ee:	4965      	ldr	r1, [pc, #404]	; (8005b84 <HAL_RCC_ClockConfig+0x1c4>)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f6:	4b63      	ldr	r3, [pc, #396]	; (8005b84 <HAL_RCC_ClockConfig+0x1c4>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d001      	beq.n	8005a08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e0b8      	b.n	8005b7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d020      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d005      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a20:	4b59      	ldr	r3, [pc, #356]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	4a58      	ldr	r2, [pc, #352]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0308 	and.w	r3, r3, #8
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d005      	beq.n	8005a44 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a38:	4b53      	ldr	r3, [pc, #332]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	4a52      	ldr	r2, [pc, #328]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a44:	4b50      	ldr	r3, [pc, #320]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	494d      	ldr	r1, [pc, #308]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d040      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d107      	bne.n	8005a7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a6a:	4b47      	ldr	r3, [pc, #284]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d115      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e07f      	b.n	8005b7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d107      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a82:	4b41      	ldr	r3, [pc, #260]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e073      	b.n	8005b7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a92:	4b3d      	ldr	r3, [pc, #244]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e06b      	b.n	8005b7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aa2:	4b39      	ldr	r3, [pc, #228]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f023 0203 	bic.w	r2, r3, #3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	4936      	ldr	r1, [pc, #216]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab4:	f7fc fcd0 	bl	8002458 <HAL_GetTick>
 8005ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aba:	e00a      	b.n	8005ad2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005abc:	f7fc fccc 	bl	8002458 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e053      	b.n	8005b7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad2:	4b2d      	ldr	r3, [pc, #180]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 020c 	and.w	r2, r3, #12
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d1eb      	bne.n	8005abc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ae4:	4b27      	ldr	r3, [pc, #156]	; (8005b84 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d210      	bcs.n	8005b14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af2:	4b24      	ldr	r3, [pc, #144]	; (8005b84 <HAL_RCC_ClockConfig+0x1c4>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f023 020f 	bic.w	r2, r3, #15
 8005afa:	4922      	ldr	r1, [pc, #136]	; (8005b84 <HAL_RCC_ClockConfig+0x1c4>)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b02:	4b20      	ldr	r3, [pc, #128]	; (8005b84 <HAL_RCC_ClockConfig+0x1c4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d001      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e032      	b.n	8005b7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d008      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b20:	4b19      	ldr	r3, [pc, #100]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	4916      	ldr	r1, [pc, #88]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d009      	beq.n	8005b52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b3e:	4b12      	ldr	r3, [pc, #72]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	490e      	ldr	r1, [pc, #56]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b52:	f000 f821 	bl	8005b98 <HAL_RCC_GetSysClockFreq>
 8005b56:	4602      	mov	r2, r0
 8005b58:	4b0b      	ldr	r3, [pc, #44]	; (8005b88 <HAL_RCC_ClockConfig+0x1c8>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	091b      	lsrs	r3, r3, #4
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	490a      	ldr	r1, [pc, #40]	; (8005b8c <HAL_RCC_ClockConfig+0x1cc>)
 8005b64:	5ccb      	ldrb	r3, [r1, r3]
 8005b66:	fa22 f303 	lsr.w	r3, r2, r3
 8005b6a:	4a09      	ldr	r2, [pc, #36]	; (8005b90 <HAL_RCC_ClockConfig+0x1d0>)
 8005b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b6e:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <HAL_RCC_ClockConfig+0x1d4>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fc fc2c 	bl	80023d0 <HAL_InitTick>

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	40023c00 	.word	0x40023c00
 8005b88:	40023800 	.word	0x40023800
 8005b8c:	0800bfe4 	.word	0x0800bfe4
 8005b90:	200000d8 	.word	0x200000d8
 8005b94:	20000118 	.word	0x20000118

08005b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b9c:	b094      	sub	sp, #80	; 0x50
 8005b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ba8:	2300      	movs	r3, #0
 8005baa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bb0:	4b79      	ldr	r3, [pc, #484]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f003 030c 	and.w	r3, r3, #12
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	d00d      	beq.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	f200 80e1 	bhi.w	8005d84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <HAL_RCC_GetSysClockFreq+0x34>
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d003      	beq.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005bca:	e0db      	b.n	8005d84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bcc:	4b73      	ldr	r3, [pc, #460]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8005bce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bd0:	e0db      	b.n	8005d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bd2:	4b73      	ldr	r3, [pc, #460]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005bd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bd6:	e0d8      	b.n	8005d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bd8:	4b6f      	ldr	r3, [pc, #444]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005be0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005be2:	4b6d      	ldr	r3, [pc, #436]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d063      	beq.n	8005cb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bee:	4b6a      	ldr	r3, [pc, #424]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	099b      	lsrs	r3, r3, #6
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bf8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c00:	633b      	str	r3, [r7, #48]	; 0x30
 8005c02:	2300      	movs	r3, #0
 8005c04:	637b      	str	r3, [r7, #52]	; 0x34
 8005c06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	462b      	mov	r3, r5
 8005c0e:	f04f 0000 	mov.w	r0, #0
 8005c12:	f04f 0100 	mov.w	r1, #0
 8005c16:	0159      	lsls	r1, r3, #5
 8005c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c1c:	0150      	lsls	r0, r2, #5
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4621      	mov	r1, r4
 8005c24:	1a51      	subs	r1, r2, r1
 8005c26:	6139      	str	r1, [r7, #16]
 8005c28:	4629      	mov	r1, r5
 8005c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	f04f 0300 	mov.w	r3, #0
 8005c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c3c:	4659      	mov	r1, fp
 8005c3e:	018b      	lsls	r3, r1, #6
 8005c40:	4651      	mov	r1, sl
 8005c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c46:	4651      	mov	r1, sl
 8005c48:	018a      	lsls	r2, r1, #6
 8005c4a:	4651      	mov	r1, sl
 8005c4c:	ebb2 0801 	subs.w	r8, r2, r1
 8005c50:	4659      	mov	r1, fp
 8005c52:	eb63 0901 	sbc.w	r9, r3, r1
 8005c56:	f04f 0200 	mov.w	r2, #0
 8005c5a:	f04f 0300 	mov.w	r3, #0
 8005c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c6a:	4690      	mov	r8, r2
 8005c6c:	4699      	mov	r9, r3
 8005c6e:	4623      	mov	r3, r4
 8005c70:	eb18 0303 	adds.w	r3, r8, r3
 8005c74:	60bb      	str	r3, [r7, #8]
 8005c76:	462b      	mov	r3, r5
 8005c78:	eb49 0303 	adc.w	r3, r9, r3
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	f04f 0200 	mov.w	r2, #0
 8005c82:	f04f 0300 	mov.w	r3, #0
 8005c86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	024b      	lsls	r3, r1, #9
 8005c8e:	4621      	mov	r1, r4
 8005c90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c94:	4621      	mov	r1, r4
 8005c96:	024a      	lsls	r2, r1, #9
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ca8:	f7fa faae 	bl	8000208 <__aeabi_uldivmod>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb4:	e058      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cb6:	4b38      	ldr	r3, [pc, #224]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	099b      	lsrs	r3, r3, #6
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cc6:	623b      	str	r3, [r7, #32]
 8005cc8:	2300      	movs	r3, #0
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
 8005ccc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	464b      	mov	r3, r9
 8005cd4:	f04f 0000 	mov.w	r0, #0
 8005cd8:	f04f 0100 	mov.w	r1, #0
 8005cdc:	0159      	lsls	r1, r3, #5
 8005cde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ce2:	0150      	lsls	r0, r2, #5
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4641      	mov	r1, r8
 8005cea:	ebb2 0a01 	subs.w	sl, r2, r1
 8005cee:	4649      	mov	r1, r9
 8005cf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d08:	ebb2 040a 	subs.w	r4, r2, sl
 8005d0c:	eb63 050b 	sbc.w	r5, r3, fp
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	00eb      	lsls	r3, r5, #3
 8005d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d1e:	00e2      	lsls	r2, r4, #3
 8005d20:	4614      	mov	r4, r2
 8005d22:	461d      	mov	r5, r3
 8005d24:	4643      	mov	r3, r8
 8005d26:	18e3      	adds	r3, r4, r3
 8005d28:	603b      	str	r3, [r7, #0]
 8005d2a:	464b      	mov	r3, r9
 8005d2c:	eb45 0303 	adc.w	r3, r5, r3
 8005d30:	607b      	str	r3, [r7, #4]
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d3e:	4629      	mov	r1, r5
 8005d40:	028b      	lsls	r3, r1, #10
 8005d42:	4621      	mov	r1, r4
 8005d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d48:	4621      	mov	r1, r4
 8005d4a:	028a      	lsls	r2, r1, #10
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d52:	2200      	movs	r2, #0
 8005d54:	61bb      	str	r3, [r7, #24]
 8005d56:	61fa      	str	r2, [r7, #28]
 8005d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d5c:	f7fa fa54 	bl	8000208 <__aeabi_uldivmod>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4613      	mov	r3, r2
 8005d66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005d68:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	0c1b      	lsrs	r3, r3, #16
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	3301      	adds	r3, #1
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005d78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d82:	e002      	b.n	8005d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3750      	adds	r7, #80	; 0x50
 8005d90:	46bd      	mov	sp, r7
 8005d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d96:	bf00      	nop
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	00f42400 	.word	0x00f42400
 8005da0:	007a1200 	.word	0x007a1200

08005da4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005da8:	4b03      	ldr	r3, [pc, #12]	; (8005db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005daa:	681b      	ldr	r3, [r3, #0]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	200000d8 	.word	0x200000d8

08005dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005dc0:	f7ff fff0 	bl	8005da4 <HAL_RCC_GetHCLKFreq>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	0a9b      	lsrs	r3, r3, #10
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	4903      	ldr	r1, [pc, #12]	; (8005de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dd2:	5ccb      	ldrb	r3, [r1, r3]
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40023800 	.word	0x40023800
 8005de0:	0800bff4 	.word	0x0800bff4

08005de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005de8:	f7ff ffdc 	bl	8005da4 <HAL_RCC_GetHCLKFreq>
 8005dec:	4602      	mov	r2, r0
 8005dee:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	0b5b      	lsrs	r3, r3, #13
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	4903      	ldr	r1, [pc, #12]	; (8005e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dfa:	5ccb      	ldrb	r3, [r1, r3]
 8005dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40023800 	.word	0x40023800
 8005e08:	0800bff4 	.word	0x0800bff4

08005e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005e20:	2300      	movs	r3, #0
 8005e22:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d012      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e34:	4b69      	ldr	r3, [pc, #420]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	4a68      	ldr	r2, [pc, #416]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005e3e:	6093      	str	r3, [r2, #8]
 8005e40:	4b66      	ldr	r3, [pc, #408]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e48:	4964      	ldr	r1, [pc, #400]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005e56:	2301      	movs	r3, #1
 8005e58:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d017      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e66:	4b5d      	ldr	r3, [pc, #372]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e74:	4959      	ldr	r1, [pc, #356]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e84:	d101      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005e86:	2301      	movs	r3, #1
 8005e88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005e92:	2301      	movs	r3, #1
 8005e94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d017      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ea2:	4b4e      	ldr	r3, [pc, #312]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ea8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	494a      	ldr	r1, [pc, #296]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ec0:	d101      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 808b 	beq.w	8006006 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ef0:	4b3a      	ldr	r3, [pc, #232]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	4a39      	ldr	r2, [pc, #228]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efa:	6413      	str	r3, [r2, #64]	; 0x40
 8005efc:	4b37      	ldr	r3, [pc, #220]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f08:	4b35      	ldr	r3, [pc, #212]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a34      	ldr	r2, [pc, #208]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f14:	f7fc faa0 	bl	8002458 <HAL_GetTick>
 8005f18:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f1c:	f7fc fa9c 	bl	8002458 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b64      	cmp	r3, #100	; 0x64
 8005f28:	d901      	bls.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e357      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f2e:	4b2c      	ldr	r3, [pc, #176]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0f0      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f3a:	4b28      	ldr	r3, [pc, #160]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f42:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d035      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d02e      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f58:	4b20      	ldr	r3, [pc, #128]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f60:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f62:	4b1e      	ldr	r3, [pc, #120]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f66:	4a1d      	ldr	r2, [pc, #116]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f6c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f6e:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f72:	4a1a      	ldr	r2, [pc, #104]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005f7a:	4a18      	ldr	r2, [pc, #96]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f80:	4b16      	ldr	r3, [pc, #88]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d114      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8c:	f7fc fa64 	bl	8002458 <HAL_GetTick>
 8005f90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f92:	e00a      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f94:	f7fc fa60 	bl	8002458 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e319      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005faa:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0ee      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fc2:	d111      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005fc4:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005fd0:	4b04      	ldr	r3, [pc, #16]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005fd2:	400b      	ands	r3, r1
 8005fd4:	4901      	ldr	r1, [pc, #4]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	608b      	str	r3, [r1, #8]
 8005fda:	e00b      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	40007000 	.word	0x40007000
 8005fe4:	0ffffcff 	.word	0x0ffffcff
 8005fe8:	4baa      	ldr	r3, [pc, #680]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	4aa9      	ldr	r2, [pc, #676]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ff2:	6093      	str	r3, [r2, #8]
 8005ff4:	4ba7      	ldr	r3, [pc, #668]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ff6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006000:	49a4      	ldr	r1, [pc, #656]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006002:	4313      	orrs	r3, r2
 8006004:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0310 	and.w	r3, r3, #16
 800600e:	2b00      	cmp	r3, #0
 8006010:	d010      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006012:	4ba0      	ldr	r3, [pc, #640]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006018:	4a9e      	ldr	r2, [pc, #632]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800601a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800601e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006022:	4b9c      	ldr	r3, [pc, #624]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006024:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	4999      	ldr	r1, [pc, #612]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006040:	4b94      	ldr	r3, [pc, #592]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006046:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800604e:	4991      	ldr	r1, [pc, #580]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006062:	4b8c      	ldr	r3, [pc, #560]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006068:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006070:	4988      	ldr	r1, [pc, #544]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006072:	4313      	orrs	r3, r2
 8006074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00a      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006084:	4b83      	ldr	r3, [pc, #524]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006092:	4980      	ldr	r1, [pc, #512]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060a6:	4b7b      	ldr	r3, [pc, #492]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b4:	4977      	ldr	r1, [pc, #476]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060c8:	4b72      	ldr	r3, [pc, #456]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ce:	f023 0203 	bic.w	r2, r3, #3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d6:	496f      	ldr	r1, [pc, #444]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060ea:	4b6a      	ldr	r3, [pc, #424]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f0:	f023 020c 	bic.w	r2, r3, #12
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f8:	4966      	ldr	r1, [pc, #408]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800610c:	4b61      	ldr	r3, [pc, #388]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800610e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006112:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800611a:	495e      	ldr	r1, [pc, #376]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800611c:	4313      	orrs	r3, r2
 800611e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800612e:	4b59      	ldr	r3, [pc, #356]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006134:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800613c:	4955      	ldr	r1, [pc, #340]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006150:	4b50      	ldr	r3, [pc, #320]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006156:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615e:	494d      	ldr	r1, [pc, #308]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006172:	4b48      	ldr	r3, [pc, #288]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006178:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006180:	4944      	ldr	r1, [pc, #272]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006182:	4313      	orrs	r3, r2
 8006184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006194:	4b3f      	ldr	r3, [pc, #252]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a2:	493c      	ldr	r1, [pc, #240]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80061b6:	4b37      	ldr	r3, [pc, #220]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c4:	4933      	ldr	r1, [pc, #204]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00a      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061d8:	4b2e      	ldr	r3, [pc, #184]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061e6:	492b      	ldr	r1, [pc, #172]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d011      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80061fa:	4b26      	ldr	r3, [pc, #152]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006200:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006208:	4922      	ldr	r1, [pc, #136]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800620a:	4313      	orrs	r3, r2
 800620c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006214:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006218:	d101      	bne.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800621a:	2301      	movs	r3, #1
 800621c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800622a:	2301      	movs	r3, #1
 800622c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800623a:	4b16      	ldr	r3, [pc, #88]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800623c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006240:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006248:	4912      	ldr	r1, [pc, #72]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800625c:	4b0d      	ldr	r3, [pc, #52]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006262:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800626c:	4909      	ldr	r1, [pc, #36]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800626e:	4313      	orrs	r3, r2
 8006270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d006      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 80d9 	beq.w	800643a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006288:	4b02      	ldr	r3, [pc, #8]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a01      	ldr	r2, [pc, #4]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800628e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006292:	e001      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006294:	40023800 	.word	0x40023800
 8006298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800629a:	f7fc f8dd 	bl	8002458 <HAL_GetTick>
 800629e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062a0:	e008      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80062a2:	f7fc f8d9 	bl	8002458 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b64      	cmp	r3, #100	; 0x64
 80062ae:	d901      	bls.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e194      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062b4:	4b6c      	ldr	r3, [pc, #432]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1f0      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d021      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d11d      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80062d4:	4b64      	ldr	r3, [pc, #400]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062da:	0c1b      	lsrs	r3, r3, #16
 80062dc:	f003 0303 	and.w	r3, r3, #3
 80062e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80062e2:	4b61      	ldr	r3, [pc, #388]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062e8:	0e1b      	lsrs	r3, r3, #24
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	019a      	lsls	r2, r3, #6
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	041b      	lsls	r3, r3, #16
 80062fa:	431a      	orrs	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	061b      	lsls	r3, r3, #24
 8006300:	431a      	orrs	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	071b      	lsls	r3, r3, #28
 8006308:	4957      	ldr	r1, [pc, #348]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800630a:	4313      	orrs	r3, r2
 800630c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d004      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006324:	d00a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800632e:	2b00      	cmp	r3, #0
 8006330:	d02e      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800633a:	d129      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800633c:	4b4a      	ldr	r3, [pc, #296]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800633e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006342:	0c1b      	lsrs	r3, r3, #16
 8006344:	f003 0303 	and.w	r3, r3, #3
 8006348:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800634a:	4b47      	ldr	r3, [pc, #284]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800634c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006350:	0f1b      	lsrs	r3, r3, #28
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	019a      	lsls	r2, r3, #6
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	041b      	lsls	r3, r3, #16
 8006362:	431a      	orrs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	061b      	lsls	r3, r3, #24
 800636a:	431a      	orrs	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	071b      	lsls	r3, r3, #28
 8006370:	493d      	ldr	r1, [pc, #244]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006378:	4b3b      	ldr	r3, [pc, #236]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800637a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800637e:	f023 021f 	bic.w	r2, r3, #31
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	3b01      	subs	r3, #1
 8006388:	4937      	ldr	r1, [pc, #220]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800638a:	4313      	orrs	r3, r2
 800638c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d01d      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800639c:	4b32      	ldr	r3, [pc, #200]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800639e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a2:	0e1b      	lsrs	r3, r3, #24
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80063aa:	4b2f      	ldr	r3, [pc, #188]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b0:	0f1b      	lsrs	r3, r3, #28
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	019a      	lsls	r2, r3, #6
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	041b      	lsls	r3, r3, #16
 80063c4:	431a      	orrs	r2, r3
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	061b      	lsls	r3, r3, #24
 80063ca:	431a      	orrs	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	071b      	lsls	r3, r3, #28
 80063d0:	4925      	ldr	r1, [pc, #148]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d011      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	019a      	lsls	r2, r3, #6
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	041b      	lsls	r3, r3, #16
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	061b      	lsls	r3, r3, #24
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	071b      	lsls	r3, r3, #28
 8006400:	4919      	ldr	r1, [pc, #100]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006402:	4313      	orrs	r3, r2
 8006404:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006408:	4b17      	ldr	r3, [pc, #92]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a16      	ldr	r2, [pc, #88]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800640e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006414:	f7fc f820 	bl	8002458 <HAL_GetTick>
 8006418:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800641a:	e008      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800641c:	f7fc f81c 	bl	8002458 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b64      	cmp	r3, #100	; 0x64
 8006428:	d901      	bls.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e0d7      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800642e:	4b0e      	ldr	r3, [pc, #56]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f0      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	2b01      	cmp	r3, #1
 800643e:	f040 80cd 	bne.w	80065dc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006442:	4b09      	ldr	r3, [pc, #36]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a08      	ldr	r2, [pc, #32]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800644c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800644e:	f7fc f803 	bl	8002458 <HAL_GetTick>
 8006452:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006454:	e00a      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006456:	f7fb ffff 	bl	8002458 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b64      	cmp	r3, #100	; 0x64
 8006462:	d903      	bls.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e0ba      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006468:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800646c:	4b5e      	ldr	r3, [pc, #376]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006478:	d0ed      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006496:	2b00      	cmp	r3, #0
 8006498:	d02e      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d12a      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80064a2:	4b51      	ldr	r3, [pc, #324]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a8:	0c1b      	lsrs	r3, r3, #16
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80064b0:	4b4d      	ldr	r3, [pc, #308]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b6:	0f1b      	lsrs	r3, r3, #28
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	019a      	lsls	r2, r3, #6
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	061b      	lsls	r3, r3, #24
 80064d0:	431a      	orrs	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	071b      	lsls	r3, r3, #28
 80064d6:	4944      	ldr	r1, [pc, #272]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80064de:	4b42      	ldr	r3, [pc, #264]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ec:	3b01      	subs	r3, #1
 80064ee:	021b      	lsls	r3, r3, #8
 80064f0:	493d      	ldr	r1, [pc, #244]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d022      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006508:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800650c:	d11d      	bne.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800650e:	4b36      	ldr	r3, [pc, #216]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006514:	0e1b      	lsrs	r3, r3, #24
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800651c:	4b32      	ldr	r3, [pc, #200]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800651e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006522:	0f1b      	lsrs	r3, r3, #28
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	019a      	lsls	r2, r3, #6
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	041b      	lsls	r3, r3, #16
 8006536:	431a      	orrs	r2, r3
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	061b      	lsls	r3, r3, #24
 800653c:	431a      	orrs	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	071b      	lsls	r3, r3, #28
 8006542:	4929      	ldr	r1, [pc, #164]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006544:	4313      	orrs	r3, r2
 8006546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0308 	and.w	r3, r3, #8
 8006552:	2b00      	cmp	r3, #0
 8006554:	d028      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006556:	4b24      	ldr	r3, [pc, #144]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655c:	0e1b      	lsrs	r3, r3, #24
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006564:	4b20      	ldr	r3, [pc, #128]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656a:	0c1b      	lsrs	r3, r3, #16
 800656c:	f003 0303 	and.w	r3, r3, #3
 8006570:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	019a      	lsls	r2, r3, #6
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	041b      	lsls	r3, r3, #16
 800657c:	431a      	orrs	r2, r3
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	061b      	lsls	r3, r3, #24
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	071b      	lsls	r3, r3, #28
 800658a:	4917      	ldr	r1, [pc, #92]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800658c:	4313      	orrs	r3, r2
 800658e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006598:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	4911      	ldr	r1, [pc, #68]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80065a8:	4b0f      	ldr	r3, [pc, #60]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a0e      	ldr	r2, [pc, #56]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065b4:	f7fb ff50 	bl	8002458 <HAL_GetTick>
 80065b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065ba:	e008      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80065bc:	f7fb ff4c 	bl	8002458 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b64      	cmp	r3, #100	; 0x64
 80065c8:	d901      	bls.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e007      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065ce:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065da:	d1ef      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3720      	adds	r7, #32
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	40023800 	.word	0x40023800

080065ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e049      	b.n	8006692 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fb fc92 	bl	8001f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3304      	adds	r3, #4
 8006628:	4619      	mov	r1, r3
 800662a:	4610      	mov	r0, r2
 800662c:	f000 fb16 	bl	8006c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d001      	beq.n	80066b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e054      	b.n	800675e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a26      	ldr	r2, [pc, #152]	; (800676c <HAL_TIM_Base_Start_IT+0xd0>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d022      	beq.n	800671c <HAL_TIM_Base_Start_IT+0x80>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066de:	d01d      	beq.n	800671c <HAL_TIM_Base_Start_IT+0x80>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a22      	ldr	r2, [pc, #136]	; (8006770 <HAL_TIM_Base_Start_IT+0xd4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d018      	beq.n	800671c <HAL_TIM_Base_Start_IT+0x80>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a21      	ldr	r2, [pc, #132]	; (8006774 <HAL_TIM_Base_Start_IT+0xd8>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d013      	beq.n	800671c <HAL_TIM_Base_Start_IT+0x80>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a1f      	ldr	r2, [pc, #124]	; (8006778 <HAL_TIM_Base_Start_IT+0xdc>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00e      	beq.n	800671c <HAL_TIM_Base_Start_IT+0x80>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a1e      	ldr	r2, [pc, #120]	; (800677c <HAL_TIM_Base_Start_IT+0xe0>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d009      	beq.n	800671c <HAL_TIM_Base_Start_IT+0x80>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a1c      	ldr	r2, [pc, #112]	; (8006780 <HAL_TIM_Base_Start_IT+0xe4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d004      	beq.n	800671c <HAL_TIM_Base_Start_IT+0x80>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a1b      	ldr	r2, [pc, #108]	; (8006784 <HAL_TIM_Base_Start_IT+0xe8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d115      	bne.n	8006748 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	4b19      	ldr	r3, [pc, #100]	; (8006788 <HAL_TIM_Base_Start_IT+0xec>)
 8006724:	4013      	ands	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2b06      	cmp	r3, #6
 800672c:	d015      	beq.n	800675a <HAL_TIM_Base_Start_IT+0xbe>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006734:	d011      	beq.n	800675a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f042 0201 	orr.w	r2, r2, #1
 8006744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006746:	e008      	b.n	800675a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0201 	orr.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	e000      	b.n	800675c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800675a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40010000 	.word	0x40010000
 8006770:	40000400 	.word	0x40000400
 8006774:	40000800 	.word	0x40000800
 8006778:	40000c00 	.word	0x40000c00
 800677c:	40010400 	.word	0x40010400
 8006780:	40014000 	.word	0x40014000
 8006784:	40001800 	.word	0x40001800
 8006788:	00010007 	.word	0x00010007

0800678c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0201 	bic.w	r2, r2, #1
 80067a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6a1a      	ldr	r2, [r3, #32]
 80067aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80067ae:	4013      	ands	r3, r2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10f      	bne.n	80067d4 <HAL_TIM_Base_Stop_IT+0x48>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6a1a      	ldr	r2, [r3, #32]
 80067ba:	f240 4344 	movw	r3, #1092	; 0x444
 80067be:	4013      	ands	r3, r2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d107      	bne.n	80067d4 <HAL_TIM_Base_Stop_IT+0x48>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0201 	bic.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d122      	bne.n	8006846 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b02      	cmp	r3, #2
 800680c:	d11b      	bne.n	8006846 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f06f 0202 	mvn.w	r2, #2
 8006816:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	f003 0303 	and.w	r3, r3, #3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f9f7 	bl	8006c20 <HAL_TIM_IC_CaptureCallback>
 8006832:	e005      	b.n	8006840 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f9e9 	bl	8006c0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f9fa 	bl	8006c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b04      	cmp	r3, #4
 8006852:	d122      	bne.n	800689a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	2b04      	cmp	r3, #4
 8006860:	d11b      	bne.n	800689a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f06f 0204 	mvn.w	r2, #4
 800686a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f9cd 	bl	8006c20 <HAL_TIM_IC_CaptureCallback>
 8006886:	e005      	b.n	8006894 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f9bf 	bl	8006c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f9d0 	bl	8006c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	f003 0308 	and.w	r3, r3, #8
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d122      	bne.n	80068ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f003 0308 	and.w	r3, r3, #8
 80068b2:	2b08      	cmp	r3, #8
 80068b4:	d11b      	bne.n	80068ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f06f 0208 	mvn.w	r2, #8
 80068be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2204      	movs	r2, #4
 80068c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	f003 0303 	and.w	r3, r3, #3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f9a3 	bl	8006c20 <HAL_TIM_IC_CaptureCallback>
 80068da:	e005      	b.n	80068e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f995 	bl	8006c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f9a6 	bl	8006c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	f003 0310 	and.w	r3, r3, #16
 80068f8:	2b10      	cmp	r3, #16
 80068fa:	d122      	bne.n	8006942 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f003 0310 	and.w	r3, r3, #16
 8006906:	2b10      	cmp	r3, #16
 8006908:	d11b      	bne.n	8006942 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f06f 0210 	mvn.w	r2, #16
 8006912:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2208      	movs	r2, #8
 8006918:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f979 	bl	8006c20 <HAL_TIM_IC_CaptureCallback>
 800692e:	e005      	b.n	800693c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f96b 	bl	8006c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f97c 	bl	8006c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b01      	cmp	r3, #1
 800694e:	d10e      	bne.n	800696e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b01      	cmp	r3, #1
 800695c:	d107      	bne.n	800696e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f06f 0201 	mvn.w	r2, #1
 8006966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7fb fce1 	bl	8002330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006978:	2b80      	cmp	r3, #128	; 0x80
 800697a:	d10e      	bne.n	800699a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006986:	2b80      	cmp	r3, #128	; 0x80
 8006988:	d107      	bne.n	800699a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fb33 	bl	8007000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069a8:	d10e      	bne.n	80069c8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b4:	2b80      	cmp	r3, #128	; 0x80
 80069b6:	d107      	bne.n	80069c8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fb26 	bl	8007014 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d2:	2b40      	cmp	r3, #64	; 0x40
 80069d4:	d10e      	bne.n	80069f4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e0:	2b40      	cmp	r3, #64	; 0x40
 80069e2:	d107      	bne.n	80069f4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f92a 	bl	8006c48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	d10e      	bne.n	8006a20 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f003 0320 	and.w	r3, r3, #32
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	d107      	bne.n	8006a20 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f06f 0220 	mvn.w	r2, #32
 8006a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fae6 	bl	8006fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_TIM_GenerateEvent+0x18>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e014      	b.n	8006a6a <HAL_TIM_GenerateEvent+0x42>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
	...

08006a78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_TIM_ConfigClockSource+0x1c>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e0b4      	b.n	8006bfe <HAL_TIM_ConfigClockSource+0x186>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	4b56      	ldr	r3, [pc, #344]	; (8006c08 <HAL_TIM_ConfigClockSource+0x190>)
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006acc:	d03e      	beq.n	8006b4c <HAL_TIM_ConfigClockSource+0xd4>
 8006ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ad2:	f200 8087 	bhi.w	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ada:	f000 8086 	beq.w	8006bea <HAL_TIM_ConfigClockSource+0x172>
 8006ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae2:	d87f      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae4:	2b70      	cmp	r3, #112	; 0x70
 8006ae6:	d01a      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0xa6>
 8006ae8:	2b70      	cmp	r3, #112	; 0x70
 8006aea:	d87b      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006aec:	2b60      	cmp	r3, #96	; 0x60
 8006aee:	d050      	beq.n	8006b92 <HAL_TIM_ConfigClockSource+0x11a>
 8006af0:	2b60      	cmp	r3, #96	; 0x60
 8006af2:	d877      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006af4:	2b50      	cmp	r3, #80	; 0x50
 8006af6:	d03c      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0xfa>
 8006af8:	2b50      	cmp	r3, #80	; 0x50
 8006afa:	d873      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006afc:	2b40      	cmp	r3, #64	; 0x40
 8006afe:	d058      	beq.n	8006bb2 <HAL_TIM_ConfigClockSource+0x13a>
 8006b00:	2b40      	cmp	r3, #64	; 0x40
 8006b02:	d86f      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b04:	2b30      	cmp	r3, #48	; 0x30
 8006b06:	d064      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b08:	2b30      	cmp	r3, #48	; 0x30
 8006b0a:	d86b      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b0c:	2b20      	cmp	r3, #32
 8006b0e:	d060      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d867      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d05c      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b18:	2b10      	cmp	r3, #16
 8006b1a:	d05a      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b1c:	e062      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b2e:	f000 f9af 	bl	8006e90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	609a      	str	r2, [r3, #8]
      break;
 8006b4a:	e04f      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b5c:	f000 f998 	bl	8006e90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b6e:	609a      	str	r2, [r3, #8]
      break;
 8006b70:	e03c      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f000 f90c 	bl	8006d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2150      	movs	r1, #80	; 0x50
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 f965 	bl	8006e5a <TIM_ITRx_SetConfig>
      break;
 8006b90:	e02c      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f000 f92b 	bl	8006dfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2160      	movs	r1, #96	; 0x60
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 f955 	bl	8006e5a <TIM_ITRx_SetConfig>
      break;
 8006bb0:	e01c      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f000 f8ec 	bl	8006d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2140      	movs	r1, #64	; 0x40
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 f945 	bl	8006e5a <TIM_ITRx_SetConfig>
      break;
 8006bd0:	e00c      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f000 f93c 	bl	8006e5a <TIM_ITRx_SetConfig>
      break;
 8006be2:	e003      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	73fb      	strb	r3, [r7, #15]
      break;
 8006be8:	e000      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	fffeff88 	.word	0xfffeff88

08006c0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a40      	ldr	r2, [pc, #256]	; (8006d70 <TIM_Base_SetConfig+0x114>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d013      	beq.n	8006c9c <TIM_Base_SetConfig+0x40>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7a:	d00f      	beq.n	8006c9c <TIM_Base_SetConfig+0x40>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a3d      	ldr	r2, [pc, #244]	; (8006d74 <TIM_Base_SetConfig+0x118>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d00b      	beq.n	8006c9c <TIM_Base_SetConfig+0x40>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a3c      	ldr	r2, [pc, #240]	; (8006d78 <TIM_Base_SetConfig+0x11c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d007      	beq.n	8006c9c <TIM_Base_SetConfig+0x40>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a3b      	ldr	r2, [pc, #236]	; (8006d7c <TIM_Base_SetConfig+0x120>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d003      	beq.n	8006c9c <TIM_Base_SetConfig+0x40>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a3a      	ldr	r2, [pc, #232]	; (8006d80 <TIM_Base_SetConfig+0x124>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d108      	bne.n	8006cae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a2f      	ldr	r2, [pc, #188]	; (8006d70 <TIM_Base_SetConfig+0x114>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d02b      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cbc:	d027      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a2c      	ldr	r2, [pc, #176]	; (8006d74 <TIM_Base_SetConfig+0x118>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d023      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a2b      	ldr	r2, [pc, #172]	; (8006d78 <TIM_Base_SetConfig+0x11c>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d01f      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a2a      	ldr	r2, [pc, #168]	; (8006d7c <TIM_Base_SetConfig+0x120>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d01b      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a29      	ldr	r2, [pc, #164]	; (8006d80 <TIM_Base_SetConfig+0x124>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d017      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a28      	ldr	r2, [pc, #160]	; (8006d84 <TIM_Base_SetConfig+0x128>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d013      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a27      	ldr	r2, [pc, #156]	; (8006d88 <TIM_Base_SetConfig+0x12c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d00f      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a26      	ldr	r2, [pc, #152]	; (8006d8c <TIM_Base_SetConfig+0x130>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00b      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a25      	ldr	r2, [pc, #148]	; (8006d90 <TIM_Base_SetConfig+0x134>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d007      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a24      	ldr	r2, [pc, #144]	; (8006d94 <TIM_Base_SetConfig+0x138>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d003      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a23      	ldr	r2, [pc, #140]	; (8006d98 <TIM_Base_SetConfig+0x13c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d108      	bne.n	8006d20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a0a      	ldr	r2, [pc, #40]	; (8006d70 <TIM_Base_SetConfig+0x114>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d003      	beq.n	8006d54 <TIM_Base_SetConfig+0xf8>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a0c      	ldr	r2, [pc, #48]	; (8006d80 <TIM_Base_SetConfig+0x124>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d103      	bne.n	8006d5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	691a      	ldr	r2, [r3, #16]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	615a      	str	r2, [r3, #20]
}
 8006d62:	bf00      	nop
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	40010000 	.word	0x40010000
 8006d74:	40000400 	.word	0x40000400
 8006d78:	40000800 	.word	0x40000800
 8006d7c:	40000c00 	.word	0x40000c00
 8006d80:	40010400 	.word	0x40010400
 8006d84:	40014000 	.word	0x40014000
 8006d88:	40014400 	.word	0x40014400
 8006d8c:	40014800 	.word	0x40014800
 8006d90:	40001800 	.word	0x40001800
 8006d94:	40001c00 	.word	0x40001c00
 8006d98:	40002000 	.word	0x40002000

08006d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	f023 0201 	bic.w	r2, r3, #1
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f023 030a 	bic.w	r3, r3, #10
 8006dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	621a      	str	r2, [r3, #32]
}
 8006dee:	bf00      	nop
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b087      	sub	sp, #28
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	f023 0210 	bic.w	r2, r3, #16
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	031b      	lsls	r3, r3, #12
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	621a      	str	r2, [r3, #32]
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b085      	sub	sp, #20
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f043 0307 	orr.w	r3, r3, #7
 8006e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	609a      	str	r2, [r3, #8]
}
 8006e84:	bf00      	nop
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	021a      	lsls	r2, r3, #8
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	609a      	str	r2, [r3, #8]
}
 8006ec4:	bf00      	nop
 8006ec6:	371c      	adds	r7, #28
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e06d      	b.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a30      	ldr	r2, [pc, #192]	; (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d004      	beq.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a2f      	ldr	r2, [pc, #188]	; (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d108      	bne.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a20      	ldr	r2, [pc, #128]	; (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d022      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5a:	d01d      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1d      	ldr	r2, [pc, #116]	; (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d018      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a1c      	ldr	r2, [pc, #112]	; (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d013      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1a      	ldr	r2, [pc, #104]	; (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00e      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a15      	ldr	r2, [pc, #84]	; (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d009      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a16      	ldr	r2, [pc, #88]	; (8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a15      	ldr	r2, [pc, #84]	; (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d10c      	bne.n	8006fb2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	40010000 	.word	0x40010000
 8006fd4:	40010400 	.word	0x40010400
 8006fd8:	40000400 	.word	0x40000400
 8006fdc:	40000800 	.word	0x40000800
 8006fe0:	40000c00 	.word	0x40000c00
 8006fe4:	40014000 	.word	0x40014000
 8006fe8:	40001800 	.word	0x40001800

08006fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e040      	b.n	80070bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d106      	bne.n	8007050 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7fa ff9c 	bl	8001f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2224      	movs	r2, #36	; 0x24
 8007054:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0201 	bic.w	r2, r2, #1
 8007064:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f82c 	bl	80070c4 <UART_SetConfig>
 800706c:	4603      	mov	r3, r0
 800706e:	2b01      	cmp	r3, #1
 8007070:	d101      	bne.n	8007076 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e022      	b.n	80070bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fa84 	bl	800758c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007092:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689a      	ldr	r2, [r3, #8]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0201 	orr.w	r2, r2, #1
 80070b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fb0b 	bl	80076d0 <UART_CheckIdleState>
 80070ba:	4603      	mov	r3, r0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	431a      	orrs	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	431a      	orrs	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	69db      	ldr	r3, [r3, #28]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	4ba6      	ldr	r3, [pc, #664]	; (8007388 <UART_SetConfig+0x2c4>)
 80070f0:	4013      	ands	r3, r2
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6812      	ldr	r2, [r2, #0]
 80070f6:	6979      	ldr	r1, [r7, #20]
 80070f8:	430b      	orrs	r3, r1
 80070fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	4313      	orrs	r3, r2
 8007120:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	430a      	orrs	r2, r1
 8007134:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a94      	ldr	r2, [pc, #592]	; (800738c <UART_SetConfig+0x2c8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d120      	bne.n	8007182 <UART_SetConfig+0xbe>
 8007140:	4b93      	ldr	r3, [pc, #588]	; (8007390 <UART_SetConfig+0x2cc>)
 8007142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007146:	f003 0303 	and.w	r3, r3, #3
 800714a:	2b03      	cmp	r3, #3
 800714c:	d816      	bhi.n	800717c <UART_SetConfig+0xb8>
 800714e:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <UART_SetConfig+0x90>)
 8007150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007154:	08007165 	.word	0x08007165
 8007158:	08007171 	.word	0x08007171
 800715c:	0800716b 	.word	0x0800716b
 8007160:	08007177 	.word	0x08007177
 8007164:	2301      	movs	r3, #1
 8007166:	77fb      	strb	r3, [r7, #31]
 8007168:	e150      	b.n	800740c <UART_SetConfig+0x348>
 800716a:	2302      	movs	r3, #2
 800716c:	77fb      	strb	r3, [r7, #31]
 800716e:	e14d      	b.n	800740c <UART_SetConfig+0x348>
 8007170:	2304      	movs	r3, #4
 8007172:	77fb      	strb	r3, [r7, #31]
 8007174:	e14a      	b.n	800740c <UART_SetConfig+0x348>
 8007176:	2308      	movs	r3, #8
 8007178:	77fb      	strb	r3, [r7, #31]
 800717a:	e147      	b.n	800740c <UART_SetConfig+0x348>
 800717c:	2310      	movs	r3, #16
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	e144      	b.n	800740c <UART_SetConfig+0x348>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a83      	ldr	r2, [pc, #524]	; (8007394 <UART_SetConfig+0x2d0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d132      	bne.n	80071f2 <UART_SetConfig+0x12e>
 800718c:	4b80      	ldr	r3, [pc, #512]	; (8007390 <UART_SetConfig+0x2cc>)
 800718e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007192:	f003 030c 	and.w	r3, r3, #12
 8007196:	2b0c      	cmp	r3, #12
 8007198:	d828      	bhi.n	80071ec <UART_SetConfig+0x128>
 800719a:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <UART_SetConfig+0xdc>)
 800719c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a0:	080071d5 	.word	0x080071d5
 80071a4:	080071ed 	.word	0x080071ed
 80071a8:	080071ed 	.word	0x080071ed
 80071ac:	080071ed 	.word	0x080071ed
 80071b0:	080071e1 	.word	0x080071e1
 80071b4:	080071ed 	.word	0x080071ed
 80071b8:	080071ed 	.word	0x080071ed
 80071bc:	080071ed 	.word	0x080071ed
 80071c0:	080071db 	.word	0x080071db
 80071c4:	080071ed 	.word	0x080071ed
 80071c8:	080071ed 	.word	0x080071ed
 80071cc:	080071ed 	.word	0x080071ed
 80071d0:	080071e7 	.word	0x080071e7
 80071d4:	2300      	movs	r3, #0
 80071d6:	77fb      	strb	r3, [r7, #31]
 80071d8:	e118      	b.n	800740c <UART_SetConfig+0x348>
 80071da:	2302      	movs	r3, #2
 80071dc:	77fb      	strb	r3, [r7, #31]
 80071de:	e115      	b.n	800740c <UART_SetConfig+0x348>
 80071e0:	2304      	movs	r3, #4
 80071e2:	77fb      	strb	r3, [r7, #31]
 80071e4:	e112      	b.n	800740c <UART_SetConfig+0x348>
 80071e6:	2308      	movs	r3, #8
 80071e8:	77fb      	strb	r3, [r7, #31]
 80071ea:	e10f      	b.n	800740c <UART_SetConfig+0x348>
 80071ec:	2310      	movs	r3, #16
 80071ee:	77fb      	strb	r3, [r7, #31]
 80071f0:	e10c      	b.n	800740c <UART_SetConfig+0x348>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a68      	ldr	r2, [pc, #416]	; (8007398 <UART_SetConfig+0x2d4>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d120      	bne.n	800723e <UART_SetConfig+0x17a>
 80071fc:	4b64      	ldr	r3, [pc, #400]	; (8007390 <UART_SetConfig+0x2cc>)
 80071fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007202:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007206:	2b30      	cmp	r3, #48	; 0x30
 8007208:	d013      	beq.n	8007232 <UART_SetConfig+0x16e>
 800720a:	2b30      	cmp	r3, #48	; 0x30
 800720c:	d814      	bhi.n	8007238 <UART_SetConfig+0x174>
 800720e:	2b20      	cmp	r3, #32
 8007210:	d009      	beq.n	8007226 <UART_SetConfig+0x162>
 8007212:	2b20      	cmp	r3, #32
 8007214:	d810      	bhi.n	8007238 <UART_SetConfig+0x174>
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <UART_SetConfig+0x15c>
 800721a:	2b10      	cmp	r3, #16
 800721c:	d006      	beq.n	800722c <UART_SetConfig+0x168>
 800721e:	e00b      	b.n	8007238 <UART_SetConfig+0x174>
 8007220:	2300      	movs	r3, #0
 8007222:	77fb      	strb	r3, [r7, #31]
 8007224:	e0f2      	b.n	800740c <UART_SetConfig+0x348>
 8007226:	2302      	movs	r3, #2
 8007228:	77fb      	strb	r3, [r7, #31]
 800722a:	e0ef      	b.n	800740c <UART_SetConfig+0x348>
 800722c:	2304      	movs	r3, #4
 800722e:	77fb      	strb	r3, [r7, #31]
 8007230:	e0ec      	b.n	800740c <UART_SetConfig+0x348>
 8007232:	2308      	movs	r3, #8
 8007234:	77fb      	strb	r3, [r7, #31]
 8007236:	e0e9      	b.n	800740c <UART_SetConfig+0x348>
 8007238:	2310      	movs	r3, #16
 800723a:	77fb      	strb	r3, [r7, #31]
 800723c:	e0e6      	b.n	800740c <UART_SetConfig+0x348>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a56      	ldr	r2, [pc, #344]	; (800739c <UART_SetConfig+0x2d8>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d120      	bne.n	800728a <UART_SetConfig+0x1c6>
 8007248:	4b51      	ldr	r3, [pc, #324]	; (8007390 <UART_SetConfig+0x2cc>)
 800724a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007252:	2bc0      	cmp	r3, #192	; 0xc0
 8007254:	d013      	beq.n	800727e <UART_SetConfig+0x1ba>
 8007256:	2bc0      	cmp	r3, #192	; 0xc0
 8007258:	d814      	bhi.n	8007284 <UART_SetConfig+0x1c0>
 800725a:	2b80      	cmp	r3, #128	; 0x80
 800725c:	d009      	beq.n	8007272 <UART_SetConfig+0x1ae>
 800725e:	2b80      	cmp	r3, #128	; 0x80
 8007260:	d810      	bhi.n	8007284 <UART_SetConfig+0x1c0>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <UART_SetConfig+0x1a8>
 8007266:	2b40      	cmp	r3, #64	; 0x40
 8007268:	d006      	beq.n	8007278 <UART_SetConfig+0x1b4>
 800726a:	e00b      	b.n	8007284 <UART_SetConfig+0x1c0>
 800726c:	2300      	movs	r3, #0
 800726e:	77fb      	strb	r3, [r7, #31]
 8007270:	e0cc      	b.n	800740c <UART_SetConfig+0x348>
 8007272:	2302      	movs	r3, #2
 8007274:	77fb      	strb	r3, [r7, #31]
 8007276:	e0c9      	b.n	800740c <UART_SetConfig+0x348>
 8007278:	2304      	movs	r3, #4
 800727a:	77fb      	strb	r3, [r7, #31]
 800727c:	e0c6      	b.n	800740c <UART_SetConfig+0x348>
 800727e:	2308      	movs	r3, #8
 8007280:	77fb      	strb	r3, [r7, #31]
 8007282:	e0c3      	b.n	800740c <UART_SetConfig+0x348>
 8007284:	2310      	movs	r3, #16
 8007286:	77fb      	strb	r3, [r7, #31]
 8007288:	e0c0      	b.n	800740c <UART_SetConfig+0x348>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a44      	ldr	r2, [pc, #272]	; (80073a0 <UART_SetConfig+0x2dc>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d125      	bne.n	80072e0 <UART_SetConfig+0x21c>
 8007294:	4b3e      	ldr	r3, [pc, #248]	; (8007390 <UART_SetConfig+0x2cc>)
 8007296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800729e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a2:	d017      	beq.n	80072d4 <UART_SetConfig+0x210>
 80072a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a8:	d817      	bhi.n	80072da <UART_SetConfig+0x216>
 80072aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ae:	d00b      	beq.n	80072c8 <UART_SetConfig+0x204>
 80072b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b4:	d811      	bhi.n	80072da <UART_SetConfig+0x216>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <UART_SetConfig+0x1fe>
 80072ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072be:	d006      	beq.n	80072ce <UART_SetConfig+0x20a>
 80072c0:	e00b      	b.n	80072da <UART_SetConfig+0x216>
 80072c2:	2300      	movs	r3, #0
 80072c4:	77fb      	strb	r3, [r7, #31]
 80072c6:	e0a1      	b.n	800740c <UART_SetConfig+0x348>
 80072c8:	2302      	movs	r3, #2
 80072ca:	77fb      	strb	r3, [r7, #31]
 80072cc:	e09e      	b.n	800740c <UART_SetConfig+0x348>
 80072ce:	2304      	movs	r3, #4
 80072d0:	77fb      	strb	r3, [r7, #31]
 80072d2:	e09b      	b.n	800740c <UART_SetConfig+0x348>
 80072d4:	2308      	movs	r3, #8
 80072d6:	77fb      	strb	r3, [r7, #31]
 80072d8:	e098      	b.n	800740c <UART_SetConfig+0x348>
 80072da:	2310      	movs	r3, #16
 80072dc:	77fb      	strb	r3, [r7, #31]
 80072de:	e095      	b.n	800740c <UART_SetConfig+0x348>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a2f      	ldr	r2, [pc, #188]	; (80073a4 <UART_SetConfig+0x2e0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d125      	bne.n	8007336 <UART_SetConfig+0x272>
 80072ea:	4b29      	ldr	r3, [pc, #164]	; (8007390 <UART_SetConfig+0x2cc>)
 80072ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072f8:	d017      	beq.n	800732a <UART_SetConfig+0x266>
 80072fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072fe:	d817      	bhi.n	8007330 <UART_SetConfig+0x26c>
 8007300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007304:	d00b      	beq.n	800731e <UART_SetConfig+0x25a>
 8007306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800730a:	d811      	bhi.n	8007330 <UART_SetConfig+0x26c>
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <UART_SetConfig+0x254>
 8007310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007314:	d006      	beq.n	8007324 <UART_SetConfig+0x260>
 8007316:	e00b      	b.n	8007330 <UART_SetConfig+0x26c>
 8007318:	2301      	movs	r3, #1
 800731a:	77fb      	strb	r3, [r7, #31]
 800731c:	e076      	b.n	800740c <UART_SetConfig+0x348>
 800731e:	2302      	movs	r3, #2
 8007320:	77fb      	strb	r3, [r7, #31]
 8007322:	e073      	b.n	800740c <UART_SetConfig+0x348>
 8007324:	2304      	movs	r3, #4
 8007326:	77fb      	strb	r3, [r7, #31]
 8007328:	e070      	b.n	800740c <UART_SetConfig+0x348>
 800732a:	2308      	movs	r3, #8
 800732c:	77fb      	strb	r3, [r7, #31]
 800732e:	e06d      	b.n	800740c <UART_SetConfig+0x348>
 8007330:	2310      	movs	r3, #16
 8007332:	77fb      	strb	r3, [r7, #31]
 8007334:	e06a      	b.n	800740c <UART_SetConfig+0x348>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a1b      	ldr	r2, [pc, #108]	; (80073a8 <UART_SetConfig+0x2e4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d138      	bne.n	80073b2 <UART_SetConfig+0x2ee>
 8007340:	4b13      	ldr	r3, [pc, #76]	; (8007390 <UART_SetConfig+0x2cc>)
 8007342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007346:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800734a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800734e:	d017      	beq.n	8007380 <UART_SetConfig+0x2bc>
 8007350:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007354:	d82a      	bhi.n	80073ac <UART_SetConfig+0x2e8>
 8007356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800735a:	d00b      	beq.n	8007374 <UART_SetConfig+0x2b0>
 800735c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007360:	d824      	bhi.n	80073ac <UART_SetConfig+0x2e8>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <UART_SetConfig+0x2aa>
 8007366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736a:	d006      	beq.n	800737a <UART_SetConfig+0x2b6>
 800736c:	e01e      	b.n	80073ac <UART_SetConfig+0x2e8>
 800736e:	2300      	movs	r3, #0
 8007370:	77fb      	strb	r3, [r7, #31]
 8007372:	e04b      	b.n	800740c <UART_SetConfig+0x348>
 8007374:	2302      	movs	r3, #2
 8007376:	77fb      	strb	r3, [r7, #31]
 8007378:	e048      	b.n	800740c <UART_SetConfig+0x348>
 800737a:	2304      	movs	r3, #4
 800737c:	77fb      	strb	r3, [r7, #31]
 800737e:	e045      	b.n	800740c <UART_SetConfig+0x348>
 8007380:	2308      	movs	r3, #8
 8007382:	77fb      	strb	r3, [r7, #31]
 8007384:	e042      	b.n	800740c <UART_SetConfig+0x348>
 8007386:	bf00      	nop
 8007388:	efff69f3 	.word	0xefff69f3
 800738c:	40011000 	.word	0x40011000
 8007390:	40023800 	.word	0x40023800
 8007394:	40004400 	.word	0x40004400
 8007398:	40004800 	.word	0x40004800
 800739c:	40004c00 	.word	0x40004c00
 80073a0:	40005000 	.word	0x40005000
 80073a4:	40011400 	.word	0x40011400
 80073a8:	40007800 	.word	0x40007800
 80073ac:	2310      	movs	r3, #16
 80073ae:	77fb      	strb	r3, [r7, #31]
 80073b0:	e02c      	b.n	800740c <UART_SetConfig+0x348>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a72      	ldr	r2, [pc, #456]	; (8007580 <UART_SetConfig+0x4bc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d125      	bne.n	8007408 <UART_SetConfig+0x344>
 80073bc:	4b71      	ldr	r3, [pc, #452]	; (8007584 <UART_SetConfig+0x4c0>)
 80073be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80073c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073ca:	d017      	beq.n	80073fc <UART_SetConfig+0x338>
 80073cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073d0:	d817      	bhi.n	8007402 <UART_SetConfig+0x33e>
 80073d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073d6:	d00b      	beq.n	80073f0 <UART_SetConfig+0x32c>
 80073d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073dc:	d811      	bhi.n	8007402 <UART_SetConfig+0x33e>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <UART_SetConfig+0x326>
 80073e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073e6:	d006      	beq.n	80073f6 <UART_SetConfig+0x332>
 80073e8:	e00b      	b.n	8007402 <UART_SetConfig+0x33e>
 80073ea:	2300      	movs	r3, #0
 80073ec:	77fb      	strb	r3, [r7, #31]
 80073ee:	e00d      	b.n	800740c <UART_SetConfig+0x348>
 80073f0:	2302      	movs	r3, #2
 80073f2:	77fb      	strb	r3, [r7, #31]
 80073f4:	e00a      	b.n	800740c <UART_SetConfig+0x348>
 80073f6:	2304      	movs	r3, #4
 80073f8:	77fb      	strb	r3, [r7, #31]
 80073fa:	e007      	b.n	800740c <UART_SetConfig+0x348>
 80073fc:	2308      	movs	r3, #8
 80073fe:	77fb      	strb	r3, [r7, #31]
 8007400:	e004      	b.n	800740c <UART_SetConfig+0x348>
 8007402:	2310      	movs	r3, #16
 8007404:	77fb      	strb	r3, [r7, #31]
 8007406:	e001      	b.n	800740c <UART_SetConfig+0x348>
 8007408:	2310      	movs	r3, #16
 800740a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007414:	d15b      	bne.n	80074ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007416:	7ffb      	ldrb	r3, [r7, #31]
 8007418:	2b08      	cmp	r3, #8
 800741a:	d828      	bhi.n	800746e <UART_SetConfig+0x3aa>
 800741c:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <UART_SetConfig+0x360>)
 800741e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007422:	bf00      	nop
 8007424:	08007449 	.word	0x08007449
 8007428:	08007451 	.word	0x08007451
 800742c:	08007459 	.word	0x08007459
 8007430:	0800746f 	.word	0x0800746f
 8007434:	0800745f 	.word	0x0800745f
 8007438:	0800746f 	.word	0x0800746f
 800743c:	0800746f 	.word	0x0800746f
 8007440:	0800746f 	.word	0x0800746f
 8007444:	08007467 	.word	0x08007467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007448:	f7fe fcb8 	bl	8005dbc <HAL_RCC_GetPCLK1Freq>
 800744c:	61b8      	str	r0, [r7, #24]
        break;
 800744e:	e013      	b.n	8007478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007450:	f7fe fcc8 	bl	8005de4 <HAL_RCC_GetPCLK2Freq>
 8007454:	61b8      	str	r0, [r7, #24]
        break;
 8007456:	e00f      	b.n	8007478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007458:	4b4b      	ldr	r3, [pc, #300]	; (8007588 <UART_SetConfig+0x4c4>)
 800745a:	61bb      	str	r3, [r7, #24]
        break;
 800745c:	e00c      	b.n	8007478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800745e:	f7fe fb9b 	bl	8005b98 <HAL_RCC_GetSysClockFreq>
 8007462:	61b8      	str	r0, [r7, #24]
        break;
 8007464:	e008      	b.n	8007478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800746a:	61bb      	str	r3, [r7, #24]
        break;
 800746c:	e004      	b.n	8007478 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	77bb      	strb	r3, [r7, #30]
        break;
 8007476:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d074      	beq.n	8007568 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	005a      	lsls	r2, r3, #1
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	085b      	lsrs	r3, r3, #1
 8007488:	441a      	add	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007492:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	2b0f      	cmp	r3, #15
 8007498:	d916      	bls.n	80074c8 <UART_SetConfig+0x404>
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a0:	d212      	bcs.n	80074c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	f023 030f 	bic.w	r3, r3, #15
 80074aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	085b      	lsrs	r3, r3, #1
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	89fb      	ldrh	r3, [r7, #14]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	89fa      	ldrh	r2, [r7, #14]
 80074c4:	60da      	str	r2, [r3, #12]
 80074c6:	e04f      	b.n	8007568 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	77bb      	strb	r3, [r7, #30]
 80074cc:	e04c      	b.n	8007568 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074ce:	7ffb      	ldrb	r3, [r7, #31]
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d828      	bhi.n	8007526 <UART_SetConfig+0x462>
 80074d4:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <UART_SetConfig+0x418>)
 80074d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074da:	bf00      	nop
 80074dc:	08007501 	.word	0x08007501
 80074e0:	08007509 	.word	0x08007509
 80074e4:	08007511 	.word	0x08007511
 80074e8:	08007527 	.word	0x08007527
 80074ec:	08007517 	.word	0x08007517
 80074f0:	08007527 	.word	0x08007527
 80074f4:	08007527 	.word	0x08007527
 80074f8:	08007527 	.word	0x08007527
 80074fc:	0800751f 	.word	0x0800751f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007500:	f7fe fc5c 	bl	8005dbc <HAL_RCC_GetPCLK1Freq>
 8007504:	61b8      	str	r0, [r7, #24]
        break;
 8007506:	e013      	b.n	8007530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007508:	f7fe fc6c 	bl	8005de4 <HAL_RCC_GetPCLK2Freq>
 800750c:	61b8      	str	r0, [r7, #24]
        break;
 800750e:	e00f      	b.n	8007530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007510:	4b1d      	ldr	r3, [pc, #116]	; (8007588 <UART_SetConfig+0x4c4>)
 8007512:	61bb      	str	r3, [r7, #24]
        break;
 8007514:	e00c      	b.n	8007530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007516:	f7fe fb3f 	bl	8005b98 <HAL_RCC_GetSysClockFreq>
 800751a:	61b8      	str	r0, [r7, #24]
        break;
 800751c:	e008      	b.n	8007530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800751e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007522:	61bb      	str	r3, [r7, #24]
        break;
 8007524:	e004      	b.n	8007530 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	77bb      	strb	r3, [r7, #30]
        break;
 800752e:	bf00      	nop
    }

    if (pclk != 0U)
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d018      	beq.n	8007568 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	085a      	lsrs	r2, r3, #1
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	441a      	add	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	fbb2 f3f3 	udiv	r3, r2, r3
 8007548:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b0f      	cmp	r3, #15
 800754e:	d909      	bls.n	8007564 <UART_SetConfig+0x4a0>
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007556:	d205      	bcs.n	8007564 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	b29a      	uxth	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60da      	str	r2, [r3, #12]
 8007562:	e001      	b.n	8007568 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007574:	7fbb      	ldrb	r3, [r7, #30]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3720      	adds	r7, #32
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40007c00 	.word	0x40007c00
 8007584:	40023800 	.word	0x40023800
 8007588:	00f42400 	.word	0x00f42400

0800758c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00a      	beq.n	80075b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00a      	beq.n	80075fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	f003 0308 	and.w	r3, r3, #8
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00a      	beq.n	800763e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01a      	beq.n	80076a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800768a:	d10a      	bne.n	80076a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	605a      	str	r2, [r3, #4]
  }
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af02      	add	r7, sp, #8
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076e0:	f7fa feba 	bl	8002458 <HAL_GetTick>
 80076e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0308 	and.w	r3, r3, #8
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d10e      	bne.n	8007712 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f81b 	bl	800773e <UART_WaitOnFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e011      	b.n	8007736 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2220      	movs	r2, #32
 8007716:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2220      	movs	r2, #32
 800771c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b09c      	sub	sp, #112	; 0x70
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	603b      	str	r3, [r7, #0]
 800774a:	4613      	mov	r3, r2
 800774c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800774e:	e0a7      	b.n	80078a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007756:	f000 80a3 	beq.w	80078a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800775a:	f7fa fe7d 	bl	8002458 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007766:	429a      	cmp	r2, r3
 8007768:	d302      	bcc.n	8007770 <UART_WaitOnFlagUntilTimeout+0x32>
 800776a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800776c:	2b00      	cmp	r3, #0
 800776e:	d13f      	bne.n	80077f0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800777e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007780:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007784:	667b      	str	r3, [r7, #100]	; 0x64
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800778e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007790:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007794:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800779c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e6      	bne.n	8007770 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3308      	adds	r3, #8
 80077a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	f023 0301 	bic.w	r3, r3, #1
 80077b8:	663b      	str	r3, [r7, #96]	; 0x60
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3308      	adds	r3, #8
 80077c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80077c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e5      	bne.n	80077a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2220      	movs	r2, #32
 80077da:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2220      	movs	r2, #32
 80077e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e068      	b.n	80078c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0304 	and.w	r3, r3, #4
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d050      	beq.n	80078a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800780c:	d148      	bne.n	80078a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007816:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800782c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007836:	637b      	str	r3, [r7, #52]	; 0x34
 8007838:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800783c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800783e:	e841 2300 	strex	r3, r2, [r1]
 8007842:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1e6      	bne.n	8007818 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3308      	adds	r3, #8
 8007850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	613b      	str	r3, [r7, #16]
   return(result);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f023 0301 	bic.w	r3, r3, #1
 8007860:	66bb      	str	r3, [r7, #104]	; 0x68
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3308      	adds	r3, #8
 8007868:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800786a:	623a      	str	r2, [r7, #32]
 800786c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	69f9      	ldr	r1, [r7, #28]
 8007870:	6a3a      	ldr	r2, [r7, #32]
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	61bb      	str	r3, [r7, #24]
   return(result);
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e5      	bne.n	800784a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2220      	movs	r2, #32
 8007882:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2220      	movs	r2, #32
 8007888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2220      	movs	r2, #32
 8007890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e010      	b.n	80078c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69da      	ldr	r2, [r3, #28]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	4013      	ands	r3, r2
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	bf0c      	ite	eq
 80078b0:	2301      	moveq	r3, #1
 80078b2:	2300      	movne	r3, #0
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	461a      	mov	r2, r3
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	f43f af48 	beq.w	8007750 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3770      	adds	r7, #112	; 0x70
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078cc:	b084      	sub	sp, #16
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	f107 001c 	add.w	r0, r7, #28
 80078da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d120      	bne.n	8007926 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	4b20      	ldr	r3, [pc, #128]	; (8007978 <USB_CoreInit+0xac>)
 80078f6:	4013      	ands	r3, r2
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800790a:	2b01      	cmp	r3, #1
 800790c:	d105      	bne.n	800791a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f001 fbee 	bl	80090fc <USB_CoreReset>
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]
 8007924:	e010      	b.n	8007948 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 fbe2 	bl	80090fc <USB_CoreReset>
 8007938:	4603      	mov	r3, r0
 800793a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007940:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794a:	2b01      	cmp	r3, #1
 800794c:	d10b      	bne.n	8007966 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f043 0206 	orr.w	r2, r3, #6
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f043 0220 	orr.w	r2, r3, #32
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007966:	7bfb      	ldrb	r3, [r7, #15]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007972:	b004      	add	sp, #16
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	ffbdffbf 	.word	0xffbdffbf

0800797c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	4613      	mov	r3, r2
 8007988:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	2b02      	cmp	r3, #2
 800798e:	d165      	bne.n	8007a5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	4a41      	ldr	r2, [pc, #260]	; (8007a98 <USB_SetTurnaroundTime+0x11c>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d906      	bls.n	80079a6 <USB_SetTurnaroundTime+0x2a>
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	4a40      	ldr	r2, [pc, #256]	; (8007a9c <USB_SetTurnaroundTime+0x120>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d202      	bcs.n	80079a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80079a0:	230f      	movs	r3, #15
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	e062      	b.n	8007a6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	4a3c      	ldr	r2, [pc, #240]	; (8007a9c <USB_SetTurnaroundTime+0x120>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d306      	bcc.n	80079bc <USB_SetTurnaroundTime+0x40>
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	4a3b      	ldr	r2, [pc, #236]	; (8007aa0 <USB_SetTurnaroundTime+0x124>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d202      	bcs.n	80079bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80079b6:	230e      	movs	r3, #14
 80079b8:	617b      	str	r3, [r7, #20]
 80079ba:	e057      	b.n	8007a6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	4a38      	ldr	r2, [pc, #224]	; (8007aa0 <USB_SetTurnaroundTime+0x124>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d306      	bcc.n	80079d2 <USB_SetTurnaroundTime+0x56>
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4a37      	ldr	r2, [pc, #220]	; (8007aa4 <USB_SetTurnaroundTime+0x128>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d202      	bcs.n	80079d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80079cc:	230d      	movs	r3, #13
 80079ce:	617b      	str	r3, [r7, #20]
 80079d0:	e04c      	b.n	8007a6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	4a33      	ldr	r2, [pc, #204]	; (8007aa4 <USB_SetTurnaroundTime+0x128>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d306      	bcc.n	80079e8 <USB_SetTurnaroundTime+0x6c>
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	4a32      	ldr	r2, [pc, #200]	; (8007aa8 <USB_SetTurnaroundTime+0x12c>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d802      	bhi.n	80079e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80079e2:	230c      	movs	r3, #12
 80079e4:	617b      	str	r3, [r7, #20]
 80079e6:	e041      	b.n	8007a6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	4a2f      	ldr	r2, [pc, #188]	; (8007aa8 <USB_SetTurnaroundTime+0x12c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d906      	bls.n	80079fe <USB_SetTurnaroundTime+0x82>
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	4a2e      	ldr	r2, [pc, #184]	; (8007aac <USB_SetTurnaroundTime+0x130>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d802      	bhi.n	80079fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80079f8:	230b      	movs	r3, #11
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	e036      	b.n	8007a6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	4a2a      	ldr	r2, [pc, #168]	; (8007aac <USB_SetTurnaroundTime+0x130>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d906      	bls.n	8007a14 <USB_SetTurnaroundTime+0x98>
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	4a29      	ldr	r2, [pc, #164]	; (8007ab0 <USB_SetTurnaroundTime+0x134>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d802      	bhi.n	8007a14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007a0e:	230a      	movs	r3, #10
 8007a10:	617b      	str	r3, [r7, #20]
 8007a12:	e02b      	b.n	8007a6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	4a26      	ldr	r2, [pc, #152]	; (8007ab0 <USB_SetTurnaroundTime+0x134>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d906      	bls.n	8007a2a <USB_SetTurnaroundTime+0xae>
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	4a25      	ldr	r2, [pc, #148]	; (8007ab4 <USB_SetTurnaroundTime+0x138>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d202      	bcs.n	8007a2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007a24:	2309      	movs	r3, #9
 8007a26:	617b      	str	r3, [r7, #20]
 8007a28:	e020      	b.n	8007a6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	4a21      	ldr	r2, [pc, #132]	; (8007ab4 <USB_SetTurnaroundTime+0x138>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d306      	bcc.n	8007a40 <USB_SetTurnaroundTime+0xc4>
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	4a20      	ldr	r2, [pc, #128]	; (8007ab8 <USB_SetTurnaroundTime+0x13c>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d802      	bhi.n	8007a40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007a3a:	2308      	movs	r3, #8
 8007a3c:	617b      	str	r3, [r7, #20]
 8007a3e:	e015      	b.n	8007a6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	4a1d      	ldr	r2, [pc, #116]	; (8007ab8 <USB_SetTurnaroundTime+0x13c>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d906      	bls.n	8007a56 <USB_SetTurnaroundTime+0xda>
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	4a1c      	ldr	r2, [pc, #112]	; (8007abc <USB_SetTurnaroundTime+0x140>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d202      	bcs.n	8007a56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007a50:	2307      	movs	r3, #7
 8007a52:	617b      	str	r3, [r7, #20]
 8007a54:	e00a      	b.n	8007a6c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007a56:	2306      	movs	r3, #6
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	e007      	b.n	8007a6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007a5c:	79fb      	ldrb	r3, [r7, #7]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d102      	bne.n	8007a68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007a62:	2309      	movs	r3, #9
 8007a64:	617b      	str	r3, [r7, #20]
 8007a66:	e001      	b.n	8007a6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007a68:	2309      	movs	r3, #9
 8007a6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	029b      	lsls	r3, r3, #10
 8007a80:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007a84:	431a      	orrs	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	371c      	adds	r7, #28
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	00d8acbf 	.word	0x00d8acbf
 8007a9c:	00e4e1c0 	.word	0x00e4e1c0
 8007aa0:	00f42400 	.word	0x00f42400
 8007aa4:	01067380 	.word	0x01067380
 8007aa8:	011a499f 	.word	0x011a499f
 8007aac:	01312cff 	.word	0x01312cff
 8007ab0:	014ca43f 	.word	0x014ca43f
 8007ab4:	016e3600 	.word	0x016e3600
 8007ab8:	01a6ab1f 	.word	0x01a6ab1f
 8007abc:	01e84800 	.word	0x01e84800

08007ac0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f043 0201 	orr.w	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b083      	sub	sp, #12
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f023 0201 	bic.w	r2, r3, #1
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b20:	78fb      	ldrb	r3, [r7, #3]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d115      	bne.n	8007b52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b32:	2001      	movs	r0, #1
 8007b34:	f7fa fc9c 	bl	8002470 <HAL_Delay>
      ms++;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 fa4b 	bl	8008fda <USB_GetMode>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d01e      	beq.n	8007b88 <USB_SetCurrentMode+0x84>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b31      	cmp	r3, #49	; 0x31
 8007b4e:	d9f0      	bls.n	8007b32 <USB_SetCurrentMode+0x2e>
 8007b50:	e01a      	b.n	8007b88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b52:	78fb      	ldrb	r3, [r7, #3]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d115      	bne.n	8007b84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b64:	2001      	movs	r0, #1
 8007b66:	f7fa fc83 	bl	8002470 <HAL_Delay>
      ms++;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 fa32 	bl	8008fda <USB_GetMode>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <USB_SetCurrentMode+0x84>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2b31      	cmp	r3, #49	; 0x31
 8007b80:	d9f0      	bls.n	8007b64 <USB_SetCurrentMode+0x60>
 8007b82:	e001      	b.n	8007b88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e005      	b.n	8007b94 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b32      	cmp	r3, #50	; 0x32
 8007b8c:	d101      	bne.n	8007b92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b086      	sub	sp, #24
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	613b      	str	r3, [r7, #16]
 8007bba:	e009      	b.n	8007bd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	3340      	adds	r3, #64	; 0x40
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	613b      	str	r3, [r7, #16]
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	2b0e      	cmp	r3, #14
 8007bd4:	d9f2      	bls.n	8007bbc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d11c      	bne.n	8007c16 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bea:	f043 0302 	orr.w	r3, r3, #2
 8007bee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	e005      	b.n	8007c22 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c28:	461a      	mov	r2, r3
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c34:	4619      	mov	r1, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	680b      	ldr	r3, [r1, #0]
 8007c40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d10c      	bne.n	8007c62 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d104      	bne.n	8007c58 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c4e:	2100      	movs	r1, #0
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f965 	bl	8007f20 <USB_SetDevSpeed>
 8007c56:	e008      	b.n	8007c6a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c58:	2101      	movs	r1, #1
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f960 	bl	8007f20 <USB_SetDevSpeed>
 8007c60:	e003      	b.n	8007c6a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c62:	2103      	movs	r1, #3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f95b 	bl	8007f20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c6a:	2110      	movs	r1, #16
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f8f3 	bl	8007e58 <USB_FlushTxFifo>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f91f 	bl	8007ec0 <USB_FlushRxFifo>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c92:	461a      	mov	r2, r3
 8007c94:	2300      	movs	r3, #0
 8007c96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007caa:	461a      	mov	r2, r3
 8007cac:	2300      	movs	r3, #0
 8007cae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	613b      	str	r3, [r7, #16]
 8007cb4:	e043      	b.n	8007d3e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ccc:	d118      	bne.n	8007d00 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10a      	bne.n	8007cea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	e013      	b.n	8007d12 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	e008      	b.n	8007d12 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	015a      	lsls	r2, r3, #5
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	4413      	add	r3, r2
 8007d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	2300      	movs	r3, #0
 8007d10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1e:	461a      	mov	r2, r3
 8007d20:	2300      	movs	r3, #0
 8007d22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d30:	461a      	mov	r2, r3
 8007d32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	613b      	str	r3, [r7, #16]
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d3b7      	bcc.n	8007cb6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d46:	2300      	movs	r3, #0
 8007d48:	613b      	str	r3, [r7, #16]
 8007d4a:	e043      	b.n	8007dd4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d62:	d118      	bne.n	8007d96 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10a      	bne.n	8007d80 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d76:	461a      	mov	r2, r3
 8007d78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d7c:	6013      	str	r3, [r2, #0]
 8007d7e:	e013      	b.n	8007da8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	015a      	lsls	r2, r3, #5
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	e008      	b.n	8007da8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da2:	461a      	mov	r2, r3
 8007da4:	2300      	movs	r3, #0
 8007da6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db4:	461a      	mov	r2, r3
 8007db6:	2300      	movs	r3, #0
 8007db8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007dcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	613b      	str	r3, [r7, #16]
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d3b7      	bcc.n	8007d4c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007dfc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d105      	bne.n	8007e10 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	f043 0210 	orr.w	r2, r3, #16
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	699a      	ldr	r2, [r3, #24]
 8007e14:	4b0e      	ldr	r3, [pc, #56]	; (8007e50 <USB_DevInit+0x2b4>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d005      	beq.n	8007e2e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	f043 0208 	orr.w	r2, r3, #8
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d105      	bne.n	8007e40 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	699a      	ldr	r2, [r3, #24]
 8007e38:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <USB_DevInit+0x2b8>)
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e4c:	b004      	add	sp, #16
 8007e4e:	4770      	bx	lr
 8007e50:	803c3800 	.word	0x803c3800
 8007e54:	40000004 	.word	0x40000004

08007e58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4a13      	ldr	r2, [pc, #76]	; (8007ebc <USB_FlushTxFifo+0x64>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d901      	bls.n	8007e78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e01b      	b.n	8007eb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	daf2      	bge.n	8007e66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	019b      	lsls	r3, r3, #6
 8007e88:	f043 0220 	orr.w	r2, r3, #32
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3301      	adds	r3, #1
 8007e94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	4a08      	ldr	r2, [pc, #32]	; (8007ebc <USB_FlushTxFifo+0x64>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d901      	bls.n	8007ea2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e006      	b.n	8007eb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b20      	cmp	r3, #32
 8007eac:	d0f0      	beq.n	8007e90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	00030d40 	.word	0x00030d40

08007ec0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	4a11      	ldr	r2, [pc, #68]	; (8007f1c <USB_FlushRxFifo+0x5c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d901      	bls.n	8007ede <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e018      	b.n	8007f10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	daf2      	bge.n	8007ecc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2210      	movs	r2, #16
 8007eee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	4a08      	ldr	r2, [pc, #32]	; (8007f1c <USB_FlushRxFifo+0x5c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d901      	bls.n	8007f02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e006      	b.n	8007f10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	f003 0310 	and.w	r3, r3, #16
 8007f0a:	2b10      	cmp	r3, #16
 8007f0c:	d0f0      	beq.n	8007ef0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	00030d40 	.word	0x00030d40

08007f20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	78fb      	ldrb	r3, [r7, #3]
 8007f3a:	68f9      	ldr	r1, [r7, #12]
 8007f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f40:	4313      	orrs	r3, r2
 8007f42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b087      	sub	sp, #28
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 0306 	and.w	r3, r3, #6
 8007f6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d102      	bne.n	8007f78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007f72:	2300      	movs	r3, #0
 8007f74:	75fb      	strb	r3, [r7, #23]
 8007f76:	e00a      	b.n	8007f8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d002      	beq.n	8007f84 <USB_GetDevSpeed+0x32>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b06      	cmp	r3, #6
 8007f82:	d102      	bne.n	8007f8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007f84:	2302      	movs	r3, #2
 8007f86:	75fb      	strb	r3, [r7, #23]
 8007f88:	e001      	b.n	8007f8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007f8a:	230f      	movs	r3, #15
 8007f8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	371c      	adds	r7, #28
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	785b      	ldrb	r3, [r3, #1]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d139      	bne.n	800802c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fbe:	69da      	ldr	r2, [r3, #28]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	f003 030f 	and.w	r3, r3, #15
 8007fc8:	2101      	movs	r1, #1
 8007fca:	fa01 f303 	lsl.w	r3, r1, r3
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	68f9      	ldr	r1, [r7, #12]
 8007fd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d153      	bne.n	8008098 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	015a      	lsls	r2, r3, #5
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	791b      	ldrb	r3, [r3, #4]
 800800a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800800c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	059b      	lsls	r3, r3, #22
 8008012:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008014:	431a      	orrs	r2, r3
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	0159      	lsls	r1, r3, #5
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	440b      	add	r3, r1
 800801e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008022:	4619      	mov	r1, r3
 8008024:	4b20      	ldr	r3, [pc, #128]	; (80080a8 <USB_ActivateEndpoint+0x10c>)
 8008026:	4313      	orrs	r3, r2
 8008028:	600b      	str	r3, [r1, #0]
 800802a:	e035      	b.n	8008098 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008032:	69da      	ldr	r2, [r3, #28]
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	f003 030f 	and.w	r3, r3, #15
 800803c:	2101      	movs	r1, #1
 800803e:	fa01 f303 	lsl.w	r3, r1, r3
 8008042:	041b      	lsls	r3, r3, #16
 8008044:	68f9      	ldr	r1, [r7, #12]
 8008046:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800804a:	4313      	orrs	r3, r2
 800804c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	015a      	lsls	r2, r3, #5
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4413      	add	r3, r2
 8008056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d119      	bne.n	8008098 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	791b      	ldrb	r3, [r3, #4]
 800807e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008080:	430b      	orrs	r3, r1
 8008082:	431a      	orrs	r2, r3
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	0159      	lsls	r1, r3, #5
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	440b      	add	r3, r1
 800808c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008090:	4619      	mov	r1, r3
 8008092:	4b05      	ldr	r3, [pc, #20]	; (80080a8 <USB_ActivateEndpoint+0x10c>)
 8008094:	4313      	orrs	r3, r2
 8008096:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	10008000 	.word	0x10008000

080080ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	785b      	ldrb	r3, [r3, #1]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d161      	bne.n	800818c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080de:	d11f      	bne.n	8008120 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	0151      	lsls	r1, r2, #5
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	440a      	add	r2, r1
 80080f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4413      	add	r3, r2
 8008108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	0151      	lsls	r1, r2, #5
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	440a      	add	r2, r1
 8008116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800811a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800811e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	f003 030f 	and.w	r3, r3, #15
 8008130:	2101      	movs	r1, #1
 8008132:	fa01 f303 	lsl.w	r3, r1, r3
 8008136:	b29b      	uxth	r3, r3
 8008138:	43db      	mvns	r3, r3
 800813a:	68f9      	ldr	r1, [r7, #12]
 800813c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008140:	4013      	ands	r3, r2
 8008142:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800814a:	69da      	ldr	r2, [r3, #28]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	f003 030f 	and.w	r3, r3, #15
 8008154:	2101      	movs	r1, #1
 8008156:	fa01 f303 	lsl.w	r3, r1, r3
 800815a:	b29b      	uxth	r3, r3
 800815c:	43db      	mvns	r3, r3
 800815e:	68f9      	ldr	r1, [r7, #12]
 8008160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008164:	4013      	ands	r3, r2
 8008166:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	0159      	lsls	r1, r3, #5
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	440b      	add	r3, r1
 800817e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008182:	4619      	mov	r1, r3
 8008184:	4b35      	ldr	r3, [pc, #212]	; (800825c <USB_DeactivateEndpoint+0x1b0>)
 8008186:	4013      	ands	r3, r2
 8008188:	600b      	str	r3, [r1, #0]
 800818a:	e060      	b.n	800824e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800819e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081a2:	d11f      	bne.n	80081e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	0151      	lsls	r1, r2, #5
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	440a      	add	r2, r1
 80081ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	0151      	lsls	r1, r2, #5
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	440a      	add	r2, r1
 80081da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	2101      	movs	r1, #1
 80081f6:	fa01 f303 	lsl.w	r3, r1, r3
 80081fa:	041b      	lsls	r3, r3, #16
 80081fc:	43db      	mvns	r3, r3
 80081fe:	68f9      	ldr	r1, [r7, #12]
 8008200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008204:	4013      	ands	r3, r2
 8008206:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820e:	69da      	ldr	r2, [r3, #28]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	f003 030f 	and.w	r3, r3, #15
 8008218:	2101      	movs	r1, #1
 800821a:	fa01 f303 	lsl.w	r3, r1, r3
 800821e:	041b      	lsls	r3, r3, #16
 8008220:	43db      	mvns	r3, r3
 8008222:	68f9      	ldr	r1, [r7, #12]
 8008224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008228:	4013      	ands	r3, r2
 800822a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4413      	add	r3, r2
 8008234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	0159      	lsls	r1, r3, #5
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	440b      	add	r3, r1
 8008242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008246:	4619      	mov	r1, r3
 8008248:	4b05      	ldr	r3, [pc, #20]	; (8008260 <USB_DeactivateEndpoint+0x1b4>)
 800824a:	4013      	ands	r3, r2
 800824c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	ec337800 	.word	0xec337800
 8008260:	eff37800 	.word	0xeff37800

08008264 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08a      	sub	sp, #40	; 0x28
 8008268:	af02      	add	r7, sp, #8
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	4613      	mov	r3, r2
 8008270:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	2b01      	cmp	r3, #1
 8008282:	f040 8163 	bne.w	800854c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d132      	bne.n	80082f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829a:	691a      	ldr	r2, [r3, #16]
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	0159      	lsls	r1, r3, #5
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	440b      	add	r3, r1
 80082a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a8:	4619      	mov	r1, r3
 80082aa:	4ba5      	ldr	r3, [pc, #660]	; (8008540 <USB_EPStartXfer+0x2dc>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	015a      	lsls	r2, r3, #5
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	4413      	add	r3, r2
 80082b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	0151      	lsls	r1, r2, #5
 80082c2:	69fa      	ldr	r2, [r7, #28]
 80082c4:	440a      	add	r2, r1
 80082c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082dc:	691a      	ldr	r2, [r3, #16]
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	0159      	lsls	r1, r3, #5
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	440b      	add	r3, r1
 80082e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ea:	4619      	mov	r1, r3
 80082ec:	4b95      	ldr	r3, [pc, #596]	; (8008544 <USB_EPStartXfer+0x2e0>)
 80082ee:	4013      	ands	r3, r2
 80082f0:	610b      	str	r3, [r1, #16]
 80082f2:	e074      	b.n	80083de <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008300:	691a      	ldr	r2, [r3, #16]
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	0159      	lsls	r1, r3, #5
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	440b      	add	r3, r1
 800830a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800830e:	4619      	mov	r1, r3
 8008310:	4b8c      	ldr	r3, [pc, #560]	; (8008544 <USB_EPStartXfer+0x2e0>)
 8008312:	4013      	ands	r3, r2
 8008314:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	4413      	add	r3, r2
 800831e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008322:	691a      	ldr	r2, [r3, #16]
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	0159      	lsls	r1, r3, #5
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	440b      	add	r3, r1
 800832c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008330:	4619      	mov	r1, r3
 8008332:	4b83      	ldr	r3, [pc, #524]	; (8008540 <USB_EPStartXfer+0x2dc>)
 8008334:	4013      	ands	r3, r2
 8008336:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008344:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	6999      	ldr	r1, [r3, #24]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	440b      	add	r3, r1
 8008350:	1e59      	subs	r1, r3, #1
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	fbb1 f3f3 	udiv	r3, r1, r3
 800835a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800835c:	4b7a      	ldr	r3, [pc, #488]	; (8008548 <USB_EPStartXfer+0x2e4>)
 800835e:	400b      	ands	r3, r1
 8008360:	69b9      	ldr	r1, [r7, #24]
 8008362:	0148      	lsls	r0, r1, #5
 8008364:	69f9      	ldr	r1, [r7, #28]
 8008366:	4401      	add	r1, r0
 8008368:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800836c:	4313      	orrs	r3, r2
 800836e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	4413      	add	r3, r2
 8008378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837c:	691a      	ldr	r2, [r3, #16]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008386:	69b9      	ldr	r1, [r7, #24]
 8008388:	0148      	lsls	r0, r1, #5
 800838a:	69f9      	ldr	r1, [r7, #28]
 800838c:	4401      	add	r1, r0
 800838e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008392:	4313      	orrs	r3, r2
 8008394:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	791b      	ldrb	r3, [r3, #4]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d11f      	bne.n	80083de <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	015a      	lsls	r2, r3, #5
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	0151      	lsls	r1, r2, #5
 80083b0:	69fa      	ldr	r2, [r7, #28]
 80083b2:	440a      	add	r2, r1
 80083b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80083bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	0151      	lsls	r1, r2, #5
 80083d0:	69fa      	ldr	r2, [r7, #28]
 80083d2:	440a      	add	r2, r1
 80083d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d14b      	bne.n	800847c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d009      	beq.n	8008400 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f8:	461a      	mov	r2, r3
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	791b      	ldrb	r3, [r3, #4]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d128      	bne.n	800845a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008414:	2b00      	cmp	r3, #0
 8008416:	d110      	bne.n	800843a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	0151      	lsls	r1, r2, #5
 800842a:	69fa      	ldr	r2, [r7, #28]
 800842c:	440a      	add	r2, r1
 800842e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008432:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	e00f      	b.n	800845a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	0151      	lsls	r1, r2, #5
 800844c:	69fa      	ldr	r2, [r7, #28]
 800844e:	440a      	add	r2, r1
 8008450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008458:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	0151      	lsls	r1, r2, #5
 800846c:	69fa      	ldr	r2, [r7, #28]
 800846e:	440a      	add	r2, r1
 8008470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008474:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	e137      	b.n	80086ec <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	69ba      	ldr	r2, [r7, #24]
 800848c:	0151      	lsls	r1, r2, #5
 800848e:	69fa      	ldr	r2, [r7, #28]
 8008490:	440a      	add	r2, r1
 8008492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008496:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800849a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	791b      	ldrb	r3, [r3, #4]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d015      	beq.n	80084d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 811f 	beq.w	80086ec <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	2101      	movs	r1, #1
 80084c0:	fa01 f303 	lsl.w	r3, r1, r3
 80084c4:	69f9      	ldr	r1, [r7, #28]
 80084c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084ca:	4313      	orrs	r3, r2
 80084cc:	634b      	str	r3, [r1, #52]	; 0x34
 80084ce:	e10d      	b.n	80086ec <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d110      	bne.n	8008502 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	69ba      	ldr	r2, [r7, #24]
 80084f0:	0151      	lsls	r1, r2, #5
 80084f2:	69fa      	ldr	r2, [r7, #28]
 80084f4:	440a      	add	r2, r1
 80084f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	e00f      	b.n	8008522 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	0151      	lsls	r1, r2, #5
 8008514:	69fa      	ldr	r2, [r7, #28]
 8008516:	440a      	add	r2, r1
 8008518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800851c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008520:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	6919      	ldr	r1, [r3, #16]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	781a      	ldrb	r2, [r3, #0]
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	b298      	uxth	r0, r3
 8008530:	79fb      	ldrb	r3, [r7, #7]
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	4603      	mov	r3, r0
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 faea 	bl	8008b10 <USB_WritePacket>
 800853c:	e0d6      	b.n	80086ec <USB_EPStartXfer+0x488>
 800853e:	bf00      	nop
 8008540:	e007ffff 	.word	0xe007ffff
 8008544:	fff80000 	.word	0xfff80000
 8008548:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	4413      	add	r3, r2
 8008554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008558:	691a      	ldr	r2, [r3, #16]
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	0159      	lsls	r1, r3, #5
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	440b      	add	r3, r1
 8008562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008566:	4619      	mov	r1, r3
 8008568:	4b63      	ldr	r3, [pc, #396]	; (80086f8 <USB_EPStartXfer+0x494>)
 800856a:	4013      	ands	r3, r2
 800856c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857a:	691a      	ldr	r2, [r3, #16]
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	0159      	lsls	r1, r3, #5
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	440b      	add	r3, r1
 8008584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008588:	4619      	mov	r1, r3
 800858a:	4b5c      	ldr	r3, [pc, #368]	; (80086fc <USB_EPStartXfer+0x498>)
 800858c:	4013      	ands	r3, r2
 800858e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d123      	bne.n	80085e0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a4:	691a      	ldr	r2, [r3, #16]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085ae:	69b9      	ldr	r1, [r7, #24]
 80085b0:	0148      	lsls	r0, r1, #5
 80085b2:	69f9      	ldr	r1, [r7, #28]
 80085b4:	4401      	add	r1, r0
 80085b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085ba:	4313      	orrs	r3, r2
 80085bc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	015a      	lsls	r2, r3, #5
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	4413      	add	r3, r2
 80085c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	69ba      	ldr	r2, [r7, #24]
 80085ce:	0151      	lsls	r1, r2, #5
 80085d0:	69fa      	ldr	r2, [r7, #28]
 80085d2:	440a      	add	r2, r1
 80085d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085dc:	6113      	str	r3, [r2, #16]
 80085de:	e037      	b.n	8008650 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	699a      	ldr	r2, [r3, #24]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	4413      	add	r3, r2
 80085ea:	1e5a      	subs	r2, r3, #1
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	8afa      	ldrh	r2, [r7, #22]
 80085fc:	fb03 f202 	mul.w	r2, r3, r2
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	015a      	lsls	r2, r3, #5
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	4413      	add	r3, r2
 800860c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008610:	691a      	ldr	r2, [r3, #16]
 8008612:	8afb      	ldrh	r3, [r7, #22]
 8008614:	04d9      	lsls	r1, r3, #19
 8008616:	4b3a      	ldr	r3, [pc, #232]	; (8008700 <USB_EPStartXfer+0x49c>)
 8008618:	400b      	ands	r3, r1
 800861a:	69b9      	ldr	r1, [r7, #24]
 800861c:	0148      	lsls	r0, r1, #5
 800861e:	69f9      	ldr	r1, [r7, #28]
 8008620:	4401      	add	r1, r0
 8008622:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008626:	4313      	orrs	r3, r2
 8008628:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	015a      	lsls	r2, r3, #5
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	4413      	add	r3, r2
 8008632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008636:	691a      	ldr	r2, [r3, #16]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008640:	69b9      	ldr	r1, [r7, #24]
 8008642:	0148      	lsls	r0, r1, #5
 8008644:	69f9      	ldr	r1, [r7, #28]
 8008646:	4401      	add	r1, r0
 8008648:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800864c:	4313      	orrs	r3, r2
 800864e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d10d      	bne.n	8008672 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d009      	beq.n	8008672 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	6919      	ldr	r1, [r3, #16]
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	015a      	lsls	r2, r3, #5
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	4413      	add	r3, r2
 800866a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866e:	460a      	mov	r2, r1
 8008670:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	791b      	ldrb	r3, [r3, #4]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d128      	bne.n	80086cc <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008686:	2b00      	cmp	r3, #0
 8008688:	d110      	bne.n	80086ac <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	4413      	add	r3, r2
 8008692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	0151      	lsls	r1, r2, #5
 800869c:	69fa      	ldr	r2, [r7, #28]
 800869e:	440a      	add	r2, r1
 80086a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	e00f      	b.n	80086cc <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	0151      	lsls	r1, r2, #5
 80086be:	69fa      	ldr	r2, [r7, #28]
 80086c0:	440a      	add	r2, r1
 80086c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	015a      	lsls	r2, r3, #5
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	4413      	add	r3, r2
 80086d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	69ba      	ldr	r2, [r7, #24]
 80086dc:	0151      	lsls	r1, r2, #5
 80086de:	69fa      	ldr	r2, [r7, #28]
 80086e0:	440a      	add	r2, r1
 80086e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3720      	adds	r7, #32
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	fff80000 	.word	0xfff80000
 80086fc:	e007ffff 	.word	0xe007ffff
 8008700:	1ff80000 	.word	0x1ff80000

08008704 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	4613      	mov	r3, r2
 8008710:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	785b      	ldrb	r3, [r3, #1]
 8008720:	2b01      	cmp	r3, #1
 8008722:	f040 80ce 	bne.w	80088c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d132      	bne.n	8008794 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	4413      	add	r3, r2
 8008736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873a:	691a      	ldr	r2, [r3, #16]
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	0159      	lsls	r1, r3, #5
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	440b      	add	r3, r1
 8008744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008748:	4619      	mov	r1, r3
 800874a:	4b9a      	ldr	r3, [pc, #616]	; (80089b4 <USB_EP0StartXfer+0x2b0>)
 800874c:	4013      	ands	r3, r2
 800874e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	0151      	lsls	r1, r2, #5
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	440a      	add	r2, r1
 8008766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800876a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800876e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877c:	691a      	ldr	r2, [r3, #16]
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	0159      	lsls	r1, r3, #5
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	440b      	add	r3, r1
 8008786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878a:	4619      	mov	r1, r3
 800878c:	4b8a      	ldr	r3, [pc, #552]	; (80089b8 <USB_EP0StartXfer+0x2b4>)
 800878e:	4013      	ands	r3, r2
 8008790:	610b      	str	r3, [r1, #16]
 8008792:	e04e      	b.n	8008832 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a0:	691a      	ldr	r2, [r3, #16]
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	0159      	lsls	r1, r3, #5
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	440b      	add	r3, r1
 80087aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ae:	4619      	mov	r1, r3
 80087b0:	4b81      	ldr	r3, [pc, #516]	; (80089b8 <USB_EP0StartXfer+0x2b4>)
 80087b2:	4013      	ands	r3, r2
 80087b4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	015a      	lsls	r2, r3, #5
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	4413      	add	r3, r2
 80087be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c2:	691a      	ldr	r2, [r3, #16]
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	0159      	lsls	r1, r3, #5
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	440b      	add	r3, r1
 80087cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d0:	4619      	mov	r1, r3
 80087d2:	4b78      	ldr	r3, [pc, #480]	; (80089b4 <USB_EP0StartXfer+0x2b0>)
 80087d4:	4013      	ands	r3, r2
 80087d6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	699a      	ldr	r2, [r3, #24]
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d903      	bls.n	80087ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	68da      	ldr	r2, [r3, #12]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	0151      	lsls	r1, r2, #5
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	440a      	add	r2, r1
 8008802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008806:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800880a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	4413      	add	r3, r2
 8008814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008818:	691a      	ldr	r2, [r3, #16]
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008822:	6939      	ldr	r1, [r7, #16]
 8008824:	0148      	lsls	r0, r1, #5
 8008826:	6979      	ldr	r1, [r7, #20]
 8008828:	4401      	add	r1, r0
 800882a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800882e:	4313      	orrs	r3, r2
 8008830:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008832:	79fb      	ldrb	r3, [r7, #7]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d11e      	bne.n	8008876 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d009      	beq.n	8008854 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	4413      	add	r3, r2
 8008848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884c:	461a      	mov	r2, r3
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	4413      	add	r3, r2
 800885c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	0151      	lsls	r1, r2, #5
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	440a      	add	r2, r1
 800886a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800886e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008872:	6013      	str	r3, [r2, #0]
 8008874:	e097      	b.n	80089a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	4413      	add	r3, r2
 800887e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	0151      	lsls	r1, r2, #5
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	440a      	add	r2, r1
 800888c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008890:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008894:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 8083 	beq.w	80089a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	f003 030f 	and.w	r3, r3, #15
 80088b0:	2101      	movs	r1, #1
 80088b2:	fa01 f303 	lsl.w	r3, r1, r3
 80088b6:	6979      	ldr	r1, [r7, #20]
 80088b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088bc:	4313      	orrs	r3, r2
 80088be:	634b      	str	r3, [r1, #52]	; 0x34
 80088c0:	e071      	b.n	80089a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	015a      	lsls	r2, r3, #5
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	4413      	add	r3, r2
 80088ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ce:	691a      	ldr	r2, [r3, #16]
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	0159      	lsls	r1, r3, #5
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	440b      	add	r3, r1
 80088d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088dc:	4619      	mov	r1, r3
 80088de:	4b36      	ldr	r3, [pc, #216]	; (80089b8 <USB_EP0StartXfer+0x2b4>)
 80088e0:	4013      	ands	r3, r2
 80088e2:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	015a      	lsls	r2, r3, #5
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	4413      	add	r3, r2
 80088ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f0:	691a      	ldr	r2, [r3, #16]
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	0159      	lsls	r1, r3, #5
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	440b      	add	r3, r1
 80088fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fe:	4619      	mov	r1, r3
 8008900:	4b2c      	ldr	r3, [pc, #176]	; (80089b4 <USB_EP0StartXfer+0x2b0>)
 8008902:	4013      	ands	r3, r2
 8008904:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d003      	beq.n	8008916 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	68da      	ldr	r2, [r3, #12]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	68da      	ldr	r2, [r3, #12]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	4413      	add	r3, r2
 8008926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	0151      	lsls	r1, r2, #5
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	440a      	add	r2, r1
 8008934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008938:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800893c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	4413      	add	r3, r2
 8008946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894a:	691a      	ldr	r2, [r3, #16]
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008954:	6939      	ldr	r1, [r7, #16]
 8008956:	0148      	lsls	r0, r1, #5
 8008958:	6979      	ldr	r1, [r7, #20]
 800895a:	4401      	add	r1, r0
 800895c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008960:	4313      	orrs	r3, r2
 8008962:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008964:	79fb      	ldrb	r3, [r7, #7]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d10d      	bne.n	8008986 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	6919      	ldr	r1, [r3, #16]
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008982:	460a      	mov	r2, r1
 8008984:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	015a      	lsls	r2, r3, #5
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	4413      	add	r3, r2
 800898e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	0151      	lsls	r1, r2, #5
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	440a      	add	r2, r1
 800899c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	371c      	adds	r7, #28
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	e007ffff 	.word	0xe007ffff
 80089b8:	fff80000 	.word	0xfff80000

080089bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	785b      	ldrb	r3, [r3, #1]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d14a      	bne.n	8008a70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089f2:	f040 8086 	bne.w	8008b02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	7812      	ldrb	r2, [r2, #0]
 8008a0a:	0151      	lsls	r1, r2, #5
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	440a      	add	r2, r1
 8008a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	7812      	ldrb	r2, [r2, #0]
 8008a2e:	0151      	lsls	r1, r2, #5
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	440a      	add	r2, r1
 8008a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3301      	adds	r3, #1
 8008a42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f242 7210 	movw	r2, #10000	; 0x2710
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d902      	bls.n	8008a54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	75fb      	strb	r3, [r7, #23]
          break;
 8008a52:	e056      	b.n	8008b02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a6c:	d0e7      	beq.n	8008a3e <USB_EPStopXfer+0x82>
 8008a6e:	e048      	b.n	8008b02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a88:	d13b      	bne.n	8008b02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	7812      	ldrb	r2, [r2, #0]
 8008a9e:	0151      	lsls	r1, r2, #5
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	440a      	add	r2, r1
 8008aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aa8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008aac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	7812      	ldrb	r2, [r2, #0]
 8008ac2:	0151      	lsls	r1, r2, #5
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	440a      	add	r2, r1
 8008ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008acc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ad0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f242 7210 	movw	r2, #10000	; 0x2710
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d902      	bls.n	8008ae8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ae6:	e00c      	b.n	8008b02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b00:	d0e7      	beq.n	8008ad2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	371c      	adds	r7, #28
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b089      	sub	sp, #36	; 0x24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	460b      	mov	r3, r1
 8008b20:	71fb      	strb	r3, [r7, #7]
 8008b22:	4613      	mov	r3, r2
 8008b24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008b2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d123      	bne.n	8008b7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008b36:	88bb      	ldrh	r3, [r7, #4]
 8008b38:	3303      	adds	r3, #3
 8008b3a:	089b      	lsrs	r3, r3, #2
 8008b3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008b3e:	2300      	movs	r3, #0
 8008b40:	61bb      	str	r3, [r7, #24]
 8008b42:	e018      	b.n	8008b76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	031a      	lsls	r2, r3, #12
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b50:	461a      	mov	r2, r3
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	3301      	adds	r3, #1
 8008b62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	3301      	adds	r3, #1
 8008b68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	3301      	adds	r3, #1
 8008b74:	61bb      	str	r3, [r7, #24]
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d3e2      	bcc.n	8008b44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3724      	adds	r7, #36	; 0x24
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b08b      	sub	sp, #44	; 0x2c
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	4613      	mov	r3, r2
 8008b98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008ba2:	88fb      	ldrh	r3, [r7, #6]
 8008ba4:	089b      	lsrs	r3, r3, #2
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008baa:	88fb      	ldrh	r3, [r7, #6]
 8008bac:	f003 0303 	and.w	r3, r3, #3
 8008bb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	623b      	str	r3, [r7, #32]
 8008bb6:	e014      	b.n	8008be2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	3301      	adds	r3, #1
 8008bce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	3301      	adds	r3, #1
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	3301      	adds	r3, #1
 8008be0:	623b      	str	r3, [r7, #32]
 8008be2:	6a3a      	ldr	r2, [r7, #32]
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d3e6      	bcc.n	8008bb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008bea:	8bfb      	ldrh	r3, [r7, #30]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d01e      	beq.n	8008c2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	f107 0310 	add.w	r3, r7, #16
 8008c00:	6812      	ldr	r2, [r2, #0]
 8008c02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	701a      	strb	r2, [r3, #0]
      i++;
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	3301      	adds	r3, #1
 8008c20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008c22:	8bfb      	ldrh	r3, [r7, #30]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008c28:	8bfb      	ldrh	r3, [r7, #30]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1ea      	bne.n	8008c04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	372c      	adds	r7, #44	; 0x2c
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	785b      	ldrb	r3, [r3, #1]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d12c      	bne.n	8008cb2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	db12      	blt.n	8008c90 <USB_EPSetStall+0x54>
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00f      	beq.n	8008c90 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	0151      	lsls	r1, r2, #5
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	440a      	add	r2, r1
 8008c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c8e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008caa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	e02b      	b.n	8008d0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	db12      	blt.n	8008cea <USB_EPSetStall+0xae>
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00f      	beq.n	8008cea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	0151      	lsls	r1, r2, #5
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	440a      	add	r2, r1
 8008ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ce8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	0151      	lsls	r1, r2, #5
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	440a      	add	r2, r1
 8008d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	785b      	ldrb	r3, [r3, #1]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d128      	bne.n	8008d86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	0151      	lsls	r1, r2, #5
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	440a      	add	r2, r1
 8008d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	791b      	ldrb	r3, [r3, #4]
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	d003      	beq.n	8008d64 <USB_EPClearStall+0x4c>
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	791b      	ldrb	r3, [r3, #4]
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d138      	bne.n	8008dd6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	0151      	lsls	r1, r2, #5
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	440a      	add	r2, r1
 8008d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d82:	6013      	str	r3, [r2, #0]
 8008d84:	e027      	b.n	8008dd6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	0151      	lsls	r1, r2, #5
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	440a      	add	r2, r1
 8008d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008da0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008da4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	791b      	ldrb	r3, [r3, #4]
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d003      	beq.n	8008db6 <USB_EPClearStall+0x9e>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	791b      	ldrb	r3, [r3, #4]
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d10f      	bne.n	8008dd6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	0151      	lsls	r1, r2, #5
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	440a      	add	r2, r1
 8008dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dd4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	460b      	mov	r3, r1
 8008dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008e06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	78fb      	ldrb	r3, [r7, #3]
 8008e12:	011b      	lsls	r3, r3, #4
 8008e14:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008e18:	68f9      	ldr	r1, [r7, #12]
 8008e1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e4a:	f023 0303 	bic.w	r3, r3, #3
 8008e4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e5e:	f023 0302 	bic.w	r3, r3, #2
 8008e62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b085      	sub	sp, #20
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e8c:	f023 0303 	bic.w	r3, r3, #3
 8008e90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ea0:	f043 0302 	orr.w	r3, r3, #2
 8008ea4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b085      	sub	sp, #20
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	4013      	ands	r3, r2
 8008efc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	0c1b      	lsrs	r3, r3, #16
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3714      	adds	r7, #20
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b085      	sub	sp, #20
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2a:	69db      	ldr	r3, [r3, #28]
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	4013      	ands	r3, r2
 8008f30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	b29b      	uxth	r3, r3
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b085      	sub	sp, #20
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008f52:	78fb      	ldrb	r3, [r7, #3]
 8008f54:	015a      	lsls	r2, r3, #5
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008f70:	68bb      	ldr	r3, [r7, #8]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b087      	sub	sp, #28
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	460b      	mov	r3, r1
 8008f88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008fa2:	78fb      	ldrb	r3, [r7, #3]
 8008fa4:	f003 030f 	and.w	r3, r3, #15
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	fa22 f303 	lsr.w	r3, r2, r3
 8008fae:	01db      	lsls	r3, r3, #7
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008fb8:	78fb      	ldrb	r3, [r7, #3]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	4013      	ands	r3, r2
 8008fca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008fcc:	68bb      	ldr	r3, [r7, #8]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	371c      	adds	r7, #28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b083      	sub	sp, #12
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	f003 0301 	and.w	r3, r3, #1
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
	...

08008ff8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009012:	4619      	mov	r1, r3
 8009014:	4b09      	ldr	r3, [pc, #36]	; (800903c <USB_ActivateSetup+0x44>)
 8009016:	4013      	ands	r3, r2
 8009018:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800902c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	fffff800 	.word	0xfffff800

08009040 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	460b      	mov	r3, r1
 800904a:	607a      	str	r2, [r7, #4]
 800904c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	333c      	adds	r3, #60	; 0x3c
 8009056:	3304      	adds	r3, #4
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	4a26      	ldr	r2, [pc, #152]	; (80090f8 <USB_EP0_OutStart+0xb8>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d90a      	bls.n	800907a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009074:	d101      	bne.n	800907a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	e037      	b.n	80090ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009080:	461a      	mov	r2, r3
 8009082:	2300      	movs	r3, #0
 8009084:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009094:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009098:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a8:	f043 0318 	orr.w	r3, r3, #24
 80090ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80090c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80090c2:	7afb      	ldrb	r3, [r7, #11]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d10f      	bne.n	80090e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ce:	461a      	mov	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80090e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	371c      	adds	r7, #28
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	4f54300a 	.word	0x4f54300a

080090fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009104:	2300      	movs	r3, #0
 8009106:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	3301      	adds	r3, #1
 800910c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4a13      	ldr	r2, [pc, #76]	; (8009160 <USB_CoreReset+0x64>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d901      	bls.n	800911a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e01b      	b.n	8009152 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	daf2      	bge.n	8009108 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009122:	2300      	movs	r3, #0
 8009124:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	f043 0201 	orr.w	r2, r3, #1
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	3301      	adds	r3, #1
 8009136:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4a09      	ldr	r2, [pc, #36]	; (8009160 <USB_CoreReset+0x64>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d901      	bls.n	8009144 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009140:	2303      	movs	r3, #3
 8009142:	e006      	b.n	8009152 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	2b01      	cmp	r3, #1
 800914e:	d0f0      	beq.n	8009132 <USB_CoreReset+0x36>

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	00030d40 	.word	0x00030d40

08009164 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009170:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009174:	f002 fda2 	bl	800bcbc <malloc>
 8009178:	4603      	mov	r3, r0
 800917a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d109      	bne.n	8009196 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	32b0      	adds	r2, #176	; 0xb0
 800918c:	2100      	movs	r1, #0
 800918e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009192:	2302      	movs	r3, #2
 8009194:	e0d4      	b.n	8009340 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009196:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800919a:	2100      	movs	r1, #0
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f002 fe49 	bl	800be34 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	32b0      	adds	r2, #176	; 0xb0
 80091ac:	68f9      	ldr	r1, [r7, #12]
 80091ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	32b0      	adds	r2, #176	; 0xb0
 80091bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7c1b      	ldrb	r3, [r3, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d138      	bne.n	8009240 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80091ce:	4b5e      	ldr	r3, [pc, #376]	; (8009348 <USBD_CDC_Init+0x1e4>)
 80091d0:	7819      	ldrb	r1, [r3, #0]
 80091d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091d6:	2202      	movs	r2, #2
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f002 fbcc 	bl	800b976 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80091de:	4b5a      	ldr	r3, [pc, #360]	; (8009348 <USBD_CDC_Init+0x1e4>)
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	f003 020f 	and.w	r2, r3, #15
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	4613      	mov	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	440b      	add	r3, r1
 80091f2:	3324      	adds	r3, #36	; 0x24
 80091f4:	2201      	movs	r2, #1
 80091f6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80091f8:	4b54      	ldr	r3, [pc, #336]	; (800934c <USBD_CDC_Init+0x1e8>)
 80091fa:	7819      	ldrb	r1, [r3, #0]
 80091fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009200:	2202      	movs	r2, #2
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f002 fbb7 	bl	800b976 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009208:	4b50      	ldr	r3, [pc, #320]	; (800934c <USBD_CDC_Init+0x1e8>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	f003 020f 	and.w	r2, r3, #15
 8009210:	6879      	ldr	r1, [r7, #4]
 8009212:	4613      	mov	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	440b      	add	r3, r1
 800921c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009220:	2201      	movs	r2, #1
 8009222:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009224:	4b4a      	ldr	r3, [pc, #296]	; (8009350 <USBD_CDC_Init+0x1ec>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	f003 020f 	and.w	r2, r3, #15
 800922c:	6879      	ldr	r1, [r7, #4]
 800922e:	4613      	mov	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	440b      	add	r3, r1
 8009238:	3326      	adds	r3, #38	; 0x26
 800923a:	2210      	movs	r2, #16
 800923c:	801a      	strh	r2, [r3, #0]
 800923e:	e035      	b.n	80092ac <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009240:	4b41      	ldr	r3, [pc, #260]	; (8009348 <USBD_CDC_Init+0x1e4>)
 8009242:	7819      	ldrb	r1, [r3, #0]
 8009244:	2340      	movs	r3, #64	; 0x40
 8009246:	2202      	movs	r2, #2
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f002 fb94 	bl	800b976 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800924e:	4b3e      	ldr	r3, [pc, #248]	; (8009348 <USBD_CDC_Init+0x1e4>)
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	f003 020f 	and.w	r2, r3, #15
 8009256:	6879      	ldr	r1, [r7, #4]
 8009258:	4613      	mov	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	440b      	add	r3, r1
 8009262:	3324      	adds	r3, #36	; 0x24
 8009264:	2201      	movs	r2, #1
 8009266:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009268:	4b38      	ldr	r3, [pc, #224]	; (800934c <USBD_CDC_Init+0x1e8>)
 800926a:	7819      	ldrb	r1, [r3, #0]
 800926c:	2340      	movs	r3, #64	; 0x40
 800926e:	2202      	movs	r2, #2
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f002 fb80 	bl	800b976 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009276:	4b35      	ldr	r3, [pc, #212]	; (800934c <USBD_CDC_Init+0x1e8>)
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	f003 020f 	and.w	r2, r3, #15
 800927e:	6879      	ldr	r1, [r7, #4]
 8009280:	4613      	mov	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	440b      	add	r3, r1
 800928a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800928e:	2201      	movs	r2, #1
 8009290:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009292:	4b2f      	ldr	r3, [pc, #188]	; (8009350 <USBD_CDC_Init+0x1ec>)
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	f003 020f 	and.w	r2, r3, #15
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	4613      	mov	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	440b      	add	r3, r1
 80092a6:	3326      	adds	r3, #38	; 0x26
 80092a8:	2210      	movs	r2, #16
 80092aa:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80092ac:	4b28      	ldr	r3, [pc, #160]	; (8009350 <USBD_CDC_Init+0x1ec>)
 80092ae:	7819      	ldrb	r1, [r3, #0]
 80092b0:	2308      	movs	r3, #8
 80092b2:	2203      	movs	r2, #3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f002 fb5e 	bl	800b976 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80092ba:	4b25      	ldr	r3, [pc, #148]	; (8009350 <USBD_CDC_Init+0x1ec>)
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	f003 020f 	and.w	r2, r3, #15
 80092c2:	6879      	ldr	r1, [r7, #4]
 80092c4:	4613      	mov	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	440b      	add	r3, r1
 80092ce:	3324      	adds	r3, #36	; 0x24
 80092d0:	2201      	movs	r2, #1
 80092d2:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	33b0      	adds	r3, #176	; 0xb0
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800930a:	2302      	movs	r3, #2
 800930c:	e018      	b.n	8009340 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	7c1b      	ldrb	r3, [r3, #16]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10a      	bne.n	800932c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009316:	4b0d      	ldr	r3, [pc, #52]	; (800934c <USBD_CDC_Init+0x1e8>)
 8009318:	7819      	ldrb	r1, [r3, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f002 fc15 	bl	800bb54 <USBD_LL_PrepareReceive>
 800932a:	e008      	b.n	800933e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800932c:	4b07      	ldr	r3, [pc, #28]	; (800934c <USBD_CDC_Init+0x1e8>)
 800932e:	7819      	ldrb	r1, [r3, #0]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009336:	2340      	movs	r3, #64	; 0x40
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f002 fc0b 	bl	800bb54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	200001a7 	.word	0x200001a7
 800934c:	200001a8 	.word	0x200001a8
 8009350:	200001a9 	.word	0x200001a9

08009354 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	460b      	mov	r3, r1
 800935e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009360:	4b3a      	ldr	r3, [pc, #232]	; (800944c <USBD_CDC_DeInit+0xf8>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f002 fb2b 	bl	800b9c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800936c:	4b37      	ldr	r3, [pc, #220]	; (800944c <USBD_CDC_DeInit+0xf8>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	f003 020f 	and.w	r2, r3, #15
 8009374:	6879      	ldr	r1, [r7, #4]
 8009376:	4613      	mov	r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	4413      	add	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	440b      	add	r3, r1
 8009380:	3324      	adds	r3, #36	; 0x24
 8009382:	2200      	movs	r2, #0
 8009384:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009386:	4b32      	ldr	r3, [pc, #200]	; (8009450 <USBD_CDC_DeInit+0xfc>)
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	4619      	mov	r1, r3
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f002 fb18 	bl	800b9c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009392:	4b2f      	ldr	r3, [pc, #188]	; (8009450 <USBD_CDC_DeInit+0xfc>)
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	f003 020f 	and.w	r2, r3, #15
 800939a:	6879      	ldr	r1, [r7, #4]
 800939c:	4613      	mov	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4413      	add	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	440b      	add	r3, r1
 80093a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093aa:	2200      	movs	r2, #0
 80093ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80093ae:	4b29      	ldr	r3, [pc, #164]	; (8009454 <USBD_CDC_DeInit+0x100>)
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f002 fb04 	bl	800b9c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80093ba:	4b26      	ldr	r3, [pc, #152]	; (8009454 <USBD_CDC_DeInit+0x100>)
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	f003 020f 	and.w	r2, r3, #15
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	4613      	mov	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	440b      	add	r3, r1
 80093ce:	3324      	adds	r3, #36	; 0x24
 80093d0:	2200      	movs	r2, #0
 80093d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80093d4:	4b1f      	ldr	r3, [pc, #124]	; (8009454 <USBD_CDC_DeInit+0x100>)
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	f003 020f 	and.w	r2, r3, #15
 80093dc:	6879      	ldr	r1, [r7, #4]
 80093de:	4613      	mov	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	440b      	add	r3, r1
 80093e8:	3326      	adds	r3, #38	; 0x26
 80093ea:	2200      	movs	r2, #0
 80093ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	32b0      	adds	r2, #176	; 0xb0
 80093f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d01f      	beq.n	8009440 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	33b0      	adds	r3, #176	; 0xb0
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	32b0      	adds	r2, #176	; 0xb0
 800941e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009422:	4618      	mov	r0, r3
 8009424:	f002 fc52 	bl	800bccc <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	32b0      	adds	r2, #176	; 0xb0
 8009432:	2100      	movs	r1, #0
 8009434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	200001a7 	.word	0x200001a7
 8009450:	200001a8 	.word	0x200001a8
 8009454:	200001a9 	.word	0x200001a9

08009458 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	32b0      	adds	r2, #176	; 0xb0
 800946c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009470:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009472:	2300      	movs	r3, #0
 8009474:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009476:	2300      	movs	r3, #0
 8009478:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009484:	2303      	movs	r3, #3
 8009486:	e0bf      	b.n	8009608 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009490:	2b00      	cmp	r3, #0
 8009492:	d050      	beq.n	8009536 <USBD_CDC_Setup+0xde>
 8009494:	2b20      	cmp	r3, #32
 8009496:	f040 80af 	bne.w	80095f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	88db      	ldrh	r3, [r3, #6]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d03a      	beq.n	8009518 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	b25b      	sxtb	r3, r3
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	da1b      	bge.n	80094e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	33b0      	adds	r3, #176	; 0xb0
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80094c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	88d2      	ldrh	r2, [r2, #6]
 80094c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	88db      	ldrh	r3, [r3, #6]
 80094ce:	2b07      	cmp	r3, #7
 80094d0:	bf28      	it	cs
 80094d2:	2307      	movcs	r3, #7
 80094d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	89fa      	ldrh	r2, [r7, #14]
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 fdad 	bl	800b03c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80094e2:	e090      	b.n	8009606 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	785a      	ldrb	r2, [r3, #1]
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	88db      	ldrh	r3, [r3, #6]
 80094f2:	2b3f      	cmp	r3, #63	; 0x3f
 80094f4:	d803      	bhi.n	80094fe <USBD_CDC_Setup+0xa6>
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	88db      	ldrh	r3, [r3, #6]
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	e000      	b.n	8009500 <USBD_CDC_Setup+0xa8>
 80094fe:	2240      	movs	r2, #64	; 0x40
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009506:	6939      	ldr	r1, [r7, #16]
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800950e:	461a      	mov	r2, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f001 fdbf 	bl	800b094 <USBD_CtlPrepareRx>
      break;
 8009516:	e076      	b.n	8009606 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	33b0      	adds	r3, #176	; 0xb0
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	683a      	ldr	r2, [r7, #0]
 800952c:	7850      	ldrb	r0, [r2, #1]
 800952e:	2200      	movs	r2, #0
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	4798      	blx	r3
      break;
 8009534:	e067      	b.n	8009606 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	785b      	ldrb	r3, [r3, #1]
 800953a:	2b0b      	cmp	r3, #11
 800953c:	d851      	bhi.n	80095e2 <USBD_CDC_Setup+0x18a>
 800953e:	a201      	add	r2, pc, #4	; (adr r2, 8009544 <USBD_CDC_Setup+0xec>)
 8009540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009544:	08009575 	.word	0x08009575
 8009548:	080095f1 	.word	0x080095f1
 800954c:	080095e3 	.word	0x080095e3
 8009550:	080095e3 	.word	0x080095e3
 8009554:	080095e3 	.word	0x080095e3
 8009558:	080095e3 	.word	0x080095e3
 800955c:	080095e3 	.word	0x080095e3
 8009560:	080095e3 	.word	0x080095e3
 8009564:	080095e3 	.word	0x080095e3
 8009568:	080095e3 	.word	0x080095e3
 800956c:	0800959f 	.word	0x0800959f
 8009570:	080095c9 	.word	0x080095c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b03      	cmp	r3, #3
 800957e:	d107      	bne.n	8009590 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009580:	f107 030a 	add.w	r3, r7, #10
 8009584:	2202      	movs	r2, #2
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f001 fd57 	bl	800b03c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800958e:	e032      	b.n	80095f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009590:	6839      	ldr	r1, [r7, #0]
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f001 fce1 	bl	800af5a <USBD_CtlError>
            ret = USBD_FAIL;
 8009598:	2303      	movs	r3, #3
 800959a:	75fb      	strb	r3, [r7, #23]
          break;
 800959c:	e02b      	b.n	80095f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	d107      	bne.n	80095ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80095aa:	f107 030d 	add.w	r3, r7, #13
 80095ae:	2201      	movs	r2, #1
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f001 fd42 	bl	800b03c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095b8:	e01d      	b.n	80095f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f001 fccc 	bl	800af5a <USBD_CtlError>
            ret = USBD_FAIL;
 80095c2:	2303      	movs	r3, #3
 80095c4:	75fb      	strb	r3, [r7, #23]
          break;
 80095c6:	e016      	b.n	80095f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b03      	cmp	r3, #3
 80095d2:	d00f      	beq.n	80095f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f001 fcbf 	bl	800af5a <USBD_CtlError>
            ret = USBD_FAIL;
 80095dc:	2303      	movs	r3, #3
 80095de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80095e0:	e008      	b.n	80095f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f001 fcb8 	bl	800af5a <USBD_CtlError>
          ret = USBD_FAIL;
 80095ea:	2303      	movs	r3, #3
 80095ec:	75fb      	strb	r3, [r7, #23]
          break;
 80095ee:	e002      	b.n	80095f6 <USBD_CDC_Setup+0x19e>
          break;
 80095f0:	bf00      	nop
 80095f2:	e008      	b.n	8009606 <USBD_CDC_Setup+0x1ae>
          break;
 80095f4:	bf00      	nop
      }
      break;
 80095f6:	e006      	b.n	8009606 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f001 fcad 	bl	800af5a <USBD_CtlError>
      ret = USBD_FAIL;
 8009600:	2303      	movs	r3, #3
 8009602:	75fb      	strb	r3, [r7, #23]
      break;
 8009604:	bf00      	nop
  }

  return (uint8_t)ret;
 8009606:	7dfb      	ldrb	r3, [r7, #23]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009622:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	32b0      	adds	r2, #176	; 0xb0
 800962e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009636:	2303      	movs	r3, #3
 8009638:	e065      	b.n	8009706 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	32b0      	adds	r2, #176	; 0xb0
 8009644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009648:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800964a:	78fb      	ldrb	r3, [r7, #3]
 800964c:	f003 020f 	and.w	r2, r3, #15
 8009650:	6879      	ldr	r1, [r7, #4]
 8009652:	4613      	mov	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	440b      	add	r3, r1
 800965c:	3318      	adds	r3, #24
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d02f      	beq.n	80096c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009664:	78fb      	ldrb	r3, [r7, #3]
 8009666:	f003 020f 	and.w	r2, r3, #15
 800966a:	6879      	ldr	r1, [r7, #4]
 800966c:	4613      	mov	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	440b      	add	r3, r1
 8009676:	3318      	adds	r3, #24
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	78fb      	ldrb	r3, [r7, #3]
 800967c:	f003 010f 	and.w	r1, r3, #15
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	460b      	mov	r3, r1
 8009684:	00db      	lsls	r3, r3, #3
 8009686:	440b      	add	r3, r1
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4403      	add	r3, r0
 800968c:	3348      	adds	r3, #72	; 0x48
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	fbb2 f1f3 	udiv	r1, r2, r3
 8009694:	fb01 f303 	mul.w	r3, r1, r3
 8009698:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800969a:	2b00      	cmp	r3, #0
 800969c:	d112      	bne.n	80096c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800969e:	78fb      	ldrb	r3, [r7, #3]
 80096a0:	f003 020f 	and.w	r2, r3, #15
 80096a4:	6879      	ldr	r1, [r7, #4]
 80096a6:	4613      	mov	r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	4413      	add	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	440b      	add	r3, r1
 80096b0:	3318      	adds	r3, #24
 80096b2:	2200      	movs	r2, #0
 80096b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80096b6:	78f9      	ldrb	r1, [r7, #3]
 80096b8:	2300      	movs	r3, #0
 80096ba:	2200      	movs	r2, #0
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f002 fa28 	bl	800bb12 <USBD_LL_Transmit>
 80096c2:	e01f      	b.n	8009704 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	33b0      	adds	r3, #176	; 0xb0
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d010      	beq.n	8009704 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	33b0      	adds	r3, #176	; 0xb0
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4413      	add	r3, r2
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009700:	78fa      	ldrb	r2, [r7, #3]
 8009702:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b084      	sub	sp, #16
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
 8009716:	460b      	mov	r3, r1
 8009718:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	32b0      	adds	r2, #176	; 0xb0
 8009724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009728:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	32b0      	adds	r2, #176	; 0xb0
 8009734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800973c:	2303      	movs	r3, #3
 800973e:	e01a      	b.n	8009776 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009740:	78fb      	ldrb	r3, [r7, #3]
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f002 fa26 	bl	800bb96 <USBD_LL_GetRxDataSize>
 800974a:	4602      	mov	r2, r0
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	33b0      	adds	r3, #176	; 0xb0
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4413      	add	r3, r2
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009770:	4611      	mov	r1, r2
 8009772:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b084      	sub	sp, #16
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	32b0      	adds	r2, #176	; 0xb0
 8009790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009794:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d101      	bne.n	80097a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800979c:	2303      	movs	r3, #3
 800979e:	e025      	b.n	80097ec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	33b0      	adds	r3, #176	; 0xb0
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d01a      	beq.n	80097ea <USBD_CDC_EP0_RxReady+0x6c>
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80097ba:	2bff      	cmp	r3, #255	; 0xff
 80097bc:	d015      	beq.n	80097ea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	33b0      	adds	r3, #176	; 0xb0
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80097d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80097de:	b292      	uxth	r2, r2
 80097e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	22ff      	movs	r2, #255	; 0xff
 80097e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80097fc:	2182      	movs	r1, #130	; 0x82
 80097fe:	4818      	ldr	r0, [pc, #96]	; (8009860 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009800:	f000 fd49 	bl	800a296 <USBD_GetEpDesc>
 8009804:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009806:	2101      	movs	r1, #1
 8009808:	4815      	ldr	r0, [pc, #84]	; (8009860 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800980a:	f000 fd44 	bl	800a296 <USBD_GetEpDesc>
 800980e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009810:	2181      	movs	r1, #129	; 0x81
 8009812:	4813      	ldr	r0, [pc, #76]	; (8009860 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009814:	f000 fd3f 	bl	800a296 <USBD_GetEpDesc>
 8009818:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2210      	movs	r2, #16
 8009824:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d006      	beq.n	800983a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	2200      	movs	r2, #0
 8009830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009834:	711a      	strb	r2, [r3, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d006      	beq.n	800984e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009848:	711a      	strb	r2, [r3, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2243      	movs	r2, #67	; 0x43
 8009852:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009854:	4b02      	ldr	r3, [pc, #8]	; (8009860 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20000164 	.word	0x20000164

08009864 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800986c:	2182      	movs	r1, #130	; 0x82
 800986e:	4818      	ldr	r0, [pc, #96]	; (80098d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009870:	f000 fd11 	bl	800a296 <USBD_GetEpDesc>
 8009874:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009876:	2101      	movs	r1, #1
 8009878:	4815      	ldr	r0, [pc, #84]	; (80098d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800987a:	f000 fd0c 	bl	800a296 <USBD_GetEpDesc>
 800987e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009880:	2181      	movs	r1, #129	; 0x81
 8009882:	4813      	ldr	r0, [pc, #76]	; (80098d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009884:	f000 fd07 	bl	800a296 <USBD_GetEpDesc>
 8009888:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d002      	beq.n	8009896 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	2210      	movs	r2, #16
 8009894:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d006      	beq.n	80098aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	2200      	movs	r2, #0
 80098a0:	711a      	strb	r2, [r3, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f042 0202 	orr.w	r2, r2, #2
 80098a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d006      	beq.n	80098be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	711a      	strb	r2, [r3, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f042 0202 	orr.w	r2, r2, #2
 80098bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2243      	movs	r2, #67	; 0x43
 80098c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80098c4:	4b02      	ldr	r3, [pc, #8]	; (80098d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3718      	adds	r7, #24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	20000164 	.word	0x20000164

080098d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80098dc:	2182      	movs	r1, #130	; 0x82
 80098de:	4818      	ldr	r0, [pc, #96]	; (8009940 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80098e0:	f000 fcd9 	bl	800a296 <USBD_GetEpDesc>
 80098e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098e6:	2101      	movs	r1, #1
 80098e8:	4815      	ldr	r0, [pc, #84]	; (8009940 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80098ea:	f000 fcd4 	bl	800a296 <USBD_GetEpDesc>
 80098ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80098f0:	2181      	movs	r1, #129	; 0x81
 80098f2:	4813      	ldr	r0, [pc, #76]	; (8009940 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80098f4:	f000 fccf 	bl	800a296 <USBD_GetEpDesc>
 80098f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	2210      	movs	r2, #16
 8009904:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d006      	beq.n	800991a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	2200      	movs	r2, #0
 8009910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009914:	711a      	strb	r2, [r3, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d006      	beq.n	800992e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009928:	711a      	strb	r2, [r3, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2243      	movs	r2, #67	; 0x43
 8009932:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009934:	4b02      	ldr	r3, [pc, #8]	; (8009940 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009936:	4618      	mov	r0, r3
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20000164 	.word	0x20000164

08009944 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	220a      	movs	r2, #10
 8009950:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009952:	4b03      	ldr	r3, [pc, #12]	; (8009960 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009954:	4618      	mov	r0, r3
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	20000120 	.word	0x20000120

08009964 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d101      	bne.n	8009978 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009974:	2303      	movs	r3, #3
 8009976:	e009      	b.n	800998c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	33b0      	adds	r3, #176	; 0xb0
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	4413      	add	r3, r2
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009998:	b480      	push	{r7}
 800999a:	b087      	sub	sp, #28
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	32b0      	adds	r2, #176	; 0xb0
 80099ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d101      	bne.n	80099be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e008      	b.n	80099d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	371c      	adds	r7, #28
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	32b0      	adds	r2, #176	; 0xb0
 80099f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80099fc:	2303      	movs	r3, #3
 80099fe:	e004      	b.n	8009a0a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
	...

08009a18 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	32b0      	adds	r2, #176	; 0xb0
 8009a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a2e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009a30:	2301      	movs	r3, #1
 8009a32:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e025      	b.n	8009a8a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d11f      	bne.n	8009a88 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009a50:	4b10      	ldr	r3, [pc, #64]	; (8009a94 <USBD_CDC_TransmitPacket+0x7c>)
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	f003 020f 	and.w	r2, r3, #15
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	4613      	mov	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4403      	add	r3, r0
 8009a6a:	3318      	adds	r3, #24
 8009a6c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009a6e:	4b09      	ldr	r3, [pc, #36]	; (8009a94 <USBD_CDC_TransmitPacket+0x7c>)
 8009a70:	7819      	ldrb	r1, [r3, #0]
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f002 f847 	bl	800bb12 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	200001a7 	.word	0x200001a7

08009a98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	32b0      	adds	r2, #176	; 0xb0
 8009aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	32b0      	adds	r2, #176	; 0xb0
 8009aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d101      	bne.n	8009ac6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e018      	b.n	8009af8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	7c1b      	ldrb	r3, [r3, #16]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10a      	bne.n	8009ae4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ace:	4b0c      	ldr	r3, [pc, #48]	; (8009b00 <USBD_CDC_ReceivePacket+0x68>)
 8009ad0:	7819      	ldrb	r1, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f002 f839 	bl	800bb54 <USBD_LL_PrepareReceive>
 8009ae2:	e008      	b.n	8009af6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ae4:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <USBD_CDC_ReceivePacket+0x68>)
 8009ae6:	7819      	ldrb	r1, [r3, #0]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009aee:	2340      	movs	r3, #64	; 0x40
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f002 f82f 	bl	800bb54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	200001a8 	.word	0x200001a8

08009b04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	e01f      	b.n	8009b5c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d003      	beq.n	8009b42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	79fa      	ldrb	r2, [r7, #7]
 8009b4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f001 fea9 	bl	800b8a8 <USBD_LL_Init>
 8009b56:	4603      	mov	r3, r0
 8009b58:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3718      	adds	r7, #24
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d101      	bne.n	8009b7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e025      	b.n	8009bc8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	32ae      	adds	r2, #174	; 0xae
 8009b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00f      	beq.n	8009bb8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	32ae      	adds	r2, #174	; 0xae
 8009ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	f107 020e 	add.w	r2, r7, #14
 8009bac:	4610      	mov	r0, r2
 8009bae:	4798      	blx	r3
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009bbe:	1c5a      	adds	r2, r3, #1
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f001 feb1 	bl	800b940 <USBD_LL_Start>
 8009bde:	4603      	mov	r3, r0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009bf0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	370c      	adds	r7, #12
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	460b      	mov	r3, r1
 8009c08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d009      	beq.n	8009c2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	78fa      	ldrb	r2, [r7, #3]
 8009c22:	4611      	mov	r1, r2
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	4798      	blx	r3
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b084      	sub	sp, #16
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	78fa      	ldrb	r2, [r7, #3]
 8009c50:	4611      	mov	r1, r2
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	4798      	blx	r3
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d001      	beq.n	8009c60 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b084      	sub	sp, #16
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f001 f932 	bl	800aee6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009c90:	461a      	mov	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c9e:	f003 031f 	and.w	r3, r3, #31
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d01a      	beq.n	8009cdc <USBD_LL_SetupStage+0x72>
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d822      	bhi.n	8009cf0 <USBD_LL_SetupStage+0x86>
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d002      	beq.n	8009cb4 <USBD_LL_SetupStage+0x4a>
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d00a      	beq.n	8009cc8 <USBD_LL_SetupStage+0x5e>
 8009cb2:	e01d      	b.n	8009cf0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009cba:	4619      	mov	r1, r3
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fb5f 	bl	800a380 <USBD_StdDevReq>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8009cc6:	e020      	b.n	8009d0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009cce:	4619      	mov	r1, r3
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fbc7 	bl	800a464 <USBD_StdItfReq>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	73fb      	strb	r3, [r7, #15]
      break;
 8009cda:	e016      	b.n	8009d0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fc29 	bl	800a53c <USBD_StdEPReq>
 8009cea:	4603      	mov	r3, r0
 8009cec:	73fb      	strb	r3, [r7, #15]
      break;
 8009cee:	e00c      	b.n	8009d0a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009cf6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f001 fe7e 	bl	800ba00 <USBD_LL_StallEP>
 8009d04:	4603      	mov	r3, r0
 8009d06:	73fb      	strb	r3, [r7, #15]
      break;
 8009d08:	bf00      	nop
  }

  return ret;
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	607a      	str	r2, [r7, #4]
 8009d20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009d26:	7afb      	ldrb	r3, [r7, #11]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d16e      	bne.n	8009e0a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009d32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	f040 8098 	bne.w	8009e70 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	689a      	ldr	r2, [r3, #8]
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d913      	bls.n	8009d74 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	689a      	ldr	r2, [r3, #8]
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	1ad2      	subs	r2, r2, r3
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	68da      	ldr	r2, [r3, #12]
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	4293      	cmp	r3, r2
 8009d64:	bf28      	it	cs
 8009d66:	4613      	movcs	r3, r2
 8009d68:	461a      	mov	r2, r3
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f001 f9ae 	bl	800b0ce <USBD_CtlContinueRx>
 8009d72:	e07d      	b.n	8009e70 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d7a:	f003 031f 	and.w	r3, r3, #31
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d014      	beq.n	8009dac <USBD_LL_DataOutStage+0x98>
 8009d82:	2b02      	cmp	r3, #2
 8009d84:	d81d      	bhi.n	8009dc2 <USBD_LL_DataOutStage+0xae>
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d002      	beq.n	8009d90 <USBD_LL_DataOutStage+0x7c>
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d003      	beq.n	8009d96 <USBD_LL_DataOutStage+0x82>
 8009d8e:	e018      	b.n	8009dc2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009d90:	2300      	movs	r3, #0
 8009d92:	75bb      	strb	r3, [r7, #22]
            break;
 8009d94:	e018      	b.n	8009dc8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	4619      	mov	r1, r3
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 fa5e 	bl	800a262 <USBD_CoreFindIF>
 8009da6:	4603      	mov	r3, r0
 8009da8:	75bb      	strb	r3, [r7, #22]
            break;
 8009daa:	e00d      	b.n	8009dc8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	4619      	mov	r1, r3
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 fa60 	bl	800a27c <USBD_CoreFindEP>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	75bb      	strb	r3, [r7, #22]
            break;
 8009dc0:	e002      	b.n	8009dc8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	75bb      	strb	r3, [r7, #22]
            break;
 8009dc6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009dc8:	7dbb      	ldrb	r3, [r7, #22]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d119      	bne.n	8009e02 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2b03      	cmp	r3, #3
 8009dd8:	d113      	bne.n	8009e02 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009dda:	7dba      	ldrb	r2, [r7, #22]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	32ae      	adds	r2, #174	; 0xae
 8009de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00b      	beq.n	8009e02 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009dea:	7dba      	ldrb	r2, [r7, #22]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009df2:	7dba      	ldrb	r2, [r7, #22]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	32ae      	adds	r2, #174	; 0xae
 8009df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f001 f974 	bl	800b0f0 <USBD_CtlSendStatus>
 8009e08:	e032      	b.n	8009e70 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009e0a:	7afb      	ldrb	r3, [r7, #11]
 8009e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	4619      	mov	r1, r3
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f000 fa31 	bl	800a27c <USBD_CoreFindEP>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e1e:	7dbb      	ldrb	r3, [r7, #22]
 8009e20:	2bff      	cmp	r3, #255	; 0xff
 8009e22:	d025      	beq.n	8009e70 <USBD_LL_DataOutStage+0x15c>
 8009e24:	7dbb      	ldrb	r3, [r7, #22]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d122      	bne.n	8009e70 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d117      	bne.n	8009e66 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009e36:	7dba      	ldrb	r2, [r7, #22]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	32ae      	adds	r2, #174	; 0xae
 8009e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00f      	beq.n	8009e66 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009e46:	7dba      	ldrb	r2, [r7, #22]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009e4e:	7dba      	ldrb	r2, [r7, #22]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	32ae      	adds	r2, #174	; 0xae
 8009e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	7afa      	ldrb	r2, [r7, #11]
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	4798      	blx	r3
 8009e62:	4603      	mov	r3, r0
 8009e64:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009e6c:	7dfb      	ldrb	r3, [r7, #23]
 8009e6e:	e000      	b.n	8009e72 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b086      	sub	sp, #24
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	460b      	mov	r3, r1
 8009e84:	607a      	str	r2, [r7, #4]
 8009e86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009e88:	7afb      	ldrb	r3, [r7, #11]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d16f      	bne.n	8009f6e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3314      	adds	r3, #20
 8009e92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d15a      	bne.n	8009f54 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	689a      	ldr	r2, [r3, #8]
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d914      	bls.n	8009ed4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	689a      	ldr	r2, [r3, #8]
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	1ad2      	subs	r2, r2, r3
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f001 f8d6 	bl	800b072 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	2200      	movs	r2, #0
 8009eca:	2100      	movs	r1, #0
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f001 fe41 	bl	800bb54 <USBD_LL_PrepareReceive>
 8009ed2:	e03f      	b.n	8009f54 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	68da      	ldr	r2, [r3, #12]
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d11c      	bne.n	8009f1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	685a      	ldr	r2, [r3, #4]
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d316      	bcc.n	8009f1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	685a      	ldr	r2, [r3, #4]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d20f      	bcs.n	8009f1a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009efa:	2200      	movs	r2, #0
 8009efc:	2100      	movs	r1, #0
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f001 f8b7 	bl	800b072 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	2200      	movs	r2, #0
 8009f10:	2100      	movs	r1, #0
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f001 fe1e 	bl	800bb54 <USBD_LL_PrepareReceive>
 8009f18:	e01c      	b.n	8009f54 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	d10f      	bne.n	8009f46 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d009      	beq.n	8009f46 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f46:	2180      	movs	r1, #128	; 0x80
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f001 fd59 	bl	800ba00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f001 f8e1 	bl	800b116 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d03a      	beq.n	8009fd4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f7ff fe42 	bl	8009be8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009f6c:	e032      	b.n	8009fd4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009f6e:	7afb      	ldrb	r3, [r7, #11]
 8009f70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	4619      	mov	r1, r3
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f000 f97f 	bl	800a27c <USBD_CoreFindEP>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f82:	7dfb      	ldrb	r3, [r7, #23]
 8009f84:	2bff      	cmp	r3, #255	; 0xff
 8009f86:	d025      	beq.n	8009fd4 <USBD_LL_DataInStage+0x15a>
 8009f88:	7dfb      	ldrb	r3, [r7, #23]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d122      	bne.n	8009fd4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	d11c      	bne.n	8009fd4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009f9a:	7dfa      	ldrb	r2, [r7, #23]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	32ae      	adds	r2, #174	; 0xae
 8009fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d014      	beq.n	8009fd4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009faa:	7dfa      	ldrb	r2, [r7, #23]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009fb2:	7dfa      	ldrb	r2, [r7, #23]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	32ae      	adds	r2, #174	; 0xae
 8009fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	7afa      	ldrb	r2, [r7, #11]
 8009fc0:	4611      	mov	r1, r2
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	4798      	blx	r3
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009fca:	7dbb      	ldrb	r3, [r7, #22]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d001      	beq.n	8009fd4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009fd0:	7dbb      	ldrb	r3, [r7, #22]
 8009fd2:	e000      	b.n	8009fd6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3718      	adds	r7, #24
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b084      	sub	sp, #16
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a016:	2b00      	cmp	r3, #0
 800a018:	d014      	beq.n	800a044 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00e      	beq.n	800a044 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	6852      	ldr	r2, [r2, #4]
 800a032:	b2d2      	uxtb	r2, r2
 800a034:	4611      	mov	r1, r2
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	4798      	blx	r3
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a040:	2303      	movs	r3, #3
 800a042:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a044:	2340      	movs	r3, #64	; 0x40
 800a046:	2200      	movs	r2, #0
 800a048:	2100      	movs	r1, #0
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f001 fc93 	bl	800b976 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2240      	movs	r2, #64	; 0x40
 800a05c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a060:	2340      	movs	r3, #64	; 0x40
 800a062:	2200      	movs	r2, #0
 800a064:	2180      	movs	r1, #128	; 0x80
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f001 fc85 	bl	800b976 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2240      	movs	r2, #64	; 0x40
 800a076:	621a      	str	r2, [r3, #32]

  return ret;
 800a078:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a082:	b480      	push	{r7}
 800a084:	b083      	sub	sp, #12
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	460b      	mov	r3, r1
 800a08c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	78fa      	ldrb	r2, [r7, #3]
 800a092:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	370c      	adds	r7, #12
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a0a2:	b480      	push	{r7}
 800a0a4:	b083      	sub	sp, #12
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2204      	movs	r2, #4
 800a0bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	370c      	adds	r7, #12
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b083      	sub	sp, #12
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d106      	bne.n	800a0f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a0e8:	b2da      	uxtb	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	370c      	adds	r7, #12
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b082      	sub	sp, #8
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	2b03      	cmp	r3, #3
 800a110:	d110      	bne.n	800a134 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00b      	beq.n	800a134 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a122:	69db      	ldr	r3, [r3, #28]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d005      	beq.n	800a134 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a12e:	69db      	ldr	r3, [r3, #28]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b082      	sub	sp, #8
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	460b      	mov	r3, r1
 800a148:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	32ae      	adds	r2, #174	; 0xae
 800a154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d101      	bne.n	800a160 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a15c:	2303      	movs	r3, #3
 800a15e:	e01c      	b.n	800a19a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a166:	b2db      	uxtb	r3, r3
 800a168:	2b03      	cmp	r3, #3
 800a16a:	d115      	bne.n	800a198 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	32ae      	adds	r2, #174	; 0xae
 800a176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17a:	6a1b      	ldr	r3, [r3, #32]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00b      	beq.n	800a198 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	32ae      	adds	r2, #174	; 0xae
 800a18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	78fa      	ldrb	r2, [r7, #3]
 800a192:	4611      	mov	r1, r2
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b082      	sub	sp, #8
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	32ae      	adds	r2, #174	; 0xae
 800a1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a1c0:	2303      	movs	r3, #3
 800a1c2:	e01c      	b.n	800a1fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	d115      	bne.n	800a1fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	32ae      	adds	r2, #174	; 0xae
 800a1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00b      	beq.n	800a1fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	32ae      	adds	r2, #174	; 0xae
 800a1ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f4:	78fa      	ldrb	r2, [r7, #3]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a206:	b480      	push	{r7}
 800a208:	b083      	sub	sp, #12
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00e      	beq.n	800a258 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	6852      	ldr	r2, [r2, #4]
 800a246:	b2d2      	uxtb	r2, r2
 800a248:	4611      	mov	r1, r2
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	4798      	blx	r3
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d001      	beq.n	800a258 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a254:	2303      	movs	r3, #3
 800a256:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a258:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a262:	b480      	push	{r7}
 800a264:	b083      	sub	sp, #12
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	460b      	mov	r3, r1
 800a26c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a26e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a270:	4618      	mov	r0, r3
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	460b      	mov	r3, r1
 800a286:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a288:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	370c      	adds	r7, #12
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b086      	sub	sp, #24
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	460b      	mov	r3, r1
 800a2a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	885b      	ldrh	r3, [r3, #2]
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d920      	bls.n	800a300 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a2c6:	e013      	b.n	800a2f0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a2c8:	f107 030a 	add.w	r3, r7, #10
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6978      	ldr	r0, [r7, #20]
 800a2d0:	f000 f81b 	bl	800a30a <USBD_GetNextDesc>
 800a2d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	785b      	ldrb	r3, [r3, #1]
 800a2da:	2b05      	cmp	r3, #5
 800a2dc:	d108      	bne.n	800a2f0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	789b      	ldrb	r3, [r3, #2]
 800a2e6:	78fa      	ldrb	r2, [r7, #3]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d008      	beq.n	800a2fe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	885b      	ldrh	r3, [r3, #2]
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	897b      	ldrh	r3, [r7, #10]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d8e5      	bhi.n	800a2c8 <USBD_GetEpDesc+0x32>
 800a2fc:	e000      	b.n	800a300 <USBD_GetEpDesc+0x6a>
          break;
 800a2fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a300:	693b      	ldr	r3, [r7, #16]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3718      	adds	r7, #24
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b085      	sub	sp, #20
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
 800a312:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	881a      	ldrh	r2, [r3, #0]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	b29b      	uxth	r3, r3
 800a322:	4413      	add	r3, r2
 800a324:	b29a      	uxth	r2, r3
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	461a      	mov	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	4413      	add	r3, r2
 800a334:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a336:	68fb      	ldr	r3, [r7, #12]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3714      	adds	r7, #20
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a344:	b480      	push	{r7}
 800a346:	b087      	sub	sp, #28
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	3301      	adds	r3, #1
 800a35a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a362:	8a3b      	ldrh	r3, [r7, #16]
 800a364:	021b      	lsls	r3, r3, #8
 800a366:	b21a      	sxth	r2, r3
 800a368:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	b21b      	sxth	r3, r3
 800a370:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a372:	89fb      	ldrh	r3, [r7, #14]
}
 800a374:	4618      	mov	r0, r3
 800a376:	371c      	adds	r7, #28
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a396:	2b40      	cmp	r3, #64	; 0x40
 800a398:	d005      	beq.n	800a3a6 <USBD_StdDevReq+0x26>
 800a39a:	2b40      	cmp	r3, #64	; 0x40
 800a39c:	d857      	bhi.n	800a44e <USBD_StdDevReq+0xce>
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00f      	beq.n	800a3c2 <USBD_StdDevReq+0x42>
 800a3a2:	2b20      	cmp	r3, #32
 800a3a4:	d153      	bne.n	800a44e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	32ae      	adds	r2, #174	; 0xae
 800a3b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	4798      	blx	r3
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73fb      	strb	r3, [r7, #15]
      break;
 800a3c0:	e04a      	b.n	800a458 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	785b      	ldrb	r3, [r3, #1]
 800a3c6:	2b09      	cmp	r3, #9
 800a3c8:	d83b      	bhi.n	800a442 <USBD_StdDevReq+0xc2>
 800a3ca:	a201      	add	r2, pc, #4	; (adr r2, 800a3d0 <USBD_StdDevReq+0x50>)
 800a3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d0:	0800a425 	.word	0x0800a425
 800a3d4:	0800a439 	.word	0x0800a439
 800a3d8:	0800a443 	.word	0x0800a443
 800a3dc:	0800a42f 	.word	0x0800a42f
 800a3e0:	0800a443 	.word	0x0800a443
 800a3e4:	0800a403 	.word	0x0800a403
 800a3e8:	0800a3f9 	.word	0x0800a3f9
 800a3ec:	0800a443 	.word	0x0800a443
 800a3f0:	0800a41b 	.word	0x0800a41b
 800a3f4:	0800a40d 	.word	0x0800a40d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a3f8:	6839      	ldr	r1, [r7, #0]
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fa3c 	bl	800a878 <USBD_GetDescriptor>
          break;
 800a400:	e024      	b.n	800a44c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 fbcb 	bl	800aba0 <USBD_SetAddress>
          break;
 800a40a:	e01f      	b.n	800a44c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a40c:	6839      	ldr	r1, [r7, #0]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fc0a 	bl	800ac28 <USBD_SetConfig>
 800a414:	4603      	mov	r3, r0
 800a416:	73fb      	strb	r3, [r7, #15]
          break;
 800a418:	e018      	b.n	800a44c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a41a:	6839      	ldr	r1, [r7, #0]
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 fcad 	bl	800ad7c <USBD_GetConfig>
          break;
 800a422:	e013      	b.n	800a44c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fcde 	bl	800ade8 <USBD_GetStatus>
          break;
 800a42c:	e00e      	b.n	800a44c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a42e:	6839      	ldr	r1, [r7, #0]
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 fd0d 	bl	800ae50 <USBD_SetFeature>
          break;
 800a436:	e009      	b.n	800a44c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a438:	6839      	ldr	r1, [r7, #0]
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fd31 	bl	800aea2 <USBD_ClrFeature>
          break;
 800a440:	e004      	b.n	800a44c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a442:	6839      	ldr	r1, [r7, #0]
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fd88 	bl	800af5a <USBD_CtlError>
          break;
 800a44a:	bf00      	nop
      }
      break;
 800a44c:	e004      	b.n	800a458 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 fd82 	bl	800af5a <USBD_CtlError>
      break;
 800a456:	bf00      	nop
  }

  return ret;
 800a458:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop

0800a464 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a46e:	2300      	movs	r3, #0
 800a470:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a47a:	2b40      	cmp	r3, #64	; 0x40
 800a47c:	d005      	beq.n	800a48a <USBD_StdItfReq+0x26>
 800a47e:	2b40      	cmp	r3, #64	; 0x40
 800a480:	d852      	bhi.n	800a528 <USBD_StdItfReq+0xc4>
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <USBD_StdItfReq+0x26>
 800a486:	2b20      	cmp	r3, #32
 800a488:	d14e      	bne.n	800a528 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a490:	b2db      	uxtb	r3, r3
 800a492:	3b01      	subs	r3, #1
 800a494:	2b02      	cmp	r3, #2
 800a496:	d840      	bhi.n	800a51a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	889b      	ldrh	r3, [r3, #4]
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d836      	bhi.n	800a510 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	889b      	ldrh	r3, [r3, #4]
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7ff fed9 	bl	800a262 <USBD_CoreFindIF>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4b4:	7bbb      	ldrb	r3, [r7, #14]
 800a4b6:	2bff      	cmp	r3, #255	; 0xff
 800a4b8:	d01d      	beq.n	800a4f6 <USBD_StdItfReq+0x92>
 800a4ba:	7bbb      	ldrb	r3, [r7, #14]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d11a      	bne.n	800a4f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a4c0:	7bba      	ldrb	r2, [r7, #14]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	32ae      	adds	r2, #174	; 0xae
 800a4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00f      	beq.n	800a4f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a4d0:	7bba      	ldrb	r2, [r7, #14]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a4d8:	7bba      	ldrb	r2, [r7, #14]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	32ae      	adds	r2, #174	; 0xae
 800a4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	6839      	ldr	r1, [r7, #0]
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	4798      	blx	r3
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a4ee:	e004      	b.n	800a4fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a4f4:	e001      	b.n	800a4fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	88db      	ldrh	r3, [r3, #6]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d110      	bne.n	800a524 <USBD_StdItfReq+0xc0>
 800a502:	7bfb      	ldrb	r3, [r7, #15]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10d      	bne.n	800a524 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 fdf1 	bl	800b0f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a50e:	e009      	b.n	800a524 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a510:	6839      	ldr	r1, [r7, #0]
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 fd21 	bl	800af5a <USBD_CtlError>
          break;
 800a518:	e004      	b.n	800a524 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a51a:	6839      	ldr	r1, [r7, #0]
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fd1c 	bl	800af5a <USBD_CtlError>
          break;
 800a522:	e000      	b.n	800a526 <USBD_StdItfReq+0xc2>
          break;
 800a524:	bf00      	nop
      }
      break;
 800a526:	e004      	b.n	800a532 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fd15 	bl	800af5a <USBD_CtlError>
      break;
 800a530:	bf00      	nop
  }

  return ret;
 800a532:	7bfb      	ldrb	r3, [r7, #15]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	889b      	ldrh	r3, [r3, #4]
 800a54e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a558:	2b40      	cmp	r3, #64	; 0x40
 800a55a:	d007      	beq.n	800a56c <USBD_StdEPReq+0x30>
 800a55c:	2b40      	cmp	r3, #64	; 0x40
 800a55e:	f200 817f 	bhi.w	800a860 <USBD_StdEPReq+0x324>
 800a562:	2b00      	cmp	r3, #0
 800a564:	d02a      	beq.n	800a5bc <USBD_StdEPReq+0x80>
 800a566:	2b20      	cmp	r3, #32
 800a568:	f040 817a 	bne.w	800a860 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
 800a56e:	4619      	mov	r1, r3
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f7ff fe83 	bl	800a27c <USBD_CoreFindEP>
 800a576:	4603      	mov	r3, r0
 800a578:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a57a:	7b7b      	ldrb	r3, [r7, #13]
 800a57c:	2bff      	cmp	r3, #255	; 0xff
 800a57e:	f000 8174 	beq.w	800a86a <USBD_StdEPReq+0x32e>
 800a582:	7b7b      	ldrb	r3, [r7, #13]
 800a584:	2b00      	cmp	r3, #0
 800a586:	f040 8170 	bne.w	800a86a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a58a:	7b7a      	ldrb	r2, [r7, #13]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a592:	7b7a      	ldrb	r2, [r7, #13]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	32ae      	adds	r2, #174	; 0xae
 800a598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 8163 	beq.w	800a86a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a5a4:	7b7a      	ldrb	r2, [r7, #13]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	32ae      	adds	r2, #174	; 0xae
 800a5aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	6839      	ldr	r1, [r7, #0]
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	4798      	blx	r3
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a5ba:	e156      	b.n	800a86a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	785b      	ldrb	r3, [r3, #1]
 800a5c0:	2b03      	cmp	r3, #3
 800a5c2:	d008      	beq.n	800a5d6 <USBD_StdEPReq+0x9a>
 800a5c4:	2b03      	cmp	r3, #3
 800a5c6:	f300 8145 	bgt.w	800a854 <USBD_StdEPReq+0x318>
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f000 809b 	beq.w	800a706 <USBD_StdEPReq+0x1ca>
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d03c      	beq.n	800a64e <USBD_StdEPReq+0x112>
 800a5d4:	e13e      	b.n	800a854 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d002      	beq.n	800a5e8 <USBD_StdEPReq+0xac>
 800a5e2:	2b03      	cmp	r3, #3
 800a5e4:	d016      	beq.n	800a614 <USBD_StdEPReq+0xd8>
 800a5e6:	e02c      	b.n	800a642 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5e8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00d      	beq.n	800a60a <USBD_StdEPReq+0xce>
 800a5ee:	7bbb      	ldrb	r3, [r7, #14]
 800a5f0:	2b80      	cmp	r3, #128	; 0x80
 800a5f2:	d00a      	beq.n	800a60a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5f4:	7bbb      	ldrb	r3, [r7, #14]
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f001 fa01 	bl	800ba00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5fe:	2180      	movs	r1, #128	; 0x80
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f001 f9fd 	bl	800ba00 <USBD_LL_StallEP>
 800a606:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a608:	e020      	b.n	800a64c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fca4 	bl	800af5a <USBD_CtlError>
              break;
 800a612:	e01b      	b.n	800a64c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	885b      	ldrh	r3, [r3, #2]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10e      	bne.n	800a63a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a61c:	7bbb      	ldrb	r3, [r7, #14]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00b      	beq.n	800a63a <USBD_StdEPReq+0xfe>
 800a622:	7bbb      	ldrb	r3, [r7, #14]
 800a624:	2b80      	cmp	r3, #128	; 0x80
 800a626:	d008      	beq.n	800a63a <USBD_StdEPReq+0xfe>
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	88db      	ldrh	r3, [r3, #6]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d104      	bne.n	800a63a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a630:	7bbb      	ldrb	r3, [r7, #14]
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f001 f9e3 	bl	800ba00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fd58 	bl	800b0f0 <USBD_CtlSendStatus>

              break;
 800a640:	e004      	b.n	800a64c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a642:	6839      	ldr	r1, [r7, #0]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fc88 	bl	800af5a <USBD_CtlError>
              break;
 800a64a:	bf00      	nop
          }
          break;
 800a64c:	e107      	b.n	800a85e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a654:	b2db      	uxtb	r3, r3
 800a656:	2b02      	cmp	r3, #2
 800a658:	d002      	beq.n	800a660 <USBD_StdEPReq+0x124>
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d016      	beq.n	800a68c <USBD_StdEPReq+0x150>
 800a65e:	e04b      	b.n	800a6f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a660:	7bbb      	ldrb	r3, [r7, #14]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00d      	beq.n	800a682 <USBD_StdEPReq+0x146>
 800a666:	7bbb      	ldrb	r3, [r7, #14]
 800a668:	2b80      	cmp	r3, #128	; 0x80
 800a66a:	d00a      	beq.n	800a682 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a66c:	7bbb      	ldrb	r3, [r7, #14]
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f001 f9c5 	bl	800ba00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a676:	2180      	movs	r1, #128	; 0x80
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f001 f9c1 	bl	800ba00 <USBD_LL_StallEP>
 800a67e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a680:	e040      	b.n	800a704 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 fc68 	bl	800af5a <USBD_CtlError>
              break;
 800a68a:	e03b      	b.n	800a704 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	885b      	ldrh	r3, [r3, #2]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d136      	bne.n	800a702 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a694:	7bbb      	ldrb	r3, [r7, #14]
 800a696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d004      	beq.n	800a6a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a69e:	7bbb      	ldrb	r3, [r7, #14]
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f001 f9cb 	bl	800ba3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fd21 	bl	800b0f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a6ae:	7bbb      	ldrb	r3, [r7, #14]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7ff fde2 	bl	800a27c <USBD_CoreFindEP>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6bc:	7b7b      	ldrb	r3, [r7, #13]
 800a6be:	2bff      	cmp	r3, #255	; 0xff
 800a6c0:	d01f      	beq.n	800a702 <USBD_StdEPReq+0x1c6>
 800a6c2:	7b7b      	ldrb	r3, [r7, #13]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d11c      	bne.n	800a702 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a6c8:	7b7a      	ldrb	r2, [r7, #13]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a6d0:	7b7a      	ldrb	r2, [r7, #13]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	32ae      	adds	r2, #174	; 0xae
 800a6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d010      	beq.n	800a702 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a6e0:	7b7a      	ldrb	r2, [r7, #13]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	32ae      	adds	r2, #174	; 0xae
 800a6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	6839      	ldr	r1, [r7, #0]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	4798      	blx	r3
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a6f6:	e004      	b.n	800a702 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fc2d 	bl	800af5a <USBD_CtlError>
              break;
 800a700:	e000      	b.n	800a704 <USBD_StdEPReq+0x1c8>
              break;
 800a702:	bf00      	nop
          }
          break;
 800a704:	e0ab      	b.n	800a85e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d002      	beq.n	800a718 <USBD_StdEPReq+0x1dc>
 800a712:	2b03      	cmp	r3, #3
 800a714:	d032      	beq.n	800a77c <USBD_StdEPReq+0x240>
 800a716:	e097      	b.n	800a848 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a718:	7bbb      	ldrb	r3, [r7, #14]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d007      	beq.n	800a72e <USBD_StdEPReq+0x1f2>
 800a71e:	7bbb      	ldrb	r3, [r7, #14]
 800a720:	2b80      	cmp	r3, #128	; 0x80
 800a722:	d004      	beq.n	800a72e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a724:	6839      	ldr	r1, [r7, #0]
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 fc17 	bl	800af5a <USBD_CtlError>
                break;
 800a72c:	e091      	b.n	800a852 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a72e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a732:	2b00      	cmp	r3, #0
 800a734:	da0b      	bge.n	800a74e <USBD_StdEPReq+0x212>
 800a736:	7bbb      	ldrb	r3, [r7, #14]
 800a738:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a73c:	4613      	mov	r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	3310      	adds	r3, #16
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	4413      	add	r3, r2
 800a74a:	3304      	adds	r3, #4
 800a74c:	e00b      	b.n	800a766 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a74e:	7bbb      	ldrb	r3, [r7, #14]
 800a750:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a754:	4613      	mov	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	4413      	add	r3, r2
 800a764:	3304      	adds	r3, #4
 800a766:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	2200      	movs	r2, #0
 800a76c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	2202      	movs	r2, #2
 800a772:	4619      	mov	r1, r3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 fc61 	bl	800b03c <USBD_CtlSendData>
              break;
 800a77a:	e06a      	b.n	800a852 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a77c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a780:	2b00      	cmp	r3, #0
 800a782:	da11      	bge.n	800a7a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a784:	7bbb      	ldrb	r3, [r7, #14]
 800a786:	f003 020f 	and.w	r2, r3, #15
 800a78a:	6879      	ldr	r1, [r7, #4]
 800a78c:	4613      	mov	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	440b      	add	r3, r1
 800a796:	3324      	adds	r3, #36	; 0x24
 800a798:	881b      	ldrh	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d117      	bne.n	800a7ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a79e:	6839      	ldr	r1, [r7, #0]
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 fbda 	bl	800af5a <USBD_CtlError>
                  break;
 800a7a6:	e054      	b.n	800a852 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a7a8:	7bbb      	ldrb	r3, [r7, #14]
 800a7aa:	f003 020f 	and.w	r2, r3, #15
 800a7ae:	6879      	ldr	r1, [r7, #4]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4413      	add	r3, r2
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	440b      	add	r3, r1
 800a7ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a7be:	881b      	ldrh	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d104      	bne.n	800a7ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fbc7 	bl	800af5a <USBD_CtlError>
                  break;
 800a7cc:	e041      	b.n	800a852 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	da0b      	bge.n	800a7ee <USBD_StdEPReq+0x2b2>
 800a7d6:	7bbb      	ldrb	r3, [r7, #14]
 800a7d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7dc:	4613      	mov	r3, r2
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	4413      	add	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	3310      	adds	r3, #16
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	3304      	adds	r3, #4
 800a7ec:	e00b      	b.n	800a806 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7ee:	7bbb      	ldrb	r3, [r7, #14]
 800a7f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	4413      	add	r3, r2
 800a804:	3304      	adds	r3, #4
 800a806:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d002      	beq.n	800a814 <USBD_StdEPReq+0x2d8>
 800a80e:	7bbb      	ldrb	r3, [r7, #14]
 800a810:	2b80      	cmp	r3, #128	; 0x80
 800a812:	d103      	bne.n	800a81c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	2200      	movs	r2, #0
 800a818:	601a      	str	r2, [r3, #0]
 800a81a:	e00e      	b.n	800a83a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
 800a81e:	4619      	mov	r1, r3
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f001 f92b 	bl	800ba7c <USBD_LL_IsStallEP>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	2201      	movs	r2, #1
 800a830:	601a      	str	r2, [r3, #0]
 800a832:	e002      	b.n	800a83a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	2200      	movs	r2, #0
 800a838:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	2202      	movs	r2, #2
 800a83e:	4619      	mov	r1, r3
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 fbfb 	bl	800b03c <USBD_CtlSendData>
              break;
 800a846:	e004      	b.n	800a852 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a848:	6839      	ldr	r1, [r7, #0]
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fb85 	bl	800af5a <USBD_CtlError>
              break;
 800a850:	bf00      	nop
          }
          break;
 800a852:	e004      	b.n	800a85e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fb7f 	bl	800af5a <USBD_CtlError>
          break;
 800a85c:	bf00      	nop
      }
      break;
 800a85e:	e005      	b.n	800a86c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fb79 	bl	800af5a <USBD_CtlError>
      break;
 800a868:	e000      	b.n	800a86c <USBD_StdEPReq+0x330>
      break;
 800a86a:	bf00      	nop
  }

  return ret;
 800a86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
	...

0800a878 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a882:	2300      	movs	r3, #0
 800a884:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a886:	2300      	movs	r3, #0
 800a888:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a88a:	2300      	movs	r3, #0
 800a88c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	885b      	ldrh	r3, [r3, #2]
 800a892:	0a1b      	lsrs	r3, r3, #8
 800a894:	b29b      	uxth	r3, r3
 800a896:	3b01      	subs	r3, #1
 800a898:	2b0e      	cmp	r3, #14
 800a89a:	f200 8152 	bhi.w	800ab42 <USBD_GetDescriptor+0x2ca>
 800a89e:	a201      	add	r2, pc, #4	; (adr r2, 800a8a4 <USBD_GetDescriptor+0x2c>)
 800a8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a4:	0800a915 	.word	0x0800a915
 800a8a8:	0800a92d 	.word	0x0800a92d
 800a8ac:	0800a96d 	.word	0x0800a96d
 800a8b0:	0800ab43 	.word	0x0800ab43
 800a8b4:	0800ab43 	.word	0x0800ab43
 800a8b8:	0800aae3 	.word	0x0800aae3
 800a8bc:	0800ab0f 	.word	0x0800ab0f
 800a8c0:	0800ab43 	.word	0x0800ab43
 800a8c4:	0800ab43 	.word	0x0800ab43
 800a8c8:	0800ab43 	.word	0x0800ab43
 800a8cc:	0800ab43 	.word	0x0800ab43
 800a8d0:	0800ab43 	.word	0x0800ab43
 800a8d4:	0800ab43 	.word	0x0800ab43
 800a8d8:	0800ab43 	.word	0x0800ab43
 800a8dc:	0800a8e1 	.word	0x0800a8e1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8e6:	69db      	ldr	r3, [r3, #28]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00b      	beq.n	800a904 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8f2:	69db      	ldr	r3, [r3, #28]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	7c12      	ldrb	r2, [r2, #16]
 800a8f8:	f107 0108 	add.w	r1, r7, #8
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	4798      	blx	r3
 800a900:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a902:	e126      	b.n	800ab52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fb27 	bl	800af5a <USBD_CtlError>
        err++;
 800a90c:	7afb      	ldrb	r3, [r7, #11]
 800a90e:	3301      	adds	r3, #1
 800a910:	72fb      	strb	r3, [r7, #11]
      break;
 800a912:	e11e      	b.n	800ab52 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	7c12      	ldrb	r2, [r2, #16]
 800a920:	f107 0108 	add.w	r1, r7, #8
 800a924:	4610      	mov	r0, r2
 800a926:	4798      	blx	r3
 800a928:	60f8      	str	r0, [r7, #12]
      break;
 800a92a:	e112      	b.n	800ab52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	7c1b      	ldrb	r3, [r3, #16]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d10d      	bne.n	800a950 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a93c:	f107 0208 	add.w	r2, r7, #8
 800a940:	4610      	mov	r0, r2
 800a942:	4798      	blx	r3
 800a944:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	3301      	adds	r3, #1
 800a94a:	2202      	movs	r2, #2
 800a94c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a94e:	e100      	b.n	800ab52 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a958:	f107 0208 	add.w	r2, r7, #8
 800a95c:	4610      	mov	r0, r2
 800a95e:	4798      	blx	r3
 800a960:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	3301      	adds	r3, #1
 800a966:	2202      	movs	r2, #2
 800a968:	701a      	strb	r2, [r3, #0]
      break;
 800a96a:	e0f2      	b.n	800ab52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	885b      	ldrh	r3, [r3, #2]
 800a970:	b2db      	uxtb	r3, r3
 800a972:	2b05      	cmp	r3, #5
 800a974:	f200 80ac 	bhi.w	800aad0 <USBD_GetDescriptor+0x258>
 800a978:	a201      	add	r2, pc, #4	; (adr r2, 800a980 <USBD_GetDescriptor+0x108>)
 800a97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97e:	bf00      	nop
 800a980:	0800a999 	.word	0x0800a999
 800a984:	0800a9cd 	.word	0x0800a9cd
 800a988:	0800aa01 	.word	0x0800aa01
 800a98c:	0800aa35 	.word	0x0800aa35
 800a990:	0800aa69 	.word	0x0800aa69
 800a994:	0800aa9d 	.word	0x0800aa9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00b      	beq.n	800a9bc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	7c12      	ldrb	r2, [r2, #16]
 800a9b0:	f107 0108 	add.w	r1, r7, #8
 800a9b4:	4610      	mov	r0, r2
 800a9b6:	4798      	blx	r3
 800a9b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9ba:	e091      	b.n	800aae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9bc:	6839      	ldr	r1, [r7, #0]
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 facb 	bl	800af5a <USBD_CtlError>
            err++;
 800a9c4:	7afb      	ldrb	r3, [r7, #11]
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a9ca:	e089      	b.n	800aae0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00b      	beq.n	800a9f0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	7c12      	ldrb	r2, [r2, #16]
 800a9e4:	f107 0108 	add.w	r1, r7, #8
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	4798      	blx	r3
 800a9ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9ee:	e077      	b.n	800aae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fab1 	bl	800af5a <USBD_CtlError>
            err++;
 800a9f8:	7afb      	ldrb	r3, [r7, #11]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a9fe:	e06f      	b.n	800aae0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d00b      	beq.n	800aa24 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	7c12      	ldrb	r2, [r2, #16]
 800aa18:	f107 0108 	add.w	r1, r7, #8
 800aa1c:	4610      	mov	r0, r2
 800aa1e:	4798      	blx	r3
 800aa20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa22:	e05d      	b.n	800aae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 fa97 	bl	800af5a <USBD_CtlError>
            err++;
 800aa2c:	7afb      	ldrb	r3, [r7, #11]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	72fb      	strb	r3, [r7, #11]
          break;
 800aa32:	e055      	b.n	800aae0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00b      	beq.n	800aa58 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	7c12      	ldrb	r2, [r2, #16]
 800aa4c:	f107 0108 	add.w	r1, r7, #8
 800aa50:	4610      	mov	r0, r2
 800aa52:	4798      	blx	r3
 800aa54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa56:	e043      	b.n	800aae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa58:	6839      	ldr	r1, [r7, #0]
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 fa7d 	bl	800af5a <USBD_CtlError>
            err++;
 800aa60:	7afb      	ldrb	r3, [r7, #11]
 800aa62:	3301      	adds	r3, #1
 800aa64:	72fb      	strb	r3, [r7, #11]
          break;
 800aa66:	e03b      	b.n	800aae0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa6e:	695b      	ldr	r3, [r3, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00b      	beq.n	800aa8c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	7c12      	ldrb	r2, [r2, #16]
 800aa80:	f107 0108 	add.w	r1, r7, #8
 800aa84:	4610      	mov	r0, r2
 800aa86:	4798      	blx	r3
 800aa88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa8a:	e029      	b.n	800aae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fa63 	bl	800af5a <USBD_CtlError>
            err++;
 800aa94:	7afb      	ldrb	r3, [r7, #11]
 800aa96:	3301      	adds	r3, #1
 800aa98:	72fb      	strb	r3, [r7, #11]
          break;
 800aa9a:	e021      	b.n	800aae0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaa2:	699b      	ldr	r3, [r3, #24]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00b      	beq.n	800aac0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaae:	699b      	ldr	r3, [r3, #24]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	7c12      	ldrb	r2, [r2, #16]
 800aab4:	f107 0108 	add.w	r1, r7, #8
 800aab8:	4610      	mov	r0, r2
 800aaba:	4798      	blx	r3
 800aabc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aabe:	e00f      	b.n	800aae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aac0:	6839      	ldr	r1, [r7, #0]
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fa49 	bl	800af5a <USBD_CtlError>
            err++;
 800aac8:	7afb      	ldrb	r3, [r7, #11]
 800aaca:	3301      	adds	r3, #1
 800aacc:	72fb      	strb	r3, [r7, #11]
          break;
 800aace:	e007      	b.n	800aae0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aad0:	6839      	ldr	r1, [r7, #0]
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fa41 	bl	800af5a <USBD_CtlError>
          err++;
 800aad8:	7afb      	ldrb	r3, [r7, #11]
 800aada:	3301      	adds	r3, #1
 800aadc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aade:	bf00      	nop
      }
      break;
 800aae0:	e037      	b.n	800ab52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	7c1b      	ldrb	r3, [r3, #16]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d109      	bne.n	800aafe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf2:	f107 0208 	add.w	r2, r7, #8
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	4798      	blx	r3
 800aafa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aafc:	e029      	b.n	800ab52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aafe:	6839      	ldr	r1, [r7, #0]
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 fa2a 	bl	800af5a <USBD_CtlError>
        err++;
 800ab06:	7afb      	ldrb	r3, [r7, #11]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	72fb      	strb	r3, [r7, #11]
      break;
 800ab0c:	e021      	b.n	800ab52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	7c1b      	ldrb	r3, [r3, #16]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10d      	bne.n	800ab32 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab1e:	f107 0208 	add.w	r2, r7, #8
 800ab22:	4610      	mov	r0, r2
 800ab24:	4798      	blx	r3
 800ab26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	2207      	movs	r2, #7
 800ab2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab30:	e00f      	b.n	800ab52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ab32:	6839      	ldr	r1, [r7, #0]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fa10 	bl	800af5a <USBD_CtlError>
        err++;
 800ab3a:	7afb      	ldrb	r3, [r7, #11]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	72fb      	strb	r3, [r7, #11]
      break;
 800ab40:	e007      	b.n	800ab52 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ab42:	6839      	ldr	r1, [r7, #0]
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fa08 	bl	800af5a <USBD_CtlError>
      err++;
 800ab4a:	7afb      	ldrb	r3, [r7, #11]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ab50:	bf00      	nop
  }

  if (err != 0U)
 800ab52:	7afb      	ldrb	r3, [r7, #11]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d11e      	bne.n	800ab96 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	88db      	ldrh	r3, [r3, #6]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d016      	beq.n	800ab8e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ab60:	893b      	ldrh	r3, [r7, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00e      	beq.n	800ab84 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	88da      	ldrh	r2, [r3, #6]
 800ab6a:	893b      	ldrh	r3, [r7, #8]
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	bf28      	it	cs
 800ab70:	4613      	movcs	r3, r2
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab76:	893b      	ldrh	r3, [r7, #8]
 800ab78:	461a      	mov	r2, r3
 800ab7a:	68f9      	ldr	r1, [r7, #12]
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 fa5d 	bl	800b03c <USBD_CtlSendData>
 800ab82:	e009      	b.n	800ab98 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ab84:	6839      	ldr	r1, [r7, #0]
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f9e7 	bl	800af5a <USBD_CtlError>
 800ab8c:	e004      	b.n	800ab98 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 faae 	bl	800b0f0 <USBD_CtlSendStatus>
 800ab94:	e000      	b.n	800ab98 <USBD_GetDescriptor+0x320>
    return;
 800ab96:	bf00      	nop
  }
}
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop

0800aba0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	889b      	ldrh	r3, [r3, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d131      	bne.n	800ac16 <USBD_SetAddress+0x76>
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	88db      	ldrh	r3, [r3, #6]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d12d      	bne.n	800ac16 <USBD_SetAddress+0x76>
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	885b      	ldrh	r3, [r3, #2]
 800abbe:	2b7f      	cmp	r3, #127	; 0x7f
 800abc0:	d829      	bhi.n	800ac16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	885b      	ldrh	r3, [r3, #2]
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b03      	cmp	r3, #3
 800abd8:	d104      	bne.n	800abe4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800abda:	6839      	ldr	r1, [r7, #0]
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 f9bc 	bl	800af5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abe2:	e01d      	b.n	800ac20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	7bfa      	ldrb	r2, [r7, #15]
 800abe8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800abec:	7bfb      	ldrb	r3, [r7, #15]
 800abee:	4619      	mov	r1, r3
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 ff6f 	bl	800bad4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fa7a 	bl	800b0f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d004      	beq.n	800ac0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2202      	movs	r2, #2
 800ac06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac0a:	e009      	b.n	800ac20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac14:	e004      	b.n	800ac20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac16:	6839      	ldr	r1, [r7, #0]
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 f99e 	bl	800af5a <USBD_CtlError>
  }
}
 800ac1e:	bf00      	nop
 800ac20:	bf00      	nop
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac32:	2300      	movs	r3, #0
 800ac34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	885b      	ldrh	r3, [r3, #2]
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	4b4e      	ldr	r3, [pc, #312]	; (800ad78 <USBD_SetConfig+0x150>)
 800ac3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac40:	4b4d      	ldr	r3, [pc, #308]	; (800ad78 <USBD_SetConfig+0x150>)
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d905      	bls.n	800ac54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 f985 	bl	800af5a <USBD_CtlError>
    return USBD_FAIL;
 800ac50:	2303      	movs	r3, #3
 800ac52:	e08c      	b.n	800ad6e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d002      	beq.n	800ac66 <USBD_SetConfig+0x3e>
 800ac60:	2b03      	cmp	r3, #3
 800ac62:	d029      	beq.n	800acb8 <USBD_SetConfig+0x90>
 800ac64:	e075      	b.n	800ad52 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ac66:	4b44      	ldr	r3, [pc, #272]	; (800ad78 <USBD_SetConfig+0x150>)
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d020      	beq.n	800acb0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ac6e:	4b42      	ldr	r3, [pc, #264]	; (800ad78 <USBD_SetConfig+0x150>)
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	461a      	mov	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac78:	4b3f      	ldr	r3, [pc, #252]	; (800ad78 <USBD_SetConfig+0x150>)
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7fe ffbd 	bl	8009bfe <USBD_SetClassConfig>
 800ac84:	4603      	mov	r3, r0
 800ac86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ac88:	7bfb      	ldrb	r3, [r7, #15]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d008      	beq.n	800aca0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ac8e:	6839      	ldr	r1, [r7, #0]
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f962 	bl	800af5a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2202      	movs	r2, #2
 800ac9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac9e:	e065      	b.n	800ad6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fa25 	bl	800b0f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2203      	movs	r2, #3
 800acaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800acae:	e05d      	b.n	800ad6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 fa1d 	bl	800b0f0 <USBD_CtlSendStatus>
      break;
 800acb6:	e059      	b.n	800ad6c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800acb8:	4b2f      	ldr	r3, [pc, #188]	; (800ad78 <USBD_SetConfig+0x150>)
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d112      	bne.n	800ace6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2202      	movs	r2, #2
 800acc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800acc8:	4b2b      	ldr	r3, [pc, #172]	; (800ad78 <USBD_SetConfig+0x150>)
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	461a      	mov	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800acd2:	4b29      	ldr	r3, [pc, #164]	; (800ad78 <USBD_SetConfig+0x150>)
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	4619      	mov	r1, r3
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f7fe ffac 	bl	8009c36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fa06 	bl	800b0f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ace4:	e042      	b.n	800ad6c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ace6:	4b24      	ldr	r3, [pc, #144]	; (800ad78 <USBD_SetConfig+0x150>)
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	461a      	mov	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d02a      	beq.n	800ad4a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	4619      	mov	r1, r3
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7fe ff9a 	bl	8009c36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ad02:	4b1d      	ldr	r3, [pc, #116]	; (800ad78 <USBD_SetConfig+0x150>)
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	461a      	mov	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad0c:	4b1a      	ldr	r3, [pc, #104]	; (800ad78 <USBD_SetConfig+0x150>)
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	4619      	mov	r1, r3
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f7fe ff73 	bl	8009bfe <USBD_SetClassConfig>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00f      	beq.n	800ad42 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 f918 	bl	800af5a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	4619      	mov	r1, r3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7fe ff7f 	bl	8009c36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2202      	movs	r2, #2
 800ad3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ad40:	e014      	b.n	800ad6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 f9d4 	bl	800b0f0 <USBD_CtlSendStatus>
      break;
 800ad48:	e010      	b.n	800ad6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 f9d0 	bl	800b0f0 <USBD_CtlSendStatus>
      break;
 800ad50:	e00c      	b.n	800ad6c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ad52:	6839      	ldr	r1, [r7, #0]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 f900 	bl	800af5a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad5a:	4b07      	ldr	r3, [pc, #28]	; (800ad78 <USBD_SetConfig+0x150>)
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7fe ff68 	bl	8009c36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ad66:	2303      	movs	r3, #3
 800ad68:	73fb      	strb	r3, [r7, #15]
      break;
 800ad6a:	bf00      	nop
  }

  return ret;
 800ad6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	20003d68 	.word	0x20003d68

0800ad7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	88db      	ldrh	r3, [r3, #6]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d004      	beq.n	800ad98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f8e2 	bl	800af5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad96:	e023      	b.n	800ade0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	dc02      	bgt.n	800adaa <USBD_GetConfig+0x2e>
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dc03      	bgt.n	800adb0 <USBD_GetConfig+0x34>
 800ada8:	e015      	b.n	800add6 <USBD_GetConfig+0x5a>
 800adaa:	2b03      	cmp	r3, #3
 800adac:	d00b      	beq.n	800adc6 <USBD_GetConfig+0x4a>
 800adae:	e012      	b.n	800add6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	3308      	adds	r3, #8
 800adba:	2201      	movs	r2, #1
 800adbc:	4619      	mov	r1, r3
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f93c 	bl	800b03c <USBD_CtlSendData>
        break;
 800adc4:	e00c      	b.n	800ade0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	3304      	adds	r3, #4
 800adca:	2201      	movs	r2, #1
 800adcc:	4619      	mov	r1, r3
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 f934 	bl	800b03c <USBD_CtlSendData>
        break;
 800add4:	e004      	b.n	800ade0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800add6:	6839      	ldr	r1, [r7, #0]
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f8be 	bl	800af5a <USBD_CtlError>
        break;
 800adde:	bf00      	nop
}
 800ade0:	bf00      	nop
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	3b01      	subs	r3, #1
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	d81e      	bhi.n	800ae3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	88db      	ldrh	r3, [r3, #6]
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d004      	beq.n	800ae12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ae08:	6839      	ldr	r1, [r7, #0]
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 f8a5 	bl	800af5a <USBD_CtlError>
        break;
 800ae10:	e01a      	b.n	800ae48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2201      	movs	r2, #1
 800ae16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d005      	beq.n	800ae2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	68db      	ldr	r3, [r3, #12]
 800ae26:	f043 0202 	orr.w	r2, r3, #2
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	330c      	adds	r3, #12
 800ae32:	2202      	movs	r2, #2
 800ae34:	4619      	mov	r1, r3
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f900 	bl	800b03c <USBD_CtlSendData>
      break;
 800ae3c:	e004      	b.n	800ae48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 f88a 	bl	800af5a <USBD_CtlError>
      break;
 800ae46:	bf00      	nop
  }
}
 800ae48:	bf00      	nop
 800ae4a:	3708      	adds	r7, #8
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	885b      	ldrh	r3, [r3, #2]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d107      	bne.n	800ae72 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2201      	movs	r2, #1
 800ae66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f940 	bl	800b0f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ae70:	e013      	b.n	800ae9a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	885b      	ldrh	r3, [r3, #2]
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d10b      	bne.n	800ae92 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	889b      	ldrh	r3, [r3, #4]
 800ae7e:	0a1b      	lsrs	r3, r3, #8
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	b2da      	uxtb	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f930 	bl	800b0f0 <USBD_CtlSendStatus>
}
 800ae90:	e003      	b.n	800ae9a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f860 	bl	800af5a <USBD_CtlError>
}
 800ae9a:	bf00      	nop
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b082      	sub	sp, #8
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d80b      	bhi.n	800aed2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	885b      	ldrh	r3, [r3, #2]
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d10c      	bne.n	800aedc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f910 	bl	800b0f0 <USBD_CtlSendStatus>
      }
      break;
 800aed0:	e004      	b.n	800aedc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aed2:	6839      	ldr	r1, [r7, #0]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 f840 	bl	800af5a <USBD_CtlError>
      break;
 800aeda:	e000      	b.n	800aede <USBD_ClrFeature+0x3c>
      break;
 800aedc:	bf00      	nop
  }
}
 800aede:	bf00      	nop
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	781a      	ldrb	r2, [r3, #0]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	3301      	adds	r3, #1
 800af00:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	781a      	ldrb	r2, [r3, #0]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	3301      	adds	r3, #1
 800af0e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f7ff fa17 	bl	800a344 <SWAPBYTE>
 800af16:	4603      	mov	r3, r0
 800af18:	461a      	mov	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	3301      	adds	r3, #1
 800af22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	3301      	adds	r3, #1
 800af28:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	f7ff fa0a 	bl	800a344 <SWAPBYTE>
 800af30:	4603      	mov	r3, r0
 800af32:	461a      	mov	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	3301      	adds	r3, #1
 800af3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	3301      	adds	r3, #1
 800af42:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f7ff f9fd 	bl	800a344 <SWAPBYTE>
 800af4a:	4603      	mov	r3, r0
 800af4c:	461a      	mov	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	80da      	strh	r2, [r3, #6]
}
 800af52:	bf00      	nop
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b082      	sub	sp, #8
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
 800af62:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800af64:	2180      	movs	r1, #128	; 0x80
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 fd4a 	bl	800ba00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800af6c:	2100      	movs	r1, #0
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fd46 	bl	800ba00 <USBD_LL_StallEP>
}
 800af74:	bf00      	nop
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af88:	2300      	movs	r3, #0
 800af8a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d036      	beq.n	800b000 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800af96:	6938      	ldr	r0, [r7, #16]
 800af98:	f000 f836 	bl	800b008 <USBD_GetLen>
 800af9c:	4603      	mov	r3, r0
 800af9e:	3301      	adds	r3, #1
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	005b      	lsls	r3, r3, #1
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800afaa:	7dfb      	ldrb	r3, [r7, #23]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	4413      	add	r3, r2
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	7812      	ldrb	r2, [r2, #0]
 800afb4:	701a      	strb	r2, [r3, #0]
  idx++;
 800afb6:	7dfb      	ldrb	r3, [r7, #23]
 800afb8:	3301      	adds	r3, #1
 800afba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800afbc:	7dfb      	ldrb	r3, [r7, #23]
 800afbe:	68ba      	ldr	r2, [r7, #8]
 800afc0:	4413      	add	r3, r2
 800afc2:	2203      	movs	r2, #3
 800afc4:	701a      	strb	r2, [r3, #0]
  idx++;
 800afc6:	7dfb      	ldrb	r3, [r7, #23]
 800afc8:	3301      	adds	r3, #1
 800afca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800afcc:	e013      	b.n	800aff6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800afce:	7dfb      	ldrb	r3, [r7, #23]
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	4413      	add	r3, r2
 800afd4:	693a      	ldr	r2, [r7, #16]
 800afd6:	7812      	ldrb	r2, [r2, #0]
 800afd8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	3301      	adds	r3, #1
 800afde:	613b      	str	r3, [r7, #16]
    idx++;
 800afe0:	7dfb      	ldrb	r3, [r7, #23]
 800afe2:	3301      	adds	r3, #1
 800afe4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800afe6:	7dfb      	ldrb	r3, [r7, #23]
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	4413      	add	r3, r2
 800afec:	2200      	movs	r2, #0
 800afee:	701a      	strb	r2, [r3, #0]
    idx++;
 800aff0:	7dfb      	ldrb	r3, [r7, #23]
 800aff2:	3301      	adds	r3, #1
 800aff4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1e7      	bne.n	800afce <USBD_GetString+0x52>
 800affe:	e000      	b.n	800b002 <USBD_GetString+0x86>
    return;
 800b000:	bf00      	nop
  }
}
 800b002:	3718      	adds	r7, #24
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b010:	2300      	movs	r3, #0
 800b012:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b018:	e005      	b.n	800b026 <USBD_GetLen+0x1e>
  {
    len++;
 800b01a:	7bfb      	ldrb	r3, [r7, #15]
 800b01c:	3301      	adds	r3, #1
 800b01e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	3301      	adds	r3, #1
 800b024:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1f5      	bne.n	800b01a <USBD_GetLen+0x12>
  }

  return len;
 800b02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3714      	adds	r7, #20
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2202      	movs	r2, #2
 800b04c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	2100      	movs	r1, #0
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f000 fd55 	bl	800bb12 <USBD_LL_Transmit>

  return USBD_OK;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b084      	sub	sp, #16
 800b076:	af00      	add	r7, sp, #0
 800b078:	60f8      	str	r0, [r7, #12]
 800b07a:	60b9      	str	r1, [r7, #8]
 800b07c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	68ba      	ldr	r2, [r7, #8]
 800b082:	2100      	movs	r1, #0
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f000 fd44 	bl	800bb12 <USBD_LL_Transmit>

  return USBD_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2203      	movs	r2, #3
 800b0a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	68ba      	ldr	r2, [r7, #8]
 800b0bc:	2100      	movs	r1, #0
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	f000 fd48 	bl	800bb54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	60f8      	str	r0, [r7, #12]
 800b0d6:	60b9      	str	r1, [r7, #8]
 800b0d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	2100      	movs	r1, #0
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f000 fd37 	bl	800bb54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2204      	movs	r2, #4
 800b0fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b100:	2300      	movs	r3, #0
 800b102:	2200      	movs	r2, #0
 800b104:	2100      	movs	r1, #0
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 fd03 	bl	800bb12 <USBD_LL_Transmit>

  return USBD_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b082      	sub	sp, #8
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2205      	movs	r2, #5
 800b122:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b126:	2300      	movs	r3, #0
 800b128:	2200      	movs	r2, #0
 800b12a:	2100      	movs	r1, #0
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fd11 	bl	800bb54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	3708      	adds	r7, #8
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b140:	2200      	movs	r2, #0
 800b142:	4912      	ldr	r1, [pc, #72]	; (800b18c <MX_USB_DEVICE_Init+0x50>)
 800b144:	4812      	ldr	r0, [pc, #72]	; (800b190 <MX_USB_DEVICE_Init+0x54>)
 800b146:	f7fe fcdd 	bl	8009b04 <USBD_Init>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d001      	beq.n	800b154 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b150:	f7f6 fc82 	bl	8001a58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b154:	490f      	ldr	r1, [pc, #60]	; (800b194 <MX_USB_DEVICE_Init+0x58>)
 800b156:	480e      	ldr	r0, [pc, #56]	; (800b190 <MX_USB_DEVICE_Init+0x54>)
 800b158:	f7fe fd04 	bl	8009b64 <USBD_RegisterClass>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d001      	beq.n	800b166 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b162:	f7f6 fc79 	bl	8001a58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b166:	490c      	ldr	r1, [pc, #48]	; (800b198 <MX_USB_DEVICE_Init+0x5c>)
 800b168:	4809      	ldr	r0, [pc, #36]	; (800b190 <MX_USB_DEVICE_Init+0x54>)
 800b16a:	f7fe fbfb 	bl	8009964 <USBD_CDC_RegisterInterface>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b174:	f7f6 fc70 	bl	8001a58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b178:	4805      	ldr	r0, [pc, #20]	; (800b190 <MX_USB_DEVICE_Init+0x54>)
 800b17a:	f7fe fd29 	bl	8009bd0 <USBD_Start>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d001      	beq.n	800b188 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b184:	f7f6 fc68 	bl	8001a58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b188:	bf00      	nop
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	200001c0 	.word	0x200001c0
 800b190:	20003d6c 	.word	0x20003d6c
 800b194:	2000012c 	.word	0x2000012c
 800b198:	200001ac 	.word	0x200001ac

0800b19c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	4905      	ldr	r1, [pc, #20]	; (800b1b8 <CDC_Init_FS+0x1c>)
 800b1a4:	4805      	ldr	r0, [pc, #20]	; (800b1bc <CDC_Init_FS+0x20>)
 800b1a6:	f7fe fbf7 	bl	8009998 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b1aa:	4905      	ldr	r1, [pc, #20]	; (800b1c0 <CDC_Init_FS+0x24>)
 800b1ac:	4803      	ldr	r0, [pc, #12]	; (800b1bc <CDC_Init_FS+0x20>)
 800b1ae:	f7fe fc15 	bl	80099dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b1b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	20004848 	.word	0x20004848
 800b1bc:	20003d6c 	.word	0x20003d6c
 800b1c0:	20004048 	.word	0x20004048

0800b1c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b1c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	4603      	mov	r3, r0
 800b1dc:	6039      	str	r1, [r7, #0]
 800b1de:	71fb      	strb	r3, [r7, #7]
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b1e4:	79fb      	ldrb	r3, [r7, #7]
 800b1e6:	2b23      	cmp	r3, #35	; 0x23
 800b1e8:	d84a      	bhi.n	800b280 <CDC_Control_FS+0xac>
 800b1ea:	a201      	add	r2, pc, #4	; (adr r2, 800b1f0 <CDC_Control_FS+0x1c>)
 800b1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f0:	0800b281 	.word	0x0800b281
 800b1f4:	0800b281 	.word	0x0800b281
 800b1f8:	0800b281 	.word	0x0800b281
 800b1fc:	0800b281 	.word	0x0800b281
 800b200:	0800b281 	.word	0x0800b281
 800b204:	0800b281 	.word	0x0800b281
 800b208:	0800b281 	.word	0x0800b281
 800b20c:	0800b281 	.word	0x0800b281
 800b210:	0800b281 	.word	0x0800b281
 800b214:	0800b281 	.word	0x0800b281
 800b218:	0800b281 	.word	0x0800b281
 800b21c:	0800b281 	.word	0x0800b281
 800b220:	0800b281 	.word	0x0800b281
 800b224:	0800b281 	.word	0x0800b281
 800b228:	0800b281 	.word	0x0800b281
 800b22c:	0800b281 	.word	0x0800b281
 800b230:	0800b281 	.word	0x0800b281
 800b234:	0800b281 	.word	0x0800b281
 800b238:	0800b281 	.word	0x0800b281
 800b23c:	0800b281 	.word	0x0800b281
 800b240:	0800b281 	.word	0x0800b281
 800b244:	0800b281 	.word	0x0800b281
 800b248:	0800b281 	.word	0x0800b281
 800b24c:	0800b281 	.word	0x0800b281
 800b250:	0800b281 	.word	0x0800b281
 800b254:	0800b281 	.word	0x0800b281
 800b258:	0800b281 	.word	0x0800b281
 800b25c:	0800b281 	.word	0x0800b281
 800b260:	0800b281 	.word	0x0800b281
 800b264:	0800b281 	.word	0x0800b281
 800b268:	0800b281 	.word	0x0800b281
 800b26c:	0800b281 	.word	0x0800b281
 800b270:	0800b281 	.word	0x0800b281
 800b274:	0800b281 	.word	0x0800b281
 800b278:	0800b281 	.word	0x0800b281
 800b27c:	0800b281 	.word	0x0800b281
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b280:	bf00      	nop
  }

  return (USBD_OK);
 800b282:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b284:	4618      	mov	r0, r3
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b29a:	6879      	ldr	r1, [r7, #4]
 800b29c:	4813      	ldr	r0, [pc, #76]	; (800b2ec <CDC_Receive_FS+0x5c>)
 800b29e:	f7fe fb9d 	bl	80099dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b2a2:	4812      	ldr	r0, [pc, #72]	; (800b2ec <CDC_Receive_FS+0x5c>)
 800b2a4:	f7fe fbf8 	bl	8009a98 <USBD_CDC_ReceivePacket>

  // Si el flag está en 0, es porque puedo escribir en el buffer
  if(flagNewUSBdata == 0)
 800b2a8:	4b11      	ldr	r3, [pc, #68]	; (800b2f0 <CDC_Receive_FS+0x60>)
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d116      	bne.n	800b2e0 <CDC_Receive_FS+0x50>
  {
	  // Recupero la cantidad de bytes recibidos
	  if(*Len > 0xFF)
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	2bff      	cmp	r3, #255	; 0xff
 800b2b8:	d903      	bls.n	800b2c2 <CDC_Receive_FS+0x32>
	  {
		  lenNewUSBdata = 0xFF;
 800b2ba:	4b0e      	ldr	r3, [pc, #56]	; (800b2f4 <CDC_Receive_FS+0x64>)
 800b2bc:	22ff      	movs	r2, #255	; 0xff
 800b2be:	701a      	strb	r2, [r3, #0]
 800b2c0:	e004      	b.n	800b2cc <CDC_Receive_FS+0x3c>
	  }
	  else
	  {
		  lenNewUSBdata = (uint8_t) *Len;
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	4b0a      	ldr	r3, [pc, #40]	; (800b2f4 <CDC_Receive_FS+0x64>)
 800b2ca:	701a      	strb	r2, [r3, #0]
	  }
	  // Me llevo una copia de los datos recibidos
	  memcpy(bufferNewUSBdata, Buf, lenNewUSBdata);
 800b2cc:	4b09      	ldr	r3, [pc, #36]	; (800b2f4 <CDC_Receive_FS+0x64>)
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	6879      	ldr	r1, [r7, #4]
 800b2d4:	4808      	ldr	r0, [pc, #32]	; (800b2f8 <CDC_Receive_FS+0x68>)
 800b2d6:	f000 fdf1 	bl	800bebc <memcpy>

	  // Levanto el flag, para indicarle al main que hay datos nuevos
	  flagNewUSBdata = 1;
 800b2da:	4b05      	ldr	r3, [pc, #20]	; (800b2f0 <CDC_Receive_FS+0x60>)
 800b2dc:	2201      	movs	r2, #1
 800b2de:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 800b2e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	20003d6c 	.word	0x20003d6c
 800b2f0:	20000628 	.word	0x20000628
 800b2f4:	2000066c 	.word	0x2000066c
 800b2f8:	2000062c 	.word	0x2000062c

0800b2fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	460b      	mov	r3, r1
 800b306:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b308:	2300      	movs	r3, #0
 800b30a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b30c:	4b0e      	ldr	r3, [pc, #56]	; (800b348 <CDC_Transmit_FS+0x4c>)
 800b30e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b312:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d001      	beq.n	800b322 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b31e:	2301      	movs	r3, #1
 800b320:	e00e      	b.n	800b340 <CDC_Transmit_FS+0x44>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b322:	887b      	ldrh	r3, [r7, #2]
 800b324:	461a      	mov	r2, r3
 800b326:	6879      	ldr	r1, [r7, #4]
 800b328:	4807      	ldr	r0, [pc, #28]	; (800b348 <CDC_Transmit_FS+0x4c>)
 800b32a:	f7fe fb35 	bl	8009998 <USBD_CDC_SetTxBuffer>

  // Seteo el flag en 1, para indicar que se va a enviar. Este flag se baja en la interrupción
  // de mensaje enviado
  flagUSBsendBusy = 1;
 800b32e:	4b07      	ldr	r3, [pc, #28]	; (800b34c <CDC_Transmit_FS+0x50>)
 800b330:	2201      	movs	r2, #1
 800b332:	701a      	strb	r2, [r3, #0]

  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b334:	4804      	ldr	r0, [pc, #16]	; (800b348 <CDC_Transmit_FS+0x4c>)
 800b336:	f7fe fb6f 	bl	8009a18 <USBD_CDC_TransmitPacket>
 800b33a:	4603      	mov	r3, r0
 800b33c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	20003d6c 	.word	0x20003d6c
 800b34c:	20000424 	.word	0x20000424

0800b350 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b350:	b480      	push	{r7}
 800b352:	b087      	sub	sp, #28
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	4613      	mov	r3, r2
 800b35c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	75fb      	strb	r3, [r7, #23]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  // Se baja el flag, para indicar que se terminó de enviar el mensaje
  flagUSBsendBusy = 0;
 800b362:	4b05      	ldr	r3, [pc, #20]	; (800b378 <CDC_TransmitCplt_FS+0x28>)
 800b364:	2200      	movs	r2, #0
 800b366:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 13 */
  return result;
 800b368:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	371c      	adds	r7, #28
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	20000424 	.word	0x20000424

0800b37c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	6039      	str	r1, [r7, #0]
 800b386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	2212      	movs	r2, #18
 800b38c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b38e:	4b03      	ldr	r3, [pc, #12]	; (800b39c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b390:	4618      	mov	r0, r3
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	200001e0 	.word	0x200001e0

0800b3a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	6039      	str	r1, [r7, #0]
 800b3aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	2204      	movs	r2, #4
 800b3b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b3b2:	4b03      	ldr	r3, [pc, #12]	; (800b3c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	20000200 	.word	0x20000200

0800b3c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	6039      	str	r1, [r7, #0]
 800b3ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3d0:	79fb      	ldrb	r3, [r7, #7]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d105      	bne.n	800b3e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	4907      	ldr	r1, [pc, #28]	; (800b3f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b3da:	4808      	ldr	r0, [pc, #32]	; (800b3fc <USBD_FS_ProductStrDescriptor+0x38>)
 800b3dc:	f7ff fdce 	bl	800af7c <USBD_GetString>
 800b3e0:	e004      	b.n	800b3ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	4904      	ldr	r1, [pc, #16]	; (800b3f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b3e6:	4805      	ldr	r0, [pc, #20]	; (800b3fc <USBD_FS_ProductStrDescriptor+0x38>)
 800b3e8:	f7ff fdc8 	bl	800af7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3ec:	4b02      	ldr	r3, [pc, #8]	; (800b3f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20005048 	.word	0x20005048
 800b3fc:	0800bf88 	.word	0x0800bf88

0800b400 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	4603      	mov	r3, r0
 800b408:	6039      	str	r1, [r7, #0]
 800b40a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b40c:	683a      	ldr	r2, [r7, #0]
 800b40e:	4904      	ldr	r1, [pc, #16]	; (800b420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b410:	4804      	ldr	r0, [pc, #16]	; (800b424 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b412:	f7ff fdb3 	bl	800af7c <USBD_GetString>
  return USBD_StrDesc;
 800b416:	4b02      	ldr	r3, [pc, #8]	; (800b420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3708      	adds	r7, #8
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	20005048 	.word	0x20005048
 800b424:	0800bfa0 	.word	0x0800bfa0

0800b428 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	4603      	mov	r3, r0
 800b430:	6039      	str	r1, [r7, #0]
 800b432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	221a      	movs	r2, #26
 800b438:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b43a:	f000 f855 	bl	800b4e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b43e:	4b02      	ldr	r3, [pc, #8]	; (800b448 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b440:	4618      	mov	r0, r3
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	20000204 	.word	0x20000204

0800b44c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	4603      	mov	r3, r0
 800b454:	6039      	str	r1, [r7, #0]
 800b456:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b458:	79fb      	ldrb	r3, [r7, #7]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d105      	bne.n	800b46a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	4907      	ldr	r1, [pc, #28]	; (800b480 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b462:	4808      	ldr	r0, [pc, #32]	; (800b484 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b464:	f7ff fd8a 	bl	800af7c <USBD_GetString>
 800b468:	e004      	b.n	800b474 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	4904      	ldr	r1, [pc, #16]	; (800b480 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b46e:	4805      	ldr	r0, [pc, #20]	; (800b484 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b470:	f7ff fd84 	bl	800af7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b474:	4b02      	ldr	r3, [pc, #8]	; (800b480 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b476:	4618      	mov	r0, r3
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20005048 	.word	0x20005048
 800b484:	0800bfb4 	.word	0x0800bfb4

0800b488 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	4603      	mov	r3, r0
 800b490:	6039      	str	r1, [r7, #0]
 800b492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b494:	79fb      	ldrb	r3, [r7, #7]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d105      	bne.n	800b4a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	4907      	ldr	r1, [pc, #28]	; (800b4bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b49e:	4808      	ldr	r0, [pc, #32]	; (800b4c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b4a0:	f7ff fd6c 	bl	800af7c <USBD_GetString>
 800b4a4:	e004      	b.n	800b4b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	4904      	ldr	r1, [pc, #16]	; (800b4bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b4aa:	4805      	ldr	r0, [pc, #20]	; (800b4c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b4ac:	f7ff fd66 	bl	800af7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4b0:	4b02      	ldr	r3, [pc, #8]	; (800b4bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3708      	adds	r7, #8
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20005048 	.word	0x20005048
 800b4c0:	0800bfc0 	.word	0x0800bfc0

0800b4c4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	6039      	str	r1, [r7, #0]
 800b4ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	220c      	movs	r2, #12
 800b4d4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b4d6:	4b03      	ldr	r3, [pc, #12]	; (800b4e4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr
 800b4e4:	200001f4 	.word	0x200001f4

0800b4e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b4ee:	4b0f      	ldr	r3, [pc, #60]	; (800b52c <Get_SerialNum+0x44>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b4f4:	4b0e      	ldr	r3, [pc, #56]	; (800b530 <Get_SerialNum+0x48>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b4fa:	4b0e      	ldr	r3, [pc, #56]	; (800b534 <Get_SerialNum+0x4c>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4413      	add	r3, r2
 800b506:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d009      	beq.n	800b522 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b50e:	2208      	movs	r2, #8
 800b510:	4909      	ldr	r1, [pc, #36]	; (800b538 <Get_SerialNum+0x50>)
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f000 f814 	bl	800b540 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b518:	2204      	movs	r2, #4
 800b51a:	4908      	ldr	r1, [pc, #32]	; (800b53c <Get_SerialNum+0x54>)
 800b51c:	68b8      	ldr	r0, [r7, #8]
 800b51e:	f000 f80f 	bl	800b540 <IntToUnicode>
  }
}
 800b522:	bf00      	nop
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	1ff0f420 	.word	0x1ff0f420
 800b530:	1ff0f424 	.word	0x1ff0f424
 800b534:	1ff0f428 	.word	0x1ff0f428
 800b538:	20000206 	.word	0x20000206
 800b53c:	20000216 	.word	0x20000216

0800b540 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b540:	b480      	push	{r7}
 800b542:	b087      	sub	sp, #28
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	4613      	mov	r3, r2
 800b54c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b54e:	2300      	movs	r3, #0
 800b550:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b552:	2300      	movs	r3, #0
 800b554:	75fb      	strb	r3, [r7, #23]
 800b556:	e027      	b.n	800b5a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	0f1b      	lsrs	r3, r3, #28
 800b55c:	2b09      	cmp	r3, #9
 800b55e:	d80b      	bhi.n	800b578 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	0f1b      	lsrs	r3, r3, #28
 800b564:	b2da      	uxtb	r2, r3
 800b566:	7dfb      	ldrb	r3, [r7, #23]
 800b568:	005b      	lsls	r3, r3, #1
 800b56a:	4619      	mov	r1, r3
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	440b      	add	r3, r1
 800b570:	3230      	adds	r2, #48	; 0x30
 800b572:	b2d2      	uxtb	r2, r2
 800b574:	701a      	strb	r2, [r3, #0]
 800b576:	e00a      	b.n	800b58e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	0f1b      	lsrs	r3, r3, #28
 800b57c:	b2da      	uxtb	r2, r3
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
 800b580:	005b      	lsls	r3, r3, #1
 800b582:	4619      	mov	r1, r3
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	440b      	add	r3, r1
 800b588:	3237      	adds	r2, #55	; 0x37
 800b58a:	b2d2      	uxtb	r2, r2
 800b58c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	011b      	lsls	r3, r3, #4
 800b592:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b594:	7dfb      	ldrb	r3, [r7, #23]
 800b596:	005b      	lsls	r3, r3, #1
 800b598:	3301      	adds	r3, #1
 800b59a:	68ba      	ldr	r2, [r7, #8]
 800b59c:	4413      	add	r3, r2
 800b59e:	2200      	movs	r2, #0
 800b5a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b5a2:	7dfb      	ldrb	r3, [r7, #23]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	75fb      	strb	r3, [r7, #23]
 800b5a8:	7dfa      	ldrb	r2, [r7, #23]
 800b5aa:	79fb      	ldrb	r3, [r7, #7]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d3d3      	bcc.n	800b558 <IntToUnicode+0x18>
  }
}
 800b5b0:	bf00      	nop
 800b5b2:	bf00      	nop
 800b5b4:	371c      	adds	r7, #28
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
	...

0800b5c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b0ac      	sub	sp, #176	; 0xb0
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	601a      	str	r2, [r3, #0]
 800b5d0:	605a      	str	r2, [r3, #4]
 800b5d2:	609a      	str	r2, [r3, #8]
 800b5d4:	60da      	str	r2, [r3, #12]
 800b5d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b5d8:	f107 0318 	add.w	r3, r7, #24
 800b5dc:	2284      	movs	r2, #132	; 0x84
 800b5de:	2100      	movs	r1, #0
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f000 fc27 	bl	800be34 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5ee:	d161      	bne.n	800b6b4 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b5f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b5f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b5fc:	f107 0318 	add.w	r3, r7, #24
 800b600:	4618      	mov	r0, r3
 800b602:	f7fa fc03 	bl	8005e0c <HAL_RCCEx_PeriphCLKConfig>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d001      	beq.n	800b610 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800b60c:	f7f6 fa24 	bl	8001a58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b610:	4b2a      	ldr	r3, [pc, #168]	; (800b6bc <HAL_PCD_MspInit+0xfc>)
 800b612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b614:	4a29      	ldr	r2, [pc, #164]	; (800b6bc <HAL_PCD_MspInit+0xfc>)
 800b616:	f043 0301 	orr.w	r3, r3, #1
 800b61a:	6313      	str	r3, [r2, #48]	; 0x30
 800b61c:	4b27      	ldr	r3, [pc, #156]	; (800b6bc <HAL_PCD_MspInit+0xfc>)
 800b61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b620:	f003 0301 	and.w	r3, r3, #1
 800b624:	617b      	str	r3, [r7, #20]
 800b626:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b628:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800b62c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b630:	2302      	movs	r3, #2
 800b632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b636:	2300      	movs	r3, #0
 800b638:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b63c:	2303      	movs	r3, #3
 800b63e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b642:	230a      	movs	r3, #10
 800b644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b648:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b64c:	4619      	mov	r1, r3
 800b64e:	481c      	ldr	r0, [pc, #112]	; (800b6c0 <HAL_PCD_MspInit+0x100>)
 800b650:	f7f8 fa84 	bl	8003b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b654:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b65c:	2300      	movs	r3, #0
 800b65e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b662:	2300      	movs	r3, #0
 800b664:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b668:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b66c:	4619      	mov	r1, r3
 800b66e:	4814      	ldr	r0, [pc, #80]	; (800b6c0 <HAL_PCD_MspInit+0x100>)
 800b670:	f7f8 fa74 	bl	8003b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b674:	4b11      	ldr	r3, [pc, #68]	; (800b6bc <HAL_PCD_MspInit+0xfc>)
 800b676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b678:	4a10      	ldr	r2, [pc, #64]	; (800b6bc <HAL_PCD_MspInit+0xfc>)
 800b67a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b67e:	6353      	str	r3, [r2, #52]	; 0x34
 800b680:	4b0e      	ldr	r3, [pc, #56]	; (800b6bc <HAL_PCD_MspInit+0xfc>)
 800b682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b688:	613b      	str	r3, [r7, #16]
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	4b0b      	ldr	r3, [pc, #44]	; (800b6bc <HAL_PCD_MspInit+0xfc>)
 800b68e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b690:	4a0a      	ldr	r2, [pc, #40]	; (800b6bc <HAL_PCD_MspInit+0xfc>)
 800b692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b696:	6453      	str	r3, [r2, #68]	; 0x44
 800b698:	4b08      	ldr	r3, [pc, #32]	; (800b6bc <HAL_PCD_MspInit+0xfc>)
 800b69a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b69c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6a0:	60fb      	str	r3, [r7, #12]
 800b6a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	2043      	movs	r0, #67	; 0x43
 800b6aa:	f7f7 fefa 	bl	80034a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b6ae:	2043      	movs	r0, #67	; 0x43
 800b6b0:	f7f7 ff13 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b6b4:	bf00      	nop
 800b6b6:	37b0      	adds	r7, #176	; 0xb0
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	40023800 	.word	0x40023800
 800b6c0:	40020000 	.word	0x40020000

0800b6c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b6d8:	4619      	mov	r1, r3
 800b6da:	4610      	mov	r0, r2
 800b6dc:	f7fe fac5 	bl	8009c6a <USBD_LL_SetupStage>
}
 800b6e0:	bf00      	nop
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800b6fa:	78fa      	ldrb	r2, [r7, #3]
 800b6fc:	6879      	ldr	r1, [r7, #4]
 800b6fe:	4613      	mov	r3, r2
 800b700:	00db      	lsls	r3, r3, #3
 800b702:	4413      	add	r3, r2
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	440b      	add	r3, r1
 800b708:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	78fb      	ldrb	r3, [r7, #3]
 800b710:	4619      	mov	r1, r3
 800b712:	f7fe faff 	bl	8009d14 <USBD_LL_DataOutStage>
}
 800b716:	bf00      	nop
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b71e:	b580      	push	{r7, lr}
 800b720:	b082      	sub	sp, #8
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
 800b726:	460b      	mov	r3, r1
 800b728:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800b730:	78fa      	ldrb	r2, [r7, #3]
 800b732:	6879      	ldr	r1, [r7, #4]
 800b734:	4613      	mov	r3, r2
 800b736:	00db      	lsls	r3, r3, #3
 800b738:	4413      	add	r3, r2
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	440b      	add	r3, r1
 800b73e:	334c      	adds	r3, #76	; 0x4c
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	78fb      	ldrb	r3, [r7, #3]
 800b744:	4619      	mov	r1, r3
 800b746:	f7fe fb98 	bl	8009e7a <USBD_LL_DataInStage>
}
 800b74a:	bf00      	nop
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b082      	sub	sp, #8
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe fccc 	bl	800a0fe <USBD_LL_SOF>
}
 800b766:	bf00      	nop
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}

0800b76e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b76e:	b580      	push	{r7, lr}
 800b770:	b084      	sub	sp, #16
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b776:	2301      	movs	r3, #1
 800b778:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d102      	bne.n	800b788 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b782:	2300      	movs	r3, #0
 800b784:	73fb      	strb	r3, [r7, #15]
 800b786:	e008      	b.n	800b79a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d102      	bne.n	800b796 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b790:	2301      	movs	r3, #1
 800b792:	73fb      	strb	r3, [r7, #15]
 800b794:	e001      	b.n	800b79a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b796:	f7f6 f95f 	bl	8001a58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b7a0:	7bfa      	ldrb	r2, [r7, #15]
 800b7a2:	4611      	mov	r1, r2
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7fe fc6c 	bl	800a082 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fe fc14 	bl	8009fde <USBD_LL_Reset>
}
 800b7b6:	bf00      	nop
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
	...

0800b7c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7fe fc67 	bl	800a0a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	6812      	ldr	r2, [r2, #0]
 800b7e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b7e6:	f043 0301 	orr.w	r3, r3, #1
 800b7ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a1b      	ldr	r3, [r3, #32]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d005      	beq.n	800b800 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7f4:	4b04      	ldr	r3, [pc, #16]	; (800b808 <HAL_PCD_SuspendCallback+0x48>)
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	4a03      	ldr	r2, [pc, #12]	; (800b808 <HAL_PCD_SuspendCallback+0x48>)
 800b7fa:	f043 0306 	orr.w	r3, r3, #6
 800b7fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b800:	bf00      	nop
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	e000ed00 	.word	0xe000ed00

0800b80c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7fe fc57 	bl	800a0ce <USBD_LL_Resume>
}
 800b820:	bf00      	nop
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	460b      	mov	r3, r1
 800b832:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b83a:	78fa      	ldrb	r2, [r7, #3]
 800b83c:	4611      	mov	r1, r2
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fe fcaf 	bl	800a1a2 <USBD_LL_IsoOUTIncomplete>
}
 800b844:	bf00      	nop
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	460b      	mov	r3, r1
 800b856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b85e:	78fa      	ldrb	r2, [r7, #3]
 800b860:	4611      	mov	r1, r2
 800b862:	4618      	mov	r0, r3
 800b864:	f7fe fc6b 	bl	800a13e <USBD_LL_IsoINIncomplete>
}
 800b868:	bf00      	nop
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fe fcc1 	bl	800a206 <USBD_LL_DevConnected>
}
 800b884:	bf00      	nop
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe fcbe 	bl	800a21c <USBD_LL_DevDisconnected>
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d13c      	bne.n	800b932 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b8b8:	4a20      	ldr	r2, [pc, #128]	; (800b93c <USBD_LL_Init+0x94>)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a1e      	ldr	r2, [pc, #120]	; (800b93c <USBD_LL_Init+0x94>)
 800b8c4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8c8:	4b1c      	ldr	r3, [pc, #112]	; (800b93c <USBD_LL_Init+0x94>)
 800b8ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b8ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b8d0:	4b1a      	ldr	r3, [pc, #104]	; (800b93c <USBD_LL_Init+0x94>)
 800b8d2:	2206      	movs	r2, #6
 800b8d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b8d6:	4b19      	ldr	r3, [pc, #100]	; (800b93c <USBD_LL_Init+0x94>)
 800b8d8:	2202      	movs	r2, #2
 800b8da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b8dc:	4b17      	ldr	r3, [pc, #92]	; (800b93c <USBD_LL_Init+0x94>)
 800b8de:	2200      	movs	r2, #0
 800b8e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b8e2:	4b16      	ldr	r3, [pc, #88]	; (800b93c <USBD_LL_Init+0x94>)
 800b8e4:	2202      	movs	r2, #2
 800b8e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800b8e8:	4b14      	ldr	r3, [pc, #80]	; (800b93c <USBD_LL_Init+0x94>)
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b8ee:	4b13      	ldr	r3, [pc, #76]	; (800b93c <USBD_LL_Init+0x94>)
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b8f4:	4b11      	ldr	r3, [pc, #68]	; (800b93c <USBD_LL_Init+0x94>)
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b8fa:	4b10      	ldr	r3, [pc, #64]	; (800b93c <USBD_LL_Init+0x94>)
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b900:	4b0e      	ldr	r3, [pc, #56]	; (800b93c <USBD_LL_Init+0x94>)
 800b902:	2200      	movs	r2, #0
 800b904:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b906:	480d      	ldr	r0, [pc, #52]	; (800b93c <USBD_LL_Init+0x94>)
 800b908:	f7f8 faed 	bl	8003ee6 <HAL_PCD_Init>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d001      	beq.n	800b916 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b912:	f7f6 f8a1 	bl	8001a58 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b916:	2180      	movs	r1, #128	; 0x80
 800b918:	4808      	ldr	r0, [pc, #32]	; (800b93c <USBD_LL_Init+0x94>)
 800b91a:	f7f9 fd68 	bl	80053ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b91e:	2240      	movs	r2, #64	; 0x40
 800b920:	2100      	movs	r1, #0
 800b922:	4806      	ldr	r0, [pc, #24]	; (800b93c <USBD_LL_Init+0x94>)
 800b924:	f7f9 fd1c 	bl	8005360 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b928:	2280      	movs	r2, #128	; 0x80
 800b92a:	2101      	movs	r1, #1
 800b92c:	4803      	ldr	r0, [pc, #12]	; (800b93c <USBD_LL_Init+0x94>)
 800b92e:	f7f9 fd17 	bl	8005360 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	20005248 	.word	0x20005248

0800b940 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b948:	2300      	movs	r3, #0
 800b94a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b956:	4618      	mov	r0, r3
 800b958:	f7f8 fbe9 	bl	800412e <HAL_PCD_Start>
 800b95c:	4603      	mov	r3, r0
 800b95e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b960:	7bfb      	ldrb	r3, [r7, #15]
 800b962:	4618      	mov	r0, r3
 800b964:	f000 f97e 	bl	800bc64 <USBD_Get_USB_Status>
 800b968:	4603      	mov	r3, r0
 800b96a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b96c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b084      	sub	sp, #16
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	4608      	mov	r0, r1
 800b980:	4611      	mov	r1, r2
 800b982:	461a      	mov	r2, r3
 800b984:	4603      	mov	r3, r0
 800b986:	70fb      	strb	r3, [r7, #3]
 800b988:	460b      	mov	r3, r1
 800b98a:	70bb      	strb	r3, [r7, #2]
 800b98c:	4613      	mov	r3, r2
 800b98e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b99e:	78bb      	ldrb	r3, [r7, #2]
 800b9a0:	883a      	ldrh	r2, [r7, #0]
 800b9a2:	78f9      	ldrb	r1, [r7, #3]
 800b9a4:	f7f9 f8d6 	bl	8004b54 <HAL_PCD_EP_Open>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9ac:	7bfb      	ldrb	r3, [r7, #15]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 f958 	bl	800bc64 <USBD_Get_USB_Status>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b084      	sub	sp, #16
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9dc:	78fa      	ldrb	r2, [r7, #3]
 800b9de:	4611      	mov	r1, r2
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7f9 f91f 	bl	8004c24 <HAL_PCD_EP_Close>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9ea:	7bfb      	ldrb	r3, [r7, #15]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f000 f939 	bl	800bc64 <USBD_Get_USB_Status>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba1a:	78fa      	ldrb	r2, [r7, #3]
 800ba1c:	4611      	mov	r1, r2
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7f9 f9f7 	bl	8004e12 <HAL_PCD_EP_SetStall>
 800ba24:	4603      	mov	r3, r0
 800ba26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 f91a 	bl	800bc64 <USBD_Get_USB_Status>
 800ba30:	4603      	mov	r3, r0
 800ba32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b084      	sub	sp, #16
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
 800ba46:	460b      	mov	r3, r1
 800ba48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba58:	78fa      	ldrb	r2, [r7, #3]
 800ba5a:	4611      	mov	r1, r2
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7f9 fa3c 	bl	8004eda <HAL_PCD_EP_ClrStall>
 800ba62:	4603      	mov	r3, r0
 800ba64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba66:	7bfb      	ldrb	r3, [r7, #15]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f000 f8fb 	bl	800bc64 <USBD_Get_USB_Status>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b085      	sub	sp, #20
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	460b      	mov	r3, r1
 800ba86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	da0b      	bge.n	800bab0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba98:	78fb      	ldrb	r3, [r7, #3]
 800ba9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba9e:	68f9      	ldr	r1, [r7, #12]
 800baa0:	4613      	mov	r3, r2
 800baa2:	00db      	lsls	r3, r3, #3
 800baa4:	4413      	add	r3, r2
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	440b      	add	r3, r1
 800baaa:	333e      	adds	r3, #62	; 0x3e
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	e00b      	b.n	800bac8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bab0:	78fb      	ldrb	r3, [r7, #3]
 800bab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bab6:	68f9      	ldr	r1, [r7, #12]
 800bab8:	4613      	mov	r3, r2
 800baba:	00db      	lsls	r3, r3, #3
 800babc:	4413      	add	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	440b      	add	r3, r1
 800bac2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bac6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3714      	adds	r7, #20
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	460b      	mov	r3, r1
 800bade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bae0:	2300      	movs	r3, #0
 800bae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bae4:	2300      	movs	r3, #0
 800bae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800baee:	78fa      	ldrb	r2, [r7, #3]
 800baf0:	4611      	mov	r1, r2
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7f9 f809 	bl	8004b0a <HAL_PCD_SetAddress>
 800baf8:	4603      	mov	r3, r0
 800bafa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f000 f8b0 	bl	800bc64 <USBD_Get_USB_Status>
 800bb04:	4603      	mov	r3, r0
 800bb06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb08:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b086      	sub	sp, #24
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	60f8      	str	r0, [r7, #12]
 800bb1a:	607a      	str	r2, [r7, #4]
 800bb1c:	603b      	str	r3, [r7, #0]
 800bb1e:	460b      	mov	r3, r1
 800bb20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb22:	2300      	movs	r3, #0
 800bb24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb30:	7af9      	ldrb	r1, [r7, #11]
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	f7f9 f922 	bl	8004d7e <HAL_PCD_EP_Transmit>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb3e:	7dfb      	ldrb	r3, [r7, #23]
 800bb40:	4618      	mov	r0, r3
 800bb42:	f000 f88f 	bl	800bc64 <USBD_Get_USB_Status>
 800bb46:	4603      	mov	r3, r0
 800bb48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb4a:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3718      	adds	r7, #24
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	607a      	str	r2, [r7, #4]
 800bb5e:	603b      	str	r3, [r7, #0]
 800bb60:	460b      	mov	r3, r1
 800bb62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb64:	2300      	movs	r3, #0
 800bb66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb72:	7af9      	ldrb	r1, [r7, #11]
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	f7f9 f89e 	bl	8004cb8 <HAL_PCD_EP_Receive>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb80:	7dfb      	ldrb	r3, [r7, #23]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f000 f86e 	bl	800bc64 <USBD_Get_USB_Status>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb8c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3718      	adds	r7, #24
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b082      	sub	sp, #8
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
 800bb9e:	460b      	mov	r3, r1
 800bba0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bba8:	78fa      	ldrb	r2, [r7, #3]
 800bbaa:	4611      	mov	r1, r2
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7f9 f8ce 	bl	8004d4e <HAL_PCD_EP_GetRxCount>
 800bbb2:	4603      	mov	r3, r0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bbc8:	78fb      	ldrb	r3, [r7, #3]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d002      	beq.n	800bbd4 <HAL_PCDEx_LPM_Callback+0x18>
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d01f      	beq.n	800bc12 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bbd2:	e03b      	b.n	800bc4c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6a1b      	ldr	r3, [r3, #32]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d007      	beq.n	800bbec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bbdc:	f000 f83c 	bl	800bc58 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbe0:	4b1c      	ldr	r3, [pc, #112]	; (800bc54 <HAL_PCDEx_LPM_Callback+0x98>)
 800bbe2:	691b      	ldr	r3, [r3, #16]
 800bbe4:	4a1b      	ldr	r2, [pc, #108]	; (800bc54 <HAL_PCDEx_LPM_Callback+0x98>)
 800bbe6:	f023 0306 	bic.w	r3, r3, #6
 800bbea:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	6812      	ldr	r2, [r2, #0]
 800bbfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bbfe:	f023 0301 	bic.w	r3, r3, #1
 800bc02:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fe fa5f 	bl	800a0ce <USBD_LL_Resume>
    break;
 800bc10:	e01c      	b.n	800bc4c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	6812      	ldr	r2, [r2, #0]
 800bc20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bc24:	f043 0301 	orr.w	r3, r3, #1
 800bc28:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7fe fa36 	bl	800a0a2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a1b      	ldr	r3, [r3, #32]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d005      	beq.n	800bc4a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc3e:	4b05      	ldr	r3, [pc, #20]	; (800bc54 <HAL_PCDEx_LPM_Callback+0x98>)
 800bc40:	691b      	ldr	r3, [r3, #16]
 800bc42:	4a04      	ldr	r2, [pc, #16]	; (800bc54 <HAL_PCDEx_LPM_Callback+0x98>)
 800bc44:	f043 0306 	orr.w	r3, r3, #6
 800bc48:	6113      	str	r3, [r2, #16]
    break;
 800bc4a:	bf00      	nop
}
 800bc4c:	bf00      	nop
 800bc4e:	3708      	adds	r7, #8
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	e000ed00 	.word	0xe000ed00

0800bc58 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bc5c:	f7f5 fcc8 	bl	80015f0 <SystemClock_Config>
}
 800bc60:	bf00      	nop
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc72:	79fb      	ldrb	r3, [r7, #7]
 800bc74:	2b03      	cmp	r3, #3
 800bc76:	d817      	bhi.n	800bca8 <USBD_Get_USB_Status+0x44>
 800bc78:	a201      	add	r2, pc, #4	; (adr r2, 800bc80 <USBD_Get_USB_Status+0x1c>)
 800bc7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7e:	bf00      	nop
 800bc80:	0800bc91 	.word	0x0800bc91
 800bc84:	0800bc97 	.word	0x0800bc97
 800bc88:	0800bc9d 	.word	0x0800bc9d
 800bc8c:	0800bca3 	.word	0x0800bca3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	73fb      	strb	r3, [r7, #15]
    break;
 800bc94:	e00b      	b.n	800bcae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc96:	2303      	movs	r3, #3
 800bc98:	73fb      	strb	r3, [r7, #15]
    break;
 800bc9a:	e008      	b.n	800bcae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	73fb      	strb	r3, [r7, #15]
    break;
 800bca0:	e005      	b.n	800bcae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bca2:	2303      	movs	r3, #3
 800bca4:	73fb      	strb	r3, [r7, #15]
    break;
 800bca6:	e002      	b.n	800bcae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bca8:	2303      	movs	r3, #3
 800bcaa:	73fb      	strb	r3, [r7, #15]
    break;
 800bcac:	bf00      	nop
  }
  return usb_status;
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3714      	adds	r7, #20
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <malloc>:
 800bcbc:	4b02      	ldr	r3, [pc, #8]	; (800bcc8 <malloc+0xc>)
 800bcbe:	4601      	mov	r1, r0
 800bcc0:	6818      	ldr	r0, [r3, #0]
 800bcc2:	f000 b82b 	b.w	800bd1c <_malloc_r>
 800bcc6:	bf00      	nop
 800bcc8:	2000026c 	.word	0x2000026c

0800bccc <free>:
 800bccc:	4b02      	ldr	r3, [pc, #8]	; (800bcd8 <free+0xc>)
 800bcce:	4601      	mov	r1, r0
 800bcd0:	6818      	ldr	r0, [r3, #0]
 800bcd2:	f000 b901 	b.w	800bed8 <_free_r>
 800bcd6:	bf00      	nop
 800bcd8:	2000026c 	.word	0x2000026c

0800bcdc <sbrk_aligned>:
 800bcdc:	b570      	push	{r4, r5, r6, lr}
 800bcde:	4e0e      	ldr	r6, [pc, #56]	; (800bd18 <sbrk_aligned+0x3c>)
 800bce0:	460c      	mov	r4, r1
 800bce2:	6831      	ldr	r1, [r6, #0]
 800bce4:	4605      	mov	r5, r0
 800bce6:	b911      	cbnz	r1, 800bcee <sbrk_aligned+0x12>
 800bce8:	f000 f8ac 	bl	800be44 <_sbrk_r>
 800bcec:	6030      	str	r0, [r6, #0]
 800bcee:	4621      	mov	r1, r4
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	f000 f8a7 	bl	800be44 <_sbrk_r>
 800bcf6:	1c43      	adds	r3, r0, #1
 800bcf8:	d00a      	beq.n	800bd10 <sbrk_aligned+0x34>
 800bcfa:	1cc4      	adds	r4, r0, #3
 800bcfc:	f024 0403 	bic.w	r4, r4, #3
 800bd00:	42a0      	cmp	r0, r4
 800bd02:	d007      	beq.n	800bd14 <sbrk_aligned+0x38>
 800bd04:	1a21      	subs	r1, r4, r0
 800bd06:	4628      	mov	r0, r5
 800bd08:	f000 f89c 	bl	800be44 <_sbrk_r>
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	d101      	bne.n	800bd14 <sbrk_aligned+0x38>
 800bd10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bd14:	4620      	mov	r0, r4
 800bd16:	bd70      	pop	{r4, r5, r6, pc}
 800bd18:	20005754 	.word	0x20005754

0800bd1c <_malloc_r>:
 800bd1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd20:	1ccd      	adds	r5, r1, #3
 800bd22:	f025 0503 	bic.w	r5, r5, #3
 800bd26:	3508      	adds	r5, #8
 800bd28:	2d0c      	cmp	r5, #12
 800bd2a:	bf38      	it	cc
 800bd2c:	250c      	movcc	r5, #12
 800bd2e:	2d00      	cmp	r5, #0
 800bd30:	4607      	mov	r7, r0
 800bd32:	db01      	blt.n	800bd38 <_malloc_r+0x1c>
 800bd34:	42a9      	cmp	r1, r5
 800bd36:	d905      	bls.n	800bd44 <_malloc_r+0x28>
 800bd38:	230c      	movs	r3, #12
 800bd3a:	603b      	str	r3, [r7, #0]
 800bd3c:	2600      	movs	r6, #0
 800bd3e:	4630      	mov	r0, r6
 800bd40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800be18 <_malloc_r+0xfc>
 800bd48:	f000 f868 	bl	800be1c <__malloc_lock>
 800bd4c:	f8d8 3000 	ldr.w	r3, [r8]
 800bd50:	461c      	mov	r4, r3
 800bd52:	bb5c      	cbnz	r4, 800bdac <_malloc_r+0x90>
 800bd54:	4629      	mov	r1, r5
 800bd56:	4638      	mov	r0, r7
 800bd58:	f7ff ffc0 	bl	800bcdc <sbrk_aligned>
 800bd5c:	1c43      	adds	r3, r0, #1
 800bd5e:	4604      	mov	r4, r0
 800bd60:	d155      	bne.n	800be0e <_malloc_r+0xf2>
 800bd62:	f8d8 4000 	ldr.w	r4, [r8]
 800bd66:	4626      	mov	r6, r4
 800bd68:	2e00      	cmp	r6, #0
 800bd6a:	d145      	bne.n	800bdf8 <_malloc_r+0xdc>
 800bd6c:	2c00      	cmp	r4, #0
 800bd6e:	d048      	beq.n	800be02 <_malloc_r+0xe6>
 800bd70:	6823      	ldr	r3, [r4, #0]
 800bd72:	4631      	mov	r1, r6
 800bd74:	4638      	mov	r0, r7
 800bd76:	eb04 0903 	add.w	r9, r4, r3
 800bd7a:	f000 f863 	bl	800be44 <_sbrk_r>
 800bd7e:	4581      	cmp	r9, r0
 800bd80:	d13f      	bne.n	800be02 <_malloc_r+0xe6>
 800bd82:	6821      	ldr	r1, [r4, #0]
 800bd84:	1a6d      	subs	r5, r5, r1
 800bd86:	4629      	mov	r1, r5
 800bd88:	4638      	mov	r0, r7
 800bd8a:	f7ff ffa7 	bl	800bcdc <sbrk_aligned>
 800bd8e:	3001      	adds	r0, #1
 800bd90:	d037      	beq.n	800be02 <_malloc_r+0xe6>
 800bd92:	6823      	ldr	r3, [r4, #0]
 800bd94:	442b      	add	r3, r5
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	f8d8 3000 	ldr.w	r3, [r8]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d038      	beq.n	800be12 <_malloc_r+0xf6>
 800bda0:	685a      	ldr	r2, [r3, #4]
 800bda2:	42a2      	cmp	r2, r4
 800bda4:	d12b      	bne.n	800bdfe <_malloc_r+0xe2>
 800bda6:	2200      	movs	r2, #0
 800bda8:	605a      	str	r2, [r3, #4]
 800bdaa:	e00f      	b.n	800bdcc <_malloc_r+0xb0>
 800bdac:	6822      	ldr	r2, [r4, #0]
 800bdae:	1b52      	subs	r2, r2, r5
 800bdb0:	d41f      	bmi.n	800bdf2 <_malloc_r+0xd6>
 800bdb2:	2a0b      	cmp	r2, #11
 800bdb4:	d917      	bls.n	800bde6 <_malloc_r+0xca>
 800bdb6:	1961      	adds	r1, r4, r5
 800bdb8:	42a3      	cmp	r3, r4
 800bdba:	6025      	str	r5, [r4, #0]
 800bdbc:	bf18      	it	ne
 800bdbe:	6059      	strne	r1, [r3, #4]
 800bdc0:	6863      	ldr	r3, [r4, #4]
 800bdc2:	bf08      	it	eq
 800bdc4:	f8c8 1000 	streq.w	r1, [r8]
 800bdc8:	5162      	str	r2, [r4, r5]
 800bdca:	604b      	str	r3, [r1, #4]
 800bdcc:	4638      	mov	r0, r7
 800bdce:	f104 060b 	add.w	r6, r4, #11
 800bdd2:	f000 f829 	bl	800be28 <__malloc_unlock>
 800bdd6:	f026 0607 	bic.w	r6, r6, #7
 800bdda:	1d23      	adds	r3, r4, #4
 800bddc:	1af2      	subs	r2, r6, r3
 800bdde:	d0ae      	beq.n	800bd3e <_malloc_r+0x22>
 800bde0:	1b9b      	subs	r3, r3, r6
 800bde2:	50a3      	str	r3, [r4, r2]
 800bde4:	e7ab      	b.n	800bd3e <_malloc_r+0x22>
 800bde6:	42a3      	cmp	r3, r4
 800bde8:	6862      	ldr	r2, [r4, #4]
 800bdea:	d1dd      	bne.n	800bda8 <_malloc_r+0x8c>
 800bdec:	f8c8 2000 	str.w	r2, [r8]
 800bdf0:	e7ec      	b.n	800bdcc <_malloc_r+0xb0>
 800bdf2:	4623      	mov	r3, r4
 800bdf4:	6864      	ldr	r4, [r4, #4]
 800bdf6:	e7ac      	b.n	800bd52 <_malloc_r+0x36>
 800bdf8:	4634      	mov	r4, r6
 800bdfa:	6876      	ldr	r6, [r6, #4]
 800bdfc:	e7b4      	b.n	800bd68 <_malloc_r+0x4c>
 800bdfe:	4613      	mov	r3, r2
 800be00:	e7cc      	b.n	800bd9c <_malloc_r+0x80>
 800be02:	230c      	movs	r3, #12
 800be04:	603b      	str	r3, [r7, #0]
 800be06:	4638      	mov	r0, r7
 800be08:	f000 f80e 	bl	800be28 <__malloc_unlock>
 800be0c:	e797      	b.n	800bd3e <_malloc_r+0x22>
 800be0e:	6025      	str	r5, [r4, #0]
 800be10:	e7dc      	b.n	800bdcc <_malloc_r+0xb0>
 800be12:	605b      	str	r3, [r3, #4]
 800be14:	deff      	udf	#255	; 0xff
 800be16:	bf00      	nop
 800be18:	20005750 	.word	0x20005750

0800be1c <__malloc_lock>:
 800be1c:	4801      	ldr	r0, [pc, #4]	; (800be24 <__malloc_lock+0x8>)
 800be1e:	f000 b84b 	b.w	800beb8 <__retarget_lock_acquire_recursive>
 800be22:	bf00      	nop
 800be24:	20005894 	.word	0x20005894

0800be28 <__malloc_unlock>:
 800be28:	4801      	ldr	r0, [pc, #4]	; (800be30 <__malloc_unlock+0x8>)
 800be2a:	f000 b846 	b.w	800beba <__retarget_lock_release_recursive>
 800be2e:	bf00      	nop
 800be30:	20005894 	.word	0x20005894

0800be34 <memset>:
 800be34:	4402      	add	r2, r0
 800be36:	4603      	mov	r3, r0
 800be38:	4293      	cmp	r3, r2
 800be3a:	d100      	bne.n	800be3e <memset+0xa>
 800be3c:	4770      	bx	lr
 800be3e:	f803 1b01 	strb.w	r1, [r3], #1
 800be42:	e7f9      	b.n	800be38 <memset+0x4>

0800be44 <_sbrk_r>:
 800be44:	b538      	push	{r3, r4, r5, lr}
 800be46:	4d06      	ldr	r5, [pc, #24]	; (800be60 <_sbrk_r+0x1c>)
 800be48:	2300      	movs	r3, #0
 800be4a:	4604      	mov	r4, r0
 800be4c:	4608      	mov	r0, r1
 800be4e:	602b      	str	r3, [r5, #0]
 800be50:	f7f6 f94c 	bl	80020ec <_sbrk>
 800be54:	1c43      	adds	r3, r0, #1
 800be56:	d102      	bne.n	800be5e <_sbrk_r+0x1a>
 800be58:	682b      	ldr	r3, [r5, #0]
 800be5a:	b103      	cbz	r3, 800be5e <_sbrk_r+0x1a>
 800be5c:	6023      	str	r3, [r4, #0]
 800be5e:	bd38      	pop	{r3, r4, r5, pc}
 800be60:	20005890 	.word	0x20005890

0800be64 <__errno>:
 800be64:	4b01      	ldr	r3, [pc, #4]	; (800be6c <__errno+0x8>)
 800be66:	6818      	ldr	r0, [r3, #0]
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	2000026c 	.word	0x2000026c

0800be70 <__libc_init_array>:
 800be70:	b570      	push	{r4, r5, r6, lr}
 800be72:	4d0d      	ldr	r5, [pc, #52]	; (800bea8 <__libc_init_array+0x38>)
 800be74:	4c0d      	ldr	r4, [pc, #52]	; (800beac <__libc_init_array+0x3c>)
 800be76:	1b64      	subs	r4, r4, r5
 800be78:	10a4      	asrs	r4, r4, #2
 800be7a:	2600      	movs	r6, #0
 800be7c:	42a6      	cmp	r6, r4
 800be7e:	d109      	bne.n	800be94 <__libc_init_array+0x24>
 800be80:	4d0b      	ldr	r5, [pc, #44]	; (800beb0 <__libc_init_array+0x40>)
 800be82:	4c0c      	ldr	r4, [pc, #48]	; (800beb4 <__libc_init_array+0x44>)
 800be84:	f000 f874 	bl	800bf70 <_init>
 800be88:	1b64      	subs	r4, r4, r5
 800be8a:	10a4      	asrs	r4, r4, #2
 800be8c:	2600      	movs	r6, #0
 800be8e:	42a6      	cmp	r6, r4
 800be90:	d105      	bne.n	800be9e <__libc_init_array+0x2e>
 800be92:	bd70      	pop	{r4, r5, r6, pc}
 800be94:	f855 3b04 	ldr.w	r3, [r5], #4
 800be98:	4798      	blx	r3
 800be9a:	3601      	adds	r6, #1
 800be9c:	e7ee      	b.n	800be7c <__libc_init_array+0xc>
 800be9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bea2:	4798      	blx	r3
 800bea4:	3601      	adds	r6, #1
 800bea6:	e7f2      	b.n	800be8e <__libc_init_array+0x1e>
 800bea8:	0800c004 	.word	0x0800c004
 800beac:	0800c004 	.word	0x0800c004
 800beb0:	0800c004 	.word	0x0800c004
 800beb4:	0800c014 	.word	0x0800c014

0800beb8 <__retarget_lock_acquire_recursive>:
 800beb8:	4770      	bx	lr

0800beba <__retarget_lock_release_recursive>:
 800beba:	4770      	bx	lr

0800bebc <memcpy>:
 800bebc:	440a      	add	r2, r1
 800bebe:	4291      	cmp	r1, r2
 800bec0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bec4:	d100      	bne.n	800bec8 <memcpy+0xc>
 800bec6:	4770      	bx	lr
 800bec8:	b510      	push	{r4, lr}
 800beca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bece:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bed2:	4291      	cmp	r1, r2
 800bed4:	d1f9      	bne.n	800beca <memcpy+0xe>
 800bed6:	bd10      	pop	{r4, pc}

0800bed8 <_free_r>:
 800bed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800beda:	2900      	cmp	r1, #0
 800bedc:	d044      	beq.n	800bf68 <_free_r+0x90>
 800bede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bee2:	9001      	str	r0, [sp, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f1a1 0404 	sub.w	r4, r1, #4
 800beea:	bfb8      	it	lt
 800beec:	18e4      	addlt	r4, r4, r3
 800beee:	f7ff ff95 	bl	800be1c <__malloc_lock>
 800bef2:	4a1e      	ldr	r2, [pc, #120]	; (800bf6c <_free_r+0x94>)
 800bef4:	9801      	ldr	r0, [sp, #4]
 800bef6:	6813      	ldr	r3, [r2, #0]
 800bef8:	b933      	cbnz	r3, 800bf08 <_free_r+0x30>
 800befa:	6063      	str	r3, [r4, #4]
 800befc:	6014      	str	r4, [r2, #0]
 800befe:	b003      	add	sp, #12
 800bf00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf04:	f7ff bf90 	b.w	800be28 <__malloc_unlock>
 800bf08:	42a3      	cmp	r3, r4
 800bf0a:	d908      	bls.n	800bf1e <_free_r+0x46>
 800bf0c:	6825      	ldr	r5, [r4, #0]
 800bf0e:	1961      	adds	r1, r4, r5
 800bf10:	428b      	cmp	r3, r1
 800bf12:	bf01      	itttt	eq
 800bf14:	6819      	ldreq	r1, [r3, #0]
 800bf16:	685b      	ldreq	r3, [r3, #4]
 800bf18:	1949      	addeq	r1, r1, r5
 800bf1a:	6021      	streq	r1, [r4, #0]
 800bf1c:	e7ed      	b.n	800befa <_free_r+0x22>
 800bf1e:	461a      	mov	r2, r3
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	b10b      	cbz	r3, 800bf28 <_free_r+0x50>
 800bf24:	42a3      	cmp	r3, r4
 800bf26:	d9fa      	bls.n	800bf1e <_free_r+0x46>
 800bf28:	6811      	ldr	r1, [r2, #0]
 800bf2a:	1855      	adds	r5, r2, r1
 800bf2c:	42a5      	cmp	r5, r4
 800bf2e:	d10b      	bne.n	800bf48 <_free_r+0x70>
 800bf30:	6824      	ldr	r4, [r4, #0]
 800bf32:	4421      	add	r1, r4
 800bf34:	1854      	adds	r4, r2, r1
 800bf36:	42a3      	cmp	r3, r4
 800bf38:	6011      	str	r1, [r2, #0]
 800bf3a:	d1e0      	bne.n	800befe <_free_r+0x26>
 800bf3c:	681c      	ldr	r4, [r3, #0]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	6053      	str	r3, [r2, #4]
 800bf42:	440c      	add	r4, r1
 800bf44:	6014      	str	r4, [r2, #0]
 800bf46:	e7da      	b.n	800befe <_free_r+0x26>
 800bf48:	d902      	bls.n	800bf50 <_free_r+0x78>
 800bf4a:	230c      	movs	r3, #12
 800bf4c:	6003      	str	r3, [r0, #0]
 800bf4e:	e7d6      	b.n	800befe <_free_r+0x26>
 800bf50:	6825      	ldr	r5, [r4, #0]
 800bf52:	1961      	adds	r1, r4, r5
 800bf54:	428b      	cmp	r3, r1
 800bf56:	bf04      	itt	eq
 800bf58:	6819      	ldreq	r1, [r3, #0]
 800bf5a:	685b      	ldreq	r3, [r3, #4]
 800bf5c:	6063      	str	r3, [r4, #4]
 800bf5e:	bf04      	itt	eq
 800bf60:	1949      	addeq	r1, r1, r5
 800bf62:	6021      	streq	r1, [r4, #0]
 800bf64:	6054      	str	r4, [r2, #4]
 800bf66:	e7ca      	b.n	800befe <_free_r+0x26>
 800bf68:	b003      	add	sp, #12
 800bf6a:	bd30      	pop	{r4, r5, pc}
 800bf6c:	20005750 	.word	0x20005750

0800bf70 <_init>:
 800bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf72:	bf00      	nop
 800bf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf76:	bc08      	pop	{r3}
 800bf78:	469e      	mov	lr, r3
 800bf7a:	4770      	bx	lr

0800bf7c <_fini>:
 800bf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf7e:	bf00      	nop
 800bf80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf82:	bc08      	pop	{r3}
 800bf84:	469e      	mov	lr, r3
 800bf86:	4770      	bx	lr
