
CAN_sniffer_blue_pill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000348c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003598  08003598  00013598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035c4  080035c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080035c4  080035c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035c4  080035c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035c4  080035c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035c8  080035c8  000135c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  080035d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080035d8  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009634  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b34  00000000  00000000  000296ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000838  00000000  00000000  0002b1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000645  00000000  00000000  0002ba18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019164  00000000  00000000  0002c05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000096a1  00000000  00000000  000451c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000864a7  00000000  00000000  0004e862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020e0  00000000  00000000  000d4d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000d6dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003580 	.word	0x08003580

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003580 	.word	0x08003580

0800014c <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm>:
#include "CANmsg.h"

#define MASK_GET_NODE_ID 0x00000007

bool CANmsg_make_from_raw_data(CANmsg_t *me, uint8_t *rxData, uint32_t DLC, uint32_t StdId)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	603b      	str	r3, [r7, #0]
	if( (rxData == 0) || (me == 0) || (DLC > MAX_LEN_PAYLOAD_CAN) )
 800015a:	68bb      	ldr	r3, [r7, #8]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d005      	beq.n	800016c <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm+0x20>
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	2b00      	cmp	r3, #0
 8000164:	d002      	beq.n	800016c <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm+0x20>
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2b08      	cmp	r3, #8
 800016a:	d901      	bls.n	8000170 <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm+0x24>
	{
		return false;
 800016c:	2300      	movs	r3, #0
 800016e:	e00f      	b.n	8000190 <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm+0x44>
	}

	me->stdID = StdId;
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	683a      	ldr	r2, [r7, #0]
 8000174:	60da      	str	r2, [r3, #12]
	me->lenPayload = DLC;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	687a      	ldr	r2, [r7, #4]
 800017a:	609a      	str	r2, [r3, #8]
	if(DLC>0)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d005      	beq.n	800018e <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm+0x42>
	{
		memcpy(me->payload, rxData, DLC);
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	687a      	ldr	r2, [r7, #4]
 8000186:	68b9      	ldr	r1, [r7, #8]
 8000188:	4618      	mov	r0, r3
 800018a:	f003 f9eb 	bl	8003564 <memcpy>
	}
	return true;
 800018e:	2301      	movs	r3, #1
}
 8000190:	4618      	mov	r0, r3
 8000192:	3710      	adds	r7, #16
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}

08000198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 800019e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  circ_buffer<CANmsg_t, 30> bufferCanMsgs;
 80001a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80001a4:	4618      	mov	r0, r3
 80001a6:	f000 fa3e 	bl	8000626 <_ZN11circ_bufferI8CANmsg_tLm30EtEC1Ev>
  uint32_t fifoFillLevel;
  CAN_RxHeaderTypeDef rxHeader;
  uint8_t rxData[MAX_LEN_PAYLOAD_CAN];
  CANmsg_t canMsg;
  uint8_t uartBuffer[LEN_UART_BUFFER_SIZE];
  uint32_t lenUartBuffer = 0;
 80001aa:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80001ae:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]

  uint8_t msgLen;
  uint8_t msgCmd;
  uint32_t txMailbox;

  CANmsgSyncHeader.DLC = 0;
 80001b6:	4b6b      	ldr	r3, [pc, #428]	; (8000364 <main+0x1cc>)
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]
  CANmsgSyncHeader.ExtId = 0;
 80001bc:	4b69      	ldr	r3, [pc, #420]	; (8000364 <main+0x1cc>)
 80001be:	2200      	movs	r2, #0
 80001c0:	605a      	str	r2, [r3, #4]
  CANmsgSyncHeader.IDE = CAN_ID_STD;
 80001c2:	4b68      	ldr	r3, [pc, #416]	; (8000364 <main+0x1cc>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	609a      	str	r2, [r3, #8]
  CANmsgSyncHeader.RTR = CAN_RTR_DATA;
 80001c8:	4b66      	ldr	r3, [pc, #408]	; (8000364 <main+0x1cc>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	60da      	str	r2, [r3, #12]
  CANmsgSyncHeader.TransmitGlobalTime = DISABLE;
 80001ce:	4b65      	ldr	r3, [pc, #404]	; (8000364 <main+0x1cc>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	751a      	strb	r2, [r3, #20]
  CANmsgSyncHeader.StdId = 0x00000008;
 80001d4:	4b63      	ldr	r3, [pc, #396]	; (8000364 <main+0x1cc>)
 80001d6:	2208      	movs	r2, #8
 80001d8:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fc49 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f8d1 	bl	8000384 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f9a5 	bl	8000530 <_ZL12MX_GPIO_Initv>
  MX_CAN_Init();
 80001e6:	f000 f91d 	bl	8000424 <_ZL11MX_CAN_Initv>
  MX_USART2_UART_Init();
 80001ea:	f000 f973 	bl	80004d4 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 80001ee:	485e      	ldr	r0, [pc, #376]	; (8000368 <main+0x1d0>)
 80001f0:	f000 fe64 	bl	8000ebc <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001f4:	2102      	movs	r1, #2
 80001f6:	485c      	ldr	r0, [pc, #368]	; (8000368 <main+0x1d0>)
 80001f8:	f001 f8bb 	bl	8001372 <HAL_CAN_ActivateNotification>

  HAL_UART_Receive_IT(&huart2, UARTrxBuffer, 1);
 80001fc:	2201      	movs	r2, #1
 80001fe:	495b      	ldr	r1, [pc, #364]	; (800036c <main+0x1d4>)
 8000200:	485b      	ldr	r0, [pc, #364]	; (8000370 <main+0x1d8>)
 8000202:	f002 fbde 	bl	80029c2 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(newCanMsgs)
 8000206:	4b5b      	ldr	r3, [pc, #364]	; (8000374 <main+0x1dc>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	b2db      	uxtb	r3, r3
 800020c:	2b00      	cmp	r3, #0
 800020e:	bf14      	ite	ne
 8000210:	2301      	movne	r3, #1
 8000212:	2300      	moveq	r3, #0
 8000214:	b2db      	uxtb	r3, r3
 8000216:	2b00      	cmp	r3, #0
 8000218:	d046      	beq.n	80002a8 <main+0x110>
	  {
		  newCanMsgs = 0;
 800021a:	4b56      	ldr	r3, [pc, #344]	; (8000374 <main+0x1dc>)
 800021c:	2200      	movs	r2, #0
 800021e:	701a      	strb	r2, [r3, #0]
		  i = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
		  fifoFillLevel = HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0);
 8000226:	2100      	movs	r1, #0
 8000228:	484f      	ldr	r0, [pc, #316]	; (8000368 <main+0x1d0>)
 800022a:	f001 f87b 	bl	8001324 <HAL_CAN_GetRxFifoFillLevel>
 800022e:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
		  while(i < fifoFillLevel)
 8000232:	e02f      	b.n	8000294 <main+0xfc>
		  {
			  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rxHeader, rxData);
 8000234:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000238:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800023c:	2100      	movs	r1, #0
 800023e:	484a      	ldr	r0, [pc, #296]	; (8000368 <main+0x1d0>)
 8000240:	f000 ff4f 	bl	80010e2 <HAL_CAN_GetRxMessage>
			  if( CANmsg_make_from_raw_data(&canMsg, rxData, rxHeader.DLC, rxHeader.StdId) == true )
 8000244:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000248:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800024c:	691a      	ldr	r2, [r3, #16]
 800024e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000252:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 800025c:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8000260:	f7ff ff74 	bl	800014c <_Z25CANmsg_make_from_raw_dataP8CANmsg_tPhmm>
 8000264:	4603      	mov	r3, r0
 8000266:	2b01      	cmp	r3, #1
 8000268:	bf0c      	ite	eq
 800026a:	2301      	moveq	r3, #1
 800026c:	2300      	movne	r3, #0
 800026e:	b2db      	uxtb	r3, r3
 8000270:	2b00      	cmp	r3, #0
 8000272:	d00a      	beq.n	800028a <main+0xf2>
			  {
				  bufferCanMsgs.write(canMsg);
 8000274:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000278:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800027c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8000280:	68da      	ldr	r2, [r3, #12]
 8000282:	9200      	str	r2, [sp, #0]
 8000284:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000286:	f000 f9eb 	bl	8000660 <_ZN11circ_bufferI8CANmsg_tLm30EtE5writeES0_>
			  }
			  i++;
 800028a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800028e:	3301      	adds	r3, #1
 8000290:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
		  while(i < fifoFillLevel)
 8000294:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8000298:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800029c:	429a      	cmp	r2, r3
 800029e:	d3c9      	bcc.n	8000234 <main+0x9c>
		  }
		  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80002a0:	2102      	movs	r1, #2
 80002a2:	4831      	ldr	r0, [pc, #196]	; (8000368 <main+0x1d0>)
 80002a4:	f001 f865 	bl	8001372 <HAL_CAN_ActivateNotification>
	  }

	  if(!bufferCanMsgs.is_empty())
 80002a8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 fa35 	bl	800071c <_ZN11circ_bufferI8CANmsg_tLm30EtE8is_emptyEv>
 80002b2:	4603      	mov	r3, r0
 80002b4:	f083 0301 	eor.w	r3, r3, #1
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d01c      	beq.n	80002f8 <main+0x160>
	  {
		  bufferCanMsgs.read(&canMsg);
 80002be:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80002c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80002c6:	4611      	mov	r1, r2
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 fa33 	bl	8000734 <_ZN11circ_bufferI8CANmsg_tLm30EtE4readEPS0_>
		  make_uart_msg(&canMsg, uartBuffer, &lenUartBuffer);
 80002ce:	f107 0208 	add.w	r2, r7, #8
 80002d2:	f107 010c 	add.w	r1, r7, #12
 80002d6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 f94a 	bl	8000574 <_Z13make_uart_msgP8CANmsg_tPhPm>
		  HAL_UART_Transmit(&huart2, uartBuffer, lenUartBuffer, TIMEOUT_UART_TX_S);
 80002e0:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80002e4:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	b29a      	uxth	r2, r3
 80002ec:	f107 010c 	add.w	r1, r7, #12
 80002f0:	2364      	movs	r3, #100	; 0x64
 80002f2:	481f      	ldr	r0, [pc, #124]	; (8000370 <main+0x1d8>)
 80002f4:	f002 fa50 	bl	8002798 <HAL_UART_Transmit>
	  }

	  if(newUARTmsg)
 80002f8:	4b1f      	ldr	r3, [pc, #124]	; (8000378 <main+0x1e0>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	2b00      	cmp	r3, #0
 8000300:	bf14      	ite	ne
 8000302:	2301      	movne	r3, #1
 8000304:	2300      	moveq	r3, #0
 8000306:	b2db      	uxtb	r3, r3
 8000308:	2b00      	cmp	r3, #0
 800030a:	f43f af7c 	beq.w	8000206 <main+0x6e>
	  {
		newUARTmsg = 0;
 800030e:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <main+0x1e0>)
 8000310:	2200      	movs	r2, #0
 8000312:	701a      	strb	r2, [r3, #0]
		msgLen = GET_MSG_LEN(UARTrxBuffer);
 8000314:	4b15      	ldr	r3, [pc, #84]	; (800036c <main+0x1d4>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	f887 332f 	strb.w	r3, [r7, #815]	; 0x32f

		if(msgLen > 1)
 800031c:	f897 332f 	ldrb.w	r3, [r7, #815]	; 0x32f
 8000320:	2b01      	cmp	r3, #1
 8000322:	d918      	bls.n	8000356 <main+0x1be>
		{
			HAL_UART_Receive(&huart2, &UARTrxBuffer[1], msgLen-1, 100);
 8000324:	f897 332f 	ldrb.w	r3, [r7, #815]	; 0x32f
 8000328:	b29b      	uxth	r3, r3
 800032a:	3b01      	subs	r3, #1
 800032c:	b29a      	uxth	r2, r3
 800032e:	2364      	movs	r3, #100	; 0x64
 8000330:	4912      	ldr	r1, [pc, #72]	; (800037c <main+0x1e4>)
 8000332:	480f      	ldr	r0, [pc, #60]	; (8000370 <main+0x1d8>)
 8000334:	f002 fab3 	bl	800289e <HAL_UART_Receive>
			msgCmd = GET_MSG_CMD(UARTrxBuffer);
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <main+0x1d4>)
 800033a:	785b      	ldrb	r3, [r3, #1]
 800033c:	f887 332e 	strb.w	r3, [r7, #814]	; 0x32e

			switch(msgCmd)
 8000340:	f897 332e 	ldrb.w	r3, [r7, #814]	; 0x32e
 8000344:	2b01      	cmp	r3, #1
 8000346:	d106      	bne.n	8000356 <main+0x1be>
			{
				case CMD_CAN_SEND_START_MSG:
					HAL_CAN_AddTxMessage(&hcan, &CANmsgSyncHeader, CANmsgSync, &txMailbox);
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <main+0x1e8>)
 800034c:	4905      	ldr	r1, [pc, #20]	; (8000364 <main+0x1cc>)
 800034e:	4806      	ldr	r0, [pc, #24]	; (8000368 <main+0x1d0>)
 8000350:	f000 fdf8 	bl	8000f44 <HAL_CAN_AddTxMessage>

					break;
 8000354:	bf00      	nop
			}
		}
		HAL_UART_Receive_IT(&huart2, UARTrxBuffer, 1);
 8000356:	2201      	movs	r2, #1
 8000358:	4904      	ldr	r1, [pc, #16]	; (800036c <main+0x1d4>)
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <main+0x1d8>)
 800035c:	f002 fb31 	bl	80029c2 <HAL_UART_Receive_IT>
	  if(newCanMsgs)
 8000360:	e751      	b.n	8000206 <main+0x6e>
 8000362:	bf00      	nop
 8000364:	200000dc 	.word	0x200000dc
 8000368:	20000028 	.word	0x20000028
 800036c:	2000009c 	.word	0x2000009c
 8000370:	20000050 	.word	0x20000050
 8000374:	20000098 	.word	0x20000098
 8000378:	20000099 	.word	0x20000099
 800037c:	2000009d 	.word	0x2000009d
 8000380:	200000dc 	.word	0x200000dc

08000384 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b090      	sub	sp, #64	; 0x40
 8000388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038a:	f107 0318 	add.w	r3, r7, #24
 800038e:	2228      	movs	r2, #40	; 0x28
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f003 f8ba 	bl	800350c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003a6:	2301      	movs	r3, #1
 80003a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b4:	2301      	movs	r3, #1
 80003b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b8:	2302      	movs	r3, #2
 80003ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c8:	f107 0318 	add.w	r3, r7, #24
 80003cc:	4618      	mov	r0, r3
 80003ce:	f001 fd83 	bl	8001ed8 <HAL_RCC_OscConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	bf14      	ite	ne
 80003d8:	2301      	movne	r3, #1
 80003da:	2300      	moveq	r3, #0
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80003e2:	f000 f91b 	bl	800061c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e6:	230f      	movs	r3, #15
 80003e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ea:	2302      	movs	r3, #2
 80003ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2102      	movs	r1, #2
 8000400:	4618      	mov	r0, r3
 8000402:	f001 ffeb 	bl	80023dc <HAL_RCC_ClockConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	bf14      	ite	ne
 800040c:	2301      	movne	r3, #1
 800040e:	2300      	moveq	r3, #0
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8000416:	f000 f901 	bl	800061c <Error_Handler>
  }
}
 800041a:	bf00      	nop
 800041c:	3740      	adds	r7, #64	; 0x40
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b08a      	sub	sp, #40	; 0x28
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800042a:	4b28      	ldr	r3, [pc, #160]	; (80004cc <_ZL11MX_CAN_Initv+0xa8>)
 800042c:	4a28      	ldr	r2, [pc, #160]	; (80004d0 <_ZL11MX_CAN_Initv+0xac>)
 800042e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8000430:	4b26      	ldr	r3, [pc, #152]	; (80004cc <_ZL11MX_CAN_Initv+0xa8>)
 8000432:	2203      	movs	r2, #3
 8000434:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000436:	4b25      	ldr	r3, [pc, #148]	; (80004cc <_ZL11MX_CAN_Initv+0xa8>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 800043c:	4b23      	ldr	r3, [pc, #140]	; (80004cc <_ZL11MX_CAN_Initv+0xa8>)
 800043e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000442:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000444:	4b21      	ldr	r3, [pc, #132]	; (80004cc <_ZL11MX_CAN_Initv+0xa8>)
 8000446:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800044a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800044c:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <_ZL11MX_CAN_Initv+0xa8>)
 800044e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000452:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000454:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <_ZL11MX_CAN_Initv+0xa8>)
 8000456:	2200      	movs	r2, #0
 8000458:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800045a:	4b1c      	ldr	r3, [pc, #112]	; (80004cc <_ZL11MX_CAN_Initv+0xa8>)
 800045c:	2200      	movs	r2, #0
 800045e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <_ZL11MX_CAN_Initv+0xa8>)
 8000462:	2200      	movs	r2, #0
 8000464:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000466:	4b19      	ldr	r3, [pc, #100]	; (80004cc <_ZL11MX_CAN_Initv+0xa8>)
 8000468:	2200      	movs	r2, #0
 800046a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800046c:	4b17      	ldr	r3, [pc, #92]	; (80004cc <_ZL11MX_CAN_Initv+0xa8>)
 800046e:	2200      	movs	r2, #0
 8000470:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000472:	4b16      	ldr	r3, [pc, #88]	; (80004cc <_ZL11MX_CAN_Initv+0xa8>)
 8000474:	2200      	movs	r2, #0
 8000476:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000478:	4814      	ldr	r0, [pc, #80]	; (80004cc <_ZL11MX_CAN_Initv+0xa8>)
 800047a:	f000 fb5b 	bl	8000b34 <HAL_CAN_Init>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	bf14      	ite	ne
 8000484:	2301      	movne	r3, #1
 8000486:	2300      	moveq	r3, #0
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <_ZL11MX_CAN_Initv+0x6e>
  {
    Error_Handler();
 800048e:	f000 f8c5 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	canFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000492:	2301      	movs	r3, #1
 8000494:	623b      	str	r3, [r7, #32]
	canFilter.FilterBank = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]
	canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 800049a:	2300      	movs	r3, #0
 800049c:	613b      	str	r3, [r7, #16]
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800049e:	2300      	movs	r3, #0
 80004a0:	61bb      	str	r3, [r7, #24]
	canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80004a2:	2301      	movs	r3, #1
 80004a4:	61fb      	str	r3, [r7, #28]
	canFilter.FilterMaskIdHigh = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60bb      	str	r3, [r7, #8]
	canFilter.FilterMaskIdLow = 0x0000;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
	canFilter.FilterIdHigh = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	603b      	str	r3, [r7, #0]
	canFilter.FilterIdLow = 0x0000;
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]
	canFilter.SlaveStartFilterBank = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canFilter);
 80004ba:	463b      	mov	r3, r7
 80004bc:	4619      	mov	r1, r3
 80004be:	4803      	ldr	r0, [pc, #12]	; (80004cc <_ZL11MX_CAN_Initv+0xa8>)
 80004c0:	f000 fc33 	bl	8000d2a <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80004c4:	bf00      	nop
 80004c6:	3728      	adds	r7, #40	; 0x28
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000028 	.word	0x20000028
 80004d0:	40006400 	.word	0x40006400

080004d4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <_ZL19MX_USART2_UART_Initv+0x54>)
 80004da:	4a14      	ldr	r2, [pc, #80]	; (800052c <_ZL19MX_USART2_UART_Initv+0x58>)
 80004dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <_ZL19MX_USART2_UART_Initv+0x54>)
 80004e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <_ZL19MX_USART2_UART_Initv+0x54>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <_ZL19MX_USART2_UART_Initv+0x54>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004f2:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <_ZL19MX_USART2_UART_Initv+0x54>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <_ZL19MX_USART2_UART_Initv+0x54>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800050a:	4807      	ldr	r0, [pc, #28]	; (8000528 <_ZL19MX_USART2_UART_Initv+0x54>)
 800050c:	f002 f8f4 	bl	80026f8 <HAL_UART_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	bf14      	ite	ne
 8000516:	2301      	movne	r3, #1
 8000518:	2300      	moveq	r3, #0
 800051a:	b2db      	uxtb	r3, r3
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000520:	f000 f87c 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000050 	.word	0x20000050
 800052c:	40004400 	.word	0x40004400

08000530 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <_ZL12MX_GPIO_Initv+0x40>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <_ZL12MX_GPIO_Initv+0x40>)
 800053c:	f043 0320 	orr.w	r3, r3, #32
 8000540:	6193      	str	r3, [r2, #24]
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <_ZL12MX_GPIO_Initv+0x40>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f003 0320 	and.w	r3, r3, #32
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <_ZL12MX_GPIO_Initv+0x40>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a07      	ldr	r2, [pc, #28]	; (8000570 <_ZL12MX_GPIO_Initv+0x40>)
 8000554:	f043 0304 	orr.w	r3, r3, #4
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <_ZL12MX_GPIO_Initv+0x40>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0304 	and.w	r3, r3, #4
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	40021000 	.word	0x40021000

08000574 <_Z13make_uart_msgP8CANmsg_tPhPm>:

/* USER CODE BEGIN 4 */

void make_uart_msg(CANmsg_t *canMsg, uint8_t *uartBuffer, uint32_t *lenUartBuffer)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	memcpy(uartBuffer, &canMsg->stdID, 4);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	330c      	adds	r3, #12
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	601a      	str	r2, [r3, #0]
	memcpy(&uartBuffer[4], &canMsg->lenPayload, 4);
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	3304      	adds	r3, #4
 8000590:	68fa      	ldr	r2, [r7, #12]
 8000592:	3208      	adds	r2, #8
 8000594:	6812      	ldr	r2, [r2, #0]
 8000596:	601a      	str	r2, [r3, #0]
	memcpy(&uartBuffer[8], canMsg->payload, canMsg->lenPayload);
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	f103 0008 	add.w	r0, r3, #8
 800059e:	68f9      	ldr	r1, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	461a      	mov	r2, r3
 80005a6:	f002 ffdd 	bl	8003564 <memcpy>
	uartBuffer[canMsg->lenPayload + 8] = '\r';
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	3308      	adds	r3, #8
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	4413      	add	r3, r2
 80005b4:	220d      	movs	r2, #13
 80005b6:	701a      	strb	r2, [r3, #0]
	uartBuffer[canMsg->lenPayload + 9] = '\n';
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	3309      	adds	r3, #9
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	4413      	add	r3, r2
 80005c2:	220a      	movs	r2, #10
 80005c4:	701a      	strb	r2, [r3, #0]

	(*lenUartBuffer) = canMsg->lenPayload + 10;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	f103 020a 	add.w	r2, r3, #10
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	601a      	str	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	newCanMsgs = 1;
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005ea:	2102      	movs	r1, #2
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 fee5 	bl	80013bc <HAL_CAN_DeactivateNotification>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000098 	.word	0x20000098

08000600 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	newUARTmsg = 1;
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <HAL_UART_RxCpltCallback+0x18>)
 800060a:	2201      	movs	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	20000099 	.word	0x20000099

0800061c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000624:	e7fe      	b.n	8000624 <Error_Handler+0x8>

08000626 <_ZN11circ_bufferI8CANmsg_tLm30EtEC1Ev>:
                bool mEmpty_;

        };

        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
        {
            mFull_ = false;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
            mEmpty_ = true;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2201      	movs	r2, #1
 800063a:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
            mHead_ = 0;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2200      	movs	r2, #0
 8000642:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
            mTail_ = 0;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	f8a3 21e6 	strh.w	r2, [r3, #486]	; 0x1e6
            mSize_ = 0;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2200      	movs	r2, #0
 8000652:	801a      	strh	r2, [r3, #0]
            
        }
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <_ZN11circ_bufferI8CANmsg_tLm30EtE5writeES0_>:

        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::write(bufferDataType data)
 8000660:	b084      	sub	sp, #16
 8000662:	b490      	push	{r4, r7}
 8000664:	b082      	sub	sp, #8
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
 800066a:	f107 0014 	add.w	r0, r7, #20
 800066e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
            //if (mFull_){
            //    bufferOverloaded = true;
            //    return EXIT_ERROR;
            //}

            mBuffer_[mHead_] = data;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f8b3 31e4 	ldrh.w	r3, [r3, #484]	; 0x1e4
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	011b      	lsls	r3, r3, #4
 800067c:	4413      	add	r3, r2
 800067e:	1d1c      	adds	r4, r3, #4
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000686:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            mEmpty_ = false;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2200      	movs	r2, #0
 800068e:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9


            if(++mHead_ == sCapacity_){
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f8b3 31e4 	ldrh.w	r3, [r3, #484]	; 0x1e4
 8000698:	3301      	adds	r3, #1
 800069a:	b29a      	uxth	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f8b3 31e4 	ldrh.w	r3, [r3, #484]	; 0x1e4
 80006a8:	2b1e      	cmp	r3, #30
 80006aa:	bf0c      	ite	eq
 80006ac:	2301      	moveq	r3, #1
 80006ae:	2300      	movne	r3, #0
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d003      	beq.n	80006be <_ZN11circ_bufferI8CANmsg_tLm30EtE5writeES0_+0x5e>
                mHead_ = 0;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
            } 

            // In case buffer was full, tail object must be updated so that old data is overwritten, ow check is buffer is full
            if(mFull_ == true){
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f893 31e8 	ldrb.w	r3, [r3, #488]	; 0x1e8
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d10f      	bne.n	80006e8 <_ZN11circ_bufferI8CANmsg_tLm30EtE5writeES0_+0x88>
                mTail_ = mTail_ + 1 == sCapacity_ ? 0 : mTail_ + 1; // mTail_ = ++mTail_ == sCapacity_ ? 0 : mTail_;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f8b3 31e6 	ldrh.w	r3, [r3, #486]	; 0x1e6
 80006ce:	2b1d      	cmp	r3, #29
 80006d0:	d005      	beq.n	80006de <_ZN11circ_bufferI8CANmsg_tLm30EtE5writeES0_+0x7e>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f8b3 31e6 	ldrh.w	r3, [r3, #486]	; 0x1e6
 80006d8:	3301      	adds	r3, #1
 80006da:	b29a      	uxth	r2, r3
 80006dc:	e000      	b.n	80006e0 <_ZN11circ_bufferI8CANmsg_tLm30EtE5writeES0_+0x80>
 80006de:	2200      	movs	r2, #0
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f8a3 21e6 	strh.w	r2, [r3, #486]	; 0x1e6
 80006e6:	e012      	b.n	800070e <_ZN11circ_bufferI8CANmsg_tLm30EtE5writeES0_+0xae>
            }else if(++mSize_ == sCapacity_){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	801a      	strh	r2, [r3, #0]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	2b1e      	cmp	r3, #30
 80006fa:	bf0c      	ite	eq
 80006fc:	2301      	moveq	r3, #1
 80006fe:	2300      	movne	r3, #0
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d003      	beq.n	800070e <_ZN11circ_bufferI8CANmsg_tLm30EtE5writeES0_+0xae>
                mFull_ = true;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2201      	movs	r2, #1
 800070a:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
            }
            return EXIT_OK;
 800070e:	2301      	movs	r3, #1
        }
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bc90      	pop	{r4, r7}
 8000718:	b004      	add	sp, #16
 800071a:	4770      	bx	lr

0800071c <_ZN11circ_bufferI8CANmsg_tLm30EtE8is_emptyEv>:
        // bufferDataType* circ_buffer<bufferDataType, N, sizeDataType>::get_tail_ptr(){
        //     return &mBuffer_[mTail_];
        // }

        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::is_empty(){
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
            return mEmpty_;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f893 31e9 	ldrb.w	r3, [r3, #489]	; 0x1e9
        }
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <_ZN11circ_bufferI8CANmsg_tLm30EtE4readEPS0_>:
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::read(bufferDataType* pData)
 8000734:	b490      	push	{r4, r7}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
            if (mEmpty_){
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f893 31e9 	ldrb.w	r3, [r3, #489]	; 0x1e9
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <_ZN11circ_bufferI8CANmsg_tLm30EtE4readEPS0_+0x18>
                return EXIT_ERROR;
 8000748:	2300      	movs	r3, #0
 800074a:	e039      	b.n	80007c0 <_ZN11circ_bufferI8CANmsg_tLm30EtE4readEPS0_+0x8c>
            *pData = mBuffer_[mTail_];
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f8b3 31e6 	ldrh.w	r3, [r3, #486]	; 0x1e6
 8000752:	6839      	ldr	r1, [r7, #0]
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	011b      	lsls	r3, r3, #4
 8000758:	4413      	add	r3, r2
 800075a:	460c      	mov	r4, r1
 800075c:	3304      	adds	r3, #4
 800075e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000760:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            mFull_ = false;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
            if(--mSize_ == 0){
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	3b01      	subs	r3, #1
 8000772:	b29a      	uxth	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	801a      	strh	r2, [r3, #0]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	bf0c      	ite	eq
 8000780:	2301      	moveq	r3, #1
 8000782:	2300      	movne	r3, #0
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d003      	beq.n	8000792 <_ZN11circ_bufferI8CANmsg_tLm30EtE4readEPS0_+0x5e>
                mEmpty_ = true;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
            if(++mTail_ == sCapacity_){
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f8b3 31e6 	ldrh.w	r3, [r3, #486]	; 0x1e6
 8000798:	3301      	adds	r3, #1
 800079a:	b29a      	uxth	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f8a3 21e6 	strh.w	r2, [r3, #486]	; 0x1e6
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f8b3 31e6 	ldrh.w	r3, [r3, #486]	; 0x1e6
 80007a8:	2b1e      	cmp	r3, #30
 80007aa:	bf0c      	ite	eq
 80007ac:	2301      	moveq	r3, #1
 80007ae:	2300      	movne	r3, #0
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d003      	beq.n	80007be <_ZN11circ_bufferI8CANmsg_tLm30EtE4readEPS0_+0x8a>
                mTail_ = 0;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2200      	movs	r2, #0
 80007ba:	f8a3 21e6 	strh.w	r2, [r3, #486]	; 0x1e6
            return EXIT_OK;
 80007be:	2301      	movs	r3, #1
        }
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc90      	pop	{r4, r7}
 80007c8:	4770      	bx	lr
	...

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_MspInit+0x5c>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a14      	ldr	r2, [pc, #80]	; (8000828 <HAL_MspInit+0x5c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6193      	str	r3, [r2, #24]
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_MspInit+0x5c>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x5c>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <HAL_MspInit+0x5c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_MspInit+0x5c>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_MspInit+0x60>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_MspInit+0x60>)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40021000 	.word	0x40021000
 800082c:	40010000 	.word	0x40010000

08000830 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a24      	ldr	r2, [pc, #144]	; (80008dc <HAL_CAN_MspInit+0xac>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d141      	bne.n	80008d4 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000850:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <HAL_CAN_MspInit+0xb0>)
 8000852:	69db      	ldr	r3, [r3, #28]
 8000854:	4a22      	ldr	r2, [pc, #136]	; (80008e0 <HAL_CAN_MspInit+0xb0>)
 8000856:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800085a:	61d3      	str	r3, [r2, #28]
 800085c:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <HAL_CAN_MspInit+0xb0>)
 800085e:	69db      	ldr	r3, [r3, #28]
 8000860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <HAL_CAN_MspInit+0xb0>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <HAL_CAN_MspInit+0xb0>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <HAL_CAN_MspInit+0xb0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000880:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000884:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	4619      	mov	r1, r3
 8000894:	4813      	ldr	r0, [pc, #76]	; (80008e4 <HAL_CAN_MspInit+0xb4>)
 8000896:	f001 f99b 	bl	8001bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800089a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <HAL_CAN_MspInit+0xb4>)
 80008b0:	f001 f98e 	bl	8001bd0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2014      	movs	r0, #20
 80008ba:	f001 f8a0 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80008be:	2014      	movs	r0, #20
 80008c0:	f001 f8b9 	bl	8001a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2015      	movs	r0, #21
 80008ca:	f001 f898 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80008ce:	2015      	movs	r0, #21
 80008d0:	f001 f8b1 	bl	8001a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80008d4:	bf00      	nop
 80008d6:	3720      	adds	r7, #32
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40006400 	.word	0x40006400
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40010800 	.word	0x40010800

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a1f      	ldr	r2, [pc, #124]	; (8000980 <HAL_UART_MspInit+0x98>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d137      	bne.n	8000978 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000908:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <HAL_UART_MspInit+0x9c>)
 800090a:	69db      	ldr	r3, [r3, #28]
 800090c:	4a1d      	ldr	r2, [pc, #116]	; (8000984 <HAL_UART_MspInit+0x9c>)
 800090e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000912:	61d3      	str	r3, [r2, #28]
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <HAL_UART_MspInit+0x9c>)
 8000916:	69db      	ldr	r3, [r3, #28]
 8000918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <HAL_UART_MspInit+0x9c>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a17      	ldr	r2, [pc, #92]	; (8000984 <HAL_UART_MspInit+0x9c>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_UART_MspInit+0x9c>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000938:	2304      	movs	r3, #4
 800093a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	4619      	mov	r1, r3
 800094a:	480f      	ldr	r0, [pc, #60]	; (8000988 <HAL_UART_MspInit+0xa0>)
 800094c:	f001 f940 	bl	8001bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000950:	2308      	movs	r3, #8
 8000952:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4619      	mov	r1, r3
 8000962:	4809      	ldr	r0, [pc, #36]	; (8000988 <HAL_UART_MspInit+0xa0>)
 8000964:	f001 f934 	bl	8001bd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	2026      	movs	r0, #38	; 0x26
 800096e:	f001 f846 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000972:	2026      	movs	r0, #38	; 0x26
 8000974:	f001 f85f 	bl	8001a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000978:	bf00      	nop
 800097a:	3720      	adds	r7, #32
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40004400 	.word	0x40004400
 8000984:	40021000 	.word	0x40021000
 8000988:	40010800 	.word	0x40010800

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <MemManage_Handler+0x4>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <UsageFault_Handler+0x4>

080009aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr

080009b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d2:	f000 f893 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80009e2:	f000 fd11 	bl	8001408 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000028 	.word	0x20000028

080009f0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <CAN1_RX1_IRQHandler+0x10>)
 80009f6:	f000 fd07 	bl	8001408 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000028 	.word	0x20000028

08000a04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <USART2_IRQHandler+0x10>)
 8000a0a:	f001 ffff 	bl	8002a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000050 	.word	0x20000050

08000a18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a24:	f7ff fff8 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a28:	480b      	ldr	r0, [pc, #44]	; (8000a58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a2a:	490c      	ldr	r1, [pc, #48]	; (8000a5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	; (8000a60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a40:	4c09      	ldr	r4, [pc, #36]	; (8000a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f002 fd65 	bl	800351c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a52:	f7ff fba1 	bl	8000198 <main>
  bx lr
 8000a56:	4770      	bx	lr
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a60:	080035cc 	.word	0x080035cc
  ldr r2, =_sbss
 8000a64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a68:	200000f8 	.word	0x200000f8

08000a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC1_2_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_Init+0x28>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_Init+0x28>)
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 ffb1 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f808 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff fe9e 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40022000 	.word	0x40022000

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x54>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 ffc9 	bl	8001a52 <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00e      	b.n	8000ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d80a      	bhi.n	8000ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad8:	f000 ff91 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <HAL_InitTick+0x5c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_IncTick+0x1c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x20>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <HAL_IncTick+0x20>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	200000f4 	.word	0x200000f4

08000b20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b02      	ldr	r3, [pc, #8]	; (8000b30 <HAL_GetTick+0x10>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	200000f4 	.word	0x200000f4

08000b34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d101      	bne.n	8000b46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e0ed      	b.n	8000d22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d102      	bne.n	8000b58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff fe6c 	bl	8000830 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f042 0201 	orr.w	r2, r2, #1
 8000b66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b68:	f7ff ffda 	bl	8000b20 <HAL_GetTick>
 8000b6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b6e:	e012      	b.n	8000b96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b70:	f7ff ffd6 	bl	8000b20 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	2b0a      	cmp	r3, #10
 8000b7c:	d90b      	bls.n	8000b96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2205      	movs	r2, #5
 8000b8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e0c5      	b.n	8000d22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d0e5      	beq.n	8000b70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 0202 	bic.w	r2, r2, #2
 8000bb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bb4:	f7ff ffb4 	bl	8000b20 <HAL_GetTick>
 8000bb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bba:	e012      	b.n	8000be2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bbc:	f7ff ffb0 	bl	8000b20 <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2b0a      	cmp	r3, #10
 8000bc8:	d90b      	bls.n	8000be2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2205      	movs	r2, #5
 8000bda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e09f      	b.n	8000d22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1e5      	bne.n	8000bbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7e1b      	ldrb	r3, [r3, #24]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d108      	bne.n	8000c0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	e007      	b.n	8000c1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7e5b      	ldrb	r3, [r3, #25]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d108      	bne.n	8000c34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	e007      	b.n	8000c44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7e9b      	ldrb	r3, [r3, #26]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d108      	bne.n	8000c5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f042 0220 	orr.w	r2, r2, #32
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	e007      	b.n	8000c6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f022 0220 	bic.w	r2, r2, #32
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7edb      	ldrb	r3, [r3, #27]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d108      	bne.n	8000c88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f022 0210 	bic.w	r2, r2, #16
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e007      	b.n	8000c98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f042 0210 	orr.w	r2, r2, #16
 8000c96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7f1b      	ldrb	r3, [r3, #28]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d108      	bne.n	8000cb2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f042 0208 	orr.w	r2, r2, #8
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	e007      	b.n	8000cc2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 0208 	bic.w	r2, r2, #8
 8000cc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7f5b      	ldrb	r3, [r3, #29]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d108      	bne.n	8000cdc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f042 0204 	orr.w	r2, r2, #4
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	e007      	b.n	8000cec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0204 	bic.w	r2, r2, #4
 8000cea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	ea42 0103 	orr.w	r1, r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	1e5a      	subs	r2, r3, #1
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b087      	sub	sp, #28
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d40:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d42:	7cfb      	ldrb	r3, [r7, #19]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d003      	beq.n	8000d50 <HAL_CAN_ConfigFilter+0x26>
 8000d48:	7cfb      	ldrb	r3, [r7, #19]
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	f040 80aa 	bne.w	8000ea4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d56:	f043 0201 	orr.w	r2, r3, #1
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	f003 031f 	and.w	r3, r3, #31
 8000d68:	2201      	movs	r2, #1
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d123      	bne.n	8000dd2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	401a      	ands	r2, r3
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3248      	adds	r2, #72	; 0x48
 8000db2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dc6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dc8:	6979      	ldr	r1, [r7, #20]
 8000dca:	3348      	adds	r3, #72	; 0x48
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	440b      	add	r3, r1
 8000dd0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d122      	bne.n	8000e20 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	431a      	orrs	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dfa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	3248      	adds	r2, #72	; 0x48
 8000e00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e16:	6979      	ldr	r1, [r7, #20]
 8000e18:	3348      	adds	r3, #72	; 0x48
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d109      	bne.n	8000e3c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000e3a:	e007      	b.n	8000e4c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	431a      	orrs	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d109      	bne.n	8000e68 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000e66:	e007      	b.n	8000e78 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	431a      	orrs	r2, r3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6a1b      	ldr	r3, [r3, #32]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d107      	bne.n	8000e90 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e96:	f023 0201 	bic.w	r2, r3, #1
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e006      	b.n	8000eb2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
  }
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	371c      	adds	r7, #28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d12e      	bne.n	8000f2e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0201 	bic.w	r2, r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ee8:	f7ff fe1a 	bl	8000b20 <HAL_GetTick>
 8000eec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000eee:	e012      	b.n	8000f16 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ef0:	f7ff fe16 	bl	8000b20 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b0a      	cmp	r3, #10
 8000efc:	d90b      	bls.n	8000f16 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2205      	movs	r2, #5
 8000f0e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e012      	b.n	8000f3c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1e5      	bne.n	8000ef0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e006      	b.n	8000f3c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
  }
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f58:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f62:	7ffb      	ldrb	r3, [r7, #31]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d003      	beq.n	8000f70 <HAL_CAN_AddTxMessage+0x2c>
 8000f68:	7ffb      	ldrb	r3, [r7, #31]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	f040 80ad 	bne.w	80010ca <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10a      	bne.n	8000f90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d105      	bne.n	8000f90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8095 	beq.w	80010ba <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	0e1b      	lsrs	r3, r3, #24
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d10d      	bne.n	8000fc8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fb6:	68f9      	ldr	r1, [r7, #12]
 8000fb8:	6809      	ldr	r1, [r1, #0]
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	3318      	adds	r3, #24
 8000fc0:	011b      	lsls	r3, r3, #4
 8000fc2:	440b      	add	r3, r1
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e00f      	b.n	8000fe8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fd2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fd8:	68f9      	ldr	r1, [r7, #12]
 8000fda:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000fdc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3318      	adds	r3, #24
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	440b      	add	r3, r1
 8000fe6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6819      	ldr	r1, [r3, #0]
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3318      	adds	r3, #24
 8000ff4:	011b      	lsls	r3, r3, #4
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	7d1b      	ldrb	r3, [r3, #20]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d111      	bne.n	8001028 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3318      	adds	r3, #24
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	4413      	add	r3, r2
 8001010:	3304      	adds	r3, #4
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	6811      	ldr	r1, [r2, #0]
 8001018:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3318      	adds	r3, #24
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	440b      	add	r3, r1
 8001024:	3304      	adds	r3, #4
 8001026:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3307      	adds	r3, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	061a      	lsls	r2, r3, #24
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3306      	adds	r3, #6
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	041b      	lsls	r3, r3, #16
 8001038:	431a      	orrs	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3305      	adds	r3, #5
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	4313      	orrs	r3, r2
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	3204      	adds	r2, #4
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	4610      	mov	r0, r2
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	6811      	ldr	r1, [r2, #0]
 8001050:	ea43 0200 	orr.w	r2, r3, r0
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	440b      	add	r3, r1
 800105a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800105e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3303      	adds	r3, #3
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	061a      	lsls	r2, r3, #24
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3302      	adds	r3, #2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	041b      	lsls	r3, r3, #16
 8001070:	431a      	orrs	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3301      	adds	r3, #1
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	4313      	orrs	r3, r2
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	7812      	ldrb	r2, [r2, #0]
 8001080:	4610      	mov	r0, r2
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	6811      	ldr	r1, [r2, #0]
 8001086:	ea43 0200 	orr.w	r2, r3, r0
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	440b      	add	r3, r1
 8001090:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001094:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3318      	adds	r3, #24
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	4413      	add	r3, r2
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	6811      	ldr	r1, [r2, #0]
 80010a8:	f043 0201 	orr.w	r2, r3, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3318      	adds	r3, #24
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	440b      	add	r3, r1
 80010b4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e00e      	b.n	80010d8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e006      	b.n	80010d8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
  }
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3724      	adds	r7, #36	; 0x24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010e2:	b480      	push	{r7}
 80010e4:	b087      	sub	sp, #28
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d003      	beq.n	8001106 <HAL_CAN_GetRxMessage+0x24>
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
 8001100:	2b02      	cmp	r3, #2
 8001102:	f040 8103 	bne.w	800130c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10e      	bne.n	800112a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d116      	bne.n	8001148 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e0f7      	b.n	800131a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d107      	bne.n	8001148 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e0e8      	b.n	800131a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	331b      	adds	r3, #27
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	4413      	add	r3, r2
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0204 	and.w	r2, r3, #4
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d10c      	bne.n	8001180 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	331b      	adds	r3, #27
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	4413      	add	r3, r2
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	0d5b      	lsrs	r3, r3, #21
 8001176:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e00b      	b.n	8001198 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	331b      	adds	r3, #27
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	4413      	add	r3, r2
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	08db      	lsrs	r3, r3, #3
 8001190:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	331b      	adds	r3, #27
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4413      	add	r3, r2
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0202 	and.w	r2, r3, #2
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	331b      	adds	r3, #27
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	4413      	add	r3, r2
 80011ba:	3304      	adds	r3, #4
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2208      	movs	r2, #8
 80011ca:	611a      	str	r2, [r3, #16]
 80011cc:	e00b      	b.n	80011e6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	331b      	adds	r3, #27
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	4413      	add	r3, r2
 80011da:	3304      	adds	r3, #4
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 020f 	and.w	r2, r3, #15
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	331b      	adds	r3, #27
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	4413      	add	r3, r2
 80011f2:	3304      	adds	r3, #4
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	0a1b      	lsrs	r3, r3, #8
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	331b      	adds	r3, #27
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	4413      	add	r3, r2
 800120a:	3304      	adds	r3, #4
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	0c1b      	lsrs	r3, r3, #16
 8001210:	b29a      	uxth	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	4413      	add	r3, r2
 8001220:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	4413      	add	r3, r2
 8001236:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0a1a      	lsrs	r2, r3, #8
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	4413      	add	r3, r2
 8001250:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	0c1a      	lsrs	r2, r3, #16
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	3302      	adds	r3, #2
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	4413      	add	r3, r2
 800126a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	0e1a      	lsrs	r2, r3, #24
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	3303      	adds	r3, #3
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	4413      	add	r3, r2
 8001284:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	3304      	adds	r3, #4
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	4413      	add	r3, r2
 800129c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	0a1a      	lsrs	r2, r3, #8
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	3305      	adds	r3, #5
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	4413      	add	r3, r2
 80012b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	0c1a      	lsrs	r2, r3, #16
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	3306      	adds	r3, #6
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	4413      	add	r3, r2
 80012d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	0e1a      	lsrs	r2, r3, #24
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	3307      	adds	r3, #7
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d108      	bne.n	80012f8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f042 0220 	orr.w	r2, r2, #32
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	e007      	b.n	8001308 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	691a      	ldr	r2, [r3, #16]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0220 	orr.w	r2, r2, #32
 8001306:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	e006      	b.n	800131a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
  }
}
 800131a:	4618      	mov	r0, r3
 800131c:	371c      	adds	r7, #28
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001338:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800133a:	7afb      	ldrb	r3, [r7, #11]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d002      	beq.n	8001346 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001340:	7afb      	ldrb	r3, [r7, #11]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d10f      	bne.n	8001366 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d106      	bne.n	800135a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	e005      	b.n	8001366 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001382:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d002      	beq.n	8001390 <HAL_CAN_ActivateNotification+0x1e>
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d109      	bne.n	80013a4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6959      	ldr	r1, [r3, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e006      	b.n	80013b2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
  }
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013cc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d002      	beq.n	80013da <HAL_CAN_DeactivateNotification+0x1e>
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d10a      	bne.n	80013f0 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6959      	ldr	r1, [r3, #20]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	43da      	mvns	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	400a      	ands	r2, r1
 80013ea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e006      	b.n	80013fe <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
  }
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d07c      	beq.n	8001548 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d023      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2201      	movs	r2, #1
 800145e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f983 	bl	8001776 <HAL_CAN_TxMailbox0CompleteCallback>
 8001470:	e016      	b.n	80014a0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	d004      	beq.n	8001486 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
 8001484:	e00c      	b.n	80014a0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
 8001498:	e002      	b.n	80014a0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f986 	bl	80017ac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d024      	beq.n	80014f4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f962 	bl	8001788 <HAL_CAN_TxMailbox1CompleteCallback>
 80014c4:	e016      	b.n	80014f4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
 80014d8:	e00c      	b.n	80014f4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d004      	beq.n	80014ee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
 80014ec:	e002      	b.n	80014f4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f965 	bl	80017be <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d024      	beq.n	8001548 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001506:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f941 	bl	800179a <HAL_CAN_TxMailbox2CompleteCallback>
 8001518:	e016      	b.n	8001548 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d004      	beq.n	800152e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
 800152c:	e00c      	b.n	8001548 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
 8001540:	e002      	b.n	8001548 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f944 	bl	80017d0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00c      	beq.n	800156c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	2b00      	cmp	r3, #0
 800155a:	d007      	beq.n	800156c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001562:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2210      	movs	r2, #16
 800156a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800156c:	6a3b      	ldr	r3, [r7, #32]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00b      	beq.n	800158e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2208      	movs	r2, #8
 8001586:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f92a 	bl	80017e2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d009      	beq.n	80015ac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff f818 	bl	80005dc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00c      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d007      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2210      	movs	r2, #16
 80015ce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	f003 0320 	and.w	r3, r3, #32
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00b      	beq.n	80015f2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d006      	beq.n	80015f2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2208      	movs	r2, #8
 80015ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f90a 	bl	8001806 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d009      	beq.n	8001610 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f8f2 	bl	80017f4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00b      	beq.n	8001632 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	2b00      	cmp	r3, #0
 8001622:	d006      	beq.n	8001632 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2210      	movs	r2, #16
 800162a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f8f3 	bl	8001818 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d006      	beq.n	8001654 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2208      	movs	r2, #8
 800164c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f8eb 	bl	800182a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d07b      	beq.n	8001756 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d072      	beq.n	800174e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800168a:	2b00      	cmp	r3, #0
 800168c:	d008      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	f043 0302 	orr.w	r3, r3, #2
 800169e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d008      	beq.n	80016bc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d043      	beq.n	800174e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d03e      	beq.n	800174e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016d6:	2b60      	cmp	r3, #96	; 0x60
 80016d8:	d02b      	beq.n	8001732 <HAL_CAN_IRQHandler+0x32a>
 80016da:	2b60      	cmp	r3, #96	; 0x60
 80016dc:	d82e      	bhi.n	800173c <HAL_CAN_IRQHandler+0x334>
 80016de:	2b50      	cmp	r3, #80	; 0x50
 80016e0:	d022      	beq.n	8001728 <HAL_CAN_IRQHandler+0x320>
 80016e2:	2b50      	cmp	r3, #80	; 0x50
 80016e4:	d82a      	bhi.n	800173c <HAL_CAN_IRQHandler+0x334>
 80016e6:	2b40      	cmp	r3, #64	; 0x40
 80016e8:	d019      	beq.n	800171e <HAL_CAN_IRQHandler+0x316>
 80016ea:	2b40      	cmp	r3, #64	; 0x40
 80016ec:	d826      	bhi.n	800173c <HAL_CAN_IRQHandler+0x334>
 80016ee:	2b30      	cmp	r3, #48	; 0x30
 80016f0:	d010      	beq.n	8001714 <HAL_CAN_IRQHandler+0x30c>
 80016f2:	2b30      	cmp	r3, #48	; 0x30
 80016f4:	d822      	bhi.n	800173c <HAL_CAN_IRQHandler+0x334>
 80016f6:	2b10      	cmp	r3, #16
 80016f8:	d002      	beq.n	8001700 <HAL_CAN_IRQHandler+0x2f8>
 80016fa:	2b20      	cmp	r3, #32
 80016fc:	d005      	beq.n	800170a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80016fe:	e01d      	b.n	800173c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	f043 0308 	orr.w	r3, r3, #8
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001708:	e019      	b.n	800173e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	f043 0310 	orr.w	r3, r3, #16
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001712:	e014      	b.n	800173e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	f043 0320 	orr.w	r3, r3, #32
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800171c:	e00f      	b.n	800173e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001726:	e00a      	b.n	800173e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001730:	e005      	b.n	800173e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800173a:	e000      	b.n	800173e <HAL_CAN_IRQHandler+0x336>
            break;
 800173c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	699a      	ldr	r2, [r3, #24]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800174c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2204      	movs	r2, #4
 8001754:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f867 	bl	800183c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
	...

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4906      	ldr	r1, [pc, #24]	; (80018e8 <__NVIC_EnableIRQ+0x34>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100

080018ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	; (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	2b04      	cmp	r3, #4
 800195c:	bf28      	it	cs
 800195e:	2304      	movcs	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3304      	adds	r3, #4
 8001966:	2b06      	cmp	r3, #6
 8001968:	d902      	bls.n	8001970 <NVIC_EncodePriority+0x30>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b03      	subs	r3, #3
 800196e:	e000      	b.n	8001972 <NVIC_EncodePriority+0x32>
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43d9      	mvns	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	4313      	orrs	r3, r2
         );
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019c8:	f7ff ff90 	bl	80018ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff2d 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a10:	f7ff ff42 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f7ff ff90 	bl	8001940 <NVIC_EncodePriority>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff5f 	bl	80018ec <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff35 	bl	80018b4 <__NVIC_EnableIRQ>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ffa2 	bl	80019a4 <SysTick_Config>
 8001a60:	4603      	mov	r3, r0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d008      	beq.n	8001a94 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2204      	movs	r2, #4
 8001a86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e020      	b.n	8001ad6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 020e 	bic.w	r2, r2, #14
 8001aa2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abc:	2101      	movs	r1, #1
 8001abe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d005      	beq.n	8001b04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2204      	movs	r2, #4
 8001afc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	73fb      	strb	r3, [r7, #15]
 8001b02:	e051      	b.n	8001ba8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 020e 	bic.w	r2, r2, #14
 8001b12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0201 	bic.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a22      	ldr	r2, [pc, #136]	; (8001bb4 <HAL_DMA_Abort_IT+0xd4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d029      	beq.n	8001b82 <HAL_DMA_Abort_IT+0xa2>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <HAL_DMA_Abort_IT+0xd8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d022      	beq.n	8001b7e <HAL_DMA_Abort_IT+0x9e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a1f      	ldr	r2, [pc, #124]	; (8001bbc <HAL_DMA_Abort_IT+0xdc>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d01a      	beq.n	8001b78 <HAL_DMA_Abort_IT+0x98>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a1e      	ldr	r2, [pc, #120]	; (8001bc0 <HAL_DMA_Abort_IT+0xe0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d012      	beq.n	8001b72 <HAL_DMA_Abort_IT+0x92>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <HAL_DMA_Abort_IT+0xe4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00a      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x8c>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <HAL_DMA_Abort_IT+0xe8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d102      	bne.n	8001b66 <HAL_DMA_Abort_IT+0x86>
 8001b60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b64:	e00e      	b.n	8001b84 <HAL_DMA_Abort_IT+0xa4>
 8001b66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b6a:	e00b      	b.n	8001b84 <HAL_DMA_Abort_IT+0xa4>
 8001b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b70:	e008      	b.n	8001b84 <HAL_DMA_Abort_IT+0xa4>
 8001b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b76:	e005      	b.n	8001b84 <HAL_DMA_Abort_IT+0xa4>
 8001b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b7c:	e002      	b.n	8001b84 <HAL_DMA_Abort_IT+0xa4>
 8001b7e:	2310      	movs	r3, #16
 8001b80:	e000      	b.n	8001b84 <HAL_DMA_Abort_IT+0xa4>
 8001b82:	2301      	movs	r3, #1
 8001b84:	4a11      	ldr	r2, [pc, #68]	; (8001bcc <HAL_DMA_Abort_IT+0xec>)
 8001b86:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
    } 
  }
  return status;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40020008 	.word	0x40020008
 8001bb8:	4002001c 	.word	0x4002001c
 8001bbc:	40020030 	.word	0x40020030
 8001bc0:	40020044 	.word	0x40020044
 8001bc4:	40020058 	.word	0x40020058
 8001bc8:	4002006c 	.word	0x4002006c
 8001bcc:	40020000 	.word	0x40020000

08001bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b08b      	sub	sp, #44	; 0x2c
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be2:	e169      	b.n	8001eb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001be4:	2201      	movs	r2, #1
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	f040 8158 	bne.w	8001eb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4a9a      	ldr	r2, [pc, #616]	; (8001e70 <HAL_GPIO_Init+0x2a0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d05e      	beq.n	8001cca <HAL_GPIO_Init+0xfa>
 8001c0c:	4a98      	ldr	r2, [pc, #608]	; (8001e70 <HAL_GPIO_Init+0x2a0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d875      	bhi.n	8001cfe <HAL_GPIO_Init+0x12e>
 8001c12:	4a98      	ldr	r2, [pc, #608]	; (8001e74 <HAL_GPIO_Init+0x2a4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d058      	beq.n	8001cca <HAL_GPIO_Init+0xfa>
 8001c18:	4a96      	ldr	r2, [pc, #600]	; (8001e74 <HAL_GPIO_Init+0x2a4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d86f      	bhi.n	8001cfe <HAL_GPIO_Init+0x12e>
 8001c1e:	4a96      	ldr	r2, [pc, #600]	; (8001e78 <HAL_GPIO_Init+0x2a8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d052      	beq.n	8001cca <HAL_GPIO_Init+0xfa>
 8001c24:	4a94      	ldr	r2, [pc, #592]	; (8001e78 <HAL_GPIO_Init+0x2a8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d869      	bhi.n	8001cfe <HAL_GPIO_Init+0x12e>
 8001c2a:	4a94      	ldr	r2, [pc, #592]	; (8001e7c <HAL_GPIO_Init+0x2ac>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d04c      	beq.n	8001cca <HAL_GPIO_Init+0xfa>
 8001c30:	4a92      	ldr	r2, [pc, #584]	; (8001e7c <HAL_GPIO_Init+0x2ac>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d863      	bhi.n	8001cfe <HAL_GPIO_Init+0x12e>
 8001c36:	4a92      	ldr	r2, [pc, #584]	; (8001e80 <HAL_GPIO_Init+0x2b0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d046      	beq.n	8001cca <HAL_GPIO_Init+0xfa>
 8001c3c:	4a90      	ldr	r2, [pc, #576]	; (8001e80 <HAL_GPIO_Init+0x2b0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d85d      	bhi.n	8001cfe <HAL_GPIO_Init+0x12e>
 8001c42:	2b12      	cmp	r3, #18
 8001c44:	d82a      	bhi.n	8001c9c <HAL_GPIO_Init+0xcc>
 8001c46:	2b12      	cmp	r3, #18
 8001c48:	d859      	bhi.n	8001cfe <HAL_GPIO_Init+0x12e>
 8001c4a:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <HAL_GPIO_Init+0x80>)
 8001c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c50:	08001ccb 	.word	0x08001ccb
 8001c54:	08001ca5 	.word	0x08001ca5
 8001c58:	08001cb7 	.word	0x08001cb7
 8001c5c:	08001cf9 	.word	0x08001cf9
 8001c60:	08001cff 	.word	0x08001cff
 8001c64:	08001cff 	.word	0x08001cff
 8001c68:	08001cff 	.word	0x08001cff
 8001c6c:	08001cff 	.word	0x08001cff
 8001c70:	08001cff 	.word	0x08001cff
 8001c74:	08001cff 	.word	0x08001cff
 8001c78:	08001cff 	.word	0x08001cff
 8001c7c:	08001cff 	.word	0x08001cff
 8001c80:	08001cff 	.word	0x08001cff
 8001c84:	08001cff 	.word	0x08001cff
 8001c88:	08001cff 	.word	0x08001cff
 8001c8c:	08001cff 	.word	0x08001cff
 8001c90:	08001cff 	.word	0x08001cff
 8001c94:	08001cad 	.word	0x08001cad
 8001c98:	08001cc1 	.word	0x08001cc1
 8001c9c:	4a79      	ldr	r2, [pc, #484]	; (8001e84 <HAL_GPIO_Init+0x2b4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ca2:	e02c      	b.n	8001cfe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	623b      	str	r3, [r7, #32]
          break;
 8001caa:	e029      	b.n	8001d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	623b      	str	r3, [r7, #32]
          break;
 8001cb4:	e024      	b.n	8001d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	3308      	adds	r3, #8
 8001cbc:	623b      	str	r3, [r7, #32]
          break;
 8001cbe:	e01f      	b.n	8001d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	330c      	adds	r3, #12
 8001cc6:	623b      	str	r3, [r7, #32]
          break;
 8001cc8:	e01a      	b.n	8001d00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d102      	bne.n	8001cd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	623b      	str	r3, [r7, #32]
          break;
 8001cd6:	e013      	b.n	8001d00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d105      	bne.n	8001cec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce0:	2308      	movs	r3, #8
 8001ce2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	611a      	str	r2, [r3, #16]
          break;
 8001cea:	e009      	b.n	8001d00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cec:	2308      	movs	r3, #8
 8001cee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69fa      	ldr	r2, [r7, #28]
 8001cf4:	615a      	str	r2, [r3, #20]
          break;
 8001cf6:	e003      	b.n	8001d00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	623b      	str	r3, [r7, #32]
          break;
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x130>
          break;
 8001cfe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	2bff      	cmp	r3, #255	; 0xff
 8001d04:	d801      	bhi.n	8001d0a <HAL_GPIO_Init+0x13a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	e001      	b.n	8001d0e <HAL_GPIO_Init+0x13e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2bff      	cmp	r3, #255	; 0xff
 8001d14:	d802      	bhi.n	8001d1c <HAL_GPIO_Init+0x14c>
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	e002      	b.n	8001d22 <HAL_GPIO_Init+0x152>
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	3b08      	subs	r3, #8
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	210f      	movs	r1, #15
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	401a      	ands	r2, r3
 8001d34:	6a39      	ldr	r1, [r7, #32]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80b1 	beq.w	8001eb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d50:	4b4d      	ldr	r3, [pc, #308]	; (8001e88 <HAL_GPIO_Init+0x2b8>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	4a4c      	ldr	r2, [pc, #304]	; (8001e88 <HAL_GPIO_Init+0x2b8>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6193      	str	r3, [r2, #24]
 8001d5c:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <HAL_GPIO_Init+0x2b8>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d68:	4a48      	ldr	r2, [pc, #288]	; (8001e8c <HAL_GPIO_Init+0x2bc>)
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	3302      	adds	r3, #2
 8001d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a40      	ldr	r2, [pc, #256]	; (8001e90 <HAL_GPIO_Init+0x2c0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d013      	beq.n	8001dbc <HAL_GPIO_Init+0x1ec>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3f      	ldr	r2, [pc, #252]	; (8001e94 <HAL_GPIO_Init+0x2c4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d00d      	beq.n	8001db8 <HAL_GPIO_Init+0x1e8>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a3e      	ldr	r2, [pc, #248]	; (8001e98 <HAL_GPIO_Init+0x2c8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d007      	beq.n	8001db4 <HAL_GPIO_Init+0x1e4>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a3d      	ldr	r2, [pc, #244]	; (8001e9c <HAL_GPIO_Init+0x2cc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d101      	bne.n	8001db0 <HAL_GPIO_Init+0x1e0>
 8001dac:	2303      	movs	r3, #3
 8001dae:	e006      	b.n	8001dbe <HAL_GPIO_Init+0x1ee>
 8001db0:	2304      	movs	r3, #4
 8001db2:	e004      	b.n	8001dbe <HAL_GPIO_Init+0x1ee>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e002      	b.n	8001dbe <HAL_GPIO_Init+0x1ee>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <HAL_GPIO_Init+0x1ee>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc0:	f002 0203 	and.w	r2, r2, #3
 8001dc4:	0092      	lsls	r2, r2, #2
 8001dc6:	4093      	lsls	r3, r2
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dce:	492f      	ldr	r1, [pc, #188]	; (8001e8c <HAL_GPIO_Init+0x2bc>)
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d006      	beq.n	8001df6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001de8:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <HAL_GPIO_Init+0x2d0>)
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	492c      	ldr	r1, [pc, #176]	; (8001ea0 <HAL_GPIO_Init+0x2d0>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
 8001df4:	e006      	b.n	8001e04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001df6:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <HAL_GPIO_Init+0x2d0>)
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	4928      	ldr	r1, [pc, #160]	; (8001ea0 <HAL_GPIO_Init+0x2d0>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e10:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <HAL_GPIO_Init+0x2d0>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4922      	ldr	r1, [pc, #136]	; (8001ea0 <HAL_GPIO_Init+0x2d0>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	60cb      	str	r3, [r1, #12]
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_GPIO_Init+0x2d0>)
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	491e      	ldr	r1, [pc, #120]	; (8001ea0 <HAL_GPIO_Init+0x2d0>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d006      	beq.n	8001e46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e38:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_GPIO_Init+0x2d0>)
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	4918      	ldr	r1, [pc, #96]	; (8001ea0 <HAL_GPIO_Init+0x2d0>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
 8001e44:	e006      	b.n	8001e54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_GPIO_Init+0x2d0>)
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	4914      	ldr	r1, [pc, #80]	; (8001ea0 <HAL_GPIO_Init+0x2d0>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d021      	beq.n	8001ea4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_GPIO_Init+0x2d0>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	490e      	ldr	r1, [pc, #56]	; (8001ea0 <HAL_GPIO_Init+0x2d0>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
 8001e6c:	e021      	b.n	8001eb2 <HAL_GPIO_Init+0x2e2>
 8001e6e:	bf00      	nop
 8001e70:	10320000 	.word	0x10320000
 8001e74:	10310000 	.word	0x10310000
 8001e78:	10220000 	.word	0x10220000
 8001e7c:	10210000 	.word	0x10210000
 8001e80:	10120000 	.word	0x10120000
 8001e84:	10110000 	.word	0x10110000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40010800 	.word	0x40010800
 8001e94:	40010c00 	.word	0x40010c00
 8001e98:	40011000 	.word	0x40011000
 8001e9c:	40011400 	.word	0x40011400
 8001ea0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_GPIO_Init+0x304>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	4909      	ldr	r1, [pc, #36]	; (8001ed4 <HAL_GPIO_Init+0x304>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f47f ae8e 	bne.w	8001be4 <HAL_GPIO_Init+0x14>
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	372c      	adds	r7, #44	; 0x2c
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	40010400 	.word	0x40010400

08001ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e272      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8087 	beq.w	8002006 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef8:	4b92      	ldr	r3, [pc, #584]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d00c      	beq.n	8001f1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f04:	4b8f      	ldr	r3, [pc, #572]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d112      	bne.n	8001f36 <HAL_RCC_OscConfig+0x5e>
 8001f10:	4b8c      	ldr	r3, [pc, #560]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1c:	d10b      	bne.n	8001f36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1e:	4b89      	ldr	r3, [pc, #548]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d06c      	beq.n	8002004 <HAL_RCC_OscConfig+0x12c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d168      	bne.n	8002004 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e24c      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3e:	d106      	bne.n	8001f4e <HAL_RCC_OscConfig+0x76>
 8001f40:	4b80      	ldr	r3, [pc, #512]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a7f      	ldr	r2, [pc, #508]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	e02e      	b.n	8001fac <HAL_RCC_OscConfig+0xd4>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x98>
 8001f56:	4b7b      	ldr	r3, [pc, #492]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a7a      	ldr	r2, [pc, #488]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	4b78      	ldr	r3, [pc, #480]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a77      	ldr	r2, [pc, #476]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e01d      	b.n	8001fac <HAL_RCC_OscConfig+0xd4>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0xbc>
 8001f7a:	4b72      	ldr	r3, [pc, #456]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a71      	ldr	r2, [pc, #452]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b6f      	ldr	r3, [pc, #444]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a6e      	ldr	r2, [pc, #440]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e00b      	b.n	8001fac <HAL_RCC_OscConfig+0xd4>
 8001f94:	4b6b      	ldr	r3, [pc, #428]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a6a      	ldr	r2, [pc, #424]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b68      	ldr	r3, [pc, #416]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a67      	ldr	r2, [pc, #412]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001faa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d013      	beq.n	8001fdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7fe fdb4 	bl	8000b20 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7fe fdb0 	bl	8000b20 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	; 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e200      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b5d      	ldr	r3, [pc, #372]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0xe4>
 8001fda:	e014      	b.n	8002006 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fda0 	bl	8000b20 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7fe fd9c 	bl	8000b20 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	; 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e1ec      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	4b53      	ldr	r3, [pc, #332]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x10c>
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d063      	beq.n	80020da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002012:	4b4c      	ldr	r3, [pc, #304]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800201e:	4b49      	ldr	r3, [pc, #292]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b08      	cmp	r3, #8
 8002028:	d11c      	bne.n	8002064 <HAL_RCC_OscConfig+0x18c>
 800202a:	4b46      	ldr	r3, [pc, #280]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d116      	bne.n	8002064 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	4b43      	ldr	r3, [pc, #268]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_RCC_OscConfig+0x176>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d001      	beq.n	800204e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e1c0      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204e:	4b3d      	ldr	r3, [pc, #244]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4939      	ldr	r1, [pc, #228]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	e03a      	b.n	80020da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d020      	beq.n	80020ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206c:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7fe fd55 	bl	8000b20 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207a:	f7fe fd51 	bl	8000b20 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e1a1      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208c:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002098:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4927      	ldr	r1, [pc, #156]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
 80020ac:	e015      	b.n	80020da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7fe fd34 	bl	8000b20 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020bc:	f7fe fd30 	bl	8000b20 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e180      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d03a      	beq.n	800215c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d019      	beq.n	8002122 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_RCC_OscConfig+0x274>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f4:	f7fe fd14 	bl	8000b20 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fc:	f7fe fd10 	bl	8000b20 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e160      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HAL_RCC_OscConfig+0x26c>)
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800211a:	2001      	movs	r0, #1
 800211c:	f000 face 	bl	80026bc <RCC_Delay>
 8002120:	e01c      	b.n	800215c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_RCC_OscConfig+0x274>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002128:	f7fe fcfa 	bl	8000b20 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212e:	e00f      	b.n	8002150 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002130:	f7fe fcf6 	bl	8000b20 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d908      	bls.n	8002150 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e146      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	42420000 	.word	0x42420000
 800214c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002150:	4b92      	ldr	r3, [pc, #584]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1e9      	bne.n	8002130 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80a6 	beq.w	80022b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216e:	4b8b      	ldr	r3, [pc, #556]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10d      	bne.n	8002196 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b88      	ldr	r3, [pc, #544]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4a87      	ldr	r2, [pc, #540]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	61d3      	str	r3, [r2, #28]
 8002186:	4b85      	ldr	r3, [pc, #532]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002192:	2301      	movs	r3, #1
 8002194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b82      	ldr	r3, [pc, #520]	; (80023a0 <HAL_RCC_OscConfig+0x4c8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d118      	bne.n	80021d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a2:	4b7f      	ldr	r3, [pc, #508]	; (80023a0 <HAL_RCC_OscConfig+0x4c8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a7e      	ldr	r2, [pc, #504]	; (80023a0 <HAL_RCC_OscConfig+0x4c8>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ae:	f7fe fcb7 	bl	8000b20 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b6:	f7fe fcb3 	bl	8000b20 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b64      	cmp	r3, #100	; 0x64
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e103      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b75      	ldr	r3, [pc, #468]	; (80023a0 <HAL_RCC_OscConfig+0x4c8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x312>
 80021dc:	4b6f      	ldr	r3, [pc, #444]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4a6e      	ldr	r2, [pc, #440]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6213      	str	r3, [r2, #32]
 80021e8:	e02d      	b.n	8002246 <HAL_RCC_OscConfig+0x36e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x334>
 80021f2:	4b6a      	ldr	r3, [pc, #424]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4a69      	ldr	r2, [pc, #420]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	6213      	str	r3, [r2, #32]
 80021fe:	4b67      	ldr	r3, [pc, #412]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4a66      	ldr	r2, [pc, #408]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002204:	f023 0304 	bic.w	r3, r3, #4
 8002208:	6213      	str	r3, [r2, #32]
 800220a:	e01c      	b.n	8002246 <HAL_RCC_OscConfig+0x36e>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b05      	cmp	r3, #5
 8002212:	d10c      	bne.n	800222e <HAL_RCC_OscConfig+0x356>
 8002214:	4b61      	ldr	r3, [pc, #388]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4a60      	ldr	r2, [pc, #384]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800221a:	f043 0304 	orr.w	r3, r3, #4
 800221e:	6213      	str	r3, [r2, #32]
 8002220:	4b5e      	ldr	r3, [pc, #376]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4a5d      	ldr	r2, [pc, #372]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6213      	str	r3, [r2, #32]
 800222c:	e00b      	b.n	8002246 <HAL_RCC_OscConfig+0x36e>
 800222e:	4b5b      	ldr	r3, [pc, #364]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4a5a      	ldr	r2, [pc, #360]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	6213      	str	r3, [r2, #32]
 800223a:	4b58      	ldr	r3, [pc, #352]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4a57      	ldr	r2, [pc, #348]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002240:	f023 0304 	bic.w	r3, r3, #4
 8002244:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d015      	beq.n	800227a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224e:	f7fe fc67 	bl	8000b20 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002254:	e00a      	b.n	800226c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002256:	f7fe fc63 	bl	8000b20 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	f241 3288 	movw	r2, #5000	; 0x1388
 8002264:	4293      	cmp	r3, r2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e0b1      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226c:	4b4b      	ldr	r3, [pc, #300]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0ee      	beq.n	8002256 <HAL_RCC_OscConfig+0x37e>
 8002278:	e014      	b.n	80022a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227a:	f7fe fc51 	bl	8000b20 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002280:	e00a      	b.n	8002298 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fc4d 	bl	8000b20 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e09b      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002298:	4b40      	ldr	r3, [pc, #256]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1ee      	bne.n	8002282 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d105      	bne.n	80022b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022aa:	4b3c      	ldr	r3, [pc, #240]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a3b      	ldr	r2, [pc, #236]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8087 	beq.w	80023ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d061      	beq.n	8002390 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d146      	bne.n	8002362 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d4:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7fe fc21 	bl	8000b20 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e2:	f7fe fc1d 	bl	8000b20 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e06d      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f4:	4b29      	ldr	r3, [pc, #164]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f0      	bne.n	80022e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002308:	d108      	bne.n	800231c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800230a:	4b24      	ldr	r3, [pc, #144]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	4921      	ldr	r1, [pc, #132]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800231c:	4b1f      	ldr	r3, [pc, #124]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a19      	ldr	r1, [r3, #32]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	430b      	orrs	r3, r1
 800232e:	491b      	ldr	r1, [pc, #108]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002336:	2201      	movs	r2, #1
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7fe fbf1 	bl	8000b20 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002342:	f7fe fbed 	bl	8000b20 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e03d      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x46a>
 8002360:	e035      	b.n	80023ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7fe fbda 	bl	8000b20 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe fbd6 	bl	8000b20 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e026      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_RCC_OscConfig+0x4c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x498>
 800238e:	e01e      	b.n	80023ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e019      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
 800239c:	40021000 	.word	0x40021000
 80023a0:	40007000 	.word	0x40007000
 80023a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_OscConfig+0x500>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d001      	beq.n	80023ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000

080023dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0d0      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d910      	bls.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b67      	ldr	r3, [pc, #412]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 0207 	bic.w	r2, r3, #7
 8002406:	4965      	ldr	r1, [pc, #404]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0b8      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002442:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002450:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800245a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b50      	ldr	r3, [pc, #320]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	494d      	ldr	r1, [pc, #308]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d040      	beq.n	80024fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d115      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e07f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e073      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e06b      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4936      	ldr	r1, [pc, #216]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024cc:	f7fe fb28 	bl	8000b20 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7fe fb24 	bl	8000b20 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e053      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 020c 	and.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1eb      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d210      	bcs.n	800252c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0207 	bic.w	r2, r3, #7
 8002512:	4922      	ldr	r1, [pc, #136]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e032      	b.n	8002592 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4916      	ldr	r1, [pc, #88]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	490e      	ldr	r1, [pc, #56]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800256a:	f000 f821 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 800256e:	4602      	mov	r2, r0
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	490a      	ldr	r1, [pc, #40]	; (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	5ccb      	ldrb	r3, [r1, r3]
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1d0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe fa86 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40022000 	.word	0x40022000
 80025a0:	40021000 	.word	0x40021000
 80025a4:	08003598 	.word	0x08003598
 80025a8:	20000000 	.word	0x20000000
 80025ac:	20000004 	.word	0x20000004

080025b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <HAL_RCC_GetSysClockFreq+0x94>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d002      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x30>
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d003      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0x36>
 80025de:	e027      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_RCC_GetSysClockFreq+0x98>)
 80025e2:	613b      	str	r3, [r7, #16]
      break;
 80025e4:	e027      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	0c9b      	lsrs	r3, r3, #18
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	4a17      	ldr	r2, [pc, #92]	; (800264c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025f0:	5cd3      	ldrb	r3, [r2, r3]
 80025f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d010      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_RCC_GetSysClockFreq+0x94>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	0c5b      	lsrs	r3, r3, #17
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	4a11      	ldr	r2, [pc, #68]	; (8002650 <HAL_RCC_GetSysClockFreq+0xa0>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <HAL_RCC_GetSysClockFreq+0x98>)
 8002612:	fb03 f202 	mul.w	r2, r3, r2
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	e004      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002624:	fb02 f303 	mul.w	r3, r2, r3
 8002628:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	613b      	str	r3, [r7, #16]
      break;
 800262e:	e002      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetSysClockFreq+0x98>)
 8002632:	613b      	str	r3, [r7, #16]
      break;
 8002634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002636:	693b      	ldr	r3, [r7, #16]
}
 8002638:	4618      	mov	r0, r3
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	007a1200 	.word	0x007a1200
 800264c:	080035b0 	.word	0x080035b0
 8002650:	080035c0 	.word	0x080035c0
 8002654:	003d0900 	.word	0x003d0900

08002658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800265c:	4b02      	ldr	r3, [pc, #8]	; (8002668 <HAL_RCC_GetHCLKFreq+0x10>)
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	20000000 	.word	0x20000000

0800266c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002670:	f7ff fff2 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4903      	ldr	r1, [pc, #12]	; (8002690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	080035a8 	.word	0x080035a8

08002694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002698:	f7ff ffde 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	0adb      	lsrs	r3, r3, #11
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4903      	ldr	r1, [pc, #12]	; (80026b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000
 80026b8:	080035a8 	.word	0x080035a8

080026bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <RCC_Delay+0x34>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <RCC_Delay+0x38>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0a5b      	lsrs	r3, r3, #9
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026d8:	bf00      	nop
  }
  while (Delay --);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1e5a      	subs	r2, r3, #1
 80026de:	60fa      	str	r2, [r7, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f9      	bne.n	80026d8 <RCC_Delay+0x1c>
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	20000000 	.word	0x20000000
 80026f4:	10624dd3 	.word	0x10624dd3

080026f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e042      	b.n	8002790 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe f8e2 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2224      	movs	r2, #36	; 0x24
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800273a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 fe57 	bl	80033f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d16d      	bne.n	8002894 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_UART_Transmit+0x2c>
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e066      	b.n	8002896 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2221      	movs	r2, #33	; 0x21
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027d6:	f7fe f9a3 	bl	8000b20 <HAL_GetTick>
 80027da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	88fa      	ldrh	r2, [r7, #6]
 80027e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	88fa      	ldrh	r2, [r7, #6]
 80027e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f0:	d108      	bne.n	8002804 <HAL_UART_Transmit+0x6c>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d104      	bne.n	8002804 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	e003      	b.n	800280c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800280c:	e02a      	b.n	8002864 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2200      	movs	r2, #0
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fba6 	bl	8002f6a <UART_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e036      	b.n	8002896 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10b      	bne.n	8002846 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800283c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	3302      	adds	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	e007      	b.n	8002856 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	3301      	adds	r3, #1
 8002854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1cf      	bne.n	800280e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2200      	movs	r2, #0
 8002876:	2140      	movs	r1, #64	; 0x40
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 fb76 	bl	8002f6a <UART_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e006      	b.n	8002896 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	e000      	b.n	8002896 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002894:	2302      	movs	r3, #2
  }
}
 8002896:	4618      	mov	r0, r3
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b08a      	sub	sp, #40	; 0x28
 80028a2:	af02      	add	r7, sp, #8
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	4613      	mov	r3, r2
 80028ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d17c      	bne.n	80029b8 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <HAL_UART_Receive+0x2c>
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e075      	b.n	80029ba <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2222      	movs	r2, #34	; 0x22
 80028d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028e2:	f7fe f91d 	bl	8000b20 <HAL_GetTick>
 80028e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	88fa      	ldrh	r2, [r7, #6]
 80028ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	88fa      	ldrh	r2, [r7, #6]
 80028f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fc:	d108      	bne.n	8002910 <HAL_UART_Receive+0x72>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d104      	bne.n	8002910 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	e003      	b.n	8002918 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002918:	e043      	b.n	80029a2 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2200      	movs	r2, #0
 8002922:	2120      	movs	r1, #32
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fb20 	bl	8002f6a <UART_WaitOnFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e042      	b.n	80029ba <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10c      	bne.n	8002954 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	b29b      	uxth	r3, r3
 8002942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002946:	b29a      	uxth	r2, r3
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	3302      	adds	r3, #2
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	e01f      	b.n	8002994 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295c:	d007      	beq.n	800296e <HAL_UART_Receive+0xd0>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10a      	bne.n	800297c <HAL_UART_Receive+0xde>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e008      	b.n	800298e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002988:	b2da      	uxtb	r2, r3
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3301      	adds	r3, #1
 8002992:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1b6      	bne.n	800291a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	e000      	b.n	80029ba <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029b8:	2302      	movs	r3, #2
  }
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3720      	adds	r7, #32
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	4613      	mov	r3, r2
 80029ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d112      	bne.n	8002a02 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_UART_Receive_IT+0x26>
 80029e2:	88fb      	ldrh	r3, [r7, #6]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e00b      	b.n	8002a04 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	461a      	mov	r2, r3
 80029f6:	68b9      	ldr	r1, [r7, #8]
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fb24 	bl	8003046 <UART_Start_Receive_IT>
 80029fe:	4603      	mov	r3, r0
 8002a00:	e000      	b.n	8002a04 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
  }
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b0ba      	sub	sp, #232	; 0xe8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10f      	bne.n	8002a72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_UART_IRQHandler+0x66>
 8002a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fc01 	bl	8003272 <UART_Receive_IT>
      return;
 8002a70:	e25b      	b.n	8002f2a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 80de 	beq.w	8002c38 <HAL_UART_IRQHandler+0x22c>
 8002a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d106      	bne.n	8002a96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80d1 	beq.w	8002c38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <HAL_UART_IRQHandler+0xae>
 8002aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	f043 0201 	orr.w	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_UART_IRQHandler+0xd2>
 8002ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f043 0202 	orr.w	r2, r3, #2
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_UART_IRQHandler+0xf6>
 8002aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f043 0204 	orr.w	r2, r3, #4
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d011      	beq.n	8002b32 <HAL_UART_IRQHandler+0x126>
 8002b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f043 0208 	orr.w	r2, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 81f2 	beq.w	8002f20 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_UART_IRQHandler+0x14e>
 8002b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fb8c 	bl	8003272 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf14      	ite	ne
 8002b68:	2301      	movne	r3, #1
 8002b6a:	2300      	moveq	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d103      	bne.n	8002b86 <HAL_UART_IRQHandler+0x17a>
 8002b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d04f      	beq.n	8002c26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa96 	bl	80030b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d041      	beq.n	8002c1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3314      	adds	r3, #20
 8002ba0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ba8:	e853 3f00 	ldrex	r3, [r3]
 8002bac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3314      	adds	r3, #20
 8002bc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002bd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bd6:	e841 2300 	strex	r3, r2, [r1]
 8002bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1d9      	bne.n	8002b9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d013      	beq.n	8002c16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf2:	4a7e      	ldr	r2, [pc, #504]	; (8002dec <HAL_UART_IRQHandler+0x3e0>)
 8002bf4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe ff70 	bl	8001ae0 <HAL_DMA_Abort_IT>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d016      	beq.n	8002c34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c10:	4610      	mov	r0, r2
 8002c12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c14:	e00e      	b.n	8002c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f993 	bl	8002f42 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1c:	e00a      	b.n	8002c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f98f 	bl	8002f42 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c24:	e006      	b.n	8002c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f98b 	bl	8002f42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002c32:	e175      	b.n	8002f20 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	bf00      	nop
    return;
 8002c36:	e173      	b.n	8002f20 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	f040 814f 	bne.w	8002ee0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8148 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8141 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80b6 	beq.w	8002df0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8145 	beq.w	8002f24 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	f080 813e 	bcs.w	8002f24 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	f000 8088 	beq.w	8002dcc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cca:	e853 3f00 	ldrex	r3, [r3]
 8002cce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002cd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	330c      	adds	r3, #12
 8002ce4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ce8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cf4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cf8:	e841 2300 	strex	r3, r2, [r1]
 8002cfc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1d9      	bne.n	8002cbc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3314      	adds	r3, #20
 8002d0e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d12:	e853 3f00 	ldrex	r3, [r3]
 8002d16:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3314      	adds	r3, #20
 8002d28:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d2c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d30:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d32:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d38:	e841 2300 	strex	r3, r2, [r1]
 8002d3c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e1      	bne.n	8002d08 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3314      	adds	r3, #20
 8002d4a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d4e:	e853 3f00 	ldrex	r3, [r3]
 8002d52:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3314      	adds	r3, #20
 8002d64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d68:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d70:	e841 2300 	strex	r3, r2, [r1]
 8002d74:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1e3      	bne.n	8002d44 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	330c      	adds	r3, #12
 8002d90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d94:	e853 3f00 	ldrex	r3, [r3]
 8002d98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d9c:	f023 0310 	bic.w	r3, r3, #16
 8002da0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	330c      	adds	r3, #12
 8002daa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002dae:	65ba      	str	r2, [r7, #88]	; 0x58
 8002db0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002db4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002db6:	e841 2300 	strex	r3, r2, [r1]
 8002dba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1e3      	bne.n	8002d8a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe fe4f 	bl	8001a6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	4619      	mov	r1, r3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8b6 	bl	8002f54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002de8:	e09c      	b.n	8002f24 <HAL_UART_IRQHandler+0x518>
 8002dea:	bf00      	nop
 8002dec:	0800317d 	.word	0x0800317d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 808e 	beq.w	8002f28 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8089 	beq.w	8002f28 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	330c      	adds	r3, #12
 8002e36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e3a:	647a      	str	r2, [r7, #68]	; 0x44
 8002e3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e42:	e841 2300 	strex	r3, r2, [r1]
 8002e46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1e3      	bne.n	8002e16 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3314      	adds	r3, #20
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3314      	adds	r3, #20
 8002e6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e72:	633a      	str	r2, [r7, #48]	; 0x30
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7a:	e841 2300 	strex	r3, r2, [r1]
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e3      	bne.n	8002e4e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	330c      	adds	r3, #12
 8002e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	e853 3f00 	ldrex	r3, [r3]
 8002ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 0310 	bic.w	r3, r3, #16
 8002eaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002eb8:	61fa      	str	r2, [r7, #28]
 8002eba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebc:	69b9      	ldr	r1, [r7, #24]
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	e841 2300 	strex	r3, r2, [r1]
 8002ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1e3      	bne.n	8002e94 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ed2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f83b 	bl	8002f54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ede:	e023      	b.n	8002f28 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <HAL_UART_IRQHandler+0x4f4>
 8002eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f953 	bl	80031a4 <UART_Transmit_IT>
    return;
 8002efe:	e014      	b.n	8002f2a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00e      	beq.n	8002f2a <HAL_UART_IRQHandler+0x51e>
 8002f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f992 	bl	8003242 <UART_EndTransmit_IT>
    return;
 8002f1e:	e004      	b.n	8002f2a <HAL_UART_IRQHandler+0x51e>
    return;
 8002f20:	bf00      	nop
 8002f22:	e002      	b.n	8002f2a <HAL_UART_IRQHandler+0x51e>
      return;
 8002f24:	bf00      	nop
 8002f26:	e000      	b.n	8002f2a <HAL_UART_IRQHandler+0x51e>
      return;
 8002f28:	bf00      	nop
  }
}
 8002f2a:	37e8      	adds	r7, #232	; 0xe8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b090      	sub	sp, #64	; 0x40
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	4613      	mov	r3, r2
 8002f78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f7a:	e050      	b.n	800301e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f82:	d04c      	beq.n	800301e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x30>
 8002f8a:	f7fd fdc9 	bl	8000b20 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d241      	bcs.n	800301e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	330c      	adds	r3, #12
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	e853 3f00 	ldrex	r3, [r3]
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	330c      	adds	r3, #12
 8002fb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fba:	637a      	str	r2, [r7, #52]	; 0x34
 8002fbc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fc2:	e841 2300 	strex	r3, r2, [r1]
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1e5      	bne.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3314      	adds	r3, #20
 8002fd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	e853 3f00 	ldrex	r3, [r3]
 8002fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3314      	adds	r3, #20
 8002fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fee:	623a      	str	r2, [r7, #32]
 8002ff0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff2:	69f9      	ldr	r1, [r7, #28]
 8002ff4:	6a3a      	ldr	r2, [r7, #32]
 8002ff6:	e841 2300 	strex	r3, r2, [r1]
 8002ffa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1e5      	bne.n	8002fce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e00f      	b.n	800303e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4013      	ands	r3, r2
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	429a      	cmp	r2, r3
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	429a      	cmp	r2, r3
 800303a:	d09f      	beq.n	8002f7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3740      	adds	r7, #64	; 0x40
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	4613      	mov	r3, r2
 8003052:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	88fa      	ldrh	r2, [r7, #6]
 800305e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2222      	movs	r2, #34	; 0x22
 8003070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800308a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0220 	orr.w	r2, r2, #32
 80030aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr

080030b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b095      	sub	sp, #84	; 0x54
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ca:	e853 3f00 	ldrex	r3, [r3]
 80030ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	330c      	adds	r3, #12
 80030de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030e0:	643a      	str	r2, [r7, #64]	; 0x40
 80030e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030e8:	e841 2300 	strex	r3, r2, [r1]
 80030ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1e5      	bne.n	80030c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3314      	adds	r3, #20
 80030fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	e853 3f00 	ldrex	r3, [r3]
 8003102:	61fb      	str	r3, [r7, #28]
   return(result);
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	64bb      	str	r3, [r7, #72]	; 0x48
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3314      	adds	r3, #20
 8003112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003114:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800311a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e5      	bne.n	80030f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	2b01      	cmp	r3, #1
 800312e:	d119      	bne.n	8003164 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	330c      	adds	r3, #12
 8003136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	e853 3f00 	ldrex	r3, [r3]
 800313e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f023 0310 	bic.w	r3, r3, #16
 8003146:	647b      	str	r3, [r7, #68]	; 0x44
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	330c      	adds	r3, #12
 800314e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003150:	61ba      	str	r2, [r7, #24]
 8003152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003154:	6979      	ldr	r1, [r7, #20]
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	e841 2300 	strex	r3, r2, [r1]
 800315c:	613b      	str	r3, [r7, #16]
   return(result);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1e5      	bne.n	8003130 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003172:	bf00      	nop
 8003174:	3754      	adds	r7, #84	; 0x54
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f7ff fed3 	bl	8002f42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b21      	cmp	r3, #33	; 0x21
 80031b6:	d13e      	bne.n	8003236 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c0:	d114      	bne.n	80031ec <UART_Transmit_IT+0x48>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d110      	bne.n	80031ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	1c9a      	adds	r2, r3, #2
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	621a      	str	r2, [r3, #32]
 80031ea:	e008      	b.n	80031fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	1c59      	adds	r1, r3, #1
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6211      	str	r1, [r2, #32]
 80031f6:	781a      	ldrb	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29b      	uxth	r3, r3
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	4619      	mov	r1, r3
 800320c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10f      	bne.n	8003232 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003220:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003230:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	e000      	b.n	8003238 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003236:	2302      	movs	r3, #2
  }
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003258:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff fe64 	bl	8002f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b08c      	sub	sp, #48	; 0x30
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b22      	cmp	r3, #34	; 0x22
 8003284:	f040 80ae 	bne.w	80033e4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003290:	d117      	bne.n	80032c2 <UART_Receive_IT+0x50>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d113      	bne.n	80032c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800329a:	2300      	movs	r3, #0
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	1c9a      	adds	r2, r3, #2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	629a      	str	r2, [r3, #40]	; 0x28
 80032c0:	e026      	b.n	8003310 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d4:	d007      	beq.n	80032e6 <UART_Receive_IT+0x74>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10a      	bne.n	80032f4 <UART_Receive_IT+0x82>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	e008      	b.n	8003306 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003300:	b2da      	uxtb	r2, r3
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29b      	uxth	r3, r3
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4619      	mov	r1, r3
 800331e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003320:	2b00      	cmp	r3, #0
 8003322:	d15d      	bne.n	80033e0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0220 	bic.w	r2, r2, #32
 8003332:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003342:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	2b01      	cmp	r3, #1
 8003368:	d135      	bne.n	80033d6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	e853 3f00 	ldrex	r3, [r3]
 800337e:	613b      	str	r3, [r7, #16]
   return(result);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f023 0310 	bic.w	r3, r3, #16
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	330c      	adds	r3, #12
 800338e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003390:	623a      	str	r2, [r7, #32]
 8003392:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003394:	69f9      	ldr	r1, [r7, #28]
 8003396:	6a3a      	ldr	r2, [r7, #32]
 8003398:	e841 2300 	strex	r3, r2, [r1]
 800339c:	61bb      	str	r3, [r7, #24]
   return(result);
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e5      	bne.n	8003370 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d10a      	bne.n	80033c8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033cc:	4619      	mov	r1, r3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff fdc0 	bl	8002f54 <HAL_UARTEx_RxEventCallback>
 80033d4:	e002      	b.n	80033dc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fd f912 	bl	8000600 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	e002      	b.n	80033e6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e000      	b.n	80033e6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80033e4:	2302      	movs	r3, #2
  }
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3730      	adds	r7, #48	; 0x30
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800342a:	f023 030c 	bic.w	r3, r3, #12
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	430b      	orrs	r3, r1
 8003436:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a2c      	ldr	r2, [pc, #176]	; (8003504 <UART_SetConfig+0x114>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d103      	bne.n	8003460 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003458:	f7ff f91c 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	e002      	b.n	8003466 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003460:	f7ff f904 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8003464:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	009a      	lsls	r2, r3, #2
 8003470:	441a      	add	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	fbb2 f3f3 	udiv	r3, r2, r3
 800347c:	4a22      	ldr	r2, [pc, #136]	; (8003508 <UART_SetConfig+0x118>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	0119      	lsls	r1, r3, #4
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009a      	lsls	r2, r3, #2
 8003490:	441a      	add	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	fbb2 f2f3 	udiv	r2, r2, r3
 800349c:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <UART_SetConfig+0x118>)
 800349e:	fba3 0302 	umull	r0, r3, r3, r2
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2064      	movs	r0, #100	; 0x64
 80034a6:	fb00 f303 	mul.w	r3, r0, r3
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	3332      	adds	r3, #50	; 0x32
 80034b0:	4a15      	ldr	r2, [pc, #84]	; (8003508 <UART_SetConfig+0x118>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034bc:	4419      	add	r1, r3
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	009a      	lsls	r2, r3, #2
 80034c8:	441a      	add	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <UART_SetConfig+0x118>)
 80034d6:	fba3 0302 	umull	r0, r3, r3, r2
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	2064      	movs	r0, #100	; 0x64
 80034de:	fb00 f303 	mul.w	r3, r0, r3
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	3332      	adds	r3, #50	; 0x32
 80034e8:	4a07      	ldr	r2, [pc, #28]	; (8003508 <UART_SetConfig+0x118>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	f003 020f 	and.w	r2, r3, #15
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	440a      	add	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40013800 	.word	0x40013800
 8003508:	51eb851f 	.word	0x51eb851f

0800350c <memset>:
 800350c:	4603      	mov	r3, r0
 800350e:	4402      	add	r2, r0
 8003510:	4293      	cmp	r3, r2
 8003512:	d100      	bne.n	8003516 <memset+0xa>
 8003514:	4770      	bx	lr
 8003516:	f803 1b01 	strb.w	r1, [r3], #1
 800351a:	e7f9      	b.n	8003510 <memset+0x4>

0800351c <__libc_init_array>:
 800351c:	b570      	push	{r4, r5, r6, lr}
 800351e:	2600      	movs	r6, #0
 8003520:	4d0c      	ldr	r5, [pc, #48]	; (8003554 <__libc_init_array+0x38>)
 8003522:	4c0d      	ldr	r4, [pc, #52]	; (8003558 <__libc_init_array+0x3c>)
 8003524:	1b64      	subs	r4, r4, r5
 8003526:	10a4      	asrs	r4, r4, #2
 8003528:	42a6      	cmp	r6, r4
 800352a:	d109      	bne.n	8003540 <__libc_init_array+0x24>
 800352c:	f000 f828 	bl	8003580 <_init>
 8003530:	2600      	movs	r6, #0
 8003532:	4d0a      	ldr	r5, [pc, #40]	; (800355c <__libc_init_array+0x40>)
 8003534:	4c0a      	ldr	r4, [pc, #40]	; (8003560 <__libc_init_array+0x44>)
 8003536:	1b64      	subs	r4, r4, r5
 8003538:	10a4      	asrs	r4, r4, #2
 800353a:	42a6      	cmp	r6, r4
 800353c:	d105      	bne.n	800354a <__libc_init_array+0x2e>
 800353e:	bd70      	pop	{r4, r5, r6, pc}
 8003540:	f855 3b04 	ldr.w	r3, [r5], #4
 8003544:	4798      	blx	r3
 8003546:	3601      	adds	r6, #1
 8003548:	e7ee      	b.n	8003528 <__libc_init_array+0xc>
 800354a:	f855 3b04 	ldr.w	r3, [r5], #4
 800354e:	4798      	blx	r3
 8003550:	3601      	adds	r6, #1
 8003552:	e7f2      	b.n	800353a <__libc_init_array+0x1e>
 8003554:	080035c4 	.word	0x080035c4
 8003558:	080035c4 	.word	0x080035c4
 800355c:	080035c4 	.word	0x080035c4
 8003560:	080035c8 	.word	0x080035c8

08003564 <memcpy>:
 8003564:	440a      	add	r2, r1
 8003566:	4291      	cmp	r1, r2
 8003568:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800356c:	d100      	bne.n	8003570 <memcpy+0xc>
 800356e:	4770      	bx	lr
 8003570:	b510      	push	{r4, lr}
 8003572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003576:	4291      	cmp	r1, r2
 8003578:	f803 4f01 	strb.w	r4, [r3, #1]!
 800357c:	d1f9      	bne.n	8003572 <memcpy+0xe>
 800357e:	bd10      	pop	{r4, pc}

08003580 <_init>:
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	bf00      	nop
 8003584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003586:	bc08      	pop	{r3}
 8003588:	469e      	mov	lr, r3
 800358a:	4770      	bx	lr

0800358c <_fini>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	bf00      	nop
 8003590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003592:	bc08      	pop	{r3}
 8003594:	469e      	mov	lr, r3
 8003596:	4770      	bx	lr
