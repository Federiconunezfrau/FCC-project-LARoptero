
NUCLEO_pruebas_dsp_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000422c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080043f4  080043f4  000143f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800440c  0800440c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004414  08004414  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004414  08004414  00014414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800441c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  08004428  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08004428  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d8e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002781  00000000  00000000  00031e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  00034590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd7  00000000  00000000  000354c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026df6  00000000  00000000  0003609f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000133b2  00000000  00000000  0005ce95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f39ff  00000000  00000000  00070247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f54  00000000  00000000  00163c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00167b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080043dc 	.word	0x080043dc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080043dc 	.word	0x080043dc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_CAN1_Init+0x68>)
 800050a:	4a19      	ldr	r2, [pc, #100]	; (8000570 <MX_CAN1_Init+0x6c>)
 800050c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <MX_CAN1_Init+0x68>)
 8000510:	2203      	movs	r2, #3
 8000512:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_CAN1_Init+0x68>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_CAN1_Init+0x68>)
 800051c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000520:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_CAN1_Init+0x68>)
 8000524:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000528:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <MX_CAN1_Init+0x68>)
 800052c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000530:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <MX_CAN1_Init+0x68>)
 8000534:	2200      	movs	r2, #0
 8000536:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_CAN1_Init+0x68>)
 800053a:	2200      	movs	r2, #0
 800053c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <MX_CAN1_Init+0x68>)
 8000540:	2200      	movs	r2, #0
 8000542:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_CAN1_Init+0x68>)
 8000546:	2200      	movs	r2, #0
 8000548:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <MX_CAN1_Init+0x68>)
 800054c:	2200      	movs	r2, #0
 800054e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_CAN1_Init+0x68>)
 8000552:	2200      	movs	r2, #0
 8000554:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_CAN1_Init+0x68>)
 8000558:	f000 fc1c 	bl	8000d94 <HAL_CAN_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000562:	f000 fa03 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000028 	.word	0x20000028
 8000570:	40006400 	.word	0x40006400

08000574 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <HAL_CAN_MspInit+0x7c>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d127      	bne.n	80005e6 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <HAL_CAN_MspInit+0x80>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059a:	4a16      	ldr	r2, [pc, #88]	; (80005f4 <HAL_CAN_MspInit+0x80>)
 800059c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005a0:	6413      	str	r3, [r2, #64]	; 0x40
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <HAL_CAN_MspInit+0x80>)
 80005a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <HAL_CAN_MspInit+0x80>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <HAL_CAN_MspInit+0x80>)
 80005b4:	f043 0308 	orr.w	r3, r3, #8
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <HAL_CAN_MspInit+0x80>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0308 	and.w	r3, r3, #8
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005c6:	2303      	movs	r3, #3
 80005c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ca:	2302      	movs	r3, #2
 80005cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d2:	2303      	movs	r3, #3
 80005d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005d6:	2309      	movs	r3, #9
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4619      	mov	r1, r3
 80005e0:	4805      	ldr	r0, [pc, #20]	; (80005f8 <HAL_CAN_MspInit+0x84>)
 80005e2:	f000 fe77 	bl	80012d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005e6:	bf00      	nop
 80005e8:	3728      	adds	r7, #40	; 0x28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40006400 	.word	0x40006400
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40020c00 	.word	0x40020c00

080005fc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08c      	sub	sp, #48	; 0x30
 8000600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b8b      	ldr	r3, [pc, #556]	; (8000840 <MX_GPIO_Init+0x244>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a8a      	ldr	r2, [pc, #552]	; (8000840 <MX_GPIO_Init+0x244>)
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b88      	ldr	r3, [pc, #544]	; (8000840 <MX_GPIO_Init+0x244>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0304 	and.w	r3, r3, #4
 8000626:	61bb      	str	r3, [r7, #24]
 8000628:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062a:	4b85      	ldr	r3, [pc, #532]	; (8000840 <MX_GPIO_Init+0x244>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a84      	ldr	r2, [pc, #528]	; (8000840 <MX_GPIO_Init+0x244>)
 8000630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b82      	ldr	r3, [pc, #520]	; (8000840 <MX_GPIO_Init+0x244>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b7f      	ldr	r3, [pc, #508]	; (8000840 <MX_GPIO_Init+0x244>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a7e      	ldr	r2, [pc, #504]	; (8000840 <MX_GPIO_Init+0x244>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b7c      	ldr	r3, [pc, #496]	; (8000840 <MX_GPIO_Init+0x244>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	4b79      	ldr	r3, [pc, #484]	; (8000840 <MX_GPIO_Init+0x244>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a78      	ldr	r2, [pc, #480]	; (8000840 <MX_GPIO_Init+0x244>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b76      	ldr	r3, [pc, #472]	; (8000840 <MX_GPIO_Init+0x244>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000672:	4b73      	ldr	r3, [pc, #460]	; (8000840 <MX_GPIO_Init+0x244>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a72      	ldr	r2, [pc, #456]	; (8000840 <MX_GPIO_Init+0x244>)
 8000678:	f043 0310 	orr.w	r3, r3, #16
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b70      	ldr	r3, [pc, #448]	; (8000840 <MX_GPIO_Init+0x244>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0310 	and.w	r3, r3, #16
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068a:	4b6d      	ldr	r3, [pc, #436]	; (8000840 <MX_GPIO_Init+0x244>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a6c      	ldr	r2, [pc, #432]	; (8000840 <MX_GPIO_Init+0x244>)
 8000690:	f043 0308 	orr.w	r3, r3, #8
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b6a      	ldr	r3, [pc, #424]	; (8000840 <MX_GPIO_Init+0x244>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0308 	and.w	r3, r3, #8
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006a2:	4b67      	ldr	r3, [pc, #412]	; (8000840 <MX_GPIO_Init+0x244>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a66      	ldr	r2, [pc, #408]	; (8000840 <MX_GPIO_Init+0x244>)
 80006a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b64      	ldr	r3, [pc, #400]	; (8000840 <MX_GPIO_Init+0x244>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f244 0181 	movw	r1, #16513	; 0x4081
 80006c0:	4860      	ldr	r0, [pc, #384]	; (8000844 <MX_GPIO_Init+0x248>)
 80006c2:	f000 ffb3 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006cc:	485e      	ldr	r0, [pc, #376]	; (8000848 <MX_GPIO_Init+0x24c>)
 80006ce:	f000 ffad 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2140      	movs	r1, #64	; 0x40
 80006d6:	485d      	ldr	r0, [pc, #372]	; (800084c <MX_GPIO_Init+0x250>)
 80006d8:	f000 ffa8 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	4857      	ldr	r0, [pc, #348]	; (8000850 <MX_GPIO_Init+0x254>)
 80006f4:	f000 fdee 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006f8:	2332      	movs	r3, #50	; 0x32
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000704:	2303      	movs	r3, #3
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000708:	230b      	movs	r3, #11
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	484f      	ldr	r0, [pc, #316]	; (8000850 <MX_GPIO_Init+0x254>)
 8000714:	f000 fdde 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000718:	2386      	movs	r3, #134	; 0x86
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000728:	230b      	movs	r3, #11
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4848      	ldr	r0, [pc, #288]	; (8000854 <MX_GPIO_Init+0x258>)
 8000734:	f000 fdce 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000738:	f244 0381 	movw	r3, #16513	; 0x4081
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	483c      	ldr	r0, [pc, #240]	; (8000844 <MX_GPIO_Init+0x248>)
 8000752:	f000 fdbf 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8000756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	4836      	ldr	r0, [pc, #216]	; (8000848 <MX_GPIO_Init+0x24c>)
 8000770:	f000 fdb0 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000786:	230b      	movs	r3, #11
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	482c      	ldr	r0, [pc, #176]	; (8000844 <MX_GPIO_Init+0x248>)
 8000792:	f000 fd9f 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000796:	2340      	movs	r3, #64	; 0x40
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	4827      	ldr	r0, [pc, #156]	; (800084c <MX_GPIO_Init+0x250>)
 80007ae:	f000 fd91 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	4821      	ldr	r0, [pc, #132]	; (800084c <MX_GPIO_Init+0x250>)
 80007c6:	f000 fd85 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80007ca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d8:	2303      	movs	r3, #3
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007dc:	230a      	movs	r3, #10
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	481b      	ldr	r0, [pc, #108]	; (8000854 <MX_GPIO_Init+0x258>)
 80007e8:	f000 fd74 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80007ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4814      	ldr	r0, [pc, #80]	; (8000854 <MX_GPIO_Init+0x258>)
 8000802:	f000 fd67 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000806:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000814:	2303      	movs	r3, #3
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000818:	230b      	movs	r3, #11
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	480a      	ldr	r0, [pc, #40]	; (800084c <MX_GPIO_Init+0x250>)
 8000824:	f000 fd56 	bl	80012d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	2028      	movs	r0, #40	; 0x28
 800082e:	f000 fc88 	bl	8001142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000832:	2028      	movs	r0, #40	; 0x28
 8000834:	f000 fca1 	bl	800117a <HAL_NVIC_EnableIRQ>

}
 8000838:	bf00      	nop
 800083a:	3730      	adds	r7, #48	; 0x30
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40020400 	.word	0x40020400
 8000848:	40021000 	.word	0x40021000
 800084c:	40021800 	.word	0x40021800
 8000850:	40020800 	.word	0x40020800
 8000854:	40020000 	.word	0x40020000

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085e:	f000 fa3c 	bl	8000cda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000862:	f000 f819 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000866:	f7ff fec9 	bl	80005fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800086a:	f000 f975 	bl	8000b58 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 800086e:	f000 f8ff 	bl	8000a70 <MX_TIM5_Init>
  MX_CAN1_Init();
 8000872:	f7ff fe47 	bl	8000504 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  y = 1;
 8000876:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800087a:	60fb      	str	r3, [r7, #12]
  x = -1;
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <main+0x34>)
 800087e:	60bb      	str	r3, [r7, #8]

  //arm_atan2_f32(y,x,&result);
  result = atan2(1,1);
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <main+0x38>)
 8000882:	607b      	str	r3, [r7, #4]
  result = atan2(-1,1);
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <main+0x3c>)
 8000886:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000888:	e7fe      	b.n	8000888 <main+0x30>
 800088a:	bf00      	nop
 800088c:	bf800000 	.word	0xbf800000
 8000890:	3f490fdb 	.word	0x3f490fdb
 8000894:	bf490fdb 	.word	0xbf490fdb

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	; 0x50
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	2230      	movs	r2, #48	; 0x30
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f003 fd6b 	bl	8004382 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008bc:	f000 fef4 	bl	80016a8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <SystemClock_Config+0xcc>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	4a27      	ldr	r2, [pc, #156]	; (8000964 <SystemClock_Config+0xcc>)
 80008c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <SystemClock_Config+0xcc>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008d8:	4b23      	ldr	r3, [pc, #140]	; (8000968 <SystemClock_Config+0xd0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008e0:	4a21      	ldr	r2, [pc, #132]	; (8000968 <SystemClock_Config+0xd0>)
 80008e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <SystemClock_Config+0xd0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80008f4:	2309      	movs	r3, #9
 80008f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008fe:	2301      	movs	r3, #1
 8000900:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	2302      	movs	r3, #2
 8000904:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000906:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800090a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800090c:	2304      	movs	r3, #4
 800090e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000910:	2348      	movs	r3, #72	; 0x48
 8000912:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000918:	2303      	movs	r3, #3
 800091a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 0320 	add.w	r3, r7, #32
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fed1 	bl	80016c8 <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800092c:	f000 f81e 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000934:	2302      	movs	r3, #2
 8000936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800093c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000940:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2102      	movs	r1, #2
 800094c:	4618      	mov	r0, r3
 800094e:	f001 f95f 	bl	8001c10 <HAL_RCC_ClockConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000958:	f000 f808 	bl	800096c <Error_Handler>
  }
}
 800095c:	bf00      	nop
 800095e:	3750      	adds	r7, #80	; 0x50
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <HAL_MspInit+0x44>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_MspInit+0x44>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_MspInit+0x44>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_MspInit+0x44>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_MspInit+0x44>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_MspInit+0x44>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0c:	f000 f9a2 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <USART3_IRQHandler+0x10>)
 8000a1a:	f002 fc8f 	bl	800333c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000010c 	.word	0x2000010c

08000a28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000a2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a30:	f000 fe16 	bl	8001660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <TIM5_IRQHandler+0x10>)
 8000a3e:	f001 ff61 	bl	8002904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000050 	.word	0x20000050

08000a4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_TIM5_Init+0x94>)
 8000a90:	4a1d      	ldr	r2, [pc, #116]	; (8000b08 <MX_TIM5_Init+0x98>)
 8000a92:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_TIM5_Init+0x94>)
 8000a96:	2247      	movs	r2, #71	; 0x47
 8000a98:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_TIM5_Init+0x94>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_TIM5_Init+0x94>)
 8000aa2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_TIM5_Init+0x94>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_TIM5_Init+0x94>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ab4:	4813      	ldr	r0, [pc, #76]	; (8000b04 <MX_TIM5_Init+0x94>)
 8000ab6:	f001 fec1 	bl	800283c <HAL_TIM_Base_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000ac0:	f7ff ff54 	bl	800096c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <MX_TIM5_Init+0x94>)
 8000ad2:	f002 f859 	bl	8002b88 <HAL_TIM_ConfigClockSource>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000adc:	f7ff ff46 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_TIM5_Init+0x94>)
 8000aee:	f002 fb11 	bl	8003114 <HAL_TIMEx_MasterConfigSynchronization>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000af8:	f7ff ff38 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000050 	.word	0x20000050
 8000b08:	40000c00 	.word	0x40000c00

08000b0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <HAL_TIM_Base_MspInit+0x44>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d113      	bne.n	8000b46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_TIM_Base_MspInit+0x48>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a0c      	ldr	r2, [pc, #48]	; (8000b54 <HAL_TIM_Base_MspInit+0x48>)
 8000b24:	f043 0308 	orr.w	r3, r3, #8
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_TIM_Base_MspInit+0x48>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 0308 	and.w	r3, r3, #8
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2032      	movs	r0, #50	; 0x32
 8000b3c:	f000 fb01 	bl	8001142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b40:	2032      	movs	r0, #50	; 0x32
 8000b42:	f000 fb1a 	bl	800117a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40000c00 	.word	0x40000c00
 8000b54:	40023800 	.word	0x40023800

08000b58 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_USART3_UART_Init+0x58>)
 8000b5e:	4a15      	ldr	r2, [pc, #84]	; (8000bb4 <MX_USART3_UART_Init+0x5c>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_USART3_UART_Init+0x58>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_USART3_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_USART3_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_USART3_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_USART3_UART_Init+0x58>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_USART3_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_USART3_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_USART3_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_USART3_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_USART3_UART_Init+0x58>)
 8000b9c:	f002 fb70 	bl	8003280 <HAL_UART_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ba6:	f7ff fee1 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000010c 	.word	0x2000010c
 8000bb4:	40004800 	.word	0x40004800

08000bb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0aa      	sub	sp, #168	; 0xa8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	2284      	movs	r2, #132	; 0x84
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fbd2 	bl	8004382 <memset>
  if(uartHandle->Instance==USART3)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a26      	ldr	r2, [pc, #152]	; (8000c7c <HAL_UART_MspInit+0xc4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d144      	bne.n	8000c72 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 fa30 	bl	800205c <HAL_RCCEx_PeriphCLKConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c02:	f7ff feb3 	bl	800096c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c06:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <HAL_UART_MspInit+0xc8>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a1d      	ldr	r2, [pc, #116]	; (8000c80 <HAL_UART_MspInit+0xc8>)
 8000c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <HAL_UART_MspInit+0xc8>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_UART_MspInit+0xc8>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xc8>)
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_UART_MspInit+0xc8>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c50:	2307      	movs	r3, #7
 8000c52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c56:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4809      	ldr	r0, [pc, #36]	; (8000c84 <HAL_UART_MspInit+0xcc>)
 8000c5e:	f000 fb39 	bl	80012d4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2027      	movs	r0, #39	; 0x27
 8000c68:	f000 fa6b 	bl	8001142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c6c:	2027      	movs	r0, #39	; 0x27
 8000c6e:	f000 fa84 	bl	800117a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c72:	bf00      	nop
 8000c74:	37a8      	adds	r7, #168	; 0xa8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40004800 	.word	0x40004800
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020c00 	.word	0x40020c00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c8e:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca4:	4c0b      	ldr	r4, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb2:	f7ff fecb 	bl	8000a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f003 fb6d 	bl	8004394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fdcd 	bl	8000858 <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ccc:	0800441c 	.word	0x0800441c
  ldr r2, =_sbss
 8000cd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cd4:	200001c4 	.word	0x200001c4

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>

08000cda <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f000 fa24 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f000 f805 	bl	8000cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cea:	f7ff fe45 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_InitTick+0x54>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x58>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fa3f 	bl	8001196 <HAL_SYSTICK_Config>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00e      	b.n	8000d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d80a      	bhi.n	8000d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d30:	f000 fa07 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <HAL_InitTick+0x5c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e000      	b.n	8000d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000004 	.word	0x20000004

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	200001c0 	.word	0x200001c0

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200001c0 	.word	0x200001c0

08000d94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e0ed      	b.n	8000f82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d102      	bne.n	8000db8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fbde 	bl	8000574 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0201 	orr.w	r2, r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dc8:	f7ff ffd8 	bl	8000d7c <HAL_GetTick>
 8000dcc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dce:	e012      	b.n	8000df6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dd0:	f7ff ffd4 	bl	8000d7c <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b0a      	cmp	r3, #10
 8000ddc:	d90b      	bls.n	8000df6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2205      	movs	r2, #5
 8000dee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e0c5      	b.n	8000f82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d0e5      	beq.n	8000dd0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 0202 	bic.w	r2, r2, #2
 8000e12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e14:	f7ff ffb2 	bl	8000d7c <HAL_GetTick>
 8000e18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e1a:	e012      	b.n	8000e42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e1c:	f7ff ffae 	bl	8000d7c <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b0a      	cmp	r3, #10
 8000e28:	d90b      	bls.n	8000e42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2205      	movs	r2, #5
 8000e3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e09f      	b.n	8000f82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1e5      	bne.n	8000e1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7e1b      	ldrb	r3, [r3, #24]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d108      	bne.n	8000e6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	e007      	b.n	8000e7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7e5b      	ldrb	r3, [r3, #25]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d108      	bne.n	8000e94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e007      	b.n	8000ea4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ea2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7e9b      	ldrb	r3, [r3, #26]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d108      	bne.n	8000ebe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 0220 	orr.w	r2, r2, #32
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	e007      	b.n	8000ece <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 0220 	bic.w	r2, r2, #32
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7edb      	ldrb	r3, [r3, #27]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d108      	bne.n	8000ee8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 0210 	bic.w	r2, r2, #16
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	e007      	b.n	8000ef8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0210 	orr.w	r2, r2, #16
 8000ef6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7f1b      	ldrb	r3, [r3, #28]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d108      	bne.n	8000f12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f042 0208 	orr.w	r2, r2, #8
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	e007      	b.n	8000f22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0208 	bic.w	r2, r2, #8
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7f5b      	ldrb	r3, [r3, #29]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d108      	bne.n	8000f3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f042 0204 	orr.w	r2, r2, #4
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	e007      	b.n	8000f4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0204 	bic.w	r2, r2, #4
 8000f4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	431a      	orrs	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	ea42 0103 	orr.w	r1, r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <__NVIC_SetPriorityGrouping+0x40>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fba:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <__NVIC_SetPriorityGrouping+0x40>)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	60d3      	str	r3, [r2, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00
 8000fd0:	05fa0000 	.word	0x05fa0000

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	db0b      	blt.n	800101a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f003 021f 	and.w	r2, r3, #31
 8001008:	4907      	ldr	r1, [pc, #28]	; (8001028 <__NVIC_EnableIRQ+0x38>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	2001      	movs	r0, #1
 8001012:	fa00 f202 	lsl.w	r2, r0, r2
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000e100 	.word	0xe000e100

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	; (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800110c:	f7ff ff8e 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff29 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff3e 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff8e 	bl	8001080 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5d 	bl	800102c <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff31 	bl	8000ff0 <__NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffa2 	bl	80010e8 <SysTick_Config>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff fdde 	bl	8000d7c <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d008      	beq.n	80011e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e052      	b.n	8001286 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0216 	bic.w	r2, r2, #22
 80011ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	2b00      	cmp	r3, #0
 8001206:	d103      	bne.n	8001210 <HAL_DMA_Abort+0x62>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800120c:	2b00      	cmp	r3, #0
 800120e:	d007      	beq.n	8001220 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0208 	bic.w	r2, r2, #8
 800121e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0201 	bic.w	r2, r2, #1
 800122e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001230:	e013      	b.n	800125a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001232:	f7ff fda3 	bl	8000d7c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b05      	cmp	r3, #5
 800123e:	d90c      	bls.n	800125a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2220      	movs	r2, #32
 8001244:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2203      	movs	r2, #3
 800124a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e015      	b.n	8001286 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1e4      	bne.n	8001232 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800126c:	223f      	movs	r2, #63	; 0x3f
 800126e:	409a      	lsls	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d004      	beq.n	80012ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2280      	movs	r2, #128	; 0x80
 80012a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e00c      	b.n	80012c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2205      	movs	r2, #5
 80012b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0201 	bic.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	e175      	b.n	80015e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	429a      	cmp	r2, r3
 800130e:	f040 8164 	bne.w	80015da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b01      	cmp	r3, #1
 800131c:	d005      	beq.n	800132a <HAL_GPIO_Init+0x56>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d130      	bne.n	800138c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 0201 	and.w	r2, r3, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b03      	cmp	r3, #3
 8001396:	d017      	beq.n	80013c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d123      	bne.n	800141c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	08da      	lsrs	r2, r3, #3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3208      	adds	r2, #8
 80013dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	69b9      	ldr	r1, [r7, #24]
 8001418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0203 	and.w	r2, r3, #3
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80be 	beq.w	80015da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	4b66      	ldr	r3, [pc, #408]	; (80015f8 <HAL_GPIO_Init+0x324>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a65      	ldr	r2, [pc, #404]	; (80015f8 <HAL_GPIO_Init+0x324>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b63      	ldr	r3, [pc, #396]	; (80015f8 <HAL_GPIO_Init+0x324>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001476:	4a61      	ldr	r2, [pc, #388]	; (80015fc <HAL_GPIO_Init+0x328>)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	220f      	movs	r2, #15
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a58      	ldr	r2, [pc, #352]	; (8001600 <HAL_GPIO_Init+0x32c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d037      	beq.n	8001512 <HAL_GPIO_Init+0x23e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a57      	ldr	r2, [pc, #348]	; (8001604 <HAL_GPIO_Init+0x330>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d031      	beq.n	800150e <HAL_GPIO_Init+0x23a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a56      	ldr	r2, [pc, #344]	; (8001608 <HAL_GPIO_Init+0x334>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d02b      	beq.n	800150a <HAL_GPIO_Init+0x236>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a55      	ldr	r2, [pc, #340]	; (800160c <HAL_GPIO_Init+0x338>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d025      	beq.n	8001506 <HAL_GPIO_Init+0x232>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a54      	ldr	r2, [pc, #336]	; (8001610 <HAL_GPIO_Init+0x33c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d01f      	beq.n	8001502 <HAL_GPIO_Init+0x22e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a53      	ldr	r2, [pc, #332]	; (8001614 <HAL_GPIO_Init+0x340>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d019      	beq.n	80014fe <HAL_GPIO_Init+0x22a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a52      	ldr	r2, [pc, #328]	; (8001618 <HAL_GPIO_Init+0x344>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d013      	beq.n	80014fa <HAL_GPIO_Init+0x226>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a51      	ldr	r2, [pc, #324]	; (800161c <HAL_GPIO_Init+0x348>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d00d      	beq.n	80014f6 <HAL_GPIO_Init+0x222>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a50      	ldr	r2, [pc, #320]	; (8001620 <HAL_GPIO_Init+0x34c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d007      	beq.n	80014f2 <HAL_GPIO_Init+0x21e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4f      	ldr	r2, [pc, #316]	; (8001624 <HAL_GPIO_Init+0x350>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d101      	bne.n	80014ee <HAL_GPIO_Init+0x21a>
 80014ea:	2309      	movs	r3, #9
 80014ec:	e012      	b.n	8001514 <HAL_GPIO_Init+0x240>
 80014ee:	230a      	movs	r3, #10
 80014f0:	e010      	b.n	8001514 <HAL_GPIO_Init+0x240>
 80014f2:	2308      	movs	r3, #8
 80014f4:	e00e      	b.n	8001514 <HAL_GPIO_Init+0x240>
 80014f6:	2307      	movs	r3, #7
 80014f8:	e00c      	b.n	8001514 <HAL_GPIO_Init+0x240>
 80014fa:	2306      	movs	r3, #6
 80014fc:	e00a      	b.n	8001514 <HAL_GPIO_Init+0x240>
 80014fe:	2305      	movs	r3, #5
 8001500:	e008      	b.n	8001514 <HAL_GPIO_Init+0x240>
 8001502:	2304      	movs	r3, #4
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x240>
 8001506:	2303      	movs	r3, #3
 8001508:	e004      	b.n	8001514 <HAL_GPIO_Init+0x240>
 800150a:	2302      	movs	r3, #2
 800150c:	e002      	b.n	8001514 <HAL_GPIO_Init+0x240>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x240>
 8001512:	2300      	movs	r3, #0
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	f002 0203 	and.w	r2, r2, #3
 800151a:	0092      	lsls	r2, r2, #2
 800151c:	4093      	lsls	r3, r2
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001524:	4935      	ldr	r1, [pc, #212]	; (80015fc <HAL_GPIO_Init+0x328>)
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001532:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <HAL_GPIO_Init+0x354>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001556:	4a34      	ldr	r2, [pc, #208]	; (8001628 <HAL_GPIO_Init+0x354>)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800155c:	4b32      	ldr	r3, [pc, #200]	; (8001628 <HAL_GPIO_Init+0x354>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001580:	4a29      	ldr	r2, [pc, #164]	; (8001628 <HAL_GPIO_Init+0x354>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001586:	4b28      	ldr	r3, [pc, #160]	; (8001628 <HAL_GPIO_Init+0x354>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015aa:	4a1f      	ldr	r2, [pc, #124]	; (8001628 <HAL_GPIO_Init+0x354>)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_GPIO_Init+0x354>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <HAL_GPIO_Init+0x354>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3301      	adds	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	2b0f      	cmp	r3, #15
 80015e4:	f67f ae86 	bls.w	80012f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40013800 	.word	0x40013800
 8001600:	40020000 	.word	0x40020000
 8001604:	40020400 	.word	0x40020400
 8001608:	40020800 	.word	0x40020800
 800160c:	40020c00 	.word	0x40020c00
 8001610:	40021000 	.word	0x40021000
 8001614:	40021400 	.word	0x40021400
 8001618:	40021800 	.word	0x40021800
 800161c:	40021c00 	.word	0x40021c00
 8001620:	40022000 	.word	0x40022000
 8001624:	40022400 	.word	0x40022400
 8001628:	40013c00 	.word	0x40013c00

0800162c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
 8001638:	4613      	mov	r3, r2
 800163a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800163c:	787b      	ldrb	r3, [r7, #1]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001642:	887a      	ldrh	r2, [r7, #2]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001648:	e003      	b.n	8001652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	041a      	lsls	r2, r3, #16
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	619a      	str	r2, [r3, #24]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	4013      	ands	r3, r2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f806 	bl	8001690 <HAL_GPIO_EXTI_Callback>
  }
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40013c00 	.word	0x40013c00

08001690 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40007000 	.word	0x40007000

080016c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e291      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8087 	beq.w	80017fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ec:	4b96      	ldr	r3, [pc, #600]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d00c      	beq.n	8001712 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f8:	4b93      	ldr	r3, [pc, #588]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 030c 	and.w	r3, r3, #12
 8001700:	2b08      	cmp	r3, #8
 8001702:	d112      	bne.n	800172a <HAL_RCC_OscConfig+0x62>
 8001704:	4b90      	ldr	r3, [pc, #576]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001710:	d10b      	bne.n	800172a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001712:	4b8d      	ldr	r3, [pc, #564]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d06c      	beq.n	80017f8 <HAL_RCC_OscConfig+0x130>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d168      	bne.n	80017f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e26b      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001732:	d106      	bne.n	8001742 <HAL_RCC_OscConfig+0x7a>
 8001734:	4b84      	ldr	r3, [pc, #528]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a83      	ldr	r2, [pc, #524]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 800173a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	e02e      	b.n	80017a0 <HAL_RCC_OscConfig+0xd8>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x9c>
 800174a:	4b7f      	ldr	r3, [pc, #508]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a7e      	ldr	r2, [pc, #504]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b7c      	ldr	r3, [pc, #496]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a7b      	ldr	r2, [pc, #492]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 800175c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e01d      	b.n	80017a0 <HAL_RCC_OscConfig+0xd8>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0xc0>
 800176e:	4b76      	ldr	r3, [pc, #472]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a75      	ldr	r2, [pc, #468]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	4b73      	ldr	r3, [pc, #460]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a72      	ldr	r2, [pc, #456]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e00b      	b.n	80017a0 <HAL_RCC_OscConfig+0xd8>
 8001788:	4b6f      	ldr	r3, [pc, #444]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a6e      	ldr	r2, [pc, #440]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 800178e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4b6c      	ldr	r3, [pc, #432]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a6b      	ldr	r2, [pc, #428]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 800179a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d013      	beq.n	80017d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fae8 	bl	8000d7c <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff fae4 	bl	8000d7c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e21f      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b61      	ldr	r3, [pc, #388]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0xe8>
 80017ce:	e014      	b.n	80017fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fad4 	bl	8000d7c <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fad0 	bl	8000d7c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e20b      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	4b57      	ldr	r3, [pc, #348]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x110>
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d069      	beq.n	80018da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001806:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00b      	beq.n	800182a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001812:	4b4d      	ldr	r3, [pc, #308]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b08      	cmp	r3, #8
 800181c:	d11c      	bne.n	8001858 <HAL_RCC_OscConfig+0x190>
 800181e:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d116      	bne.n	8001858 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d005      	beq.n	8001842 <HAL_RCC_OscConfig+0x17a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d001      	beq.n	8001842 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e1df      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	493d      	ldr	r1, [pc, #244]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001856:	e040      	b.n	80018da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d023      	beq.n	80018a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001860:	4b39      	ldr	r3, [pc, #228]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a38      	ldr	r2, [pc, #224]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff fa86 	bl	8000d7c <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001874:	f7ff fa82 	bl	8000d7c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e1bd      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001886:	4b30      	ldr	r3, [pc, #192]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001892:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4929      	ldr	r1, [pc, #164]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]
 80018a6:	e018      	b.n	80018da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a8:	4b27      	ldr	r3, [pc, #156]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a26      	ldr	r2, [pc, #152]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff fa62 	bl	8000d7c <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018bc:	f7ff fa5e 	bl	8000d7c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e199      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d038      	beq.n	8001958 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d019      	beq.n	8001922 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 80018f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f2:	4a15      	ldr	r2, [pc, #84]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fa:	f7ff fa3f 	bl	8000d7c <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001902:	f7ff fa3b 	bl	8000d7c <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e176      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x23a>
 8001920:	e01a      	b.n	8001958 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <HAL_RCC_OscConfig+0x280>)
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192e:	f7ff fa25 	bl	8000d7c <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001934:	e00a      	b.n	800194c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001936:	f7ff fa21 	bl	8000d7c <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d903      	bls.n	800194c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e15c      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>
 8001948:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	4b91      	ldr	r3, [pc, #580]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 800194e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1ee      	bne.n	8001936 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80a4 	beq.w	8001aae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001966:	4b8b      	ldr	r3, [pc, #556]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10d      	bne.n	800198e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b88      	ldr	r3, [pc, #544]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a87      	ldr	r2, [pc, #540]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b85      	ldr	r3, [pc, #532]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198e:	4b82      	ldr	r3, [pc, #520]	; (8001b98 <HAL_RCC_OscConfig+0x4d0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d118      	bne.n	80019cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800199a:	4b7f      	ldr	r3, [pc, #508]	; (8001b98 <HAL_RCC_OscConfig+0x4d0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a7e      	ldr	r2, [pc, #504]	; (8001b98 <HAL_RCC_OscConfig+0x4d0>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a6:	f7ff f9e9 	bl	8000d7c <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ae:	f7ff f9e5 	bl	8000d7c <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b64      	cmp	r3, #100	; 0x64
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e120      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c0:	4b75      	ldr	r3, [pc, #468]	; (8001b98 <HAL_RCC_OscConfig+0x4d0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x31a>
 80019d4:	4b6f      	ldr	r3, [pc, #444]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d8:	4a6e      	ldr	r2, [pc, #440]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6713      	str	r3, [r2, #112]	; 0x70
 80019e0:	e02d      	b.n	8001a3e <HAL_RCC_OscConfig+0x376>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x33c>
 80019ea:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ee:	4a69      	ldr	r2, [pc, #420]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6713      	str	r3, [r2, #112]	; 0x70
 80019f6:	4b67      	ldr	r3, [pc, #412]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fa:	4a66      	ldr	r2, [pc, #408]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	6713      	str	r3, [r2, #112]	; 0x70
 8001a02:	e01c      	b.n	8001a3e <HAL_RCC_OscConfig+0x376>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d10c      	bne.n	8001a26 <HAL_RCC_OscConfig+0x35e>
 8001a0c:	4b61      	ldr	r3, [pc, #388]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a10:	4a60      	ldr	r2, [pc, #384]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	6713      	str	r3, [r2, #112]	; 0x70
 8001a18:	4b5e      	ldr	r3, [pc, #376]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1c:	4a5d      	ldr	r2, [pc, #372]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6713      	str	r3, [r2, #112]	; 0x70
 8001a24:	e00b      	b.n	8001a3e <HAL_RCC_OscConfig+0x376>
 8001a26:	4b5b      	ldr	r3, [pc, #364]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2a:	4a5a      	ldr	r2, [pc, #360]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	6713      	str	r3, [r2, #112]	; 0x70
 8001a32:	4b58      	ldr	r3, [pc, #352]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a36:	4a57      	ldr	r2, [pc, #348]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001a38:	f023 0304 	bic.w	r3, r3, #4
 8001a3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d015      	beq.n	8001a72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a46:	f7ff f999 	bl	8000d7c <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4c:	e00a      	b.n	8001a64 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7ff f995 	bl	8000d7c <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e0ce      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	4b4b      	ldr	r3, [pc, #300]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0ee      	beq.n	8001a4e <HAL_RCC_OscConfig+0x386>
 8001a70:	e014      	b.n	8001a9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a72:	f7ff f983 	bl	8000d7c <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff f97f 	bl	8000d7c <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e0b8      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a90:	4b40      	ldr	r3, [pc, #256]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1ee      	bne.n	8001a7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d105      	bne.n	8001aae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	4a3b      	ldr	r2, [pc, #236]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 80a4 	beq.w	8001c00 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab8:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d06b      	beq.n	8001b9c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d149      	bne.n	8001b60 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001acc:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a30      	ldr	r2, [pc, #192]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f950 	bl	8000d7c <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f94c 	bl	8000d7c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e087      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69da      	ldr	r2, [r3, #28]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	019b      	lsls	r3, r3, #6
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	085b      	lsrs	r3, r3, #1
 8001b16:	3b01      	subs	r3, #1
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	061b      	lsls	r3, r3, #24
 8001b22:	4313      	orrs	r3, r2
 8001b24:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001b26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b2a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a18      	ldr	r2, [pc, #96]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff f920 	bl	8000d7c <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff f91c 	bl	8000d7c <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e057      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x478>
 8001b5e:	e04f      	b.n	8001c00 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f906 	bl	8000d7c <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff f902 	bl	8000d7c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e03d      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b86:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4ac>
 8001b92:	e035      	b.n	8001c00 <HAL_RCC_OscConfig+0x538>
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_RCC_OscConfig+0x544>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d028      	beq.n	8001bfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d121      	bne.n	8001bfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d11a      	bne.n	8001bfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bcc:	4013      	ands	r3, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bd2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d111      	bne.n	8001bfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	085b      	lsrs	r3, r3, #1
 8001be4:	3b01      	subs	r3, #1
 8001be6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800

08001c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0d0      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c28:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d910      	bls.n	8001c58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b67      	ldr	r3, [pc, #412]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 020f 	bic.w	r2, r3, #15
 8001c3e:	4965      	ldr	r1, [pc, #404]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c46:	4b63      	ldr	r3, [pc, #396]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0b8      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d020      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c70:	4b59      	ldr	r3, [pc, #356]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a58      	ldr	r2, [pc, #352]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c88:	4b53      	ldr	r3, [pc, #332]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4a52      	ldr	r2, [pc, #328]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c94:	4b50      	ldr	r3, [pc, #320]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	494d      	ldr	r1, [pc, #308]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d040      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d115      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e07f      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd2:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e073      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e06b      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf2:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f023 0203 	bic.w	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4936      	ldr	r1, [pc, #216]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d04:	f7ff f83a 	bl	8000d7c <HAL_GetTick>
 8001d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0c:	f7ff f836 	bl	8000d7c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e053      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 020c 	and.w	r2, r3, #12
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d1eb      	bne.n	8001d0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d34:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d210      	bcs.n	8001d64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 020f 	bic.w	r2, r3, #15
 8001d4a:	4922      	ldr	r1, [pc, #136]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e032      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4916      	ldr	r1, [pc, #88]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d009      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	490e      	ldr	r1, [pc, #56]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001da2:	f000 f821 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8001da6:	4602      	mov	r2, r0
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	490a      	ldr	r1, [pc, #40]	; (8001ddc <HAL_RCC_ClockConfig+0x1cc>)
 8001db4:	5ccb      	ldrb	r3, [r1, r3]
 8001db6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <HAL_RCC_ClockConfig+0x1d0>)
 8001dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_RCC_ClockConfig+0x1d4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe ff96 	bl	8000cf4 <HAL_InitTick>

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023c00 	.word	0x40023c00
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	080043f4 	.word	0x080043f4
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000004 	.word	0x20000004

08001de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dec:	b094      	sub	sp, #80	; 0x50
 8001dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	647b      	str	r3, [r7, #68]	; 0x44
 8001df4:	2300      	movs	r3, #0
 8001df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001df8:	2300      	movs	r3, #0
 8001dfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e00:	4b79      	ldr	r3, [pc, #484]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d00d      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x40>
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	f200 80e1 	bhi.w	8001fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0x34>
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d003      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e1a:	e0db      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e1c:	4b73      	ldr	r3, [pc, #460]	; (8001fec <HAL_RCC_GetSysClockFreq+0x204>)
 8001e1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e20:	e0db      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e22:	4b73      	ldr	r3, [pc, #460]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e26:	e0d8      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e28:	4b6f      	ldr	r3, [pc, #444]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e30:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e32:	4b6d      	ldr	r3, [pc, #436]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d063      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e3e:	4b6a      	ldr	r3, [pc, #424]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	099b      	lsrs	r3, r3, #6
 8001e44:	2200      	movs	r2, #0
 8001e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e50:	633b      	str	r3, [r7, #48]	; 0x30
 8001e52:	2300      	movs	r3, #0
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
 8001e56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e5a:	4622      	mov	r2, r4
 8001e5c:	462b      	mov	r3, r5
 8001e5e:	f04f 0000 	mov.w	r0, #0
 8001e62:	f04f 0100 	mov.w	r1, #0
 8001e66:	0159      	lsls	r1, r3, #5
 8001e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e6c:	0150      	lsls	r0, r2, #5
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4621      	mov	r1, r4
 8001e74:	1a51      	subs	r1, r2, r1
 8001e76:	6139      	str	r1, [r7, #16]
 8001e78:	4629      	mov	r1, r5
 8001e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e8c:	4659      	mov	r1, fp
 8001e8e:	018b      	lsls	r3, r1, #6
 8001e90:	4651      	mov	r1, sl
 8001e92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e96:	4651      	mov	r1, sl
 8001e98:	018a      	lsls	r2, r1, #6
 8001e9a:	4651      	mov	r1, sl
 8001e9c:	ebb2 0801 	subs.w	r8, r2, r1
 8001ea0:	4659      	mov	r1, fp
 8001ea2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eba:	4690      	mov	r8, r2
 8001ebc:	4699      	mov	r9, r3
 8001ebe:	4623      	mov	r3, r4
 8001ec0:	eb18 0303 	adds.w	r3, r8, r3
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	462b      	mov	r3, r5
 8001ec8:	eb49 0303 	adc.w	r3, r9, r3
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eda:	4629      	mov	r1, r5
 8001edc:	024b      	lsls	r3, r1, #9
 8001ede:	4621      	mov	r1, r4
 8001ee0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	024a      	lsls	r2, r1, #9
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eee:	2200      	movs	r2, #0
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ef2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ef4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ef8:	f7fe f986 	bl	8000208 <__aeabi_uldivmod>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4613      	mov	r3, r2
 8001f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f04:	e058      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f06:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	099b      	lsrs	r3, r3, #6
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	4611      	mov	r1, r2
 8001f12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f16:	623b      	str	r3, [r7, #32]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f20:	4642      	mov	r2, r8
 8001f22:	464b      	mov	r3, r9
 8001f24:	f04f 0000 	mov.w	r0, #0
 8001f28:	f04f 0100 	mov.w	r1, #0
 8001f2c:	0159      	lsls	r1, r3, #5
 8001f2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f32:	0150      	lsls	r0, r2, #5
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4641      	mov	r1, r8
 8001f3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f3e:	4649      	mov	r1, r9
 8001f40:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f58:	ebb2 040a 	subs.w	r4, r2, sl
 8001f5c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	00eb      	lsls	r3, r5, #3
 8001f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f6e:	00e2      	lsls	r2, r4, #3
 8001f70:	4614      	mov	r4, r2
 8001f72:	461d      	mov	r5, r3
 8001f74:	4643      	mov	r3, r8
 8001f76:	18e3      	adds	r3, r4, r3
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	464b      	mov	r3, r9
 8001f7c:	eb45 0303 	adc.w	r3, r5, r3
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f8e:	4629      	mov	r1, r5
 8001f90:	028b      	lsls	r3, r1, #10
 8001f92:	4621      	mov	r1, r4
 8001f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f98:	4621      	mov	r1, r4
 8001f9a:	028a      	lsls	r2, r1, #10
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	61fa      	str	r2, [r7, #28]
 8001fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fac:	f7fe f92c 	bl	8000208 <__aeabi_uldivmod>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	0c1b      	lsrs	r3, r3, #16
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001fc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fd2:	e002      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_GetSysClockFreq+0x204>)
 8001fd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3750      	adds	r7, #80	; 0x50
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	00f42400 	.word	0x00f42400
 8001ff0:	007a1200 	.word	0x007a1200

08001ff4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000000 	.word	0x20000000

0800200c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002010:	f7ff fff0 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 8002014:	4602      	mov	r2, r0
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	0a9b      	lsrs	r3, r3, #10
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	4903      	ldr	r1, [pc, #12]	; (8002030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002022:	5ccb      	ldrb	r3, [r1, r3]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	08004404 	.word	0x08004404

08002034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002038:	f7ff ffdc 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	0b5b      	lsrs	r3, r3, #13
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	4903      	ldr	r1, [pc, #12]	; (8002058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40023800 	.word	0x40023800
 8002058:	08004404 	.word	0x08004404

0800205c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d012      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002084:	4b69      	ldr	r3, [pc, #420]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	4a68      	ldr	r2, [pc, #416]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800208e:	6093      	str	r3, [r2, #8]
 8002090:	4b66      	ldr	r3, [pc, #408]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002098:	4964      	ldr	r1, [pc, #400]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d017      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020b6:	4b5d      	ldr	r3, [pc, #372]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	4959      	ldr	r1, [pc, #356]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020d4:	d101      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80020e2:	2301      	movs	r3, #1
 80020e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d017      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020f2:	4b4e      	ldr	r3, [pc, #312]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	494a      	ldr	r1, [pc, #296]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002110:	d101      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002112:	2301      	movs	r3, #1
 8002114:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800211e:	2301      	movs	r3, #1
 8002120:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800212e:	2301      	movs	r3, #1
 8002130:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 808b 	beq.w	8002256 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002140:	4b3a      	ldr	r3, [pc, #232]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	4a39      	ldr	r2, [pc, #228]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214a:	6413      	str	r3, [r2, #64]	; 0x40
 800214c:	4b37      	ldr	r3, [pc, #220]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002158:	4b35      	ldr	r3, [pc, #212]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a34      	ldr	r2, [pc, #208]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800215e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002164:	f7fe fe0a 	bl	8000d7c <HAL_GetTick>
 8002168:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216c:	f7fe fe06 	bl	8000d7c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e357      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800217e:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800218a:	4b28      	ldr	r3, [pc, #160]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002192:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d035      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d02e      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021b2:	4b1e      	ldr	r3, [pc, #120]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	4a1d      	ldr	r2, [pc, #116]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021be:	4b1b      	ldr	r3, [pc, #108]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	4a1a      	ldr	r2, [pc, #104]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80021ca:	4a18      	ldr	r2, [pc, #96]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d114      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe fdce 	bl	8000d7c <HAL_GetTick>
 80021e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e2:	e00a      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e4:	f7fe fdca 	bl	8000d7c <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e319      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0ee      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002212:	d111      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002222:	400b      	ands	r3, r1
 8002224:	4901      	ldr	r1, [pc, #4]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002226:	4313      	orrs	r3, r2
 8002228:	608b      	str	r3, [r1, #8]
 800222a:	e00b      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800222c:	40023800 	.word	0x40023800
 8002230:	40007000 	.word	0x40007000
 8002234:	0ffffcff 	.word	0x0ffffcff
 8002238:	4baa      	ldr	r3, [pc, #680]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4aa9      	ldr	r2, [pc, #676]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800223e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002242:	6093      	str	r3, [r2, #8]
 8002244:	4ba7      	ldr	r3, [pc, #668]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002246:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002250:	49a4      	ldr	r1, [pc, #656]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002252:	4313      	orrs	r3, r2
 8002254:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b00      	cmp	r3, #0
 8002260:	d010      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002262:	4ba0      	ldr	r3, [pc, #640]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002268:	4a9e      	ldr	r2, [pc, #632]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800226a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800226e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002272:	4b9c      	ldr	r3, [pc, #624]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002274:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	4999      	ldr	r1, [pc, #612]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002290:	4b94      	ldr	r3, [pc, #592]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800229e:	4991      	ldr	r1, [pc, #580]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022b2:	4b8c      	ldr	r3, [pc, #560]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022c0:	4988      	ldr	r1, [pc, #544]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022d4:	4b83      	ldr	r3, [pc, #524]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e2:	4980      	ldr	r1, [pc, #512]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022f6:	4b7b      	ldr	r3, [pc, #492]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002304:	4977      	ldr	r1, [pc, #476]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002318:	4b72      	ldr	r3, [pc, #456]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231e:	f023 0203 	bic.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	496f      	ldr	r1, [pc, #444]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800233a:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	f023 020c 	bic.w	r2, r3, #12
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002348:	4966      	ldr	r1, [pc, #408]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800235c:	4b61      	ldr	r3, [pc, #388]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	495e      	ldr	r1, [pc, #376]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800237e:	4b59      	ldr	r3, [pc, #356]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002384:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238c:	4955      	ldr	r1, [pc, #340]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023a0:	4b50      	ldr	r3, [pc, #320]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	494d      	ldr	r1, [pc, #308]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80023c2:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d0:	4944      	ldr	r1, [pc, #272]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80023e4:	4b3f      	ldr	r3, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	493c      	ldr	r1, [pc, #240]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002406:	4b37      	ldr	r3, [pc, #220]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002414:	4933      	ldr	r1, [pc, #204]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002428:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002436:	492b      	ldr	r1, [pc, #172]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d011      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800244a:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800244c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002450:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002458:	4922      	ldr	r1, [pc, #136]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002468:	d101      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800246a:	2301      	movs	r3, #1
 800246c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800247a:	2301      	movs	r3, #1
 800247c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800248a:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002490:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002498:	4912      	ldr	r1, [pc, #72]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00b      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024ac:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024bc:	4909      	ldr	r1, [pc, #36]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d006      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80d9 	beq.w	800268a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024d8:	4b02      	ldr	r3, [pc, #8]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a01      	ldr	r2, [pc, #4]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024e2:	e001      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80024e4:	40023800 	.word	0x40023800
 80024e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ea:	f7fe fc47 	bl	8000d7c <HAL_GetTick>
 80024ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024f2:	f7fe fc43 	bl	8000d7c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b64      	cmp	r3, #100	; 0x64
 80024fe:	d901      	bls.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e194      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002504:	4b6c      	ldr	r3, [pc, #432]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d021      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002520:	2b00      	cmp	r3, #0
 8002522:	d11d      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002524:	4b64      	ldr	r3, [pc, #400]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800252a:	0c1b      	lsrs	r3, r3, #16
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002532:	4b61      	ldr	r3, [pc, #388]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002538:	0e1b      	lsrs	r3, r3, #24
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	019a      	lsls	r2, r3, #6
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	041b      	lsls	r3, r3, #16
 800254a:	431a      	orrs	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	061b      	lsls	r3, r3, #24
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	071b      	lsls	r3, r3, #28
 8002558:	4957      	ldr	r1, [pc, #348]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800257e:	2b00      	cmp	r3, #0
 8002580:	d02e      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800258a:	d129      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800258c:	4b4a      	ldr	r3, [pc, #296]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800258e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002592:	0c1b      	lsrs	r3, r3, #16
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800259a:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800259c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a0:	0f1b      	lsrs	r3, r3, #28
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	019a      	lsls	r2, r3, #6
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	041b      	lsls	r3, r3, #16
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	061b      	lsls	r3, r3, #24
 80025ba:	431a      	orrs	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	071b      	lsls	r3, r3, #28
 80025c0:	493d      	ldr	r1, [pc, #244]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80025c8:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ce:	f023 021f 	bic.w	r2, r3, #31
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	3b01      	subs	r3, #1
 80025d8:	4937      	ldr	r1, [pc, #220]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d01d      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025ec:	4b32      	ldr	r3, [pc, #200]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025f2:	0e1b      	lsrs	r3, r3, #24
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025fa:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002600:	0f1b      	lsrs	r3, r3, #28
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	019a      	lsls	r2, r3, #6
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	041b      	lsls	r3, r3, #16
 8002614:	431a      	orrs	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	061b      	lsls	r3, r3, #24
 800261a:	431a      	orrs	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	071b      	lsls	r3, r3, #28
 8002620:	4925      	ldr	r1, [pc, #148]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d011      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	019a      	lsls	r2, r3, #6
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	041b      	lsls	r3, r3, #16
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	061b      	lsls	r3, r3, #24
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	071b      	lsls	r3, r3, #28
 8002650:	4919      	ldr	r1, [pc, #100]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002658:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a16      	ldr	r2, [pc, #88]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800265e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002662:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002664:	f7fe fb8a 	bl	8000d7c <HAL_GetTick>
 8002668:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800266a:	e008      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800266c:	f7fe fb86 	bl	8000d7c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e0d7      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b01      	cmp	r3, #1
 800268e:	f040 80cd 	bne.w	800282c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a08      	ldr	r2, [pc, #32]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800269e:	f7fe fb6d 	bl	8000d7c <HAL_GetTick>
 80026a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026a4:	e00a      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026a6:	f7fe fb69 	bl	8000d7c <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b64      	cmp	r3, #100	; 0x64
 80026b2:	d903      	bls.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e0ba      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80026b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026bc:	4b5e      	ldr	r3, [pc, #376]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c8:	d0ed      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x682>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d02e      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d12a      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026f2:	4b51      	ldr	r3, [pc, #324]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	0c1b      	lsrs	r3, r3, #16
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002700:	4b4d      	ldr	r3, [pc, #308]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	0f1b      	lsrs	r3, r3, #28
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	019a      	lsls	r2, r3, #6
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	041b      	lsls	r3, r3, #16
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	061b      	lsls	r3, r3, #24
 8002720:	431a      	orrs	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	071b      	lsls	r3, r3, #28
 8002726:	4944      	ldr	r1, [pc, #272]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800272e:	4b42      	ldr	r3, [pc, #264]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002734:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	3b01      	subs	r3, #1
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	493d      	ldr	r1, [pc, #244]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d022      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800275c:	d11d      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800275e:	4b36      	ldr	r3, [pc, #216]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	0e1b      	lsrs	r3, r3, #24
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800276c:	4b32      	ldr	r3, [pc, #200]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	0f1b      	lsrs	r3, r3, #28
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	019a      	lsls	r2, r3, #6
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	431a      	orrs	r2, r3
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	061b      	lsls	r3, r3, #24
 800278c:	431a      	orrs	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	071b      	lsls	r3, r3, #28
 8002792:	4929      	ldr	r1, [pc, #164]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d028      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027a6:	4b24      	ldr	r3, [pc, #144]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ac:	0e1b      	lsrs	r3, r3, #24
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027b4:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	0c1b      	lsrs	r3, r3, #16
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	019a      	lsls	r2, r3, #6
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	041b      	lsls	r3, r3, #16
 80027cc:	431a      	orrs	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	071b      	lsls	r3, r3, #28
 80027da:	4917      	ldr	r1, [pc, #92]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	4911      	ldr	r1, [pc, #68]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002804:	f7fe faba 	bl	8000d7c <HAL_GetTick>
 8002808:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800280c:	f7fe fab6 	bl	8000d7c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e007      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800282a:	d1ef      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800

0800283c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e054      	b.n	80028f8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d111      	bne.n	800287e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fbf8 	bl	8003058 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a23      	ldr	r2, [pc, #140]	; (8002900 <HAL_TIM_Base_Init+0xc4>)
 8002874:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2202      	movs	r2, #2
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3304      	adds	r3, #4
 800288e:	4619      	mov	r1, r3
 8002890:	4610      	mov	r0, r2
 8002892:	f000 faa7 	bl	8002de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	08000b0d 	.word	0x08000b0d

08002904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b02      	cmp	r3, #2
 8002918:	d128      	bne.n	800296c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b02      	cmp	r3, #2
 8002926:	d121      	bne.n	800296c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0202 	mvn.w	r2, #2
 8002930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
 8002950:	e009      	b.n	8002966 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b04      	cmp	r3, #4
 8002978:	d128      	bne.n	80029cc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b04      	cmp	r3, #4
 8002986:	d121      	bne.n	80029cc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0204 	mvn.w	r2, #4
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2202      	movs	r2, #2
 8002996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
 80029b0:	e009      	b.n	80029c6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d128      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d121      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0208 	mvn.w	r2, #8
 80029f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2204      	movs	r2, #4
 80029f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	4798      	blx	r3
 8002a10:	e009      	b.n	8002a26 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	d128      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d121      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0210 	mvn.w	r2, #16
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2208      	movs	r2, #8
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	4798      	blx	r3
 8002a70:	e009      	b.n	8002a86 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d110      	bne.n	8002abc <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d109      	bne.n	8002abc <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0201 	mvn.w	r2, #1
 8002ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac6:	2b80      	cmp	r3, #128	; 0x80
 8002ac8:	d110      	bne.n	8002aec <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad4:	2b80      	cmp	r3, #128	; 0x80
 8002ad6:	d109      	bne.n	8002aec <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afa:	d110      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	2b80      	cmp	r3, #128	; 0x80
 8002b08:	d109      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d110      	bne.n	8002b4e <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b40      	cmp	r3, #64	; 0x40
 8002b38:	d109      	bne.n	8002b4e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d110      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	d109      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f06f 0220 	mvn.w	r2, #32
 8002b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e0b4      	b.n	8002d0e <HAL_TIM_ConfigClockSource+0x186>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	4b56      	ldr	r3, [pc, #344]	; (8002d18 <HAL_TIM_ConfigClockSource+0x190>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bdc:	d03e      	beq.n	8002c5c <HAL_TIM_ConfigClockSource+0xd4>
 8002bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be2:	f200 8087 	bhi.w	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bea:	f000 8086 	beq.w	8002cfa <HAL_TIM_ConfigClockSource+0x172>
 8002bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf2:	d87f      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf4:	2b70      	cmp	r3, #112	; 0x70
 8002bf6:	d01a      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0xa6>
 8002bf8:	2b70      	cmp	r3, #112	; 0x70
 8002bfa:	d87b      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bfc:	2b60      	cmp	r3, #96	; 0x60
 8002bfe:	d050      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0x11a>
 8002c00:	2b60      	cmp	r3, #96	; 0x60
 8002c02:	d877      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c04:	2b50      	cmp	r3, #80	; 0x50
 8002c06:	d03c      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0xfa>
 8002c08:	2b50      	cmp	r3, #80	; 0x50
 8002c0a:	d873      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d058      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x13a>
 8002c10:	2b40      	cmp	r3, #64	; 0x40
 8002c12:	d86f      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c14:	2b30      	cmp	r3, #48	; 0x30
 8002c16:	d064      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c18:	2b30      	cmp	r3, #48	; 0x30
 8002c1a:	d86b      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d060      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d867      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d05c      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d05a      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c2c:	e062      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c3e:	f000 f9eb 	bl	8003018 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	609a      	str	r2, [r3, #8]
      break;
 8002c5a:	e04f      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c6c:	f000 f9d4 	bl	8003018 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c7e:	609a      	str	r2, [r3, #8]
      break;
 8002c80:	e03c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f000 f948 	bl	8002f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2150      	movs	r1, #80	; 0x50
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f9a1 	bl	8002fe2 <TIM_ITRx_SetConfig>
      break;
 8002ca0:	e02c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f000 f967 	bl	8002f82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2160      	movs	r1, #96	; 0x60
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f991 	bl	8002fe2 <TIM_ITRx_SetConfig>
      break;
 8002cc0:	e01c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f000 f928 	bl	8002f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2140      	movs	r1, #64	; 0x40
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f981 	bl	8002fe2 <TIM_ITRx_SetConfig>
      break;
 8002ce0:	e00c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4619      	mov	r1, r3
 8002cec:	4610      	mov	r0, r2
 8002cee:	f000 f978 	bl	8002fe2 <TIM_ITRx_SetConfig>
      break;
 8002cf2:	e003      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf8:	e000      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	fffeff88 	.word	0xfffeff88

08002d1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a40      	ldr	r2, [pc, #256]	; (8002ef8 <TIM_Base_SetConfig+0x114>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d013      	beq.n	8002e24 <TIM_Base_SetConfig+0x40>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e02:	d00f      	beq.n	8002e24 <TIM_Base_SetConfig+0x40>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a3d      	ldr	r2, [pc, #244]	; (8002efc <TIM_Base_SetConfig+0x118>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00b      	beq.n	8002e24 <TIM_Base_SetConfig+0x40>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a3c      	ldr	r2, [pc, #240]	; (8002f00 <TIM_Base_SetConfig+0x11c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d007      	beq.n	8002e24 <TIM_Base_SetConfig+0x40>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a3b      	ldr	r2, [pc, #236]	; (8002f04 <TIM_Base_SetConfig+0x120>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d003      	beq.n	8002e24 <TIM_Base_SetConfig+0x40>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a3a      	ldr	r2, [pc, #232]	; (8002f08 <TIM_Base_SetConfig+0x124>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d108      	bne.n	8002e36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a2f      	ldr	r2, [pc, #188]	; (8002ef8 <TIM_Base_SetConfig+0x114>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d02b      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e44:	d027      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a2c      	ldr	r2, [pc, #176]	; (8002efc <TIM_Base_SetConfig+0x118>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d023      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a2b      	ldr	r2, [pc, #172]	; (8002f00 <TIM_Base_SetConfig+0x11c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01f      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a2a      	ldr	r2, [pc, #168]	; (8002f04 <TIM_Base_SetConfig+0x120>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d01b      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a29      	ldr	r2, [pc, #164]	; (8002f08 <TIM_Base_SetConfig+0x124>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d017      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a28      	ldr	r2, [pc, #160]	; (8002f0c <TIM_Base_SetConfig+0x128>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a27      	ldr	r2, [pc, #156]	; (8002f10 <TIM_Base_SetConfig+0x12c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00f      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <TIM_Base_SetConfig+0x130>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00b      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a25      	ldr	r2, [pc, #148]	; (8002f18 <TIM_Base_SetConfig+0x134>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a24      	ldr	r2, [pc, #144]	; (8002f1c <TIM_Base_SetConfig+0x138>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d003      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a23      	ldr	r2, [pc, #140]	; (8002f20 <TIM_Base_SetConfig+0x13c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d108      	bne.n	8002ea8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <TIM_Base_SetConfig+0x114>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d003      	beq.n	8002edc <TIM_Base_SetConfig+0xf8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a0c      	ldr	r2, [pc, #48]	; (8002f08 <TIM_Base_SetConfig+0x124>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d103      	bne.n	8002ee4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	615a      	str	r2, [r3, #20]
}
 8002eea:	bf00      	nop
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	40000400 	.word	0x40000400
 8002f00:	40000800 	.word	0x40000800
 8002f04:	40000c00 	.word	0x40000c00
 8002f08:	40010400 	.word	0x40010400
 8002f0c:	40014000 	.word	0x40014000
 8002f10:	40014400 	.word	0x40014400
 8002f14:	40014800 	.word	0x40014800
 8002f18:	40001800 	.word	0x40001800
 8002f1c:	40001c00 	.word	0x40001c00
 8002f20:	40002000 	.word	0x40002000

08002f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f023 0201 	bic.w	r2, r3, #1
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f023 030a 	bic.w	r3, r3, #10
 8002f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	621a      	str	r2, [r3, #32]
}
 8002f76:	bf00      	nop
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b087      	sub	sp, #28
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	f023 0210 	bic.w	r2, r3, #16
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	031b      	lsls	r3, r3, #12
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	621a      	str	r2, [r3, #32]
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f043 0307 	orr.w	r3, r3, #7
 8003004:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	609a      	str	r2, [r3, #8]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003032:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	021a      	lsls	r2, r3, #8
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	431a      	orrs	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4313      	orrs	r3, r2
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	609a      	str	r2, [r3, #8]
}
 800304c:	bf00      	nop
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a1e      	ldr	r2, [pc, #120]	; (80030dc <TIM_ResetCallback+0x84>)
 8003064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a1d      	ldr	r2, [pc, #116]	; (80030e0 <TIM_ResetCallback+0x88>)
 800306c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <TIM_ResetCallback+0x8c>)
 8003074:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <TIM_ResetCallback+0x90>)
 800307c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a1a      	ldr	r2, [pc, #104]	; (80030ec <TIM_ResetCallback+0x94>)
 8003084:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a19      	ldr	r2, [pc, #100]	; (80030f0 <TIM_ResetCallback+0x98>)
 800308c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a18      	ldr	r2, [pc, #96]	; (80030f4 <TIM_ResetCallback+0x9c>)
 8003094:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a17      	ldr	r2, [pc, #92]	; (80030f8 <TIM_ResetCallback+0xa0>)
 800309c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a16      	ldr	r2, [pc, #88]	; (80030fc <TIM_ResetCallback+0xa4>)
 80030a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a15      	ldr	r2, [pc, #84]	; (8003100 <TIM_ResetCallback+0xa8>)
 80030ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a14      	ldr	r2, [pc, #80]	; (8003104 <TIM_ResetCallback+0xac>)
 80030b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a13      	ldr	r2, [pc, #76]	; (8003108 <TIM_ResetCallback+0xb0>)
 80030bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a12      	ldr	r2, [pc, #72]	; (800310c <TIM_ResetCallback+0xb4>)
 80030c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a11      	ldr	r2, [pc, #68]	; (8003110 <TIM_ResetCallback+0xb8>)
 80030cc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	08002d1d 	.word	0x08002d1d
 80030e0:	08002d31 	.word	0x08002d31
 80030e4:	08002da9 	.word	0x08002da9
 80030e8:	08002dbd 	.word	0x08002dbd
 80030ec:	08002d59 	.word	0x08002d59
 80030f0:	08002d6d 	.word	0x08002d6d
 80030f4:	08002d45 	.word	0x08002d45
 80030f8:	08002d81 	.word	0x08002d81
 80030fc:	08002d95 	.word	0x08002d95
 8003100:	08002dd1 	.word	0x08002dd1
 8003104:	08003231 	.word	0x08003231
 8003108:	08003245 	.word	0x08003245
 800310c:	08003259 	.word	0x08003259
 8003110:	0800326d 	.word	0x0800326d

08003114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003128:	2302      	movs	r3, #2
 800312a:	e06d      	b.n	8003208 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a30      	ldr	r2, [pc, #192]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d004      	beq.n	8003160 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a2f      	ldr	r2, [pc, #188]	; (8003218 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d108      	bne.n	8003172 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003166:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003178:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4313      	orrs	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a20      	ldr	r2, [pc, #128]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d022      	beq.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319e:	d01d      	beq.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a1d      	ldr	r2, [pc, #116]	; (800321c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d018      	beq.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d013      	beq.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1a      	ldr	r2, [pc, #104]	; (8003224 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00e      	beq.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a15      	ldr	r2, [pc, #84]	; (8003218 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d009      	beq.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a16      	ldr	r2, [pc, #88]	; (8003228 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d004      	beq.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a15      	ldr	r2, [pc, #84]	; (800322c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d10c      	bne.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	40010000 	.word	0x40010000
 8003218:	40010400 	.word	0x40010400
 800321c:	40000400 	.word	0x40000400
 8003220:	40000800 	.word	0x40000800
 8003224:	40000c00 	.word	0x40000c00
 8003228:	40014000 	.word	0x40014000
 800322c:	40001800 	.word	0x40001800

08003230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e04e      	b.n	8003330 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d114      	bne.n	80032c4 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fb82 	bl	80039ac <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d103      	bne.n	80032ba <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a20      	ldr	r2, [pc, #128]	; (8003338 <HAL_UART_Init+0xb8>)
 80032b6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2224      	movs	r2, #36	; 0x24
 80032c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0201 	bic.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fba6 	bl	8003a2c <UART_SetConfig>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e022      	b.n	8003330 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fdfe 	bl	8003ef4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003306:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003316:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fe85 	bl	8004038 <UART_CheckIdleState>
 800332e:	4603      	mov	r3, r0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	08000bb9 	.word	0x08000bb9

0800333c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b0ba      	sub	sp, #232	; 0xe8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003362:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003366:	f640 030f 	movw	r3, #2063	; 0x80f
 800336a:	4013      	ands	r3, r2
 800336c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d115      	bne.n	80033a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00f      	beq.n	80033a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d009      	beq.n	80033a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 82a1 	beq.w	80038dc <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
      }
      return;
 80033a2:	e29b      	b.n	80038dc <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80033a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 811d 	beq.w	80035e8 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80033ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80033ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80033be:	4b88      	ldr	r3, [pc, #544]	; (80035e0 <HAL_UART_IRQHandler+0x2a4>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8110 	beq.w	80035e8 <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d011      	beq.n	80033f8 <HAL_UART_IRQHandler+0xbc>
 80033d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00b      	beq.n	80033f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2201      	movs	r2, #1
 80033e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ee:	f043 0201 	orr.w	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d011      	beq.n	8003428 <HAL_UART_IRQHandler+0xec>
 8003404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00b      	beq.n	8003428 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2202      	movs	r2, #2
 8003416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341e:	f043 0204 	orr.w	r2, r3, #4
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d011      	beq.n	8003458 <HAL_UART_IRQHandler+0x11c>
 8003434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00b      	beq.n	8003458 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2204      	movs	r2, #4
 8003446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800344e:	f043 0202 	orr.w	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d017      	beq.n	8003494 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003474:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00b      	beq.n	8003494 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2208      	movs	r2, #8
 8003482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800348a:	f043 0208 	orr.w	r2, r3, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800349c:	2b00      	cmp	r3, #0
 800349e:	d012      	beq.n	80034c6 <HAL_UART_IRQHandler+0x18a>
 80034a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00c      	beq.n	80034c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034bc:	f043 0220 	orr.w	r2, r3, #32
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 8207 	beq.w	80038e0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00d      	beq.n	80034fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003500:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350e:	2b40      	cmp	r3, #64	; 0x40
 8003510:	d005      	beq.n	800351e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003516:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800351a:	2b00      	cmp	r3, #0
 800351c:	d053      	beq.n	80035c6 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fe87 	bl	8004232 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d143      	bne.n	80035ba <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3308      	adds	r3, #8
 8003538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800354c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3308      	adds	r3, #8
 800355a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800355e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800356a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1d9      	bne.n	8003532 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003582:	2b00      	cmp	r3, #0
 8003584:	d013      	beq.n	80035ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358a:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <HAL_UART_IRQHandler+0x2a8>)
 800358c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd fe7b 	bl	800128e <HAL_DMA_Abort_IT>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01d      	beq.n	80035da <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035a8:	4610      	mov	r0, r2
 80035aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ac:	e015      	b.n	80035da <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b8:	e00f      	b.n	80035da <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c4:	e009      	b.n	80035da <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80035d8:	e182      	b.n	80038e0 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035da:	bf00      	nop
    return;
 80035dc:	e180      	b.n	80038e0 <HAL_UART_IRQHandler+0x5a4>
 80035de:	bf00      	nop
 80035e0:	04000120 	.word	0x04000120
 80035e4:	080042fb 	.word	0x080042fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	f040 8150 	bne.w	8003892 <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8149 	beq.w	8003892 <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8142 	beq.w	8003892 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2210      	movs	r2, #16
 8003614:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003620:	2b40      	cmp	r3, #64	; 0x40
 8003622:	f040 80b8 	bne.w	8003796 <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003632:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 8154 	beq.w	80038e4 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003646:	429a      	cmp	r2, r3
 8003648:	f080 814c 	bcs.w	80038e4 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003652:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003660:	f000 8086 	beq.w	8003770 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003670:	e853 3f00 	ldrex	r3, [r3]
 8003674:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800367c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800368e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003692:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003696:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800369a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80036a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1da      	bne.n	8003664 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3308      	adds	r3, #8
 80036b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3308      	adds	r3, #8
 80036ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036de:	e841 2300 	strex	r3, r2, [r1]
 80036e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e1      	bne.n	80036ae <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3308      	adds	r3, #8
 80036f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3308      	adds	r3, #8
 800370a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800370e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003710:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003712:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003714:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003716:	e841 2300 	strex	r3, r2, [r1]
 800371a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800371c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1e3      	bne.n	80036ea <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800373e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003740:	f023 0310 	bic.w	r3, r3, #16
 8003744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003752:	65bb      	str	r3, [r7, #88]	; 0x58
 8003754:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003756:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e4      	bne.n	8003730 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd fd1f 	bl	80011ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 8003788:	b292      	uxth	r2, r2
 800378a:	1a8a      	subs	r2, r1, r2
 800378c:	b292      	uxth	r2, r2
 800378e:	4611      	mov	r1, r2
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003794:	e0a6      	b.n	80038e4 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 8098 	beq.w	80038e8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80037b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8093 	beq.w	80038e8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037e4:	647b      	str	r3, [r7, #68]	; 0x44
 80037e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e4      	bne.n	80037c2 <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3308      	adds	r3, #8
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	623b      	str	r3, [r7, #32]
   return(result);
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3308      	adds	r3, #8
 8003818:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800381c:	633a      	str	r2, [r7, #48]	; 0x30
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003820:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003824:	e841 2300 	strex	r3, r2, [r1]
 8003828:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e3      	bne.n	80037f8 <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	e853 3f00 	ldrex	r3, [r3]
 8003850:	60fb      	str	r3, [r7, #12]
   return(result);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f023 0310 	bic.w	r3, r3, #16
 8003858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386a:	69b9      	ldr	r1, [r7, #24]
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	617b      	str	r3, [r7, #20]
   return(result);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e4      	bne.n	8003844 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003886:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800388a:	4611      	mov	r1, r2
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003890:	e02a      	b.n	80038e8 <HAL_UART_IRQHandler+0x5ac>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00e      	beq.n	80038bc <HAL_UART_IRQHandler+0x580>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800389e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d008      	beq.n	80038bc <HAL_UART_IRQHandler+0x580>
  {
    if (huart->TxISR != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d01c      	beq.n	80038ec <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3
    }
    return;
 80038ba:	e017      	b.n	80038ec <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d012      	beq.n	80038ee <HAL_UART_IRQHandler+0x5b2>
 80038c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00c      	beq.n	80038ee <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fd28 	bl	800432a <UART_EndTransmit_IT>
    return;
 80038da:	e008      	b.n	80038ee <HAL_UART_IRQHandler+0x5b2>
      return;
 80038dc:	bf00      	nop
 80038de:	e006      	b.n	80038ee <HAL_UART_IRQHandler+0x5b2>
    return;
 80038e0:	bf00      	nop
 80038e2:	e004      	b.n	80038ee <HAL_UART_IRQHandler+0x5b2>
      return;
 80038e4:	bf00      	nop
 80038e6:	e002      	b.n	80038ee <HAL_UART_IRQHandler+0x5b2>
      return;
 80038e8:	bf00      	nop
 80038ea:	e000      	b.n	80038ee <HAL_UART_IRQHandler+0x5b2>
    return;
 80038ec:	bf00      	nop
  }

}
 80038ee:	37e8      	adds	r7, #232	; 0xe8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a14      	ldr	r2, [pc, #80]	; (8003a08 <UART_InitCallbacksToDefault+0x5c>)
 80039b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a13      	ldr	r2, [pc, #76]	; (8003a0c <UART_InitCallbacksToDefault+0x60>)
 80039c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a12      	ldr	r2, [pc, #72]	; (8003a10 <UART_InitCallbacksToDefault+0x64>)
 80039c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a11      	ldr	r2, [pc, #68]	; (8003a14 <UART_InitCallbacksToDefault+0x68>)
 80039d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a10      	ldr	r2, [pc, #64]	; (8003a18 <UART_InitCallbacksToDefault+0x6c>)
 80039d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a0f      	ldr	r2, [pc, #60]	; (8003a1c <UART_InitCallbacksToDefault+0x70>)
 80039e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <UART_InitCallbacksToDefault+0x74>)
 80039e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a0d      	ldr	r2, [pc, #52]	; (8003a24 <UART_InitCallbacksToDefault+0x78>)
 80039f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a0c      	ldr	r2, [pc, #48]	; (8003a28 <UART_InitCallbacksToDefault+0x7c>)
 80039f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	08003909 	.word	0x08003909
 8003a0c:	080038f5 	.word	0x080038f5
 8003a10:	08003931 	.word	0x08003931
 8003a14:	0800391d 	.word	0x0800391d
 8003a18:	08003945 	.word	0x08003945
 8003a1c:	08003959 	.word	0x08003959
 8003a20:	0800396d 	.word	0x0800396d
 8003a24:	08003981 	.word	0x08003981
 8003a28:	08003995 	.word	0x08003995

08003a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4ba6      	ldr	r3, [pc, #664]	; (8003cf0 <UART_SetConfig+0x2c4>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	6979      	ldr	r1, [r7, #20]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a94      	ldr	r2, [pc, #592]	; (8003cf4 <UART_SetConfig+0x2c8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d120      	bne.n	8003aea <UART_SetConfig+0xbe>
 8003aa8:	4b93      	ldr	r3, [pc, #588]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d816      	bhi.n	8003ae4 <UART_SetConfig+0xb8>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <UART_SetConfig+0x90>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003ad9 	.word	0x08003ad9
 8003ac4:	08003ad3 	.word	0x08003ad3
 8003ac8:	08003adf 	.word	0x08003adf
 8003acc:	2301      	movs	r3, #1
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	e150      	b.n	8003d74 <UART_SetConfig+0x348>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	77fb      	strb	r3, [r7, #31]
 8003ad6:	e14d      	b.n	8003d74 <UART_SetConfig+0x348>
 8003ad8:	2304      	movs	r3, #4
 8003ada:	77fb      	strb	r3, [r7, #31]
 8003adc:	e14a      	b.n	8003d74 <UART_SetConfig+0x348>
 8003ade:	2308      	movs	r3, #8
 8003ae0:	77fb      	strb	r3, [r7, #31]
 8003ae2:	e147      	b.n	8003d74 <UART_SetConfig+0x348>
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e144      	b.n	8003d74 <UART_SetConfig+0x348>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a83      	ldr	r2, [pc, #524]	; (8003cfc <UART_SetConfig+0x2d0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d132      	bne.n	8003b5a <UART_SetConfig+0x12e>
 8003af4:	4b80      	ldr	r3, [pc, #512]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b0c      	cmp	r3, #12
 8003b00:	d828      	bhi.n	8003b54 <UART_SetConfig+0x128>
 8003b02:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <UART_SetConfig+0xdc>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b3d 	.word	0x08003b3d
 8003b0c:	08003b55 	.word	0x08003b55
 8003b10:	08003b55 	.word	0x08003b55
 8003b14:	08003b55 	.word	0x08003b55
 8003b18:	08003b49 	.word	0x08003b49
 8003b1c:	08003b55 	.word	0x08003b55
 8003b20:	08003b55 	.word	0x08003b55
 8003b24:	08003b55 	.word	0x08003b55
 8003b28:	08003b43 	.word	0x08003b43
 8003b2c:	08003b55 	.word	0x08003b55
 8003b30:	08003b55 	.word	0x08003b55
 8003b34:	08003b55 	.word	0x08003b55
 8003b38:	08003b4f 	.word	0x08003b4f
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	77fb      	strb	r3, [r7, #31]
 8003b40:	e118      	b.n	8003d74 <UART_SetConfig+0x348>
 8003b42:	2302      	movs	r3, #2
 8003b44:	77fb      	strb	r3, [r7, #31]
 8003b46:	e115      	b.n	8003d74 <UART_SetConfig+0x348>
 8003b48:	2304      	movs	r3, #4
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	e112      	b.n	8003d74 <UART_SetConfig+0x348>
 8003b4e:	2308      	movs	r3, #8
 8003b50:	77fb      	strb	r3, [r7, #31]
 8003b52:	e10f      	b.n	8003d74 <UART_SetConfig+0x348>
 8003b54:	2310      	movs	r3, #16
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e10c      	b.n	8003d74 <UART_SetConfig+0x348>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a68      	ldr	r2, [pc, #416]	; (8003d00 <UART_SetConfig+0x2d4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d120      	bne.n	8003ba6 <UART_SetConfig+0x17a>
 8003b64:	4b64      	ldr	r3, [pc, #400]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b6e:	2b30      	cmp	r3, #48	; 0x30
 8003b70:	d013      	beq.n	8003b9a <UART_SetConfig+0x16e>
 8003b72:	2b30      	cmp	r3, #48	; 0x30
 8003b74:	d814      	bhi.n	8003ba0 <UART_SetConfig+0x174>
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	d009      	beq.n	8003b8e <UART_SetConfig+0x162>
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d810      	bhi.n	8003ba0 <UART_SetConfig+0x174>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <UART_SetConfig+0x15c>
 8003b82:	2b10      	cmp	r3, #16
 8003b84:	d006      	beq.n	8003b94 <UART_SetConfig+0x168>
 8003b86:	e00b      	b.n	8003ba0 <UART_SetConfig+0x174>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	77fb      	strb	r3, [r7, #31]
 8003b8c:	e0f2      	b.n	8003d74 <UART_SetConfig+0x348>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	77fb      	strb	r3, [r7, #31]
 8003b92:	e0ef      	b.n	8003d74 <UART_SetConfig+0x348>
 8003b94:	2304      	movs	r3, #4
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e0ec      	b.n	8003d74 <UART_SetConfig+0x348>
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e0e9      	b.n	8003d74 <UART_SetConfig+0x348>
 8003ba0:	2310      	movs	r3, #16
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e0e6      	b.n	8003d74 <UART_SetConfig+0x348>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a56      	ldr	r2, [pc, #344]	; (8003d04 <UART_SetConfig+0x2d8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d120      	bne.n	8003bf2 <UART_SetConfig+0x1c6>
 8003bb0:	4b51      	ldr	r3, [pc, #324]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bba:	2bc0      	cmp	r3, #192	; 0xc0
 8003bbc:	d013      	beq.n	8003be6 <UART_SetConfig+0x1ba>
 8003bbe:	2bc0      	cmp	r3, #192	; 0xc0
 8003bc0:	d814      	bhi.n	8003bec <UART_SetConfig+0x1c0>
 8003bc2:	2b80      	cmp	r3, #128	; 0x80
 8003bc4:	d009      	beq.n	8003bda <UART_SetConfig+0x1ae>
 8003bc6:	2b80      	cmp	r3, #128	; 0x80
 8003bc8:	d810      	bhi.n	8003bec <UART_SetConfig+0x1c0>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <UART_SetConfig+0x1a8>
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d006      	beq.n	8003be0 <UART_SetConfig+0x1b4>
 8003bd2:	e00b      	b.n	8003bec <UART_SetConfig+0x1c0>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e0cc      	b.n	8003d74 <UART_SetConfig+0x348>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	77fb      	strb	r3, [r7, #31]
 8003bde:	e0c9      	b.n	8003d74 <UART_SetConfig+0x348>
 8003be0:	2304      	movs	r3, #4
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e0c6      	b.n	8003d74 <UART_SetConfig+0x348>
 8003be6:	2308      	movs	r3, #8
 8003be8:	77fb      	strb	r3, [r7, #31]
 8003bea:	e0c3      	b.n	8003d74 <UART_SetConfig+0x348>
 8003bec:	2310      	movs	r3, #16
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e0c0      	b.n	8003d74 <UART_SetConfig+0x348>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a44      	ldr	r2, [pc, #272]	; (8003d08 <UART_SetConfig+0x2dc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d125      	bne.n	8003c48 <UART_SetConfig+0x21c>
 8003bfc:	4b3e      	ldr	r3, [pc, #248]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c0a:	d017      	beq.n	8003c3c <UART_SetConfig+0x210>
 8003c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c10:	d817      	bhi.n	8003c42 <UART_SetConfig+0x216>
 8003c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c16:	d00b      	beq.n	8003c30 <UART_SetConfig+0x204>
 8003c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1c:	d811      	bhi.n	8003c42 <UART_SetConfig+0x216>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <UART_SetConfig+0x1fe>
 8003c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c26:	d006      	beq.n	8003c36 <UART_SetConfig+0x20a>
 8003c28:	e00b      	b.n	8003c42 <UART_SetConfig+0x216>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	e0a1      	b.n	8003d74 <UART_SetConfig+0x348>
 8003c30:	2302      	movs	r3, #2
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e09e      	b.n	8003d74 <UART_SetConfig+0x348>
 8003c36:	2304      	movs	r3, #4
 8003c38:	77fb      	strb	r3, [r7, #31]
 8003c3a:	e09b      	b.n	8003d74 <UART_SetConfig+0x348>
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e098      	b.n	8003d74 <UART_SetConfig+0x348>
 8003c42:	2310      	movs	r3, #16
 8003c44:	77fb      	strb	r3, [r7, #31]
 8003c46:	e095      	b.n	8003d74 <UART_SetConfig+0x348>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a2f      	ldr	r2, [pc, #188]	; (8003d0c <UART_SetConfig+0x2e0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d125      	bne.n	8003c9e <UART_SetConfig+0x272>
 8003c52:	4b29      	ldr	r3, [pc, #164]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c60:	d017      	beq.n	8003c92 <UART_SetConfig+0x266>
 8003c62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c66:	d817      	bhi.n	8003c98 <UART_SetConfig+0x26c>
 8003c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6c:	d00b      	beq.n	8003c86 <UART_SetConfig+0x25a>
 8003c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c72:	d811      	bhi.n	8003c98 <UART_SetConfig+0x26c>
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <UART_SetConfig+0x254>
 8003c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7c:	d006      	beq.n	8003c8c <UART_SetConfig+0x260>
 8003c7e:	e00b      	b.n	8003c98 <UART_SetConfig+0x26c>
 8003c80:	2301      	movs	r3, #1
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e076      	b.n	8003d74 <UART_SetConfig+0x348>
 8003c86:	2302      	movs	r3, #2
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	e073      	b.n	8003d74 <UART_SetConfig+0x348>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e070      	b.n	8003d74 <UART_SetConfig+0x348>
 8003c92:	2308      	movs	r3, #8
 8003c94:	77fb      	strb	r3, [r7, #31]
 8003c96:	e06d      	b.n	8003d74 <UART_SetConfig+0x348>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e06a      	b.n	8003d74 <UART_SetConfig+0x348>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1b      	ldr	r2, [pc, #108]	; (8003d10 <UART_SetConfig+0x2e4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d138      	bne.n	8003d1a <UART_SetConfig+0x2ee>
 8003ca8:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003cb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cb6:	d017      	beq.n	8003ce8 <UART_SetConfig+0x2bc>
 8003cb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cbc:	d82a      	bhi.n	8003d14 <UART_SetConfig+0x2e8>
 8003cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc2:	d00b      	beq.n	8003cdc <UART_SetConfig+0x2b0>
 8003cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc8:	d824      	bhi.n	8003d14 <UART_SetConfig+0x2e8>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <UART_SetConfig+0x2aa>
 8003cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd2:	d006      	beq.n	8003ce2 <UART_SetConfig+0x2b6>
 8003cd4:	e01e      	b.n	8003d14 <UART_SetConfig+0x2e8>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	77fb      	strb	r3, [r7, #31]
 8003cda:	e04b      	b.n	8003d74 <UART_SetConfig+0x348>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	77fb      	strb	r3, [r7, #31]
 8003ce0:	e048      	b.n	8003d74 <UART_SetConfig+0x348>
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	77fb      	strb	r3, [r7, #31]
 8003ce6:	e045      	b.n	8003d74 <UART_SetConfig+0x348>
 8003ce8:	2308      	movs	r3, #8
 8003cea:	77fb      	strb	r3, [r7, #31]
 8003cec:	e042      	b.n	8003d74 <UART_SetConfig+0x348>
 8003cee:	bf00      	nop
 8003cf0:	efff69f3 	.word	0xefff69f3
 8003cf4:	40011000 	.word	0x40011000
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40004400 	.word	0x40004400
 8003d00:	40004800 	.word	0x40004800
 8003d04:	40004c00 	.word	0x40004c00
 8003d08:	40005000 	.word	0x40005000
 8003d0c:	40011400 	.word	0x40011400
 8003d10:	40007800 	.word	0x40007800
 8003d14:	2310      	movs	r3, #16
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e02c      	b.n	8003d74 <UART_SetConfig+0x348>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a72      	ldr	r2, [pc, #456]	; (8003ee8 <UART_SetConfig+0x4bc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d125      	bne.n	8003d70 <UART_SetConfig+0x344>
 8003d24:	4b71      	ldr	r3, [pc, #452]	; (8003eec <UART_SetConfig+0x4c0>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d32:	d017      	beq.n	8003d64 <UART_SetConfig+0x338>
 8003d34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d38:	d817      	bhi.n	8003d6a <UART_SetConfig+0x33e>
 8003d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d3e:	d00b      	beq.n	8003d58 <UART_SetConfig+0x32c>
 8003d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d44:	d811      	bhi.n	8003d6a <UART_SetConfig+0x33e>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <UART_SetConfig+0x326>
 8003d4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d4e:	d006      	beq.n	8003d5e <UART_SetConfig+0x332>
 8003d50:	e00b      	b.n	8003d6a <UART_SetConfig+0x33e>
 8003d52:	2300      	movs	r3, #0
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	e00d      	b.n	8003d74 <UART_SetConfig+0x348>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	e00a      	b.n	8003d74 <UART_SetConfig+0x348>
 8003d5e:	2304      	movs	r3, #4
 8003d60:	77fb      	strb	r3, [r7, #31]
 8003d62:	e007      	b.n	8003d74 <UART_SetConfig+0x348>
 8003d64:	2308      	movs	r3, #8
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e004      	b.n	8003d74 <UART_SetConfig+0x348>
 8003d6a:	2310      	movs	r3, #16
 8003d6c:	77fb      	strb	r3, [r7, #31]
 8003d6e:	e001      	b.n	8003d74 <UART_SetConfig+0x348>
 8003d70:	2310      	movs	r3, #16
 8003d72:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7c:	d15b      	bne.n	8003e36 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003d7e:	7ffb      	ldrb	r3, [r7, #31]
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d828      	bhi.n	8003dd6 <UART_SetConfig+0x3aa>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <UART_SetConfig+0x360>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003db1 	.word	0x08003db1
 8003d90:	08003db9 	.word	0x08003db9
 8003d94:	08003dc1 	.word	0x08003dc1
 8003d98:	08003dd7 	.word	0x08003dd7
 8003d9c:	08003dc7 	.word	0x08003dc7
 8003da0:	08003dd7 	.word	0x08003dd7
 8003da4:	08003dd7 	.word	0x08003dd7
 8003da8:	08003dd7 	.word	0x08003dd7
 8003dac:	08003dcf 	.word	0x08003dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db0:	f7fe f92c 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 8003db4:	61b8      	str	r0, [r7, #24]
        break;
 8003db6:	e013      	b.n	8003de0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003db8:	f7fe f93c 	bl	8002034 <HAL_RCC_GetPCLK2Freq>
 8003dbc:	61b8      	str	r0, [r7, #24]
        break;
 8003dbe:	e00f      	b.n	8003de0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc0:	4b4b      	ldr	r3, [pc, #300]	; (8003ef0 <UART_SetConfig+0x4c4>)
 8003dc2:	61bb      	str	r3, [r7, #24]
        break;
 8003dc4:	e00c      	b.n	8003de0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc6:	f7fe f80f 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8003dca:	61b8      	str	r0, [r7, #24]
        break;
 8003dcc:	e008      	b.n	8003de0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dd2:	61bb      	str	r3, [r7, #24]
        break;
 8003dd4:	e004      	b.n	8003de0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	77bb      	strb	r3, [r7, #30]
        break;
 8003dde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d074      	beq.n	8003ed0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	005a      	lsls	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	441a      	add	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	d916      	bls.n	8003e30 <UART_SetConfig+0x404>
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e08:	d212      	bcs.n	8003e30 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	f023 030f 	bic.w	r3, r3, #15
 8003e12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	89fb      	ldrh	r3, [r7, #14]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	89fa      	ldrh	r2, [r7, #14]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	e04f      	b.n	8003ed0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	77bb      	strb	r3, [r7, #30]
 8003e34:	e04c      	b.n	8003ed0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e36:	7ffb      	ldrb	r3, [r7, #31]
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d828      	bhi.n	8003e8e <UART_SetConfig+0x462>
 8003e3c:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <UART_SetConfig+0x418>)
 8003e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e42:	bf00      	nop
 8003e44:	08003e69 	.word	0x08003e69
 8003e48:	08003e71 	.word	0x08003e71
 8003e4c:	08003e79 	.word	0x08003e79
 8003e50:	08003e8f 	.word	0x08003e8f
 8003e54:	08003e7f 	.word	0x08003e7f
 8003e58:	08003e8f 	.word	0x08003e8f
 8003e5c:	08003e8f 	.word	0x08003e8f
 8003e60:	08003e8f 	.word	0x08003e8f
 8003e64:	08003e87 	.word	0x08003e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e68:	f7fe f8d0 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 8003e6c:	61b8      	str	r0, [r7, #24]
        break;
 8003e6e:	e013      	b.n	8003e98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e70:	f7fe f8e0 	bl	8002034 <HAL_RCC_GetPCLK2Freq>
 8003e74:	61b8      	str	r0, [r7, #24]
        break;
 8003e76:	e00f      	b.n	8003e98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <UART_SetConfig+0x4c4>)
 8003e7a:	61bb      	str	r3, [r7, #24]
        break;
 8003e7c:	e00c      	b.n	8003e98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e7e:	f7fd ffb3 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8003e82:	61b8      	str	r0, [r7, #24]
        break;
 8003e84:	e008      	b.n	8003e98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8a:	61bb      	str	r3, [r7, #24]
        break;
 8003e8c:	e004      	b.n	8003e98 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	77bb      	strb	r3, [r7, #30]
        break;
 8003e96:	bf00      	nop
    }

    if (pclk != 0U)
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d018      	beq.n	8003ed0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	085a      	lsrs	r2, r3, #1
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	441a      	add	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b0f      	cmp	r3, #15
 8003eb6:	d909      	bls.n	8003ecc <UART_SetConfig+0x4a0>
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebe:	d205      	bcs.n	8003ecc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60da      	str	r2, [r3, #12]
 8003eca:	e001      	b.n	8003ed0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003edc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40007c00 	.word	0x40007c00
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	00f42400 	.word	0x00f42400

08003ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01a      	beq.n	800400a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff2:	d10a      	bne.n	800400a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
  }
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af02      	add	r7, sp, #8
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004048:	f7fc fe98 	bl	8000d7c <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b08      	cmp	r3, #8
 800405a:	d10e      	bne.n	800407a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800405c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f81b 	bl	80040a6 <UART_WaitOnFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e011      	b.n	800409e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b09c      	sub	sp, #112	; 0x70
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	603b      	str	r3, [r7, #0]
 80040b2:	4613      	mov	r3, r2
 80040b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b6:	e0a7      	b.n	8004208 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040be:	f000 80a3 	beq.w	8004208 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c2:	f7fc fe5b 	bl	8000d7c <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d302      	bcc.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80040d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d13f      	bne.n	8004158 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040ec:	667b      	str	r3, [r7, #100]	; 0x64
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e6      	bne.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3308      	adds	r3, #8
 8004110:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	663b      	str	r3, [r7, #96]	; 0x60
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3308      	adds	r3, #8
 8004128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800412a:	64ba      	str	r2, [r7, #72]	; 0x48
 800412c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e5      	bne.n	800410a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e068      	b.n	800422a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d050      	beq.n	8004208 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004174:	d148      	bne.n	8004208 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800417e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004194:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419e:	637b      	str	r3, [r7, #52]	; 0x34
 80041a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e6      	bne.n	8004180 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3308      	adds	r3, #8
 80041b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	613b      	str	r3, [r7, #16]
   return(result);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3308      	adds	r3, #8
 80041d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041d2:	623a      	str	r2, [r7, #32]
 80041d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	69f9      	ldr	r1, [r7, #28]
 80041d8:	6a3a      	ldr	r2, [r7, #32]
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	61bb      	str	r3, [r7, #24]
   return(result);
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e5      	bne.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e010      	b.n	800422a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	4013      	ands	r3, r2
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	429a      	cmp	r2, r3
 8004216:	bf0c      	ite	eq
 8004218:	2301      	moveq	r3, #1
 800421a:	2300      	movne	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	461a      	mov	r2, r3
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	429a      	cmp	r2, r3
 8004224:	f43f af48 	beq.w	80040b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3770      	adds	r7, #112	; 0x70
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004232:	b480      	push	{r7}
 8004234:	b095      	sub	sp, #84	; 0x54
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004242:	e853 3f00 	ldrex	r3, [r3]
 8004246:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800424e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	461a      	mov	r2, r3
 8004256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004258:	643b      	str	r3, [r7, #64]	; 0x40
 800425a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800425e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004260:	e841 2300 	strex	r3, r2, [r1]
 8004264:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e6      	bne.n	800423a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3308      	adds	r3, #8
 8004272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	61fb      	str	r3, [r7, #28]
   return(result);
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	64bb      	str	r3, [r7, #72]	; 0x48
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3308      	adds	r3, #8
 800428a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800428c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800428e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004294:	e841 2300 	strex	r3, r2, [r1]
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e5      	bne.n	800426c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d118      	bne.n	80042da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f023 0310 	bic.w	r3, r3, #16
 80042bc:	647b      	str	r3, [r7, #68]	; 0x44
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	6979      	ldr	r1, [r7, #20]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	613b      	str	r3, [r7, #16]
   return(result);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e6      	bne.n	80042a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042ee:	bf00      	nop
 80042f0:	3754      	adds	r7, #84	; 0x54
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b088      	sub	sp, #32
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	61bb      	str	r3, [r7, #24]
 8004352:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	6979      	ldr	r1, [r7, #20]
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	613b      	str	r3, [r7, #16]
   return(result);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e6      	bne.n	8004332 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800437a:	bf00      	nop
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <memset>:
 8004382:	4402      	add	r2, r0
 8004384:	4603      	mov	r3, r0
 8004386:	4293      	cmp	r3, r2
 8004388:	d100      	bne.n	800438c <memset+0xa>
 800438a:	4770      	bx	lr
 800438c:	f803 1b01 	strb.w	r1, [r3], #1
 8004390:	e7f9      	b.n	8004386 <memset+0x4>
	...

08004394 <__libc_init_array>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	4d0d      	ldr	r5, [pc, #52]	; (80043cc <__libc_init_array+0x38>)
 8004398:	4c0d      	ldr	r4, [pc, #52]	; (80043d0 <__libc_init_array+0x3c>)
 800439a:	1b64      	subs	r4, r4, r5
 800439c:	10a4      	asrs	r4, r4, #2
 800439e:	2600      	movs	r6, #0
 80043a0:	42a6      	cmp	r6, r4
 80043a2:	d109      	bne.n	80043b8 <__libc_init_array+0x24>
 80043a4:	4d0b      	ldr	r5, [pc, #44]	; (80043d4 <__libc_init_array+0x40>)
 80043a6:	4c0c      	ldr	r4, [pc, #48]	; (80043d8 <__libc_init_array+0x44>)
 80043a8:	f000 f818 	bl	80043dc <_init>
 80043ac:	1b64      	subs	r4, r4, r5
 80043ae:	10a4      	asrs	r4, r4, #2
 80043b0:	2600      	movs	r6, #0
 80043b2:	42a6      	cmp	r6, r4
 80043b4:	d105      	bne.n	80043c2 <__libc_init_array+0x2e>
 80043b6:	bd70      	pop	{r4, r5, r6, pc}
 80043b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043bc:	4798      	blx	r3
 80043be:	3601      	adds	r6, #1
 80043c0:	e7ee      	b.n	80043a0 <__libc_init_array+0xc>
 80043c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c6:	4798      	blx	r3
 80043c8:	3601      	adds	r6, #1
 80043ca:	e7f2      	b.n	80043b2 <__libc_init_array+0x1e>
 80043cc:	08004414 	.word	0x08004414
 80043d0:	08004414 	.word	0x08004414
 80043d4:	08004414 	.word	0x08004414
 80043d8:	08004418 	.word	0x08004418

080043dc <_init>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	bf00      	nop
 80043e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e2:	bc08      	pop	{r3}
 80043e4:	469e      	mov	lr, r3
 80043e6:	4770      	bx	lr

080043e8 <_fini>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	bf00      	nop
 80043ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ee:	bc08      	pop	{r3}
 80043f0:	469e      	mov	lr, r3
 80043f2:	4770      	bx	lr
