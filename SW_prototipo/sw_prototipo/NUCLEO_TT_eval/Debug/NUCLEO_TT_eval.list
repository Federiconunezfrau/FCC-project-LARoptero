
NUCLEO_TT_eval.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8f0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800aab8  0800aab8  0001aab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abac  0800abac  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800abac  0800abac  0001abac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abb4  0800abb4  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abb4  0800abb4  0001abb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abb8  0800abb8  0001abb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800abbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  200000f0  0800acac  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  0800acac  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025701  00000000  00000000  00020163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005cc4  00000000  00000000  00045864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb0  00000000  00000000  0004b528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000151a  00000000  00000000  0004d0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dd15  00000000  00000000  0004e5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021bb9  00000000  00000000  0007c307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010575d  00000000  00000000  0009dec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007994  00000000  00000000  001a3620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001aafb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000f0 	.word	0x200000f0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800aaa0 	.word	0x0800aaa0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000f4 	.word	0x200000f4
 8000204:	0800aaa0 	.word	0x0800aaa0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <_Z15CNI_constructorP19__CAN_HandleTypeDef>:
static uint32_t lenCANfilterList = sizeof(CANfiltersList)/sizeof(CANfiltersList[0]);

static CNI_t _instance;

void CNI_constructor(CAN_HandleTypeDef *hcan)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	_instance.mHcan_ = hcan;
 800050c:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6013      	str	r3, [r2, #0]

	_instance.mCANtxHeader_.ExtId = 0;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
	_instance.mCANtxHeader_.IDE = CAN_ID_STD;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
	_instance.mCANtxHeader_.RTR = CAN_RTR_DATA;
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
	_instance.mCANtxHeader_.TransmitGlobalTime = DISABLE;
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000526:	2200      	movs	r2, #0
 8000528:	771a      	strb	r2, [r3, #28]
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000010c 	.word	0x2000010c

0800053c <_Z8CNI_initv>:

void CNI_init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i = 0; i < lenCANfilterList ; i++)
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	e00e      	b.n	8000566 <_Z8CNI_initv+0x2a>
	{
		HAL_CAN_ConfigFilter(_instance.mHcan_, &CANfiltersList[i]);
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <_Z8CNI_initv+0x40>)
 800054a:	6818      	ldr	r0, [r3, #0]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	00db      	lsls	r3, r3, #3
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <_Z8CNI_initv+0x44>)
 8000558:	4413      	add	r3, r2
 800055a:	4619      	mov	r1, r3
 800055c:	f005 f8b8 	bl	80056d0 <HAL_CAN_ConfigFilter>
	for(i = 0; i < lenCANfilterList ; i++)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3301      	adds	r3, #1
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <_Z8CNI_initv+0x48>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	d3eb      	bcc.n	8000548 <_Z8CNI_initv+0xc>
	}
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	2000010c 	.word	0x2000010c
 8000580:	2000003c 	.word	0x2000003c
 8000584:	20000068 	.word	0x20000068

08000588 <_Z12CNI_send_msgm>:
{
	HAL_CAN_Start(_instance.mHcan_);
}

CNI_status_t CNI_send_msg(uint32_t msgHandle)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	uint32_t txMailbox;
	serviceID currentMsgServiceID;
	uint32_t i;


	if(msgHandle >= lenCANmsgList)
 8000590:	4b41      	ldr	r3, [pc, #260]	; (8000698 <_Z12CNI_send_msgm+0x110>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	429a      	cmp	r2, r3
 8000598:	d301      	bcc.n	800059e <_Z12CNI_send_msgm+0x16>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 800059a:	2301      	movs	r3, #1
 800059c:	e077      	b.n	800068e <_Z12CNI_send_msgm+0x106>
	}

	if(CANmsgList[msgHandle].mNodeID_ != MY_NODE_ID)
 800059e:	493f      	ldr	r1, [pc, #252]	; (800069c <_Z12CNI_send_msgm+0x114>)
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4613      	mov	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	4413      	add	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	440b      	add	r3, r1
 80005ac:	3304      	adds	r3, #4
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <_Z12CNI_send_msgm+0x30>
	{
		return CNI_MSG_HANDLE_TX_NOT_ALLOWED;
 80005b4:	2302      	movs	r3, #2
 80005b6:	e06a      	b.n	800068e <_Z12CNI_send_msgm+0x106>
	}

	// Armar el mensaje
	currentMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 80005b8:	4938      	ldr	r1, [pc, #224]	; (800069c <_Z12CNI_send_msgm+0x114>)
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	4613      	mov	r3, r2
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	4413      	add	r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	440b      	add	r3, r1
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	613b      	str	r3, [r7, #16]
	_instance.mCANtxHeader_.StdId = CAN_MSG_MAKE_STD_ID_TX(currentMsgServiceID);
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	00db      	lsls	r3, r3, #3
 80005ce:	4a34      	ldr	r2, [pc, #208]	; (80006a0 <_Z12CNI_send_msgm+0x118>)
 80005d0:	6093      	str	r3, [r2, #8]

	// Pasarle el msj al periférico

	// Limpia todos los mensajes pendientes (no debería haber ninguno, pero por las dudas)
	HAL_CAN_AbortTxRequest(_instance.mHcan_,CAN_TX_MAILBOX0|CAN_TX_MAILBOX1|CAN_TX_MAILBOX2);
 80005d2:	4b33      	ldr	r3, [pc, #204]	; (80006a0 <_Z12CNI_send_msgm+0x118>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2107      	movs	r1, #7
 80005d8:	4618      	mov	r0, r3
 80005da:	f005 fa29 	bl	8005a30 <HAL_CAN_AbortTxRequest>

	// Comenzando por la posición "msgHandle" se recorre la lista de mensajes. Esto es debido
	// a que es posible que se requiera enviar más de un mensaje.
	i = msgHandle;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 80005e2:	e02a      	b.n	800063a <_Z12CNI_send_msgm+0xb2>
	{
		while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 80005e4:	bf00      	nop
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <_Z12CNI_send_msgm+0x118>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 fa65 	bl	8005aba <HAL_CAN_GetTxMailboxesFreeLevel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	bf0c      	ite	eq
 80005f6:	2301      	moveq	r3, #1
 80005f8:	2300      	movne	r3, #0
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1f2      	bne.n	80005e6 <_Z12CNI_send_msgm+0x5e>

		_instance.mCANtxHeader_.DLC = CANmsgList[i].mLenPayload_;
 8000600:	4926      	ldr	r1, [pc, #152]	; (800069c <_Z12CNI_send_msgm+0x114>)
 8000602:	697a      	ldr	r2, [r7, #20]
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	440b      	add	r3, r1
 800060e:	3310      	adds	r3, #16
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a23      	ldr	r2, [pc, #140]	; (80006a0 <_Z12CNI_send_msgm+0x118>)
 8000614:	6193      	str	r3, [r2, #24]
		HAL_CAN_AddTxMessage(_instance.mHcan_, &_instance.mCANtxHeader_, CANmsgList[i].mPayload_, &txMailbox);
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <_Z12CNI_send_msgm+0x118>)
 8000618:	6818      	ldr	r0, [r3, #0]
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	4613      	mov	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4413      	add	r3, r2
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	3308      	adds	r3, #8
 8000626:	4a1d      	ldr	r2, [pc, #116]	; (800069c <_Z12CNI_send_msgm+0x114>)
 8000628:	441a      	add	r2, r3
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	491d      	ldr	r1, [pc, #116]	; (80006a4 <_Z12CNI_send_msgm+0x11c>)
 8000630:	f005 f92e 	bl	8005890 <HAL_CAN_AddTxMessage>
		i++;
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	3301      	adds	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <_Z12CNI_send_msgm+0x110>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	429a      	cmp	r2, r3
 8000642:	d215      	bcs.n	8000670 <_Z12CNI_send_msgm+0xe8>
 8000644:	4915      	ldr	r1, [pc, #84]	; (800069c <_Z12CNI_send_msgm+0x114>)
 8000646:	697a      	ldr	r2, [r7, #20]
 8000648:	4613      	mov	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	440b      	add	r3, r1
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	429a      	cmp	r2, r3
 8000658:	d10a      	bne.n	8000670 <_Z12CNI_send_msgm+0xe8>
 800065a:	4910      	ldr	r1, [pc, #64]	; (800069c <_Z12CNI_send_msgm+0x114>)
 800065c:	697a      	ldr	r2, [r7, #20]
 800065e:	4613      	mov	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	440b      	add	r3, r1
 8000668:	3304      	adds	r3, #4
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0b9      	beq.n	80005e4 <_Z12CNI_send_msgm+0x5c>
	}

	// Antes de retornar, se queda esperando a que se terminen de enviar todos los mensajes
	while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 8000670:	bf00      	nop
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <_Z12CNI_send_msgm+0x118>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f005 fa1f 	bl	8005aba <HAL_CAN_GetTxMailboxesFreeLevel>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	bf0c      	ite	eq
 8000682:	2301      	moveq	r3, #1
 8000684:	2300      	movne	r3, #0
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1f2      	bne.n	8000672 <_Z12CNI_send_msgm+0xea>

	return CNI_OK;
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000064 	.word	0x20000064
 800069c:	20000000 	.word	0x20000000
 80006a0:	2000010c 	.word	0x2000010c
 80006a4:	20000114 	.word	0x20000114

080006a8 <_Z16PCIFmsg_to_bytesP9PCIFmsg_tPhmPm>:

	return OK;
}

status_t PCIFmsg_to_bytes(PCIFmsg_t *me, uint8_t buffer[], uint32_t lenBuffer, uint32_t *lenMsg)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b087      	sub	sp, #28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
 80006b4:	603b      	str	r3, [r7, #0]
	uint32_t i;

	if( (buffer == 0) || (me==0) )
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <_Z16PCIFmsg_to_bytesP9PCIFmsg_tPhmPm+0x1a>
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d101      	bne.n	80006c6 <_Z16PCIFmsg_to_bytesP9PCIFmsg_tPhmPm+0x1e>
	{
		return ERROR_NULL_POINTER;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e02e      	b.n	8000724 <_Z16PCIFmsg_to_bytesP9PCIFmsg_tPhmPm+0x7c>
	}

	if(lenBuffer < me->lenPayload + 2)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	6a1b      	ldr	r3, [r3, #32]
 80006ca:	3302      	adds	r3, #2
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d201      	bcs.n	80006d6 <_Z16PCIFmsg_to_bytesP9PCIFmsg_tPhmPm+0x2e>
	{
		return ERROR_BUFFER_TOO_SMALL;
 80006d2:	2302      	movs	r3, #2
 80006d4:	e026      	b.n	8000724 <_Z16PCIFmsg_to_bytesP9PCIFmsg_tPhmPm+0x7c>
	}

	buffer[0] = me->lenPayload + 2;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	6a1b      	ldr	r3, [r3, #32]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	3302      	adds	r3, #2
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	701a      	strb	r2, [r3, #0]
	buffer[1] = me->cmd;
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	3301      	adds	r3, #1
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80006ee:	701a      	strb	r2, [r3, #0]

	for(i = 0 ; i < me->lenPayload; i++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	e00b      	b.n	800070e <_Z16PCIFmsg_to_bytesP9PCIFmsg_tPhmPm+0x66>
	{
		buffer[2+i] = me->payload[i];
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	3302      	adds	r3, #2
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	4413      	add	r3, r2
 80006fe:	68f9      	ldr	r1, [r7, #12]
 8000700:	697a      	ldr	r2, [r7, #20]
 8000702:	440a      	add	r2, r1
 8000704:	7812      	ldrb	r2, [r2, #0]
 8000706:	701a      	strb	r2, [r3, #0]
	for(i = 0 ; i < me->lenPayload; i++)
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	3301      	adds	r3, #1
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	6a1b      	ldr	r3, [r3, #32]
 8000712:	697a      	ldr	r2, [r7, #20]
 8000714:	429a      	cmp	r2, r3
 8000716:	d3ee      	bcc.n	80006f6 <_Z16PCIFmsg_to_bytesP9PCIFmsg_tPhmPm+0x4e>
	}

	*lenMsg = buffer[0];
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	601a      	str	r2, [r3, #0]

	return OK;
 8000722:	2300      	movs	r3, #0
}
 8000724:	4618      	mov	r0, r3
 8000726:	371c      	adds	r7, #28
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <circularBuffer_constructor>:
#endif

#include "circularBuffer.h"

void circularBuffer_constructor(circularBuffer_t *me, uint8_t *buf, uint32_t size)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
    me->mBuf_ = buf;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	601a      	str	r2, [r3, #0]
    me->mSize_ = size;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	605a      	str	r2, [r3, #4]
    me->mWrite_ = 0;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
    me->mRead_ = 0;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <circularBuffer_length_data>:
 * @Brief Toma como parametro el buffer cicular y devuelve el tamanio util para escribir
 * @param Buffer
 * @return 
 */
uint16_t circularBuffer_length_data(circularBuffer_t* me)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	return ((me->mWrite_ - me->mRead_) & (me->mSize_ - 1));
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	b29a      	uxth	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	b29b      	uxth	r3, r3
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	b29a      	uxth	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	b29b      	uxth	r3, r3
 800077e:	3b01      	subs	r3, #1
 8000780:	b29b      	uxth	r3, r3
 8000782:	4013      	ands	r3, r2
 8000784:	b29b      	uxth	r3, r3
}
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <circularBuffer_write>:
 * @param Buffer
 * @param data
 * @return 
 */
uint8_t circularBuffer_write(circularBuffer_t* me, uint8_t data)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	460b      	mov	r3, r1
 800079c:	70fb      	strb	r3, [r7, #3]
    if( circularBuffer_length_data(me) == (me->mSize_ - 1) )
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ffde 	bl	8000760 <circularBuffer_length_data>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d101      	bne.n	80007b6 <circularBuffer_write+0x24>
    {
        return 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e010      	b.n	80007d8 <circularBuffer_write+0x46>
    }
    
    me->mBuf_[me->mWrite_] = data;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	4413      	add	r3, r2
 80007c0:	78fa      	ldrb	r2, [r7, #3]
 80007c2:	701a      	strb	r2, [r3, #0]
    me->mWrite_ = (me->mWrite_ +1) & (me->mSize_ -1);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	401a      	ands	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	60da      	str	r2, [r3, #12]

    return 0;
 80007d6:	2300      	movs	r3, #0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <circularBuffer_read>:
 * @param Buffer
 * @param data
 * @return 
 */
uint8_t circularBuffer_read(circularBuffer_t* me, uint8_t *data)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
    if(circularBuffer_length_data(me) == 0 )
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff ffb8 	bl	8000760 <circularBuffer_length_data>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d101      	bne.n	80007fa <circularBuffer_read+0x1a>
    {
        return 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e012      	b.n	8000820 <circularBuffer_read+0x40>
    }
    *data = me->mBuf_[me->mRead_];
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	701a      	strb	r2, [r3, #0]
    me->mRead_ = (me->mRead_ + 1) & (me->mSize_ -1);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	401a      	ands	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	609a      	str	r2, [r3, #8]
    return 0;
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>:
#include "stm32f7xx_hal.h"


namespace STM32{

    gpio::gpio(GPIO_TypeDef* pPortHandler, uint16_t pin)
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	4613      	mov	r3, r2
 8000834:	80fb      	strh	r3, [r7, #6]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f854 	bl	80008e6 <_ZNSt8functionIFvvEEC1Ev>
    {
        m_portHandler = pPortHandler;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	68ba      	ldr	r2, [r7, #8]
 8000842:	611a      	str	r2, [r3, #16]
        m_pin = pin;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	88fa      	ldrh	r2, [r7, #6]
 8000848:	829a      	strh	r2, [r3, #20]
    }
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <_ZN5STM324gpio6toggleEv>:
        GPIO_PinState ret = HAL_GPIO_ReadPin(m_portHandler, m_pin);
        return ret == GPIO_PIN_SET ? GPIO_ST::HIGH : GPIO_ST::LOW;
    }

    void gpio::toggle()
    {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
        HAL_GPIO_TogglePin(m_portHandler, m_pin);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	691a      	ldr	r2, [r3, #16]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	8a9b      	ldrh	r3, [r3, #20]
 8000864:	4619      	mov	r1, r3
 8000866:	4610      	mov	r0, r2
 8000868:	f005 fcc5 	bl	80061f6 <HAL_GPIO_TogglePin>
    }
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <_ZN5STM324gpio5writeE7GPIO_ST>:

    void gpio::write(GPIO_ST st)
    {
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
        GPIO_PinState pinState = map_hal_st_to_igpio_st(st); 
 800087e:	6838      	ldr	r0, [r7, #0]
 8000880:	f000 f80e 	bl	80008a0 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(m_portHandler, m_pin, pinState);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6918      	ldr	r0, [r3, #16]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	8a9b      	ldrh	r3, [r3, #20]
 8000890:	7bfa      	ldrb	r2, [r7, #15]
 8000892:	4619      	mov	r1, r3
 8000894:	f005 fc96 	bl	80061c4 <HAL_GPIO_WritePin>
    }
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>:

    GPIO_PinState gpio::map_hal_st_to_igpio_st(GPIO_ST st)
	{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
		return st == GPIO_ST::HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d101      	bne.n	80008b2 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x12>
 80008ae:	2301      	movs	r3, #1
 80008b0:	e000      	b.n	80008b4 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x14>
 80008b2:	2300      	movs	r3, #0
	}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <_ZNSt14_Function_baseC1Ev>:
	  static bool
	  _M_not_empty_function(const _Tp&)
	  { return true; }
      };

    _Function_base() = default;
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	461a      	mov	r2, r3
 80008cc:	2300      	movs	r3, #0
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	6053      	str	r3, [r2, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	461a      	mov	r2, r3
 80008f2:	2300      	movs	r3, #0
 80008f4:	6013      	str	r3, [r2, #0]
 80008f6:	6053      	str	r3, [r2, #4]
 80008f8:	6093      	str	r3, [r2, #8]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ffdf 	bl	80008c0 <_ZNSt14_Function_baseC1Ev>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8000912:	b480      	push	{r7}
 8000914:	b083      	sub	sp, #12
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4618      	mov	r0, r3
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4618      	mov	r0, r3
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
      if (_M_manager)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d005      	beq.n	800095a <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	2203      	movs	r2, #3
 8000958:	4798      	blx	r3
    }
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <_ZN9iPHandler4lockEv>:
    	}else{
    		return normalMode ? reg << 1 : (reg  << 0x01 | 1);
    	}
    }

    bool lock()
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	{
		if(m_mutex){
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7a1b      	ldrb	r3, [r3, #8]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <_ZN9iPHandler4lockEv+0x14>
			return false;
 8000974:	2300      	movs	r3, #0
 8000976:	e003      	b.n	8000980 <_ZN9iPHandler4lockEv+0x1c>
		}
		m_mutex = true;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2201      	movs	r2, #1
 800097c:	721a      	strb	r2, [r3, #8]
		return true;
 800097e:	2301      	movs	r3, #1
	}
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <_ZN9iPHandler6unlockEv>:


	bool unlock()
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	{
		if(!m_mutex){
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	7a1b      	ldrb	r3, [r3, #8]
 8000998:	f083 0301 	eor.w	r3, r3, #1
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <_ZN9iPHandler6unlockEv+0x1a>
			return false;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e003      	b.n	80009ae <_ZN9iPHandler6unlockEv+0x22>
		}
		m_mutex = false;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2200      	movs	r2, #0
 80009aa:	721a      	strb	r2, [r3, #8]
		return true;
 80009ac:	2301      	movs	r3, #1
	}
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <_ZN8ICM426888GYRO_CNFlsENS0_3ODREh>:
        constexpr uint32_t operator<<(uint8_t n, ODR odr)
        {
            return  n << static_cast<uint8_t> (odr);
        }
        constexpr uint32_t operator<<(ODR odr, uint8_t n)
        {
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	460b      	mov	r3, r1
 80009c4:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (odr) << n ;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
        }
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <_ZN8ICM426888GYRO_CNFlsENS0_3FSREh>:
        constexpr uint32_t operator<<(uint8_t n, FSR fsr)
        {
            return  n << static_cast<uint8_t> (fsr);
        }   
        constexpr uint32_t operator<<( FSR fsr, uint8_t n)
        {
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	460b      	mov	r3, r1
 80009e8:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (fsr) << n;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
        } 
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <_ZN8ICM426889ACCEL_CNFlsENS0_3ODREh>:
        constexpr uint32_t operator<<(uint8_t n, ODR odr)
        {
            return  n << static_cast<uint8_t> (odr);
        }
        constexpr uint32_t operator<<( ODR odr, uint8_t n)
        {
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (odr) << n;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	461a      	mov	r2, r3
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
        }
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <_ZN8ICM426889ACCEL_CNFlsENS0_3FSREh>:
        constexpr uint32_t operator<<(uint8_t n, FSR fsr)
        {
            return  n << static_cast<uint8_t> (fsr);
        } 
        constexpr uint32_t operator<<(FSR fsr, uint8_t n)
        {
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (fsr) << n;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	461a      	mov	r2, r3
 8000a38:	78fb      	ldrb	r3, [r7, #3]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
        } 
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_ZN8ICM4268811FIFO_CONFIG13SET_FIFO_MODEENS_9FIFO_MODEE>:
    //FIFOconfig addresses and bits
	constexpr uint8_t FIFO_CONFIG_ADD = 0x16;
	namespace FIFO_CONFIG {
		constexpr uint8_t FIFO_MODE_POS = 0x06;
		constexpr uint8_t FIFO_MODE_MASK = static_cast<uint8_t>(0xC0  << FIFO_MODE_POS);
		constexpr uint8_t SET_FIFO_MODE(FIFO_MODE fifoMode) {
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
			return  (static_cast<uint8_t>(fifoMode) << FIFO_MODE_POS);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	019b      	lsls	r3, r3, #6
 8000a58:	b2db      	uxtb	r3, r3
		}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>:
    //Gyro config addresses and bits
    constexpr uint8_t GYRO_CONFIG0_ADD = 0x4F;
    namespace GYRO_CONFIG0 {
        constexpr uint8_t FS_SEL_POS = 0x05;
        constexpr uint8_t FS_SEL_MASK = 0x07  << FS_SEL_POS;
        constexpr uint8_t SET_FSR(uint8_t reg, GYRO_CNF::FSR fsr) {
 8000a66:	b590      	push	{r4, r7, lr}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	6039      	str	r1, [r7, #0]
 8000a70:	71fb      	strb	r3, [r7, #7]
            return  (reg & ~FS_SEL_MASK) | ( fsr << FS_SEL_POS);
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	f003 031f 	and.w	r3, r3, #31
 8000a78:	b2dc      	uxtb	r4, r3
 8000a7a:	2105      	movs	r1, #5
 8000a7c:	6838      	ldr	r0, [r7, #0]
 8000a7e:	f7ff ffae 	bl	80009de <_ZN8ICM426888GYRO_CNFlsENS0_3FSREh>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	4323      	orrs	r3, r4
 8000a88:	b2db      	uxtb	r3, r3
        }
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd90      	pop	{r4, r7, pc}

08000a92 <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>:

        constexpr uint8_t ODR_POS = 0x00;
        constexpr uint8_t ODR_MASK = 0x0F  << ODR_POS;
        constexpr uint8_t SET_ODR(uint8_t reg, GYRO_CNF::ODR odr) {
 8000a92:	b590      	push	{r4, r7, lr}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	6039      	str	r1, [r7, #0]
 8000a9c:	71fb      	strb	r3, [r7, #7]
            return  (reg & ~ODR_MASK) | ( odr << ODR_POS);
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	f023 030f 	bic.w	r3, r3, #15
 8000aa4:	b2dc      	uxtb	r4, r3
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	6838      	ldr	r0, [r7, #0]
 8000aaa:	f7ff ff86 	bl	80009ba <_ZN8ICM426888GYRO_CNFlsENS0_3ODREh>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	4323      	orrs	r3, r4
 8000ab4:	b2db      	uxtb	r3, r3
        }
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd90      	pop	{r4, r7, pc}

08000abe <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>:
    //Accel config addresses and bits
    constexpr uint8_t ACCEL_CONFIG0_ADD = 0x50;
    namespace ACCEL_CONFIG0 {
        constexpr uint8_t FS_SEL_POS = 0x05;
        constexpr uint8_t FS_SEL_MASK = 0x07  << FS_SEL_POS;
        constexpr uint8_t SET_FSR(uint8_t reg, ACCEL_CNF::FSR fsr) {
 8000abe:	b590      	push	{r4, r7, lr}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	6039      	str	r1, [r7, #0]
 8000ac8:	71fb      	strb	r3, [r7, #7]
            return   (reg & ~FS_SEL_MASK)  | ( fsr << FS_SEL_POS);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	f003 031f 	and.w	r3, r3, #31
 8000ad0:	b2dc      	uxtb	r4, r3
 8000ad2:	2105      	movs	r1, #5
 8000ad4:	6838      	ldr	r0, [r7, #0]
 8000ad6:	f7ff ffa6 	bl	8000a26 <_ZN8ICM426889ACCEL_CNFlsENS0_3FSREh>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4323      	orrs	r3, r4
 8000ae0:	b2db      	uxtb	r3, r3
        }
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}

08000aea <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>:

        constexpr uint8_t ODR_POS = 0x00;
        constexpr uint8_t ODR_MASK = 0x0F  << ODR_POS;
        constexpr uint8_t SET_ODR(uint8_t reg, ACCEL_CNF::ODR odr) {
 8000aea:	b590      	push	{r4, r7, lr}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	6039      	str	r1, [r7, #0]
 8000af4:	71fb      	strb	r3, [r7, #7]
            return   (reg & ~ODR_MASK) | ( odr << ODR_POS);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	f023 030f 	bic.w	r3, r3, #15
 8000afc:	b2dc      	uxtb	r4, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f7ff ff7e 	bl	8000a02 <_ZN8ICM426889ACCEL_CNFlsENS0_3ODREh>
 8000b06:	4603      	mov	r3, r0
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4323      	orrs	r3, r4
 8000b0c:	b2db      	uxtb	r3, r3
        }
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd90      	pop	{r4, r7, pc}
	...

08000b18 <_ZN4iIMUC1Ev>:
 * @brief Define un struct vacio para que se haga un struct herencia del mismo en los archivos de implementación. Esto es para dejar a la implementación la forma en obtener los  datos de la IMU. Por ejemplo, si se tiene 1 IMU con lectura sobre 1 solo eje vs 3 ejes. De esta forma también se podría usar esta interfaz para implementar acelerómetros.
 * 
 */
// struct iImu_data{};

class iIMU {
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <_ZN4iIMUC1Ev+0x1c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	0800ab2c 	.word	0x0800ab2c

08000b38 <_ZN8ICM426889RegistersC1Ev>:
namespace ICM42688{

    constexpr uint16_t BUFFER_SIZE = 32;
    constexpr uint16_t IMU_DATA_BUFFER_SIZE = 16;

    struct Registers {
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2206      	movs	r2, #6
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2206      	movs	r2, #6
 8000b4a:	705a      	strb	r2, [r3, #1]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2230      	movs	r2, #48	; 0x30
 8000b50:	709a      	strb	r2, [r3, #2]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	70da      	strb	r2, [r3, #3]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	711a      	strb	r2, [r3, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	715a      	strb	r2, [r3, #5]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	719a      	strb	r2, [r3, #6]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_>:
#include "icm42688_utils.hpp"
#include "icm42688.hpp"

namespace ICM42688{

    icm42688::icm42688( Config& cnf, iPHandler* handler, gpio *cs,
 8000b78:	b5b0      	push	{r4, r5, r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
 8000b84:	603b      	str	r3, [r7, #0]
        , m_handler(handler)
        , m_cs(cs)
        , m_i2cAdd(slaveAdd)
        , m_INT1(INT1)
        , m_INT2(INT2)
        , m_currentBankReg(bankRegister::BANK0)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ffc5 	bl	8000b18 <_ZN4iIMUC1Ev>
 8000b8e:	4a34      	ldr	r2, [pc, #208]	; (8000c60 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_+0xe8>)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	601a      	str	r2, [r3, #0]
        : imuDataBuffer()
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	3304      	adds	r3, #4
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 f935 	bl	8001e08 <_ZN11circ_bufferI7IMUDataLm16EtEC1Ev>
        , m_cnf(cnf)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	f503 74e8 	add.w	r4, r3, #464	; 0x1d0
 8000ba6:	4615      	mov	r5, r2
 8000ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bb4:	e884 0003 	stmia.w	r4, {r0, r1}
        , m_currentBankReg(bankRegister::BANK0)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ffba 	bl	8000b38 <_ZN8ICM426889RegistersC1Ev>
        , m_handler(handler)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
        , m_cs(cs)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        , m_i2cAdd(slaveAdd)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000bda:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
        , m_INT1(INT1)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000be2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
        , m_INT2(INT2)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bea:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
        , m_currentBankReg(bankRegister::BANK0)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258

    {
        m_mode = COMM_MODE::BLCK;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
        m_gyroODRValue    = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 fb79 	bl	80032fc <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 8000c0a:	eef0 7a40 	vmov.f32	s15, s0
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_gyroFSRValue    = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 fbce 	bl	80033bc <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 8000c20:	eef0 7a40 	vmov.f32	s15, s0
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	edc3 7a97 	vstr	s15, [r3, #604]	; 0x25c
        m_accelODRValue   = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8000c30:	4618      	mov	r0, r3
 8000c32:	f002 fbe7 	bl	8003404 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 8000c36:	eef0 7a40 	vmov.f32	s15, s0
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
        m_accelFSRValue   = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fc3c 	bl	80034c4 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 8000c4c:	eef0 7a40 	vmov.f32	s15, s0
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264
    }
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c60:	0800aadc 	.word	0x0800aadc

08000c64 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioE>:
        m_spiSet = true;
        //write_config();
        enable();
    }

    icm42688::icm42688(Config& cnf, iPHandler *handlerSpi, gpio *cs)
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af04      	add	r7, sp, #16
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	603b      	str	r3, [r7, #0]
        : icm42688(cnf, handlerSpi, cs, 0xFF, nullptr, nullptr)
 8000c72:	2300      	movs	r3, #0
 8000c74:	9302      	str	r3, [sp, #8]
 8000c76:	2300      	movs	r3, #0
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	23ff      	movs	r3, #255	; 0xff
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	68b9      	ldr	r1, [r7, #8]
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f7ff ff77 	bl	8000b78 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_>
    {
        m_spiSet = true;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
        //write_config();
        enable();
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f000 ff30 	bl	8001af8 <_ZN8ICM426888icm426886enableEv>
    }
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <_ZN11PHandlerOptC1Ev>:
struct PHandlerOpt {
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	731a      	strb	r2, [r3, #12]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	735a      	strb	r2, [r3, #13]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	739a      	strb	r2, [r3, #14]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>:
        enable();
    }


    iIMU_ST icm42688::set_bank_register(bankRegister bankReg)
    {
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b088      	sub	sp, #32
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
        //iHANDLER_ST retHandler(iHANDLER_ST::OK);
        uint8_t bank;
        PHandlerOpt opt;
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ffdc 	bl	8000ca2 <_ZN11PHandlerOptC1Ev>

        if(m_currentBankReg != bankReg){
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d033      	beq.n	8000d5e <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x88>

            bank = static_cast<uint8_t>(bankReg);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	77fb      	strb	r3, [r7, #31]
            opt.add = REG_BANK_SEL_ADD;
 8000cfa:	2376      	movs	r3, #118	; 0x76
 8000cfc:	733b      	strb	r3, [r7, #12]
            opt.size = 1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	737b      	strb	r3, [r7, #13]
            opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x3e>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8000d12:	e002      	b.n	8000d1a <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x44>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000d1a:	613b      	str	r3, [r7, #16]
            m_TxBuffer[0] = bank;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	7ffa      	ldrb	r2, [r7, #31]
 8000d20:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

            if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3304      	adds	r3, #4
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8000d3c:	f107 020c 	add.w	r2, r7, #12
 8000d40:	4798      	blx	r3
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	bf14      	ite	ne
 8000d48:	2301      	movne	r3, #1
 8000d4a:	2300      	moveq	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x80>
            	return iIMU_ST::ERROR_COMM;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e004      	b.n	8000d60 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x8a>
            }

            m_currentBankReg = bankReg;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
        }

        return iIMU_ST::OK;
 8000d5e:	2300      	movs	r3, #0
    }
 8000d60:	4618      	mov	r0, r3
 8000d62:	3720      	adds	r7, #32
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <_ZN8ICM426888icm426889save_dataEv>:

    /////////////////////////////////////// PUBLIC ///////////////////////////////////////

        
    iIMU_ST icm42688::save_data()
    {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
        iIMU_ST ret = iIMU_ST::OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
        iPHANDLER_ST retHandler(iPHANDLER_ST::OK);
 8000d74:	2300      	movs	r3, #0
 8000d76:	61bb      	str	r3, [r7, #24]
        PHandlerOpt opt;
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff90 	bl	8000ca2 <_ZN11PHandlerOptC1Ev>

        ret = set_bank_register(bankRegister::BANK0);
 8000d82:	2100      	movs	r1, #0
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ffa6 	bl	8000cd6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8000d8a:	61f8      	str	r0, [r7, #28]
        if( ret != iIMU_ST::OK){
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <_ZN8ICM426888icm426889save_dataEv+0x2e>
            return ret;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	e055      	b.n	8000e42 <_ZN8ICM426888icm426889save_dataEv+0xda>
        }
        

        opt.add = TEMP_DATA1_ADD;
 8000d96:	231d      	movs	r3, #29
 8000d98:	723b      	strb	r3, [r7, #8]
        opt.size = IMU_DATA_N_REGS;
 8000d9a:	230e      	movs	r3, #14
 8000d9c:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <_ZN8ICM426888icm426889save_dataEv+0x48>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8000dae:	e002      	b.n	8000db6 <_ZN8ICM426888icm426889save_dataEv+0x4e>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000db6:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8000dbe:	613b      	str	r3, [r7, #16]


        if(!m_handler->lock()){
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fdcc 	bl	8000964 <_ZN9iPHandler4lockEv>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	f083 0301 	eor.w	r3, r3, #1
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <_ZN8ICM426888icm426889save_dataEv+0x74>
        	return iIMU_ST::ERROR_HANDLER_UNAVAILABLE;
 8000dd8:	2305      	movs	r3, #5
 8000dda:	e032      	b.n	8000e42 <_ZN8ICM426888icm426889save_dataEv+0xda>
        }

        retHandler = m_handler->read_registers(opt);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f107 0108 	add.w	r1, r7, #8
 8000df0:	4610      	mov	r0, r2
 8000df2:	4798      	blx	r3
 8000df4:	61b8      	str	r0, [r7, #24]
        if(retHandler != iPHANDLER_ST::OK){
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d004      	beq.n	8000e06 <_ZN8ICM426888icm426889save_dataEv+0x9e>
            return map_handler_ret_to_iIMU_ret(retHandler);
 8000dfc:	69b8      	ldr	r0, [r7, #24]
 8000dfe:	f000 ffdf 	bl	8001dc0 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST>
 8000e02:	4603      	mov	r3, r0
 8000e04:	e01d      	b.n	8000e42 <_ZN8ICM426888icm426889save_dataEv+0xda>
        }
         

        if(m_mode == COMM_MODE::BLCK){
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d117      	bne.n	8000e40 <_ZN8ICM426888icm426889save_dataEv+0xd8>
        	memcpy(m_RxBuffer, m_handler->m_recvBuffer, opt.size);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f503 7006 	add.w	r0, r3, #536	; 0x218
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	7a7a      	ldrb	r2, [r7, #9]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f009 fde3 	bl	800a9ec <memcpy>
            m_handler->unlock();
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fdad 	bl	800098c <_ZN9iPHandler6unlockEv>
        	//load_data(dummyIMUData, m_RxBuffer);
            load_data(m_RxBuffer);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000e38:	4619      	mov	r1, r3
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 ff48 	bl	8001cd0 <_ZN8ICM426888icm426889load_dataEPh>
            //m_handler->m_mutex = false;
        }


        return ret;
 8000e40:	69fb      	ldr	r3, [r7, #28]
    }
 8000e42:	4618      	mov	r0, r3
 8000e44:	3720      	adds	r7, #32
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_ZN8ICM426888icm4268818save_data_callbackEv>:

    void icm42688::save_data_callback()
    {
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
        //IMUData dummyIMUData;
        load_data(m_handler->m_recvBuffer);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f000 ff37 	bl	8001cd0 <_ZN8ICM426888icm426889load_dataEPh>
        m_handler->unlock();
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fd8f 	bl	800098c <_ZN9iPHandler6unlockEv>
        //m_handler->m_mutex = false;
    }
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_ZN8ICM426888icm4268814save_fifo_dataEh>:
    


    iIMU_ST icm42688::save_fifo_data(uint8_t qty)
    {
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	70fb      	strb	r3, [r7, #3]
				return iIMU_ST::ERROR_BUFFER;
			}
        }

        */
        return iIMU_ST::OK;
 8000e82:	2300      	movs	r3, #0
        
    }
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_ZN8ICM426888icm4268823save_fifo_data_callbackEv>:

    void icm42688::save_fifo_data_callback()
    {
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
            dummyIMUData.temp   = convertTempFIFOData(mRxBuffer[FIFO_PACKET_SIZE*i + 13]);
            imuDataBuffer.write(dummyIMUData);
        }
        */
        //return;
    }
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_ZN8ICM426888icm426889read_dataEP7IMUData>:


    iIMU_ST icm42688::read_data(IMUData *pData)
    {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
        if(imuDataBuffer.read(pData) == EXIT_OK){
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	6839      	ldr	r1, [r7, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 ffc5 	bl	8001e44 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	bf0c      	ite	eq
 8000ec0:	2301      	moveq	r3, #1
 8000ec2:	2300      	movne	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <_ZN8ICM426888icm426889read_dataEP7IMUData+0x2a>
            return iIMU_ST::OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <_ZN8ICM426888icm426889read_dataEP7IMUData+0x2c>
        }
        return iIMU_ST::ERROR_BUFFER;
 8000ece:	2304      	movs	r3, #4
    }
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_ZN8ICM426888icm4268812set_gyro_odrEh>:


    iIMU_ST icm42688::set_gyro_odr(uint8_t odr) 
    {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
        GYRO_CNF::ODR gyroNewODR = static_cast<GYRO_CNF::ODR> (odr);
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fed8 	bl	8000ca2 <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff feee 	bl	8000cd6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bf14      	ite	ne
 8000f00:	2301      	movne	r3, #1
 8000f02:	2300      	moveq	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <_ZN8ICM426888icm4268812set_gyro_odrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e04e      	b.n	8000fac <_ZN8ICM426888icm4268812set_gyro_odrEh+0xd4>
        }
        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_ODR(m_reg.GYRO_CONFIG0, gyroNewODR);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8000f14:	69f9      	ldr	r1, [r7, #28]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fdbb 	bl	8000a92 <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7efa      	ldrb	r2, [r7, #27]
 8000f24:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = GYRO_CONFIG0_ADD;
 8000f28:	234f      	movs	r3, #79	; 0x4f
 8000f2a:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <_ZN8ICM426888icm4268812set_gyro_odrEh+0x6a>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8000f40:	e002      	b.n	8000f48 <_ZN8ICM426888icm4268812set_gyro_odrEh+0x70>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000f48:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8000f50:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3304      	adds	r3, #4
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8000f6a:	f107 0208 	add.w	r2, r7, #8
 8000f6e:	4798      	blx	r3
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	bf14      	ite	ne
 8000f76:	2301      	movne	r3, #1
 8000f78:	2300      	moveq	r3, #0
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <_ZN8ICM426888icm4268812set_gyro_odrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e013      	b.n	8000fac <_ZN8ICM426888icm4268812set_gyro_odrEh+0xd4>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7efa      	ldrb	r2, [r7, #27]
 8000f88:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_cnf.gyroODR = gyroNewODR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        m_gyroODRValue = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 f9ae 	bl	80032fc <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 8000fa0:	eef0 7a40 	vmov.f32	s15, s0
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260

        return iIMU_ST::OK;
 8000faa:	2300      	movs	r3, #0
    }
 8000fac:	4618      	mov	r0, r3
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_ZN8ICM426888icm4268812set_gyro_fsrEh>:


    iIMU_ST icm42688::set_gyro_fsr(uint8_t fsr)
    {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	70fb      	strb	r3, [r7, #3]
        GYRO_CNF::FSR gyroNewFSR = static_cast<GYRO_CNF::FSR> (fsr);
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fe6a 	bl	8000ca2 <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8000fce:	2100      	movs	r1, #0
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff fe80 	bl	8000cd6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	bf14      	ite	ne
 8000fdc:	2301      	movne	r3, #1
 8000fde:	2300      	moveq	r3, #0
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e04e      	b.n	8001088 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xd4>
        }

        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_FSR(m_reg.GYRO_CONFIG0, gyroNewFSR);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8000ff0:	69f9      	ldr	r1, [r7, #28]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fd37 	bl	8000a66 <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7efa      	ldrb	r2, [r7, #27]
 8001000:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = GYRO_CONFIG0_ADD;
 8001004:	234f      	movs	r3, #79	; 0x4f
 8001006:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 8001008:	2301      	movs	r3, #1
 800100a:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x6a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800101c:	e002      	b.n	8001024 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x70>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001024:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 800102c:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3304      	adds	r3, #4
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001046:	f107 0208 	add.w	r2, r7, #8
 800104a:	4798      	blx	r3
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf14      	ite	ne
 8001052:	2301      	movne	r3, #1
 8001054:	2300      	moveq	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 800105c:	2301      	movs	r3, #1
 800105e:	e013      	b.n	8001088 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xd4>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7efa      	ldrb	r2, [r7, #27]
 8001064:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_cnf.gyroFSR = gyroNewFSR; 
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        m_gyroODRValue = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8001076:	4618      	mov	r0, r3
 8001078:	f002 f9a0 	bl	80033bc <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 800107c:	eef0 7a40 	vmov.f32	s15, s0
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260

        return iIMU_ST::OK;
 8001086:	2300      	movs	r3, #0

    } 
 8001088:	4618      	mov	r0, r3
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN8ICM426888icm4268813set_accel_odrEh>:


    iIMU_ST icm42688::set_accel_odr(uint8_t odr)
    {
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
        ACCEL_CNF::ODR accelNewODR = static_cast<ACCEL_CNF::ODR> (odr);
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fdfc 	bl	8000ca2 <_ZN11PHandlerOptC1Ev>
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80010aa:	2100      	movs	r1, #0
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff fe12 	bl	8000cd6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bf14      	ite	ne
 80010b8:	2301      	movne	r3, #1
 80010ba:	2300      	moveq	r3, #0
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <_ZN8ICM426888icm4268813set_accel_odrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e04e      	b.n	8001164 <_ZN8ICM426888icm4268813set_accel_odrEh+0xd4>
        }

        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_ODR(m_reg.ACCEL_CONFIG0, accelNewODR);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 80010cc:	69f9      	ldr	r1, [r7, #28]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fd0b 	bl	8000aea <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>
 80010d4:	4603      	mov	r3, r0
 80010d6:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7efa      	ldrb	r2, [r7, #27]
 80010dc:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = ACCEL_CONFIG0_ADD;
 80010e0:	2350      	movs	r3, #80	; 0x50
 80010e2:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <_ZN8ICM426888icm4268813set_accel_odrEh+0x6a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80010f8:	e002      	b.n	8001100 <_ZN8ICM426888icm4268813set_accel_odrEh+0x70>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001100:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001108:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3304      	adds	r3, #4
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001122:	f107 0208 	add.w	r2, r7, #8
 8001126:	4798      	blx	r3
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	bf14      	ite	ne
 800112e:	2301      	movne	r3, #1
 8001130:	2300      	moveq	r3, #0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <_ZN8ICM426888icm4268813set_accel_odrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 8001138:	2301      	movs	r3, #1
 800113a:	e013      	b.n	8001164 <_ZN8ICM426888icm4268813set_accel_odrEh+0xd4>
        }

        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7efa      	ldrb	r2, [r7, #27]
 8001140:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        m_cnf.accelODR = accelNewODR; 
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        m_accelODRValue = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8001152:	4618      	mov	r0, r3
 8001154:	f002 f956 	bl	8003404 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 8001158:	eef0 7a40 	vmov.f32	s15, s0
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268

        return iIMU_ST::OK;
 8001162:	2300      	movs	r3, #0
    }
 8001164:	4618      	mov	r0, r3
 8001166:	3720      	adds	r7, #32
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <_ZN8ICM426888icm4268813set_accel_fsrEh>:


    iIMU_ST icm42688::set_accel_fsr(uint8_t fsr)
    {
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	70fb      	strb	r3, [r7, #3]
        ACCEL_CNF::FSR accelNewFSR = static_cast<ACCEL_CNF::FSR> (fsr);
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fd8e 	bl	8000ca2 <_ZN11PHandlerOptC1Ev>
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8001186:	2100      	movs	r1, #0
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff fda4 	bl	8000cd6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	bf14      	ite	ne
 8001194:	2301      	movne	r3, #1
 8001196:	2300      	moveq	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <_ZN8ICM426888icm4268813set_accel_fsrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 800119e:	2301      	movs	r3, #1
 80011a0:	e04e      	b.n	8001240 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xd4>
        }

        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_FSR(m_reg.ACCEL_CONFIG0, accelNewFSR);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 80011a8:	69f9      	ldr	r1, [r7, #28]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fc87 	bl	8000abe <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>
 80011b0:	4603      	mov	r3, r0
 80011b2:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7efa      	ldrb	r2, [r7, #27]
 80011b8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = ACCEL_CONFIG0_ADD;
 80011bc:	2350      	movs	r3, #80	; 0x50
 80011be:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <_ZN8ICM426888icm4268813set_accel_fsrEh+0x6a>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80011d4:	e002      	b.n	80011dc <_ZN8ICM426888icm4268813set_accel_fsrEh+0x70>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80011dc:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80011e4:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	3304      	adds	r3, #4
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80011fe:	f107 0208 	add.w	r2, r7, #8
 8001202:	4798      	blx	r3
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	bf14      	ite	ne
 800120a:	2301      	movne	r3, #1
 800120c:	2300      	moveq	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 8001214:	2301      	movs	r3, #1
 8001216:	e013      	b.n	8001240 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xd4>
        }

        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7efa      	ldrb	r2, [r7, #27]
 800121c:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        m_cnf.accelFSR = accelNewFSR; 
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
        m_accelFSRValue = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800122e:	4618      	mov	r0, r3
 8001230:	f002 f948 	bl	80034c4 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 8001234:	eef0 7a40 	vmov.f32	s15, s0
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264

        return iIMU_ST::OK;
 800123e:	2300      	movs	r3, #0
    }
 8001240:	4618      	mov	r0, r3
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_ZN8ICM426888icm4268819get_accel_odr_valueEv>:

    float icm42688::get_accel_odr_value()
    {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
        return m_accelODRValue;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8001256:	ee07 3a90 	vmov	s15, r3
    }
 800125a:	eeb0 0a67 	vmov.f32	s0, s15
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <_ZN8ICM426888icm4268819get_accel_fsr_valueEv>:
    float icm42688::get_accel_fsr_value()
    {
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
        return m_accelFSRValue;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8001276:	ee07 3a90 	vmov	s15, r3
    }
 800127a:	eeb0 0a67 	vmov.f32	s0, s15
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_ZN8ICM426888icm4268818get_gyro_odr_valueEv>:
    float icm42688::get_gyro_odr_value() 
    {
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
        return m_gyroODRValue;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8001296:	ee07 3a90 	vmov	s15, r3
    }
 800129a:	eeb0 0a67 	vmov.f32	s0, s15
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_ZN8ICM426888icm4268818get_gyro_fsr_valueEv>:
    float icm42688::get_gyro_fsr_value() 
    {
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
        return m_gyroFSRValue;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 80012b6:	ee07 3a90 	vmov	s15, r3
    }
 80012ba:	eeb0 0a67 	vmov.f32	s0, s15
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_ZN8ICM426888icm4268820get_accel_resolutionEv>:
    
    float icm42688::get_accel_resolution()
    {
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
        return m_accelFSRValue/(1<<15);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	edd3 7a99 	vldr	s15, [r3, #612]	; 0x264
 80012d6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80012f0 <_ZN8ICM426888icm4268820get_accel_resolutionEv+0x28>
 80012da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012de:	eef0 7a66 	vmov.f32	s15, s13
    }
 80012e2:	eeb0 0a67 	vmov.f32	s0, s15
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	47000000 	.word	0x47000000

080012f4 <_ZN8ICM426888icm4268819get_gyro_resolutionEv>:
    
    float icm42688::get_gyro_resolution()
    {
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
        return m_gyroFSRValue/(1<<15);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 8001302:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800131c <_ZN8ICM426888icm4268819get_gyro_resolutionEv+0x28>
 8001306:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800130a:	eef0 7a66 	vmov.f32	s15, s13
    }
 800130e:	eeb0 0a67 	vmov.f32	s0, s15
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	47000000 	.word	0x47000000

08001320 <_ZN8ICM426888icm4268815convertGyroDataEhh>:



    float icm42688::convertGyroData(uint8_t rawGyroH, uint8_t rawGyroL)
    {
 8001320:	b580      	push	{r7, lr}
 8001322:	ed2d 8b02 	vpush	{d8}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	70fb      	strb	r3, [r7, #3]
 8001330:	4613      	mov	r3, r2
 8001332:	70bb      	strb	r3, [r7, #2]
        int16_t gyro_data = (rawGyroH << 8)  | rawGyroL;
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21a      	sxth	r2, r3
 800133a:	78bb      	ldrb	r3, [r7, #2]
 800133c:	b21b      	sxth	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	81fb      	strh	r3, [r7, #14]
        return gyro_data * get_gyro_resolution();
 8001342:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3340      	adds	r3, #64	; 0x40
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	4798      	blx	r3
 800135a:	eef0 7a40 	vmov.f32	s15, s0
 800135e:	ee68 7a27 	vmul.f32	s15, s16, s15

    }
 8001362:	eeb0 0a67 	vmov.f32	s0, s15
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	ecbd 8b02 	vpop	{d8}
 800136e:	bd80      	pop	{r7, pc}

08001370 <_ZN8ICM426888icm4268816convertAccelDataEhh>:

    float icm42688::convertAccelData(uint8_t rawAccelH, uint8_t rawAccelL)
    {
 8001370:	b580      	push	{r7, lr}
 8001372:	ed2d 8b02 	vpush	{d8}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	70fb      	strb	r3, [r7, #3]
 8001380:	4613      	mov	r3, r2
 8001382:	70bb      	strb	r3, [r7, #2]
        int16_t gyro_data = (rawAccelH << 8)  | rawAccelL;
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b21a      	sxth	r2, r3
 800138a:	78bb      	ldrb	r3, [r7, #2]
 800138c:	b21b      	sxth	r3, r3
 800138e:	4313      	orrs	r3, r2
 8001390:	81fb      	strh	r3, [r7, #14]
        return gyro_data * get_accel_resolution();
 8001392:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	333c      	adds	r3, #60	; 0x3c
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	4798      	blx	r3
 80013aa:	eef0 7a40 	vmov.f32	s15, s0
 80013ae:	ee68 7a27 	vmul.f32	s15, s16, s15
    }
 80013b2:	eeb0 0a67 	vmov.f32	s0, s15
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	ecbd 8b02 	vpop	{d8}
 80013be:	bd80      	pop	{r7, pc}

080013c0 <_ZN8ICM426888icm4268812write_configEv>:

    iIMU_ST icm42688::write_config()
    {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
        iIMU_ST ret = iIMU_ST::OK; 
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
        
        
        if( (ret = write_config_accel_gyro()) != iIMU_ST::OK){
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f82c 	bl	800142a <_ZN8ICM426888icm4268823write_config_accel_gyroEv>
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	bf14      	ite	ne
 80013da:	2301      	movne	r3, #1
 80013dc:	2300      	moveq	r3, #0
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <_ZN8ICM426888icm4268812write_configEv+0x28>
            return ret;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	e01c      	b.n	8001422 <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        if( (ret = write_config_FIFO()) != iIMU_ST::OK){
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 f8eb 	bl	80015c4 <_ZN8ICM426888icm4268817write_config_FIFOEv>
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	bf14      	ite	ne
 80013f6:	2301      	movne	r3, #1
 80013f8:	2300      	moveq	r3, #0
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <_ZN8ICM426888icm4268812write_configEv+0x44>
            return ret;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	e00e      	b.n	8001422 <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        if( (ret = write_config_int()) != iIMU_ST::OK){
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f9d5 	bl	80017b4 <_ZN8ICM426888icm4268816write_config_intEv>
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	bf14      	ite	ne
 8001412:	2301      	movne	r3, #1
 8001414:	2300      	moveq	r3, #0
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <_ZN8ICM426888icm4268812write_configEv+0x60>
            return ret;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	e000      	b.n	8001422 <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        return ret;
 8001420:	68fb      	ldr	r3, [r7, #12]
        
    }
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <_ZN8ICM426888icm4268823write_config_accel_gyroEv>:

    iIMU_ST icm42688::write_config_accel_gyro()
    {
 800142a:	b580      	push	{r7, lr}
 800142c:	b088      	sub	sp, #32
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fc33 	bl	8000ca2 <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 800143c:	2100      	movs	r1, #0
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fc49 	bl	8000cd6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	bf14      	ite	ne
 800144a:	2301      	movne	r3, #1
 800144c:	2300      	moveq	r3, #0
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 8001454:	2301      	movs	r3, #1
 8001456:	e0b1      	b.n	80015bc <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }


        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_FSR(m_reg.GYRO_CONFIG0, m_cnf.gyroFSR);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 2238 	ldrb.w	r2, [r3, #568]	; 0x238
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8001464:	4619      	mov	r1, r3
 8001466:	4610      	mov	r0, r2
 8001468:	f7ff fafd 	bl	8000a66 <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>
 800146c:	4603      	mov	r3, r0
 800146e:	77fb      	strb	r3, [r7, #31]
        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_ODR(new_GYRO_CONFIG0, m_cnf.gyroODR);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 8001476:	7ffb      	ldrb	r3, [r7, #31]
 8001478:	4611      	mov	r1, r2
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fb09 	bl	8000a92 <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>
 8001480:	4603      	mov	r3, r0
 8001482:	77fb      	strb	r3, [r7, #31]
        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_FSR(m_reg.ACCEL_CONFIG0, m_cnf.accelFSR);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 2239 	ldrb.w	r2, [r3, #569]	; 0x239
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8001490:	4619      	mov	r1, r3
 8001492:	4610      	mov	r0, r2
 8001494:	f7ff fb13 	bl	8000abe <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>
 8001498:	4603      	mov	r3, r0
 800149a:	77bb      	strb	r3, [r7, #30]
        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_ODR(new_ACCEL_CONFIG0, m_cnf.accelODR);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 80014a2:	7fbb      	ldrb	r3, [r7, #30]
 80014a4:	4611      	mov	r1, r2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fb1f 	bl	8000aea <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>
 80014ac:	4603      	mov	r3, r0
 80014ae:	77bb      	strb	r3, [r7, #30]


        //m_TxBuffer[1] = new_ACCEL_CONFIG0;

        opt.size = 1;
 80014b0:	2301      	movs	r3, #1
 80014b2:	737b      	strb	r3, [r7, #13]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x9c>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80014c4:	e002      	b.n	80014cc <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0xa2>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80014cc:	613b      	str	r3, [r7, #16]
        opt.mode = m_mode;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80014d4:	617b      	str	r3, [r7, #20]

        opt.add = GYRO_CONFIG0_ADD;
 80014d6:	234f      	movs	r3, #79	; 0x4f
 80014d8:	733b      	strb	r3, [r7, #12]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7ffa      	ldrb	r2, [r7, #31]
 80014de:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3304      	adds	r3, #4
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80014fa:	f107 020c 	add.w	r2, r7, #12
 80014fe:	4798      	blx	r3
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	bf14      	ite	ne
 8001506:	2301      	movne	r3, #1
 8001508:	2300      	moveq	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0xea>
            return iIMU_ST::ERROR_COMM;
 8001510:	2301      	movs	r3, #1
 8001512:	e053      	b.n	80015bc <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }

        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7fba      	ldrb	r2, [r7, #30]
 8001518:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
        opt.add = ACCEL_CONFIG0_ADD;
 800151c:	2350      	movs	r3, #80	; 0x50
 800151e:	733b      	strb	r3, [r7, #12]
        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3304      	adds	r3, #4
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001538:	f107 020c 	add.w	r2, r7, #12
 800153c:	4798      	blx	r3
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf14      	ite	ne
 8001544:	2301      	movne	r3, #1
 8001546:	2300      	moveq	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x128>
            return iIMU_ST::ERROR_COMM;
 800154e:	2301      	movs	r3, #1
 8001550:	e034      	b.n	80015bc <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7ffa      	ldrb	r2, [r7, #31]
 8001556:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7fba      	ldrb	r2, [r7, #30]
 800155e:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        
        m_gyroODRValue = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8001568:	4618      	mov	r0, r3
 800156a:	f001 fec7 	bl	80032fc <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 800156e:	eef0 7a40 	vmov.f32	s15, s0
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_gyroODRValue = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800157e:	4618      	mov	r0, r3
 8001580:	f001 ff1c 	bl	80033bc <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 8001584:	eef0 7a40 	vmov.f32	s15, s0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_accelODRValue = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8001594:	4618      	mov	r0, r3
 8001596:	f001 ff35 	bl	8003404 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 800159a:	eef0 7a40 	vmov.f32	s15, s0
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
        m_accelFSRValue = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80015aa:	4618      	mov	r0, r3
 80015ac:	f001 ff8a 	bl	80034c4 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 80015b0:	eef0 7a40 	vmov.f32	s15, s0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264

        return iIMU_ST::OK;
 80015ba:	2300      	movs	r3, #0
    }
 80015bc:	4618      	mov	r0, r3
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_ZN8ICM426888icm4268817write_config_FIFOEv>:
    
    
    iIMU_ST icm42688::write_config_FIFO()
    {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fb66 	bl	8000ca2 <_ZN11PHandlerOptC1Ev>
        uint8_t new_INTF_CONFIG0;
        uint8_t new_FIFO_CONFIG;
        uint8_t new_FIFO_CONFIG1, new_FIFO_CONFIG2, new_FIFO_CONFIG3;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80015d6:	2100      	movs	r1, #0
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fb7c 	bl	8000cd6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf14      	ite	ne
 80015e4:	2301      	movne	r3, #1
 80015e6:	2300      	moveq	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e0dc      	b.n	80017ac <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }


        // Configuracion de registro INTF_CONFIG0
        opt.add = INTF_CONFIG0_ADD;
 80015f2:	234c      	movs	r3, #76	; 0x4c
 80015f4:	733b      	strb	r3, [r7, #12]
        opt.size = 1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	737b      	strb	r3, [r7, #13]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <_ZN8ICM426888icm4268817write_config_FIFOEv+0x48>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800160a:	e002      	b.n	8001612 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x4e>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001612:	613b      	str	r3, [r7, #16]
        opt.mode = m_mode;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 800161a:	617b      	str	r3, [r7, #20]

        new_INTF_CONFIG0 = m_reg.INTF_CONFIG0 | FIFO_CNF::FIFO_COUNT_REC;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 8001622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001626:	b2db      	uxtb	r3, r3
 8001628:	72fb      	strb	r3, [r7, #11]
        if(m_handler->write_registers(&new_INTF_CONFIG0, opt) != iPHANDLER_ST::OK){
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3304      	adds	r3, #4
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f107 020c 	add.w	r2, r7, #12
 8001640:	f107 010b 	add.w	r1, r7, #11
 8001644:	4798      	blx	r3
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	bf14      	ite	ne
 800164c:	2301      	movne	r3, #1
 800164e:	2300      	moveq	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <_ZN8ICM426888icm4268817write_config_FIFOEv+0x96>
            return iIMU_ST::ERROR_COMM;
 8001656:	2301      	movs	r3, #1
 8001658:	e0a8      	b.n	80017ac <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }
        m_reg.INTF_CONFIG0 = new_INTF_CONFIG0;
 800165a:	7afa      	ldrb	r2, [r7, #11]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a

        // Configuracion de registro FIFO_CONFIG
        opt.add = FIFO_CONFIG_ADD;
 8001662:	2316      	movs	r3, #22
 8001664:	733b      	strb	r3, [r7, #12]
        new_FIFO_CONFIG = FIFO_CONFIG::SET_FIFO_MODE(m_cnf.fifoCnf.mode);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff f9ec 	bl	8000a4a <_ZN8ICM4268811FIFO_CONFIG13SET_FIFO_MODEENS_9FIFO_MODEE>
 8001672:	4603      	mov	r3, r0
 8001674:	72bb      	strb	r3, [r7, #10]
        if(m_handler->write_registers(&new_FIFO_CONFIG, opt) != iPHANDLER_ST::OK){
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3304      	adds	r3, #4
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f107 020c 	add.w	r2, r7, #12
 800168c:	f107 010a 	add.w	r1, r7, #10
 8001690:	4798      	blx	r3
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf14      	ite	ne
 8001698:	2301      	movne	r3, #1
 800169a:	2300      	moveq	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <_ZN8ICM426888icm4268817write_config_FIFOEv+0xe2>
            return iIMU_ST::ERROR_COMM;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e082      	b.n	80017ac <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }        
        m_reg.FIFO_CONFIG = new_FIFO_CONFIG;
 80016a6:	7aba      	ldrb	r2, [r7, #10]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b


        // Configuracion de los registros FIFO_CONFIG1, FIFO_CONFIG2 y FIFO_CONFIG3
        if(m_cnf.fifoCnf.mode != FIFO_MODE::BYPASS){
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d078      	beq.n	80017aa <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e6>
        	//Sets packets and watermark
        	new_FIFO_CONFIG1 = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	77fb      	strb	r3, [r7, #31]
        	new_FIFO_CONFIG1 = FIFO_CNF::FIFO_TEMP_EN | FIFO_CNF::FIFO_GYRO_EN | FIFO_CNF::FIFO_ACCEL_EN;
 80016bc:	2307      	movs	r3, #7
 80016be:	77fb      	strb	r3, [r7, #31]
        	new_FIFO_CONFIG2 = m_cnf.fifoCnf.watermark;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 80016c6:	77bb      	strb	r3, [r7, #30]
        	new_FIFO_CONFIG3 = m_cnf.fifoCnf.watermark >> 8;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	777b      	strb	r3, [r7, #29]

            
             opt.size = 1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	737b      	strb	r3, [r7, #13]

            opt.add = FIFO_CONFIG1_ADD;
 80016d8:	235f      	movs	r3, #95	; 0x5f
 80016da:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG1;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7ffa      	ldrb	r2, [r7, #31]
 80016e0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
            //m_TxBuffer[1] = new_FIFO_CONFIG2;
            //m_TxBuffer[2] = new_FIFO_CONFIG3;

            if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3304      	adds	r3, #4
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80016fc:	f107 020c 	add.w	r2, r7, #12
 8001700:	4798      	blx	r3
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf14      	ite	ne
 8001708:	2301      	movne	r3, #1
 800170a:	2300      	moveq	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x152>
                return iIMU_ST::ERROR_COMM;
 8001712:	2301      	movs	r3, #1
 8001714:	e04a      	b.n	80017ac <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            opt.add = FIFO_CONFIG2_ADD;
 8001716:	2360      	movs	r3, #96	; 0x60
 8001718:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG2;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7fba      	ldrb	r2, [r7, #30]
 800171e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
             if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3304      	adds	r3, #4
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 800173a:	f107 020c 	add.w	r2, r7, #12
 800173e:	4798      	blx	r3
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	bf14      	ite	ne
 8001746:	2301      	movne	r3, #1
 8001748:	2300      	moveq	r3, #0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x190>
                return iIMU_ST::ERROR_COMM;
 8001750:	2301      	movs	r3, #1
 8001752:	e02b      	b.n	80017ac <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            opt.add = FIFO_CONFIG3_ADD;
 8001754:	2361      	movs	r3, #97	; 0x61
 8001756:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG3;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	7f7a      	ldrb	r2, [r7, #29]
 800175c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
             if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3304      	adds	r3, #4
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001778:	f107 020c 	add.w	r2, r7, #12
 800177c:	4798      	blx	r3
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf14      	ite	ne
 8001784:	2301      	movne	r3, #1
 8001786:	2300      	moveq	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1ce>
                return iIMU_ST::ERROR_COMM;
 800178e:	2301      	movs	r3, #1
 8001790:	e00c      	b.n	80017ac <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG1;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7ffa      	ldrb	r2, [r7, #31]
 8001796:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG2;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7fba      	ldrb	r2, [r7, #30]
 800179e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG3;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7f7a      	ldrb	r2, [r7, #29]
 80017a6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
        }

        return iIMU_ST::OK;
 80017aa:	2300      	movs	r3, #0
    }
 80017ac:	4618      	mov	r0, r3
 80017ae:	3720      	adds	r7, #32
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_ZN8ICM426888icm4268816write_config_intEv>:


    iIMU_ST icm42688::write_config_int()
    {
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	f2ad 5d2c 	subw	sp, sp, #1324	; 0x52c
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80017c0:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80017c4:	6018      	str	r0, [r3, #0]

        PHandlerOpt opt;
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fa69 	bl	8000ca2 <_ZN11PHandlerOptC1Ev>
        uint8_t new_INT_CONFIG = 0x00;
 80017d0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80017d4:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
        uint8_t new_INT_SOURCE0;
        uint8_t new_INT_SOURCE1;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80017dc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80017e0:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80017e4:	2100      	movs	r1, #0
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	f7ff fa75 	bl	8000cd6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	bf14      	ite	ne
 80017f2:	2301      	movne	r3, #1
 80017f4:	2300      	moveq	r3, #0
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <_ZN8ICM426888icm4268816write_config_intEv+0x4c>
            return iIMU_ST::ERROR_COMM;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e174      	b.n	8001aea <_ZN8ICM426888icm4268816write_config_intEv+0x336>
        }
        
        opt.size = 1;
 8001800:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001804:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001808:	2201      	movs	r2, #1
 800180a:	705a      	strb	r2, [r3, #1]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 800180c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001810:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <_ZN8ICM426888icm4268816write_config_intEv+0x7a>
 800181e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001822:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800182c:	e006      	b.n	800183c <_ZN8ICM426888icm4268816write_config_intEv+0x88>
 800182e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001832:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800183c:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8001840:	f2a2 521c 	subw	r2, r2, #1308	; 0x51c
 8001844:	6053      	str	r3, [r2, #4]
        opt.mode = m_mode;
 8001846:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800184a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8001854:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001858:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800185c:	609a      	str	r2, [r3, #8]


    	if(m_cnf.intCnf.int1Source != INT_SOURCE::DISABLED){
 800185e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001862:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800186c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001870:	f000 80bb 	beq.w	80019ea <_ZN8ICM426888icm4268816write_config_intEv+0x236>
    		new_INT_CONFIG |= static_cast<uint8_t>(m_cnf.intCnf.int1Mode);
 8001874:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001878:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001882:	b2da      	uxtb	r2, r3
 8001884:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001888:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	b2da      	uxtb	r2, r3
 8001892:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001896:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 800189a:	701a      	strb	r2, [r3, #0]
    		new_INT_SOURCE0 = (1 << static_cast<uint8_t>(m_cnf.intCnf.int1Source ));
 800189c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80018a0:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	2301      	movs	r3, #1
 80018b0:	4093      	lsls	r3, r2
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80018b8:	f2a3 531e 	subw	r3, r3, #1310	; 0x51e
 80018bc:	701a      	strb	r2, [r3, #0]
            
            opt.add = INT_SOURCE0_ADD;
 80018be:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80018c2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80018c6:	2265      	movs	r2, #101	; 0x65
 80018c8:	701a      	strb	r2, [r3, #0]
            if(m_handler->write_registers(&new_INT_SOURCE0, opt) != iPHANDLER_ST::OK){
 80018ca:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80018ce:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80018d8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80018dc:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	3304      	adds	r3, #4
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f107 020c 	add.w	r2, r7, #12
 80018f0:	f107 010a 	add.w	r1, r7, #10
 80018f4:	4798      	blx	r3
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf14      	ite	ne
 80018fc:	2301      	movne	r3, #1
 80018fe:	2300      	moveq	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <_ZN8ICM426888icm4268816write_config_intEv+0x156>
                return iIMU_ST::ERROR_COMM;
 8001906:	2301      	movs	r3, #1
 8001908:	e0ef      	b.n	8001aea <_ZN8ICM426888icm4268816write_config_intEv+0x336>
            }
            switch(m_cnf.intCnf.int1Source){
 800190a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800190e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001918:	2b02      	cmp	r3, #2
 800191a:	d034      	beq.n	8001986 <_ZN8ICM426888icm4268816write_config_intEv+0x1d2>
            default:
            case INT_SOURCE::DATA_RDY:
            	m_INT1->interrupt_handler = std::bind(&icm42688::save_data, *this);
 800191c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001920:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800192a:	461c      	mov	r4, r3
 800192c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001930:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800193c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001940:	2201      	movs	r2, #1
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001948:	f5a3 7126 	sub.w	r1, r3, #664	; 0x298
 800194c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001950:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8001954:	460b      	mov	r3, r1
 8001956:	e892 0003 	ldmia.w	r2, {r0, r1}
 800195a:	e883 0003 	stmia.w	r3, {r0, r1}
 800195e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001962:	f2a3 500c 	subw	r0, r3, #1292	; 0x50c
 8001966:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800196a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800196e:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	f000 fae1 	bl	8001f3a <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	4620      	mov	r0, r4
 8001980:	f000 faff 	bl	8001f82 <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>
				break;
 8001984:	e031      	b.n	80019ea <_ZN8ICM426888icm4268816write_config_intEv+0x236>
            case INT_SOURCE::FIFO_THR:
            	m_INT1->interrupt_handler = std::bind(&icm42688::save_fifo_data, *this, m_cnf.fifoCnf.watermark);
 8001986:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800198a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8001994:	461c      	mov	r4, r3
 8001996:	4a57      	ldr	r2, [pc, #348]	; (8001af4 <_ZN8ICM426888icm4268816write_config_intEv+0x340>)
 8001998:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800199c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80019a4:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80019a8:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 80019ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80019b4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80019b8:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80019c2:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 80019c6:	f5a2 7022 	sub.w	r0, r2, #648	; 0x288
 80019ca:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 80019ce:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 80019d2:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	f000 fbef 	bl	80021ba <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISD_EEE5valueESB_JDpT0_EE4typeEOSB_DpOSI_>
 80019dc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80019e0:	4619      	mov	r1, r3
 80019e2:	4620      	mov	r0, r4
 80019e4:	f000 fc05 	bl	80021f2 <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>
					break;
 80019e8:	bf00      	nop
            }
    	}

    	if(m_cnf.intCnf.int2Source != INT_SOURCE::DISABLED){
 80019ea:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80019ee:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019fc:	d04e      	beq.n	8001a9c <_ZN8ICM426888icm4268816write_config_intEv+0x2e8>
    		new_INT_CONFIG |= (static_cast<uint8_t>(m_cnf.intCnf.int2Mode) << 3);
 80019fe:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001a02:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	b25a      	sxtb	r2, r3
 8001a12:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001a16:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b25b      	sxtb	r3, r3
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	b25b      	sxtb	r3, r3
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001a28:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001a2c:	701a      	strb	r2, [r3, #0]
    		new_INT_SOURCE1 = (1 << static_cast<uint8_t>(m_cnf.intCnf.int2Source ));
 8001a2e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001a32:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	2301      	movs	r3, #1
 8001a42:	4093      	lsls	r3, r2
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001a4a:	f2a3 531f 	subw	r3, r3, #1311	; 0x51f
 8001a4e:	701a      	strb	r2, [r3, #0]
            
            opt.add = INT_SOURCE1_ADD;
 8001a50:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001a54:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001a58:	2266      	movs	r2, #102	; 0x66
 8001a5a:	701a      	strb	r2, [r3, #0]
            if(m_handler->write_registers(&new_INT_SOURCE1, opt) != iPHANDLER_ST::OK){
 8001a5c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001a60:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001a6a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001a6e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f107 020c 	add.w	r2, r7, #12
 8001a82:	f107 0109 	add.w	r1, r7, #9
 8001a86:	4798      	blx	r3
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bf14      	ite	ne
 8001a8e:	2301      	movne	r3, #1
 8001a90:	2300      	moveq	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <_ZN8ICM426888icm4268816write_config_intEv+0x2e8>
                return iIMU_ST::ERROR_COMM;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e026      	b.n	8001aea <_ZN8ICM426888icm4268816write_config_intEv+0x336>
            }  
		}

        //Enables watermark interrupt on INT1
        opt.add = INT_CONFIG_ADD;
 8001a9c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001aa0:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001aa4:	2214      	movs	r2, #20
 8001aa6:	701a      	strb	r2, [r3, #0]
        if(m_handler->write_registers(&new_INT_CONFIG, opt) != iPHANDLER_ST::OK){
 8001aa8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001aac:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001ab6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001aba:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f107 020c 	add.w	r2, r7, #12
 8001ace:	f107 010b 	add.w	r1, r7, #11
 8001ad2:	4798      	blx	r3
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf14      	ite	ne
 8001ada:	2301      	movne	r3, #1
 8001adc:	2300      	moveq	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <_ZN8ICM426888icm4268816write_config_intEv+0x334>
            return iIMU_ST::ERROR_COMM;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <_ZN8ICM426888icm4268816write_config_intEv+0x336>
        } 

        return iIMU_ST::OK;
 8001ae8:	2300      	movs	r3, #0
    }
 8001aea:	4618      	mov	r0, r3
 8001aec:	f207 572c 	addw	r7, r7, #1324	; 0x52c
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd90      	pop	{r4, r7, pc}
 8001af4:	0800aab8 	.word	0x0800aab8

08001af8 <_ZN8ICM426888icm426886enableEv>:


    iIMU_ST icm42688::enable()
    {        
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8001b00:	f107 0308 	add.w	r3, r7, #8
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f8cc 	bl	8000ca2 <_ZN11PHandlerOptC1Ev>
        
        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff f8e2 	bl	8000cd6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf14      	ite	ne
 8001b18:	2301      	movne	r3, #1
 8001b1a:	2300      	moveq	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <_ZN8ICM426888icm426886enableEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e038      	b.n	8001b98 <_ZN8ICM426888icm426886enableEv+0xa0>
        }
        
        opt.add = PWR_MGMT0_ADD;
 8001b26:	234e      	movs	r3, #78	; 0x4e
 8001b28:	723b      	strb	r3, [r7, #8]
        opt.size = 1;        
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <_ZN8ICM426888icm426886enableEv+0x48>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001b3e:	e002      	b.n	8001b46 <_ZN8ICM426888icm426886enableEv+0x4e>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001b46:	60fb      	str	r3, [r7, #12]
        if(m_handler->write_registers((uint8_t*)&IMU_ENABLE_LOW_NOISE, opt) != iPHANDLER_ST::OK){
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	3304      	adds	r3, #4
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f107 0208 	add.w	r2, r7, #8
 8001b5e:	4910      	ldr	r1, [pc, #64]	; (8001ba0 <_ZN8ICM426888icm426886enableEv+0xa8>)
 8001b60:	4798      	blx	r3
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf14      	ite	ne
 8001b68:	2301      	movne	r3, #1
 8001b6a:	2300      	moveq	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <_ZN8ICM426888icm426886enableEv+0x7e>
            return iIMU_ST::ERROR_COMM;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e010      	b.n	8001b98 <_ZN8ICM426888icm426886enableEv+0xa0>
        } 

        if(write_config() != iIMU_ST::OK){
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3344      	adds	r3, #68	; 0x44
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	4798      	blx	r3
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf14      	ite	ne
 8001b88:	2301      	movne	r3, #1
 8001b8a:	2300      	moveq	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <_ZN8ICM426888icm426886enableEv+0x9e>
        	return iIMU_ST::ERROR_COMM;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <_ZN8ICM426888icm426886enableEv+0xa0>
        }

        return iIMU_ST::OK;
 8001b96:	2300      	movs	r3, #0

    	//return write_register(PWR_MGMT0_ADD, bankRegister::BANK0, IMU_ENABLE_LOW_NOISE);
    	// Algunos milisegundos deben pasar luego de habilitar la imu para que funcione (leer pag 77 de datasheet)
    }
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	0800aad0 	.word	0x0800aad0

08001ba4 <_ZN8ICM426888icm426887disableEv>:



    iIMU_ST icm42688::disable()
	{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8001bac:	f107 0310 	add.w	r3, r7, #16
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff f876 	bl	8000ca2 <_ZN11PHandlerOptC1Ev>
        uint8_t nullValue = 0x00;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
        
//        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
//            return iIMU_ST::ERROR_COMM;
//        }

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8001bba:	2100      	movs	r1, #0
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff f88a 	bl	8000cd6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf14      	ite	ne
 8001bc8:	2301      	movne	r3, #1
 8001bca:	2300      	moveq	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <_ZN8ICM426888icm426887disableEv+0x32>
            return iIMU_ST::ERROR_COMM;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e076      	b.n	8001cc4 <_ZN8ICM426888icm426887disableEv+0x120>
        }
        opt.size = 1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	747b      	strb	r3, [r7, #17]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <_ZN8ICM426888icm426887disableEv+0x48>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001bea:	e002      	b.n	8001bf2 <_ZN8ICM426888icm426887disableEv+0x4e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001bf2:	617b      	str	r3, [r7, #20]
        

        // Desabilita todos las configuraciones de interrupciones
		opt.add = INT_SOURCE0_ADD;
 8001bf4:	2365      	movs	r3, #101	; 0x65
 8001bf6:	743b      	strb	r3, [r7, #16]
		if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3304      	adds	r3, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f107 0210 	add.w	r2, r7, #16
 8001c0e:	f107 010f 	add.w	r1, r7, #15
 8001c12:	4798      	blx	r3
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bf14      	ite	ne
 8001c1a:	2301      	movne	r3, #1
 8001c1c:	2300      	moveq	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <_ZN8ICM426888icm426887disableEv+0x84>
			return iIMU_ST::ERROR_COMM;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e04d      	b.n	8001cc4 <_ZN8ICM426888icm426887disableEv+0x120>
		}
		opt.add = INT_SOURCE1_ADD;
 8001c28:	2366      	movs	r3, #102	; 0x66
 8001c2a:	743b      	strb	r3, [r7, #16]
		if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f107 0210 	add.w	r2, r7, #16
 8001c42:	f107 010f 	add.w	r1, r7, #15
 8001c46:	4798      	blx	r3
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	bf14      	ite	ne
 8001c4e:	2301      	movne	r3, #1
 8001c50:	2300      	moveq	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <_ZN8ICM426888icm426887disableEv+0xb8>
			return iIMU_ST::ERROR_COMM;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e033      	b.n	8001cc4 <_ZN8ICM426888icm426887disableEv+0x120>
		}
        opt.add = INT_CONFIG_ADD;
 8001c5c:	2314      	movs	r3, #20
 8001c5e:	743b      	strb	r3, [r7, #16]
        if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f107 0210 	add.w	r2, r7, #16
 8001c76:	f107 010f 	add.w	r1, r7, #15
 8001c7a:	4798      	blx	r3
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bf14      	ite	ne
 8001c82:	2301      	movne	r3, #1
 8001c84:	2300      	moveq	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <_ZN8ICM426888icm426887disableEv+0xec>
            return iIMU_ST::ERROR_COMM;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e019      	b.n	8001cc4 <_ZN8ICM426888icm426887disableEv+0x120>
        }


        //Low power
        opt.add = PWR_MGMT0_ADD;
 8001c90:	234e      	movs	r3, #78	; 0x4e
 8001c92:	743b      	strb	r3, [r7, #16]
        if(m_handler->write_registers((uint8_t*)&IMU_DISABLE, opt) != iPHANDLER_ST::OK){
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f107 0210 	add.w	r2, r7, #16
 8001caa:	4908      	ldr	r1, [pc, #32]	; (8001ccc <_ZN8ICM426888icm426887disableEv+0x128>)
 8001cac:	4798      	blx	r3
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf14      	ite	ne
 8001cb4:	2301      	movne	r3, #1
 8001cb6:	2300      	moveq	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <_ZN8ICM426888icm426887disableEv+0x11e>
            return iIMU_ST::ERROR_COMM;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <_ZN8ICM426888icm426887disableEv+0x120>
        } 
        return iIMU_ST::OK;
 8001cc2:	2300      	movs	r3, #0
    	
        
        //return write_register(PWR_MGMT0_ADD, bankRegister::BANK0, IMU_DISABLE);
    	// Algunos milisegundos deben pasar luego de habilitar la imu para que funcione (leer pag 77 de datasheet)
	}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3720      	adds	r7, #32
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	0800aad1 	.word	0x0800aad1

08001cd0 <_ZN8ICM426888icm426889load_dataEPh>:


    }

    void icm42688::load_data(uint8_t *buffertData)
    {
 8001cd0:	b5b0      	push	{r4, r5, r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af04      	add	r7, sp, #16
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
    	IMUData data;
        data.temp   = convertTempData(buffertData[0], buffertData[1]);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f001 fc0e 	bl	8003508 <_ZN8ICM4268815convertTempDataEhh>
 8001cec:	eef0 7a40 	vmov.f32	s15, s0
 8001cf0:	edc7 7a03 	vstr	s15, [r7, #12]
        data.accelX = convertAccelData(buffertData[2], buffertData[3]);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	7819      	ldrb	r1, [r3, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	3303      	adds	r3, #3
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fb34 	bl	8001370 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 8001d08:	eef0 7a40 	vmov.f32	s15, s0
 8001d0c:	edc7 7a07 	vstr	s15, [r7, #28]
        data.accelY = convertAccelData(buffertData[4], buffertData[5]);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	3304      	adds	r3, #4
 8001d14:	7819      	ldrb	r1, [r3, #0]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	3305      	adds	r3, #5
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff fb26 	bl	8001370 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 8001d24:	eef0 7a40 	vmov.f32	s15, s0
 8001d28:	edc7 7a08 	vstr	s15, [r7, #32]
        data.accelZ = convertAccelData(buffertData[6], buffertData[7]);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	3306      	adds	r3, #6
 8001d30:	7819      	ldrb	r1, [r3, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	3307      	adds	r3, #7
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fb18 	bl	8001370 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 8001d40:	eef0 7a40 	vmov.f32	s15, s0
 8001d44:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        data.gyroX  = convertGyroData(buffertData[8], buffertData[9]);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	3308      	adds	r3, #8
 8001d4c:	7819      	ldrb	r1, [r3, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	3309      	adds	r3, #9
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff fae2 	bl	8001320 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 8001d5c:	eef0 7a40 	vmov.f32	s15, s0
 8001d60:	edc7 7a04 	vstr	s15, [r7, #16]
        data.gyroY  = convertGyroData(buffertData[10], buffertData[11]);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	330a      	adds	r3, #10
 8001d68:	7819      	ldrb	r1, [r3, #0]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	330b      	adds	r3, #11
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fad4 	bl	8001320 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 8001d78:	eef0 7a40 	vmov.f32	s15, s0
 8001d7c:	edc7 7a05 	vstr	s15, [r7, #20]
        data.gyroZ  = convertGyroData(buffertData[12], buffertData[13]);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	330c      	adds	r3, #12
 8001d84:	7819      	ldrb	r1, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	330d      	adds	r3, #13
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff fac6 	bl	8001320 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 8001d94:	eef0 7a40 	vmov.f32	s15, s0
 8001d98:	edc7 7a06 	vstr	s15, [r7, #24]
        imuDataBuffer.write(data);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1d1d      	adds	r5, r3, #4
 8001da0:	466c      	mov	r4, sp
 8001da2:	f107 0318 	add.w	r3, r7, #24
 8001da6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db2:	4628      	mov	r0, r5
 8001db4:	f000 fa3c 	bl	8002230 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_>
    }
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bdb0      	pop	{r4, r5, r7, pc}

08001dc0 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST>:

    iIMU_ST icm42688::map_handler_ret_to_iIMU_ret(iPHANDLER_ST iHandlerRet){
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
    	iIMU_ST ret;

    	switch(iHandlerRet){
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d012      	beq.n	8001df4 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x34>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	dc09      	bgt.n	8001de8 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x28>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x22>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d006      	beq.n	8001dee <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x2e>
 8001de0:	e002      	b.n	8001de8 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x28>
    	case iPHANDLER_ST::OK:
    		ret = iIMU_ST::OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
    		break;
 8001de6:	e008      	b.n	8001dfa <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::ERROR:
    	default:
    		ret = iIMU_ST::ERROR_COMM;
 8001de8:	2301      	movs	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
    		break;
 8001dec:	e005      	b.n	8001dfa <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::UNAVAILABLE:
    		ret = iIMU_ST::ERROR_HANDLER_UNAVAILABLE;
 8001dee:	2305      	movs	r3, #5
 8001df0:	60fb      	str	r3, [r7, #12]
    		break;
 8001df2:	e002      	b.n	8001dfa <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::INVALID:
    		ret = iIMU_ST::ERROR_INVALID_OP;
 8001df4:	2303      	movs	r3, #3
 8001df6:	60fb      	str	r3, [r7, #12]
    		break;
 8001df8:	bf00      	nop

    	}

    	return ret;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
    }
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <_ZN11circ_bufferI7IMUDataLm16EtEC1Ev>:
                bool mEmpty_;

        };

        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
        {
            mFull_ = false;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
            mEmpty_ = true;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            mHead_ = 0;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
            mTail_ = 0;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
            mSize_ = 0;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	801a      	strh	r2, [r3, #0]
            
        }
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_>:
            return EXIT_OK;
        }


        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::read(bufferDataType* pData)
 8001e44:	b4b0      	push	{r4, r5, r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
        {
            // bufferDataType data = 0;

            if (mEmpty_){
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x18>
                return EXIT_ERROR;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	e040      	b.n	8001ede <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x9a>
                // return data;
            }

            *pData = mBuffer_[mTail_];
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 8001e62:	4619      	mov	r1, r3
 8001e64:	6838      	ldr	r0, [r7, #0]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	1a5b      	subs	r3, r3, r1
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	4605      	mov	r5, r0
 8001e74:	1d1c      	adds	r4, r3, #4
 8001e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001e7e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            mFull_ = false;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

            if(--mSize_ == 0){
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	801a      	strh	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bf0c      	ite	eq
 8001e9e:	2301      	moveq	r3, #1
 8001ea0:	2300      	movne	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x6c>
                mEmpty_ = true;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            }

            if(++mTail_ == sCapacity_){
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	bf0c      	ite	eq
 8001eca:	2301      	moveq	r3, #1
 8001ecc:	2300      	movne	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x98>
                mTail_ = 0;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
            } 

            return EXIT_OK;
 8001edc:	2301      	movs	r3, #1
        }
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bcb0      	pop	{r4, r5, r7}
 8001ee6:	4770      	bx	lr

08001ee8 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fa33 	bl	8002364 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1EOS2_>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1EOS6_>:
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f1a:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f103 0208 	add.w	r2, r3, #8
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	3308      	adds	r3, #8
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	f7ff ffdc 	bl	8001ee8 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1EOS2_>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline _GLIBCXX20_CONSTEXPR typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 8001f3a:	b590      	push	{r4, r7, lr}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 8001f46:	68b8      	ldr	r0, [r7, #8]
 8001f48:	f000 f9d7 	bl	80022fa <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS5_E4typeE>
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f9de 	bl	8002310 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	4621      	mov	r1, r4
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f9e3 	bl	8002326 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1IJRS1_EEEOS4_DpOT_>
    }
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd90      	pop	{r4, r7, pc}

08001f68 <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fce3 	bl	800093e <_ZNSt14_Function_baseD1Ev>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<_Functor>, function&>
	operator=(_Functor&& __f)
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
 8001f8c:	6838      	ldr	r0, [r7, #0]
 8001f8e:	f000 f9f9 	bl	8002384 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001f92:	4602      	mov	r2, r0
 8001f94:	f107 0308 	add.w	r3, r7, #8
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f9fe 	bl	800239c <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_>
 8001fa0:	f107 0308 	add.w	r3, r7, #8
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fa28 	bl	80023fc <_ZNSt8functionIFvvEE4swapERS1_>
 8001fac:	f107 0308 	add.w	r3, r7, #8
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ffd9 	bl	8001f68 <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 8001fb6:	687b      	ldr	r3, [r7, #4]
	}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <_ZN4iIMUC1EOS_>:
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <_ZN4iIMUC1EOS_+0x20>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	0800ab2c 	.word	0x0800ab2c

08001fe4 <_ZN8ICM426888icm42688C1EOS0_>:
        uint8_t FIFO_CONFIG1 = 0x00;
        uint8_t FIFO_CONFIG2 = 0x00;
        uint8_t FIFO_CONFIG3 = 0x00;
    };

    class icm42688: public iIMU{
 8001fe4:	b5b0      	push	{r4, r5, r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ffe3 	bl	8001fc0 <_ZN4iIMUC1EOS_>
 8001ffa:	4a46      	ldr	r2, [pc, #280]	; (8002114 <_ZN8ICM426888icm42688C1EOS0_+0x130>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	1d10      	adds	r0, r2, #4
 8002006:	3304      	adds	r3, #4
 8002008:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800200c:	4619      	mov	r1, r3
 800200e:	f008 fced 	bl	800a9ec <memcpy>
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f502 74e8 	add.w	r4, r2, #464	; 0x1d0
 800201a:	f503 75e8 	add.w	r5, r3, #464	; 0x1d0
 800201e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002026:	e895 0003 	ldmia.w	r5, {r0, r1}
 800202a:	e884 0003 	stmia.w	r4, {r0, r1}
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f502 74fc 	add.w	r4, r2, #504	; 0x1f8
 8002036:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 800203a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800203c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800203e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002042:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	f502 7406 	add.w	r4, r2, #536	; 0x218
 800204e:	f503 7506 	add.w	r5, r3, #536	; 0x218
 8002052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002056:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800205a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8002066:	f502 720e 	add.w	r2, r2, #568	; 0x238
 800206a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800206e:	6018      	str	r0, [r3, #0]
 8002070:	3304      	adds	r3, #4
 8002072:	8019      	strh	r1, [r3, #0]
 8002074:	3302      	adds	r3, #2
 8002076:	0c0a      	lsrs	r2, r1, #16
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f893 2248 	ldrb.w	r2, [r3, #584]	; 0x248
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f893 2249 	ldrb.w	r2, [r3, #585]	; 0x249
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bdb0      	pop	{r4, r5, r7, pc}
 8002114:	0800aadc 	.word	0x0800aadc

08002118 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>:
      constexpr _Head_base(_Head_base&&) = default;
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff5b 	bl	8001fe4 <_ZN8ICM426888icm42688C1EOS0_>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&&) = default;
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f000 f9b3 	bl	80024b4 <_ZNSt11_Tuple_implILj1EJtEEC1EOS0_>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	1d1a      	adds	r2, r3, #4
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	3304      	adds	r3, #4
 8002156:	4619      	mov	r1, r3
 8002158:	4610      	mov	r0, r2
 800215a:	f7ff ffdd 	bl	8002118 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1EOS2_>:
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ffdd 	bl	8002138 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1EOS2_>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1EOS6_>:
      _Bind(_Bind&&) = default;
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	e892 0003 	ldmia.w	r2, {r0, r1}
 800219a:	e883 0003 	stmia.w	r3, {r0, r1}
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f103 0208 	add.w	r2, r3, #8
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	3308      	adds	r3, #8
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f7ff ffdc 	bl	8002168 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1EOS2_>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISD_EEE5valueESB_JDpT0_EE4typeEOSB_DpOSI_>:
    bind(_Func&& __f, _BoundArgs&&... __args)
 80021ba:	b5b0      	push	{r4, r5, r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	603b      	str	r3, [r7, #0]
					  std::forward<_BoundArgs>(__args)...);
 80021c8:	68b8      	ldr	r0, [r7, #8]
 80021ca:	f000 f938 	bl	800243e <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS5_E4typeE>
 80021ce:	4604      	mov	r4, r0
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f89d 	bl	8002310 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80021d6:	4605      	mov	r5, r0
 80021d8:	6838      	ldr	r0, [r7, #0]
 80021da:	f000 f93b 	bl	8002454 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80021de:	4603      	mov	r3, r0
 80021e0:	462a      	mov	r2, r5
 80021e2:	4621      	mov	r1, r4
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 f940 	bl	800246a <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1IJRS1_RtEEEOS4_DpOT_>
    }
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bdb0      	pop	{r4, r5, r7, pc}

080021f2 <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>:
	operator=(_Functor&& __f)
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 80021fc:	6838      	ldr	r0, [r7, #0]
 80021fe:	f000 f969 	bl	80024d4 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002202:	4602      	mov	r2, r0
 8002204:	f107 0308 	add.w	r3, r7, #8
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f96e 	bl	80024ec <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_>
 8002210:	f107 0308 	add.w	r3, r7, #8
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f8f0 	bl	80023fc <_ZNSt8functionIFvvEE4swapERS1_>
 800221c:	f107 0308 	add.w	r3, r7, #8
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fea1 	bl	8001f68 <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 8002226:	687b      	ldr	r3, [r7, #4]
	}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_>:
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::write(bufferDataType data)
 8002230:	b084      	sub	sp, #16
 8002232:	b4b0      	push	{r4, r5, r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	f107 001c 	add.w	r0, r7, #28
 800223e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
            mBuffer_[mHead_] = data;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 8002248:	4619      	mov	r1, r3
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	1a5b      	subs	r3, r3, r1
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	1d1c      	adds	r4, r3, #4
 8002258:	f107 051c 	add.w	r5, r7, #28
 800225c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002260:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002264:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            mEmpty_ = false;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            if(++mHead_ == sCapacity_){
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 8002276:	3301      	adds	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 8002286:	2b10      	cmp	r3, #16
 8002288:	bf0c      	ite	eq
 800228a:	2301      	moveq	r3, #1
 800228c:	2300      	movne	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x6c>
                mHead_ = 0;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
            if(mFull_ == true){
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d10f      	bne.n	80022c6 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x96>
                mTail_ = mTail_ + 1 == sCapacity_ ? 0 : mTail_ + 1; // mTail_ = ++mTail_ == sCapacity_ ? 0 : mTail_;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d005      	beq.n	80022bc <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x8c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 80022b6:	3301      	adds	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	e000      	b.n	80022be <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x8e>
 80022bc:	2200      	movs	r2, #0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 80022c4:	e012      	b.n	80022ec <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0xbc>
            }else if(++mSize_ == sCapacity_){
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	801a      	strh	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	2b10      	cmp	r3, #16
 80022d8:	bf0c      	ite	eq
 80022da:	2301      	moveq	r3, #1
 80022dc:	2300      	movne	r3, #0
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0xbc>
                mFull_ = true;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
            return EXIT_OK;
 80022ec:	2301      	movs	r3, #1
        }
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bcb0      	pop	{r4, r5, r7}
 80022f6:	b004      	add	sp, #16
 80022f8:	4770      	bx	lr

080022fa <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1IJRS1_EEEOS4_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 8002326:	b590      	push	{r4, r7, lr}
 8002328:	b085      	sub	sp, #20
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 8002332:	68b8      	ldr	r0, [r7, #8]
 8002334:	f000 f90a 	bl	800254c <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_STvEEONSt16remove_referenceIT_E4typeEOS7_>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002340:	e883 0003 	stmia.w	r3, {r0, r1}
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f103 0408 	add.w	r4, r3, #8
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ffe0 	bl	8002310 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002350:	4603      	mov	r3, r0
 8002352:	4619      	mov	r1, r3
 8002354:	4620      	mov	r0, r4
 8002356:	f000 f904 	bl	8002562 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1IJRS1_ELb1ELb1EEEDpOT_>
	{ }
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bd90      	pop	{r4, r7, pc}

08002364 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fecf 	bl	8002118 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>
      { }
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_>:
	function(_Functor&& __f)
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	461a      	mov	r2, r3
 80023aa:	2300      	movs	r3, #0
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	6053      	str	r3, [r2, #4]
 80023b0:	6093      	str	r3, [r2, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe fa83 	bl	80008c0 <_ZNSt14_Function_baseC1Ev>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80023c0:	6838      	ldr	r0, [r7, #0]
 80023c2:	f000 f8e1 	bl	8002588 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE21_M_not_empty_functionIS8_EEbRKT_>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00e      	beq.n	80023ea <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80023cc:	687c      	ldr	r4, [r7, #4]
 80023ce:	6838      	ldr	r0, [r7, #0]
 80023d0:	f7ff ffd8 	bl	8002384 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4619      	mov	r1, r3
 80023d8:	4620      	mov	r0, r4
 80023da:	f000 f8e0 	bl	800259e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x58>)
 80023e2:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x5c>)
 80023e8:	609a      	str	r2, [r3, #8]
	}
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd90      	pop	{r4, r7, pc}
 80023f4:	080025c3 	.word	0x080025c3
 80023f8:	080025e1 	.word	0x080025e1

080023fc <_ZNSt8functionIFvvEE4swapERS1_>:
       *  @param __x A %function with identical call signature.
       *
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x) noexcept
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_functor, __x._M_functor);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f000 f911 	bl	8002634 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f103 0208 	add.w	r2, r3, #8
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	3308      	adds	r3, #8
 800241c:	4619      	mov	r1, r3
 800241e:	4610      	mov	r0, r2
 8002420:	f000 f93a 	bl	8002698 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f103 020c 	add.w	r2, r3, #12
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	330c      	adds	r3, #12
 800242e:	4619      	mov	r1, r3
 8002430:	4610      	mov	r0, r2
 8002432:	f000 f95b 	bl	80026ec <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1IJRS1_RtEEEOS4_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 800246a:	b5b0      	push	{r4, r5, r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 8002478:	68b8      	ldr	r0, [r7, #8]
 800247a:	f000 f956 	bl	800272a <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_SThEEONSt16remove_referenceIT_E4typeEOS7_>
 800247e:	4602      	mov	r2, r0
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002486:	e883 0003 	stmia.w	r3, {r0, r1}
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f103 0408 	add.w	r4, r3, #8
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff ff3d 	bl	8002310 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002496:	4605      	mov	r5, r0
 8002498:	6838      	ldr	r0, [r7, #0]
 800249a:	f7ff ffdb 	bl	8002454 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800249e:	4603      	mov	r3, r0
 80024a0:	461a      	mov	r2, r3
 80024a2:	4629      	mov	r1, r5
 80024a4:	4620      	mov	r0, r4
 80024a6:	f000 f94b 	bl	8002740 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1IRS1_RtLb1EEEOT_OT0_>
	{ }
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bdb0      	pop	{r4, r5, r7, pc}

080024b4 <_ZNSt11_Tuple_implILj1EJtEEC1EOS0_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	8812      	ldrh	r2, [r2, #0]
 80024c4:	801a      	strh	r2, [r3, #0]
      { }
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_>:
	function(_Functor&& __f)
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	461a      	mov	r2, r3
 80024fa:	2300      	movs	r3, #0
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	6053      	str	r3, [r2, #4]
 8002500:	6093      	str	r3, [r2, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe f9db 	bl	80008c0 <_ZNSt14_Function_baseC1Ev>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8002510:	6838      	ldr	r0, [r7, #0]
 8002512:	f000 f92e 	bl	8002772 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE21_M_not_empty_functionIS8_EEbRKT_>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00e      	beq.n	800253a <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 800251c:	687c      	ldr	r4, [r7, #4]
 800251e:	6838      	ldr	r0, [r7, #0]
 8002520:	f7ff ffd8 	bl	80024d4 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002524:	4603      	mov	r3, r0
 8002526:	4619      	mov	r1, r3
 8002528:	4620      	mov	r0, r4
 800252a:	f000 f92d 	bl	8002788 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x58>)
 8002532:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a04      	ldr	r2, [pc, #16]	; (8002548 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x5c>)
 8002538:	609a      	str	r2, [r3, #8]
	}
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bd90      	pop	{r4, r7, pc}
 8002544:	080027ad 	.word	0x080027ad
 8002548:	080027cb 	.word	0x080027cb

0800254c <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_STvEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1IJRS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8002562:	b590      	push	{r4, r7, lr}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 800256c:	687c      	ldr	r4, [r7, #4]
 800256e:	6838      	ldr	r0, [r7, #0]
 8002570:	f7ff fece 	bl	8002310 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002574:	4603      	mov	r3, r0
 8002576:	4619      	mov	r1, r3
 8002578:	4620      	mov	r0, r4
 800257a:	f000 f945 	bl	8002808 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1IRS1_EEOT_>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bd90      	pop	{r4, r7, pc}

08002588 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	  { return true; }
 8002590:	2301      	movs	r3, #1
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800259e:	b590      	push	{r4, r7, lr}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80025a8:	6838      	ldr	r0, [r7, #0]
 80025aa:	f7ff feeb 	bl	8002384 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4622      	mov	r2, r4
 80025b2:	4619      	mov	r1, r3
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f93a 	bl	800282e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd90      	pop	{r4, r7, pc}

080025c2 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f94c 	bl	8002868 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f966 	bl	80028a4 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 80025d8:	bf00      	nop
      }
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	4613      	mov	r3, r2
 80025ec:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d109      	bne.n	8002608 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f965 	bl	80028c4 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 80025fa:	4604      	mov	r4, r0
 80025fc:	68b8      	ldr	r0, [r7, #8]
 80025fe:	f000 f933 	bl	8002868 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8002602:	4603      	mov	r3, r0
 8002604:	6023      	str	r3, [r4, #0]
	    break;
 8002606:	e005      	b.n	8002614 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	461a      	mov	r2, r3
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f964 	bl	80028dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 8002614:	2300      	movs	r3, #0
      }
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	bd90      	pop	{r4, r7, pc}

0800261e <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffed 	bl	800261e <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002644:	4602      	mov	r2, r0
 8002646:	f107 0308 	add.w	r3, r7, #8
 800264a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800264e:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8002652:	6838      	ldr	r0, [r7, #0]
 8002654:	f7ff ffe3 	bl	800261e <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002658:	4602      	mov	r2, r0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002660:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8002664:	f107 0308 	add.w	r3, r7, #8
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ffd8 	bl	800261e <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800266e:	4602      	mov	r2, r0
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002676:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffed 	bl	8002682 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80026a8:	4603      	mov	r3, r0
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80026ae:	6838      	ldr	r0, [r7, #0]
 80026b0:	f7ff ffe7 	bl	8002682 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80026b4:	4603      	mov	r3, r0
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80026bc:	f107 030c 	add.w	r3, r7, #12
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ffde 	bl	8002682 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80026c6:	4603      	mov	r3, r0
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	601a      	str	r2, [r3, #0]
    }
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ffed 	bl	80026d6 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80026fc:	4603      	mov	r3, r0
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002702:	6838      	ldr	r0, [r7, #0]
 8002704:	f7ff ffe7 	bl	80026d6 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8002708:	4603      	mov	r3, r0
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002710:	f107 030c 	add.w	r3, r7, #12
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ffde 	bl	80026d6 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800271a:	4603      	mov	r3, r0
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	601a      	str	r2, [r3, #0]
    }
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_SThEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1IRS1_RtLb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8002740:	b5b0      	push	{r4, r5, r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800274c:	68fc      	ldr	r4, [r7, #12]
 800274e:	68b8      	ldr	r0, [r7, #8]
 8002750:	f7ff fdde 	bl	8002310 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002754:	4605      	mov	r5, r0
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff fe7c 	bl	8002454 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	4629      	mov	r1, r5
 8002762:	4620      	mov	r0, r4
 8002764:	f000 f8f4 	bl	8002950 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1IRS1_JRtEvEEOT_DpOT0_>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bdb0      	pop	{r4, r5, r7, pc}

08002772 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
	  { return true; }
 800277a:	2301      	movs	r3, #1
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8002792:	6838      	ldr	r0, [r7, #0]
 8002794:	f7ff fe9e 	bl	80024d4 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002798:	4603      	mov	r3, r0
 800279a:	4622      	mov	r2, r4
 800279c:	4619      	mov	r1, r3
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f8f4 	bl	800298c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd90      	pop	{r4, r7, pc}

080027ac <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f906 	bl	80029c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 80027ba:	4603      	mov	r3, r0
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 f920 	bl	8002a02 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 80027c2:	bf00      	nop
      }
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80027ca:	b590      	push	{r4, r7, lr}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	4613      	mov	r3, r2
 80027d6:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d109      	bne.n	80027f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f91f 	bl	8002a22 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 80027e4:	4604      	mov	r4, r0
 80027e6:	68b8      	ldr	r0, [r7, #8]
 80027e8:	f000 f8ed 	bl	80029c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 80027ec:	4603      	mov	r3, r0
 80027ee:	6023      	str	r3, [r4, #0]
	    break;
 80027f0:	e005      	b.n	80027fe <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	461a      	mov	r2, r3
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f91f 	bl	8002a3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 80027fe:	2300      	movs	r3, #0
      }
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	bd90      	pop	{r4, r7, pc}

08002808 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1IRS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8002812:	687c      	ldr	r4, [r7, #4]
 8002814:	6838      	ldr	r0, [r7, #0]
 8002816:	f7ff fd7b 	bl	8002310 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 800281a:	4603      	mov	r3, r0
 800281c:	4619      	mov	r1, r3
 800281e:	4620      	mov	r0, r4
 8002820:	f000 f9f2 	bl	8002c08 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>
	{ }
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bd90      	pop	{r4, r7, pc}

0800282e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 800282e:	b5b0      	push	{r4, r5, r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 800283a:	68b8      	ldr	r0, [r7, #8]
 800283c:	f7ff fda2 	bl	8002384 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002840:	4605      	mov	r5, r0
 8002842:	f44f 701d 	mov.w	r0, #628	; 0x274
 8002846:	f007 ff6a 	bl	800a71e <_Znwj>
 800284a:	4603      	mov	r3, r0
 800284c:	461c      	mov	r4, r3
 800284e:	4629      	mov	r1, r5
 8002850:	4620      	mov	r0, r4
 8002852:	f7ff fb59 	bl	8001f08 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1EOS6_>
	    __dest._M_access<_Functor*>()
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f834 	bl	80028c4 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 800285c:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 800285e:	601c      	str	r4, [r3, #0]
	  }
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bdb0      	pop	{r4, r5, r7, pc}

08002868 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f9dc 	bl	8002c2e <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERKT_v>
 8002876:	4603      	mov	r3, r0
 8002878:	681b      	ldr	r3, [r3, #0]
	}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_vES3_EEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	7138      	strb	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800288c:	6838      	ldr	r0, [r7, #0]
 800288e:	f000 f9da 	bl	8002c46 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002892:	4603      	mov	r3, r0
 8002894:	4618      	mov	r0, r3
 8002896:	f000 f9e1 	bl	8002c5c <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEclIJES2_EET0_DpOT_>
 800289a:	4603      	mov	r3, r0
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f9ca 	bl	8002c46 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4619      	mov	r1, r3
 80028b6:	4620      	mov	r0, r4
 80028b8:	f7ff ffe3 	bl	8002882 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_vES3_EEJEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd90      	pop	{r4, r7, pc}

080028c4 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>:
      _M_access()
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7fe f820 	bl	8000912 <_ZNSt9_Any_data9_M_accessEv>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	4613      	mov	r3, r2
 80028e8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d82a      	bhi.n	8002946 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
 80028f0:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1c>)
 80028f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f6:	bf00      	nop
 80028f8:	08002909 	.word	0x08002909
 80028fc:	08002917 	.word	0x08002917
 8002900:	0800292b 	.word	0x0800292b
 8002904:	0800293d 	.word	0x0800293d
	      __dest._M_access<const type_info*>() = nullptr;
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f9b9 	bl	8002c80 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800290e:	4603      	mov	r3, r0
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
	      break;
 8002914:	e017      	b.n	8002946 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f7ff ffd4 	bl	80028c4 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 800291c:	4604      	mov	r4, r0
 800291e:	68b8      	ldr	r0, [r7, #8]
 8002920:	f7ff ffa2 	bl	8002868 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8002924:	4603      	mov	r3, r0
 8002926:	6023      	str	r3, [r4, #0]
	      break;
 8002928:	e00d      	b.n	8002946 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800292a:	68b8      	ldr	r0, [r7, #8]
 800292c:	f7ff ff9c 	bl	8002868 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8002930:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8002932:	4619      	mov	r1, r3
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f9af 	bl	8002c98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>
	      break;
 800293a:	e004      	b.n	8002946 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800293c:	4621      	mov	r1, r4
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f9bc 	bl	8002cbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8002944:	bf00      	nop
	  return false;
 8002946:	2300      	movs	r3, #0
	}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bd90      	pop	{r4, r7, pc}

08002950 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1IRS1_JRtEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800295c:	68fc      	ldr	r4, [r7, #12]
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff fd78 	bl	8002454 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8002964:	4603      	mov	r3, r0
 8002966:	4619      	mov	r1, r3
 8002968:	4620      	mov	r0, r4
 800296a:	f000 f9bc 	bl	8002ce6 <_ZNSt11_Tuple_implILj1EJtEEC1IRtEEOT_>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1d1c      	adds	r4, r3, #4
 8002972:	68b8      	ldr	r0, [r7, #8]
 8002974:	f7ff fccc 	bl	8002310 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002978:	4603      	mov	r3, r0
 800297a:	4619      	mov	r1, r3
 800297c:	4620      	mov	r0, r4
 800297e:	f000 f943 	bl	8002c08 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>
	{ }
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	bd90      	pop	{r4, r7, pc}

0800298c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 800298c:	b5b0      	push	{r4, r5, r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8002998:	68b8      	ldr	r0, [r7, #8]
 800299a:	f7ff fd9b 	bl	80024d4 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800299e:	4605      	mov	r5, r0
 80029a0:	f44f 701e 	mov.w	r0, #632	; 0x278
 80029a4:	f007 febb 	bl	800a71e <_Znwj>
 80029a8:	4603      	mov	r3, r0
 80029aa:	461c      	mov	r4, r3
 80029ac:	4629      	mov	r1, r5
 80029ae:	4620      	mov	r0, r4
 80029b0:	f7ff fbea 	bl	8002188 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1EOS6_>
	    __dest._M_access<_Functor*>()
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f834 	bl	8002a22 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 80029ba:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 80029bc:	601c      	str	r4, [r3, #0]
	  }
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bdb0      	pop	{r4, r5, r7, pc}

080029c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f99c 	bl	8002d0c <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERKT_v>
 80029d4:	4603      	mov	r3, r0
 80029d6:	681b      	ldr	r3, [r3, #0]
	}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_hES3_tEEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	7138      	strb	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80029ea:	6838      	ldr	r0, [r7, #0]
 80029ec:	f000 f99a 	bl	8002d24 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 f9a1 	bl	8002d3a <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEclIJES2_EET0_DpOT_>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002a02:	b590      	push	{r4, r7, lr}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f98a 	bl	8002d24 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002a10:	4603      	mov	r3, r0
 8002a12:	4619      	mov	r1, r3
 8002a14:	4620      	mov	r0, r4
 8002a16:	f7ff ffe3 	bl	80029e0 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_hES3_tEEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd90      	pop	{r4, r7, pc}

08002a22 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>:
      _M_access()
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fd ff71 	bl	8000912 <_ZNSt9_Any_data9_M_accessEv>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	4613      	mov	r3, r2
 8002a48:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d82a      	bhi.n	8002aa6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
 8002a50:	a201      	add	r2, pc, #4	; (adr r2, 8002a58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1c>)
 8002a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a56:	bf00      	nop
 8002a58:	08002a69 	.word	0x08002a69
 8002a5c:	08002a77 	.word	0x08002a77
 8002a60:	08002a8b 	.word	0x08002a8b
 8002a64:	08002a9d 	.word	0x08002a9d
	      __dest._M_access<const type_info*>() = nullptr;
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f909 	bl	8002c80 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
	      break;
 8002a74:	e017      	b.n	8002aa6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f7ff ffd3 	bl	8002a22 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	68b8      	ldr	r0, [r7, #8]
 8002a80:	f7ff ffa1 	bl	80029c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8002a84:	4603      	mov	r3, r0
 8002a86:	6023      	str	r3, [r4, #0]
	      break;
 8002a88:	e00d      	b.n	8002aa6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8002a8a:	68b8      	ldr	r0, [r7, #8]
 8002a8c:	f7ff ff9b 	bl	80029c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8002a90:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8002a92:	4619      	mov	r1, r3
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 f962 	bl	8002d5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>
	      break;
 8002a9a:	e004      	b.n	8002aa6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f96f 	bl	8002d82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8002aa4:	bf00      	nop
	  return false;
 8002aa6:	2300      	movs	r3, #0
	}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd90      	pop	{r4, r7, pc}

08002ab0 <_ZN4iIMUC1ERKS_>:
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <_ZN4iIMUC1ERKS_+0x20>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	0800ab2c 	.word	0x0800ab2c

08002ad4 <_ZN8ICM426888icm42688C1ERKS0_>:
 8002ad4:	b5b0      	push	{r4, r5, r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ffe3 	bl	8002ab0 <_ZN4iIMUC1ERKS_>
 8002aea:	4a46      	ldr	r2, [pc, #280]	; (8002c04 <_ZN8ICM426888icm42688C1ERKS0_+0x130>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	1d10      	adds	r0, r2, #4
 8002af6:	3304      	adds	r3, #4
 8002af8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8002afc:	4619      	mov	r1, r3
 8002afe:	f007 ff75 	bl	800a9ec <memcpy>
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	f502 74e8 	add.w	r4, r2, #464	; 0x1d0
 8002b0a:	f503 75e8 	add.w	r5, r3, #464	; 0x1d0
 8002b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b1a:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f502 74fc 	add.w	r4, r2, #504	; 0x1f8
 8002b26:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 8002b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f502 7406 	add.w	r4, r2, #536	; 0x218
 8002b3e:	f503 7506 	add.w	r5, r3, #536	; 0x218
 8002b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8002b56:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8002b5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b5e:	6018      	str	r0, [r3, #0]
 8002b60:	3304      	adds	r3, #4
 8002b62:	8019      	strh	r1, [r3, #0]
 8002b64:	3302      	adds	r3, #2
 8002b66:	0c0a      	lsrs	r2, r1, #16
 8002b68:	701a      	strb	r2, [r3, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f893 2248 	ldrb.w	r2, [r3, #584]	; 0x248
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f893 2249 	ldrb.w	r2, [r3, #585]	; 0x249
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bdb0      	pop	{r4, r5, r7, pc}
 8002c04:	0800aadc 	.word	0x0800aadc

08002c08 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8002c12:	687c      	ldr	r4, [r7, #4]
 8002c14:	6838      	ldr	r0, [r7, #0]
 8002c16:	f7ff fb7b 	bl	8002310 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f7ff ff58 	bl	8002ad4 <_ZN8ICM426888icm42688C1ERKS0_>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd90      	pop	{r4, r7, pc}

08002c2e <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERKT_v>:
      _M_access() const
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fd fe76 	bl	8000928 <_ZNKSt9_Any_data9_M_accessEv>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEclIJES2_EET0_DpOT_>:
	operator()(_Args&&... __args)
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 8002c64:	f000 f8a2 	bl	8002dac <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	  return this->__call<_Result>(
 8002c68:	f107 030c 	add.w	r3, r7, #12
 8002c6c:	4622      	mov	r2, r4
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f8a3 	bl	8002dbc <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EE6__callIS2_JEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
 8002c76:	4603      	mov	r3, r0
	}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd90      	pop	{r4, r7, pc}

08002c80 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7fd fe42 	bl	8000912 <_ZNSt9_Any_data9_M_accessEv>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8002ca2:	6838      	ldr	r0, [r7, #0]
 8002ca4:	f000 f8a7 	bl	8002df6 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4622      	mov	r2, r4
 8002cac:	4619      	mov	r1, r3
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f8f5 	bl	8002e9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd90      	pop	{r4, r7, pc}

08002cbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fdfc 	bl	80028c4 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d004      	beq.n	8002cde <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x22>
 8002cd4:	f44f 711d 	mov.w	r1, #628	; 0x274
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f007 fd1e 	bl	800a71a <_ZdlPvj>
	}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <_ZNSt11_Tuple_implILj1EJtEEC1IRtEEOT_>:
	_Tuple_impl(_UHead&& __head)
 8002ce6:	b590      	push	{r4, r7, lr}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8002cf0:	687c      	ldr	r4, [r7, #4]
 8002cf2:	6838      	ldr	r0, [r7, #0]
 8002cf4:	f7ff fbae 	bl	8002454 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f000 f8eb 	bl	8002ed8 <_ZNSt10_Head_baseILj1EtLb0EEC1IRtEEOT_>
	{ }
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd90      	pop	{r4, r7, pc}

08002d0c <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERKT_v>:
      _M_access() const
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7fd fe07 	bl	8000928 <_ZNKSt9_Any_data9_M_accessEv>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEclIJES2_EET0_DpOT_>:
	operator()(_Args&&... __args)
 8002d3a:	b590      	push	{r4, r7, lr}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 8002d42:	f000 f833 	bl	8002dac <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	  return this->__call<_Result>(
 8002d46:	f107 030c 	add.w	r3, r7, #12
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f8d3 	bl	8002efa <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEE6__callIS2_JEJLj0ELj1EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
 8002d54:	4603      	mov	r3, r0
	}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd90      	pop	{r4, r7, pc}

08002d5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8002d5e:	b590      	push	{r4, r7, lr}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8002d68:	6838      	ldr	r0, [r7, #0]
 8002d6a:	f000 f8f1 	bl	8002f50 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4622      	mov	r2, r4
 8002d72:	4619      	mov	r1, r3
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f935 	bl	8002fe4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd90      	pop	{r4, r7, pc}

08002d82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff fe48 	bl	8002a22 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8002d92:	4603      	mov	r3, r0
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x22>
 8002d9a:	f44f 711e 	mov.w	r1, #632	; 0x278
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f007 fcbb 	bl	800a71a <_ZdlPvj>
	}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8002db0:	bf00      	nop
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EE6__callIS2_JEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 8002dc8:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3308      	adds	r3, #8
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 f925 	bl	800301e <_ZSt3getILj0EJN8ICM426888icm42688EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8002dd4:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 8002dd6:	f107 0314 	add.w	r3, r7, #20
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 f92b 	bl	8003038 <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4619      	mov	r1, r3
 8002de6:	4620      	mov	r0, r4
 8002de8:	f000 f934 	bl	8003054 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
 8002dec:	4603      	mov	r3, r0
	}
 8002dee:	4618      	mov	r0, r3
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd90      	pop	{r4, r7, pc}

08002df6 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>:
      constexpr _Head_base(const _Head_base&) = default;
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fe59 	bl	8002ad4 <_ZN8ICM426888icm42688C1ERKS0_>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1ERKS2_>:
      constexpr _Tuple_impl(const _Tuple_impl&) = default;
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ffe5 	bl	8002e0c <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZNSt5tupleIJN8ICM426888icm42688EEEC1ERKS2_>:
      constexpr tuple(const tuple&) = default;
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ffe5 	bl	8002e2c <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1ERKS2_>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1ERKS6_>:
      _Bind(const _Bind&) = default;
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f103 0208 	add.w	r2, r3, #8
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	3308      	adds	r3, #8
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f7ff ffdc 	bl	8002e4c <_ZNSt5tupleIJN8ICM426888icm42688EEEC1ERKS2_>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8002e9e:	b5b0      	push	{r4, r5, r7, lr}
 8002ea0:	b084      	sub	sp, #16
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8002eaa:	68b8      	ldr	r0, [r7, #8]
 8002eac:	f7ff ffa3 	bl	8002df6 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	f44f 701d 	mov.w	r0, #628	; 0x274
 8002eb6:	f007 fc32 	bl	800a71e <_Znwj>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	461c      	mov	r4, r3
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f7ff ffd3 	bl	8002e6c <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1ERKS6_>
	    __dest._M_access<_Functor*>()
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f7ff fcfc 	bl	80028c4 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8002ecc:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8002ece:	601c      	str	r4, [r3, #0]
	  }
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bdb0      	pop	{r4, r5, r7, pc}

08002ed8 <_ZNSt10_Head_baseILj1EtLb0EEC1IRtEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8002ee2:	6838      	ldr	r0, [r7, #0]
 8002ee4:	f7ff fab6 	bl	8002454 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	881a      	ldrh	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	801a      	strh	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEE6__callIS2_JEJLj0ELj1EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 8002efa:	b5b0      	push	{r4, r5, r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 8002f06:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3308      	adds	r3, #8
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 f8b8 	bl	8003082 <_ZSt3getILj0EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8002f12:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 8002f14:	f107 0310 	add.w	r3, r7, #16
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f88c 	bl	8003038 <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>
 8002f20:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3308      	adds	r3, #8
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f8b8 	bl	800309c <_ZSt3getILj1EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8002f2c:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 8002f2e:	f107 0314 	add.w	r3, r7, #20
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f8be 	bl	80030b6 <_ZNVKSt3_MuItLb0ELb0EEclIRtSt5tupleIJEEEEOT_S6_RT0_>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4629      	mov	r1, r5
 8002f40:	4620      	mov	r0, r4
 8002f42:	f000 f8c6 	bl	80030d2 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>
 8002f46:	4603      	mov	r3, r0
	}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bdb0      	pop	{r4, r5, r7, pc}

08002f50 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1ERKS2_>:
      constexpr _Tuple_impl(const _Tuple_impl&) = default;
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	6039      	str	r1, [r7, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	8812      	ldrh	r2, [r2, #0]
 8002f76:	801a      	strh	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	1d1a      	adds	r2, r3, #4
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	4619      	mov	r1, r3
 8002f82:	4610      	mov	r0, r2
 8002f84:	f7ff ff42 	bl	8002e0c <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1ERKS2_>:
      constexpr tuple(const tuple&) = default;
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	6039      	str	r1, [r7, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff ffdf 	bl	8002f66 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1ERKS2_>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1ERKS6_>:
      _Bind(const _Bind&) = default;
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f103 0208 	add.w	r2, r3, #8
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	f7ff ffdc 	bl	8002f92 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1ERKS2_>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8002fe4:	b5b0      	push	{r4, r5, r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8002ff0:	68b8      	ldr	r0, [r7, #8]
 8002ff2:	f7ff ffad 	bl	8002f50 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>
 8002ff6:	4605      	mov	r5, r0
 8002ff8:	f44f 701e 	mov.w	r0, #632	; 0x278
 8002ffc:	f007 fb8f 	bl	800a71e <_Znwj>
 8003000:	4603      	mov	r3, r0
 8003002:	461c      	mov	r4, r3
 8003004:	4629      	mov	r1, r5
 8003006:	4620      	mov	r0, r4
 8003008:	f7ff ffd3 	bl	8002fb2 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1ERKS6_>
	    __dest._M_access<_Functor*>()
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f7ff fd08 	bl	8002a22 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8003012:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8003014:	601c      	str	r4, [r3, #0]
	  }
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bdb0      	pop	{r4, r5, r7, pc}

0800301e <_ZSt3getILj0EJN8ICM426888icm42688EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4618      	mov	r0, r3
 800302a:	f000 f86e 	bl	800310a <_ZSt12__get_helperILj0EN8ICM426888icm42688EJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 800302e:	4603      	mov	r3, r0
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 8003044:	68b8      	ldr	r0, [r7, #8]
 8003046:	f7ff f963 	bl	8002310 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 800304a:	4603      	mov	r3, r0
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8003054:	b5b0      	push	{r4, r5, r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f85f 	bl	8003122 <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003064:	4604      	mov	r4, r0
 8003066:	6838      	ldr	r0, [r7, #0]
 8003068:	f7ff f952 	bl	8002310 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 800306c:	4603      	mov	r3, r0
 800306e:	461a      	mov	r2, r3
 8003070:	4621      	mov	r1, r4
 8003072:	4628      	mov	r0, r5
 8003074:	f000 f860 	bl	8003138 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>
 8003078:	4603      	mov	r3, r0
    }
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bdb0      	pop	{r4, r5, r7, pc}

08003082 <_ZSt3getILj0EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4618      	mov	r0, r3
 800308e:	f000 f87a 	bl	8003186 <_ZSt12__get_helperILj0EN8ICM426888icm42688EJtEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8003092:	4603      	mov	r3, r0
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <_ZSt3getILj1EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f879 	bl	800319e <_ZSt12__get_helperILj1EtJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <_ZNVKSt3_MuItLb0ELb0EEclIRtSt5tupleIJEEEEOT_S6_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 80030c2:	68b8      	ldr	r0, [r7, #8]
 80030c4:	f7ff f9c6 	bl	8002454 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 80030d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f869 	bl	80031b6 <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS6_E4typeE>
 80030e4:	4604      	mov	r4, r0
 80030e6:	68b8      	ldr	r0, [r7, #8]
 80030e8:	f7ff f912 	bl	8002310 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80030ec:	4605      	mov	r5, r0
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff f9b0 	bl	8002454 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80030f4:	4603      	mov	r3, r0
 80030f6:	462a      	mov	r2, r5
 80030f8:	4621      	mov	r1, r4
 80030fa:	4630      	mov	r0, r6
 80030fc:	f000 f866 	bl	80031cc <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>
 8003100:	4603      	mov	r3, r0
    }
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800310a <_ZSt12__get_helperILj0EN8ICM426888icm42688EJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f889 	bl	800322a <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEE7_M_headERS2_>
 8003118:	4603      	mov	r3, r0
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	7338      	strb	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f87d 	bl	8003244 <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>
 800314a:	4603      	mov	r3, r0
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	6852      	ldr	r2, [r2, #4]
 8003150:	1052      	asrs	r2, r2, #1
 8003152:	1899      	adds	r1, r3, r2
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	6852      	ldr	r2, [r2, #4]
 8003158:	f002 0201 	and.w	r2, r2, #1
 800315c:	2a00      	cmp	r2, #0
 800315e:	d102      	bne.n	8003166 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x2e>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	e008      	b.n	8003178 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x40>
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	6852      	ldr	r2, [r2, #4]
 800316a:	1052      	asrs	r2, r2, #1
 800316c:	4413      	add	r3, r2
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	4413      	add	r3, r2
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4608      	mov	r0, r1
 800317a:	4798      	blx	r3
 800317c:	4603      	mov	r3, r0
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <_ZSt12__get_helperILj0EN8ICM426888icm42688EJtEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f863 	bl	800325a <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEE7_M_headERS2_>
 8003194:	4603      	mov	r3, r0
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <_ZSt12__get_helperILj1EtJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f865 	bl	8003276 <_ZNSt11_Tuple_implILj1EJtEE7_M_headERS0_>
 80031ac:	4603      	mov	r3, r0
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
 80031cc:	b5b0      	push	{r4, r5, r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	7338      	strb	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f832 	bl	8003244 <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>
 80031e0:	4603      	mov	r3, r0
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	6852      	ldr	r2, [r2, #4]
 80031e6:	1052      	asrs	r2, r2, #1
 80031e8:	189d      	adds	r5, r3, r2
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	6852      	ldr	r2, [r2, #4]
 80031ee:	f002 0201 	and.w	r2, r2, #1
 80031f2:	2a00      	cmp	r2, #0
 80031f4:	d102      	bne.n	80031fc <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x30>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	681c      	ldr	r4, [r3, #0]
 80031fa:	e008      	b.n	800320e <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x42>
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	6852      	ldr	r2, [r2, #4]
 8003200:	1052      	asrs	r2, r2, #1
 8003202:	4413      	add	r3, r2
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	6812      	ldr	r2, [r2, #0]
 800320a:	4413      	add	r3, r2
 800320c:	681c      	ldr	r4, [r3, #0]
 800320e:	6838      	ldr	r0, [r7, #0]
 8003210:	f7ff f920 	bl	8002454 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8003214:	4603      	mov	r3, r0
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	4619      	mov	r1, r3
 800321c:	4628      	mov	r0, r5
 800321e:	47a0      	blx	r4
 8003220:	4603      	mov	r3, r0
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bdb0      	pop	{r4, r5, r7, pc}

0800322a <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 f82b 	bl	8003290 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>
 800323a:	4603      	mov	r3, r0
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>:
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Up&&>(__t); }
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f812 	bl	8003290 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>
 800326c:	4603      	mov	r3, r0
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <_ZNSt11_Tuple_implILj1EJtEE7_M_headERS0_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4618      	mov	r0, r3
 8003282:	f000 f810 	bl	80032a6 <_ZNSt10_Head_baseILj1EtLb0EE7_M_headERS0_>
 8003286:	4603      	mov	r3, r0
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <_ZNSt10_Head_baseILj1EtLb0EE7_M_headERS0_>:
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <_ZN8ICM426888GYRO_CNFlsEhNS0_3FSRE>:
        {
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	6039      	str	r1, [r7, #0]
 80032c6:	71fb      	strb	r3, [r7, #7]
            return  n << static_cast<uint8_t> (fsr);
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	4093      	lsls	r3, r2
        }   
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <_ZN8ICM426889ACCEL_CNFlsEhNS0_3FSRE>:
        {
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	6039      	str	r1, [r7, #0]
 80032e6:	71fb      	strb	r3, [r7, #7]
            return  n << static_cast<uint8_t> (fsr);
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	4093      	lsls	r3, r2
        } 
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>:

namespace ICM42688{

    //float map_gyro_ODR_CNF_to_ODR(const config& cnf){

	float map_gyro_ODR_CNF_to_ODR(GYRO_CNF::ODR gyroODR){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
        using namespace GYRO_CNF;

        if(gyroODR == ODR::ODR_500){
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b0f      	cmp	r3, #15
 8003308:	d102      	bne.n	8003310 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x14>
            return 500.0f;
 800330a:	eddf 7a29 	vldr	s15, [pc, #164]	; 80033b0 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xb4>
 800330e:	e049      	b.n	80033a4 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        if(gyroODR <= ODR::ODR_1000 && gyroODR >= ODR::ODR_32000){
 8003310:	2106      	movs	r1, #6
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f91e 	bl	8003554 <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d008      	beq.n	8003330 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x34>
 800331e:	2101      	movs	r1, #1
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f92b 	bl	800357c <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x34>
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x36>
 8003330:	2300      	movs	r3, #0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d010      	beq.n	8003358 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x5c>
            return 32000.0f / (1 << (gyroODR - ODR::ODR_32000));
 8003336:	2101      	movs	r1, #1
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f933 	bl	80035a4 <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>
 800333e:	4603      	mov	r3, r0
 8003340:	461a      	mov	r2, r3
 8003342:	2301      	movs	r3, #1
 8003344:	4093      	lsls	r3, r2
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800334e:	eddf 6a19 	vldr	s13, [pc, #100]	; 80033b4 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xb8>
 8003352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003356:	e025      	b.n	80033a4 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        if(gyroODR <= ODR::ODR_12_5 && gyroODR >= ODR::ODR_200){
 8003358:	210b      	movs	r1, #11
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f8fa 	bl	8003554 <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d008      	beq.n	8003378 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7c>
 8003366:	2107      	movs	r1, #7
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f907 	bl	800357c <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7c>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7e>
 8003378:	2300      	movs	r3, #0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d010      	beq.n	80033a0 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa4>
            return 200.0f /  (1 << (gyroODR - ODR::ODR_200));
 800337e:	2107      	movs	r1, #7
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f90f 	bl	80035a4 <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	2301      	movs	r3, #1
 800338c:	4093      	lsls	r3, r2
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003396:	eddf 6a08 	vldr	s13, [pc, #32]	; 80033b8 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xbc>
 800339a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800339e:	e001      	b.n	80033a4 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        return -1.0f;
 80033a0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
 80033a4:	eeb0 0a67 	vmov.f32	s0, s15
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	43fa0000 	.word	0x43fa0000
 80033b4:	46fa0000 	.word	0x46fa0000
 80033b8:	43480000 	.word	0x43480000

080033bc <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>:


    //float map_gyro_FSR_CNF_to_FSR(const config& cnf){
	float map_gyro_FSR_CNF_to_FSR(GYRO_CNF::FSR gyroFSR){
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
        using namespace GYRO_CNF;

        if(gyroFSR <= FSR::FSR_15_625){
 80033c4:	2107      	movs	r1, #7
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8fd 	bl	80035c6 <_ZN8ICM426888GYRO_CNFleENS0_3FSRES1_>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00c      	beq.n	80033ec <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x30>
            return 2000.0f / (1 << gyroFSR);
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	2001      	movs	r0, #1
 80033d6:	f7ff ff71 	bl	80032bc <_ZN8ICM426888GYRO_CNFlsEhNS0_3FSRE>
 80033da:	ee07 0a90 	vmov	s15, r0
 80033de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e2:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003400 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x44>
 80033e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ea:	e001      	b.n	80033f0 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x34>
        }

        return -1.0f;
 80033ec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    }
 80033f0:	eef0 7a47 	vmov.f32	s15, s14
 80033f4:	eeb0 0a67 	vmov.f32	s0, s15
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	44fa0000 	.word	0x44fa0000

08003404 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>:

    //float map_accel_ODR_CNF_to_ODR(const config& cnf){
	float map_accel_ODR_CNF_to_ODR(ACCEL_CNF::ODR accelODR){
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
        using namespace ACCEL_CNF;

        if(accelODR == ODR::ODR_500){
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b0f      	cmp	r3, #15
 8003410:	d102      	bne.n	8003418 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x14>
            return 500.0f;
 8003412:	eddf 7a29 	vldr	s15, [pc, #164]	; 80034b8 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xb4>
 8003416:	e049      	b.n	80034ac <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        if(accelODR <= ODR::ODR_1000 && accelODR >= ODR::ODR_32000){
 8003418:	2106      	movs	r1, #6
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8e7 	bl	80035ee <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x34>
 8003426:	2101      	movs	r1, #1
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f8f4 	bl	8003616 <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x34>
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x36>
 8003438:	2300      	movs	r3, #0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d010      	beq.n	8003460 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x5c>
            return 32000.0f / (1 << (accelODR - ODR::ODR_32000)) ;
 800343e:	2101      	movs	r1, #1
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f8fc 	bl	800363e <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>
 8003446:	4603      	mov	r3, r0
 8003448:	461a      	mov	r2, r3
 800344a:	2301      	movs	r3, #1
 800344c:	4093      	lsls	r3, r2
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003456:	eddf 6a19 	vldr	s13, [pc, #100]	; 80034bc <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xb8>
 800345a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800345e:	e025      	b.n	80034ac <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        if(accelODR <= ODR::ODR_1_562 && accelODR >= ODR::ODR_200){
 8003460:	210e      	movs	r1, #14
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f8c3 	bl	80035ee <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7c>
 800346e:	2107      	movs	r1, #7
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f8d0 	bl	8003616 <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7c>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7e>
 8003480:	2300      	movs	r3, #0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d010      	beq.n	80034a8 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa4>
            return 200.0f /  ( 1 << (accelODR - ODR::ODR_200));
 8003486:	2107      	movs	r1, #7
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f8d8 	bl	800363e <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>
 800348e:	4603      	mov	r3, r0
 8003490:	461a      	mov	r2, r3
 8003492:	2301      	movs	r3, #1
 8003494:	4093      	lsls	r3, r2
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800349e:	eddf 6a08 	vldr	s13, [pc, #32]	; 80034c0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xbc>
 80034a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034a6:	e001      	b.n	80034ac <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        return -1.0f;
 80034a8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
 80034ac:	eeb0 0a67 	vmov.f32	s0, s15
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	43fa0000 	.word	0x43fa0000
 80034bc:	46fa0000 	.word	0x46fa0000
 80034c0:	43480000 	.word	0x43480000

080034c4 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>:

    //float map_accel_FSR_CNF_to_FSR(const config& cnf){
	float map_accel_FSR_CNF_to_FSR(ACCEL_CNF::FSR accelFSR){
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
        using namespace ACCEL_CNF;
  
        if(accelFSR <= FSR::FSR_2){
 80034cc:	2103      	movs	r1, #3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f8c6 	bl	8003660 <_ZN8ICM426889ACCEL_CNFleENS0_3FSRES1_>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE+0x30>
            return 16.0f / (1 << accelFSR);
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	2001      	movs	r0, #1
 80034de:	f7ff fefd 	bl	80032dc <_ZN8ICM426889ACCEL_CNFlsEhNS0_3FSRE>
 80034e2:	ee07 0a90 	vmov	s15, r0
 80034e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ea:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80034ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034f2:	e001      	b.n	80034f8 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE+0x34>
        }

        return -1.0f;
 80034f4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    }
 80034f8:	eef0 7a47 	vmov.f32	s15, s14
 80034fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <_ZN8ICM4268815convertTempDataEhh>:

    
    float convertTempData(uint8_t rawTempH, uint8_t rawTempL)
    {
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	460a      	mov	r2, r1
 8003512:	71fb      	strb	r3, [r7, #7]
 8003514:	4613      	mov	r3, r2
 8003516:	71bb      	strb	r3, [r7, #6]
        int16_t temp_data = (rawTempH << 8) |  rawTempL;
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	b21a      	sxth	r2, r3
 800351e:	79bb      	ldrb	r3, [r7, #6]
 8003520:	b21b      	sxth	r3, r3
 8003522:	4313      	orrs	r3, r2
 8003524:	81fb      	strh	r3, [r7, #14]
        return (temp_data / 132.48f + 25);
 8003526:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003532:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003550 <_ZN8ICM4268815convertTempDataEhh+0x48>
 8003536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800353a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800353e:	ee77 7a87 	vadd.f32	s15, s15, s14
    }
 8003542:	eeb0 0a67 	vmov.f32	s0, s15
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	43047ae1 	.word	0x43047ae1

08003554 <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>:
    /////////////////////////// GYRO_CNF /////////////////////////////////////

    namespace GYRO_CNF {

        bool operator<=(ODR odr1, ODR odr2) 
        {
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) <= static_cast<uint8_t> (odr2);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	429a      	cmp	r2, r3
 8003568:	bf94      	ite	ls
 800356a:	2301      	movls	r3, #1
 800356c:	2300      	movhi	r3, #0
 800356e:	b2db      	uxtb	r3, r3
        }
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>:
        bool operator>=(ODR odr1, ODR odr2) 
        {
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) >= static_cast<uint8_t> (odr2);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	429a      	cmp	r2, r3
 8003590:	bf2c      	ite	cs
 8003592:	2301      	movcs	r3, #1
 8003594:	2300      	movcc	r3, #0
 8003596:	b2db      	uxtb	r3, r3
        }
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>:
        uint8_t operator-(ODR odr1, ODR odr2)
        {
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) - static_cast<uint8_t> (odr2);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	b2db      	uxtb	r3, r3
        }
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <_ZN8ICM426888GYRO_CNFleENS0_3FSRES1_>:


        bool operator<=(FSR fsr1, FSR fsr2)
        {
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (fsr1) <= static_cast<uint8_t> (fsr2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	429a      	cmp	r2, r3
 80035da:	bf94      	ite	ls
 80035dc:	2301      	movls	r3, #1
 80035de:	2300      	movhi	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
        }
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>:

    /////////////////////////// ACCEL_CNF /////////////////////////////////////
    namespace ACCEL_CNF {

        bool operator<=(ODR odr1, ODR odr2) 
        {
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) <= static_cast<uint8_t> (odr2);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	429a      	cmp	r2, r3
 8003602:	bf94      	ite	ls
 8003604:	2301      	movls	r3, #1
 8003606:	2300      	movhi	r3, #0
 8003608:	b2db      	uxtb	r3, r3
        }
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>:
        bool operator>=(ODR odr1, ODR odr2) 
        {
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) >= static_cast<uint8_t> (odr2);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	b2da      	uxtb	r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	429a      	cmp	r2, r3
 800362a:	bf2c      	ite	cs
 800362c:	2301      	movcs	r3, #1
 800362e:	2300      	movcc	r3, #0
 8003630:	b2db      	uxtb	r3, r3
        }
 8003632:	4618      	mov	r0, r3
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>:
        uint8_t operator-(ODR odr1, ODR odr2)
        {
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) - static_cast<uint8_t> (odr2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	b2da      	uxtb	r2, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	b2db      	uxtb	r3, r3
        }
 8003654:	4618      	mov	r0, r3
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <_ZN8ICM426889ACCEL_CNFleENS0_3FSRES1_>:

        bool operator<=(FSR fsr1, FSR fsr2)
        {
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (fsr1) <= static_cast<uint8_t> (fsr2);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	429a      	cmp	r2, r3
 8003674:	bf94      	ite	ls
 8003676:	2301      	movls	r3, #1
 8003678:	2300      	movhi	r3, #0
 800367a:	b2db      	uxtb	r3, r3
        }  
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <_ZN9iPHandler12add_read_bitEhbb>:
    static uint8_t add_read_bit(uint8_t reg, bool normalMode = true, bool rwBitInFront = true)
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
 8003692:	460b      	mov	r3, r1
 8003694:	71bb      	strb	r3, [r7, #6]
 8003696:	4613      	mov	r3, r2
 8003698:	717b      	strb	r3, [r7, #5]
    	if(rwBitInFront){
 800369a:	797b      	ldrb	r3, [r7, #5]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <_ZN9iPHandler12add_read_bitEhbb+0x2c>
    		return normalMode ? (reg | (1 << 7)) : reg;
 80036a0:	79bb      	ldrb	r3, [r7, #6]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <_ZN9iPHandler12add_read_bitEhbb+0x28>
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	e00f      	b.n	80036d0 <_ZN9iPHandler12add_read_bitEhbb+0x48>
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	e00d      	b.n	80036d0 <_ZN9iPHandler12add_read_bitEhbb+0x48>
    		return normalMode ? (reg << 1) | 0x01 : reg << 1;
 80036b4:	79bb      	ldrb	r3, [r7, #6]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <_ZN9iPHandler12add_read_bitEhbb+0x42>
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	b25b      	sxtb	r3, r3
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	b25b      	sxtb	r3, r3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	e002      	b.n	80036d0 <_ZN9iPHandler12add_read_bitEhbb+0x48>
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	b2db      	uxtb	r3, r3
    }
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <_ZN9iPHandler13add_write_bitEhbb>:
    static uint8_t add_write_bit(uint8_t reg, bool normalMode = true, bool rwBitInFront = true)
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
 80036e6:	460b      	mov	r3, r1
 80036e8:	71bb      	strb	r3, [r7, #6]
 80036ea:	4613      	mov	r3, r2
 80036ec:	717b      	strb	r3, [r7, #5]
    	if(rwBitInFront){
 80036ee:	797b      	ldrb	r3, [r7, #5]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d009      	beq.n	8003708 <_ZN9iPHandler13add_write_bitEhbb+0x2c>
    		return normalMode ? reg : (reg | (1 << 7));
 80036f4:	79bb      	ldrb	r3, [r7, #6]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <_ZN9iPHandler13add_write_bitEhbb+0x22>
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	e012      	b.n	8003724 <_ZN9iPHandler13add_write_bitEhbb+0x48>
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003704:	b2db      	uxtb	r3, r3
 8003706:	e00d      	b.n	8003724 <_ZN9iPHandler13add_write_bitEhbb+0x48>
    		return normalMode ? reg << 1 : (reg  << 0x01 | 1);
 8003708:	79bb      	ldrb	r3, [r7, #6]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <_ZN9iPHandler13add_write_bitEhbb+0x3a>
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	b2db      	uxtb	r3, r3
 8003714:	e006      	b.n	8003724 <_ZN9iPHandler13add_write_bitEhbb+0x48>
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	b25b      	sxtb	r3, r3
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	b25b      	sxtb	r3, r3
 8003722:	b2db      	uxtb	r3, r3
    }
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <_ZN8system_tC1Ev>:

	timeTriggeredScheduler_t  *mTTscheduler_;
	myUART_t *mMyUART_;
	gpio *mLEDFailSilent_;
	circ_buffer<PCIFmsg_t, SIZE_BUFFER_MSG_BUFFER> mTxBuffer_;
} system_t;
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3314      	adds	r3, #20
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fc4a 	bl	8003fd6 <_ZN11circ_bufferI9PCIFmsg_tLm8EtEC1Ev>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	f2ad 5d9c 	subw	sp, sp, #1436	; 0x59c
 8003752:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  system_t theSystem;
 8003754:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ffe9 	bl	8003730 <_ZN8system_tC1Ev>
  evBuffer theEventsQueue;
 800375e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fc55 	bl	8004012 <_ZN11circ_bufferIhLm10EtEC1Ev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003768:	f001 fe59 	bl	800541e <HAL_Init>

  /* USER CODE BEGIN Init */
  watchdog_config();
 800376c:	f000 fbfa 	bl	8003f64 <_ZL15watchdog_configv>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003770:	f000 f940 	bl	80039f4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003774:	f000 fad0 	bl	8003d18 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8003778:	f000 fa92 	bl	8003ca0 <_ZL19MX_USART3_UART_Initv>
  MX_SPI2_Init();
 800377c:	f000 f9ea 	bl	8003b54 <_ZL12MX_SPI2_Initv>
  MX_TIM5_Init();
 8003780:	f000 fa2a 	bl	8003bd8 <_ZL12MX_TIM5_Initv>
  MX_CAN1_Init();
 8003784:	f000 f9aa 	bl	8003adc <_ZL12MX_CAN1_Initv>
  /* USER CODE BEGIN 2 */

  // Inicialización de la IMU =====================================
  gpio imuCS(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8003788:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800378c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003790:	498e      	ldr	r1, [pc, #568]	; (80039cc <main+0x280>)
 8003792:	4618      	mov	r0, r3
 8003794:	f7fd f848 	bl	8000828 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

  phandler_spi<> spi2(&hspi2, &imuCS, COMM_MODE::BLCK);
 8003798:	f507 7250 	add.w	r2, r7, #832	; 0x340
 800379c:	f507 7038 	add.w	r0, r7, #736	; 0x2e0
 80037a0:	2300      	movs	r3, #0
 80037a2:	498b      	ldr	r1, [pc, #556]	; (80039d0 <main+0x284>)
 80037a4:	f000 fc60 	bl	8004068 <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE>

  ICM42688::config_FIFO icmFifoCnf =
 80037a8:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80037ac:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 80037b0:	2201      	movs	r2, #1
 80037b2:	801a      	strh	r2, [r3, #0]
 80037b4:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80037b8:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 80037bc:	2200      	movs	r2, #0
 80037be:	605a      	str	r2, [r3, #4]
  {
		  .watermark = 1,
		  .mode = ICM42688::FIFO_MODE::BYPASS,
  };

  ICM42688::config_INT icmIntCnf =
 80037c0:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80037c4:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80037c8:	4a82      	ldr	r2, [pc, #520]	; (80039d4 <main+0x288>)
 80037ca:	461c      	mov	r4, r3
 80037cc:	4613      	mov	r3, r2
 80037ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			//.int1Mode = ICM42688::INT_MODE::PULSED_PP_HIGH,
			.int2Source = ICM42688::INT_SOURCE::DISABLED,
			.int2Mode = ICM42688::INT_MODE::DISABLED,
  };

  ICM42688::Config icmCnf =
 80037d4:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80037d8:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80037dc:	4618      	mov	r0, r3
 80037de:	2328      	movs	r3, #40	; 0x28
 80037e0:	461a      	mov	r2, r3
 80037e2:	2100      	movs	r1, #0
 80037e4:	f007 f87a 	bl	800a8dc <memset>
 80037e8:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80037ec:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80037f0:	2203      	movs	r2, #3
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80037f8:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80037fc:	2206      	movs	r2, #6
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8003804:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8003808:	2202      	movs	r2, #2
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8003810:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8003814:	2206      	movs	r2, #6
 8003816:	60da      	str	r2, [r3, #12]
		.gyroODR 					= ICM42688::GYRO_CNF::ODR::ODR_1000,
		.accelFSR 					= ICM42688::ACCEL_CNF::FSR::FSR_4,
		.accelODR 					= ICM42688::ACCEL_CNF::ODR::ODR_1000,
		.fifoCnf					= icmFifoCnf,
		.intCnf						= icmIntCnf,
  };
 8003818:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800381c:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8003820:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8003824:	f5a2 722e 	sub.w	r2, r2, #696	; 0x2b8
 8003828:	3310      	adds	r3, #16
 800382a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800382e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003832:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8003836:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800383a:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 800383e:	f5a2 7232 	sub.w	r2, r2, #712	; 0x2c8
 8003842:	f103 0418 	add.w	r4, r3, #24
 8003846:	4613      	mov	r3, r2
 8003848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800384a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ICM42688::icm42688 imu(icmCnf, &spi2, &imuCS);
 800384e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003852:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8003856:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 800385a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800385e:	f7fd fa01 	bl	8000c64 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioE>

  // Inicialización del LED heartbeat==============================
  gpio ledHeartbeat(LED_HEARTBEAT_GPIO_Port, LED_HEARTBEAT_GPIO_Pin);
 8003862:	f107 031c 	add.w	r3, r7, #28
 8003866:	2201      	movs	r2, #1
 8003868:	495b      	ldr	r1, [pc, #364]	; (80039d8 <main+0x28c>)
 800386a:	4618      	mov	r0, r3
 800386c:	f7fc ffdc 	bl	8000828 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>


  // Inicialización de la CNI
  CNI_constructor(&hcan1);
 8003870:	485a      	ldr	r0, [pc, #360]	; (80039dc <main+0x290>)
 8003872:	f7fc fe47 	bl	8000504 <_Z15CNI_constructorP19__CAN_HandleTypeDef>
  CNI_init();
 8003876:	f7fc fe61 	bl	800053c <_Z8CNI_initv>


  // Creación de las tareas========================================
  taskHeartbeat_constructor(&taskHeartbeat,
 800387a:	f507 707e 	add.w	r0, r7, #1016	; 0x3f8
 800387e:	f107 031c 	add.w	r3, r7, #28
 8003882:	9301      	str	r3, [sp, #4]
 8003884:	2300      	movs	r3, #0
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	2364      	movs	r3, #100	; 0x64
 800388a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800388e:	2100      	movs	r1, #0
 8003890:	f001 fbc6 	bl	8005020 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>
		  PERIOD_TASK_HEARTBEAT_TICKS_NORMAL,
		  WCET_TASK_HEARTBEAT_US,
		  BCET_TASK_HEARTBEAT_US,
		  &ledHeartbeat);

  taskWatchdog_constructor(&taskWatchdog,
 8003894:	f507 7077 	add.w	r0, r7, #988	; 0x3dc
 8003898:	4b51      	ldr	r3, [pc, #324]	; (80039e0 <main+0x294>)
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	2300      	movs	r3, #0
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2364      	movs	r3, #100	; 0x64
 80038a2:	2201      	movs	r2, #1
 80038a4:	2100      	movs	r1, #0
 80038a6:	f001 fc39 	bl	800511c <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>
		  PERIOD_TASK_WATCHDOG_TICKS_NORMAL,
		  WCET_TASK_WATCHDOG_US,
		  BCET_TASK_WATCHDOG_US,
		  &hiwdg);

  taskIMUgetData_constructor(&taskIMUgetData,
 80038aa:	f507 7069 	add.w	r0, r7, #932	; 0x3a4
 80038ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	2300      	movs	r3, #0
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	2364      	movs	r3, #100	; 0x64
 80038ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038be:	2101      	movs	r1, #1
 80038c0:	f001 fbe8 	bl	8005094 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688E>
		  PERIOD_TASK_IMU_TICKS_NORMAL,
		  WCET_TASK_IMU_US,
		  BCET_TASK_IMU_US,
		  &imu);

  taskCNIsendData_constructor(&taskCNIsendIMUdata,
 80038c4:	f507 7062 	add.w	r0, r7, #904	; 0x388
 80038c8:	2300      	movs	r3, #0
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	2300      	movs	r3, #0
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	2364      	movs	r3, #100	; 0x64
 80038d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038d6:	2102      	movs	r1, #2
 80038d8:	f001 fb6c 	bl	8004fb4 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>
		  BCET_TASK_CNI_SEND_IMU_US,
		  HANDLE_MSG_CNI_SEND_IMU_DATA);


  // Inicialización del scheduler==================================
  myTimer_constructor(&myTimer5, &htim5);
 80038dc:	4941      	ldr	r1, [pc, #260]	; (80039e4 <main+0x298>)
 80038de:	4842      	ldr	r0, [pc, #264]	; (80039e8 <main+0x29c>)
 80038e0:	f000 fd80 	bl	80043e4 <_Z19myTimer_constructorP9myTimer_tP19__TIM_HandleTypeDef>
  timeTriggeredScheduler_constructor(&theTTscheduler, &myTimer5);
 80038e4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80038e8:	493f      	ldr	r1, [pc, #252]	; (80039e8 <main+0x29c>)
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 fc5e 	bl	80051ac <_Z34timeTriggeredScheduler_constructorP24timeTriggeredScheduler_tP9myTimer_t>
  timeTriggeredScheduler_init(&theTTscheduler);
 80038f0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80038f4:	4618      	mov	r0, r3
 80038f6:	f001 fc79 	bl	80051ec <_Z27timeTriggeredScheduler_initP24timeTriggeredScheduler_t>
  timeTriggeredScheduler_add_task(&theTTscheduler, (timeTriggeredTask_t*)&taskHeartbeat);
 80038fa:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80038fe:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f001 fd19 	bl	800533c <_Z31timeTriggeredScheduler_add_taskP24timeTriggeredScheduler_tP19timeTriggeredTask_t>
  timeTriggeredScheduler_add_task(&theTTscheduler, (timeTriggeredTask_t*)&taskWatchdog);
 800390a:	f507 7277 	add.w	r2, r7, #988	; 0x3dc
 800390e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f001 fd11 	bl	800533c <_Z31timeTriggeredScheduler_add_taskP24timeTriggeredScheduler_tP19timeTriggeredTask_t>
  timeTriggeredScheduler_add_task(&theTTscheduler, (timeTriggeredTask_t*)&taskIMUgetData);
 800391a:	f507 7269 	add.w	r2, r7, #932	; 0x3a4
 800391e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f001 fd09 	bl	800533c <_Z31timeTriggeredScheduler_add_taskP24timeTriggeredScheduler_tP19timeTriggeredTask_t>


  // Inicialización del sistema general============================
  gpio ledFailSilent(LED_FAIL_SILENT_GPIO_Port, LED_FAIL_SILENT_GPIO_Pin);
 800392a:	1d3b      	adds	r3, r7, #4
 800392c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003930:	4929      	ldr	r1, [pc, #164]	; (80039d8 <main+0x28c>)
 8003932:	4618      	mov	r0, r3
 8003934:	f7fc ff78 	bl	8000828 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>
  myUART_constructor(&myUART3, &huart3);
 8003938:	492c      	ldr	r1, [pc, #176]	; (80039ec <main+0x2a0>)
 800393a:	482d      	ldr	r0, [pc, #180]	; (80039f0 <main+0x2a4>)
 800393c:	f000 fd62 	bl	8004404 <myUART_constructor>
  system_constructor(&theSystem, &theEventsQueue, &theTTscheduler, &myUART3, &ledFailSilent);
 8003940:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8003944:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8003948:	f207 402c 	addw	r0, r7, #1068	; 0x42c
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	4b27      	ldr	r3, [pc, #156]	; (80039f0 <main+0x2a4>)
 8003952:	f001 f8e7 	bl	8004b24 <_Z18system_constructorP8system_tP11circ_bufferIhLm10EtEP24timeTriggeredScheduler_tP8myUART_tPN5STM324gpioE>
  stateMachine_init((stateMachine_t*)&theSystem);
 8003956:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 800395a:	4618      	mov	r0, r3
 800395c:	f000 feaf 	bl	80046be <_Z17stateMachine_initP14stateMachine_t>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Se verifica si hay nuevos mensajes a procesar
	  if( (aux = system_has_new_msg(&theSystem)) )
 8003960:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8003964:	4618      	mov	r0, r3
 8003966:	f001 fa3d 	bl	8004de4 <_Z18system_has_new_msgP8system_t>
 800396a:	4603      	mov	r3, r0
 800396c:	f8a7 358e 	strh.w	r3, [r7, #1422]	; 0x58e
 8003970:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	; 0x58e
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf14      	ite	ne
 8003978:	2301      	movne	r3, #1
 800397a:	2300      	moveq	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <main+0x242>
	  {
		  theEventsQueue.write(EV_SYSTEM_NEW_MSG);
 8003982:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8003986:	2104      	movs	r1, #4
 8003988:	4618      	mov	r0, r3
 800398a:	f000 fba1 	bl	80040d0 <_ZN11circ_bufferIhLm10EtE5writeEh>
	  }

	  // Si hay eventos en la queue ==> se toma 1 y se dispatchea
	  if(!theEventsQueue.is_empty())
 800398e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fbe8 	bl	8004168 <_ZN11circ_bufferIhLm10EtE8is_emptyEv>
 8003998:	4603      	mov	r3, r0
 800399a:	f083 0301 	eor.w	r3, r3, #1
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0dd      	beq.n	8003960 <main+0x214>
	  {
		  theEventsQueue.read(&theEvent);
 80039a4:	f207 4217 	addw	r2, r7, #1047	; 0x417
 80039a8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fbe6 	bl	8004180 <_ZN11circ_bufferIhLm10EtE4readEPh>
		  stateMachine_dispatch((stateMachine_t*)&theSystem, theEvent);
 80039b4:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80039b8:	f2a3 1379 	subw	r3, r3, #377	; 0x179
 80039bc:	781a      	ldrb	r2, [r3, #0]
 80039be:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80039c2:	4611      	mov	r1, r2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fe8f 	bl	80046e8 <_Z21stateMachine_dispatchP14stateMachine_th>
	  if( (aux = system_has_new_msg(&theSystem)) )
 80039ca:	e7c9      	b.n	8003960 <main+0x214>
 80039cc:	40021000 	.word	0x40021000
 80039d0:	20000154 	.word	0x20000154
 80039d4:	0800aac0 	.word	0x0800aac0
 80039d8:	40020400 	.word	0x40020400
 80039dc:	2000012c 	.word	0x2000012c
 80039e0:	20000328 	.word	0x20000328
 80039e4:	200001b8 	.word	0x200001b8
 80039e8:	20000338 	.word	0x20000338
 80039ec:	20000274 	.word	0x20000274
 80039f0:	20000364 	.word	0x20000364

080039f4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b094      	sub	sp, #80	; 0x50
 80039f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039fa:	f107 0320 	add.w	r3, r7, #32
 80039fe:	2230      	movs	r2, #48	; 0x30
 8003a00:	2100      	movs	r1, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f006 ff6a 	bl	800a8dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a08:	f107 030c 	add.w	r3, r7, #12
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003a18:	f002 fc66 	bl	80062e8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a1c:	4b2d      	ldr	r3, [pc, #180]	; (8003ad4 <_Z18SystemClock_Configv+0xe0>)
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	4a2c      	ldr	r2, [pc, #176]	; (8003ad4 <_Z18SystemClock_Configv+0xe0>)
 8003a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a26:	6413      	str	r3, [r2, #64]	; 0x40
 8003a28:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <_Z18SystemClock_Configv+0xe0>)
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003a34:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <_Z18SystemClock_Configv+0xe4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003a3c:	4a26      	ldr	r2, [pc, #152]	; (8003ad8 <_Z18SystemClock_Configv+0xe4>)
 8003a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <_Z18SystemClock_Configv+0xe4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003a50:	2309      	movs	r3, #9
 8003a52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003a54:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003a68:	2304      	movs	r3, #4
 8003a6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003a6c:	2348      	movs	r3, #72	; 0x48
 8003a6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a70:	2302      	movs	r3, #2
 8003a72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003a74:	2303      	movs	r3, #3
 8003a76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a78:	f107 0320 	add.w	r3, r7, #32
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f002 fc43 	bl	8006308 <HAL_RCC_OscConfig>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8003a92:	f000 fa9b 	bl	8003fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a96:	230f      	movs	r3, #15
 8003a98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003aac:	f107 030c 	add.w	r3, r7, #12
 8003ab0:	2102      	movs	r1, #2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f002 fecc 	bl	8006850 <HAL_RCC_ClockConfig>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	bf14      	ite	ne
 8003abe:	2301      	movne	r3, #1
 8003ac0:	2300      	moveq	r3, #0
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8003ac8:	f000 fa80 	bl	8003fcc <Error_Handler>
  }
}
 8003acc:	bf00      	nop
 8003ace:	3750      	adds	r7, #80	; 0x50
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40007000 	.word	0x40007000

08003adc <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <_ZL12MX_CAN1_Initv+0x70>)
 8003ae2:	4a1b      	ldr	r2, [pc, #108]	; (8003b50 <_ZL12MX_CAN1_Initv+0x74>)
 8003ae4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8003ae6:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <_ZL12MX_CAN1_Initv+0x70>)
 8003ae8:	2203      	movs	r2, #3
 8003aea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003aec:	4b17      	ldr	r3, [pc, #92]	; (8003b4c <_ZL12MX_CAN1_Initv+0x70>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 8003af2:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <_ZL12MX_CAN1_Initv+0x70>)
 8003af4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003af8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8003afa:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <_ZL12MX_CAN1_Initv+0x70>)
 8003afc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003b00:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003b02:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <_ZL12MX_CAN1_Initv+0x70>)
 8003b04:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003b08:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003b0a:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <_ZL12MX_CAN1_Initv+0x70>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <_ZL12MX_CAN1_Initv+0x70>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003b16:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <_ZL12MX_CAN1_Initv+0x70>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <_ZL12MX_CAN1_Initv+0x70>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <_ZL12MX_CAN1_Initv+0x70>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003b28:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <_ZL12MX_CAN1_Initv+0x70>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003b2e:	4807      	ldr	r0, [pc, #28]	; (8003b4c <_ZL12MX_CAN1_Initv+0x70>)
 8003b30:	f001 fcd2 	bl	80054d8 <HAL_CAN_Init>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf14      	ite	ne
 8003b3a:	2301      	movne	r3, #1
 8003b3c:	2300      	moveq	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <_ZL12MX_CAN1_Initv+0x6c>
  {
    Error_Handler();
 8003b44:	f000 fa42 	bl	8003fcc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	2000012c 	.word	0x2000012c
 8003b50:	40006400 	.word	0x40006400

08003b54 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x7c>)
 8003b5a:	4a1e      	ldr	r2, [pc, #120]	; (8003bd4 <_ZL12MX_SPI2_Initv+0x80>)
 8003b5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003b5e:	4b1c      	ldr	r3, [pc, #112]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x7c>)
 8003b60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003b66:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x7c>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b6c:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x7c>)
 8003b6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b72:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b74:	4b16      	ldr	r3, [pc, #88]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x7c>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003b7a:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x7c>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003b80:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x7c>)
 8003b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b86:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x7c>)
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b8e:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x7c>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b94:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x7c>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x7c>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x7c>)
 8003ba2:	2207      	movs	r2, #7
 8003ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x7c>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003bac:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x7c>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003bb2:	4807      	ldr	r0, [pc, #28]	; (8003bd0 <_ZL12MX_SPI2_Initv+0x7c>)
 8003bb4:	f003 fc62 	bl	800747c <HAL_SPI_Init>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	bf14      	ite	ne
 8003bbe:	2301      	movne	r3, #1
 8003bc0:	2300      	moveq	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8003bc8:	f000 fa00 	bl	8003fcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003bcc:	bf00      	nop
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000154 	.word	0x20000154
 8003bd4:	40003800 	.word	0x40003800

08003bd8 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bde:	f107 0310 	add.w	r3, r7, #16
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	609a      	str	r2, [r3, #8]
 8003bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bec:	1d3b      	adds	r3, r7, #4
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	605a      	str	r2, [r3, #4]
 8003bf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003bf6:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <_ZL12MX_TIM5_Initv+0xbc>)
 8003bf8:	4a27      	ldr	r2, [pc, #156]	; (8003c98 <_ZL12MX_TIM5_Initv+0xc0>)
 8003bfa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 8003bfc:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <_ZL12MX_TIM5_Initv+0xbc>)
 8003bfe:	2247      	movs	r2, #71	; 0x47
 8003c00:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c02:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <_ZL12MX_TIM5_Initv+0xbc>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8003c08:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <_ZL12MX_TIM5_Initv+0xbc>)
 8003c0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c0e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c10:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <_ZL12MX_TIM5_Initv+0xbc>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c16:	4b1f      	ldr	r3, [pc, #124]	; (8003c94 <_ZL12MX_TIM5_Initv+0xbc>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003c1c:	481d      	ldr	r0, [pc, #116]	; (8003c94 <_ZL12MX_TIM5_Initv+0xbc>)
 8003c1e:	f004 f873 	bl	8007d08 <HAL_TIM_Base_Init>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <_ZL12MX_TIM5_Initv+0x5e>
  {
    Error_Handler();
 8003c32:	f000 f9cb 	bl	8003fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003c3c:	f107 0310 	add.w	r3, r7, #16
 8003c40:	4619      	mov	r1, r3
 8003c42:	4814      	ldr	r0, [pc, #80]	; (8003c94 <_ZL12MX_TIM5_Initv+0xbc>)
 8003c44:	f004 faac 	bl	80081a0 <HAL_TIM_ConfigClockSource>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	bf14      	ite	ne
 8003c4e:	2301      	movne	r3, #1
 8003c50:	2300      	moveq	r3, #0
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <_ZL12MX_TIM5_Initv+0x84>
  {
    Error_Handler();
 8003c58:	f000 f9b8 	bl	8003fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003c64:	1d3b      	adds	r3, r7, #4
 8003c66:	4619      	mov	r1, r3
 8003c68:	480a      	ldr	r0, [pc, #40]	; (8003c94 <_ZL12MX_TIM5_Initv+0xbc>)
 8003c6a:	f004 feb3 	bl	80089d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf14      	ite	ne
 8003c74:	2301      	movne	r3, #1
 8003c76:	2300      	moveq	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <_ZL12MX_TIM5_Initv+0xaa>
  {
    Error_Handler();
 8003c7e:	f000 f9a5 	bl	8003fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_RegisterCallback(&htim5, HAL_TIM_PERIOD_ELAPSED_CB_ID, timer_5_period_elapsed_callback);
 8003c82:	4a06      	ldr	r2, [pc, #24]	; (8003c9c <_ZL12MX_TIM5_Initv+0xc4>)
 8003c84:	210e      	movs	r1, #14
 8003c86:	4803      	ldr	r0, [pc, #12]	; (8003c94 <_ZL12MX_TIM5_Initv+0xbc>)
 8003c88:	f004 fbb8 	bl	80083fc <HAL_TIM_RegisterCallback>
  /* USER CODE END TIM5_Init 2 */

}
 8003c8c:	bf00      	nop
 8003c8e:	3720      	adds	r7, #32
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	200001b8 	.word	0x200001b8
 8003c98:	40000c00 	.word	0x40000c00
 8003c9c:	08003f95 	.word	0x08003f95

08003ca0 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ca4:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <_ZL19MX_USART3_UART_Initv+0x6c>)
 8003ca6:	4a1a      	ldr	r2, [pc, #104]	; (8003d10 <_ZL19MX_USART3_UART_Initv+0x70>)
 8003ca8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003caa:	4b18      	ldr	r3, [pc, #96]	; (8003d0c <_ZL19MX_USART3_UART_Initv+0x6c>)
 8003cac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003cb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003cb2:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <_ZL19MX_USART3_UART_Initv+0x6c>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003cb8:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <_ZL19MX_USART3_UART_Initv+0x6c>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003cbe:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <_ZL19MX_USART3_UART_Initv+0x6c>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003cc4:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <_ZL19MX_USART3_UART_Initv+0x6c>)
 8003cc6:	220c      	movs	r2, #12
 8003cc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <_ZL19MX_USART3_UART_Initv+0x6c>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cd0:	4b0e      	ldr	r3, [pc, #56]	; (8003d0c <_ZL19MX_USART3_UART_Initv+0x6c>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <_ZL19MX_USART3_UART_Initv+0x6c>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <_ZL19MX_USART3_UART_Initv+0x6c>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ce2:	480a      	ldr	r0, [pc, #40]	; (8003d0c <_ZL19MX_USART3_UART_Initv+0x6c>)
 8003ce4:	f004 ff2c 	bl	8008b40 <HAL_UART_Init>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bf14      	ite	ne
 8003cee:	2301      	movne	r3, #1
 8003cf0:	2300      	moveq	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8003cf8:	f000 f968 	bl	8003fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_RegisterCallback(&huart3, HAL_UART_RX_COMPLETE_CB_ID, &uart_3_new_data_callback);
 8003cfc:	4a05      	ldr	r2, [pc, #20]	; (8003d14 <_ZL19MX_USART3_UART_Initv+0x74>)
 8003cfe:	2103      	movs	r1, #3
 8003d00:	4802      	ldr	r0, [pc, #8]	; (8003d0c <_ZL19MX_USART3_UART_Initv+0x6c>)
 8003d02:	f004 ff7b 	bl	8008bfc <HAL_UART_RegisterCallback>
  /* USER CODE END USART3_Init 2 */

}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000274 	.word	0x20000274
 8003d10:	40004800 	.word	0x40004800
 8003d14:	08003fb1 	.word	0x08003fb1

08003d18 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08c      	sub	sp, #48	; 0x30
 8003d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d1e:	f107 031c 	add.w	r3, r7, #28
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	60da      	str	r2, [r3, #12]
 8003d2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d2e:	4b87      	ldr	r3, [pc, #540]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	4a86      	ldr	r2, [pc, #536]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003d34:	f043 0304 	orr.w	r3, r3, #4
 8003d38:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3a:	4b84      	ldr	r3, [pc, #528]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d46:	4b81      	ldr	r3, [pc, #516]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	4a80      	ldr	r2, [pc, #512]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d50:	6313      	str	r3, [r2, #48]	; 0x30
 8003d52:	4b7e      	ldr	r3, [pc, #504]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d5e:	4b7b      	ldr	r3, [pc, #492]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	4a7a      	ldr	r2, [pc, #488]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6a:	4b78      	ldr	r3, [pc, #480]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d76:	4b75      	ldr	r3, [pc, #468]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	4a74      	ldr	r2, [pc, #464]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	6313      	str	r3, [r2, #48]	; 0x30
 8003d82:	4b72      	ldr	r3, [pc, #456]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d8e:	4b6f      	ldr	r3, [pc, #444]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	4a6e      	ldr	r2, [pc, #440]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003d94:	f043 0310 	orr.w	r3, r3, #16
 8003d98:	6313      	str	r3, [r2, #48]	; 0x30
 8003d9a:	4b6c      	ldr	r3, [pc, #432]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003da6:	4b69      	ldr	r3, [pc, #420]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	4a68      	ldr	r2, [pc, #416]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003dac:	f043 0308 	orr.w	r3, r3, #8
 8003db0:	6313      	str	r3, [r2, #48]	; 0x30
 8003db2:	4b66      	ldr	r3, [pc, #408]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	607b      	str	r3, [r7, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003dbe:	4b63      	ldr	r3, [pc, #396]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	4a62      	ldr	r2, [pc, #392]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dca:	4b60      	ldr	r3, [pc, #384]	; (8003f4c <_ZL12MX_GPIO_Initv+0x234>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f244 0181 	movw	r1, #16513	; 0x4081
 8003ddc:	485c      	ldr	r0, [pc, #368]	; (8003f50 <_ZL12MX_GPIO_Initv+0x238>)
 8003dde:	f002 f9f1 	bl	80061c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8003de2:	2200      	movs	r2, #0
 8003de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003de8:	485a      	ldr	r0, [pc, #360]	; (8003f54 <_ZL12MX_GPIO_Initv+0x23c>)
 8003dea:	f002 f9eb 	bl	80061c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003dee:	2200      	movs	r2, #0
 8003df0:	2140      	movs	r1, #64	; 0x40
 8003df2:	4859      	ldr	r0, [pc, #356]	; (8003f58 <_ZL12MX_GPIO_Initv+0x240>)
 8003df4:	f002 f9e6 	bl	80061c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003dfe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003e08:	f107 031c 	add.w	r3, r7, #28
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4853      	ldr	r0, [pc, #332]	; (8003f5c <_ZL12MX_GPIO_Initv+0x244>)
 8003e10:	f002 f82c 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003e14:	2332      	movs	r3, #50	; 0x32
 8003e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e20:	2303      	movs	r3, #3
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e24:	230b      	movs	r3, #11
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e28:	f107 031c 	add.w	r3, r7, #28
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	484b      	ldr	r0, [pc, #300]	; (8003f5c <_ZL12MX_GPIO_Initv+0x244>)
 8003e30:	f002 f81c 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003e34:	2386      	movs	r3, #134	; 0x86
 8003e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e40:	2303      	movs	r3, #3
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e44:	230b      	movs	r3, #11
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e48:	f107 031c 	add.w	r3, r7, #28
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4844      	ldr	r0, [pc, #272]	; (8003f60 <_ZL12MX_GPIO_Initv+0x248>)
 8003e50:	f002 f80c 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003e54:	f244 0381 	movw	r3, #16513	; 0x4081
 8003e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e62:	2300      	movs	r3, #0
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e66:	f107 031c 	add.w	r3, r7, #28
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4838      	ldr	r0, [pc, #224]	; (8003f50 <_ZL12MX_GPIO_Initv+0x238>)
 8003e6e:	f001 fffd 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8003e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e80:	2300      	movs	r3, #0
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8003e84:	f107 031c 	add.w	r3, r7, #28
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4832      	ldr	r0, [pc, #200]	; (8003f54 <_ZL12MX_GPIO_Initv+0x23c>)
 8003e8c:	f001 ffee 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e96:	2302      	movs	r3, #2
 8003e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ea2:	230b      	movs	r3, #11
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003ea6:	f107 031c 	add.w	r3, r7, #28
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4828      	ldr	r0, [pc, #160]	; (8003f50 <_ZL12MX_GPIO_Initv+0x238>)
 8003eae:	f001 ffdd 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003eb2:	2340      	movs	r3, #64	; 0x40
 8003eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003ec2:	f107 031c 	add.w	r3, r7, #28
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4823      	ldr	r0, [pc, #140]	; (8003f58 <_ZL12MX_GPIO_Initv+0x240>)
 8003eca:	f001 ffcf 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003ece:	2380      	movs	r3, #128	; 0x80
 8003ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003eda:	f107 031c 	add.w	r3, r7, #28
 8003ede:	4619      	mov	r1, r3
 8003ee0:	481d      	ldr	r0, [pc, #116]	; (8003f58 <_ZL12MX_GPIO_Initv+0x240>)
 8003ee2:	f001 ffc3 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003ee6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eec:	2302      	movs	r3, #2
 8003eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003ef8:	230a      	movs	r3, #10
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003efc:	f107 031c 	add.w	r3, r7, #28
 8003f00:	4619      	mov	r1, r3
 8003f02:	4817      	ldr	r0, [pc, #92]	; (8003f60 <_ZL12MX_GPIO_Initv+0x248>)
 8003f04:	f001 ffb2 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003f16:	f107 031c 	add.w	r3, r7, #28
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4810      	ldr	r0, [pc, #64]	; (8003f60 <_ZL12MX_GPIO_Initv+0x248>)
 8003f1e:	f001 ffa5 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003f22:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f30:	2303      	movs	r3, #3
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003f34:	230b      	movs	r3, #11
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f38:	f107 031c 	add.w	r3, r7, #28
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4806      	ldr	r0, [pc, #24]	; (8003f58 <_ZL12MX_GPIO_Initv+0x240>)
 8003f40:	f001 ff94 	bl	8005e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f44:	bf00      	nop
 8003f46:	3730      	adds	r7, #48	; 0x30
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	40020400 	.word	0x40020400
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40021800 	.word	0x40021800
 8003f5c:	40020800 	.word	0x40020800
 8003f60:	40020000 	.word	0x40020000

08003f64 <_ZL15watchdog_configv>:

/* USER CODE BEGIN 4 */

static void watchdog_config(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
	hiwdg.Instance = IWDG;
 8003f68:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <_ZL15watchdog_configv+0x28>)
 8003f6a:	4a09      	ldr	r2, [pc, #36]	; (8003f90 <_ZL15watchdog_configv+0x2c>)
 8003f6c:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8003f6e:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <_ZL15watchdog_configv+0x28>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Window = 4095;
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <_ZL15watchdog_configv+0x28>)
 8003f76:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003f7a:	60da      	str	r2, [r3, #12]
	hiwdg.Init.Reload = 11;
 8003f7c:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <_ZL15watchdog_configv+0x28>)
 8003f7e:	220b      	movs	r2, #11
 8003f80:	609a      	str	r2, [r3, #8]
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	20000328 	.word	0x20000328
 8003f90:	40003000 	.word	0x40003000

08003f94 <_ZL31timer_5_period_elapsed_callbackP19__TIM_HandleTypeDef>:

static void timer_5_period_elapsed_callback(TIM_HandleTypeDef *htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	subject_notify((subject_t*)&myTimer5);
 8003f9c:	4803      	ldr	r0, [pc, #12]	; (8003fac <_ZL31timer_5_period_elapsed_callbackP19__TIM_HandleTypeDef+0x18>)
 8003f9e:	f000 fb51 	bl	8004644 <_Z14subject_notifyP11__subject_t>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000338 	.word	0x20000338

08003fb0 <_ZL24uart_3_new_data_callbackP20__UART_HandleTypeDef>:

static void uart_3_new_data_callback(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	myUART_IRQ_handler(&myUART3);
 8003fb8:	4803      	ldr	r0, [pc, #12]	; (8003fc8 <_ZL24uart_3_new_data_callbackP20__UART_HandleTypeDef+0x18>)
 8003fba:	f000 fae2 	bl	8004582 <myUART_IRQ_handler>
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000364 	.word	0x20000364

08003fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd0:	b672      	cpsid	i
}
 8003fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fd4:	e7fe      	b.n	8003fd4 <Error_Handler+0x8>

08003fd6 <_ZN11circ_bufferI9PCIFmsg_tLm8EtEC1Ev>:
        circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
            mFull_ = false;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
            mEmpty_ = true;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
            mHead_ = 0;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
            mTail_ = 0;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
            mSize_ = 0;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	801a      	strh	r2, [r3, #0]
        }
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <_ZN11circ_bufferIhLm10EtEC1Ev>:
        circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
            mFull_ = false;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	741a      	strb	r2, [r3, #16]
            mEmpty_ = true;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	745a      	strb	r2, [r3, #17]
            mHead_ = 0;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	819a      	strh	r2, [r3, #12]
            mTail_ = 0;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	81da      	strh	r2, [r3, #14]
            mSize_ = 0;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	801a      	strh	r2, [r3, #0]
        }
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
	...

08004048 <_ZN9iPHandlerC1Ev>:
class iPHandler {
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	4a04      	ldr	r2, [pc, #16]	; (8004064 <_ZN9iPHandlerC1Ev+0x1c>)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	0800ab8c 	.word	0x0800ab8c

08004068 <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE>:

template <uint8_t BufferSize = 32>
class PHandlerSPI : public iPHandler {
public:

	PHandlerSPI(SPI_HandleTypeDef* spiHandler, gpio *cs, COMM_MODE mode)
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]
		: m_handler(spiHandler)
		, m_cs(cs)
		, m_mode(mode)
		, m_size(0)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ffe5 	bl	8004048 <_ZN9iPHandlerC1Ev>
 800407e:	4a13      	ldr	r2, [pc, #76]	; (80040cc <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE+0x64>)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	601a      	str	r2, [r3, #0]
		: m_handler(spiHandler)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	60da      	str	r2, [r3, #12]
		, m_cs(cs)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	611a      	str	r2, [r3, #16]
		, m_mode(mode)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	615a      	str	r2, [r3, #20]
		, m_size(0)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		{

			m_mutex = false;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	721a      	strb	r2, [r3, #8]
			m_cs->write(GPIO_ST::HIGH);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	2101      	movs	r1, #1
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fc fbe2 	bl	8000874 <_ZN5STM324gpio5writeE7GPIO_ST>
			m_recvBuffer = &m_rxBuffer[1];
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f103 0219 	add.w	r2, r3, #25
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	605a      	str	r2, [r3, #4]
			//m_blockDelay = delay == 0 ? HAL_MAX_DELAY : delay;
			m_blockDelay = 5000;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c0:	65da      	str	r2, [r3, #92]	; 0x5c
		}
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	0800ab7c 	.word	0x0800ab7c

080040d0 <_ZN11circ_bufferIhLm10EtE5writeEh>:
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::write(bufferDataType data)
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	70fb      	strb	r3, [r7, #3]
            mBuffer_[mHead_] = data;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	899b      	ldrh	r3, [r3, #12]
 80040e0:	461a      	mov	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4413      	add	r3, r2
 80040e6:	78fa      	ldrb	r2, [r7, #3]
 80040e8:	709a      	strb	r2, [r3, #2]
            mEmpty_ = false;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	745a      	strb	r2, [r3, #17]
            if(++mHead_ == sCapacity_){
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	899b      	ldrh	r3, [r3, #12]
 80040f4:	3301      	adds	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	819a      	strh	r2, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	899b      	ldrh	r3, [r3, #12]
 8004100:	2b0a      	cmp	r3, #10
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <_ZN11circ_bufferIhLm10EtE5writeEh+0x44>
                mHead_ = 0;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	819a      	strh	r2, [r3, #12]
            if(mFull_ == true){
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	7c1b      	ldrb	r3, [r3, #16]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d10c      	bne.n	8004136 <_ZN11circ_bufferIhLm10EtE5writeEh+0x66>
                mTail_ = mTail_ + 1 == sCapacity_ ? 0 : mTail_ + 1; // mTail_ = ++mTail_ == sCapacity_ ? 0 : mTail_;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	89db      	ldrh	r3, [r3, #14]
 8004120:	2b09      	cmp	r3, #9
 8004122:	d004      	beq.n	800412e <_ZN11circ_bufferIhLm10EtE5writeEh+0x5e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	89db      	ldrh	r3, [r3, #14]
 8004128:	3301      	adds	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	e000      	b.n	8004130 <_ZN11circ_bufferIhLm10EtE5writeEh+0x60>
 800412e:	2200      	movs	r2, #0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	81da      	strh	r2, [r3, #14]
 8004134:	e011      	b.n	800415a <_ZN11circ_bufferIhLm10EtE5writeEh+0x8a>
            }else if(++mSize_ == sCapacity_){
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	3301      	adds	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	801a      	strh	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	2b0a      	cmp	r3, #10
 8004148:	bf0c      	ite	eq
 800414a:	2301      	moveq	r3, #1
 800414c:	2300      	movne	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <_ZN11circ_bufferIhLm10EtE5writeEh+0x8a>
                mFull_ = true;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	741a      	strb	r2, [r3, #16]
            return EXIT_OK;
 800415a:	2301      	movs	r3, #1
        }
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <_ZN11circ_bufferIhLm10EtE8is_emptyEv>:
        // bufferDataType* circ_buffer<bufferDataType, N, sizeDataType>::get_tail_ptr(){
        //     return &mBuffer_[mTail_];
        // }

        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::is_empty(){
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
            return mEmpty_;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	7c5b      	ldrb	r3, [r3, #17]
        }
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <_ZN11circ_bufferIhLm10EtE4readEPh>:
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::read(bufferDataType* pData)
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
            if (mEmpty_){
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	7c5b      	ldrb	r3, [r3, #17]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <_ZN11circ_bufferIhLm10EtE4readEPh+0x16>
                return EXIT_ERROR;
 8004192:	2300      	movs	r3, #0
 8004194:	e02f      	b.n	80041f6 <_ZN11circ_bufferIhLm10EtE4readEPh+0x76>
            *pData = mBuffer_[mTail_];
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	89db      	ldrh	r3, [r3, #14]
 800419a:	461a      	mov	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4413      	add	r3, r2
 80041a0:	789a      	ldrb	r2, [r3, #2]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	701a      	strb	r2, [r3, #0]
            mFull_ = false;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	741a      	strb	r2, [r3, #16]
            if(--mSize_ == 0){
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	801a      	strh	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	bf0c      	ite	eq
 80041c0:	2301      	moveq	r3, #1
 80041c2:	2300      	movne	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <_ZN11circ_bufferIhLm10EtE4readEPh+0x50>
                mEmpty_ = true;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	745a      	strb	r2, [r3, #17]
            if(++mTail_ == sCapacity_){
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	89db      	ldrh	r3, [r3, #14]
 80041d4:	3301      	adds	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	81da      	strh	r2, [r3, #14]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	89db      	ldrh	r3, [r3, #14]
 80041e0:	2b0a      	cmp	r3, #10
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <_ZN11circ_bufferIhLm10EtE4readEPh+0x74>
                mTail_ = 0;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	81da      	strh	r2, [r3, #14]
            return EXIT_OK;
 80041f4:	2301      	movs	r3, #1
        }
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt>:
		: PHandlerSPI(spiHandler, cs, COMM_MODE::BLCK)
		{}


	//iHANDLER_ST read_registers(uint8_t add, uint8_t size, void *cs, COMM_MODE mode)
	iPHANDLER_ST read_registers(const PHandlerOpt &opt) override
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	6039      	str	r1, [r7, #0]
	{
		//SPI_ST ret = SPI_ST::OK;

		if(opt.size > BufferSize-1){
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	785b      	ldrb	r3, [r3, #1]
 8004210:	2b1f      	cmp	r3, #31
 8004212:	d901      	bls.n	8004218 <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt+0x16>
				return iPHANDLER_ST::ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e029      	b.n	800426c <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt+0x6a>
		//if(m_mutex == true){
		//	return iHANDLER_ST::UNAVAILABLE;
		//}
		//m_mutex = true;

		m_txBuffer[0] = add_read_bit(opt.add, opt.rw, opt.rwFront);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	7818      	ldrb	r0, [r3, #0]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	7b19      	ldrb	r1, [r3, #12]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	7b5b      	ldrb	r3, [r3, #13]
 8004224:	461a      	mov	r2, r3
 8004226:	f7ff fa2f 	bl	8003688 <_ZN9iPHandler12add_read_bitEhbb>
 800422a:	4603      	mov	r3, r0
 800422c:	461a      	mov	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		m_mode = opt.mode;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	615a      	str	r2, [r3, #20]
		m_size = opt.size + 1;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	785b      	ldrb	r3, [r3, #1]
 8004240:	3301      	adds	r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		m_cs = static_cast<gpio*>(opt.slave);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	611a      	str	r2, [r3, #16]
		m_recvBuffer = &m_rxBuffer[opt.addSize]; // recvBuffer apunta a donde comienza la recepción de SPI según el largo del address (en bytes)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	7b9b      	ldrb	r3, [r3, #14]
 8004256:	3318      	adds	r3, #24
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	441a      	add	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	605a      	str	r2, [r3, #4]

		return start_transmition();
 8004260:	2100      	movs	r1, #0
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f842 	bl	80042ec <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>
 8004268:	4603      	mov	r3, r0
 800426a:	bf00      	nop
	}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt>:

	//iHANDLER_ST write_registers(uint8_t add, uint8_t *data, uint8_t size, void *cs, COMM_MODE mode)
	iPHANDLER_ST write_registers(uint8_t *data, const PHandlerOpt &opt) override
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
	{
		//SPI_ST ret = SPI_ST::OK;

		if(opt.size > BufferSize-1){
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	2b1f      	cmp	r3, #31
 8004286:	d901      	bls.n	800428c <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt+0x18>
				return iPHANDLER_ST::ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e02b      	b.n	80042e4 <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt+0x70>
		//if(m_mutex == true){
		//	return iHANDLER_ST::UNAVAILABLE;
		//}
		//m_mutex = true;

		m_txBuffer[0] = add_write_bit(opt.add, opt.rw, opt.rwFront);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	7818      	ldrb	r0, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	7b19      	ldrb	r1, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	7b5b      	ldrb	r3, [r3, #13]
 8004298:	461a      	mov	r2, r3
 800429a:	f7ff fa1f 	bl	80036dc <_ZN9iPHandler13add_write_bitEhbb>
 800429e:	4603      	mov	r3, r0
 80042a0:	461a      	mov	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		memcpy(m_txBuffer + 1, data, opt.size);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3338      	adds	r3, #56	; 0x38
 80042ac:	1c58      	adds	r0, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	785b      	ldrb	r3, [r3, #1]
 80042b2:	461a      	mov	r2, r3
 80042b4:	68b9      	ldr	r1, [r7, #8]
 80042b6:	f006 fb99 	bl	800a9ec <memcpy>
		m_mode = opt.mode;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	615a      	str	r2, [r3, #20]
		m_size = opt.size + 1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	785b      	ldrb	r3, [r3, #1]
 80042c6:	3301      	adds	r3, #1
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		m_cs = static_cast<gpio*>(opt.slave);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	611a      	str	r2, [r3, #16]

		return start_transmition();
 80042d8:	2100      	movs	r1, #0
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f806 	bl	80042ec <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>
 80042e0:	4603      	mov	r3, r0
 80042e2:	bf00      	nop
	}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>:




	iPHANDLER_ST start_transmition(void *fn_pointer = nullptr ) // arreglar cuando se use la DMA
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
	{
		iPHANDLER_ST ret = iPHANDLER_ST::OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
		//m_spiHandler.m_csPin = m_cs;

		m_cs->write(GPIO_ST::LOW);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2100      	movs	r1, #0
 8004300:	4618      	mov	r0, r3
 8004302:	f7fc fab7 	bl	8000874 <_ZN5STM324gpio5writeE7GPIO_ST>
		switch (m_mode)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d021      	beq.n	8004352 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x66>
 800430e:	2b02      	cmp	r3, #2
 8004310:	dc21      	bgt.n	8004356 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x6a>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x30>
 8004316:	2b01      	cmp	r3, #1
 8004318:	d019      	beq.n	800434e <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x62>
 800431a:	e01c      	b.n	8004356 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x6a>
		{
		case COMM_MODE::BLCK:

			ret = transmit(m_txBuffer, m_rxBuffer, m_size);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f103 0218 	add.w	r2, r3, #24
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800432e:	b29b      	uxth	r3, r3
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f81e 	bl	8004372 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t>
 8004336:	60f8      	str	r0, [r7, #12]
			m_cs->write(GPIO_ST::HIGH);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	2101      	movs	r1, #1
 800433e:	4618      	mov	r0, r3
 8004340:	f7fc fa98 	bl	8000874 <_ZN5STM324gpio5writeE7GPIO_ST>
			if(ret != iPHANDLER_ST::OK){
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00d      	beq.n	8004366 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7a>
				return iPHANDLER_ST::ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e00d      	b.n	800436a <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			}
			break;

		case COMM_MODE::IT:
			 return iPHANDLER_ST::INVALID;
 800434e:	2303      	movs	r3, #3
 8004350:	e00b      	b.n	800436a <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;

		case COMM_MODE::DMA:
			return iPHANDLER_ST::INVALID;
 8004352:	2303      	movs	r3, #3
 8004354:	e009      	b.n	800436a <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;


		default:
			m_cs->write(GPIO_ST::HIGH);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2101      	movs	r1, #1
 800435c:	4618      	mov	r0, r3
 800435e:	f7fc fa89 	bl	8000874 <_ZN5STM324gpio5writeE7GPIO_ST>
			return iPHANDLER_ST::INVALID;
 8004362:	2303      	movs	r3, #3
 8004364:	e001      	b.n	800436a <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;
 8004366:	bf00      	nop
			break;
		}

		return iPHANDLER_ST::OK;
 8004368:	2300      	movs	r3, #0
	}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t>:


	   return map_hal_st_to_handler_st(retHal);
   }

   iPHANDLER_ST transmit(uint8_t *pTxData, uint8_t *pRxData, uint16_t size)
 8004372:	b580      	push	{r7, lr}
 8004374:	b088      	sub	sp, #32
 8004376:	af02      	add	r7, sp, #8
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	807b      	strh	r3, [r7, #2]
   {

	   HAL_StatusTypeDef retHal = HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	75fb      	strb	r3, [r7, #23]
	   if(m_cs == nullptr)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t+0x1e>
		   return iPHANDLER_ST::ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e013      	b.n	80043b8 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t+0x46>

	   //m_csPin->write(GPIO_ST::LOW);

	   retHal = HAL_SPI_TransmitReceive(
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	68d8      	ldr	r0, [r3, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004398:	887a      	ldrh	r2, [r7, #2]
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	f003 f916 	bl	80075d2 <HAL_SPI_TransmitReceive>
 80043a6:	4603      	mov	r3, r0
 80043a8:	75fb      	strb	r3, [r7, #23]
				   size,
				m_blockDelay
			   );
	   //m_csPin->write(GPIO_ST::HIGH);

	   return map_hal_st_to_handler_st(retHal);
 80043aa:	7dfb      	ldrb	r3, [r7, #23]
 80043ac:	4619      	mov	r1, r3
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f806 	bl	80043c0 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef>
 80043b4:	4603      	mov	r3, r0
 80043b6:	bf00      	nop

   }
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef>:
   {
	   return iPHANDLER_ST::INVALID;
   }


   iPHANDLER_ST map_hal_st_to_handler_st(HAL_StatusTypeDef st)
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	70fb      	strb	r3, [r7, #3]
   {
	   switch (st){
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef+0x16>
	   case HAL_OK:
		   return iPHANDLER_ST::OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e000      	b.n	80043d8 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef+0x18>
		   break;
	   case HAL_TIMEOUT:
	   case HAL_ERROR:
	   default:
		   return iPHANDLER_ST::ERROR;
 80043d6:	2301      	movs	r3, #1
		   break;
	   }
   }
 80043d8:	4618      	mov	r0, r3
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <_Z19myTimer_constructorP9myTimer_tP19__TIM_HandleTypeDef>:
 */

#include "myTimer.h"

void myTimer_constructor(myTimer_t *me, TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
	subject_constructor(&me->super);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 f8d7 	bl	80045a4 <_Z19subject_constructorP11__subject_t>
	me->mHtim_ = htim;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <myUART_constructor>:
#include "myUART.h"

#define TIMEOUT_DEFAULT_MS 1000

void myUART_constructor(myUART_t *me, UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
	me->mHuart_ = huart;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	601a      	str	r2, [r3, #0]
	me->mEnabled_ = 0;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	me->mTimeoutTx_ = TIMEOUT_DEFAULT_MS;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
	circularBuffer_constructor(&me->mCbuf_, me->mRxBuf_, LEN_RX_BUFFER);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	1d18      	adds	r0, r3, #4
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3314      	adds	r3, #20
 800442c:	2220      	movs	r2, #32
 800442e:	4619      	mov	r1, r3
 8004430:	f7fc f97e 	bl	8000730 <circularBuffer_constructor>
}
 8004434:	bf00      	nop
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <myUART_enable_rx>:

void myUART_enable_rx(myUART_t *me)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
	if(!me->mEnabled_)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <myUART_enable_rx+0x2a>
	{
		HAL_UART_Receive_IT(me->mHuart_, &me->mAux_, 1);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3334      	adds	r3, #52	; 0x34
 8004456:	2201      	movs	r2, #1
 8004458:	4619      	mov	r1, r3
 800445a:	f004 fdce 	bl	8008ffa <HAL_UART_Receive_IT>
		me->mEnabled_ = 1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	}
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <myUART_disable_rx>:

void myUART_disable_rx(myUART_t *me)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
	if(me->mEnabled_)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <myUART_disable_rx+0x24>
	{
		HAL_UART_AbortReceive_IT(me->mHuart_);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f004 fdfd 	bl	8009084 <HAL_UART_AbortReceive_IT>
		me->mEnabled_ = 0;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	}
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <myUART_read>:

uint16_t myUART_read(myUART_t *me, uint8_t *buffer, uint16_t lenBuffer)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b086      	sub	sp, #24
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	4613      	mov	r3, r2
 80044a6:	80fb      	strh	r3, [r7, #6]
	uint16_t available = circularBuffer_length_data(&me->mCbuf_);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fc f957 	bl	8000760 <circularBuffer_length_data>
 80044b2:	4603      	mov	r3, r0
 80044b4:	82fb      	strh	r3, [r7, #22]
	uint16_t read = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	82bb      	strh	r3, [r7, #20]

	if(available > lenBuffer)
 80044ba:	8afa      	ldrh	r2, [r7, #22]
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d90d      	bls.n	80044de <myUART_read+0x44>
	{
		available = lenBuffer;
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	82fb      	strh	r3, [r7, #22]
	}

	while(read < available)
 80044c6:	e00a      	b.n	80044de <myUART_read+0x44>
	{
		circularBuffer_read(&me->mCbuf_, &buffer[read]);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	1d18      	adds	r0, r3, #4
 80044cc:	8abb      	ldrh	r3, [r7, #20]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	4413      	add	r3, r2
 80044d2:	4619      	mov	r1, r3
 80044d4:	f7fc f984 	bl	80007e0 <circularBuffer_read>
		read++;
 80044d8:	8abb      	ldrh	r3, [r7, #20]
 80044da:	3301      	adds	r3, #1
 80044dc:	82bb      	strh	r3, [r7, #20]
	while(read < available)
 80044de:	8aba      	ldrh	r2, [r7, #20]
 80044e0:	8afb      	ldrh	r3, [r7, #22]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d3f0      	bcc.n	80044c8 <myUART_read+0x2e>
	}

	return read;
 80044e6:	8abb      	ldrh	r3, [r7, #20]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <myUART_read_blocking>:

uint16_t myUART_read_blocking(myUART_t *me, uint8_t *buffer, uint16_t lenBuffer)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	4613      	mov	r3, r2
 80044fc:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef aux;

	if((buffer != 0) && (lenBuffer > 0))
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00b      	beq.n	800451c <myUART_read_blocking+0x2c>
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d008      	beq.n	800451c <myUART_read_blocking+0x2c>
	{
		aux = HAL_UART_Receive(me->mHuart_, buffer, lenBuffer, 100);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	88fa      	ldrh	r2, [r7, #6]
 8004510:	2364      	movs	r3, #100	; 0x64
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	f004 fcad 	bl	8008e72 <HAL_UART_Receive>
 8004518:	4603      	mov	r3, r0
 800451a:	75fb      	strb	r3, [r7, #23]
	}

	if(aux == HAL_TIMEOUT)
 800451c:	7dfb      	ldrb	r3, [r7, #23]
 800451e:	2b03      	cmp	r3, #3
 8004520:	d101      	bne.n	8004526 <myUART_read_blocking+0x36>
	{
		return 1;
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <myUART_read_blocking+0x38>
	}

	return 0;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <myUART_send>:

uint16_t myUART_send(myUART_t *me, uint8_t *buffer, uint16_t lenBuffer)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	4613      	mov	r3, r2
 800453c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef aux;

	aux = HAL_UART_Transmit(me->mHuart_, buffer, lenBuffer, me->mTimeoutTx_);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	88fa      	ldrh	r2, [r7, #6]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	f004 fc0f 	bl	8008d6c <HAL_UART_Transmit>
 800454e:	4603      	mov	r3, r0
 8004550:	75fb      	strb	r3, [r7, #23]

	if(aux == HAL_TIMEOUT)
 8004552:	7dfb      	ldrb	r3, [r7, #23]
 8004554:	2b03      	cmp	r3, #3
 8004556:	d101      	bne.n	800455c <myUART_send+0x2c>
	{
		return 1;
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <myUART_send+0x2e>
	}

	return 0;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <myUART_bytes_in_rx_buffer>:

uint16_t myUART_bytes_in_rx_buffer(myUART_t *me)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
	return circularBuffer_length_data(&me->mCbuf_);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	4618      	mov	r0, r3
 8004574:	f7fc f8f4 	bl	8000760 <circularBuffer_length_data>
 8004578:	4603      	mov	r3, r0

}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <myUART_IRQ_handler>:
	return circularBuffer_flush(&me->mCbuf_);

}

void myUART_IRQ_handler(myUART_t *me)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b082      	sub	sp, #8
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
	circularBuffer_write(&me->mCbuf_, me->mAux_);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	1d1a      	adds	r2, r3, #4
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f7fc f8fb 	bl	8000792 <circularBuffer_write>
	//HAL_UART_Receive_IT(me->mHuart_, &me->mAux_, 1);
}
 800459c:	bf00      	nop
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <_Z19subject_constructorP11__subject_t>:
 */

#include "observer.h"

void subject_constructor(subject_t *me)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for( i = 0; i < MAX_NUM_OBSERVERS; i++ )
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e00e      	b.n	80045d0 <_Z19subject_constructorP11__subject_t+0x2c>
	{
		me->mObservers_[i] = 0;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	2100      	movs	r1, #0
 80045b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		me->mObserversHandle_[i] = 0;
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3304      	adds	r3, #4
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	2200      	movs	r2, #0
 80045c8:	605a      	str	r2, [r3, #4]
	for( i = 0; i < MAX_NUM_OBSERVERS; i++ )
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3301      	adds	r3, #1
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d9ed      	bls.n	80045b2 <_Z19subject_constructorP11__subject_t+0xe>
	}
}
 80045d6:	bf00      	nop
 80045d8:	bf00      	nop
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <_Z14subject_attachP11__subject_tPvPFvS1_S0_E>:
		me->mObserversHandle_[i] = 0;
	}
}

uint8_t subject_attach(subject_t *me, void *observer, notificationHandle_t notificationHandle)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]
	uint8_t found = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	74fb      	strb	r3, [r7, #19]

	while( (i < MAX_NUM_OBSERVERS) && (found == 0) )
 80045f8:	e017      	b.n	800462a <_Z14subject_attachP11__subject_tPvPFvS1_S0_E+0x46>
	{
		if(!(me->mObservers_[i]))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10e      	bne.n	8004624 <_Z14subject_attachP11__subject_tPvPFvS1_S0_E+0x40>
		{
			found = 1;
 8004606:	2301      	movs	r3, #1
 8004608:	74fb      	strb	r3, [r7, #19]
			me->mObservers_[i] = observer;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	68b9      	ldr	r1, [r7, #8]
 8004610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			me->mObserversHandle_[i] = notificationHandle;
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	3304      	adds	r3, #4
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	605a      	str	r2, [r3, #4]
 8004622:	e002      	b.n	800462a <_Z14subject_attachP11__subject_tPvPFvS1_S0_E+0x46>
		}
		else
		{
			i++;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	3301      	adds	r3, #1
 8004628:	617b      	str	r3, [r7, #20]
	while( (i < MAX_NUM_OBSERVERS) && (found == 0) )
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b04      	cmp	r3, #4
 800462e:	d802      	bhi.n	8004636 <_Z14subject_attachP11__subject_tPvPFvS1_S0_E+0x52>
 8004630:	7cfb      	ldrb	r3, [r7, #19]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0e1      	beq.n	80045fa <_Z14subject_attachP11__subject_tPvPFvS1_S0_E+0x16>
		}
	}

	return found;
 8004636:	7cfb      	ldrb	r3, [r7, #19]
}
 8004638:	4618      	mov	r0, r3
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <_Z14subject_notifyP11__subject_t>:
	}
	return found;
}

void subject_notify(subject_t *me)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	notificationHandle_t handle;

	for(i = 0; i < MAX_NUM_OBSERVERS ; i++)
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	e01f      	b.n	8004692 <_Z14subject_notifyP11__subject_t+0x4e>
	{
		if( (me->mObservers_[i]) && (me->mObserversHandle_[i]) )
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d016      	beq.n	800468c <_Z14subject_notifyP11__subject_t+0x48>
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3304      	adds	r3, #4
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00e      	beq.n	800468c <_Z14subject_notifyP11__subject_t+0x48>
		{
			handle = me->mObserversHandle_[i];
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3304      	adds	r3, #4
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	60bb      	str	r3, [r7, #8]
			(*handle)(me->mObservers_[i], me);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4610      	mov	r0, r2
 800468a:	4798      	blx	r3
	for(i = 0; i < MAX_NUM_OBSERVERS ; i++)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3301      	adds	r3, #1
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b04      	cmp	r3, #4
 8004696:	d9dc      	bls.n	8004652 <_Z14subject_notifyP11__subject_t+0xe>
		}
	}
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <_Z24stateMachine_constructorP14stateMachine_tPF7state_tPvhE>:
#include "stateMachine.h"

#define EV_NONE 0

void stateMachine_constructor(stateMachine_t *me, stateHandler_t initial)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	6039      	str	r1, [r7, #0]
	me->m_state = initial;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	601a      	str	r2, [r3, #0]
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <_Z17stateMachine_initP14stateMachine_t>:

void stateMachine_init(stateMachine_t *me)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
	event_t e = EV_NONE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]

	(me->m_state)(me, e);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	7bfa      	ldrb	r2, [r7, #15]
 80046d0:	4611      	mov	r1, r2
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	4798      	blx	r3
	(me->m_state)(me, EV_ENTRY);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2101      	movs	r1, #1
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	4798      	blx	r3
}
 80046e0:	bf00      	nop
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <_Z21stateMachine_dispatchP14stateMachine_th>:

void stateMachine_dispatch(stateMachine_t *me, event_t const e)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	70fb      	strb	r3, [r7, #3]
	stateHandler_t s = me->m_state;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]
	state_t r = (*s)(me, e);
 80046fa:	78fa      	ldrb	r2, [r7, #3]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4611      	mov	r1, r2
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
 8004704:	4603      	mov	r3, r0
 8004706:	72fb      	strb	r3, [r7, #11]

	if(r == TRANSITION)
 8004708:	7afb      	ldrb	r3, [r7, #11]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d108      	bne.n	8004720 <_Z21stateMachine_dispatchP14stateMachine_th+0x38>
	{
		(*s)(me, EV_EXIT);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2102      	movs	r1, #2
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	4798      	blx	r3
		(me->m_state)(me, EV_ENTRY);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2101      	movs	r1, #1
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	4798      	blx	r3
	}
}
 8004720:	bf00      	nop
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <_Z23stateMachine_transitionP14stateMachine_tPF7state_tPvhE>:

state_t stateMachine_transition(stateMachine_t *me, stateHandler_t target)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
	me->m_state = target;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	601a      	str	r2, [r3, #0]
	return TRANSITION;
 8004738:	2302      	movs	r3, #2
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800474e:	4b0f      	ldr	r3, [pc, #60]	; (800478c <HAL_MspInit+0x44>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	4a0e      	ldr	r2, [pc, #56]	; (800478c <HAL_MspInit+0x44>)
 8004754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004758:	6413      	str	r3, [r2, #64]	; 0x40
 800475a:	4b0c      	ldr	r3, [pc, #48]	; (800478c <HAL_MspInit+0x44>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004766:	4b09      	ldr	r3, [pc, #36]	; (800478c <HAL_MspInit+0x44>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	4a08      	ldr	r2, [pc, #32]	; (800478c <HAL_MspInit+0x44>)
 800476c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004770:	6453      	str	r3, [r2, #68]	; 0x44
 8004772:	4b06      	ldr	r3, [pc, #24]	; (800478c <HAL_MspInit+0x44>)
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800

08004790 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	; 0x28
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004798:	f107 0314 	add.w	r3, r7, #20
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	605a      	str	r2, [r3, #4]
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a17      	ldr	r2, [pc, #92]	; (800480c <HAL_CAN_MspInit+0x7c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d127      	bne.n	8004802 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80047b2:	4b17      	ldr	r3, [pc, #92]	; (8004810 <HAL_CAN_MspInit+0x80>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	4a16      	ldr	r2, [pc, #88]	; (8004810 <HAL_CAN_MspInit+0x80>)
 80047b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047bc:	6413      	str	r3, [r2, #64]	; 0x40
 80047be:	4b14      	ldr	r3, [pc, #80]	; (8004810 <HAL_CAN_MspInit+0x80>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047ca:	4b11      	ldr	r3, [pc, #68]	; (8004810 <HAL_CAN_MspInit+0x80>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	4a10      	ldr	r2, [pc, #64]	; (8004810 <HAL_CAN_MspInit+0x80>)
 80047d0:	f043 0308 	orr.w	r3, r3, #8
 80047d4:	6313      	str	r3, [r2, #48]	; 0x30
 80047d6:	4b0e      	ldr	r3, [pc, #56]	; (8004810 <HAL_CAN_MspInit+0x80>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80047e2:	2303      	movs	r3, #3
 80047e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e6:	2302      	movs	r3, #2
 80047e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ee:	2303      	movs	r3, #3
 80047f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80047f2:	2309      	movs	r3, #9
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047f6:	f107 0314 	add.w	r3, r7, #20
 80047fa:	4619      	mov	r1, r3
 80047fc:	4805      	ldr	r0, [pc, #20]	; (8004814 <HAL_CAN_MspInit+0x84>)
 80047fe:	f001 fb35 	bl	8005e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004802:	bf00      	nop
 8004804:	3728      	adds	r7, #40	; 0x28
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40006400 	.word	0x40006400
 8004810:	40023800 	.word	0x40023800
 8004814:	40020c00 	.word	0x40020c00

08004818 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004820:	f107 0314 	add.w	r3, r7, #20
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	60da      	str	r2, [r3, #12]
 800482e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a25      	ldr	r2, [pc, #148]	; (80048cc <HAL_SPI_MspInit+0xb4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d144      	bne.n	80048c4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800483a:	4b25      	ldr	r3, [pc, #148]	; (80048d0 <HAL_SPI_MspInit+0xb8>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	4a24      	ldr	r2, [pc, #144]	; (80048d0 <HAL_SPI_MspInit+0xb8>)
 8004840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004844:	6413      	str	r3, [r2, #64]	; 0x40
 8004846:	4b22      	ldr	r3, [pc, #136]	; (80048d0 <HAL_SPI_MspInit+0xb8>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004852:	4b1f      	ldr	r3, [pc, #124]	; (80048d0 <HAL_SPI_MspInit+0xb8>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	4a1e      	ldr	r2, [pc, #120]	; (80048d0 <HAL_SPI_MspInit+0xb8>)
 8004858:	f043 0304 	orr.w	r3, r3, #4
 800485c:	6313      	str	r3, [r2, #48]	; 0x30
 800485e:	4b1c      	ldr	r3, [pc, #112]	; (80048d0 <HAL_SPI_MspInit+0xb8>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800486a:	4b19      	ldr	r3, [pc, #100]	; (80048d0 <HAL_SPI_MspInit+0xb8>)
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <HAL_SPI_MspInit+0xb8>)
 8004870:	f043 0302 	orr.w	r3, r3, #2
 8004874:	6313      	str	r3, [r2, #48]	; 0x30
 8004876:	4b16      	ldr	r3, [pc, #88]	; (80048d0 <HAL_SPI_MspInit+0xb8>)
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	60bb      	str	r3, [r7, #8]
 8004880:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = IMU_MISO_Pin|IMU_MOSI_Pin;
 8004882:	230c      	movs	r3, #12
 8004884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004886:	2302      	movs	r3, #2
 8004888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800488e:	2303      	movs	r3, #3
 8004890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004892:	2305      	movs	r3, #5
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004896:	f107 0314 	add.w	r3, r7, #20
 800489a:	4619      	mov	r1, r3
 800489c:	480d      	ldr	r0, [pc, #52]	; (80048d4 <HAL_SPI_MspInit+0xbc>)
 800489e:	f001 fae5 	bl	8005e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SCK_Pin;
 80048a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a8:	2302      	movs	r3, #2
 80048aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ac:	2300      	movs	r3, #0
 80048ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b0:	2303      	movs	r3, #3
 80048b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048b4:	2305      	movs	r3, #5
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMU_SCK_GPIO_Port, &GPIO_InitStruct);
 80048b8:	f107 0314 	add.w	r3, r7, #20
 80048bc:	4619      	mov	r1, r3
 80048be:	4806      	ldr	r0, [pc, #24]	; (80048d8 <HAL_SPI_MspInit+0xc0>)
 80048c0:	f001 fad4 	bl	8005e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80048c4:	bf00      	nop
 80048c6:	3728      	adds	r7, #40	; 0x28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40003800 	.word	0x40003800
 80048d0:	40023800 	.word	0x40023800
 80048d4:	40020800 	.word	0x40020800
 80048d8:	40020400 	.word	0x40020400

080048dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a0d      	ldr	r2, [pc, #52]	; (8004920 <HAL_TIM_Base_MspInit+0x44>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d113      	bne.n	8004916 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80048ee:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <HAL_TIM_Base_MspInit+0x48>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	4a0c      	ldr	r2, [pc, #48]	; (8004924 <HAL_TIM_Base_MspInit+0x48>)
 80048f4:	f043 0308 	orr.w	r3, r3, #8
 80048f8:	6413      	str	r3, [r2, #64]	; 0x40
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <HAL_TIM_Base_MspInit+0x48>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004906:	2200      	movs	r2, #0
 8004908:	2100      	movs	r1, #0
 800490a:	2032      	movs	r0, #50	; 0x32
 800490c:	f001 f9e5 	bl	8005cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004910:	2032      	movs	r0, #50	; 0x32
 8004912:	f001 f9fe 	bl	8005d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40000c00 	.word	0x40000c00
 8004924:	40023800 	.word	0x40023800

08004928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b0aa      	sub	sp, #168	; 0xa8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004930:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	605a      	str	r2, [r3, #4]
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	60da      	str	r2, [r3, #12]
 800493e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004940:	f107 0310 	add.w	r3, r7, #16
 8004944:	2284      	movs	r2, #132	; 0x84
 8004946:	2100      	movs	r1, #0
 8004948:	4618      	mov	r0, r3
 800494a:	f005 ffc7 	bl	800a8dc <memset>
  if(huart->Instance==USART3)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a26      	ldr	r2, [pc, #152]	; (80049ec <HAL_UART_MspInit+0xc4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d144      	bne.n	80049e2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800495c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800495e:	2300      	movs	r3, #0
 8004960:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004962:	f107 0310 	add.w	r3, r7, #16
 8004966:	4618      	mov	r0, r3
 8004968:	f002 f998 	bl	8006c9c <HAL_RCCEx_PeriphCLKConfig>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004972:	f7ff fb2b 	bl	8003fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004976:	4b1e      	ldr	r3, [pc, #120]	; (80049f0 <HAL_UART_MspInit+0xc8>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	4a1d      	ldr	r2, [pc, #116]	; (80049f0 <HAL_UART_MspInit+0xc8>)
 800497c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004980:	6413      	str	r3, [r2, #64]	; 0x40
 8004982:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <HAL_UART_MspInit+0xc8>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800498e:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <HAL_UART_MspInit+0xc8>)
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	4a17      	ldr	r2, [pc, #92]	; (80049f0 <HAL_UART_MspInit+0xc8>)
 8004994:	f043 0308 	orr.w	r3, r3, #8
 8004998:	6313      	str	r3, [r2, #48]	; 0x30
 800499a:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <HAL_UART_MspInit+0xc8>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80049a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80049aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ae:	2302      	movs	r3, #2
 80049b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ba:	2303      	movs	r3, #3
 80049bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80049c0:	2307      	movs	r3, #7
 80049c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80049ca:	4619      	mov	r1, r3
 80049cc:	4809      	ldr	r0, [pc, #36]	; (80049f4 <HAL_UART_MspInit+0xcc>)
 80049ce:	f001 fa4d 	bl	8005e6c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80049d2:	2200      	movs	r2, #0
 80049d4:	2100      	movs	r1, #0
 80049d6:	2027      	movs	r0, #39	; 0x27
 80049d8:	f001 f97f 	bl	8005cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80049dc:	2027      	movs	r0, #39	; 0x27
 80049de:	f001 f998 	bl	8005d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80049e2:	bf00      	nop
 80049e4:	37a8      	adds	r7, #168	; 0xa8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40004800 	.word	0x40004800
 80049f0:	40023800 	.word	0x40023800
 80049f4:	40020c00 	.word	0x40020c00

080049f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049fc:	e7fe      	b.n	80049fc <NMI_Handler+0x4>

080049fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a02:	e7fe      	b.n	8004a02 <HardFault_Handler+0x4>

08004a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a08:	e7fe      	b.n	8004a08 <MemManage_Handler+0x4>

08004a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a0e:	e7fe      	b.n	8004a0e <BusFault_Handler+0x4>

08004a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a14:	e7fe      	b.n	8004a14 <UsageFault_Handler+0x4>

08004a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a16:	b480      	push	{r7}
 8004a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a1a:	bf00      	nop
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a28:	bf00      	nop
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a32:	b480      	push	{r7}
 8004a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a36:	bf00      	nop
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a44:	f000 fd28 	bl	8005498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a48:	bf00      	nop
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004a50:	4802      	ldr	r0, [pc, #8]	; (8004a5c <USART3_IRQHandler+0x10>)
 8004a52:	f004 fbe3 	bl	800921c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000274 	.word	0x20000274

08004a60 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004a64:	4802      	ldr	r0, [pc, #8]	; (8004a70 <TIM5_IRQHandler+0x10>)
 8004a66:	f003 fa5a 	bl	8007f1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	200001b8 	.word	0x200001b8

08004a74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  return 1;
 8004a78:	2301      	movs	r3, #1
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <_kill>:

int _kill(int pid, int sig)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004a8e:	f005 ff81 	bl	800a994 <__errno>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2216      	movs	r2, #22
 8004a96:	601a      	str	r2, [r3, #0]
  return -1;
 8004a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <_exit>:

void _exit (int status)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004aac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff ffe7 	bl	8004a84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ab6:	e7fe      	b.n	8004ab6 <_exit+0x12>

08004ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ac0:	4a14      	ldr	r2, [pc, #80]	; (8004b14 <_sbrk+0x5c>)
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <_sbrk+0x60>)
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004acc:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <_sbrk+0x64>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ad4:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <_sbrk+0x64>)
 8004ad6:	4a12      	ldr	r2, [pc, #72]	; (8004b20 <_sbrk+0x68>)
 8004ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ada:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <_sbrk+0x64>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d207      	bcs.n	8004af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ae8:	f005 ff54 	bl	800a994 <__errno>
 8004aec:	4603      	mov	r3, r0
 8004aee:	220c      	movs	r2, #12
 8004af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004af6:	e009      	b.n	8004b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004af8:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <_sbrk+0x64>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004afe:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <_sbrk+0x64>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4413      	add	r3, r2
 8004b06:	4a05      	ldr	r2, [pc, #20]	; (8004b1c <_sbrk+0x64>)
 8004b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20050000 	.word	0x20050000
 8004b18:	00000400 	.word	0x00000400
 8004b1c:	200003a0 	.word	0x200003a0
 8004b20:	200004f8 	.word	0x200004f8

08004b24 <_Z18system_constructorP8system_tP11circ_bufferIhLm10EtEP24timeTriggeredScheduler_tP8myUART_tPN5STM324gpioE>:
#define LEN_AUX_BUFFER MAX_PACKET_SIZE_PCIF

static PCIFmsg_t msgWhoAmI = {MSG_WHO_AM_I,sizeof(MSG_WHO_AM_I)-1,whoAmI};

void system_constructor(system_t *me, evBuffer *theEventQueue, timeTriggeredScheduler_t *theTTscheduler, myUART_t *myUART, gpio *ledFailSilent)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
	stateMachine_constructor(&me->super, (stateHandler_t)&system_initial);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4909      	ldr	r1, [pc, #36]	; (8004b5c <_Z18system_constructorP8system_tP11circ_bufferIhLm10EtEP24timeTriggeredScheduler_tP8myUART_tPN5STM324gpioE+0x38>)
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fdb3 	bl	80046a2 <_Z24stateMachine_constructorP14stateMachine_tPF7state_tPvhE>
	me->mEventQueue_ = theEventQueue;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	605a      	str	r2, [r3, #4]
	me->mTTscheduler_ = theTTscheduler;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	609a      	str	r2, [r3, #8]
	me->mMyUART_ = myUART;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	60da      	str	r2, [r3, #12]
	me->mLEDFailSilent_ = ledFailSilent;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	611a      	str	r2, [r3, #16]
}
 8004b54:	bf00      	nop
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	08004b61 	.word	0x08004b61

08004b60 <_Z14system_initialP8system_th>:

state_t system_initial(system_t *me, event_t const e)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]
	// [TODO]: ver si entré acá por el watchdog. En ese caso, se pasaría
	// automáticamente al modo fail-silent

	if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8004b6c:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <_Z14system_initialP8system_th+0x50>)
 8004b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf14      	ite	ne
 8004b78:	2301      	movne	r3, #1
 8004b7a:	2300      	moveq	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00b      	beq.n	8004b9a <_Z14system_initialP8system_th+0x3a>
	{
		__HAL_RCC_CLEAR_RESET_FLAGS();
 8004b82:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <_Z14system_initialP8system_th+0x50>)
 8004b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b86:	4a0a      	ldr	r2, [pc, #40]	; (8004bb0 <_Z14system_initialP8system_th+0x50>)
 8004b88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b8c:	6753      	str	r3, [r2, #116]	; 0x74
		return stateMachine_transition((stateMachine_t*)me, (stateHandler_t) system_fail_safe_mode);
 8004b8e:	4909      	ldr	r1, [pc, #36]	; (8004bb4 <_Z14system_initialP8system_th+0x54>)
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff fdc9 	bl	8004728 <_Z23stateMachine_transitionP14stateMachine_tPF7state_tPvhE>
 8004b96:	4603      	mov	r3, r0
 8004b98:	e005      	b.n	8004ba6 <_Z14system_initialP8system_th+0x46>
	}

	return stateMachine_transition((stateMachine_t*)me, (stateHandler_t) system_idle);
 8004b9a:	4907      	ldr	r1, [pc, #28]	; (8004bb8 <_Z14system_initialP8system_th+0x58>)
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff fdc3 	bl	8004728 <_Z23stateMachine_transitionP14stateMachine_tPF7state_tPvhE>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	bf00      	nop
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	08004d99 	.word	0x08004d99
 8004bb8:	08004bbd 	.word	0x08004bbd

08004bbc <_Z11system_idleP8system_th>:


state_t system_idle(system_t *me, event_t const e)
{
 8004bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bbe:	b0a1      	sub	sp, #132	; 0x84
 8004bc0:	af08      	add	r7, sp, #32
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	70fb      	strb	r3, [r7, #3]
	uint8_t msgCmd;
	uint32_t auxLenMsg;
	PCIFmsg_t auxPCIFmsg;
	uint16_t bytesRead;

	switch(e)
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	2b07      	cmp	r3, #7
 8004bce:	f200 80da 	bhi.w	8004d86 <_Z11system_idleP8system_th+0x1ca>
 8004bd2:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <_Z11system_idleP8system_th+0x1c>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004bf9 	.word	0x08004bf9
 8004bdc:	08004d87 	.word	0x08004d87
 8004be0:	08004d87 	.word	0x08004d87
 8004be4:	08004c07 	.word	0x08004c07
 8004be8:	08004d23 	.word	0x08004d23
 8004bec:	08004d87 	.word	0x08004d87
 8004bf0:	08004d87 	.word	0x08004d87
 8004bf4:	08004d71 	.word	0x08004d71
	{
		case EV_ENTRY:
			// Se habilita la interrupción por UART, para recibir mensajes y
			// actuar en consecuencia
			myUART_enable_rx(me->mMyUART_);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fc1d 	bl	800443c <myUART_enable_rx>
			return HANDLED;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e0c0      	b.n	8004d88 <_Z11system_idleP8system_th+0x1cc>

		case EV_SYSTEM_NEW_MSG:

			myUART_disable_rx(me->mMyUART_);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff fc2f 	bl	800446e <myUART_disable_rx>

			// Se lee el primer byte. Este contiene info acerca de cuántos bytes tiene el mensaje
			if( (bytesRead = myUART_read(me->mMyUART_,&msgLen, 1)) != 1 )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8004c18:	2201      	movs	r2, #1
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff fc3d 	bl	800449a <myUART_read>
 8004c20:	4603      	mov	r3, r0
 8004c22:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004c26:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	bf14      	ite	ne
 8004c2e:	2301      	movne	r3, #1
 8004c30:	2300      	moveq	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d006      	beq.n	8004c46 <_Z11system_idleP8system_th+0x8a>
			{
				myUART_enable_rx(me->mMyUART_);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff fbfd 	bl	800443c <myUART_enable_rx>
				return IGNORED;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e0a0      	b.n	8004d88 <_Z11system_idleP8system_th+0x1cc>
			}

			auxBuffer[0] = msgLen;
 8004c46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c4a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

			// Se lee el resto de bytes de la uart
			if(msgLen > 1)
 8004c4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d95e      	bls.n	8004d14 <_Z11system_idleP8system_th+0x158>
			{
				if( myUART_read_blocking(me->mMyUART_, &auxBuffer[1], msgLen-1) != 0 )
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68d8      	ldr	r0, [r3, #12]
 8004c5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004c68:	3301      	adds	r3, #1
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	f7ff fc40 	bl	80044f0 <myUART_read_blocking>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	bf14      	ite	ne
 8004c76:	2301      	movne	r3, #1
 8004c78:	2300      	moveq	r3, #0
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d006      	beq.n	8004c8e <_Z11system_idleP8system_th+0xd2>
				{
					myUART_enable_rx(me->mMyUART_);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fbd9 	bl	800443c <myUART_enable_rx>
					return IGNORED;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e07c      	b.n	8004d88 <_Z11system_idleP8system_th+0x1cc>
				}

				bytesRead += msgLen-1;
 8004c8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c98:	4413      	add	r3, r2
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

				//bytesRead += myUART_read(me->mMyUART_,&auxBuffer[1], msgLen-1);
				if(bytesRead == msgLen)
 8004ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d131      	bne.n	8004d14 <_Z11system_idleP8system_th+0x158>
				{
					// Se procesa el comando
					msgCmd = auxBuffer[1];
 8004cb0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004cb4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
					switch(msgCmd)
 8004cb8:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d026      	beq.n	8004d0e <_Z11system_idleP8system_th+0x152>
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	dc26      	bgt.n	8004d12 <_Z11system_idleP8system_th+0x156>
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d002      	beq.n	8004cce <_Z11system_idleP8system_th+0x112>
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d019      	beq.n	8004d00 <_Z11system_idleP8system_th+0x144>
						case getFloatSize:
							//aux = sizeof(float);
							break;

						default:
							break;
 8004ccc:	e021      	b.n	8004d12 <_Z11system_idleP8system_th+0x156>
							me->mTxBuffer_.write(msgWhoAmI);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f103 0c14 	add.w	ip, r3, #20
 8004cd4:	4e2e      	ldr	r6, [pc, #184]	; (8004d90 <_Z11system_idleP8system_th+0x1d4>)
 8004cd6:	466d      	mov	r5, sp
 8004cd8:	f106 040c 	add.w	r4, r6, #12
 8004cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ce0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004ce4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004ce8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004cec:	4660      	mov	r0, ip
 8004cee:	f000 f887 	bl	8004e00 <_ZN11circ_bufferI9PCIFmsg_tLm8EtE5writeES0_>
							me->mEventQueue_->write(EV_SYSTEM_SEND_MSG);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2105      	movs	r1, #5
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff f9e9 	bl	80040d0 <_ZN11circ_bufferIhLm10EtE5writeEh>
							break;
 8004cfe:	e009      	b.n	8004d14 <_Z11system_idleP8system_th+0x158>
							me->mEventQueue_->write(EV_SET_NORMAL_MODE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2108      	movs	r1, #8
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff f9e2 	bl	80040d0 <_ZN11circ_bufferIhLm10EtE5writeEh>
							break;
 8004d0c:	e002      	b.n	8004d14 <_Z11system_idleP8system_th+0x158>
							break;
 8004d0e:	bf00      	nop
 8004d10:	e000      	b.n	8004d14 <_Z11system_idleP8system_th+0x158>
							break;
 8004d12:	bf00      	nop
					}
				}
			}

			myUART_enable_rx(me->mMyUART_);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff fb8f 	bl	800443c <myUART_enable_rx>
			return HANDLED;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e032      	b.n	8004d88 <_Z11system_idleP8system_th+0x1cc>

		case EV_SYSTEM_SEND_MSG:
			if(!me->mTxBuffer_.is_empty())
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3314      	adds	r3, #20
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f8d1 	bl	8004ece <_ZN11circ_bufferI9PCIFmsg_tLm8EtE8is_emptyEv>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f083 0301 	eor.w	r3, r3, #1
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d019      	beq.n	8004d6c <_Z11system_idleP8system_th+0x1b0>
			{
				me->mTxBuffer_.read(&auxPCIFmsg);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3314      	adds	r3, #20
 8004d3c:	f107 0208 	add.w	r2, r7, #8
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f8d0 	bl	8004ee8 <_ZN11circ_bufferI9PCIFmsg_tLm8EtE4readEPS0_>
				PCIFmsg_to_bytes(&auxPCIFmsg, auxBuffer, LEN_AUX_BUFFER, &auxLenMsg);
 8004d48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d4c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004d50:	f107 0008 	add.w	r0, r7, #8
 8004d54:	2222      	movs	r2, #34	; 0x22
 8004d56:	f7fb fca7 	bl	80006a8 <_Z16PCIFmsg_to_bytesP9PCIFmsg_tPhmPm>
				myUART_send(me->mMyUART_, auxBuffer, auxLenMsg);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d60:	b292      	uxth	r2, r2
 8004d62:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fbe2 	bl	8004530 <myUART_send>
			}

			return HANDLED;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e00b      	b.n	8004d88 <_Z11system_idleP8system_th+0x1cc>

		case EV_SET_NORMAL_MODE:
			myUART_disable_rx(me->mMyUART_);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff fb7a 	bl	800446e <myUART_disable_rx>
			return stateMachine_transition((stateMachine_t*)me, (stateHandler_t) system_normal_mode);
 8004d7a:	4906      	ldr	r1, [pc, #24]	; (8004d94 <_Z11system_idleP8system_th+0x1d8>)
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff fcd3 	bl	8004728 <_Z23stateMachine_transitionP14stateMachine_tPF7state_tPvhE>
 8004d82:	4603      	mov	r3, r0
 8004d84:	e000      	b.n	8004d88 <_Z11system_idleP8system_th+0x1cc>
	}
	return IGNORED;
 8004d86:	2301      	movs	r3, #1
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3764      	adds	r7, #100	; 0x64
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d90:	2000006c 	.word	0x2000006c
 8004d94:	08004db3 	.word	0x08004db3

08004d98 <_Z21system_fail_safe_modeP8system_th>:

state_t system_fail_safe_mode(system_t *me, event_t const e)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	70fb      	strb	r3, [r7, #3]
	me->mLEDFailSilent_->write(GPIO_ST::HIGH);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	2101      	movs	r1, #1
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fb fd62 	bl	8000874 <_ZN5STM324gpio5writeE7GPIO_ST>

	while(1)
 8004db0:	e7fe      	b.n	8004db0 <_Z21system_fail_safe_modeP8system_th+0x18>

08004db2 <_Z18system_normal_modeP8system_th>:
	return IGNORED;
}


state_t system_normal_mode(system_t *me, event_t const e)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	70fb      	strb	r3, [r7, #3]
	switch(e)
 8004dbe:	78fb      	ldrb	r3, [r7, #3]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d10a      	bne.n	8004dda <_Z18system_normal_modeP8system_th+0x28>
	{
		case EV_ENTRY:
			// Al entrar acá, el sistema ejecuta el scheduler y se bloquea en un
			// loop infinito

			timeTriggeredScheduler_start(me->mTTscheduler_);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fa27 	bl	800521c <_Z28timeTriggeredScheduler_startP24timeTriggeredScheduler_t>

			while(1)
			{
				timeTriggeredScheduler_dispatch(me->mTTscheduler_);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fa4b 	bl	800526e <_Z31timeTriggeredScheduler_dispatchP24timeTriggeredScheduler_t>
 8004dd8:	e7f9      	b.n	8004dce <_Z18system_normal_modeP8system_th+0x1c>
			}

			return stateMachine_transition((stateMachine_t*)me, (stateHandler_t) system_idle);
	}

	return IGNORED;
 8004dda:	2301      	movs	r3, #1
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <_Z18system_has_new_msgP8system_t>:


uint16_t system_has_new_msg(system_t *me)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
	return myUART_bytes_in_rx_buffer(me->mMyUART_);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff fbb8 	bl	8004566 <myUART_bytes_in_rx_buffer>
 8004df6:	4603      	mov	r3, r0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <_ZN11circ_bufferI9PCIFmsg_tLm8EtE5writeES0_>:
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::write(bufferDataType data)
 8004e00:	b084      	sub	sp, #16
 8004e02:	b4b0      	push	{r4, r5, r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	f107 001c 	add.w	r0, r7, #28
 8004e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
            mBuffer_[mHead_] = data;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8004e18:	4619      	mov	r1, r3
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	4413      	add	r3, r2
 8004e26:	1d1c      	adds	r4, r3, #4
 8004e28:	f107 051c 	add.w	r5, r7, #28
 8004e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e34:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004e38:	e884 0003 	stmia.w	r4, {r0, r1}
            mEmpty_ = false;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
            if(++mHead_ == sCapacity_){
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	bf0c      	ite	eq
 8004e5e:	2301      	moveq	r3, #1
 8004e60:	2300      	movne	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <_ZN11circ_bufferI9PCIFmsg_tLm8EtE5writeES0_+0x70>
                mHead_ = 0;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
            if(mFull_ == true){
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d10f      	bne.n	8004e9a <_ZN11circ_bufferI9PCIFmsg_tLm8EtE5writeES0_+0x9a>
                mTail_ = mTail_ + 1 == sCapacity_ ? 0 : mTail_ + 1; // mTail_ = ++mTail_ == sCapacity_ ? 0 : mTail_;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 8004e80:	2b07      	cmp	r3, #7
 8004e82:	d005      	beq.n	8004e90 <_ZN11circ_bufferI9PCIFmsg_tLm8EtE5writeES0_+0x90>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	e000      	b.n	8004e92 <_ZN11circ_bufferI9PCIFmsg_tLm8EtE5writeES0_+0x92>
 8004e90:	2200      	movs	r2, #0
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
 8004e98:	e012      	b.n	8004ec0 <_ZN11circ_bufferI9PCIFmsg_tLm8EtE5writeES0_+0xc0>
            }else if(++mSize_ == sCapacity_){
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	801a      	strh	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	bf0c      	ite	eq
 8004eae:	2301      	moveq	r3, #1
 8004eb0:	2300      	movne	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <_ZN11circ_bufferI9PCIFmsg_tLm8EtE5writeES0_+0xc0>
                mFull_ = true;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
            return EXIT_OK;
 8004ec0:	2301      	movs	r3, #1
        }
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bcb0      	pop	{r4, r5, r7}
 8004eca:	b004      	add	sp, #16
 8004ecc:	4770      	bx	lr

08004ece <_ZN11circ_bufferI9PCIFmsg_tLm8EtE8is_emptyEv>:
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::is_empty(){
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
            return mEmpty_;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
        }
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <_ZN11circ_bufferI9PCIFmsg_tLm8EtE4readEPS0_>:
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::read(bufferDataType* pData)
 8004ee8:	b4b0      	push	{r4, r5, r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
            if (mEmpty_){
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <_ZN11circ_bufferI9PCIFmsg_tLm8EtE4readEPS0_+0x18>
                return EXIT_ERROR;
 8004efc:	2300      	movs	r3, #0
 8004efe:	e042      	b.n	8004f86 <_ZN11circ_bufferI9PCIFmsg_tLm8EtE4readEPS0_+0x9e>
            *pData = mBuffer_[mTail_];
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 8004f06:	4619      	mov	r1, r3
 8004f08:	6838      	ldr	r0, [r7, #0]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	4413      	add	r3, r2
 8004f16:	4605      	mov	r5, r0
 8004f18:	1d1c      	adds	r4, r3, #4
 8004f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f26:	e885 0003 	stmia.w	r5, {r0, r1}
            mFull_ = false;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
            if(--mSize_ == 0){
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	801a      	strh	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	bf0c      	ite	eq
 8004f46:	2301      	moveq	r3, #1
 8004f48:	2300      	movne	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <_ZN11circ_bufferI9PCIFmsg_tLm8EtE4readEPS0_+0x70>
                mEmpty_ = true;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
            if(++mTail_ == sCapacity_){
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 8004f5e:	3301      	adds	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	bf0c      	ite	eq
 8004f72:	2301      	moveq	r3, #1
 8004f74:	2300      	movne	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <_ZN11circ_bufferI9PCIFmsg_tLm8EtE4readEPS0_+0x9c>
                mTail_ = 0;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
            return EXIT_OK;
 8004f84:	2301      	movs	r3, #1
        }
 8004f86:	4618      	mov	r0, r3
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bcb0      	pop	{r4, r5, r7}
 8004f8e:	4770      	bx	lr

08004f90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f94:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <SystemInit+0x20>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9a:	4a05      	ldr	r2, [pc, #20]	; (8004fb0 <SystemInit+0x20>)
 8004f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004fa4:	bf00      	nop
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	e000ed00 	.word	0xe000ed00

08004fb4 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>:

#include "taskCNIsendData.h"
#include "CNI.h"

void taskCNIsendData_constructor(taskCNIsendData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af04      	add	r7, sp, #16
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskCNIsendData_update, (taskHandler_t)&taskCNIsendData_start, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	9302      	str	r3, [sp, #8]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	9301      	str	r3, [sp, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4a05      	ldr	r2, [pc, #20]	; (8004fe8 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm+0x34>)
 8004fd4:	4905      	ldr	r1, [pc, #20]	; (8004fec <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm+0x38>)
 8004fd6:	f000 f9d8 	bl	800538a <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvES3_mmmm>

	me->mHandleMsg_ = handleMsg;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	619a      	str	r2, [r3, #24]
}
 8004fe0:	bf00      	nop
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	08004ff1 	.word	0x08004ff1
 8004fec:	08005005 	.word	0x08005005

08004ff0 <_Z21taskCNIsendData_startP17taskCNIsendData_t>:
	//TODO: hay que hacer que si uno llama a la tarea nuevamente, la tarea simplemente no haga nada.
	timeTriggeredTask_destructor(&me->super);
}

void taskCNIsendData_start(taskCNIsendData_t *me)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	//TODO: acá podría uno decirle a la CNI que se va a encargar de enviar el mensaje
	// asociado al handleMsg.
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <_Z22taskCNIsendData_updateP17taskCNIsendData_t>:

void taskCNIsendData_update(taskCNIsendData_t *me)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
	CNI_send_msg(me->mHandleMsg_);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	4618      	mov	r0, r3
 8005012:	f7fb fab9 	bl	8000588 <_Z12CNI_send_msgm>
}
 8005016:	bf00      	nop
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>:
 */

#include "taskHeartbeat.h"

void taskHeartbeat_constructor(taskHeartbeat_t *me , uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, gpio *led)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af04      	add	r7, sp, #16
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskHeartbeat_update, (taskHandler_t)&taskHeartbeat_start, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	9302      	str	r3, [sp, #8]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4a05      	ldr	r2, [pc, #20]	; (8005054 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE+0x34>)
 8005040:	4905      	ldr	r1, [pc, #20]	; (8005058 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE+0x38>)
 8005042:	f000 f9a2 	bl	800538a <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvES3_mmmm>
	me->mLED_ = led;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	619a      	str	r2, [r3, #24]
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	0800505d 	.word	0x0800505d
 8005058:	08005079 	.word	0x08005079

0800505c <_Z19taskHeartbeat_startP15taskHeartbeat_t>:
	me->mLED_->write(GPIO_ST::LOW);
	timeTriggeredTask_destructor(&me->super);
}

void taskHeartbeat_start(taskHeartbeat_t *me)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
	me->mLED_->write(GPIO_ST::LOW);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	2100      	movs	r1, #0
 800506a:	4618      	mov	r0, r3
 800506c:	f7fb fc02 	bl	8000874 <_ZN5STM324gpio5writeE7GPIO_ST>
}
 8005070:	bf00      	nop
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <_Z20taskHeartbeat_updateP15taskHeartbeat_t>:

void taskHeartbeat_update(taskHeartbeat_t *me)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
	me->mLED_->toggle();
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	4618      	mov	r0, r3
 8005086:	f7fb fbe5 	bl	8000854 <_ZN5STM324gpio6toggleEv>
}
 800508a:	bf00      	nop
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688E>:
 */

#include "taskIMUgetData.h"

void taskIMUgetData_constructor(taskIMUgetData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, ICM42688::icm42688 *imu)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af04      	add	r7, sp, #16
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskIMUgetData_update, (taskHandler_t)&taskIMUgetData_start, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	9302      	str	r3, [sp, #8]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4a05      	ldr	r2, [pc, #20]	; (80050c8 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688E+0x34>)
 80050b4:	4905      	ldr	r1, [pc, #20]	; (80050cc <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688E+0x38>)
 80050b6:	f000 f968 	bl	800538a <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvES3_mmmm>

	me->mIMU_ = imu;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	619a      	str	r2, [r3, #24]
}
 80050c0:	bf00      	nop
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	080050d1 	.word	0x080050d1
 80050cc:	080050e5 	.word	0x080050e5

080050d0 <_Z20taskIMUgetData_startP16taskIMUgetData_t>:

	timeTriggeredTask_destructor(&me->super);
}

void taskIMUgetData_start(taskIMUgetData_t *me)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	// Por ahora no hace nada
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <_Z21taskIMUgetData_updateP16taskIMUgetData_t>:

void taskIMUgetData_update(taskIMUgetData_t *me)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	me->mIMU_->save_data();
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699a      	ldr	r2, [r3, #24]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4610      	mov	r0, r2
 80050fa:	4798      	blx	r3
	me->mIMU_->read_data(&(me->mIMUdata_));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6998      	ldr	r0, [r3, #24]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3310      	adds	r3, #16
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	321c      	adds	r2, #28
 800510e:	4611      	mov	r1, r2
 8005110:	4798      	blx	r3
}
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>:
 */

#include "taskWatchdog.h"

void taskWatchdog_constructor(taskWatchdog_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, IWDG_HandleTypeDef *hiwdg)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af04      	add	r7, sp, #16
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskWatchdog_update, (taskHandler_t)&taskWatchdog_start, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	9302      	str	r3, [sp, #8]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4a05      	ldr	r2, [pc, #20]	; (8005150 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x34>)
 800513c:	4905      	ldr	r1, [pc, #20]	; (8005154 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x38>)
 800513e:	f000 f924 	bl	800538a <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvES3_mmmm>
	me->mHiwdg_ = hiwdg;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	69fa      	ldr	r2, [r7, #28]
 8005146:	619a      	str	r2, [r3, #24]
}
 8005148:	bf00      	nop
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	08005159 	.word	0x08005159
 8005154:	08005173 	.word	0x08005173

08005158 <_Z18taskWatchdog_startP14taskWatchdog_t>:
{
	timeTriggeredTask_destructor(&me->super);
}

void taskWatchdog_start(taskWatchdog_t *me)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Init(me->mHiwdg_);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	4618      	mov	r0, r3
 8005166:	f001 f860 	bl	800622a <HAL_IWDG_Init>
}
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <_Z19taskWatchdog_updateP14taskWatchdog_t>:

void taskWatchdog_update(taskWatchdog_t *me)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(me->mHiwdg_);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	4618      	mov	r0, r3
 8005180:	f001 f8a2 	bl	80062c8 <HAL_IWDG_Refresh>
}
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <_ZL27timeTriggeredScheduler_tickP24timeTriggeredScheduler_tP9myTimer_t>:
 */

#include "timeTriggeredScheduler.h"

static void timeTriggeredScheduler_tick(timeTriggeredScheduler_t *me, myTimer_t *timer)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
	me->mTicks_++;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	605a      	str	r2, [r3, #4]
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <_Z34timeTriggeredScheduler_constructorP24timeTriggeredScheduler_tP9myTimer_t>:

void timeTriggeredScheduler_constructor(timeTriggeredScheduler_t *me, myTimer_t *timer)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
	uint32_t i;

	me->mTimer_ = timer;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	601a      	str	r2, [r3, #0]

	for(i = 0; i < MAX_NUM_TASKS ; i++)
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	e008      	b.n	80051d4 <_Z34timeTriggeredScheduler_constructorP24timeTriggeredScheduler_tP9myTimer_t+0x28>
	{
		me->mTaskList_[i] = 0;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	3202      	adds	r2, #2
 80051c8:	2100      	movs	r1, #0
 80051ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(i = 0; i < MAX_NUM_TASKS ; i++)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3301      	adds	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b09      	cmp	r3, #9
 80051d8:	d9f3      	bls.n	80051c2 <_Z34timeTriggeredScheduler_constructorP24timeTriggeredScheduler_tP9myTimer_t+0x16>
	}

	me->mTicks_ = 0;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	605a      	str	r2, [r3, #4]
}
 80051e0:	bf00      	nop
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <_Z27timeTriggeredScheduler_initP24timeTriggeredScheduler_t>:

void timeTriggeredScheduler_init(timeTriggeredScheduler_t *me)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(me->mTimer_->mHtim_);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	4618      	mov	r0, r3
 80051fc:	f002 fe60 	bl	8007ec0 <HAL_TIM_Base_Stop_IT>
	subject_attach((subject_t*)(me->mTimer_), me, (notificationHandle_t)&timeTriggeredScheduler_tick);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a04      	ldr	r2, [pc, #16]	; (8005218 <_Z27timeTriggeredScheduler_initP24timeTriggeredScheduler_t+0x2c>)
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff f9eb 	bl	80045e4 <_Z14subject_attachP11__subject_tPvPFvS1_S0_E>
}
 800520e:	bf00      	nop
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	0800518d 	.word	0x0800518d

0800521c <_Z28timeTriggeredScheduler_startP24timeTriggeredScheduler_t>:

void timeTriggeredScheduler_start(timeTriggeredScheduler_t *me)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
	uint32_t i;
	timeTriggeredTask_t *task;

	for(i = 0; i < MAX_NUM_TASKS; i++)
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	e014      	b.n	8005254 <_Z28timeTriggeredScheduler_startP24timeTriggeredScheduler_t+0x38>
	{
		if( (task = me->mTaskList_[i]) )
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	3202      	adds	r2, #2
 8005230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	bf14      	ite	ne
 800523c:	2301      	movne	r3, #1
 800523e:	2300      	moveq	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <_Z28timeTriggeredScheduler_startP24timeTriggeredScheduler_t+0x32>
		{
			(*(task->mHandlerStart_))(task);
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68b8      	ldr	r0, [r7, #8]
 800524c:	4798      	blx	r3
	for(i = 0; i < MAX_NUM_TASKS; i++)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3301      	adds	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b09      	cmp	r3, #9
 8005258:	d9e7      	bls.n	800522a <_Z28timeTriggeredScheduler_startP24timeTriggeredScheduler_t+0xe>
		}
	}
	HAL_TIM_Base_Start_IT(me->mTimer_->mHtim_);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	4618      	mov	r0, r3
 8005262:	f002 fdb5 	bl	8007dd0 <HAL_TIM_Base_Start_IT>
}
 8005266:	bf00      	nop
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <_Z31timeTriggeredScheduler_dispatchP24timeTriggeredScheduler_t>:
{
	HAL_TIM_Base_Stop_IT(me->mTimer_->mHtim_);
}

void timeTriggeredScheduler_dispatch(timeTriggeredScheduler_t *me)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b086      	sub	sp, #24
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
	uint8_t updateRequired = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 800527a:	b672      	cpsid	i
}
 800527c:	bf00      	nop
	uint32_t i;
	timeTriggeredTask_t *task;

	__disable_irq();
	if(me->mTicks_ > 0)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	bf14      	ite	ne
 8005286:	2301      	movne	r3, #1
 8005288:	2300      	moveq	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d006      	beq.n	800529e <_Z31timeTriggeredScheduler_dispatchP24timeTriggeredScheduler_t+0x30>
	{
		me->mTicks_--;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	1e5a      	subs	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	605a      	str	r2, [r3, #4]
		updateRequired = 1;
 800529a:	2301      	movs	r3, #1
 800529c:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 800529e:	b662      	cpsie	i
}
 80052a0:	bf00      	nop
	}
	__enable_irq();

	while(updateRequired)
 80052a2:	e043      	b.n	800532c <_Z31timeTriggeredScheduler_dispatchP24timeTriggeredScheduler_t+0xbe>
	{
		for(i = 0; i < MAX_NUM_TASKS; i++)
 80052a4:	2300      	movs	r3, #0
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	e026      	b.n	80052f8 <_Z31timeTriggeredScheduler_dispatchP24timeTriggeredScheduler_t+0x8a>
		{
			if((task = me->mTaskList_[i]))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	3202      	adds	r2, #2
 80052b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	bf14      	ite	ne
 80052bc:	2301      	movne	r3, #1
 80052be:	2300      	moveq	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d015      	beq.n	80052f2 <_Z31timeTriggeredScheduler_dispatchP24timeTriggeredScheduler_t+0x84>
			{
				//if( (--(me->mTaskList_[i]->mDelayTicks_)) == 0 )
				if( (--(task->mDelayTicks_)) == 0 )
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	1e5a      	subs	r2, r3, #1
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	609a      	str	r2, [r3, #8]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <_Z31timeTriggeredScheduler_dispatchP24timeTriggeredScheduler_t+0x84>
				{
					//timeTriggeredTask_update((timeTriggeredTask_t*)(me->mTaskList_[i]));
					(*(task->mTaskHandler_))(task);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	4798      	blx	r3
					//me->mTaskList_[i]->mDelayTicks_ = me->mTaskList_[i]->mPeriodTicks_;
					task->mDelayTicks_ = task->mPeriodTicks_;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	609a      	str	r2, [r3, #8]
		for(i = 0; i < MAX_NUM_TASKS; i++)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	3301      	adds	r3, #1
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b09      	cmp	r3, #9
 80052fc:	d9d5      	bls.n	80052aa <_Z31timeTriggeredScheduler_dispatchP24timeTriggeredScheduler_t+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 80052fe:	b672      	cpsid	i
}
 8005300:	bf00      	nop
			}
		}

		__disable_irq();

		if(me->mTicks_ > 0)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	bf14      	ite	ne
 800530a:	2301      	movne	r3, #1
 800530c:	2300      	moveq	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d007      	beq.n	8005324 <_Z31timeTriggeredScheduler_dispatchP24timeTriggeredScheduler_t+0xb6>
		{
			me->mTicks_--;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	1e5a      	subs	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	605a      	str	r2, [r3, #4]
			updateRequired = 1;
 800531e:	2301      	movs	r3, #1
 8005320:	75fb      	strb	r3, [r7, #23]
 8005322:	e001      	b.n	8005328 <_Z31timeTriggeredScheduler_dispatchP24timeTriggeredScheduler_t+0xba>
		}
		else
		{
			updateRequired = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8005328:	b662      	cpsie	i
}
 800532a:	bf00      	nop
	while(updateRequired)
 800532c:	7dfb      	ldrb	r3, [r7, #23]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1b8      	bne.n	80052a4 <_Z31timeTriggeredScheduler_dispatchP24timeTriggeredScheduler_t+0x36>
		}

		__enable_irq();
	}
	__asm__("wfi");
 8005332:	bf30      	wfi
}
 8005334:	bf00      	nop
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <_Z31timeTriggeredScheduler_add_taskP24timeTriggeredScheduler_tP19timeTriggeredTask_t>:

TTschStatus_t timeTriggeredScheduler_add_task(timeTriggeredScheduler_t *me, timeTriggeredTask_t *task)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]

	while( (me->mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 800534a:	e002      	b.n	8005352 <_Z31timeTriggeredScheduler_add_taskP24timeTriggeredScheduler_tP19timeTriggeredTask_t+0x16>
	{
		i++;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3301      	adds	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]
	while( (me->mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	3202      	adds	r2, #2
 8005358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <_Z31timeTriggeredScheduler_add_taskP24timeTriggeredScheduler_tP19timeTriggeredTask_t+0x2a>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b09      	cmp	r3, #9
 8005364:	d9f2      	bls.n	800534c <_Z31timeTriggeredScheduler_add_taskP24timeTriggeredScheduler_tP19timeTriggeredTask_t+0x10>
	}

	if(i == MAX_NUM_TASKS)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b0a      	cmp	r3, #10
 800536a:	d101      	bne.n	8005370 <_Z31timeTriggeredScheduler_add_taskP24timeTriggeredScheduler_tP19timeTriggeredTask_t+0x34>
	{
		return TTsch_ERROR_MAX_TASKS_REACHED;
 800536c:	2301      	movs	r3, #1
 800536e:	e006      	b.n	800537e <_Z31timeTriggeredScheduler_add_taskP24timeTriggeredScheduler_tP19timeTriggeredTask_t+0x42>
	}

	me->mTaskList_[i] = task;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	3202      	adds	r2, #2
 8005376:	6839      	ldr	r1, [r7, #0]
 8005378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return TTsch_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvES3_mmmm>:
 */

#include "timeTriggeredTask.h"

void timeTriggeredTask_constructor(timeTriggeredTask_t *me, taskHandler_t taskHandler, taskHandler_t handlerStart, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds)
{
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	607a      	str	r2, [r7, #4]
 8005396:	603b      	str	r3, [r7, #0]
	me->mTaskHandler_ = taskHandler;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	605a      	str	r2, [r3, #4]
	me->mHandlerStart_ = handlerStart;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	601a      	str	r2, [r3, #0]

	me->mDelayTicks_ = delayTicks + 1;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	609a      	str	r2, [r3, #8]
	me->mPeriodTicks_ = periodTicks;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	60da      	str	r2, [r3, #12]
	me->mWcetMicroSeconds_ = wcetMicroSeconds;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	611a      	str	r2, [r3, #16]
	me->mBcetMicroSeconds_ = bcetMicroSeconds;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a3a      	ldr	r2, [r7, #32]
 80053bc:	615a      	str	r2, [r3, #20]
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
	...

080053cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80053cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80053d0:	480d      	ldr	r0, [pc, #52]	; (8005408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80053d2:	490e      	ldr	r1, [pc, #56]	; (800540c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80053d4:	4a0e      	ldr	r2, [pc, #56]	; (8005410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80053d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053d8:	e002      	b.n	80053e0 <LoopCopyDataInit>

080053da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053de:	3304      	adds	r3, #4

080053e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053e4:	d3f9      	bcc.n	80053da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053e6:	4a0b      	ldr	r2, [pc, #44]	; (8005414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80053e8:	4c0b      	ldr	r4, [pc, #44]	; (8005418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80053ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053ec:	e001      	b.n	80053f2 <LoopFillZerobss>

080053ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053f0:	3204      	adds	r2, #4

080053f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053f4:	d3fb      	bcc.n	80053ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80053f6:	f7ff fdcb 	bl	8004f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053fa:	f005 fad1 	bl	800a9a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053fe:	f7fe f9a5 	bl	800374c <main>
  bx  lr    
 8005402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005404:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800540c:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8005410:	0800abbc 	.word	0x0800abbc
  ldr r2, =_sbss
 8005414:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8005418:	200004f4 	.word	0x200004f4

0800541c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800541c:	e7fe      	b.n	800541c <ADC_IRQHandler>

0800541e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005422:	2003      	movs	r0, #3
 8005424:	f000 fc4e 	bl	8005cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005428:	2000      	movs	r0, #0
 800542a:	f000 f805 	bl	8005438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800542e:	f7ff f98b 	bl	8004748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005440:	4b12      	ldr	r3, [pc, #72]	; (800548c <HAL_InitTick+0x54>)
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	4b12      	ldr	r3, [pc, #72]	; (8005490 <HAL_InitTick+0x58>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	4619      	mov	r1, r3
 800544a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800544e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005452:	fbb2 f3f3 	udiv	r3, r2, r3
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fc69 	bl	8005d2e <HAL_SYSTICK_Config>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e00e      	b.n	8005484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b0f      	cmp	r3, #15
 800546a:	d80a      	bhi.n	8005482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800546c:	2200      	movs	r2, #0
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005474:	f000 fc31 	bl	8005cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005478:	4a06      	ldr	r2, [pc, #24]	; (8005494 <HAL_InitTick+0x5c>)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	e000      	b.n	8005484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
}
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20000094 	.word	0x20000094
 8005490:	2000009c 	.word	0x2000009c
 8005494:	20000098 	.word	0x20000098

08005498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800549c:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <HAL_IncTick+0x20>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	4b06      	ldr	r3, [pc, #24]	; (80054bc <HAL_IncTick+0x24>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4413      	add	r3, r2
 80054a8:	4a04      	ldr	r2, [pc, #16]	; (80054bc <HAL_IncTick+0x24>)
 80054aa:	6013      	str	r3, [r2, #0]
}
 80054ac:	bf00      	nop
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	2000009c 	.word	0x2000009c
 80054bc:	200003a4 	.word	0x200003a4

080054c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  return uwTick;
 80054c4:	4b03      	ldr	r3, [pc, #12]	; (80054d4 <HAL_GetTick+0x14>)
 80054c6:	681b      	ldr	r3, [r3, #0]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	200003a4 	.word	0x200003a4

080054d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e0ed      	b.n	80056c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d102      	bne.n	80054fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7ff f94a 	bl	8004790 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800550c:	f7ff ffd8 	bl	80054c0 <HAL_GetTick>
 8005510:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005512:	e012      	b.n	800553a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005514:	f7ff ffd4 	bl	80054c0 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b0a      	cmp	r3, #10
 8005520:	d90b      	bls.n	800553a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2205      	movs	r2, #5
 8005532:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e0c5      	b.n	80056c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0e5      	beq.n	8005514 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0202 	bic.w	r2, r2, #2
 8005556:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005558:	f7ff ffb2 	bl	80054c0 <HAL_GetTick>
 800555c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800555e:	e012      	b.n	8005586 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005560:	f7ff ffae 	bl	80054c0 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b0a      	cmp	r3, #10
 800556c:	d90b      	bls.n	8005586 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2205      	movs	r2, #5
 800557e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e09f      	b.n	80056c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e5      	bne.n	8005560 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	7e1b      	ldrb	r3, [r3, #24]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d108      	bne.n	80055ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	e007      	b.n	80055be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	7e5b      	ldrb	r3, [r3, #25]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d108      	bne.n	80055d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	e007      	b.n	80055e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	7e9b      	ldrb	r3, [r3, #26]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d108      	bne.n	8005602 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0220 	orr.w	r2, r2, #32
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	e007      	b.n	8005612 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0220 	bic.w	r2, r2, #32
 8005610:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	7edb      	ldrb	r3, [r3, #27]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d108      	bne.n	800562c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0210 	bic.w	r2, r2, #16
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	e007      	b.n	800563c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0210 	orr.w	r2, r2, #16
 800563a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	7f1b      	ldrb	r3, [r3, #28]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d108      	bne.n	8005656 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0208 	orr.w	r2, r2, #8
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	e007      	b.n	8005666 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0208 	bic.w	r2, r2, #8
 8005664:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	7f5b      	ldrb	r3, [r3, #29]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d108      	bne.n	8005680 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0204 	orr.w	r2, r2, #4
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	e007      	b.n	8005690 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0204 	bic.w	r2, r2, #4
 800568e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	ea42 0103 	orr.w	r1, r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	1e5a      	subs	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056e6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80056e8:	7cfb      	ldrb	r3, [r7, #19]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d003      	beq.n	80056f6 <HAL_CAN_ConfigFilter+0x26>
 80056ee:	7cfb      	ldrb	r3, [r7, #19]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	f040 80be 	bne.w	8005872 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80056f6:	4b65      	ldr	r3, [pc, #404]	; (800588c <HAL_CAN_ConfigFilter+0x1bc>)
 80056f8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005700:	f043 0201 	orr.w	r2, r3, #1
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005710:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	431a      	orrs	r2, r3
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f003 031f 	and.w	r3, r3, #31
 8005736:	2201      	movs	r2, #1
 8005738:	fa02 f303 	lsl.w	r3, r2, r3
 800573c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	43db      	mvns	r3, r3
 8005748:	401a      	ands	r2, r3
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d123      	bne.n	80057a0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	43db      	mvns	r3, r3
 8005762:	401a      	ands	r2, r3
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800577a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	3248      	adds	r2, #72	; 0x48
 8005780:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005794:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005796:	6979      	ldr	r1, [r7, #20]
 8005798:	3348      	adds	r3, #72	; 0x48
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	440b      	add	r3, r1
 800579e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d122      	bne.n	80057ee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	431a      	orrs	r2, r3
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80057c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	3248      	adds	r2, #72	; 0x48
 80057ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80057e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80057e4:	6979      	ldr	r1, [r7, #20]
 80057e6:	3348      	adds	r3, #72	; 0x48
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	440b      	add	r3, r1
 80057ec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d109      	bne.n	800580a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	43db      	mvns	r3, r3
 8005800:	401a      	ands	r2, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005808:	e007      	b.n	800581a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	431a      	orrs	r2, r3
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	43db      	mvns	r3, r3
 800582c:	401a      	ands	r2, r3
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005834:	e007      	b.n	8005846 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	431a      	orrs	r2, r3
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d107      	bne.n	800585e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	431a      	orrs	r2, r3
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005864:	f023 0201 	bic.w	r2, r3, #1
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	e006      	b.n	8005880 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
  }
}
 8005880:	4618      	mov	r0, r3
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	40006400 	.word	0x40006400

08005890 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005890:	b480      	push	{r7}
 8005892:	b089      	sub	sp, #36	; 0x24
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80058ae:	7ffb      	ldrb	r3, [r7, #31]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d003      	beq.n	80058bc <HAL_CAN_AddTxMessage+0x2c>
 80058b4:	7ffb      	ldrb	r3, [r7, #31]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	f040 80ad 	bne.w	8005a16 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d105      	bne.n	80058dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 8095 	beq.w	8005a06 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	0e1b      	lsrs	r3, r3, #24
 80058e0:	f003 0303 	and.w	r3, r3, #3
 80058e4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80058e6:	2201      	movs	r2, #1
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	409a      	lsls	r2, r3
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10d      	bne.n	8005914 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005902:	68f9      	ldr	r1, [r7, #12]
 8005904:	6809      	ldr	r1, [r1, #0]
 8005906:	431a      	orrs	r2, r3
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	3318      	adds	r3, #24
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	440b      	add	r3, r1
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	e00f      	b.n	8005934 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800591e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005924:	68f9      	ldr	r1, [r7, #12]
 8005926:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005928:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	3318      	adds	r3, #24
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	440b      	add	r3, r1
 8005932:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6819      	ldr	r1, [r3, #0]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	3318      	adds	r3, #24
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	440b      	add	r3, r1
 8005944:	3304      	adds	r3, #4
 8005946:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	7d1b      	ldrb	r3, [r3, #20]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d111      	bne.n	8005974 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	3318      	adds	r3, #24
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	4413      	add	r3, r2
 800595c:	3304      	adds	r3, #4
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	6811      	ldr	r1, [r2, #0]
 8005964:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	3318      	adds	r3, #24
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	440b      	add	r3, r1
 8005970:	3304      	adds	r3, #4
 8005972:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3307      	adds	r3, #7
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	061a      	lsls	r2, r3, #24
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3306      	adds	r3, #6
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	041b      	lsls	r3, r3, #16
 8005984:	431a      	orrs	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3305      	adds	r3, #5
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	4313      	orrs	r3, r2
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	3204      	adds	r2, #4
 8005994:	7812      	ldrb	r2, [r2, #0]
 8005996:	4610      	mov	r0, r2
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	6811      	ldr	r1, [r2, #0]
 800599c:	ea43 0200 	orr.w	r2, r3, r0
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	440b      	add	r3, r1
 80059a6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80059aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3303      	adds	r3, #3
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	061a      	lsls	r2, r3, #24
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3302      	adds	r3, #2
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	041b      	lsls	r3, r3, #16
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	3301      	adds	r3, #1
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	021b      	lsls	r3, r3, #8
 80059c6:	4313      	orrs	r3, r2
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	7812      	ldrb	r2, [r2, #0]
 80059cc:	4610      	mov	r0, r2
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	6811      	ldr	r1, [r2, #0]
 80059d2:	ea43 0200 	orr.w	r2, r3, r0
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	011b      	lsls	r3, r3, #4
 80059da:	440b      	add	r3, r1
 80059dc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80059e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	3318      	adds	r3, #24
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	4413      	add	r3, r2
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	6811      	ldr	r1, [r2, #0]
 80059f4:	f043 0201 	orr.w	r2, r3, #1
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	3318      	adds	r3, #24
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	440b      	add	r3, r1
 8005a00:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	e00e      	b.n	8005a24 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e006      	b.n	8005a24 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
  }
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3724      	adds	r7, #36	; 0x24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a40:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d002      	beq.n	8005a4e <HAL_CAN_AbortTxRequest+0x1e>
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d128      	bne.n	8005aa0 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d007      	beq.n	8005a68 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a66:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a80:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d007      	beq.n	8005a9c <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005a9a:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	e006      	b.n	8005aae <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
  }
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b085      	sub	sp, #20
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005acc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8005ace:	7afb      	ldrb	r3, [r7, #11]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d002      	beq.n	8005ada <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005ad4:	7afb      	ldrb	r3, [r7, #11]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d11d      	bne.n	8005b16 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3301      	adds	r3, #1
 8005b00:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3301      	adds	r3, #1
 8005b14:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005b16:	68fb      	ldr	r3, [r7, #12]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b34:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <__NVIC_SetPriorityGrouping+0x40>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b40:	4013      	ands	r3, r2
 8005b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b4c:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <__NVIC_SetPriorityGrouping+0x44>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b52:	4a04      	ldr	r2, [pc, #16]	; (8005b64 <__NVIC_SetPriorityGrouping+0x40>)
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	60d3      	str	r3, [r2, #12]
}
 8005b58:	bf00      	nop
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	e000ed00 	.word	0xe000ed00
 8005b68:	05fa0000 	.word	0x05fa0000

08005b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b70:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <__NVIC_GetPriorityGrouping+0x18>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	0a1b      	lsrs	r3, r3, #8
 8005b76:	f003 0307 	and.w	r3, r3, #7
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	e000ed00 	.word	0xe000ed00

08005b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	db0b      	blt.n	8005bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	f003 021f 	and.w	r2, r3, #31
 8005ba0:	4907      	ldr	r1, [pc, #28]	; (8005bc0 <__NVIC_EnableIRQ+0x38>)
 8005ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	2001      	movs	r0, #1
 8005baa:	fa00 f202 	lsl.w	r2, r0, r2
 8005bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	e000e100 	.word	0xe000e100

08005bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	6039      	str	r1, [r7, #0]
 8005bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	db0a      	blt.n	8005bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	490c      	ldr	r1, [pc, #48]	; (8005c10 <__NVIC_SetPriority+0x4c>)
 8005bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be2:	0112      	lsls	r2, r2, #4
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	440b      	add	r3, r1
 8005be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bec:	e00a      	b.n	8005c04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	4908      	ldr	r1, [pc, #32]	; (8005c14 <__NVIC_SetPriority+0x50>)
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	3b04      	subs	r3, #4
 8005bfc:	0112      	lsls	r2, r2, #4
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	440b      	add	r3, r1
 8005c02:	761a      	strb	r2, [r3, #24]
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	e000e100 	.word	0xe000e100
 8005c14:	e000ed00 	.word	0xe000ed00

08005c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b089      	sub	sp, #36	; 0x24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f1c3 0307 	rsb	r3, r3, #7
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	bf28      	it	cs
 8005c36:	2304      	movcs	r3, #4
 8005c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	2b06      	cmp	r3, #6
 8005c40:	d902      	bls.n	8005c48 <NVIC_EncodePriority+0x30>
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	3b03      	subs	r3, #3
 8005c46:	e000      	b.n	8005c4a <NVIC_EncodePriority+0x32>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43da      	mvns	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	401a      	ands	r2, r3
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6a:	43d9      	mvns	r1, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c70:	4313      	orrs	r3, r2
         );
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3724      	adds	r7, #36	; 0x24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
	...

08005c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c90:	d301      	bcc.n	8005c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c92:	2301      	movs	r3, #1
 8005c94:	e00f      	b.n	8005cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c96:	4a0a      	ldr	r2, [pc, #40]	; (8005cc0 <SysTick_Config+0x40>)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c9e:	210f      	movs	r1, #15
 8005ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ca4:	f7ff ff8e 	bl	8005bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ca8:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <SysTick_Config+0x40>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cae:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <SysTick_Config+0x40>)
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	e000e010 	.word	0xe000e010

08005cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff ff29 	bl	8005b24 <__NVIC_SetPriorityGrouping>
}
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b086      	sub	sp, #24
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005cec:	f7ff ff3e 	bl	8005b6c <__NVIC_GetPriorityGrouping>
 8005cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	6978      	ldr	r0, [r7, #20]
 8005cf8:	f7ff ff8e 	bl	8005c18 <NVIC_EncodePriority>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d02:	4611      	mov	r1, r2
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff ff5d 	bl	8005bc4 <__NVIC_SetPriority>
}
 8005d0a:	bf00      	nop
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	4603      	mov	r3, r0
 8005d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff ff31 	bl	8005b88 <__NVIC_EnableIRQ>
}
 8005d26:	bf00      	nop
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff ffa2 	bl	8005c80 <SysTick_Config>
 8005d3c:	4603      	mov	r3, r0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d52:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d54:	f7ff fbb4 	bl	80054c0 <HAL_GetTick>
 8005d58:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d008      	beq.n	8005d78 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2280      	movs	r2, #128	; 0x80
 8005d6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e052      	b.n	8005e1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0216 	bic.w	r2, r2, #22
 8005d86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695a      	ldr	r2, [r3, #20]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d96:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d103      	bne.n	8005da8 <HAL_DMA_Abort+0x62>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d007      	beq.n	8005db8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0208 	bic.w	r2, r2, #8
 8005db6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dc8:	e013      	b.n	8005df2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dca:	f7ff fb79 	bl	80054c0 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b05      	cmp	r3, #5
 8005dd6:	d90c      	bls.n	8005df2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2203      	movs	r2, #3
 8005de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e015      	b.n	8005e1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e4      	bne.n	8005dca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e04:	223f      	movs	r2, #63	; 0x3f
 8005e06:	409a      	lsls	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d004      	beq.n	8005e44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2280      	movs	r2, #128	; 0x80
 8005e3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e00c      	b.n	8005e5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2205      	movs	r2, #5
 8005e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
	...

08005e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b089      	sub	sp, #36	; 0x24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005e82:	2300      	movs	r3, #0
 8005e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005e86:	2300      	movs	r3, #0
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	e175      	b.n	8006178 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	f040 8164 	bne.w	8006172 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d005      	beq.n	8005ec2 <HAL_GPIO_Init+0x56>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d130      	bne.n	8005f24 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	2203      	movs	r2, #3
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ef8:	2201      	movs	r2, #1
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	43db      	mvns	r3, r3
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	4013      	ands	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	091b      	lsrs	r3, r3, #4
 8005f0e:	f003 0201 	and.w	r2, r3, #1
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d017      	beq.n	8005f60 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	43db      	mvns	r3, r3
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4013      	ands	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f003 0303 	and.w	r3, r3, #3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d123      	bne.n	8005fb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	08da      	lsrs	r2, r3, #3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3208      	adds	r2, #8
 8005f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	220f      	movs	r2, #15
 8005f84:	fa02 f303 	lsl.w	r3, r2, r3
 8005f88:	43db      	mvns	r3, r3
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	08da      	lsrs	r2, r3, #3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3208      	adds	r2, #8
 8005fae:	69b9      	ldr	r1, [r7, #24]
 8005fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	2203      	movs	r2, #3
 8005fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f003 0203 	and.w	r2, r3, #3
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 80be 	beq.w	8006172 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ff6:	4b66      	ldr	r3, [pc, #408]	; (8006190 <HAL_GPIO_Init+0x324>)
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffa:	4a65      	ldr	r2, [pc, #404]	; (8006190 <HAL_GPIO_Init+0x324>)
 8005ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006000:	6453      	str	r3, [r2, #68]	; 0x44
 8006002:	4b63      	ldr	r3, [pc, #396]	; (8006190 <HAL_GPIO_Init+0x324>)
 8006004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800600e:	4a61      	ldr	r2, [pc, #388]	; (8006194 <HAL_GPIO_Init+0x328>)
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	089b      	lsrs	r3, r3, #2
 8006014:	3302      	adds	r3, #2
 8006016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800601a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	220f      	movs	r2, #15
 8006026:	fa02 f303 	lsl.w	r3, r2, r3
 800602a:	43db      	mvns	r3, r3
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	4013      	ands	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a58      	ldr	r2, [pc, #352]	; (8006198 <HAL_GPIO_Init+0x32c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d037      	beq.n	80060aa <HAL_GPIO_Init+0x23e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a57      	ldr	r2, [pc, #348]	; (800619c <HAL_GPIO_Init+0x330>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d031      	beq.n	80060a6 <HAL_GPIO_Init+0x23a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a56      	ldr	r2, [pc, #344]	; (80061a0 <HAL_GPIO_Init+0x334>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d02b      	beq.n	80060a2 <HAL_GPIO_Init+0x236>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a55      	ldr	r2, [pc, #340]	; (80061a4 <HAL_GPIO_Init+0x338>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d025      	beq.n	800609e <HAL_GPIO_Init+0x232>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a54      	ldr	r2, [pc, #336]	; (80061a8 <HAL_GPIO_Init+0x33c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d01f      	beq.n	800609a <HAL_GPIO_Init+0x22e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a53      	ldr	r2, [pc, #332]	; (80061ac <HAL_GPIO_Init+0x340>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d019      	beq.n	8006096 <HAL_GPIO_Init+0x22a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a52      	ldr	r2, [pc, #328]	; (80061b0 <HAL_GPIO_Init+0x344>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d013      	beq.n	8006092 <HAL_GPIO_Init+0x226>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a51      	ldr	r2, [pc, #324]	; (80061b4 <HAL_GPIO_Init+0x348>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00d      	beq.n	800608e <HAL_GPIO_Init+0x222>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a50      	ldr	r2, [pc, #320]	; (80061b8 <HAL_GPIO_Init+0x34c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d007      	beq.n	800608a <HAL_GPIO_Init+0x21e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a4f      	ldr	r2, [pc, #316]	; (80061bc <HAL_GPIO_Init+0x350>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d101      	bne.n	8006086 <HAL_GPIO_Init+0x21a>
 8006082:	2309      	movs	r3, #9
 8006084:	e012      	b.n	80060ac <HAL_GPIO_Init+0x240>
 8006086:	230a      	movs	r3, #10
 8006088:	e010      	b.n	80060ac <HAL_GPIO_Init+0x240>
 800608a:	2308      	movs	r3, #8
 800608c:	e00e      	b.n	80060ac <HAL_GPIO_Init+0x240>
 800608e:	2307      	movs	r3, #7
 8006090:	e00c      	b.n	80060ac <HAL_GPIO_Init+0x240>
 8006092:	2306      	movs	r3, #6
 8006094:	e00a      	b.n	80060ac <HAL_GPIO_Init+0x240>
 8006096:	2305      	movs	r3, #5
 8006098:	e008      	b.n	80060ac <HAL_GPIO_Init+0x240>
 800609a:	2304      	movs	r3, #4
 800609c:	e006      	b.n	80060ac <HAL_GPIO_Init+0x240>
 800609e:	2303      	movs	r3, #3
 80060a0:	e004      	b.n	80060ac <HAL_GPIO_Init+0x240>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e002      	b.n	80060ac <HAL_GPIO_Init+0x240>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <HAL_GPIO_Init+0x240>
 80060aa:	2300      	movs	r3, #0
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	f002 0203 	and.w	r2, r2, #3
 80060b2:	0092      	lsls	r2, r2, #2
 80060b4:	4093      	lsls	r3, r2
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80060bc:	4935      	ldr	r1, [pc, #212]	; (8006194 <HAL_GPIO_Init+0x328>)
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	089b      	lsrs	r3, r3, #2
 80060c2:	3302      	adds	r3, #2
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060ca:	4b3d      	ldr	r3, [pc, #244]	; (80061c0 <HAL_GPIO_Init+0x354>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	43db      	mvns	r3, r3
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	4013      	ands	r3, r2
 80060d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060ee:	4a34      	ldr	r2, [pc, #208]	; (80061c0 <HAL_GPIO_Init+0x354>)
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060f4:	4b32      	ldr	r3, [pc, #200]	; (80061c0 <HAL_GPIO_Init+0x354>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	43db      	mvns	r3, r3
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	4013      	ands	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006118:	4a29      	ldr	r2, [pc, #164]	; (80061c0 <HAL_GPIO_Init+0x354>)
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800611e:	4b28      	ldr	r3, [pc, #160]	; (80061c0 <HAL_GPIO_Init+0x354>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	43db      	mvns	r3, r3
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	4013      	ands	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006142:	4a1f      	ldr	r2, [pc, #124]	; (80061c0 <HAL_GPIO_Init+0x354>)
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006148:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <HAL_GPIO_Init+0x354>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	43db      	mvns	r3, r3
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	4013      	ands	r3, r2
 8006156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800616c:	4a14      	ldr	r2, [pc, #80]	; (80061c0 <HAL_GPIO_Init+0x354>)
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	3301      	adds	r3, #1
 8006176:	61fb      	str	r3, [r7, #28]
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	2b0f      	cmp	r3, #15
 800617c:	f67f ae86 	bls.w	8005e8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006180:	bf00      	nop
 8006182:	bf00      	nop
 8006184:	3724      	adds	r7, #36	; 0x24
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40023800 	.word	0x40023800
 8006194:	40013800 	.word	0x40013800
 8006198:	40020000 	.word	0x40020000
 800619c:	40020400 	.word	0x40020400
 80061a0:	40020800 	.word	0x40020800
 80061a4:	40020c00 	.word	0x40020c00
 80061a8:	40021000 	.word	0x40021000
 80061ac:	40021400 	.word	0x40021400
 80061b0:	40021800 	.word	0x40021800
 80061b4:	40021c00 	.word	0x40021c00
 80061b8:	40022000 	.word	0x40022000
 80061bc:	40022400 	.word	0x40022400
 80061c0:	40013c00 	.word	0x40013c00

080061c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	807b      	strh	r3, [r7, #2]
 80061d0:	4613      	mov	r3, r2
 80061d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061d4:	787b      	ldrb	r3, [r7, #1]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061da:	887a      	ldrh	r2, [r7, #2]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80061e0:	e003      	b.n	80061ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80061e2:	887b      	ldrh	r3, [r7, #2]
 80061e4:	041a      	lsls	r2, r3, #16
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	619a      	str	r2, [r3, #24]
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b085      	sub	sp, #20
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	460b      	mov	r3, r1
 8006200:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006208:	887a      	ldrh	r2, [r7, #2]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4013      	ands	r3, r2
 800620e:	041a      	lsls	r2, r3, #16
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	43d9      	mvns	r1, r3
 8006214:	887b      	ldrh	r3, [r7, #2]
 8006216:	400b      	ands	r3, r1
 8006218:	431a      	orrs	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	619a      	str	r2, [r3, #24]
}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e041      	b.n	80062c0 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006244:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f245 5255 	movw	r2, #21845	; 0x5555
 800624e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6852      	ldr	r2, [r2, #4]
 8006258:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6892      	ldr	r2, [r2, #8]
 8006262:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006264:	f7ff f92c 	bl	80054c0 <HAL_GetTick>
 8006268:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800626a:	e00f      	b.n	800628c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800626c:	f7ff f928 	bl	80054c0 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b31      	cmp	r3, #49	; 0x31
 8006278:	d908      	bls.n	800628c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e019      	b.n	80062c0 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e8      	bne.n	800626c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691a      	ldr	r2, [r3, #16]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d005      	beq.n	80062b4 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	68d2      	ldr	r2, [r2, #12]
 80062b0:	611a      	str	r2, [r3, #16]
 80062b2:	e004      	b.n	80062be <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80062bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80062d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062ec:	4b05      	ldr	r3, [pc, #20]	; (8006304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a04      	ldr	r2, [pc, #16]	; (8006304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f6:	6013      	str	r3, [r2, #0]
}
 80062f8:	bf00      	nop
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40007000 	.word	0x40007000

08006308 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006310:	2300      	movs	r3, #0
 8006312:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e291      	b.n	8006842 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 8087 	beq.w	800643a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800632c:	4b96      	ldr	r3, [pc, #600]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f003 030c 	and.w	r3, r3, #12
 8006334:	2b04      	cmp	r3, #4
 8006336:	d00c      	beq.n	8006352 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006338:	4b93      	ldr	r3, [pc, #588]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f003 030c 	and.w	r3, r3, #12
 8006340:	2b08      	cmp	r3, #8
 8006342:	d112      	bne.n	800636a <HAL_RCC_OscConfig+0x62>
 8006344:	4b90      	ldr	r3, [pc, #576]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800634c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006350:	d10b      	bne.n	800636a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006352:	4b8d      	ldr	r3, [pc, #564]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d06c      	beq.n	8006438 <HAL_RCC_OscConfig+0x130>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d168      	bne.n	8006438 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e26b      	b.n	8006842 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006372:	d106      	bne.n	8006382 <HAL_RCC_OscConfig+0x7a>
 8006374:	4b84      	ldr	r3, [pc, #528]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a83      	ldr	r2, [pc, #524]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 800637a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	e02e      	b.n	80063e0 <HAL_RCC_OscConfig+0xd8>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10c      	bne.n	80063a4 <HAL_RCC_OscConfig+0x9c>
 800638a:	4b7f      	ldr	r3, [pc, #508]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a7e      	ldr	r2, [pc, #504]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	4b7c      	ldr	r3, [pc, #496]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a7b      	ldr	r2, [pc, #492]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 800639c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	e01d      	b.n	80063e0 <HAL_RCC_OscConfig+0xd8>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063ac:	d10c      	bne.n	80063c8 <HAL_RCC_OscConfig+0xc0>
 80063ae:	4b76      	ldr	r3, [pc, #472]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a75      	ldr	r2, [pc, #468]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 80063b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	4b73      	ldr	r3, [pc, #460]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a72      	ldr	r2, [pc, #456]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 80063c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	e00b      	b.n	80063e0 <HAL_RCC_OscConfig+0xd8>
 80063c8:	4b6f      	ldr	r3, [pc, #444]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a6e      	ldr	r2, [pc, #440]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 80063ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	4b6c      	ldr	r3, [pc, #432]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a6b      	ldr	r2, [pc, #428]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 80063da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d013      	beq.n	8006410 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e8:	f7ff f86a 	bl	80054c0 <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063f0:	f7ff f866 	bl	80054c0 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b64      	cmp	r3, #100	; 0x64
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e21f      	b.n	8006842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006402:	4b61      	ldr	r3, [pc, #388]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0f0      	beq.n	80063f0 <HAL_RCC_OscConfig+0xe8>
 800640e:	e014      	b.n	800643a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006410:	f7ff f856 	bl	80054c0 <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006418:	f7ff f852 	bl	80054c0 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b64      	cmp	r3, #100	; 0x64
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e20b      	b.n	8006842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800642a:	4b57      	ldr	r3, [pc, #348]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1f0      	bne.n	8006418 <HAL_RCC_OscConfig+0x110>
 8006436:	e000      	b.n	800643a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d069      	beq.n	800651a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006446:	4b50      	ldr	r3, [pc, #320]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f003 030c 	and.w	r3, r3, #12
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00b      	beq.n	800646a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006452:	4b4d      	ldr	r3, [pc, #308]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 030c 	and.w	r3, r3, #12
 800645a:	2b08      	cmp	r3, #8
 800645c:	d11c      	bne.n	8006498 <HAL_RCC_OscConfig+0x190>
 800645e:	4b4a      	ldr	r3, [pc, #296]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d116      	bne.n	8006498 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800646a:	4b47      	ldr	r3, [pc, #284]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <HAL_RCC_OscConfig+0x17a>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d001      	beq.n	8006482 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e1df      	b.n	8006842 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006482:	4b41      	ldr	r3, [pc, #260]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	493d      	ldr	r1, [pc, #244]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006492:	4313      	orrs	r3, r2
 8006494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006496:	e040      	b.n	800651a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d023      	beq.n	80064e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064a0:	4b39      	ldr	r3, [pc, #228]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a38      	ldr	r2, [pc, #224]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 80064a6:	f043 0301 	orr.w	r3, r3, #1
 80064aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ac:	f7ff f808 	bl	80054c0 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064b4:	f7ff f804 	bl	80054c0 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e1bd      	b.n	8006842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c6:	4b30      	ldr	r3, [pc, #192]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0f0      	beq.n	80064b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d2:	4b2d      	ldr	r3, [pc, #180]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	4929      	ldr	r1, [pc, #164]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	600b      	str	r3, [r1, #0]
 80064e6:	e018      	b.n	800651a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064e8:	4b27      	ldr	r3, [pc, #156]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a26      	ldr	r2, [pc, #152]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 80064ee:	f023 0301 	bic.w	r3, r3, #1
 80064f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f4:	f7fe ffe4 	bl	80054c0 <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064fc:	f7fe ffe0 	bl	80054c0 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e199      	b.n	8006842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800650e:	4b1e      	ldr	r3, [pc, #120]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f0      	bne.n	80064fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0308 	and.w	r3, r3, #8
 8006522:	2b00      	cmp	r3, #0
 8006524:	d038      	beq.n	8006598 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d019      	beq.n	8006562 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800652e:	4b16      	ldr	r3, [pc, #88]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006532:	4a15      	ldr	r2, [pc, #84]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006534:	f043 0301 	orr.w	r3, r3, #1
 8006538:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800653a:	f7fe ffc1 	bl	80054c0 <HAL_GetTick>
 800653e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006540:	e008      	b.n	8006554 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006542:	f7fe ffbd 	bl	80054c0 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e176      	b.n	8006842 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006554:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0f0      	beq.n	8006542 <HAL_RCC_OscConfig+0x23a>
 8006560:	e01a      	b.n	8006598 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006562:	4b09      	ldr	r3, [pc, #36]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006566:	4a08      	ldr	r2, [pc, #32]	; (8006588 <HAL_RCC_OscConfig+0x280>)
 8006568:	f023 0301 	bic.w	r3, r3, #1
 800656c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800656e:	f7fe ffa7 	bl	80054c0 <HAL_GetTick>
 8006572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006574:	e00a      	b.n	800658c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006576:	f7fe ffa3 	bl	80054c0 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d903      	bls.n	800658c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e15c      	b.n	8006842 <HAL_RCC_OscConfig+0x53a>
 8006588:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800658c:	4b91      	ldr	r3, [pc, #580]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 800658e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1ee      	bne.n	8006576 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 80a4 	beq.w	80066ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065a6:	4b8b      	ldr	r3, [pc, #556]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10d      	bne.n	80065ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80065b2:	4b88      	ldr	r3, [pc, #544]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	4a87      	ldr	r2, [pc, #540]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 80065b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065bc:	6413      	str	r3, [r2, #64]	; 0x40
 80065be:	4b85      	ldr	r3, [pc, #532]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c6:	60bb      	str	r3, [r7, #8]
 80065c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ca:	2301      	movs	r3, #1
 80065cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ce:	4b82      	ldr	r3, [pc, #520]	; (80067d8 <HAL_RCC_OscConfig+0x4d0>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d118      	bne.n	800660c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80065da:	4b7f      	ldr	r3, [pc, #508]	; (80067d8 <HAL_RCC_OscConfig+0x4d0>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a7e      	ldr	r2, [pc, #504]	; (80067d8 <HAL_RCC_OscConfig+0x4d0>)
 80065e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065e6:	f7fe ff6b 	bl	80054c0 <HAL_GetTick>
 80065ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ec:	e008      	b.n	8006600 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ee:	f7fe ff67 	bl	80054c0 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b64      	cmp	r3, #100	; 0x64
 80065fa:	d901      	bls.n	8006600 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e120      	b.n	8006842 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006600:	4b75      	ldr	r3, [pc, #468]	; (80067d8 <HAL_RCC_OscConfig+0x4d0>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0f0      	beq.n	80065ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d106      	bne.n	8006622 <HAL_RCC_OscConfig+0x31a>
 8006614:	4b6f      	ldr	r3, [pc, #444]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 8006616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006618:	4a6e      	ldr	r2, [pc, #440]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 800661a:	f043 0301 	orr.w	r3, r3, #1
 800661e:	6713      	str	r3, [r2, #112]	; 0x70
 8006620:	e02d      	b.n	800667e <HAL_RCC_OscConfig+0x376>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10c      	bne.n	8006644 <HAL_RCC_OscConfig+0x33c>
 800662a:	4b6a      	ldr	r3, [pc, #424]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 800662c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662e:	4a69      	ldr	r2, [pc, #420]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 8006630:	f023 0301 	bic.w	r3, r3, #1
 8006634:	6713      	str	r3, [r2, #112]	; 0x70
 8006636:	4b67      	ldr	r3, [pc, #412]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 8006638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663a:	4a66      	ldr	r2, [pc, #408]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 800663c:	f023 0304 	bic.w	r3, r3, #4
 8006640:	6713      	str	r3, [r2, #112]	; 0x70
 8006642:	e01c      	b.n	800667e <HAL_RCC_OscConfig+0x376>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	2b05      	cmp	r3, #5
 800664a:	d10c      	bne.n	8006666 <HAL_RCC_OscConfig+0x35e>
 800664c:	4b61      	ldr	r3, [pc, #388]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 800664e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006650:	4a60      	ldr	r2, [pc, #384]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 8006652:	f043 0304 	orr.w	r3, r3, #4
 8006656:	6713      	str	r3, [r2, #112]	; 0x70
 8006658:	4b5e      	ldr	r3, [pc, #376]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 800665a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665c:	4a5d      	ldr	r2, [pc, #372]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 800665e:	f043 0301 	orr.w	r3, r3, #1
 8006662:	6713      	str	r3, [r2, #112]	; 0x70
 8006664:	e00b      	b.n	800667e <HAL_RCC_OscConfig+0x376>
 8006666:	4b5b      	ldr	r3, [pc, #364]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 8006668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666a:	4a5a      	ldr	r2, [pc, #360]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 800666c:	f023 0301 	bic.w	r3, r3, #1
 8006670:	6713      	str	r3, [r2, #112]	; 0x70
 8006672:	4b58      	ldr	r3, [pc, #352]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 8006674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006676:	4a57      	ldr	r2, [pc, #348]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 8006678:	f023 0304 	bic.w	r3, r3, #4
 800667c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d015      	beq.n	80066b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006686:	f7fe ff1b 	bl	80054c0 <HAL_GetTick>
 800668a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800668c:	e00a      	b.n	80066a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800668e:	f7fe ff17 	bl	80054c0 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	f241 3288 	movw	r2, #5000	; 0x1388
 800669c:	4293      	cmp	r3, r2
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e0ce      	b.n	8006842 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a4:	4b4b      	ldr	r3, [pc, #300]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 80066a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0ee      	beq.n	800668e <HAL_RCC_OscConfig+0x386>
 80066b0:	e014      	b.n	80066dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b2:	f7fe ff05 	bl	80054c0 <HAL_GetTick>
 80066b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066b8:	e00a      	b.n	80066d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ba:	f7fe ff01 	bl	80054c0 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e0b8      	b.n	8006842 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066d0:	4b40      	ldr	r3, [pc, #256]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 80066d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1ee      	bne.n	80066ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d105      	bne.n	80066ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066e2:	4b3c      	ldr	r3, [pc, #240]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	4a3b      	ldr	r2, [pc, #236]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 80066e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 80a4 	beq.w	8006840 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066f8:	4b36      	ldr	r3, [pc, #216]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f003 030c 	and.w	r3, r3, #12
 8006700:	2b08      	cmp	r3, #8
 8006702:	d06b      	beq.n	80067dc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	2b02      	cmp	r3, #2
 800670a:	d149      	bne.n	80067a0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800670c:	4b31      	ldr	r3, [pc, #196]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a30      	ldr	r2, [pc, #192]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 8006712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006718:	f7fe fed2 	bl	80054c0 <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006720:	f7fe fece 	bl	80054c0 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e087      	b.n	8006842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006732:	4b28      	ldr	r3, [pc, #160]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1f0      	bne.n	8006720 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69da      	ldr	r2, [r3, #28]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	019b      	lsls	r3, r3, #6
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006754:	085b      	lsrs	r3, r3, #1
 8006756:	3b01      	subs	r3, #1
 8006758:	041b      	lsls	r3, r3, #16
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	061b      	lsls	r3, r3, #24
 8006762:	4313      	orrs	r3, r2
 8006764:	4a1b      	ldr	r2, [pc, #108]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 8006766:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800676a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800676c:	4b19      	ldr	r3, [pc, #100]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a18      	ldr	r2, [pc, #96]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 8006772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006778:	f7fe fea2 	bl	80054c0 <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006780:	f7fe fe9e 	bl	80054c0 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e057      	b.n	8006842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006792:	4b10      	ldr	r3, [pc, #64]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0f0      	beq.n	8006780 <HAL_RCC_OscConfig+0x478>
 800679e:	e04f      	b.n	8006840 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a0:	4b0c      	ldr	r3, [pc, #48]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a0b      	ldr	r2, [pc, #44]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 80067a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ac:	f7fe fe88 	bl	80054c0 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b4:	f7fe fe84 	bl	80054c0 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e03d      	b.n	8006842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c6:	4b03      	ldr	r3, [pc, #12]	; (80067d4 <HAL_RCC_OscConfig+0x4cc>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f0      	bne.n	80067b4 <HAL_RCC_OscConfig+0x4ac>
 80067d2:	e035      	b.n	8006840 <HAL_RCC_OscConfig+0x538>
 80067d4:	40023800 	.word	0x40023800
 80067d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80067dc:	4b1b      	ldr	r3, [pc, #108]	; (800684c <HAL_RCC_OscConfig+0x544>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d028      	beq.n	800683c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d121      	bne.n	800683c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006802:	429a      	cmp	r2, r3
 8006804:	d11a      	bne.n	800683c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800680c:	4013      	ands	r3, r2
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006812:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006814:	4293      	cmp	r3, r2
 8006816:	d111      	bne.n	800683c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006822:	085b      	lsrs	r3, r3, #1
 8006824:	3b01      	subs	r3, #1
 8006826:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006828:	429a      	cmp	r2, r3
 800682a:	d107      	bne.n	800683c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006836:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006838:	429a      	cmp	r2, r3
 800683a:	d001      	beq.n	8006840 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e000      	b.n	8006842 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	40023800 	.word	0x40023800

08006850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800685a:	2300      	movs	r3, #0
 800685c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0d0      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006868:	4b6a      	ldr	r3, [pc, #424]	; (8006a14 <HAL_RCC_ClockConfig+0x1c4>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 030f 	and.w	r3, r3, #15
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d910      	bls.n	8006898 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006876:	4b67      	ldr	r3, [pc, #412]	; (8006a14 <HAL_RCC_ClockConfig+0x1c4>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f023 020f 	bic.w	r2, r3, #15
 800687e:	4965      	ldr	r1, [pc, #404]	; (8006a14 <HAL_RCC_ClockConfig+0x1c4>)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	4313      	orrs	r3, r2
 8006884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006886:	4b63      	ldr	r3, [pc, #396]	; (8006a14 <HAL_RCC_ClockConfig+0x1c4>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d001      	beq.n	8006898 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e0b8      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d020      	beq.n	80068e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068b0:	4b59      	ldr	r3, [pc, #356]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	4a58      	ldr	r2, [pc, #352]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 80068b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0308 	and.w	r3, r3, #8
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d005      	beq.n	80068d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068c8:	4b53      	ldr	r3, [pc, #332]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	4a52      	ldr	r2, [pc, #328]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 80068ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d4:	4b50      	ldr	r3, [pc, #320]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	494d      	ldr	r1, [pc, #308]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d040      	beq.n	8006974 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d107      	bne.n	800690a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068fa:	4b47      	ldr	r3, [pc, #284]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d115      	bne.n	8006932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e07f      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d107      	bne.n	8006922 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006912:	4b41      	ldr	r3, [pc, #260]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e073      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006922:	4b3d      	ldr	r3, [pc, #244]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e06b      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006932:	4b39      	ldr	r3, [pc, #228]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f023 0203 	bic.w	r2, r3, #3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	4936      	ldr	r1, [pc, #216]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 8006940:	4313      	orrs	r3, r2
 8006942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006944:	f7fe fdbc 	bl	80054c0 <HAL_GetTick>
 8006948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800694a:	e00a      	b.n	8006962 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800694c:	f7fe fdb8 	bl	80054c0 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f241 3288 	movw	r2, #5000	; 0x1388
 800695a:	4293      	cmp	r3, r2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e053      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006962:	4b2d      	ldr	r3, [pc, #180]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f003 020c 	and.w	r2, r3, #12
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	429a      	cmp	r2, r3
 8006972:	d1eb      	bne.n	800694c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006974:	4b27      	ldr	r3, [pc, #156]	; (8006a14 <HAL_RCC_ClockConfig+0x1c4>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 030f 	and.w	r3, r3, #15
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d210      	bcs.n	80069a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006982:	4b24      	ldr	r3, [pc, #144]	; (8006a14 <HAL_RCC_ClockConfig+0x1c4>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f023 020f 	bic.w	r2, r3, #15
 800698a:	4922      	ldr	r1, [pc, #136]	; (8006a14 <HAL_RCC_ClockConfig+0x1c4>)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	4313      	orrs	r3, r2
 8006990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006992:	4b20      	ldr	r3, [pc, #128]	; (8006a14 <HAL_RCC_ClockConfig+0x1c4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 030f 	and.w	r3, r3, #15
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	d001      	beq.n	80069a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e032      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069b0:	4b19      	ldr	r3, [pc, #100]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	4916      	ldr	r1, [pc, #88]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d009      	beq.n	80069e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069ce:	4b12      	ldr	r3, [pc, #72]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	00db      	lsls	r3, r3, #3
 80069dc:	490e      	ldr	r1, [pc, #56]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069e2:	f000 f821 	bl	8006a28 <HAL_RCC_GetSysClockFreq>
 80069e6:	4602      	mov	r2, r0
 80069e8:	4b0b      	ldr	r3, [pc, #44]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	091b      	lsrs	r3, r3, #4
 80069ee:	f003 030f 	and.w	r3, r3, #15
 80069f2:	490a      	ldr	r1, [pc, #40]	; (8006a1c <HAL_RCC_ClockConfig+0x1cc>)
 80069f4:	5ccb      	ldrb	r3, [r1, r3]
 80069f6:	fa22 f303 	lsr.w	r3, r2, r3
 80069fa:	4a09      	ldr	r2, [pc, #36]	; (8006a20 <HAL_RCC_ClockConfig+0x1d0>)
 80069fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80069fe:	4b09      	ldr	r3, [pc, #36]	; (8006a24 <HAL_RCC_ClockConfig+0x1d4>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fe fd18 	bl	8005438 <HAL_InitTick>

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40023c00 	.word	0x40023c00
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	0800ab94 	.word	0x0800ab94
 8006a20:	20000094 	.word	0x20000094
 8006a24:	20000098 	.word	0x20000098

08006a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a2c:	b094      	sub	sp, #80	; 0x50
 8006a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	647b      	str	r3, [r7, #68]	; 0x44
 8006a34:	2300      	movs	r3, #0
 8006a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a38:	2300      	movs	r3, #0
 8006a3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a40:	4b79      	ldr	r3, [pc, #484]	; (8006c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f003 030c 	and.w	r3, r3, #12
 8006a48:	2b08      	cmp	r3, #8
 8006a4a:	d00d      	beq.n	8006a68 <HAL_RCC_GetSysClockFreq+0x40>
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	f200 80e1 	bhi.w	8006c14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <HAL_RCC_GetSysClockFreq+0x34>
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d003      	beq.n	8006a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a5a:	e0db      	b.n	8006c14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a5c:	4b73      	ldr	r3, [pc, #460]	; (8006c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8006a5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a60:	e0db      	b.n	8006c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a62:	4b73      	ldr	r3, [pc, #460]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a66:	e0d8      	b.n	8006c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a68:	4b6f      	ldr	r3, [pc, #444]	; (8006c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a70:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006a72:	4b6d      	ldr	r3, [pc, #436]	; (8006c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d063      	beq.n	8006b46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a7e:	4b6a      	ldr	r3, [pc, #424]	; (8006c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	099b      	lsrs	r3, r3, #6
 8006a84:	2200      	movs	r2, #0
 8006a86:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a90:	633b      	str	r3, [r7, #48]	; 0x30
 8006a92:	2300      	movs	r3, #0
 8006a94:	637b      	str	r3, [r7, #52]	; 0x34
 8006a96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a9a:	4622      	mov	r2, r4
 8006a9c:	462b      	mov	r3, r5
 8006a9e:	f04f 0000 	mov.w	r0, #0
 8006aa2:	f04f 0100 	mov.w	r1, #0
 8006aa6:	0159      	lsls	r1, r3, #5
 8006aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006aac:	0150      	lsls	r0, r2, #5
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	1a51      	subs	r1, r2, r1
 8006ab6:	6139      	str	r1, [r7, #16]
 8006ab8:	4629      	mov	r1, r5
 8006aba:	eb63 0301 	sbc.w	r3, r3, r1
 8006abe:	617b      	str	r3, [r7, #20]
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006acc:	4659      	mov	r1, fp
 8006ace:	018b      	lsls	r3, r1, #6
 8006ad0:	4651      	mov	r1, sl
 8006ad2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ad6:	4651      	mov	r1, sl
 8006ad8:	018a      	lsls	r2, r1, #6
 8006ada:	4651      	mov	r1, sl
 8006adc:	ebb2 0801 	subs.w	r8, r2, r1
 8006ae0:	4659      	mov	r1, fp
 8006ae2:	eb63 0901 	sbc.w	r9, r3, r1
 8006ae6:	f04f 0200 	mov.w	r2, #0
 8006aea:	f04f 0300 	mov.w	r3, #0
 8006aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006afa:	4690      	mov	r8, r2
 8006afc:	4699      	mov	r9, r3
 8006afe:	4623      	mov	r3, r4
 8006b00:	eb18 0303 	adds.w	r3, r8, r3
 8006b04:	60bb      	str	r3, [r7, #8]
 8006b06:	462b      	mov	r3, r5
 8006b08:	eb49 0303 	adc.w	r3, r9, r3
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	f04f 0200 	mov.w	r2, #0
 8006b12:	f04f 0300 	mov.w	r3, #0
 8006b16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	024b      	lsls	r3, r1, #9
 8006b1e:	4621      	mov	r1, r4
 8006b20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b24:	4621      	mov	r1, r4
 8006b26:	024a      	lsls	r2, r1, #9
 8006b28:	4610      	mov	r0, r2
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b2e:	2200      	movs	r2, #0
 8006b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b38:	f7f9 fb66 	bl	8000208 <__aeabi_uldivmod>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4613      	mov	r3, r2
 8006b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b44:	e058      	b.n	8006bf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b46:	4b38      	ldr	r3, [pc, #224]	; (8006c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	099b      	lsrs	r3, r3, #6
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4618      	mov	r0, r3
 8006b50:	4611      	mov	r1, r2
 8006b52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b56:	623b      	str	r3, [r7, #32]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b60:	4642      	mov	r2, r8
 8006b62:	464b      	mov	r3, r9
 8006b64:	f04f 0000 	mov.w	r0, #0
 8006b68:	f04f 0100 	mov.w	r1, #0
 8006b6c:	0159      	lsls	r1, r3, #5
 8006b6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b72:	0150      	lsls	r0, r2, #5
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	4641      	mov	r1, r8
 8006b7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b7e:	4649      	mov	r1, r9
 8006b80:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	f04f 0300 	mov.w	r3, #0
 8006b8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b98:	ebb2 040a 	subs.w	r4, r2, sl
 8006b9c:	eb63 050b 	sbc.w	r5, r3, fp
 8006ba0:	f04f 0200 	mov.w	r2, #0
 8006ba4:	f04f 0300 	mov.w	r3, #0
 8006ba8:	00eb      	lsls	r3, r5, #3
 8006baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bae:	00e2      	lsls	r2, r4, #3
 8006bb0:	4614      	mov	r4, r2
 8006bb2:	461d      	mov	r5, r3
 8006bb4:	4643      	mov	r3, r8
 8006bb6:	18e3      	adds	r3, r4, r3
 8006bb8:	603b      	str	r3, [r7, #0]
 8006bba:	464b      	mov	r3, r9
 8006bbc:	eb45 0303 	adc.w	r3, r5, r3
 8006bc0:	607b      	str	r3, [r7, #4]
 8006bc2:	f04f 0200 	mov.w	r2, #0
 8006bc6:	f04f 0300 	mov.w	r3, #0
 8006bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bce:	4629      	mov	r1, r5
 8006bd0:	028b      	lsls	r3, r1, #10
 8006bd2:	4621      	mov	r1, r4
 8006bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bd8:	4621      	mov	r1, r4
 8006bda:	028a      	lsls	r2, r1, #10
 8006bdc:	4610      	mov	r0, r2
 8006bde:	4619      	mov	r1, r3
 8006be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be2:	2200      	movs	r2, #0
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	61fa      	str	r2, [r7, #28]
 8006be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bec:	f7f9 fb0c 	bl	8000208 <__aeabi_uldivmod>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006bf8:	4b0b      	ldr	r3, [pc, #44]	; (8006c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	0c1b      	lsrs	r3, r3, #16
 8006bfe:	f003 0303 	and.w	r3, r3, #3
 8006c02:	3301      	adds	r3, #1
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006c08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c12:	e002      	b.n	8006c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c14:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8006c16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3750      	adds	r7, #80	; 0x50
 8006c20:	46bd      	mov	sp, r7
 8006c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c26:	bf00      	nop
 8006c28:	40023800 	.word	0x40023800
 8006c2c:	00f42400 	.word	0x00f42400
 8006c30:	007a1200 	.word	0x007a1200

08006c34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c34:	b480      	push	{r7}
 8006c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c38:	4b03      	ldr	r3, [pc, #12]	; (8006c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	20000094 	.word	0x20000094

08006c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c50:	f7ff fff0 	bl	8006c34 <HAL_RCC_GetHCLKFreq>
 8006c54:	4602      	mov	r2, r0
 8006c56:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	0a9b      	lsrs	r3, r3, #10
 8006c5c:	f003 0307 	and.w	r3, r3, #7
 8006c60:	4903      	ldr	r1, [pc, #12]	; (8006c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c62:	5ccb      	ldrb	r3, [r1, r3]
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	0800aba4 	.word	0x0800aba4

08006c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c78:	f7ff ffdc 	bl	8006c34 <HAL_RCC_GetHCLKFreq>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	0b5b      	lsrs	r3, r3, #13
 8006c84:	f003 0307 	and.w	r3, r3, #7
 8006c88:	4903      	ldr	r1, [pc, #12]	; (8006c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c8a:	5ccb      	ldrb	r3, [r1, r3]
 8006c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	40023800 	.word	0x40023800
 8006c98:	0800aba4 	.word	0x0800aba4

08006c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b088      	sub	sp, #32
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d012      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006cc4:	4b69      	ldr	r3, [pc, #420]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	4a68      	ldr	r2, [pc, #416]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006cce:	6093      	str	r3, [r2, #8]
 8006cd0:	4b66      	ldr	r3, [pc, #408]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd8:	4964      	ldr	r1, [pc, #400]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d017      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cf6:	4b5d      	ldr	r3, [pc, #372]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d04:	4959      	ldr	r1, [pc, #356]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d14:	d101      	bne.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006d16:	2301      	movs	r3, #1
 8006d18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006d22:	2301      	movs	r3, #1
 8006d24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d017      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006d32:	4b4e      	ldr	r3, [pc, #312]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d40:	494a      	ldr	r1, [pc, #296]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d50:	d101      	bne.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006d52:	2301      	movs	r3, #1
 8006d54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 808b 	beq.w	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d80:	4b3a      	ldr	r3, [pc, #232]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	4a39      	ldr	r2, [pc, #228]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8006d8c:	4b37      	ldr	r3, [pc, #220]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d94:	60bb      	str	r3, [r7, #8]
 8006d96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d98:	4b35      	ldr	r3, [pc, #212]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a34      	ldr	r2, [pc, #208]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006da4:	f7fe fb8c 	bl	80054c0 <HAL_GetTick>
 8006da8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006daa:	e008      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dac:	f7fe fb88 	bl	80054c0 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b64      	cmp	r3, #100	; 0x64
 8006db8:	d901      	bls.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e357      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006dbe:	4b2c      	ldr	r3, [pc, #176]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0f0      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006dca:	4b28      	ldr	r3, [pc, #160]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dd2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d035      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d02e      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006de8:	4b20      	ldr	r3, [pc, #128]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006df0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006df2:	4b1e      	ldr	r3, [pc, #120]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df6:	4a1d      	ldr	r2, [pc, #116]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dfc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dfe:	4b1b      	ldr	r3, [pc, #108]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e02:	4a1a      	ldr	r2, [pc, #104]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006e0a:	4a18      	ldr	r2, [pc, #96]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e10:	4b16      	ldr	r3, [pc, #88]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d114      	bne.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e1c:	f7fe fb50 	bl	80054c0 <HAL_GetTick>
 8006e20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e22:	e00a      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e24:	f7fe fb4c 	bl	80054c0 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d901      	bls.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e319      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e3a:	4b0c      	ldr	r3, [pc, #48]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0ee      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e52:	d111      	bne.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006e54:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e60:	4b04      	ldr	r3, [pc, #16]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e62:	400b      	ands	r3, r1
 8006e64:	4901      	ldr	r1, [pc, #4]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	608b      	str	r3, [r1, #8]
 8006e6a:	e00b      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	40007000 	.word	0x40007000
 8006e74:	0ffffcff 	.word	0x0ffffcff
 8006e78:	4baa      	ldr	r3, [pc, #680]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	4aa9      	ldr	r2, [pc, #676]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e82:	6093      	str	r3, [r2, #8]
 8006e84:	4ba7      	ldr	r3, [pc, #668]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e90:	49a4      	ldr	r1, [pc, #656]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0310 	and.w	r3, r3, #16
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d010      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ea2:	4ba0      	ldr	r3, [pc, #640]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ea8:	4a9e      	ldr	r2, [pc, #632]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006eb2:	4b9c      	ldr	r3, [pc, #624]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006eb4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebc:	4999      	ldr	r1, [pc, #612]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ed0:	4b94      	ldr	r3, [pc, #592]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ede:	4991      	ldr	r1, [pc, #580]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ef2:	4b8c      	ldr	r3, [pc, #560]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f00:	4988      	ldr	r1, [pc, #544]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00a      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f14:	4b83      	ldr	r3, [pc, #524]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f22:	4980      	ldr	r1, [pc, #512]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f36:	4b7b      	ldr	r3, [pc, #492]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f44:	4977      	ldr	r1, [pc, #476]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00a      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f58:	4b72      	ldr	r3, [pc, #456]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f5e:	f023 0203 	bic.w	r2, r3, #3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f66:	496f      	ldr	r1, [pc, #444]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f7a:	4b6a      	ldr	r3, [pc, #424]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f80:	f023 020c 	bic.w	r2, r3, #12
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f88:	4966      	ldr	r1, [pc, #408]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00a      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f9c:	4b61      	ldr	r3, [pc, #388]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006faa:	495e      	ldr	r1, [pc, #376]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006fbe:	4b59      	ldr	r3, [pc, #356]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fcc:	4955      	ldr	r1, [pc, #340]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006fe0:	4b50      	ldr	r3, [pc, #320]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fee:	494d      	ldr	r1, [pc, #308]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007002:	4b48      	ldr	r3, [pc, #288]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007008:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007010:	4944      	ldr	r1, [pc, #272]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007012:	4313      	orrs	r3, r2
 8007014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00a      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007024:	4b3f      	ldr	r3, [pc, #252]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800702a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007032:	493c      	ldr	r1, [pc, #240]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007034:	4313      	orrs	r3, r2
 8007036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00a      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007046:	4b37      	ldr	r3, [pc, #220]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800704c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007054:	4933      	ldr	r1, [pc, #204]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007056:	4313      	orrs	r3, r2
 8007058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007068:	4b2e      	ldr	r3, [pc, #184]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800706a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800706e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007076:	492b      	ldr	r1, [pc, #172]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007078:	4313      	orrs	r3, r2
 800707a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d011      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800708a:	4b26      	ldr	r3, [pc, #152]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800708c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007090:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007098:	4922      	ldr	r1, [pc, #136]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800709a:	4313      	orrs	r3, r2
 800709c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070a8:	d101      	bne.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80070aa:	2301      	movs	r3, #1
 80070ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0308 	and.w	r3, r3, #8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80070ba:	2301      	movs	r3, #1
 80070bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070ca:	4b16      	ldr	r3, [pc, #88]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070d8:	4912      	ldr	r1, [pc, #72]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80070ec:	4b0d      	ldr	r3, [pc, #52]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070fc:	4909      	ldr	r1, [pc, #36]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d006      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 80d9 	beq.w	80072ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007118:	4b02      	ldr	r3, [pc, #8]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a01      	ldr	r2, [pc, #4]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800711e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007122:	e001      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007124:	40023800 	.word	0x40023800
 8007128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800712a:	f7fe f9c9 	bl	80054c0 <HAL_GetTick>
 800712e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007130:	e008      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007132:	f7fe f9c5 	bl	80054c0 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b64      	cmp	r3, #100	; 0x64
 800713e:	d901      	bls.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e194      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007144:	4b6c      	ldr	r3, [pc, #432]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1f0      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d021      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007160:	2b00      	cmp	r3, #0
 8007162:	d11d      	bne.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007164:	4b64      	ldr	r3, [pc, #400]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800716a:	0c1b      	lsrs	r3, r3, #16
 800716c:	f003 0303 	and.w	r3, r3, #3
 8007170:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007172:	4b61      	ldr	r3, [pc, #388]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007178:	0e1b      	lsrs	r3, r3, #24
 800717a:	f003 030f 	and.w	r3, r3, #15
 800717e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	019a      	lsls	r2, r3, #6
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	041b      	lsls	r3, r3, #16
 800718a:	431a      	orrs	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	061b      	lsls	r3, r3, #24
 8007190:	431a      	orrs	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	071b      	lsls	r3, r3, #28
 8007198:	4957      	ldr	r1, [pc, #348]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800719a:	4313      	orrs	r3, r2
 800719c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071b4:	d00a      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d02e      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071ca:	d129      	bne.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80071cc:	4b4a      	ldr	r3, [pc, #296]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d2:	0c1b      	lsrs	r3, r3, #16
 80071d4:	f003 0303 	and.w	r3, r3, #3
 80071d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80071da:	4b47      	ldr	r3, [pc, #284]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e0:	0f1b      	lsrs	r3, r3, #28
 80071e2:	f003 0307 	and.w	r3, r3, #7
 80071e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	019a      	lsls	r2, r3, #6
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	041b      	lsls	r3, r3, #16
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	061b      	lsls	r3, r3, #24
 80071fa:	431a      	orrs	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	071b      	lsls	r3, r3, #28
 8007200:	493d      	ldr	r1, [pc, #244]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007202:	4313      	orrs	r3, r2
 8007204:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007208:	4b3b      	ldr	r3, [pc, #236]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800720a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800720e:	f023 021f 	bic.w	r2, r3, #31
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	3b01      	subs	r3, #1
 8007218:	4937      	ldr	r1, [pc, #220]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800721a:	4313      	orrs	r3, r2
 800721c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d01d      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800722c:	4b32      	ldr	r3, [pc, #200]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800722e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007232:	0e1b      	lsrs	r3, r3, #24
 8007234:	f003 030f 	and.w	r3, r3, #15
 8007238:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800723a:	4b2f      	ldr	r3, [pc, #188]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800723c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007240:	0f1b      	lsrs	r3, r3, #28
 8007242:	f003 0307 	and.w	r3, r3, #7
 8007246:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	019a      	lsls	r2, r3, #6
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	041b      	lsls	r3, r3, #16
 8007254:	431a      	orrs	r2, r3
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	061b      	lsls	r3, r3, #24
 800725a:	431a      	orrs	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	071b      	lsls	r3, r3, #28
 8007260:	4925      	ldr	r1, [pc, #148]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007262:	4313      	orrs	r3, r2
 8007264:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d011      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	019a      	lsls	r2, r3, #6
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	041b      	lsls	r3, r3, #16
 8007280:	431a      	orrs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	061b      	lsls	r3, r3, #24
 8007288:	431a      	orrs	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	071b      	lsls	r3, r3, #28
 8007290:	4919      	ldr	r1, [pc, #100]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007292:	4313      	orrs	r3, r2
 8007294:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007298:	4b17      	ldr	r3, [pc, #92]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a16      	ldr	r2, [pc, #88]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800729e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072a4:	f7fe f90c 	bl	80054c0 <HAL_GetTick>
 80072a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072aa:	e008      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072ac:	f7fe f908 	bl	80054c0 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b64      	cmp	r3, #100	; 0x64
 80072b8:	d901      	bls.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e0d7      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072be:	4b0e      	ldr	r3, [pc, #56]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0f0      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	f040 80cd 	bne.w	800746c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80072d2:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a08      	ldr	r2, [pc, #32]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072de:	f7fe f8ef 	bl	80054c0 <HAL_GetTick>
 80072e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80072e4:	e00a      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80072e6:	f7fe f8eb 	bl	80054c0 <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b64      	cmp	r3, #100	; 0x64
 80072f2:	d903      	bls.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e0ba      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80072f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80072fc:	4b5e      	ldr	r3, [pc, #376]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007308:	d0ed      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731a:	2b00      	cmp	r3, #0
 800731c:	d009      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007326:	2b00      	cmp	r3, #0
 8007328:	d02e      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	2b00      	cmp	r3, #0
 8007330:	d12a      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007332:	4b51      	ldr	r3, [pc, #324]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007338:	0c1b      	lsrs	r3, r3, #16
 800733a:	f003 0303 	and.w	r3, r3, #3
 800733e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007340:	4b4d      	ldr	r3, [pc, #308]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007346:	0f1b      	lsrs	r3, r3, #28
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	019a      	lsls	r2, r3, #6
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	431a      	orrs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	061b      	lsls	r3, r3, #24
 8007360:	431a      	orrs	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	071b      	lsls	r3, r3, #28
 8007366:	4944      	ldr	r1, [pc, #272]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007368:	4313      	orrs	r3, r2
 800736a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800736e:	4b42      	ldr	r3, [pc, #264]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007374:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737c:	3b01      	subs	r3, #1
 800737e:	021b      	lsls	r3, r3, #8
 8007380:	493d      	ldr	r1, [pc, #244]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007382:	4313      	orrs	r3, r2
 8007384:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d022      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007398:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800739c:	d11d      	bne.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800739e:	4b36      	ldr	r3, [pc, #216]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a4:	0e1b      	lsrs	r3, r3, #24
 80073a6:	f003 030f 	and.w	r3, r3, #15
 80073aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80073ac:	4b32      	ldr	r3, [pc, #200]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b2:	0f1b      	lsrs	r3, r3, #28
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	019a      	lsls	r2, r3, #6
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a1b      	ldr	r3, [r3, #32]
 80073c4:	041b      	lsls	r3, r3, #16
 80073c6:	431a      	orrs	r2, r3
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	061b      	lsls	r3, r3, #24
 80073cc:	431a      	orrs	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	071b      	lsls	r3, r3, #28
 80073d2:	4929      	ldr	r1, [pc, #164]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073d4:	4313      	orrs	r3, r2
 80073d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0308 	and.w	r3, r3, #8
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d028      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80073e6:	4b24      	ldr	r3, [pc, #144]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ec:	0e1b      	lsrs	r3, r3, #24
 80073ee:	f003 030f 	and.w	r3, r3, #15
 80073f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80073f4:	4b20      	ldr	r3, [pc, #128]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fa:	0c1b      	lsrs	r3, r3, #16
 80073fc:	f003 0303 	and.w	r3, r3, #3
 8007400:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	019a      	lsls	r2, r3, #6
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	041b      	lsls	r3, r3, #16
 800740c:	431a      	orrs	r2, r3
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	061b      	lsls	r3, r3, #24
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	071b      	lsls	r3, r3, #28
 800741a:	4917      	ldr	r1, [pc, #92]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800741c:	4313      	orrs	r3, r2
 800741e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007422:	4b15      	ldr	r3, [pc, #84]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007428:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007430:	4911      	ldr	r1, [pc, #68]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007432:	4313      	orrs	r3, r2
 8007434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007438:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a0e      	ldr	r2, [pc, #56]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800743e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007444:	f7fe f83c 	bl	80054c0 <HAL_GetTick>
 8007448:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800744a:	e008      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800744c:	f7fe f838 	bl	80054c0 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	2b64      	cmp	r3, #100	; 0x64
 8007458:	d901      	bls.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e007      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800745e:	4b06      	ldr	r3, [pc, #24]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800746a:	d1ef      	bne.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3720      	adds	r7, #32
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	40023800 	.word	0x40023800

0800747c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e09d      	b.n	80075ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	2b00      	cmp	r3, #0
 8007494:	d108      	bne.n	80074a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800749e:	d009      	beq.n	80074b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	61da      	str	r2, [r3, #28]
 80074a6:	e005      	b.n	80074b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fd f9a2 	bl	8004818 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074f4:	d902      	bls.n	80074fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80074f6:	2300      	movs	r3, #0
 80074f8:	60fb      	str	r3, [r7, #12]
 80074fa:	e002      	b.n	8007502 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80074fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007500:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800750a:	d007      	beq.n	800751c <HAL_SPI_Init+0xa0>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007514:	d002      	beq.n	800751c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	431a      	orrs	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	431a      	orrs	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800754a:	431a      	orrs	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007554:	431a      	orrs	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755e:	ea42 0103 	orr.w	r1, r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007566:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	0c1b      	lsrs	r3, r3, #16
 8007578:	f003 0204 	and.w	r2, r3, #4
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	f003 0310 	and.w	r3, r3, #16
 8007584:	431a      	orrs	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758a:	f003 0308 	and.w	r3, r3, #8
 800758e:	431a      	orrs	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007598:	ea42 0103 	orr.w	r1, r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	69da      	ldr	r2, [r3, #28]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b08a      	sub	sp, #40	; 0x28
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	60f8      	str	r0, [r7, #12]
 80075da:	60b9      	str	r1, [r7, #8]
 80075dc:	607a      	str	r2, [r7, #4]
 80075de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075e0:	2301      	movs	r3, #1
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d101      	bne.n	80075f8 <HAL_SPI_TransmitReceive+0x26>
 80075f4:	2302      	movs	r3, #2
 80075f6:	e1fb      	b.n	80079f0 <HAL_SPI_TransmitReceive+0x41e>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007600:	f7fd ff5e 	bl	80054c0 <HAL_GetTick>
 8007604:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800760c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007614:	887b      	ldrh	r3, [r7, #2]
 8007616:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007618:	887b      	ldrh	r3, [r7, #2]
 800761a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800761c:	7efb      	ldrb	r3, [r7, #27]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d00e      	beq.n	8007640 <HAL_SPI_TransmitReceive+0x6e>
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007628:	d106      	bne.n	8007638 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d102      	bne.n	8007638 <HAL_SPI_TransmitReceive+0x66>
 8007632:	7efb      	ldrb	r3, [r7, #27]
 8007634:	2b04      	cmp	r3, #4
 8007636:	d003      	beq.n	8007640 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007638:	2302      	movs	r3, #2
 800763a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800763e:	e1cd      	b.n	80079dc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d005      	beq.n	8007652 <HAL_SPI_TransmitReceive+0x80>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <HAL_SPI_TransmitReceive+0x80>
 800764c:	887b      	ldrh	r3, [r7, #2]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d103      	bne.n	800765a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007658:	e1c0      	b.n	80079dc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b04      	cmp	r3, #4
 8007664:	d003      	beq.n	800766e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2205      	movs	r2, #5
 800766a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	887a      	ldrh	r2, [r7, #2]
 800767e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	887a      	ldrh	r2, [r7, #2]
 8007686:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	887a      	ldrh	r2, [r7, #2]
 8007694:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	887a      	ldrh	r2, [r7, #2]
 800769a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076b0:	d802      	bhi.n	80076b8 <HAL_SPI_TransmitReceive+0xe6>
 80076b2:	8a3b      	ldrh	r3, [r7, #16]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d908      	bls.n	80076ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076c6:	605a      	str	r2, [r3, #4]
 80076c8:	e007      	b.n	80076da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e4:	2b40      	cmp	r3, #64	; 0x40
 80076e6:	d007      	beq.n	80076f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007700:	d97c      	bls.n	80077fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_SPI_TransmitReceive+0x13e>
 800770a:	8a7b      	ldrh	r3, [r7, #18]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d169      	bne.n	80077e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007714:	881a      	ldrh	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007720:	1c9a      	adds	r2, r3, #2
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800772a:	b29b      	uxth	r3, r3
 800772c:	3b01      	subs	r3, #1
 800772e:	b29a      	uxth	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007734:	e056      	b.n	80077e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b02      	cmp	r3, #2
 8007742:	d11b      	bne.n	800777c <HAL_SPI_TransmitReceive+0x1aa>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007748:	b29b      	uxth	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d016      	beq.n	800777c <HAL_SPI_TransmitReceive+0x1aa>
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	2b01      	cmp	r3, #1
 8007752:	d113      	bne.n	800777c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	881a      	ldrh	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007764:	1c9a      	adds	r2, r3, #2
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b01      	cmp	r3, #1
 8007788:	d11c      	bne.n	80077c4 <HAL_SPI_TransmitReceive+0x1f2>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007790:	b29b      	uxth	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d016      	beq.n	80077c4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a0:	b292      	uxth	r2, r2
 80077a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a8:	1c9a      	adds	r2, r3, #2
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	3b01      	subs	r3, #1
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077c0:	2301      	movs	r3, #1
 80077c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80077c4:	f7fd fe7c 	bl	80054c0 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d807      	bhi.n	80077e4 <HAL_SPI_TransmitReceive+0x212>
 80077d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077da:	d003      	beq.n	80077e4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80077e2:	e0fb      	b.n	80079dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1a3      	bne.n	8007736 <HAL_SPI_TransmitReceive+0x164>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d19d      	bne.n	8007736 <HAL_SPI_TransmitReceive+0x164>
 80077fa:	e0df      	b.n	80079bc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <HAL_SPI_TransmitReceive+0x23a>
 8007804:	8a7b      	ldrh	r3, [r7, #18]
 8007806:	2b01      	cmp	r3, #1
 8007808:	f040 80cb 	bne.w	80079a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007810:	b29b      	uxth	r3, r3
 8007812:	2b01      	cmp	r3, #1
 8007814:	d912      	bls.n	800783c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	881a      	ldrh	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007826:	1c9a      	adds	r2, r3, #2
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007830:	b29b      	uxth	r3, r3
 8007832:	3b02      	subs	r3, #2
 8007834:	b29a      	uxth	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	87da      	strh	r2, [r3, #62]	; 0x3e
 800783a:	e0b2      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	330c      	adds	r3, #12
 8007846:	7812      	ldrb	r2, [r2, #0]
 8007848:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	b29a      	uxth	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007862:	e09e      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b02      	cmp	r3, #2
 8007870:	d134      	bne.n	80078dc <HAL_SPI_TransmitReceive+0x30a>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007876:	b29b      	uxth	r3, r3
 8007878:	2b00      	cmp	r3, #0
 800787a:	d02f      	beq.n	80078dc <HAL_SPI_TransmitReceive+0x30a>
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	2b01      	cmp	r3, #1
 8007880:	d12c      	bne.n	80078dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007886:	b29b      	uxth	r3, r3
 8007888:	2b01      	cmp	r3, #1
 800788a:	d912      	bls.n	80078b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007890:	881a      	ldrh	r2, [r3, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	1c9a      	adds	r2, r3, #2
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	3b02      	subs	r3, #2
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078b0:	e012      	b.n	80078d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	330c      	adds	r3, #12
 80078bc:	7812      	ldrb	r2, [r2, #0]
 80078be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c4:	1c5a      	adds	r2, r3, #1
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	3b01      	subs	r3, #1
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d148      	bne.n	800797c <HAL_SPI_TransmitReceive+0x3aa>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d042      	beq.n	800797c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d923      	bls.n	800794a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68da      	ldr	r2, [r3, #12]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790c:	b292      	uxth	r2, r2
 800790e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007914:	1c9a      	adds	r2, r3, #2
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007920:	b29b      	uxth	r3, r3
 8007922:	3b02      	subs	r3, #2
 8007924:	b29a      	uxth	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007932:	b29b      	uxth	r3, r3
 8007934:	2b01      	cmp	r3, #1
 8007936:	d81f      	bhi.n	8007978 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007946:	605a      	str	r2, [r3, #4]
 8007948:	e016      	b.n	8007978 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f103 020c 	add.w	r2, r3, #12
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	7812      	ldrb	r2, [r2, #0]
 8007958:	b2d2      	uxtb	r2, r2
 800795a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800796c:	b29b      	uxth	r3, r3
 800796e:	3b01      	subs	r3, #1
 8007970:	b29a      	uxth	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007978:	2301      	movs	r3, #1
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800797c:	f7fd fda0 	bl	80054c0 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007988:	429a      	cmp	r2, r3
 800798a:	d803      	bhi.n	8007994 <HAL_SPI_TransmitReceive+0x3c2>
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007992:	d102      	bne.n	800799a <HAL_SPI_TransmitReceive+0x3c8>
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	2b00      	cmp	r3, #0
 8007998:	d103      	bne.n	80079a2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80079a0:	e01c      	b.n	80079dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f47f af5b 	bne.w	8007864 <HAL_SPI_TransmitReceive+0x292>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f47f af54 	bne.w	8007864 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 f937 	bl	8007c34 <SPI_EndRxTxTransaction>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d006      	beq.n	80079da <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2220      	movs	r2, #32
 80079d6:	661a      	str	r2, [r3, #96]	; 0x60
 80079d8:	e000      	b.n	80079dc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80079da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80079ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3728      	adds	r7, #40	; 0x28
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	4613      	mov	r3, r2
 8007a06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a08:	f7fd fd5a 	bl	80054c0 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	1a9b      	subs	r3, r3, r2
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	4413      	add	r3, r2
 8007a16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a18:	f7fd fd52 	bl	80054c0 <HAL_GetTick>
 8007a1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a1e:	4b39      	ldr	r3, [pc, #228]	; (8007b04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	015b      	lsls	r3, r3, #5
 8007a24:	0d1b      	lsrs	r3, r3, #20
 8007a26:	69fa      	ldr	r2, [r7, #28]
 8007a28:	fb02 f303 	mul.w	r3, r2, r3
 8007a2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a2e:	e054      	b.n	8007ada <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a36:	d050      	beq.n	8007ada <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a38:	f7fd fd42 	bl	80054c0 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d902      	bls.n	8007a4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d13d      	bne.n	8007aca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a66:	d111      	bne.n	8007a8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a70:	d004      	beq.n	8007a7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a7a:	d107      	bne.n	8007a8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a94:	d10f      	bne.n	8007ab6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ab4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e017      	b.n	8007afa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	bf0c      	ite	eq
 8007aea:	2301      	moveq	r3, #1
 8007aec:	2300      	movne	r3, #0
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	461a      	mov	r2, r3
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d19b      	bne.n	8007a30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3720      	adds	r7, #32
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20000094 	.word	0x20000094

08007b08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08a      	sub	sp, #40	; 0x28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007b1a:	f7fd fcd1 	bl	80054c0 <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b22:	1a9b      	subs	r3, r3, r2
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	4413      	add	r3, r2
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007b2a:	f7fd fcc9 	bl	80054c0 <HAL_GetTick>
 8007b2e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	330c      	adds	r3, #12
 8007b36:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007b38:	4b3d      	ldr	r3, [pc, #244]	; (8007c30 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	00da      	lsls	r2, r3, #3
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	0d1b      	lsrs	r3, r3, #20
 8007b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b4a:	fb02 f303 	mul.w	r3, r2, r3
 8007b4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007b50:	e060      	b.n	8007c14 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b58:	d107      	bne.n	8007b6a <SPI_WaitFifoStateUntilTimeout+0x62>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d104      	bne.n	8007b6a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b70:	d050      	beq.n	8007c14 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b72:	f7fd fca5 	bl	80054c0 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d902      	bls.n	8007b88 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d13d      	bne.n	8007c04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ba0:	d111      	bne.n	8007bc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007baa:	d004      	beq.n	8007bb6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bb4:	d107      	bne.n	8007bc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bce:	d10f      	bne.n	8007bf0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e010      	b.n	8007c26 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	689a      	ldr	r2, [r3, #8]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d196      	bne.n	8007b52 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3728      	adds	r7, #40	; 0x28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	20000094 	.word	0x20000094

08007c34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b088      	sub	sp, #32
 8007c38:	af02      	add	r7, sp, #8
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7ff ff5b 	bl	8007b08 <SPI_WaitFifoStateUntilTimeout>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d007      	beq.n	8007c68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c5c:	f043 0220 	orr.w	r2, r3, #32
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e046      	b.n	8007cf6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c68:	4b25      	ldr	r3, [pc, #148]	; (8007d00 <SPI_EndRxTxTransaction+0xcc>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a25      	ldr	r2, [pc, #148]	; (8007d04 <SPI_EndRxTxTransaction+0xd0>)
 8007c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c72:	0d5b      	lsrs	r3, r3, #21
 8007c74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c78:	fb02 f303 	mul.w	r3, r2, r3
 8007c7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c86:	d112      	bne.n	8007cae <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	2180      	movs	r1, #128	; 0x80
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7ff feb0 	bl	80079f8 <SPI_WaitFlagStateUntilTimeout>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d016      	beq.n	8007ccc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ca2:	f043 0220 	orr.w	r2, r3, #32
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e023      	b.n	8007cf6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00a      	beq.n	8007cca <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc4:	2b80      	cmp	r3, #128	; 0x80
 8007cc6:	d0f2      	beq.n	8007cae <SPI_EndRxTxTransaction+0x7a>
 8007cc8:	e000      	b.n	8007ccc <SPI_EndRxTxTransaction+0x98>
        break;
 8007cca:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f7ff ff15 	bl	8007b08 <SPI_WaitFifoStateUntilTimeout>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d007      	beq.n	8007cf4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ce8:	f043 0220 	orr.w	r2, r3, #32
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e000      	b.n	8007cf6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3718      	adds	r7, #24
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20000094 	.word	0x20000094
 8007d04:	165e9f81 	.word	0x165e9f81

08007d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e054      	b.n	8007dc4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d111      	bne.n	8007d4a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fdf2 	bl	8008918 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d102      	bne.n	8007d42 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a23      	ldr	r2, [pc, #140]	; (8007dcc <HAL_TIM_Base_Init+0xc4>)
 8007d40:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f000 fca1 	bl	80086a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	080048dd 	.word	0x080048dd

08007dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d001      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e054      	b.n	8007e92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0201 	orr.w	r2, r2, #1
 8007dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a26      	ldr	r2, [pc, #152]	; (8007ea0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d022      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x80>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e12:	d01d      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x80>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a22      	ldr	r2, [pc, #136]	; (8007ea4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d018      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x80>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a21      	ldr	r2, [pc, #132]	; (8007ea8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d013      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x80>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a1f      	ldr	r2, [pc, #124]	; (8007eac <HAL_TIM_Base_Start_IT+0xdc>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d00e      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x80>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a1e      	ldr	r2, [pc, #120]	; (8007eb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d009      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x80>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a1c      	ldr	r2, [pc, #112]	; (8007eb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d004      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x80>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a1b      	ldr	r2, [pc, #108]	; (8007eb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d115      	bne.n	8007e7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689a      	ldr	r2, [r3, #8]
 8007e56:	4b19      	ldr	r3, [pc, #100]	; (8007ebc <HAL_TIM_Base_Start_IT+0xec>)
 8007e58:	4013      	ands	r3, r2
 8007e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2b06      	cmp	r3, #6
 8007e60:	d015      	beq.n	8007e8e <HAL_TIM_Base_Start_IT+0xbe>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e68:	d011      	beq.n	8007e8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f042 0201 	orr.w	r2, r2, #1
 8007e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e7a:	e008      	b.n	8007e8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0201 	orr.w	r2, r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	e000      	b.n	8007e90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40010000 	.word	0x40010000
 8007ea4:	40000400 	.word	0x40000400
 8007ea8:	40000800 	.word	0x40000800
 8007eac:	40000c00 	.word	0x40000c00
 8007eb0:	40010400 	.word	0x40010400
 8007eb4:	40014000 	.word	0x40014000
 8007eb8:	40001800 	.word	0x40001800
 8007ebc:	00010007 	.word	0x00010007

08007ec0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 0201 	bic.w	r2, r2, #1
 8007ed6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6a1a      	ldr	r2, [r3, #32]
 8007ede:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10f      	bne.n	8007f08 <HAL_TIM_Base_Stop_IT+0x48>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6a1a      	ldr	r2, [r3, #32]
 8007eee:	f240 4344 	movw	r3, #1092	; 0x444
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d107      	bne.n	8007f08 <HAL_TIM_Base_Stop_IT+0x48>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0201 	bic.w	r2, r2, #1
 8007f06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d128      	bne.n	8007f86 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d121      	bne.n	8007f86 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f06f 0202 	mvn.w	r2, #2
 8007f4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	f003 0303 	and.w	r3, r3, #3
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d005      	beq.n	8007f6c <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
 8007f6a:	e009      	b.n	8007f80 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b04      	cmp	r3, #4
 8007f92:	d128      	bne.n	8007fe6 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	d121      	bne.n	8007fe6 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f06f 0204 	mvn.w	r2, #4
 8007faa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d005      	beq.n	8007fcc <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	4798      	blx	r3
 8007fca:	e009      	b.n	8007fe0 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	f003 0308 	and.w	r3, r3, #8
 8007ff0:	2b08      	cmp	r3, #8
 8007ff2:	d128      	bne.n	8008046 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f003 0308 	and.w	r3, r3, #8
 8007ffe:	2b08      	cmp	r3, #8
 8008000:	d121      	bne.n	8008046 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f06f 0208 	mvn.w	r2, #8
 800800a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2204      	movs	r2, #4
 8008010:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	f003 0303 	and.w	r3, r3, #3
 800801c:	2b00      	cmp	r3, #0
 800801e:	d005      	beq.n	800802c <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	4798      	blx	r3
 800802a:	e009      	b.n	8008040 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	f003 0310 	and.w	r3, r3, #16
 8008050:	2b10      	cmp	r3, #16
 8008052:	d128      	bne.n	80080a6 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f003 0310 	and.w	r3, r3, #16
 800805e:	2b10      	cmp	r3, #16
 8008060:	d121      	bne.n	80080a6 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f06f 0210 	mvn.w	r2, #16
 800806a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2208      	movs	r2, #8
 8008070:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800807c:	2b00      	cmp	r3, #0
 800807e:	d005      	beq.n	800808c <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	4798      	blx	r3
 800808a:	e009      	b.n	80080a0 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d110      	bne.n	80080d6 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d109      	bne.n	80080d6 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f06f 0201 	mvn.w	r2, #1
 80080ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e0:	2b80      	cmp	r3, #128	; 0x80
 80080e2:	d110      	bne.n	8008106 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ee:	2b80      	cmp	r3, #128	; 0x80
 80080f0:	d109      	bne.n	8008106 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008114:	d110      	bne.n	8008138 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008120:	2b80      	cmp	r3, #128	; 0x80
 8008122:	d109      	bne.n	8008138 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800812c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008142:	2b40      	cmp	r3, #64	; 0x40
 8008144:	d110      	bne.n	8008168 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008150:	2b40      	cmp	r3, #64	; 0x40
 8008152:	d109      	bne.n	8008168 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800815c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	f003 0320 	and.w	r3, r3, #32
 8008172:	2b20      	cmp	r3, #32
 8008174:	d110      	bne.n	8008198 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f003 0320 	and.w	r3, r3, #32
 8008180:	2b20      	cmp	r3, #32
 8008182:	d109      	bne.n	8008198 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f06f 0220 	mvn.w	r2, #32
 800818c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008198:	bf00      	nop
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d101      	bne.n	80081bc <HAL_TIM_ConfigClockSource+0x1c>
 80081b8:	2302      	movs	r3, #2
 80081ba:	e0b4      	b.n	8008326 <HAL_TIM_ConfigClockSource+0x186>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2202      	movs	r2, #2
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	4b56      	ldr	r3, [pc, #344]	; (8008330 <HAL_TIM_ConfigClockSource+0x190>)
 80081d8:	4013      	ands	r3, r2
 80081da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081f4:	d03e      	beq.n	8008274 <HAL_TIM_ConfigClockSource+0xd4>
 80081f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081fa:	f200 8087 	bhi.w	800830c <HAL_TIM_ConfigClockSource+0x16c>
 80081fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008202:	f000 8086 	beq.w	8008312 <HAL_TIM_ConfigClockSource+0x172>
 8008206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800820a:	d87f      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 800820c:	2b70      	cmp	r3, #112	; 0x70
 800820e:	d01a      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0xa6>
 8008210:	2b70      	cmp	r3, #112	; 0x70
 8008212:	d87b      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 8008214:	2b60      	cmp	r3, #96	; 0x60
 8008216:	d050      	beq.n	80082ba <HAL_TIM_ConfigClockSource+0x11a>
 8008218:	2b60      	cmp	r3, #96	; 0x60
 800821a:	d877      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 800821c:	2b50      	cmp	r3, #80	; 0x50
 800821e:	d03c      	beq.n	800829a <HAL_TIM_ConfigClockSource+0xfa>
 8008220:	2b50      	cmp	r3, #80	; 0x50
 8008222:	d873      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 8008224:	2b40      	cmp	r3, #64	; 0x40
 8008226:	d058      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x13a>
 8008228:	2b40      	cmp	r3, #64	; 0x40
 800822a:	d86f      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 800822c:	2b30      	cmp	r3, #48	; 0x30
 800822e:	d064      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x15a>
 8008230:	2b30      	cmp	r3, #48	; 0x30
 8008232:	d86b      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 8008234:	2b20      	cmp	r3, #32
 8008236:	d060      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x15a>
 8008238:	2b20      	cmp	r3, #32
 800823a:	d867      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 800823c:	2b00      	cmp	r3, #0
 800823e:	d05c      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x15a>
 8008240:	2b10      	cmp	r3, #16
 8008242:	d05a      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x15a>
 8008244:	e062      	b.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008256:	f000 fb3f 	bl	80088d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008268:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	609a      	str	r2, [r3, #8]
      break;
 8008272:	e04f      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008284:	f000 fb28 	bl	80088d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008296:	609a      	str	r2, [r3, #8]
      break;
 8008298:	e03c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082a6:	461a      	mov	r2, r3
 80082a8:	f000 fa9c 	bl	80087e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2150      	movs	r1, #80	; 0x50
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 faf5 	bl	80088a2 <TIM_ITRx_SetConfig>
      break;
 80082b8:	e02c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082c6:	461a      	mov	r2, r3
 80082c8:	f000 fabb 	bl	8008842 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2160      	movs	r1, #96	; 0x60
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fae5 	bl	80088a2 <TIM_ITRx_SetConfig>
      break;
 80082d8:	e01c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082e6:	461a      	mov	r2, r3
 80082e8:	f000 fa7c 	bl	80087e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2140      	movs	r1, #64	; 0x40
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fad5 	bl	80088a2 <TIM_ITRx_SetConfig>
      break;
 80082f8:	e00c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4619      	mov	r1, r3
 8008304:	4610      	mov	r0, r2
 8008306:	f000 facc 	bl	80088a2 <TIM_ITRx_SetConfig>
      break;
 800830a:	e003      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
      break;
 8008310:	e000      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008312:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	fffeff88 	.word	0xfffeff88

08008334 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b087      	sub	sp, #28
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	460b      	mov	r3, r1
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e13e      	b.n	8008696 <HAL_TIM_RegisterCallback+0x29a>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800841e:	2b01      	cmp	r3, #1
 8008420:	d101      	bne.n	8008426 <HAL_TIM_RegisterCallback+0x2a>
 8008422:	2302      	movs	r3, #2
 8008424:	e137      	b.n	8008696 <HAL_TIM_RegisterCallback+0x29a>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b01      	cmp	r3, #1
 8008438:	f040 80c2 	bne.w	80085c0 <HAL_TIM_RegisterCallback+0x1c4>
  {
    switch (CallbackID)
 800843c:	7afb      	ldrb	r3, [r7, #11]
 800843e:	2b1b      	cmp	r3, #27
 8008440:	f200 80bb 	bhi.w	80085ba <HAL_TIM_RegisterCallback+0x1be>
 8008444:	a201      	add	r2, pc, #4	; (adr r2, 800844c <HAL_TIM_RegisterCallback+0x50>)
 8008446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844a:	bf00      	nop
 800844c:	080084bd 	.word	0x080084bd
 8008450:	080084c5 	.word	0x080084c5
 8008454:	080084cd 	.word	0x080084cd
 8008458:	080084d5 	.word	0x080084d5
 800845c:	080084dd 	.word	0x080084dd
 8008460:	080084e5 	.word	0x080084e5
 8008464:	080084ed 	.word	0x080084ed
 8008468:	080084f5 	.word	0x080084f5
 800846c:	080084fd 	.word	0x080084fd
 8008470:	08008505 	.word	0x08008505
 8008474:	0800850d 	.word	0x0800850d
 8008478:	08008515 	.word	0x08008515
 800847c:	0800851d 	.word	0x0800851d
 8008480:	08008525 	.word	0x08008525
 8008484:	0800852f 	.word	0x0800852f
 8008488:	08008539 	.word	0x08008539
 800848c:	08008543 	.word	0x08008543
 8008490:	0800854d 	.word	0x0800854d
 8008494:	08008557 	.word	0x08008557
 8008498:	08008561 	.word	0x08008561
 800849c:	0800856b 	.word	0x0800856b
 80084a0:	08008575 	.word	0x08008575
 80084a4:	0800857f 	.word	0x0800857f
 80084a8:	08008589 	.word	0x08008589
 80084ac:	08008593 	.word	0x08008593
 80084b0:	0800859d 	.word	0x0800859d
 80084b4:	080085a7 	.word	0x080085a7
 80084b8:	080085b1 	.word	0x080085b1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80084c2:	e0e3      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80084ca:	e0df      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80084d2:	e0db      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80084da:	e0d7      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80084e2:	e0d3      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80084ea:	e0cf      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80084f2:	e0cb      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80084fa:	e0c7      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008502:	e0c3      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800850a:	e0bf      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008512:	e0bb      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800851a:	e0b7      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008522:	e0b3      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800852c:	e0ae      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8008536:	e0a9      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8008540:	e0a4      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800854a:	e09f      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8008554:	e09a      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800855e:	e095      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8008568:	e090      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8008572:	e08b      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800857c:	e086      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8008586:	e081      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8008590:	e07c      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800859a:	e077      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80085a4:	e072      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 80085ae:	e06d      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 80085b8:	e068      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	75fb      	strb	r3, [r7, #23]
        break;
 80085be:	e065      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d15d      	bne.n	8008688 <HAL_TIM_RegisterCallback+0x28c>
  {
    switch (CallbackID)
 80085cc:	7afb      	ldrb	r3, [r7, #11]
 80085ce:	2b0d      	cmp	r3, #13
 80085d0:	d857      	bhi.n	8008682 <HAL_TIM_RegisterCallback+0x286>
 80085d2:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <HAL_TIM_RegisterCallback+0x1dc>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	08008611 	.word	0x08008611
 80085dc:	08008619 	.word	0x08008619
 80085e0:	08008621 	.word	0x08008621
 80085e4:	08008629 	.word	0x08008629
 80085e8:	08008631 	.word	0x08008631
 80085ec:	08008639 	.word	0x08008639
 80085f0:	08008641 	.word	0x08008641
 80085f4:	08008649 	.word	0x08008649
 80085f8:	08008651 	.word	0x08008651
 80085fc:	08008659 	.word	0x08008659
 8008600:	08008661 	.word	0x08008661
 8008604:	08008669 	.word	0x08008669
 8008608:	08008671 	.word	0x08008671
 800860c:	08008679 	.word	0x08008679
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008616:	e039      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800861e:	e035      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008626:	e031      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800862e:	e02d      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008636:	e029      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800863e:	e025      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008646:	e021      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800864e:	e01d      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008656:	e019      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800865e:	e015      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008666:	e011      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800866e:	e00d      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008676:	e009      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8008680:	e004      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	75fb      	strb	r3, [r7, #23]
        break;
 8008686:	e001      	b.n	800868c <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008694:	7dfb      	ldrb	r3, [r7, #23]
}
 8008696:	4618      	mov	r0, r3
 8008698:	371c      	adds	r7, #28
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop

080086a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a40      	ldr	r2, [pc, #256]	; (80087b8 <TIM_Base_SetConfig+0x114>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d013      	beq.n	80086e4 <TIM_Base_SetConfig+0x40>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086c2:	d00f      	beq.n	80086e4 <TIM_Base_SetConfig+0x40>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a3d      	ldr	r2, [pc, #244]	; (80087bc <TIM_Base_SetConfig+0x118>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d00b      	beq.n	80086e4 <TIM_Base_SetConfig+0x40>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a3c      	ldr	r2, [pc, #240]	; (80087c0 <TIM_Base_SetConfig+0x11c>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d007      	beq.n	80086e4 <TIM_Base_SetConfig+0x40>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a3b      	ldr	r2, [pc, #236]	; (80087c4 <TIM_Base_SetConfig+0x120>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d003      	beq.n	80086e4 <TIM_Base_SetConfig+0x40>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a3a      	ldr	r2, [pc, #232]	; (80087c8 <TIM_Base_SetConfig+0x124>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d108      	bne.n	80086f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a2f      	ldr	r2, [pc, #188]	; (80087b8 <TIM_Base_SetConfig+0x114>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d02b      	beq.n	8008756 <TIM_Base_SetConfig+0xb2>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008704:	d027      	beq.n	8008756 <TIM_Base_SetConfig+0xb2>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a2c      	ldr	r2, [pc, #176]	; (80087bc <TIM_Base_SetConfig+0x118>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d023      	beq.n	8008756 <TIM_Base_SetConfig+0xb2>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a2b      	ldr	r2, [pc, #172]	; (80087c0 <TIM_Base_SetConfig+0x11c>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d01f      	beq.n	8008756 <TIM_Base_SetConfig+0xb2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a2a      	ldr	r2, [pc, #168]	; (80087c4 <TIM_Base_SetConfig+0x120>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d01b      	beq.n	8008756 <TIM_Base_SetConfig+0xb2>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a29      	ldr	r2, [pc, #164]	; (80087c8 <TIM_Base_SetConfig+0x124>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d017      	beq.n	8008756 <TIM_Base_SetConfig+0xb2>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a28      	ldr	r2, [pc, #160]	; (80087cc <TIM_Base_SetConfig+0x128>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d013      	beq.n	8008756 <TIM_Base_SetConfig+0xb2>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a27      	ldr	r2, [pc, #156]	; (80087d0 <TIM_Base_SetConfig+0x12c>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d00f      	beq.n	8008756 <TIM_Base_SetConfig+0xb2>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a26      	ldr	r2, [pc, #152]	; (80087d4 <TIM_Base_SetConfig+0x130>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d00b      	beq.n	8008756 <TIM_Base_SetConfig+0xb2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a25      	ldr	r2, [pc, #148]	; (80087d8 <TIM_Base_SetConfig+0x134>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d007      	beq.n	8008756 <TIM_Base_SetConfig+0xb2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a24      	ldr	r2, [pc, #144]	; (80087dc <TIM_Base_SetConfig+0x138>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d003      	beq.n	8008756 <TIM_Base_SetConfig+0xb2>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a23      	ldr	r2, [pc, #140]	; (80087e0 <TIM_Base_SetConfig+0x13c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d108      	bne.n	8008768 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800875c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	4313      	orrs	r3, r2
 8008766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	4313      	orrs	r3, r2
 8008774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	689a      	ldr	r2, [r3, #8]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a0a      	ldr	r2, [pc, #40]	; (80087b8 <TIM_Base_SetConfig+0x114>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d003      	beq.n	800879c <TIM_Base_SetConfig+0xf8>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a0c      	ldr	r2, [pc, #48]	; (80087c8 <TIM_Base_SetConfig+0x124>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d103      	bne.n	80087a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	691a      	ldr	r2, [r3, #16]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	615a      	str	r2, [r3, #20]
}
 80087aa:	bf00      	nop
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	40010000 	.word	0x40010000
 80087bc:	40000400 	.word	0x40000400
 80087c0:	40000800 	.word	0x40000800
 80087c4:	40000c00 	.word	0x40000c00
 80087c8:	40010400 	.word	0x40010400
 80087cc:	40014000 	.word	0x40014000
 80087d0:	40014400 	.word	0x40014400
 80087d4:	40014800 	.word	0x40014800
 80087d8:	40001800 	.word	0x40001800
 80087dc:	40001c00 	.word	0x40001c00
 80087e0:	40002000 	.word	0x40002000

080087e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b087      	sub	sp, #28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	f023 0201 	bic.w	r2, r3, #1
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800880e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	011b      	lsls	r3, r3, #4
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	4313      	orrs	r3, r2
 8008818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	f023 030a 	bic.w	r3, r3, #10
 8008820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	621a      	str	r2, [r3, #32]
}
 8008836:	bf00      	nop
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008842:	b480      	push	{r7}
 8008844:	b087      	sub	sp, #28
 8008846:	af00      	add	r7, sp, #0
 8008848:	60f8      	str	r0, [r7, #12]
 800884a:	60b9      	str	r1, [r7, #8]
 800884c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	f023 0210 	bic.w	r2, r3, #16
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800886c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	031b      	lsls	r3, r3, #12
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	4313      	orrs	r3, r2
 8008876:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800887e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	011b      	lsls	r3, r3, #4
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4313      	orrs	r3, r2
 8008888:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	697a      	ldr	r2, [r7, #20]
 800888e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	621a      	str	r2, [r3, #32]
}
 8008896:	bf00      	nop
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b085      	sub	sp, #20
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4313      	orrs	r3, r2
 80088c0:	f043 0307 	orr.w	r3, r3, #7
 80088c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	609a      	str	r2, [r3, #8]
}
 80088cc:	bf00      	nop
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
 80088e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	021a      	lsls	r2, r3, #8
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	431a      	orrs	r2, r3
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	4313      	orrs	r3, r2
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	4313      	orrs	r3, r2
 8008904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	609a      	str	r2, [r3, #8]
}
 800890c:	bf00      	nop
 800890e:	371c      	adds	r7, #28
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a1e      	ldr	r2, [pc, #120]	; (800899c <TIM_ResetCallback+0x84>)
 8008924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a1d      	ldr	r2, [pc, #116]	; (80089a0 <TIM_ResetCallback+0x88>)
 800892c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a1c      	ldr	r2, [pc, #112]	; (80089a4 <TIM_ResetCallback+0x8c>)
 8008934:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a1b      	ldr	r2, [pc, #108]	; (80089a8 <TIM_ResetCallback+0x90>)
 800893c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a1a      	ldr	r2, [pc, #104]	; (80089ac <TIM_ResetCallback+0x94>)
 8008944:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a19      	ldr	r2, [pc, #100]	; (80089b0 <TIM_ResetCallback+0x98>)
 800894c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a18      	ldr	r2, [pc, #96]	; (80089b4 <TIM_ResetCallback+0x9c>)
 8008954:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a17      	ldr	r2, [pc, #92]	; (80089b8 <TIM_ResetCallback+0xa0>)
 800895c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a16      	ldr	r2, [pc, #88]	; (80089bc <TIM_ResetCallback+0xa4>)
 8008964:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a15      	ldr	r2, [pc, #84]	; (80089c0 <TIM_ResetCallback+0xa8>)
 800896c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a14      	ldr	r2, [pc, #80]	; (80089c4 <TIM_ResetCallback+0xac>)
 8008974:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a13      	ldr	r2, [pc, #76]	; (80089c8 <TIM_ResetCallback+0xb0>)
 800897c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a12      	ldr	r2, [pc, #72]	; (80089cc <TIM_ResetCallback+0xb4>)
 8008984:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a11      	ldr	r2, [pc, #68]	; (80089d0 <TIM_ResetCallback+0xb8>)
 800898c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	08008335 	.word	0x08008335
 80089a0:	08008349 	.word	0x08008349
 80089a4:	080083c1 	.word	0x080083c1
 80089a8:	080083d5 	.word	0x080083d5
 80089ac:	08008371 	.word	0x08008371
 80089b0:	08008385 	.word	0x08008385
 80089b4:	0800835d 	.word	0x0800835d
 80089b8:	08008399 	.word	0x08008399
 80089bc:	080083ad 	.word	0x080083ad
 80089c0:	080083e9 	.word	0x080083e9
 80089c4:	08008af1 	.word	0x08008af1
 80089c8:	08008b05 	.word	0x08008b05
 80089cc:	08008b19 	.word	0x08008b19
 80089d0:	08008b2d 	.word	0x08008b2d

080089d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d101      	bne.n	80089ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089e8:	2302      	movs	r3, #2
 80089ea:	e06d      	b.n	8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a30      	ldr	r2, [pc, #192]	; (8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d004      	beq.n	8008a20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a2f      	ldr	r2, [pc, #188]	; (8008ad8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d108      	bne.n	8008a32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a20      	ldr	r2, [pc, #128]	; (8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d022      	beq.n	8008a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a5e:	d01d      	beq.n	8008a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a1d      	ldr	r2, [pc, #116]	; (8008adc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d018      	beq.n	8008a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a1c      	ldr	r2, [pc, #112]	; (8008ae0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d013      	beq.n	8008a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a1a      	ldr	r2, [pc, #104]	; (8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d00e      	beq.n	8008a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a15      	ldr	r2, [pc, #84]	; (8008ad8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d009      	beq.n	8008a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a16      	ldr	r2, [pc, #88]	; (8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d004      	beq.n	8008a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a15      	ldr	r2, [pc, #84]	; (8008aec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d10c      	bne.n	8008ab6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	40010000 	.word	0x40010000
 8008ad8:	40010400 	.word	0x40010400
 8008adc:	40000400 	.word	0x40000400
 8008ae0:	40000800 	.word	0x40000800
 8008ae4:	40000c00 	.word	0x40000c00
 8008ae8:	40014000 	.word	0x40014000
 8008aec:	40001800 	.word	0x40001800

08008af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e04e      	b.n	8008bf0 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d114      	bne.n	8008b84 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fe92 	bl	800988c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d103      	bne.n	8008b7a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a20      	ldr	r2, [pc, #128]	; (8008bf8 <HAL_UART_Init+0xb8>)
 8008b76:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2224      	movs	r2, #36	; 0x24
 8008b88:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f022 0201 	bic.w	r2, r2, #1
 8008b98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 feb6 	bl	800990c <UART_SetConfig>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d101      	bne.n	8008baa <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e022      	b.n	8008bf0 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d002      	beq.n	8008bb8 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f001 f90e 	bl	8009dd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	685a      	ldr	r2, [r3, #4]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	689a      	ldr	r2, [r3, #8]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f042 0201 	orr.w	r2, r2, #1
 8008be6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 f995 	bl	8009f18 <UART_CheckIdleState>
 8008bee:	4603      	mov	r3, r0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	08004929 	.word	0x08004929

08008bfc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	460b      	mov	r3, r1
 8008c06:	607a      	str	r2, [r7, #4]
 8008c08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d109      	bne.n	8008c28 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e09a      	b.n	8008d5e <HAL_UART_RegisterCallback+0x162>
  }

  __HAL_LOCK(huart);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d101      	bne.n	8008c36 <HAL_UART_RegisterCallback+0x3a>
 8008c32:	2302      	movs	r3, #2
 8008c34:	e093      	b.n	8008d5e <HAL_UART_RegisterCallback+0x162>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  if (huart->gState == HAL_UART_STATE_READY)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c42:	2b20      	cmp	r3, #32
 8008c44:	d15d      	bne.n	8008d02 <HAL_UART_RegisterCallback+0x106>
  {
    switch (CallbackID)
 8008c46:	7afb      	ldrb	r3, [r7, #11]
 8008c48:	2b0c      	cmp	r3, #12
 8008c4a:	d84f      	bhi.n	8008cec <HAL_UART_RegisterCallback+0xf0>
 8008c4c:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <HAL_UART_RegisterCallback+0x58>)
 8008c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c52:	bf00      	nop
 8008c54:	08008c89 	.word	0x08008c89
 8008c58:	08008c93 	.word	0x08008c93
 8008c5c:	08008c9d 	.word	0x08008c9d
 8008c60:	08008ca7 	.word	0x08008ca7
 8008c64:	08008cb1 	.word	0x08008cb1
 8008c68:	08008cbb 	.word	0x08008cbb
 8008c6c:	08008cc5 	.word	0x08008cc5
 8008c70:	08008ccf 	.word	0x08008ccf
 8008c74:	08008ced 	.word	0x08008ced
 8008c78:	08008ced 	.word	0x08008ced
 8008c7c:	08008ced 	.word	0x08008ced
 8008c80:	08008cd9 	.word	0x08008cd9
 8008c84:	08008ce3 	.word	0x08008ce3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8008c90:	e060      	b.n	8008d54 <HAL_UART_RegisterCallback+0x158>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8008c9a:	e05b      	b.n	8008d54 <HAL_UART_RegisterCallback+0x158>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8008ca4:	e056      	b.n	8008d54 <HAL_UART_RegisterCallback+0x158>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8008cae:	e051      	b.n	8008d54 <HAL_UART_RegisterCallback+0x158>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8008cb8:	e04c      	b.n	8008d54 <HAL_UART_RegisterCallback+0x158>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8008cc2:	e047      	b.n	8008d54 <HAL_UART_RegisterCallback+0x158>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8008ccc:	e042      	b.n	8008d54 <HAL_UART_RegisterCallback+0x158>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8008cd6:	e03d      	b.n	8008d54 <HAL_UART_RegisterCallback+0x158>

#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8008ce0:	e038      	b.n	8008d54 <HAL_UART_RegisterCallback+0x158>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8008cea:	e033      	b.n	8008d54 <HAL_UART_RegisterCallback+0x158>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        status =  HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	75fb      	strb	r3, [r7, #23]
        break;
 8008d00:	e028      	b.n	8008d54 <HAL_UART_RegisterCallback+0x158>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d11a      	bne.n	8008d40 <HAL_UART_RegisterCallback+0x144>
  {
    switch (CallbackID)
 8008d0a:	7afb      	ldrb	r3, [r7, #11]
 8008d0c:	2b0b      	cmp	r3, #11
 8008d0e:	d002      	beq.n	8008d16 <HAL_UART_RegisterCallback+0x11a>
 8008d10:	2b0c      	cmp	r3, #12
 8008d12:	d005      	beq.n	8008d20 <HAL_UART_RegisterCallback+0x124>
 8008d14:	e009      	b.n	8008d2a <HAL_UART_RegisterCallback+0x12e>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8008d1e:	e019      	b.n	8008d54 <HAL_UART_RegisterCallback+0x158>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8008d28:	e014      	b.n	8008d54 <HAL_UART_RegisterCallback+0x158>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        status =  HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	75fb      	strb	r3, [r7, #23]
        break;
 8008d3e:	e009      	b.n	8008d54 <HAL_UART_RegisterCallback+0x158>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    status =  HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(huart);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return status;
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	371c      	adds	r7, #28
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop

08008d6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08a      	sub	sp, #40	; 0x28
 8008d70:	af02      	add	r7, sp, #8
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	603b      	str	r3, [r7, #0]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d80:	2b20      	cmp	r3, #32
 8008d82:	d171      	bne.n	8008e68 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d002      	beq.n	8008d90 <HAL_UART_Transmit+0x24>
 8008d8a:	88fb      	ldrh	r3, [r7, #6]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e06a      	b.n	8008e6a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2221      	movs	r2, #33	; 0x21
 8008da0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008da2:	f7fc fb8d 	bl	80054c0 <HAL_GetTick>
 8008da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	88fa      	ldrh	r2, [r7, #6]
 8008dac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	88fa      	ldrh	r2, [r7, #6]
 8008db4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc0:	d108      	bne.n	8008dd4 <HAL_UART_Transmit+0x68>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d104      	bne.n	8008dd4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	61bb      	str	r3, [r7, #24]
 8008dd2:	e003      	b.n	8008ddc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ddc:	e02c      	b.n	8008e38 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2200      	movs	r2, #0
 8008de6:	2180      	movs	r1, #128	; 0x80
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f001 f8cc 	bl	8009f86 <UART_WaitOnFlagUntilTimeout>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e038      	b.n	8008e6a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10b      	bne.n	8008e16 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	461a      	mov	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	3302      	adds	r3, #2
 8008e12:	61bb      	str	r3, [r7, #24]
 8008e14:	e007      	b.n	8008e26 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	781a      	ldrb	r2, [r3, #0]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	3301      	adds	r3, #1
 8008e24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1cc      	bne.n	8008dde <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2140      	movs	r1, #64	; 0x40
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f001 f899 	bl	8009f86 <UART_WaitOnFlagUntilTimeout>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e005      	b.n	8008e6a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2220      	movs	r2, #32
 8008e62:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	e000      	b.n	8008e6a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008e68:	2302      	movs	r3, #2
  }
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3720      	adds	r7, #32
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b08a      	sub	sp, #40	; 0x28
 8008e76:	af02      	add	r7, sp, #8
 8008e78:	60f8      	str	r0, [r7, #12]
 8008e7a:	60b9      	str	r1, [r7, #8]
 8008e7c:	603b      	str	r3, [r7, #0]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	f040 80b1 	bne.w	8008ff0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d002      	beq.n	8008e9a <HAL_UART_Receive+0x28>
 8008e94:	88fb      	ldrh	r3, [r7, #6]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e0a9      	b.n	8008ff2 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2222      	movs	r2, #34	; 0x22
 8008eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008eb4:	f7fc fb04 	bl	80054c0 <HAL_GetTick>
 8008eb8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	88fa      	ldrh	r2, [r7, #6]
 8008ebe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	88fa      	ldrh	r2, [r7, #6]
 8008ec6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ed2:	d10e      	bne.n	8008ef2 <HAL_UART_Receive+0x80>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d105      	bne.n	8008ee8 <HAL_UART_Receive+0x76>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008ee2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ee6:	e02d      	b.n	8008f44 <HAL_UART_Receive+0xd2>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	22ff      	movs	r2, #255	; 0xff
 8008eec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ef0:	e028      	b.n	8008f44 <HAL_UART_Receive+0xd2>
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10d      	bne.n	8008f16 <HAL_UART_Receive+0xa4>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d104      	bne.n	8008f0c <HAL_UART_Receive+0x9a>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	22ff      	movs	r2, #255	; 0xff
 8008f06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f0a:	e01b      	b.n	8008f44 <HAL_UART_Receive+0xd2>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	227f      	movs	r2, #127	; 0x7f
 8008f10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f14:	e016      	b.n	8008f44 <HAL_UART_Receive+0xd2>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f1e:	d10d      	bne.n	8008f3c <HAL_UART_Receive+0xca>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d104      	bne.n	8008f32 <HAL_UART_Receive+0xc0>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	227f      	movs	r2, #127	; 0x7f
 8008f2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f30:	e008      	b.n	8008f44 <HAL_UART_Receive+0xd2>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	223f      	movs	r2, #63	; 0x3f
 8008f36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f3a:	e003      	b.n	8008f44 <HAL_UART_Receive+0xd2>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f4a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f54:	d108      	bne.n	8008f68 <HAL_UART_Receive+0xf6>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d104      	bne.n	8008f68 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	61bb      	str	r3, [r7, #24]
 8008f66:	e003      	b.n	8008f70 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008f70:	e032      	b.n	8008fd8 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2120      	movs	r1, #32
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f001 f802 	bl	8009f86 <UART_WaitOnFlagUntilTimeout>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e032      	b.n	8008ff2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10c      	bne.n	8008fac <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	8a7b      	ldrh	r3, [r7, #18]
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	3302      	adds	r3, #2
 8008fa8:	61bb      	str	r3, [r7, #24]
 8008faa:	e00c      	b.n	8008fc6 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	8a7b      	ldrh	r3, [r7, #18]
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	4013      	ands	r3, r2
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1c6      	bne.n	8008f72 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2220      	movs	r2, #32
 8008fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	e000      	b.n	8008ff2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8008ff0:	2302      	movs	r3, #2
  }
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3720      	adds	r7, #32
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b08a      	sub	sp, #40	; 0x28
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	60f8      	str	r0, [r7, #12]
 8009002:	60b9      	str	r1, [r7, #8]
 8009004:	4613      	mov	r3, r2
 8009006:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800900e:	2b20      	cmp	r3, #32
 8009010:	d132      	bne.n	8009078 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <HAL_UART_Receive_IT+0x24>
 8009018:	88fb      	ldrh	r3, [r7, #6]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d101      	bne.n	8009022 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e02b      	b.n	800907a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d018      	beq.n	8009068 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	e853 3f00 	ldrex	r3, [r3]
 8009042:	613b      	str	r3, [r7, #16]
   return(result);
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800904a:	627b      	str	r3, [r7, #36]	; 0x24
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	461a      	mov	r2, r3
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	623b      	str	r3, [r7, #32]
 8009056:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009058:	69f9      	ldr	r1, [r7, #28]
 800905a:	6a3a      	ldr	r2, [r7, #32]
 800905c:	e841 2300 	strex	r3, r2, [r1]
 8009060:	61bb      	str	r3, [r7, #24]
   return(result);
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e6      	bne.n	8009036 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009068:	88fb      	ldrh	r3, [r7, #6]
 800906a:	461a      	mov	r2, r3
 800906c:	68b9      	ldr	r1, [r7, #8]
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f001 f850 	bl	800a114 <UART_Start_Receive_IT>
 8009074:	4603      	mov	r3, r0
 8009076:	e000      	b.n	800907a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009078:	2302      	movs	r3, #2
  }
}
 800907a:	4618      	mov	r0, r3
 800907c:	3728      	adds	r7, #40	; 0x28
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
	...

08009084 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b09a      	sub	sp, #104	; 0x68
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009094:	e853 3f00 	ldrex	r3, [r3]
 8009098:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800909a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800909c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090a0:	667b      	str	r3, [r7, #100]	; 0x64
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090aa:	657b      	str	r3, [r7, #84]	; 0x54
 80090ac:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80090b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80090b2:	e841 2300 	strex	r3, r2, [r1]
 80090b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80090b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1e6      	bne.n	800908c <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3308      	adds	r3, #8
 80090c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c8:	e853 3f00 	ldrex	r3, [r3]
 80090cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	f023 0301 	bic.w	r3, r3, #1
 80090d4:	663b      	str	r3, [r7, #96]	; 0x60
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3308      	adds	r3, #8
 80090dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80090de:	643a      	str	r2, [r7, #64]	; 0x40
 80090e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090e6:	e841 2300 	strex	r3, r2, [r1]
 80090ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1e5      	bne.n	80090be <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d118      	bne.n	800912c <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	61fb      	str	r3, [r7, #28]
   return(result);
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	f023 0310 	bic.w	r3, r3, #16
 800910e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	461a      	mov	r2, r3
 8009116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800911a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800911e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e6      	bne.n	80090fa <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009136:	2b40      	cmp	r3, #64	; 0x40
 8009138:	d151      	bne.n	80091de <HAL_UART_AbortReceive_IT+0x15a>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3308      	adds	r3, #8
 8009140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	e853 3f00 	ldrex	r3, [r3]
 8009148:	60bb      	str	r3, [r7, #8]
   return(result);
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009150:	65bb      	str	r3, [r7, #88]	; 0x58
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3308      	adds	r3, #8
 8009158:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800915a:	61ba      	str	r2, [r7, #24]
 800915c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915e:	6979      	ldr	r1, [r7, #20]
 8009160:	69ba      	ldr	r2, [r7, #24]
 8009162:	e841 2300 	strex	r3, r2, [r1]
 8009166:	613b      	str	r3, [r7, #16]
   return(result);
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1e5      	bne.n	800913a <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009172:	2b00      	cmp	r3, #0
 8009174:	d013      	beq.n	800919e <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800917a:	4a27      	ldr	r2, [pc, #156]	; (8009218 <HAL_UART_AbortReceive_IT+0x194>)
 800917c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009182:	4618      	mov	r0, r3
 8009184:	f7fc fe4f 	bl	8005e26 <HAL_DMA_Abort_IT>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d03e      	beq.n	800920c <HAL_UART_AbortReceive_IT+0x188>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009198:	4610      	mov	r0, r2
 800919a:	4798      	blx	r3
 800919c:	e036      	b.n	800920c <HAL_UART_AbortReceive_IT+0x188>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	220f      	movs	r2, #15
 80091b2:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	699a      	ldr	r2, [r3, #24]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f042 0208 	orr.w	r2, r2, #8
 80091c2:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2220      	movs	r2, #32
 80091c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	661a      	str	r2, [r3, #96]	; 0x60

      /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	4798      	blx	r3
 80091dc:	e016      	b.n	800920c <HAL_UART_AbortReceive_IT+0x188>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	220f      	movs	r2, #15
 80091f2:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2220      	movs	r2, #32
 80091f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	661a      	str	r2, [r3, #96]	; 0x60

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	4798      	blx	r3
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3768      	adds	r7, #104	; 0x68
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	0800a399 	.word	0x0800a399

0800921c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b0ba      	sub	sp, #232	; 0xe8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009242:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009246:	f640 030f 	movw	r3, #2063	; 0x80f
 800924a:	4013      	ands	r3, r2
 800924c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009250:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009254:	2b00      	cmp	r3, #0
 8009256:	d115      	bne.n	8009284 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800925c:	f003 0320 	and.w	r3, r3, #32
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00f      	beq.n	8009284 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009268:	f003 0320 	and.w	r3, r3, #32
 800926c:	2b00      	cmp	r3, #0
 800926e:	d009      	beq.n	8009284 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009274:	2b00      	cmp	r3, #0
 8009276:	f000 82a1 	beq.w	80097bc <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	4798      	blx	r3
      }
      return;
 8009282:	e29b      	b.n	80097bc <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 811d 	beq.w	80094c8 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800928e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009292:	f003 0301 	and.w	r3, r3, #1
 8009296:	2b00      	cmp	r3, #0
 8009298:	d106      	bne.n	80092a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800929a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800929e:	4b88      	ldr	r3, [pc, #544]	; (80094c0 <HAL_UART_IRQHandler+0x2a4>)
 80092a0:	4013      	ands	r3, r2
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f000 8110 	beq.w	80094c8 <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d011      	beq.n	80092d8 <HAL_UART_IRQHandler+0xbc>
 80092b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00b      	beq.n	80092d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2201      	movs	r2, #1
 80092c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ce:	f043 0201 	orr.w	r2, r3, #1
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092dc:	f003 0302 	and.w	r3, r3, #2
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d011      	beq.n	8009308 <HAL_UART_IRQHandler+0xec>
 80092e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2202      	movs	r2, #2
 80092f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092fe:	f043 0204 	orr.w	r2, r3, #4
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800930c:	f003 0304 	and.w	r3, r3, #4
 8009310:	2b00      	cmp	r3, #0
 8009312:	d011      	beq.n	8009338 <HAL_UART_IRQHandler+0x11c>
 8009314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009318:	f003 0301 	and.w	r3, r3, #1
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00b      	beq.n	8009338 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2204      	movs	r2, #4
 8009326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800932e:	f043 0202 	orr.w	r2, r3, #2
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800933c:	f003 0308 	and.w	r3, r3, #8
 8009340:	2b00      	cmp	r3, #0
 8009342:	d017      	beq.n	8009374 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009348:	f003 0320 	and.w	r3, r3, #32
 800934c:	2b00      	cmp	r3, #0
 800934e:	d105      	bne.n	800935c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009354:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00b      	beq.n	8009374 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2208      	movs	r2, #8
 8009362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800936a:	f043 0208 	orr.w	r2, r3, #8
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800937c:	2b00      	cmp	r3, #0
 800937e:	d012      	beq.n	80093a6 <HAL_UART_IRQHandler+0x18a>
 8009380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009384:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00c      	beq.n	80093a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800939c:	f043 0220 	orr.w	r2, r3, #32
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f000 8207 	beq.w	80097c0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80093b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093b6:	f003 0320 	and.w	r3, r3, #32
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00d      	beq.n	80093da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80093be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c2:	f003 0320 	and.w	r3, r3, #32
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d007      	beq.n	80093da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d003      	beq.n	80093da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ee:	2b40      	cmp	r3, #64	; 0x40
 80093f0:	d005      	beq.n	80093fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80093f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80093f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d053      	beq.n	80094a6 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 ff4e 	bl	800a2a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940e:	2b40      	cmp	r3, #64	; 0x40
 8009410:	d143      	bne.n	800949a <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	3308      	adds	r3, #8
 8009418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009420:	e853 3f00 	ldrex	r3, [r3]
 8009424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800942c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3308      	adds	r3, #8
 800943a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800943e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009442:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009446:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800944a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800944e:	e841 2300 	strex	r3, r2, [r1]
 8009452:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1d9      	bne.n	8009412 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009462:	2b00      	cmp	r3, #0
 8009464:	d013      	beq.n	800948e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800946a:	4a16      	ldr	r2, [pc, #88]	; (80094c4 <HAL_UART_IRQHandler+0x2a8>)
 800946c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009472:	4618      	mov	r0, r3
 8009474:	f7fc fcd7 	bl	8005e26 <HAL_DMA_Abort_IT>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d01d      	beq.n	80094ba <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009488:	4610      	mov	r0, r2
 800948a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800948c:	e015      	b.n	80094ba <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009498:	e00f      	b.n	80094ba <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a4:	e009      	b.n	80094ba <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80094b8:	e182      	b.n	80097c0 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ba:	bf00      	nop
    return;
 80094bc:	e180      	b.n	80097c0 <HAL_UART_IRQHandler+0x5a4>
 80094be:	bf00      	nop
 80094c0:	04000120 	.word	0x04000120
 80094c4:	0800a369 	.word	0x0800a369

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	f040 8150 	bne.w	8009772 <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80094d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094d6:	f003 0310 	and.w	r3, r3, #16
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 8149 	beq.w	8009772 <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80094e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094e4:	f003 0310 	and.w	r3, r3, #16
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 8142 	beq.w	8009772 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2210      	movs	r2, #16
 80094f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009500:	2b40      	cmp	r3, #64	; 0x40
 8009502:	f040 80b8 	bne.w	8009676 <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009512:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 8154 	beq.w	80097c4 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009522:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009526:	429a      	cmp	r2, r3
 8009528:	f080 814c 	bcs.w	80097c4 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009532:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800953a:	69db      	ldr	r3, [r3, #28]
 800953c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009540:	f000 8086 	beq.w	8009650 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009550:	e853 3f00 	ldrex	r3, [r3]
 8009554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800955c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	461a      	mov	r2, r3
 800956a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800956e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009572:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800957a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800957e:	e841 2300 	strex	r3, r2, [r1]
 8009582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1da      	bne.n	8009544 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	3308      	adds	r3, #8
 8009594:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009598:	e853 3f00 	ldrex	r3, [r3]
 800959c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800959e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095a0:	f023 0301 	bic.w	r3, r3, #1
 80095a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3308      	adds	r3, #8
 80095ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80095b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80095b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80095ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095be:	e841 2300 	strex	r3, r2, [r1]
 80095c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80095c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1e1      	bne.n	800958e <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	3308      	adds	r3, #8
 80095d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095d4:	e853 3f00 	ldrex	r3, [r3]
 80095d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80095da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3308      	adds	r3, #8
 80095ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80095ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80095f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80095f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80095f6:	e841 2300 	strex	r3, r2, [r1]
 80095fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80095fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1e3      	bne.n	80095ca <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2220      	movs	r2, #32
 8009606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009618:	e853 3f00 	ldrex	r3, [r3]
 800961c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800961e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009620:	f023 0310 	bic.w	r3, r3, #16
 8009624:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	461a      	mov	r2, r3
 800962e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009632:	65bb      	str	r3, [r7, #88]	; 0x58
 8009634:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009636:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800963a:	e841 2300 	strex	r3, r2, [r1]
 800963e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1e4      	bne.n	8009610 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800964a:	4618      	mov	r0, r3
 800964c:	f7fc fb7b 	bl	8005d46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 8009668:	b292      	uxth	r2, r2
 800966a:	1a8a      	subs	r2, r1, r2
 800966c:	b292      	uxth	r2, r2
 800966e:	4611      	mov	r1, r2
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009674:	e0a6      	b.n	80097c4 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009682:	b29b      	uxth	r3, r3
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009690:	b29b      	uxth	r3, r3
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 8098 	beq.w	80097c8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8009698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 8093 	beq.w	80097c8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096aa:	e853 3f00 	ldrex	r3, [r3]
 80096ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	461a      	mov	r2, r3
 80096c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096c4:	647b      	str	r3, [r7, #68]	; 0x44
 80096c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096cc:	e841 2300 	strex	r3, r2, [r1]
 80096d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1e4      	bne.n	80096a2 <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	3308      	adds	r3, #8
 80096de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	e853 3f00 	ldrex	r3, [r3]
 80096e6:	623b      	str	r3, [r7, #32]
   return(result);
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	f023 0301 	bic.w	r3, r3, #1
 80096ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3308      	adds	r3, #8
 80096f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80096fc:	633a      	str	r2, [r7, #48]	; 0x30
 80096fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800970a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e3      	bne.n	80096d8 <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2220      	movs	r2, #32
 8009714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	e853 3f00 	ldrex	r3, [r3]
 8009730:	60fb      	str	r3, [r7, #12]
   return(result);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f023 0310 	bic.w	r3, r3, #16
 8009738:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	461a      	mov	r2, r3
 8009742:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009746:	61fb      	str	r3, [r7, #28]
 8009748:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974a:	69b9      	ldr	r1, [r7, #24]
 800974c:	69fa      	ldr	r2, [r7, #28]
 800974e:	e841 2300 	strex	r3, r2, [r1]
 8009752:	617b      	str	r3, [r7, #20]
   return(result);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1e4      	bne.n	8009724 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2202      	movs	r2, #2
 800975e:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009766:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800976a:	4611      	mov	r1, r2
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009770:	e02a      	b.n	80097c8 <HAL_UART_IRQHandler+0x5ac>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00e      	beq.n	800979c <HAL_UART_IRQHandler+0x580>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800977e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009786:	2b00      	cmp	r3, #0
 8009788:	d008      	beq.n	800979c <HAL_UART_IRQHandler+0x580>
  {
    if (huart->TxISR != NULL)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800978e:	2b00      	cmp	r3, #0
 8009790:	d01c      	beq.n	80097cc <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	4798      	blx	r3
    }
    return;
 800979a:	e017      	b.n	80097cc <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800979c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d012      	beq.n	80097ce <HAL_UART_IRQHandler+0x5b2>
 80097a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00c      	beq.n	80097ce <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fe16 	bl	800a3e6 <UART_EndTransmit_IT>
    return;
 80097ba:	e008      	b.n	80097ce <HAL_UART_IRQHandler+0x5b2>
      return;
 80097bc:	bf00      	nop
 80097be:	e006      	b.n	80097ce <HAL_UART_IRQHandler+0x5b2>
    return;
 80097c0:	bf00      	nop
 80097c2:	e004      	b.n	80097ce <HAL_UART_IRQHandler+0x5b2>
      return;
 80097c4:	bf00      	nop
 80097c6:	e002      	b.n	80097ce <HAL_UART_IRQHandler+0x5b2>
      return;
 80097c8:	bf00      	nop
 80097ca:	e000      	b.n	80097ce <HAL_UART_IRQHandler+0x5b2>
    return;
 80097cc:	bf00      	nop
  }

}
 80097ce:	37e8      	adds	r7, #232	; 0xe8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a14      	ldr	r2, [pc, #80]	; (80098e8 <UART_InitCallbacksToDefault+0x5c>)
 8009898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a13      	ldr	r2, [pc, #76]	; (80098ec <UART_InitCallbacksToDefault+0x60>)
 80098a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a12      	ldr	r2, [pc, #72]	; (80098f0 <UART_InitCallbacksToDefault+0x64>)
 80098a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a11      	ldr	r2, [pc, #68]	; (80098f4 <UART_InitCallbacksToDefault+0x68>)
 80098b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a10      	ldr	r2, [pc, #64]	; (80098f8 <UART_InitCallbacksToDefault+0x6c>)
 80098b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a0f      	ldr	r2, [pc, #60]	; (80098fc <UART_InitCallbacksToDefault+0x70>)
 80098c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a0e      	ldr	r2, [pc, #56]	; (8009900 <UART_InitCallbacksToDefault+0x74>)
 80098c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a0d      	ldr	r2, [pc, #52]	; (8009904 <UART_InitCallbacksToDefault+0x78>)
 80098d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a0c      	ldr	r2, [pc, #48]	; (8009908 <UART_InitCallbacksToDefault+0x7c>)
 80098d8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	080097e9 	.word	0x080097e9
 80098ec:	080097d5 	.word	0x080097d5
 80098f0:	08009811 	.word	0x08009811
 80098f4:	080097fd 	.word	0x080097fd
 80098f8:	08009825 	.word	0x08009825
 80098fc:	08009839 	.word	0x08009839
 8009900:	0800984d 	.word	0x0800984d
 8009904:	08009861 	.word	0x08009861
 8009908:	08009875 	.word	0x08009875

0800990c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b088      	sub	sp, #32
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	689a      	ldr	r2, [r3, #8]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	431a      	orrs	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	431a      	orrs	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	4313      	orrs	r3, r2
 800992e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	4ba6      	ldr	r3, [pc, #664]	; (8009bd0 <UART_SetConfig+0x2c4>)
 8009938:	4013      	ands	r3, r2
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	6812      	ldr	r2, [r2, #0]
 800993e:	6979      	ldr	r1, [r7, #20]
 8009940:	430b      	orrs	r3, r1
 8009942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68da      	ldr	r2, [r3, #12]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	430a      	orrs	r2, r1
 8009958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a1b      	ldr	r3, [r3, #32]
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	4313      	orrs	r3, r2
 8009968:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	430a      	orrs	r2, r1
 800997c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a94      	ldr	r2, [pc, #592]	; (8009bd4 <UART_SetConfig+0x2c8>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d120      	bne.n	80099ca <UART_SetConfig+0xbe>
 8009988:	4b93      	ldr	r3, [pc, #588]	; (8009bd8 <UART_SetConfig+0x2cc>)
 800998a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800998e:	f003 0303 	and.w	r3, r3, #3
 8009992:	2b03      	cmp	r3, #3
 8009994:	d816      	bhi.n	80099c4 <UART_SetConfig+0xb8>
 8009996:	a201      	add	r2, pc, #4	; (adr r2, 800999c <UART_SetConfig+0x90>)
 8009998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999c:	080099ad 	.word	0x080099ad
 80099a0:	080099b9 	.word	0x080099b9
 80099a4:	080099b3 	.word	0x080099b3
 80099a8:	080099bf 	.word	0x080099bf
 80099ac:	2301      	movs	r3, #1
 80099ae:	77fb      	strb	r3, [r7, #31]
 80099b0:	e150      	b.n	8009c54 <UART_SetConfig+0x348>
 80099b2:	2302      	movs	r3, #2
 80099b4:	77fb      	strb	r3, [r7, #31]
 80099b6:	e14d      	b.n	8009c54 <UART_SetConfig+0x348>
 80099b8:	2304      	movs	r3, #4
 80099ba:	77fb      	strb	r3, [r7, #31]
 80099bc:	e14a      	b.n	8009c54 <UART_SetConfig+0x348>
 80099be:	2308      	movs	r3, #8
 80099c0:	77fb      	strb	r3, [r7, #31]
 80099c2:	e147      	b.n	8009c54 <UART_SetConfig+0x348>
 80099c4:	2310      	movs	r3, #16
 80099c6:	77fb      	strb	r3, [r7, #31]
 80099c8:	e144      	b.n	8009c54 <UART_SetConfig+0x348>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a83      	ldr	r2, [pc, #524]	; (8009bdc <UART_SetConfig+0x2d0>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d132      	bne.n	8009a3a <UART_SetConfig+0x12e>
 80099d4:	4b80      	ldr	r3, [pc, #512]	; (8009bd8 <UART_SetConfig+0x2cc>)
 80099d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099da:	f003 030c 	and.w	r3, r3, #12
 80099de:	2b0c      	cmp	r3, #12
 80099e0:	d828      	bhi.n	8009a34 <UART_SetConfig+0x128>
 80099e2:	a201      	add	r2, pc, #4	; (adr r2, 80099e8 <UART_SetConfig+0xdc>)
 80099e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e8:	08009a1d 	.word	0x08009a1d
 80099ec:	08009a35 	.word	0x08009a35
 80099f0:	08009a35 	.word	0x08009a35
 80099f4:	08009a35 	.word	0x08009a35
 80099f8:	08009a29 	.word	0x08009a29
 80099fc:	08009a35 	.word	0x08009a35
 8009a00:	08009a35 	.word	0x08009a35
 8009a04:	08009a35 	.word	0x08009a35
 8009a08:	08009a23 	.word	0x08009a23
 8009a0c:	08009a35 	.word	0x08009a35
 8009a10:	08009a35 	.word	0x08009a35
 8009a14:	08009a35 	.word	0x08009a35
 8009a18:	08009a2f 	.word	0x08009a2f
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	77fb      	strb	r3, [r7, #31]
 8009a20:	e118      	b.n	8009c54 <UART_SetConfig+0x348>
 8009a22:	2302      	movs	r3, #2
 8009a24:	77fb      	strb	r3, [r7, #31]
 8009a26:	e115      	b.n	8009c54 <UART_SetConfig+0x348>
 8009a28:	2304      	movs	r3, #4
 8009a2a:	77fb      	strb	r3, [r7, #31]
 8009a2c:	e112      	b.n	8009c54 <UART_SetConfig+0x348>
 8009a2e:	2308      	movs	r3, #8
 8009a30:	77fb      	strb	r3, [r7, #31]
 8009a32:	e10f      	b.n	8009c54 <UART_SetConfig+0x348>
 8009a34:	2310      	movs	r3, #16
 8009a36:	77fb      	strb	r3, [r7, #31]
 8009a38:	e10c      	b.n	8009c54 <UART_SetConfig+0x348>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a68      	ldr	r2, [pc, #416]	; (8009be0 <UART_SetConfig+0x2d4>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d120      	bne.n	8009a86 <UART_SetConfig+0x17a>
 8009a44:	4b64      	ldr	r3, [pc, #400]	; (8009bd8 <UART_SetConfig+0x2cc>)
 8009a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009a4e:	2b30      	cmp	r3, #48	; 0x30
 8009a50:	d013      	beq.n	8009a7a <UART_SetConfig+0x16e>
 8009a52:	2b30      	cmp	r3, #48	; 0x30
 8009a54:	d814      	bhi.n	8009a80 <UART_SetConfig+0x174>
 8009a56:	2b20      	cmp	r3, #32
 8009a58:	d009      	beq.n	8009a6e <UART_SetConfig+0x162>
 8009a5a:	2b20      	cmp	r3, #32
 8009a5c:	d810      	bhi.n	8009a80 <UART_SetConfig+0x174>
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d002      	beq.n	8009a68 <UART_SetConfig+0x15c>
 8009a62:	2b10      	cmp	r3, #16
 8009a64:	d006      	beq.n	8009a74 <UART_SetConfig+0x168>
 8009a66:	e00b      	b.n	8009a80 <UART_SetConfig+0x174>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	77fb      	strb	r3, [r7, #31]
 8009a6c:	e0f2      	b.n	8009c54 <UART_SetConfig+0x348>
 8009a6e:	2302      	movs	r3, #2
 8009a70:	77fb      	strb	r3, [r7, #31]
 8009a72:	e0ef      	b.n	8009c54 <UART_SetConfig+0x348>
 8009a74:	2304      	movs	r3, #4
 8009a76:	77fb      	strb	r3, [r7, #31]
 8009a78:	e0ec      	b.n	8009c54 <UART_SetConfig+0x348>
 8009a7a:	2308      	movs	r3, #8
 8009a7c:	77fb      	strb	r3, [r7, #31]
 8009a7e:	e0e9      	b.n	8009c54 <UART_SetConfig+0x348>
 8009a80:	2310      	movs	r3, #16
 8009a82:	77fb      	strb	r3, [r7, #31]
 8009a84:	e0e6      	b.n	8009c54 <UART_SetConfig+0x348>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a56      	ldr	r2, [pc, #344]	; (8009be4 <UART_SetConfig+0x2d8>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d120      	bne.n	8009ad2 <UART_SetConfig+0x1c6>
 8009a90:	4b51      	ldr	r3, [pc, #324]	; (8009bd8 <UART_SetConfig+0x2cc>)
 8009a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8009a9c:	d013      	beq.n	8009ac6 <UART_SetConfig+0x1ba>
 8009a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8009aa0:	d814      	bhi.n	8009acc <UART_SetConfig+0x1c0>
 8009aa2:	2b80      	cmp	r3, #128	; 0x80
 8009aa4:	d009      	beq.n	8009aba <UART_SetConfig+0x1ae>
 8009aa6:	2b80      	cmp	r3, #128	; 0x80
 8009aa8:	d810      	bhi.n	8009acc <UART_SetConfig+0x1c0>
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d002      	beq.n	8009ab4 <UART_SetConfig+0x1a8>
 8009aae:	2b40      	cmp	r3, #64	; 0x40
 8009ab0:	d006      	beq.n	8009ac0 <UART_SetConfig+0x1b4>
 8009ab2:	e00b      	b.n	8009acc <UART_SetConfig+0x1c0>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	77fb      	strb	r3, [r7, #31]
 8009ab8:	e0cc      	b.n	8009c54 <UART_SetConfig+0x348>
 8009aba:	2302      	movs	r3, #2
 8009abc:	77fb      	strb	r3, [r7, #31]
 8009abe:	e0c9      	b.n	8009c54 <UART_SetConfig+0x348>
 8009ac0:	2304      	movs	r3, #4
 8009ac2:	77fb      	strb	r3, [r7, #31]
 8009ac4:	e0c6      	b.n	8009c54 <UART_SetConfig+0x348>
 8009ac6:	2308      	movs	r3, #8
 8009ac8:	77fb      	strb	r3, [r7, #31]
 8009aca:	e0c3      	b.n	8009c54 <UART_SetConfig+0x348>
 8009acc:	2310      	movs	r3, #16
 8009ace:	77fb      	strb	r3, [r7, #31]
 8009ad0:	e0c0      	b.n	8009c54 <UART_SetConfig+0x348>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a44      	ldr	r2, [pc, #272]	; (8009be8 <UART_SetConfig+0x2dc>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d125      	bne.n	8009b28 <UART_SetConfig+0x21c>
 8009adc:	4b3e      	ldr	r3, [pc, #248]	; (8009bd8 <UART_SetConfig+0x2cc>)
 8009ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009aea:	d017      	beq.n	8009b1c <UART_SetConfig+0x210>
 8009aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009af0:	d817      	bhi.n	8009b22 <UART_SetConfig+0x216>
 8009af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009af6:	d00b      	beq.n	8009b10 <UART_SetConfig+0x204>
 8009af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009afc:	d811      	bhi.n	8009b22 <UART_SetConfig+0x216>
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d003      	beq.n	8009b0a <UART_SetConfig+0x1fe>
 8009b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b06:	d006      	beq.n	8009b16 <UART_SetConfig+0x20a>
 8009b08:	e00b      	b.n	8009b22 <UART_SetConfig+0x216>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	77fb      	strb	r3, [r7, #31]
 8009b0e:	e0a1      	b.n	8009c54 <UART_SetConfig+0x348>
 8009b10:	2302      	movs	r3, #2
 8009b12:	77fb      	strb	r3, [r7, #31]
 8009b14:	e09e      	b.n	8009c54 <UART_SetConfig+0x348>
 8009b16:	2304      	movs	r3, #4
 8009b18:	77fb      	strb	r3, [r7, #31]
 8009b1a:	e09b      	b.n	8009c54 <UART_SetConfig+0x348>
 8009b1c:	2308      	movs	r3, #8
 8009b1e:	77fb      	strb	r3, [r7, #31]
 8009b20:	e098      	b.n	8009c54 <UART_SetConfig+0x348>
 8009b22:	2310      	movs	r3, #16
 8009b24:	77fb      	strb	r3, [r7, #31]
 8009b26:	e095      	b.n	8009c54 <UART_SetConfig+0x348>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a2f      	ldr	r2, [pc, #188]	; (8009bec <UART_SetConfig+0x2e0>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d125      	bne.n	8009b7e <UART_SetConfig+0x272>
 8009b32:	4b29      	ldr	r3, [pc, #164]	; (8009bd8 <UART_SetConfig+0x2cc>)
 8009b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009b3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b40:	d017      	beq.n	8009b72 <UART_SetConfig+0x266>
 8009b42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b46:	d817      	bhi.n	8009b78 <UART_SetConfig+0x26c>
 8009b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b4c:	d00b      	beq.n	8009b66 <UART_SetConfig+0x25a>
 8009b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b52:	d811      	bhi.n	8009b78 <UART_SetConfig+0x26c>
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d003      	beq.n	8009b60 <UART_SetConfig+0x254>
 8009b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b5c:	d006      	beq.n	8009b6c <UART_SetConfig+0x260>
 8009b5e:	e00b      	b.n	8009b78 <UART_SetConfig+0x26c>
 8009b60:	2301      	movs	r3, #1
 8009b62:	77fb      	strb	r3, [r7, #31]
 8009b64:	e076      	b.n	8009c54 <UART_SetConfig+0x348>
 8009b66:	2302      	movs	r3, #2
 8009b68:	77fb      	strb	r3, [r7, #31]
 8009b6a:	e073      	b.n	8009c54 <UART_SetConfig+0x348>
 8009b6c:	2304      	movs	r3, #4
 8009b6e:	77fb      	strb	r3, [r7, #31]
 8009b70:	e070      	b.n	8009c54 <UART_SetConfig+0x348>
 8009b72:	2308      	movs	r3, #8
 8009b74:	77fb      	strb	r3, [r7, #31]
 8009b76:	e06d      	b.n	8009c54 <UART_SetConfig+0x348>
 8009b78:	2310      	movs	r3, #16
 8009b7a:	77fb      	strb	r3, [r7, #31]
 8009b7c:	e06a      	b.n	8009c54 <UART_SetConfig+0x348>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a1b      	ldr	r2, [pc, #108]	; (8009bf0 <UART_SetConfig+0x2e4>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d138      	bne.n	8009bfa <UART_SetConfig+0x2ee>
 8009b88:	4b13      	ldr	r3, [pc, #76]	; (8009bd8 <UART_SetConfig+0x2cc>)
 8009b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b8e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009b92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b96:	d017      	beq.n	8009bc8 <UART_SetConfig+0x2bc>
 8009b98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b9c:	d82a      	bhi.n	8009bf4 <UART_SetConfig+0x2e8>
 8009b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ba2:	d00b      	beq.n	8009bbc <UART_SetConfig+0x2b0>
 8009ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ba8:	d824      	bhi.n	8009bf4 <UART_SetConfig+0x2e8>
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d003      	beq.n	8009bb6 <UART_SetConfig+0x2aa>
 8009bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bb2:	d006      	beq.n	8009bc2 <UART_SetConfig+0x2b6>
 8009bb4:	e01e      	b.n	8009bf4 <UART_SetConfig+0x2e8>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	77fb      	strb	r3, [r7, #31]
 8009bba:	e04b      	b.n	8009c54 <UART_SetConfig+0x348>
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	77fb      	strb	r3, [r7, #31]
 8009bc0:	e048      	b.n	8009c54 <UART_SetConfig+0x348>
 8009bc2:	2304      	movs	r3, #4
 8009bc4:	77fb      	strb	r3, [r7, #31]
 8009bc6:	e045      	b.n	8009c54 <UART_SetConfig+0x348>
 8009bc8:	2308      	movs	r3, #8
 8009bca:	77fb      	strb	r3, [r7, #31]
 8009bcc:	e042      	b.n	8009c54 <UART_SetConfig+0x348>
 8009bce:	bf00      	nop
 8009bd0:	efff69f3 	.word	0xefff69f3
 8009bd4:	40011000 	.word	0x40011000
 8009bd8:	40023800 	.word	0x40023800
 8009bdc:	40004400 	.word	0x40004400
 8009be0:	40004800 	.word	0x40004800
 8009be4:	40004c00 	.word	0x40004c00
 8009be8:	40005000 	.word	0x40005000
 8009bec:	40011400 	.word	0x40011400
 8009bf0:	40007800 	.word	0x40007800
 8009bf4:	2310      	movs	r3, #16
 8009bf6:	77fb      	strb	r3, [r7, #31]
 8009bf8:	e02c      	b.n	8009c54 <UART_SetConfig+0x348>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a72      	ldr	r2, [pc, #456]	; (8009dc8 <UART_SetConfig+0x4bc>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d125      	bne.n	8009c50 <UART_SetConfig+0x344>
 8009c04:	4b71      	ldr	r3, [pc, #452]	; (8009dcc <UART_SetConfig+0x4c0>)
 8009c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009c0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009c12:	d017      	beq.n	8009c44 <UART_SetConfig+0x338>
 8009c14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009c18:	d817      	bhi.n	8009c4a <UART_SetConfig+0x33e>
 8009c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c1e:	d00b      	beq.n	8009c38 <UART_SetConfig+0x32c>
 8009c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c24:	d811      	bhi.n	8009c4a <UART_SetConfig+0x33e>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <UART_SetConfig+0x326>
 8009c2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c2e:	d006      	beq.n	8009c3e <UART_SetConfig+0x332>
 8009c30:	e00b      	b.n	8009c4a <UART_SetConfig+0x33e>
 8009c32:	2300      	movs	r3, #0
 8009c34:	77fb      	strb	r3, [r7, #31]
 8009c36:	e00d      	b.n	8009c54 <UART_SetConfig+0x348>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	77fb      	strb	r3, [r7, #31]
 8009c3c:	e00a      	b.n	8009c54 <UART_SetConfig+0x348>
 8009c3e:	2304      	movs	r3, #4
 8009c40:	77fb      	strb	r3, [r7, #31]
 8009c42:	e007      	b.n	8009c54 <UART_SetConfig+0x348>
 8009c44:	2308      	movs	r3, #8
 8009c46:	77fb      	strb	r3, [r7, #31]
 8009c48:	e004      	b.n	8009c54 <UART_SetConfig+0x348>
 8009c4a:	2310      	movs	r3, #16
 8009c4c:	77fb      	strb	r3, [r7, #31]
 8009c4e:	e001      	b.n	8009c54 <UART_SetConfig+0x348>
 8009c50:	2310      	movs	r3, #16
 8009c52:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c5c:	d15b      	bne.n	8009d16 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009c5e:	7ffb      	ldrb	r3, [r7, #31]
 8009c60:	2b08      	cmp	r3, #8
 8009c62:	d828      	bhi.n	8009cb6 <UART_SetConfig+0x3aa>
 8009c64:	a201      	add	r2, pc, #4	; (adr r2, 8009c6c <UART_SetConfig+0x360>)
 8009c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6a:	bf00      	nop
 8009c6c:	08009c91 	.word	0x08009c91
 8009c70:	08009c99 	.word	0x08009c99
 8009c74:	08009ca1 	.word	0x08009ca1
 8009c78:	08009cb7 	.word	0x08009cb7
 8009c7c:	08009ca7 	.word	0x08009ca7
 8009c80:	08009cb7 	.word	0x08009cb7
 8009c84:	08009cb7 	.word	0x08009cb7
 8009c88:	08009cb7 	.word	0x08009cb7
 8009c8c:	08009caf 	.word	0x08009caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c90:	f7fc ffdc 	bl	8006c4c <HAL_RCC_GetPCLK1Freq>
 8009c94:	61b8      	str	r0, [r7, #24]
        break;
 8009c96:	e013      	b.n	8009cc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c98:	f7fc ffec 	bl	8006c74 <HAL_RCC_GetPCLK2Freq>
 8009c9c:	61b8      	str	r0, [r7, #24]
        break;
 8009c9e:	e00f      	b.n	8009cc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ca0:	4b4b      	ldr	r3, [pc, #300]	; (8009dd0 <UART_SetConfig+0x4c4>)
 8009ca2:	61bb      	str	r3, [r7, #24]
        break;
 8009ca4:	e00c      	b.n	8009cc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ca6:	f7fc febf 	bl	8006a28 <HAL_RCC_GetSysClockFreq>
 8009caa:	61b8      	str	r0, [r7, #24]
        break;
 8009cac:	e008      	b.n	8009cc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cb2:	61bb      	str	r3, [r7, #24]
        break;
 8009cb4:	e004      	b.n	8009cc0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	77bb      	strb	r3, [r7, #30]
        break;
 8009cbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d074      	beq.n	8009db0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	005a      	lsls	r2, r3, #1
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	085b      	lsrs	r3, r3, #1
 8009cd0:	441a      	add	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	2b0f      	cmp	r3, #15
 8009ce0:	d916      	bls.n	8009d10 <UART_SetConfig+0x404>
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ce8:	d212      	bcs.n	8009d10 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	f023 030f 	bic.w	r3, r3, #15
 8009cf2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	085b      	lsrs	r3, r3, #1
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	f003 0307 	and.w	r3, r3, #7
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	89fb      	ldrh	r3, [r7, #14]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	89fa      	ldrh	r2, [r7, #14]
 8009d0c:	60da      	str	r2, [r3, #12]
 8009d0e:	e04f      	b.n	8009db0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	77bb      	strb	r3, [r7, #30]
 8009d14:	e04c      	b.n	8009db0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d16:	7ffb      	ldrb	r3, [r7, #31]
 8009d18:	2b08      	cmp	r3, #8
 8009d1a:	d828      	bhi.n	8009d6e <UART_SetConfig+0x462>
 8009d1c:	a201      	add	r2, pc, #4	; (adr r2, 8009d24 <UART_SetConfig+0x418>)
 8009d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d22:	bf00      	nop
 8009d24:	08009d49 	.word	0x08009d49
 8009d28:	08009d51 	.word	0x08009d51
 8009d2c:	08009d59 	.word	0x08009d59
 8009d30:	08009d6f 	.word	0x08009d6f
 8009d34:	08009d5f 	.word	0x08009d5f
 8009d38:	08009d6f 	.word	0x08009d6f
 8009d3c:	08009d6f 	.word	0x08009d6f
 8009d40:	08009d6f 	.word	0x08009d6f
 8009d44:	08009d67 	.word	0x08009d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d48:	f7fc ff80 	bl	8006c4c <HAL_RCC_GetPCLK1Freq>
 8009d4c:	61b8      	str	r0, [r7, #24]
        break;
 8009d4e:	e013      	b.n	8009d78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d50:	f7fc ff90 	bl	8006c74 <HAL_RCC_GetPCLK2Freq>
 8009d54:	61b8      	str	r0, [r7, #24]
        break;
 8009d56:	e00f      	b.n	8009d78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d58:	4b1d      	ldr	r3, [pc, #116]	; (8009dd0 <UART_SetConfig+0x4c4>)
 8009d5a:	61bb      	str	r3, [r7, #24]
        break;
 8009d5c:	e00c      	b.n	8009d78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d5e:	f7fc fe63 	bl	8006a28 <HAL_RCC_GetSysClockFreq>
 8009d62:	61b8      	str	r0, [r7, #24]
        break;
 8009d64:	e008      	b.n	8009d78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d6a:	61bb      	str	r3, [r7, #24]
        break;
 8009d6c:	e004      	b.n	8009d78 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	77bb      	strb	r3, [r7, #30]
        break;
 8009d76:	bf00      	nop
    }

    if (pclk != 0U)
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d018      	beq.n	8009db0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	085a      	lsrs	r2, r3, #1
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	441a      	add	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	2b0f      	cmp	r3, #15
 8009d96:	d909      	bls.n	8009dac <UART_SetConfig+0x4a0>
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d9e:	d205      	bcs.n	8009dac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	60da      	str	r2, [r3, #12]
 8009daa:	e001      	b.n	8009db0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009dbc:	7fbb      	ldrb	r3, [r7, #30]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3720      	adds	r7, #32
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	40007c00 	.word	0x40007c00
 8009dcc:	40023800 	.word	0x40023800
 8009dd0:	00f42400 	.word	0x00f42400

08009dd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00a      	beq.n	8009dfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e02:	f003 0302 	and.w	r3, r3, #2
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00a      	beq.n	8009e20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	430a      	orrs	r2, r1
 8009e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e24:	f003 0304 	and.w	r3, r3, #4
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00a      	beq.n	8009e42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e46:	f003 0308 	and.w	r3, r3, #8
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00a      	beq.n	8009e64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	430a      	orrs	r2, r1
 8009e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e68:	f003 0310 	and.w	r3, r3, #16
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00a      	beq.n	8009e86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	430a      	orrs	r2, r1
 8009e84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8a:	f003 0320 	and.w	r3, r3, #32
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00a      	beq.n	8009ea8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	430a      	orrs	r2, r1
 8009ea6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d01a      	beq.n	8009eea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	430a      	orrs	r2, r1
 8009ec8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ed2:	d10a      	bne.n	8009eea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	430a      	orrs	r2, r1
 8009f0a:	605a      	str	r2, [r3, #4]
  }
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af02      	add	r7, sp, #8
 8009f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f28:	f7fb faca 	bl	80054c0 <HAL_GetTick>
 8009f2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 0308 	and.w	r3, r3, #8
 8009f38:	2b08      	cmp	r3, #8
 8009f3a:	d10e      	bne.n	8009f5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f81b 	bl	8009f86 <UART_WaitOnFlagUntilTimeout>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f56:	2303      	movs	r3, #3
 8009f58:	e011      	b.n	8009f7e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2220      	movs	r2, #32
 8009f5e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2220      	movs	r2, #32
 8009f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b09c      	sub	sp, #112	; 0x70
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	60f8      	str	r0, [r7, #12]
 8009f8e:	60b9      	str	r1, [r7, #8]
 8009f90:	603b      	str	r3, [r7, #0]
 8009f92:	4613      	mov	r3, r2
 8009f94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f96:	e0a7      	b.n	800a0e8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f9e:	f000 80a3 	beq.w	800a0e8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fa2:	f7fb fa8d 	bl	80054c0 <HAL_GetTick>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d302      	bcc.n	8009fb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8009fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d13f      	bne.n	800a038 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fc0:	e853 3f00 	ldrex	r3, [r3]
 8009fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009fcc:	667b      	str	r3, [r7, #100]	; 0x64
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fd8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009fde:	e841 2300 	strex	r3, r2, [r1]
 8009fe2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1e6      	bne.n	8009fb8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3308      	adds	r3, #8
 8009ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff4:	e853 3f00 	ldrex	r3, [r3]
 8009ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffc:	f023 0301 	bic.w	r3, r3, #1
 800a000:	663b      	str	r3, [r7, #96]	; 0x60
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3308      	adds	r3, #8
 800a008:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a00a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a00c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a010:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a012:	e841 2300 	strex	r3, r2, [r1]
 800a016:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1e5      	bne.n	8009fea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2220      	movs	r2, #32
 800a022:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2220      	movs	r2, #32
 800a028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a034:	2303      	movs	r3, #3
 800a036:	e068      	b.n	800a10a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 0304 	and.w	r3, r3, #4
 800a042:	2b00      	cmp	r3, #0
 800a044:	d050      	beq.n	800a0e8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	69db      	ldr	r3, [r3, #28]
 800a04c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a054:	d148      	bne.n	800a0e8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a05e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a068:	e853 3f00 	ldrex	r3, [r3]
 800a06c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a070:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a074:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	461a      	mov	r2, r3
 800a07c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a07e:	637b      	str	r3, [r7, #52]	; 0x34
 800a080:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a082:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a084:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a086:	e841 2300 	strex	r3, r2, [r1]
 800a08a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1e6      	bne.n	800a060 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3308      	adds	r3, #8
 800a098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	e853 3f00 	ldrex	r3, [r3]
 800a0a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	f023 0301 	bic.w	r3, r3, #1
 800a0a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	3308      	adds	r3, #8
 800a0b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a0b2:	623a      	str	r2, [r7, #32]
 800a0b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b6:	69f9      	ldr	r1, [r7, #28]
 800a0b8:	6a3a      	ldr	r2, [r7, #32]
 800a0ba:	e841 2300 	strex	r3, r2, [r1]
 800a0be:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1e5      	bne.n	800a092 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2220      	movs	r2, #32
 800a0ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2220      	movs	r2, #32
 800a0d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2220      	movs	r2, #32
 800a0d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e010      	b.n	800a10a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	69da      	ldr	r2, [r3, #28]
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	bf0c      	ite	eq
 800a0f8:	2301      	moveq	r3, #1
 800a0fa:	2300      	movne	r3, #0
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	461a      	mov	r2, r3
 800a100:	79fb      	ldrb	r3, [r7, #7]
 800a102:	429a      	cmp	r2, r3
 800a104:	f43f af48 	beq.w	8009f98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3770      	adds	r7, #112	; 0x70
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a114:	b480      	push	{r7}
 800a116:	b097      	sub	sp, #92	; 0x5c
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	4613      	mov	r3, r2
 800a120:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	88fa      	ldrh	r2, [r7, #6]
 800a12c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	88fa      	ldrh	r2, [r7, #6]
 800a134:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a146:	d10e      	bne.n	800a166 <UART_Start_Receive_IT+0x52>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d105      	bne.n	800a15c <UART_Start_Receive_IT+0x48>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a156:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a15a:	e02d      	b.n	800a1b8 <UART_Start_Receive_IT+0xa4>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	22ff      	movs	r2, #255	; 0xff
 800a160:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a164:	e028      	b.n	800a1b8 <UART_Start_Receive_IT+0xa4>
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d10d      	bne.n	800a18a <UART_Start_Receive_IT+0x76>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d104      	bne.n	800a180 <UART_Start_Receive_IT+0x6c>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	22ff      	movs	r2, #255	; 0xff
 800a17a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a17e:	e01b      	b.n	800a1b8 <UART_Start_Receive_IT+0xa4>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	227f      	movs	r2, #127	; 0x7f
 800a184:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a188:	e016      	b.n	800a1b8 <UART_Start_Receive_IT+0xa4>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a192:	d10d      	bne.n	800a1b0 <UART_Start_Receive_IT+0x9c>
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d104      	bne.n	800a1a6 <UART_Start_Receive_IT+0x92>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	227f      	movs	r2, #127	; 0x7f
 800a1a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a1a4:	e008      	b.n	800a1b8 <UART_Start_Receive_IT+0xa4>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	223f      	movs	r2, #63	; 0x3f
 800a1aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a1ae:	e003      	b.n	800a1b8 <UART_Start_Receive_IT+0xa4>
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2222      	movs	r2, #34	; 0x22
 800a1c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1d2:	e853 3f00 	ldrex	r3, [r3]
 800a1d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1da:	f043 0301 	orr.w	r3, r3, #1
 800a1de:	657b      	str	r3, [r7, #84]	; 0x54
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3308      	adds	r3, #8
 800a1e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a1e8:	64ba      	str	r2, [r7, #72]	; 0x48
 800a1ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1f0:	e841 2300 	strex	r3, r2, [r1]
 800a1f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a1f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1e5      	bne.n	800a1c8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a204:	d107      	bne.n	800a216 <UART_Start_Receive_IT+0x102>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d103      	bne.n	800a216 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	4a21      	ldr	r2, [pc, #132]	; (800a298 <UART_Start_Receive_IT+0x184>)
 800a212:	669a      	str	r2, [r3, #104]	; 0x68
 800a214:	e002      	b.n	800a21c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4a20      	ldr	r2, [pc, #128]	; (800a29c <UART_Start_Receive_IT+0x188>)
 800a21a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d019      	beq.n	800a258 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22c:	e853 3f00 	ldrex	r3, [r3]
 800a230:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a234:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a242:	637b      	str	r3, [r7, #52]	; 0x34
 800a244:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a246:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a24a:	e841 2300 	strex	r3, r2, [r1]
 800a24e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1e6      	bne.n	800a224 <UART_Start_Receive_IT+0x110>
 800a256:	e018      	b.n	800a28a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	e853 3f00 	ldrex	r3, [r3]
 800a264:	613b      	str	r3, [r7, #16]
   return(result);
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	f043 0320 	orr.w	r3, r3, #32
 800a26c:	653b      	str	r3, [r7, #80]	; 0x50
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	461a      	mov	r2, r3
 800a274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a276:	623b      	str	r3, [r7, #32]
 800a278:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27a:	69f9      	ldr	r1, [r7, #28]
 800a27c:	6a3a      	ldr	r2, [r7, #32]
 800a27e:	e841 2300 	strex	r3, r2, [r1]
 800a282:	61bb      	str	r3, [r7, #24]
   return(result);
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1e6      	bne.n	800a258 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	375c      	adds	r7, #92	; 0x5c
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr
 800a298:	0800a5ad 	.word	0x0800a5ad
 800a29c:	0800a43f 	.word	0x0800a43f

0800a2a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b095      	sub	sp, #84	; 0x54
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b0:	e853 3f00 	ldrex	r3, [r3]
 800a2b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2c6:	643b      	str	r3, [r7, #64]	; 0x40
 800a2c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2ce:	e841 2300 	strex	r3, r2, [r1]
 800a2d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1e6      	bne.n	800a2a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	3308      	adds	r3, #8
 800a2e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e2:	6a3b      	ldr	r3, [r7, #32]
 800a2e4:	e853 3f00 	ldrex	r3, [r3]
 800a2e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	f023 0301 	bic.w	r3, r3, #1
 800a2f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3308      	adds	r3, #8
 800a2f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a302:	e841 2300 	strex	r3, r2, [r1]
 800a306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1e5      	bne.n	800a2da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a312:	2b01      	cmp	r3, #1
 800a314:	d118      	bne.n	800a348 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	e853 3f00 	ldrex	r3, [r3]
 800a322:	60bb      	str	r3, [r7, #8]
   return(result);
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	f023 0310 	bic.w	r3, r3, #16
 800a32a:	647b      	str	r3, [r7, #68]	; 0x44
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	461a      	mov	r2, r3
 800a332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a334:	61bb      	str	r3, [r7, #24]
 800a336:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a338:	6979      	ldr	r1, [r7, #20]
 800a33a:	69ba      	ldr	r2, [r7, #24]
 800a33c:	e841 2300 	strex	r3, r2, [r1]
 800a340:	613b      	str	r3, [r7, #16]
   return(result);
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1e6      	bne.n	800a316 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2220      	movs	r2, #32
 800a34c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a35c:	bf00      	nop
 800a35e:	3754      	adds	r7, #84	; 0x54
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a374:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a390:	bf00      	nop
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a4:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	220f      	movs	r2, #15
 800a3b4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	699a      	ldr	r2, [r3, #24]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f042 0208 	orr.w	r2, r2, #8
 800a3c4:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Call user Abort complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	4798      	blx	r3
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3de:	bf00      	nop
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b088      	sub	sp, #32
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	e853 3f00 	ldrex	r3, [r3]
 800a3fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a402:	61fb      	str	r3, [r7, #28]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	461a      	mov	r2, r3
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	61bb      	str	r3, [r7, #24]
 800a40e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a410:	6979      	ldr	r1, [r7, #20]
 800a412:	69ba      	ldr	r2, [r7, #24]
 800a414:	e841 2300 	strex	r3, r2, [r1]
 800a418:	613b      	str	r3, [r7, #16]
   return(result);
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1e6      	bne.n	800a3ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2220      	movs	r2, #32
 800a424:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a436:	bf00      	nop
 800a438:	3720      	adds	r7, #32
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b096      	sub	sp, #88	; 0x58
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a44c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a456:	2b22      	cmp	r3, #34	; 0x22
 800a458:	f040 809c 	bne.w	800a594 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a462:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a466:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a46a:	b2d9      	uxtb	r1, r3
 800a46c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a470:	b2da      	uxtb	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a476:	400a      	ands	r2, r1
 800a478:	b2d2      	uxtb	r2, r2
 800a47a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a480:	1c5a      	adds	r2, r3, #1
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	3b01      	subs	r3, #1
 800a490:	b29a      	uxth	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d17f      	bne.n	800a5a4 <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ac:	e853 3f00 	ldrex	r3, [r3]
 800a4b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4b8:	653b      	str	r3, [r7, #80]	; 0x50
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4c2:	647b      	str	r3, [r7, #68]	; 0x44
 800a4c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4ca:	e841 2300 	strex	r3, r2, [r1]
 800a4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1e6      	bne.n	800a4a4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	3308      	adds	r3, #8
 800a4dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e0:	e853 3f00 	ldrex	r3, [r3]
 800a4e4:	623b      	str	r3, [r7, #32]
   return(result);
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	f023 0301 	bic.w	r3, r3, #1
 800a4ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	3308      	adds	r3, #8
 800a4f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4f6:	633a      	str	r2, [r7, #48]	; 0x30
 800a4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4fe:	e841 2300 	strex	r3, r2, [r1]
 800a502:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a506:	2b00      	cmp	r3, #0
 800a508:	d1e5      	bne.n	800a4d6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2220      	movs	r2, #32
 800a50e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a522:	2b01      	cmp	r3, #1
 800a524:	d130      	bne.n	800a588 <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	e853 3f00 	ldrex	r3, [r3]
 800a538:	60fb      	str	r3, [r7, #12]
   return(result);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f023 0310 	bic.w	r3, r3, #16
 800a540:	64bb      	str	r3, [r7, #72]	; 0x48
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	461a      	mov	r2, r3
 800a548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a54a:	61fb      	str	r3, [r7, #28]
 800a54c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54e:	69b9      	ldr	r1, [r7, #24]
 800a550:	69fa      	ldr	r2, [r7, #28]
 800a552:	e841 2300 	strex	r3, r2, [r1]
 800a556:	617b      	str	r3, [r7, #20]
   return(result);
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1e6      	bne.n	800a52c <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	69db      	ldr	r3, [r3, #28]
 800a564:	f003 0310 	and.w	r3, r3, #16
 800a568:	2b10      	cmp	r3, #16
 800a56a:	d103      	bne.n	800a574 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2210      	movs	r2, #16
 800a572:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800a580:	4611      	mov	r1, r2
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a586:	e00d      	b.n	800a5a4 <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	4798      	blx	r3
}
 800a592:	e007      	b.n	800a5a4 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	699a      	ldr	r2, [r3, #24]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f042 0208 	orr.w	r2, r2, #8
 800a5a2:	619a      	str	r2, [r3, #24]
}
 800a5a4:	bf00      	nop
 800a5a6:	3758      	adds	r7, #88	; 0x58
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b096      	sub	sp, #88	; 0x58
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a5ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5c4:	2b22      	cmp	r3, #34	; 0x22
 800a5c6:	f040 809c 	bne.w	800a702 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5d8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a5da:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a5de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a5e2:	4013      	ands	r3, r2
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ee:	1c9a      	adds	r2, r3, #2
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d17f      	bne.n	800a712 <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61a:	e853 3f00 	ldrex	r3, [r3]
 800a61e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a622:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a626:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	461a      	mov	r2, r3
 800a62e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a630:	643b      	str	r3, [r7, #64]	; 0x40
 800a632:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a634:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a636:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a638:	e841 2300 	strex	r3, r2, [r1]
 800a63c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1e6      	bne.n	800a612 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3308      	adds	r3, #8
 800a64a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	e853 3f00 	ldrex	r3, [r3]
 800a652:	61fb      	str	r3, [r7, #28]
   return(result);
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	f023 0301 	bic.w	r3, r3, #1
 800a65a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	3308      	adds	r3, #8
 800a662:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a664:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a66a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a66c:	e841 2300 	strex	r3, r2, [r1]
 800a670:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1e5      	bne.n	800a644 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2220      	movs	r2, #32
 800a67c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a690:	2b01      	cmp	r3, #1
 800a692:	d130      	bne.n	800a6f6 <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	e853 3f00 	ldrex	r3, [r3]
 800a6a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f023 0310 	bic.w	r3, r3, #16
 800a6ae:	647b      	str	r3, [r7, #68]	; 0x44
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6b8:	61bb      	str	r3, [r7, #24]
 800a6ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6bc:	6979      	ldr	r1, [r7, #20]
 800a6be:	69ba      	ldr	r2, [r7, #24]
 800a6c0:	e841 2300 	strex	r3, r2, [r1]
 800a6c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1e6      	bne.n	800a69a <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	f003 0310 	and.w	r3, r3, #16
 800a6d6:	2b10      	cmp	r3, #16
 800a6d8:	d103      	bne.n	800a6e2 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2210      	movs	r2, #16
 800a6e0:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a6f4:	e00d      	b.n	800a712 <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	4798      	blx	r3
}
 800a700:	e007      	b.n	800a712 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	699a      	ldr	r2, [r3, #24]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f042 0208 	orr.w	r2, r2, #8
 800a710:	619a      	str	r2, [r3, #24]
}
 800a712:	bf00      	nop
 800a714:	3758      	adds	r7, #88	; 0x58
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <_ZdlPvj>:
 800a71a:	f000 b811 	b.w	800a740 <_ZdlPv>

0800a71e <_Znwj>:
 800a71e:	2801      	cmp	r0, #1
 800a720:	bf38      	it	cc
 800a722:	2001      	movcc	r0, #1
 800a724:	b510      	push	{r4, lr}
 800a726:	4604      	mov	r4, r0
 800a728:	4620      	mov	r0, r4
 800a72a:	f000 f81b 	bl	800a764 <malloc>
 800a72e:	b100      	cbz	r0, 800a732 <_Znwj+0x14>
 800a730:	bd10      	pop	{r4, pc}
 800a732:	f000 f807 	bl	800a744 <_ZSt15get_new_handlerv>
 800a736:	b908      	cbnz	r0, 800a73c <_Znwj+0x1e>
 800a738:	f000 f80c 	bl	800a754 <abort>
 800a73c:	4780      	blx	r0
 800a73e:	e7f3      	b.n	800a728 <_Znwj+0xa>

0800a740 <_ZdlPv>:
 800a740:	f000 b818 	b.w	800a774 <free>

0800a744 <_ZSt15get_new_handlerv>:
 800a744:	4b02      	ldr	r3, [pc, #8]	; (800a750 <_ZSt15get_new_handlerv+0xc>)
 800a746:	6818      	ldr	r0, [r3, #0]
 800a748:	f3bf 8f5b 	dmb	ish
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	200003a8 	.word	0x200003a8

0800a754 <abort>:
 800a754:	b508      	push	{r3, lr}
 800a756:	2006      	movs	r0, #6
 800a758:	f000 f8f0 	bl	800a93c <raise>
 800a75c:	2001      	movs	r0, #1
 800a75e:	f7fa f9a1 	bl	8004aa4 <_exit>
	...

0800a764 <malloc>:
 800a764:	4b02      	ldr	r3, [pc, #8]	; (800a770 <malloc+0xc>)
 800a766:	4601      	mov	r1, r0
 800a768:	6818      	ldr	r0, [r3, #0]
 800a76a:	f000 b82b 	b.w	800a7c4 <_malloc_r>
 800a76e:	bf00      	nop
 800a770:	200000ec 	.word	0x200000ec

0800a774 <free>:
 800a774:	4b02      	ldr	r3, [pc, #8]	; (800a780 <free+0xc>)
 800a776:	4601      	mov	r1, r0
 800a778:	6818      	ldr	r0, [r3, #0]
 800a77a:	f000 b945 	b.w	800aa08 <_free_r>
 800a77e:	bf00      	nop
 800a780:	200000ec 	.word	0x200000ec

0800a784 <sbrk_aligned>:
 800a784:	b570      	push	{r4, r5, r6, lr}
 800a786:	4e0e      	ldr	r6, [pc, #56]	; (800a7c0 <sbrk_aligned+0x3c>)
 800a788:	460c      	mov	r4, r1
 800a78a:	6831      	ldr	r1, [r6, #0]
 800a78c:	4605      	mov	r5, r0
 800a78e:	b911      	cbnz	r1, 800a796 <sbrk_aligned+0x12>
 800a790:	f000 f8f0 	bl	800a974 <_sbrk_r>
 800a794:	6030      	str	r0, [r6, #0]
 800a796:	4621      	mov	r1, r4
 800a798:	4628      	mov	r0, r5
 800a79a:	f000 f8eb 	bl	800a974 <_sbrk_r>
 800a79e:	1c43      	adds	r3, r0, #1
 800a7a0:	d00a      	beq.n	800a7b8 <sbrk_aligned+0x34>
 800a7a2:	1cc4      	adds	r4, r0, #3
 800a7a4:	f024 0403 	bic.w	r4, r4, #3
 800a7a8:	42a0      	cmp	r0, r4
 800a7aa:	d007      	beq.n	800a7bc <sbrk_aligned+0x38>
 800a7ac:	1a21      	subs	r1, r4, r0
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	f000 f8e0 	bl	800a974 <_sbrk_r>
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d101      	bne.n	800a7bc <sbrk_aligned+0x38>
 800a7b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a7bc:	4620      	mov	r0, r4
 800a7be:	bd70      	pop	{r4, r5, r6, pc}
 800a7c0:	200003b0 	.word	0x200003b0

0800a7c4 <_malloc_r>:
 800a7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7c8:	1ccd      	adds	r5, r1, #3
 800a7ca:	f025 0503 	bic.w	r5, r5, #3
 800a7ce:	3508      	adds	r5, #8
 800a7d0:	2d0c      	cmp	r5, #12
 800a7d2:	bf38      	it	cc
 800a7d4:	250c      	movcc	r5, #12
 800a7d6:	2d00      	cmp	r5, #0
 800a7d8:	4607      	mov	r7, r0
 800a7da:	db01      	blt.n	800a7e0 <_malloc_r+0x1c>
 800a7dc:	42a9      	cmp	r1, r5
 800a7de:	d905      	bls.n	800a7ec <_malloc_r+0x28>
 800a7e0:	230c      	movs	r3, #12
 800a7e2:	603b      	str	r3, [r7, #0]
 800a7e4:	2600      	movs	r6, #0
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a8c0 <_malloc_r+0xfc>
 800a7f0:	f000 f868 	bl	800a8c4 <__malloc_lock>
 800a7f4:	f8d8 3000 	ldr.w	r3, [r8]
 800a7f8:	461c      	mov	r4, r3
 800a7fa:	bb5c      	cbnz	r4, 800a854 <_malloc_r+0x90>
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	4638      	mov	r0, r7
 800a800:	f7ff ffc0 	bl	800a784 <sbrk_aligned>
 800a804:	1c43      	adds	r3, r0, #1
 800a806:	4604      	mov	r4, r0
 800a808:	d155      	bne.n	800a8b6 <_malloc_r+0xf2>
 800a80a:	f8d8 4000 	ldr.w	r4, [r8]
 800a80e:	4626      	mov	r6, r4
 800a810:	2e00      	cmp	r6, #0
 800a812:	d145      	bne.n	800a8a0 <_malloc_r+0xdc>
 800a814:	2c00      	cmp	r4, #0
 800a816:	d048      	beq.n	800a8aa <_malloc_r+0xe6>
 800a818:	6823      	ldr	r3, [r4, #0]
 800a81a:	4631      	mov	r1, r6
 800a81c:	4638      	mov	r0, r7
 800a81e:	eb04 0903 	add.w	r9, r4, r3
 800a822:	f000 f8a7 	bl	800a974 <_sbrk_r>
 800a826:	4581      	cmp	r9, r0
 800a828:	d13f      	bne.n	800a8aa <_malloc_r+0xe6>
 800a82a:	6821      	ldr	r1, [r4, #0]
 800a82c:	1a6d      	subs	r5, r5, r1
 800a82e:	4629      	mov	r1, r5
 800a830:	4638      	mov	r0, r7
 800a832:	f7ff ffa7 	bl	800a784 <sbrk_aligned>
 800a836:	3001      	adds	r0, #1
 800a838:	d037      	beq.n	800a8aa <_malloc_r+0xe6>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	442b      	add	r3, r5
 800a83e:	6023      	str	r3, [r4, #0]
 800a840:	f8d8 3000 	ldr.w	r3, [r8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d038      	beq.n	800a8ba <_malloc_r+0xf6>
 800a848:	685a      	ldr	r2, [r3, #4]
 800a84a:	42a2      	cmp	r2, r4
 800a84c:	d12b      	bne.n	800a8a6 <_malloc_r+0xe2>
 800a84e:	2200      	movs	r2, #0
 800a850:	605a      	str	r2, [r3, #4]
 800a852:	e00f      	b.n	800a874 <_malloc_r+0xb0>
 800a854:	6822      	ldr	r2, [r4, #0]
 800a856:	1b52      	subs	r2, r2, r5
 800a858:	d41f      	bmi.n	800a89a <_malloc_r+0xd6>
 800a85a:	2a0b      	cmp	r2, #11
 800a85c:	d917      	bls.n	800a88e <_malloc_r+0xca>
 800a85e:	1961      	adds	r1, r4, r5
 800a860:	42a3      	cmp	r3, r4
 800a862:	6025      	str	r5, [r4, #0]
 800a864:	bf18      	it	ne
 800a866:	6059      	strne	r1, [r3, #4]
 800a868:	6863      	ldr	r3, [r4, #4]
 800a86a:	bf08      	it	eq
 800a86c:	f8c8 1000 	streq.w	r1, [r8]
 800a870:	5162      	str	r2, [r4, r5]
 800a872:	604b      	str	r3, [r1, #4]
 800a874:	4638      	mov	r0, r7
 800a876:	f104 060b 	add.w	r6, r4, #11
 800a87a:	f000 f829 	bl	800a8d0 <__malloc_unlock>
 800a87e:	f026 0607 	bic.w	r6, r6, #7
 800a882:	1d23      	adds	r3, r4, #4
 800a884:	1af2      	subs	r2, r6, r3
 800a886:	d0ae      	beq.n	800a7e6 <_malloc_r+0x22>
 800a888:	1b9b      	subs	r3, r3, r6
 800a88a:	50a3      	str	r3, [r4, r2]
 800a88c:	e7ab      	b.n	800a7e6 <_malloc_r+0x22>
 800a88e:	42a3      	cmp	r3, r4
 800a890:	6862      	ldr	r2, [r4, #4]
 800a892:	d1dd      	bne.n	800a850 <_malloc_r+0x8c>
 800a894:	f8c8 2000 	str.w	r2, [r8]
 800a898:	e7ec      	b.n	800a874 <_malloc_r+0xb0>
 800a89a:	4623      	mov	r3, r4
 800a89c:	6864      	ldr	r4, [r4, #4]
 800a89e:	e7ac      	b.n	800a7fa <_malloc_r+0x36>
 800a8a0:	4634      	mov	r4, r6
 800a8a2:	6876      	ldr	r6, [r6, #4]
 800a8a4:	e7b4      	b.n	800a810 <_malloc_r+0x4c>
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	e7cc      	b.n	800a844 <_malloc_r+0x80>
 800a8aa:	230c      	movs	r3, #12
 800a8ac:	603b      	str	r3, [r7, #0]
 800a8ae:	4638      	mov	r0, r7
 800a8b0:	f000 f80e 	bl	800a8d0 <__malloc_unlock>
 800a8b4:	e797      	b.n	800a7e6 <_malloc_r+0x22>
 800a8b6:	6025      	str	r5, [r4, #0]
 800a8b8:	e7dc      	b.n	800a874 <_malloc_r+0xb0>
 800a8ba:	605b      	str	r3, [r3, #4]
 800a8bc:	deff      	udf	#255	; 0xff
 800a8be:	bf00      	nop
 800a8c0:	200003ac 	.word	0x200003ac

0800a8c4 <__malloc_lock>:
 800a8c4:	4801      	ldr	r0, [pc, #4]	; (800a8cc <__malloc_lock+0x8>)
 800a8c6:	f000 b88f 	b.w	800a9e8 <__retarget_lock_acquire_recursive>
 800a8ca:	bf00      	nop
 800a8cc:	200004f0 	.word	0x200004f0

0800a8d0 <__malloc_unlock>:
 800a8d0:	4801      	ldr	r0, [pc, #4]	; (800a8d8 <__malloc_unlock+0x8>)
 800a8d2:	f000 b88a 	b.w	800a9ea <__retarget_lock_release_recursive>
 800a8d6:	bf00      	nop
 800a8d8:	200004f0 	.word	0x200004f0

0800a8dc <memset>:
 800a8dc:	4402      	add	r2, r0
 800a8de:	4603      	mov	r3, r0
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d100      	bne.n	800a8e6 <memset+0xa>
 800a8e4:	4770      	bx	lr
 800a8e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a8ea:	e7f9      	b.n	800a8e0 <memset+0x4>

0800a8ec <_raise_r>:
 800a8ec:	291f      	cmp	r1, #31
 800a8ee:	b538      	push	{r3, r4, r5, lr}
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	460d      	mov	r5, r1
 800a8f4:	d904      	bls.n	800a900 <_raise_r+0x14>
 800a8f6:	2316      	movs	r3, #22
 800a8f8:	6003      	str	r3, [r0, #0]
 800a8fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8fe:	bd38      	pop	{r3, r4, r5, pc}
 800a900:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a902:	b112      	cbz	r2, 800a90a <_raise_r+0x1e>
 800a904:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a908:	b94b      	cbnz	r3, 800a91e <_raise_r+0x32>
 800a90a:	4620      	mov	r0, r4
 800a90c:	f000 f830 	bl	800a970 <_getpid_r>
 800a910:	462a      	mov	r2, r5
 800a912:	4601      	mov	r1, r0
 800a914:	4620      	mov	r0, r4
 800a916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a91a:	f000 b817 	b.w	800a94c <_kill_r>
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d00a      	beq.n	800a938 <_raise_r+0x4c>
 800a922:	1c59      	adds	r1, r3, #1
 800a924:	d103      	bne.n	800a92e <_raise_r+0x42>
 800a926:	2316      	movs	r3, #22
 800a928:	6003      	str	r3, [r0, #0]
 800a92a:	2001      	movs	r0, #1
 800a92c:	e7e7      	b.n	800a8fe <_raise_r+0x12>
 800a92e:	2400      	movs	r4, #0
 800a930:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a934:	4628      	mov	r0, r5
 800a936:	4798      	blx	r3
 800a938:	2000      	movs	r0, #0
 800a93a:	e7e0      	b.n	800a8fe <_raise_r+0x12>

0800a93c <raise>:
 800a93c:	4b02      	ldr	r3, [pc, #8]	; (800a948 <raise+0xc>)
 800a93e:	4601      	mov	r1, r0
 800a940:	6818      	ldr	r0, [r3, #0]
 800a942:	f7ff bfd3 	b.w	800a8ec <_raise_r>
 800a946:	bf00      	nop
 800a948:	200000ec 	.word	0x200000ec

0800a94c <_kill_r>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	4d07      	ldr	r5, [pc, #28]	; (800a96c <_kill_r+0x20>)
 800a950:	2300      	movs	r3, #0
 800a952:	4604      	mov	r4, r0
 800a954:	4608      	mov	r0, r1
 800a956:	4611      	mov	r1, r2
 800a958:	602b      	str	r3, [r5, #0]
 800a95a:	f7fa f893 	bl	8004a84 <_kill>
 800a95e:	1c43      	adds	r3, r0, #1
 800a960:	d102      	bne.n	800a968 <_kill_r+0x1c>
 800a962:	682b      	ldr	r3, [r5, #0]
 800a964:	b103      	cbz	r3, 800a968 <_kill_r+0x1c>
 800a966:	6023      	str	r3, [r4, #0]
 800a968:	bd38      	pop	{r3, r4, r5, pc}
 800a96a:	bf00      	nop
 800a96c:	200004ec 	.word	0x200004ec

0800a970 <_getpid_r>:
 800a970:	f7fa b880 	b.w	8004a74 <_getpid>

0800a974 <_sbrk_r>:
 800a974:	b538      	push	{r3, r4, r5, lr}
 800a976:	4d06      	ldr	r5, [pc, #24]	; (800a990 <_sbrk_r+0x1c>)
 800a978:	2300      	movs	r3, #0
 800a97a:	4604      	mov	r4, r0
 800a97c:	4608      	mov	r0, r1
 800a97e:	602b      	str	r3, [r5, #0]
 800a980:	f7fa f89a 	bl	8004ab8 <_sbrk>
 800a984:	1c43      	adds	r3, r0, #1
 800a986:	d102      	bne.n	800a98e <_sbrk_r+0x1a>
 800a988:	682b      	ldr	r3, [r5, #0]
 800a98a:	b103      	cbz	r3, 800a98e <_sbrk_r+0x1a>
 800a98c:	6023      	str	r3, [r4, #0]
 800a98e:	bd38      	pop	{r3, r4, r5, pc}
 800a990:	200004ec 	.word	0x200004ec

0800a994 <__errno>:
 800a994:	4b01      	ldr	r3, [pc, #4]	; (800a99c <__errno+0x8>)
 800a996:	6818      	ldr	r0, [r3, #0]
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	200000ec 	.word	0x200000ec

0800a9a0 <__libc_init_array>:
 800a9a0:	b570      	push	{r4, r5, r6, lr}
 800a9a2:	4d0d      	ldr	r5, [pc, #52]	; (800a9d8 <__libc_init_array+0x38>)
 800a9a4:	4c0d      	ldr	r4, [pc, #52]	; (800a9dc <__libc_init_array+0x3c>)
 800a9a6:	1b64      	subs	r4, r4, r5
 800a9a8:	10a4      	asrs	r4, r4, #2
 800a9aa:	2600      	movs	r6, #0
 800a9ac:	42a6      	cmp	r6, r4
 800a9ae:	d109      	bne.n	800a9c4 <__libc_init_array+0x24>
 800a9b0:	4d0b      	ldr	r5, [pc, #44]	; (800a9e0 <__libc_init_array+0x40>)
 800a9b2:	4c0c      	ldr	r4, [pc, #48]	; (800a9e4 <__libc_init_array+0x44>)
 800a9b4:	f000 f874 	bl	800aaa0 <_init>
 800a9b8:	1b64      	subs	r4, r4, r5
 800a9ba:	10a4      	asrs	r4, r4, #2
 800a9bc:	2600      	movs	r6, #0
 800a9be:	42a6      	cmp	r6, r4
 800a9c0:	d105      	bne.n	800a9ce <__libc_init_array+0x2e>
 800a9c2:	bd70      	pop	{r4, r5, r6, pc}
 800a9c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9c8:	4798      	blx	r3
 800a9ca:	3601      	adds	r6, #1
 800a9cc:	e7ee      	b.n	800a9ac <__libc_init_array+0xc>
 800a9ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9d2:	4798      	blx	r3
 800a9d4:	3601      	adds	r6, #1
 800a9d6:	e7f2      	b.n	800a9be <__libc_init_array+0x1e>
 800a9d8:	0800abb4 	.word	0x0800abb4
 800a9dc:	0800abb4 	.word	0x0800abb4
 800a9e0:	0800abb4 	.word	0x0800abb4
 800a9e4:	0800abb8 	.word	0x0800abb8

0800a9e8 <__retarget_lock_acquire_recursive>:
 800a9e8:	4770      	bx	lr

0800a9ea <__retarget_lock_release_recursive>:
 800a9ea:	4770      	bx	lr

0800a9ec <memcpy>:
 800a9ec:	440a      	add	r2, r1
 800a9ee:	4291      	cmp	r1, r2
 800a9f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a9f4:	d100      	bne.n	800a9f8 <memcpy+0xc>
 800a9f6:	4770      	bx	lr
 800a9f8:	b510      	push	{r4, lr}
 800a9fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa02:	4291      	cmp	r1, r2
 800aa04:	d1f9      	bne.n	800a9fa <memcpy+0xe>
 800aa06:	bd10      	pop	{r4, pc}

0800aa08 <_free_r>:
 800aa08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa0a:	2900      	cmp	r1, #0
 800aa0c:	d044      	beq.n	800aa98 <_free_r+0x90>
 800aa0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa12:	9001      	str	r0, [sp, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f1a1 0404 	sub.w	r4, r1, #4
 800aa1a:	bfb8      	it	lt
 800aa1c:	18e4      	addlt	r4, r4, r3
 800aa1e:	f7ff ff51 	bl	800a8c4 <__malloc_lock>
 800aa22:	4a1e      	ldr	r2, [pc, #120]	; (800aa9c <_free_r+0x94>)
 800aa24:	9801      	ldr	r0, [sp, #4]
 800aa26:	6813      	ldr	r3, [r2, #0]
 800aa28:	b933      	cbnz	r3, 800aa38 <_free_r+0x30>
 800aa2a:	6063      	str	r3, [r4, #4]
 800aa2c:	6014      	str	r4, [r2, #0]
 800aa2e:	b003      	add	sp, #12
 800aa30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa34:	f7ff bf4c 	b.w	800a8d0 <__malloc_unlock>
 800aa38:	42a3      	cmp	r3, r4
 800aa3a:	d908      	bls.n	800aa4e <_free_r+0x46>
 800aa3c:	6825      	ldr	r5, [r4, #0]
 800aa3e:	1961      	adds	r1, r4, r5
 800aa40:	428b      	cmp	r3, r1
 800aa42:	bf01      	itttt	eq
 800aa44:	6819      	ldreq	r1, [r3, #0]
 800aa46:	685b      	ldreq	r3, [r3, #4]
 800aa48:	1949      	addeq	r1, r1, r5
 800aa4a:	6021      	streq	r1, [r4, #0]
 800aa4c:	e7ed      	b.n	800aa2a <_free_r+0x22>
 800aa4e:	461a      	mov	r2, r3
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	b10b      	cbz	r3, 800aa58 <_free_r+0x50>
 800aa54:	42a3      	cmp	r3, r4
 800aa56:	d9fa      	bls.n	800aa4e <_free_r+0x46>
 800aa58:	6811      	ldr	r1, [r2, #0]
 800aa5a:	1855      	adds	r5, r2, r1
 800aa5c:	42a5      	cmp	r5, r4
 800aa5e:	d10b      	bne.n	800aa78 <_free_r+0x70>
 800aa60:	6824      	ldr	r4, [r4, #0]
 800aa62:	4421      	add	r1, r4
 800aa64:	1854      	adds	r4, r2, r1
 800aa66:	42a3      	cmp	r3, r4
 800aa68:	6011      	str	r1, [r2, #0]
 800aa6a:	d1e0      	bne.n	800aa2e <_free_r+0x26>
 800aa6c:	681c      	ldr	r4, [r3, #0]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	6053      	str	r3, [r2, #4]
 800aa72:	440c      	add	r4, r1
 800aa74:	6014      	str	r4, [r2, #0]
 800aa76:	e7da      	b.n	800aa2e <_free_r+0x26>
 800aa78:	d902      	bls.n	800aa80 <_free_r+0x78>
 800aa7a:	230c      	movs	r3, #12
 800aa7c:	6003      	str	r3, [r0, #0]
 800aa7e:	e7d6      	b.n	800aa2e <_free_r+0x26>
 800aa80:	6825      	ldr	r5, [r4, #0]
 800aa82:	1961      	adds	r1, r4, r5
 800aa84:	428b      	cmp	r3, r1
 800aa86:	bf04      	itt	eq
 800aa88:	6819      	ldreq	r1, [r3, #0]
 800aa8a:	685b      	ldreq	r3, [r3, #4]
 800aa8c:	6063      	str	r3, [r4, #4]
 800aa8e:	bf04      	itt	eq
 800aa90:	1949      	addeq	r1, r1, r5
 800aa92:	6021      	streq	r1, [r4, #0]
 800aa94:	6054      	str	r4, [r2, #4]
 800aa96:	e7ca      	b.n	800aa2e <_free_r+0x26>
 800aa98:	b003      	add	sp, #12
 800aa9a:	bd30      	pop	{r4, r5, pc}
 800aa9c:	200003ac 	.word	0x200003ac

0800aaa0 <_init>:
 800aaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa2:	bf00      	nop
 800aaa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaa6:	bc08      	pop	{r3}
 800aaa8:	469e      	mov	lr, r3
 800aaaa:	4770      	bx	lr

0800aaac <_fini>:
 800aaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaae:	bf00      	nop
 800aab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aab2:	bc08      	pop	{r3}
 800aab4:	469e      	mov	lr, r3
 800aab6:	4770      	bx	lr
