/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    usart.c
  * @brief   This file provides code for the configuration
  *          of the USART instances.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "usart.h"

/* USER CODE BEGIN 0 */

// Elementos en el buffer de la uart3
#define LEN_RX_BUFFER_UART3 24

// Tipo de dato usado para almacenar todos los observadores de la uart
typedef struct
{
	void *mObserver_;
	uartCallback_t mCallback_;
	uint8_t mInUse_;
} uartNotification_t;

// Array con todos los observcadore de la uart3
static uartNotification_t observersUart3[MAX_UART_OBSERVERS];

// Buffer auxiliar para almacenar bytes recibidos.
static uint8_t uart3RxBuffer[LEN_RX_BUFFER_UART3];

static uint8_t uart3IsEnabled = 0;

static uint8_t auxCarriageReturnLineFeed[] = {'\r','\n'};
/* USER CODE END 0 */

UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  if(uartHandle->Instance==USART3)
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
    {
      Error_Handler();
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();

    __HAL_RCC_GPIOD_CLK_ENABLE();
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART3)
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);

    /* USART3 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void uart3_enable_rx(void)
{
	if(!uart3IsEnabled)
	{
		uart3IsEnabled = 1;
		HAL_UART_Receive_IT(&huart3, uart3RxBuffer, 1);
	}
}

void uart3_disable_rx(void)
{
	if(uart3IsEnabled)
	{
		uart3IsEnabled = 0;
		HAL_UART_AbortReceive_IT(&huart3);
	}
}

status_t uart3_read(uint8_t *buffer, uint32_t numElements)
{
	HAL_StatusTypeDef aux;

	if((buffer != 0) && (numElements > 0))
	{
		aux = HAL_UART_Receive(&huart3, buffer, numElements, 100);
	}

	if(aux == HAL_TIMEOUT)
	{
		return ERROR_TIMEOUT;
	}

	return OK;
}

status_t uart3_send(uint8_t buffer[], uint32_t numElements)
{
	HAL_StatusTypeDef aux;

	aux = HAL_UART_Transmit(&huart3, buffer, numElements, 100);
	HAL_UART_Transmit(&huart3, auxCarriageReturnLineFeed,sizeof(auxCarriageReturnLineFeed),100);
	if(aux == HAL_TIMEOUT)
	{
		return ERROR_TIMEOUT;
	}

	return OK;
}

uint8_t uart3_attach(void *observer, uartCallback_t callback)
{
	uint32_t i = 0;
	uint8_t found = 0;

	while( (i < MAX_UART_OBSERVERS) && (found == 0) )
	{
		if(!(observersUart3[i].mInUse_))
		{
			found = 1;
			observersUart3[i].mObserver_ = observer;
			observersUart3[i].mCallback_ = callback;
			observersUart3[i].mInUse_ = 1;
		}
		else
		{
			i++;
		}
	}

	return found;
}

uint8_t uart3_dettach(void *observer, uartCallback_t callback)
{
	uint32_t i = 0;
	uint8_t found = 0;

	while( (i < MAX_UART_OBSERVERS) && (found == 0))
	{
		if( (observersUart3[i].mInUse_) && (observersUart3[i].mCallback_ == callback) && (observersUart3[i].mObserver_ == observer) )
		{
			observersUart3[i].mObserver_ = 0;
			observersUart3[i].mCallback_ = 0;
			observersUart3[i].mInUse_ = 0;

			found = 1;
		}
		else
		{
			i++;
		}
	}
}

static void uart3_notify(void)
{
	uint32_t i = 0;

	for(i = 0 ; i < MAX_UART_OBSERVERS ; i++)
	{
		if(observersUart3[i].mInUse_)
		{
			(*(observersUart3[i].mCallback_))(observersUart3[i].mObserver_,uart3RxBuffer, 1);
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	uart3_notify();
	uart3_disable_rx();
}

/* USER CODE END 1 */
