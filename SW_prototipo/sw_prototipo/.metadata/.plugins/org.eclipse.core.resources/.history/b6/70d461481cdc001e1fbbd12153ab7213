/*
 * taskCompareAttitude.cpp
 *
 *  Created on: Mar 6, 2024
 *      Author: fede
 */

#include "taskCompareAttitude.h"

void taskCompareAttitude_constructor(taskCompareAttitude_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsgAttitude1, uint32_t handleMsgAttitude2, uint32_t handleMsgAttitude3, uint32_t handleMsg)
{
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskCompareAttitude_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);

	me->mHandleMsgAttitude1_ = handleMsgAttitude1;
	me->mHandleMsgAttitude2_ = handleMsgAttitude2;
	me->mHandleMsgAttitude3_ = handleMsgAttitude3;
	me->mHandleMsg_ = handleMsg;
}


void taskCompareAttitude_destructor(taskCompareAttitude_t *me)
{
	//TODO: hay que hacer que si uno llama a la tarea nuevamente, la tarea simplemente no haga nada.
	timeTriggeredTask_destructor(&me->super);
}

void taskCompareAttitude_start(taskCompareAttitude_t *me)
{
	//TODO: acá podría uno decirle a la CNI que se va a encargar de enviar el mensaje
	// asociado al handleMsg.
}

void taskCompareAttitude_update(taskCompareAttitude_t *me)
{
	uint8_t dataReadFromCNI[LEN_ATTITUDE_CNI_DATA];
	uint32_t lenDataReadFromCNI = 0;
	// Leer los datos de pitch y roll de las 3 placas, de la tabla CNI
	CNI_get_msg_content(me->mHandleMsgAttitude1_, dataReadFromCNI, LEN_ATTITUDE_CNI_DATA, uint32_t *lenPayload)

	// Calcular los residuos 12, 13, 23

	// Convertir los datos en bytes

	// Actualizar los valores en la CNI


	attitudeData_t outputData;
	uint8_t dataForCni[LEN_ATTITUDE_CNI_DATA];

	attitudeEstimator_update();

	// Convertir los datos del estimador en bytes
	attitudeEstimator_read_data(&outputData);
	memcpy(dataForCni    , &outputData.mPitch_, 4);
	memcpy(&dataForCni[4], &outputData.mRoll_ , 4);

	// Actualizarlos en la CNI
	CNI_update_msg_content(me->mHandleMsg_, dataForCni, LEN_ATTITUDE_CNI_DATA);
}
