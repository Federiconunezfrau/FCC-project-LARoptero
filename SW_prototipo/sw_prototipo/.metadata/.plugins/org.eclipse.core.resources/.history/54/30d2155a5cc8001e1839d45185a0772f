/*
 * timeTriggeredScheduler.cpp
 *
 *  Created on: Feb 10, 2024
 *      Author: fede
 */

#include "timeTriggeredScheduler.h"

static void timeTriggeredScheduler_tick(timeTriggeredScheduler_t *me, myTimer_t *timer)
{
	me->mTicks_++;
}

void timeTriggeredScheduler_constructor(timeTriggeredScheduler_t *me, myTimer_t *timer)
{
	uint32_t i;

	me->mTimer_ = timer;

	for(i = 0; i < MAX_NUM_TASKS ; i++)
	{
		me->mTaskList_[i] = 0;
	}

	me->mTicks_ = 0;
}

void timeTriggeredScheduler_init(timeTriggeredScheduler_t *me)
{
	HAL_TIM_Base_Stop_IT(me->mTimer_->mHtim_);
	subject_attach(&me->mTimer_->super, me, (notificationHandle_t)&timeTriggeredScheduler_tick);
}

void timeTriggeredScheduler_start(timeTriggeredScheduler_t *me)
{
	HAL_TIM_Base_Start_IT(me->mTimer_->mHtim_);
}

void timeTriggeredScheduler_stop(timeTriggeredScheduler_t *me)
{
	HAL_TIM_Base_Stop_IT(me->mTimer_->mHtim_);
}

void timeTriggeredScheduler_dispatch(timeTriggeredScheduler_t *me)
{
	uint8_t updateRequired = 0;
	uint32_t i;

	__disable_irq();
	if(me->mTicks_ > 0)
	{
		me->mTicks_--;
		updateRequired = 1;
	}
	__enable_irq();

	while(updateRequired)
	{
		for(i = 0; i < MAX_NUM_TASKS; i++)
		{
			if(me->mTaskList_[i])
			{
				if( (--(me->mTaskList_[i]->mDelayTicks_)) == 0 )
				{

				}
			}
		}
	}
}

TTschedulerStatus_t timeTriggeredScheduler_add_task(timeTriggeredScheduler_t *me, timeTriggeredTask_t *task)
{
	uint32_t i = 0;

	while( (me->mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
	{
		i++;
	}

	if(i == MAX_NUM_TASKS)
	{
		return ERROR_MAX_TASKS_REACHED;
	}

	me->mTaskList_[i] = task;

	return OK;
}
