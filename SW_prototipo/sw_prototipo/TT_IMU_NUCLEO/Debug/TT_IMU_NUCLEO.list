
TT_IMU_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000543c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005604  08005604  00015604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800561c  0800561c  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  0800561c  0800561c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005624  08005624  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005624  08005624  00015624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08005630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000104  08005734  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08005734  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .debug_info   000184c2  00000000  00000000  00020177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048e7  00000000  00000000  00038639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  0003cf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd2  00000000  00000000  0003e140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ae67  00000000  00000000  0003ef12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a993  00000000  00000000  00069d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5d24  00000000  00000000  0008470c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000481c  00000000  00000000  0017a430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0017ec4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000104 	.word	0x20000104
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080055ec 	.word	0x080055ec

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000108 	.word	0x20000108
 8000204:	080055ec 	.word	0x080055ec

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <_Z15CNI_constructorP19__CAN_HandleTypeDef>:

static CNI_t _instance;


void CNI_constructor(CAN_HandleTypeDef *hcan)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	_instance.mHcan_ = hcan;
 800050c:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6013      	str	r3, [r2, #0]

	_instance.mCANtxHeader_.ExtId = 0;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
	_instance.mCANtxHeader_.IDE = CAN_ID_STD;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
	_instance.mCANtxHeader_.RTR = CAN_RTR_DATA;
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
	_instance.mCANtxHeader_.TransmitGlobalTime = DISABLE;
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000526:	2200      	movs	r2, #0
 8000528:	771a      	strb	r2, [r3, #28]
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000120 	.word	0x20000120

0800053c <_Z8CNI_initv>:


void CNI_init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i = 0; i < lenCANfilterList ; i++)
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	e00e      	b.n	8000566 <_Z8CNI_initv+0x2a>
	{
		HAL_CAN_ConfigFilter(_instance.mHcan_, &CANfiltersList[i]);
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <_Z8CNI_initv+0x40>)
 800054a:	6818      	ldr	r0, [r3, #0]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	00db      	lsls	r3, r3, #3
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <_Z8CNI_initv+0x44>)
 8000558:	4413      	add	r3, r2
 800055a:	4619      	mov	r1, r3
 800055c:	f001 f948 	bl	80017f0 <HAL_CAN_ConfigFilter>
	for(i = 0; i < lenCANfilterList ; i++)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3301      	adds	r3, #1
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <_Z8CNI_initv+0x48>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	d3eb      	bcc.n	8000548 <_Z8CNI_initv+0xc>
	}
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000120 	.word	0x20000120
 8000580:	200000c8 	.word	0x200000c8
 8000584:	200000f4 	.word	0x200000f4

08000588 <_Z9CNI_startv>:


void CNI_start(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_CAN_Start(_instance.mHcan_);
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <_Z9CNI_startv+0x14>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fa0d 	bl	80019b0 <HAL_CAN_Start>
#if !IS_MASTER
    HAL_CAN_ActivateNotification(_instance.mHcan_, CAN_IT_RX_FIFO0_MSG_PENDING);
#endif
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000120 	.word	0x20000120

080005a0 <_Z12CNI_send_msgm>:


CNI_status_t CNI_send_msg(uint32_t msgHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	uint32_t txMailbox;
	serviceID currentMsgServiceID;
	uint32_t i;

	if(msgHandle >= lenCANmsgList)
 80005a8:	4b41      	ldr	r3, [pc, #260]	; (80006b0 <_Z12CNI_send_msgm+0x110>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d301      	bcc.n	80005b6 <_Z12CNI_send_msgm+0x16>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 80005b2:	2301      	movs	r3, #1
 80005b4:	e077      	b.n	80006a6 <_Z12CNI_send_msgm+0x106>
	}

	if(CANmsgList[msgHandle].mNodeID_ != MY_NODE_ID)
 80005b6:	493f      	ldr	r1, [pc, #252]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	440b      	add	r3, r1
 80005c4:	3304      	adds	r3, #4
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <_Z12CNI_send_msgm+0x30>
	{
		return CNI_MSG_HANDLE_TX_NOT_ALLOWED;
 80005cc:	2302      	movs	r3, #2
 80005ce:	e06a      	b.n	80006a6 <_Z12CNI_send_msgm+0x106>
	}

	// Armar el mensaje
	currentMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 80005d0:	4938      	ldr	r1, [pc, #224]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	4613      	mov	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	4413      	add	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	440b      	add	r3, r1
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	613b      	str	r3, [r7, #16]
	_instance.mCANtxHeader_.StdId = CAN_MSG_MAKE_STD_ID_TX(currentMsgServiceID);
 80005e2:	693b      	ldr	r3, [r7, #16]
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	4a34      	ldr	r2, [pc, #208]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 80005e8:	6093      	str	r3, [r2, #8]

	// Pasarle el msj al periférico

	// Limpia todos los mensajes pendientes (no debería haber ninguno, pero por las dudas)
	HAL_CAN_AbortTxRequest(_instance.mHcan_,CAN_TX_MAILBOX0|CAN_TX_MAILBOX1|CAN_TX_MAILBOX2);
 80005ea:	4b33      	ldr	r3, [pc, #204]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2107      	movs	r1, #7
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 faf1 	bl	8001bd8 <HAL_CAN_AbortTxRequest>

	// Comenzando por la posición "msgHandle" se recorre la lista de mensajes. Esto es debido
	// a que es posible que se requiera enviar más de un mensaje.
	i = msgHandle;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 80005fa:	e02a      	b.n	8000652 <_Z12CNI_send_msgm+0xb2>
	{
		while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 80005fc:	bf00      	nop
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fb2d 	bl	8001c62 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	bf0c      	ite	eq
 800060e:	2301      	moveq	r3, #1
 8000610:	2300      	movne	r3, #0
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1f2      	bne.n	80005fe <_Z12CNI_send_msgm+0x5e>

		_instance.mCANtxHeader_.DLC = CANmsgList[i].mLenPayload_;
 8000618:	4926      	ldr	r1, [pc, #152]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	4613      	mov	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4413      	add	r3, r2
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	440b      	add	r3, r1
 8000626:	3310      	adds	r3, #16
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 800062c:	6193      	str	r3, [r2, #24]
		HAL_CAN_AddTxMessage(_instance.mHcan_, &_instance.mCANtxHeader_, CANmsgList[i].mPayload_, &txMailbox);
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 8000630:	6818      	ldr	r0, [r3, #0]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	4613      	mov	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	4413      	add	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	3308      	adds	r3, #8
 800063e:	4a1d      	ldr	r2, [pc, #116]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 8000640:	441a      	add	r2, r3
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	491d      	ldr	r1, [pc, #116]	; (80006bc <_Z12CNI_send_msgm+0x11c>)
 8000648:	f001 f9f6 	bl	8001a38 <HAL_CAN_AddTxMessage>
		i++;
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	3301      	adds	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <_Z12CNI_send_msgm+0x110>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	697a      	ldr	r2, [r7, #20]
 8000658:	429a      	cmp	r2, r3
 800065a:	d215      	bcs.n	8000688 <_Z12CNI_send_msgm+0xe8>
 800065c:	4915      	ldr	r1, [pc, #84]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 800065e:	697a      	ldr	r2, [r7, #20]
 8000660:	4613      	mov	r3, r2
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4413      	add	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	440b      	add	r3, r1
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	693a      	ldr	r2, [r7, #16]
 800066e:	429a      	cmp	r2, r3
 8000670:	d10a      	bne.n	8000688 <_Z12CNI_send_msgm+0xe8>
 8000672:	4910      	ldr	r1, [pc, #64]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 8000674:	697a      	ldr	r2, [r7, #20]
 8000676:	4613      	mov	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4413      	add	r3, r2
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	440b      	add	r3, r1
 8000680:	3304      	adds	r3, #4
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0b9      	beq.n	80005fc <_Z12CNI_send_msgm+0x5c>
	}

	// Antes de retornar, se queda esperando a que se terminen de enviar todos los mensajes
	while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 8000688:	bf00      	nop
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fae7 	bl	8001c62 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	bf0c      	ite	eq
 800069a:	2301      	moveq	r3, #1
 800069c:	2300      	movne	r3, #0
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f2      	bne.n	800068a <_Z12CNI_send_msgm+0xea>

	return CNI_OK;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000f0 	.word	0x200000f0
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000120 	.word	0x20000120
 80006bc:	20000128 	.word	0x20000128

080006c0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_CAN1_Init+0x68>)
 80006c6:	4a19      	ldr	r2, [pc, #100]	; (800072c <MX_CAN1_Init+0x6c>)
 80006c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_CAN1_Init+0x68>)
 80006cc:	2203      	movs	r2, #3
 80006ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_CAN1_Init+0x68>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_CAN1_Init+0x68>)
 80006d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006dc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_CAN1_Init+0x68>)
 80006e0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80006e4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_CAN1_Init+0x68>)
 80006e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006ec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_CAN1_Init+0x68>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_CAN1_Init+0x68>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_CAN1_Init+0x68>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_CAN1_Init+0x68>)
 8000702:	2200      	movs	r2, #0
 8000704:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_CAN1_Init+0x68>)
 8000708:	2200      	movs	r2, #0
 800070a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_CAN1_Init+0x68>)
 800070e:	2200      	movs	r2, #0
 8000710:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_CAN1_Init+0x68>)
 8000714:	f000 ff70 	bl	80015f8 <HAL_CAN_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800071e:	f000 fa75 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000140 	.word	0x20000140
 800072c:	40006400 	.word	0x40006400

08000730 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a17      	ldr	r2, [pc, #92]	; (80007ac <HAL_CAN_MspInit+0x7c>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d127      	bne.n	80007a2 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <HAL_CAN_MspInit+0x80>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	4a16      	ldr	r2, [pc, #88]	; (80007b0 <HAL_CAN_MspInit+0x80>)
 8000758:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800075c:	6413      	str	r3, [r2, #64]	; 0x40
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_CAN_MspInit+0x80>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <HAL_CAN_MspInit+0x80>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <HAL_CAN_MspInit+0x80>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_CAN_MspInit+0x80>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000782:	2303      	movs	r3, #3
 8000784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000792:	2309      	movs	r3, #9
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <HAL_CAN_MspInit+0x84>)
 800079e:	f001 fc39 	bl	8002014 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80007a2:	bf00      	nop
 80007a4:	3728      	adds	r7, #40	; 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40006400 	.word	0x40006400
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020c00 	.word	0x40020c00

080007b8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b8b      	ldr	r3, [pc, #556]	; (80009fc <MX_GPIO_Init+0x244>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a8a      	ldr	r2, [pc, #552]	; (80009fc <MX_GPIO_Init+0x244>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b88      	ldr	r3, [pc, #544]	; (80009fc <MX_GPIO_Init+0x244>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	4b85      	ldr	r3, [pc, #532]	; (80009fc <MX_GPIO_Init+0x244>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a84      	ldr	r2, [pc, #528]	; (80009fc <MX_GPIO_Init+0x244>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b82      	ldr	r3, [pc, #520]	; (80009fc <MX_GPIO_Init+0x244>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b7f      	ldr	r3, [pc, #508]	; (80009fc <MX_GPIO_Init+0x244>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a7e      	ldr	r2, [pc, #504]	; (80009fc <MX_GPIO_Init+0x244>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b7c      	ldr	r3, [pc, #496]	; (80009fc <MX_GPIO_Init+0x244>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b79      	ldr	r3, [pc, #484]	; (80009fc <MX_GPIO_Init+0x244>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a78      	ldr	r2, [pc, #480]	; (80009fc <MX_GPIO_Init+0x244>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b76      	ldr	r3, [pc, #472]	; (80009fc <MX_GPIO_Init+0x244>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082e:	4b73      	ldr	r3, [pc, #460]	; (80009fc <MX_GPIO_Init+0x244>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a72      	ldr	r2, [pc, #456]	; (80009fc <MX_GPIO_Init+0x244>)
 8000834:	f043 0310 	orr.w	r3, r3, #16
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b70      	ldr	r3, [pc, #448]	; (80009fc <MX_GPIO_Init+0x244>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0310 	and.w	r3, r3, #16
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	4b6d      	ldr	r3, [pc, #436]	; (80009fc <MX_GPIO_Init+0x244>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a6c      	ldr	r2, [pc, #432]	; (80009fc <MX_GPIO_Init+0x244>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b6a      	ldr	r3, [pc, #424]	; (80009fc <MX_GPIO_Init+0x244>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085e:	4b67      	ldr	r3, [pc, #412]	; (80009fc <MX_GPIO_Init+0x244>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a66      	ldr	r2, [pc, #408]	; (80009fc <MX_GPIO_Init+0x244>)
 8000864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b64      	ldr	r3, [pc, #400]	; (80009fc <MX_GPIO_Init+0x244>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f244 0181 	movw	r1, #16513	; 0x4081
 800087c:	4860      	ldr	r0, [pc, #384]	; (8000a00 <MX_GPIO_Init+0x248>)
 800087e:	f001 fd75 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000888:	485e      	ldr	r0, [pc, #376]	; (8000a04 <MX_GPIO_Init+0x24c>)
 800088a:	f001 fd6f 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2140      	movs	r1, #64	; 0x40
 8000892:	485d      	ldr	r0, [pc, #372]	; (8000a08 <MX_GPIO_Init+0x250>)
 8000894:	f001 fd6a 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4857      	ldr	r0, [pc, #348]	; (8000a0c <MX_GPIO_Init+0x254>)
 80008b0:	f001 fbb0 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008b4:	2332      	movs	r3, #50	; 0x32
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c4:	230b      	movs	r3, #11
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	484f      	ldr	r0, [pc, #316]	; (8000a0c <MX_GPIO_Init+0x254>)
 80008d0:	f001 fba0 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008d4:	2386      	movs	r3, #134	; 0x86
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e4:	230b      	movs	r3, #11
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4848      	ldr	r0, [pc, #288]	; (8000a10 <MX_GPIO_Init+0x258>)
 80008f0:	f001 fb90 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008f4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	483c      	ldr	r0, [pc, #240]	; (8000a00 <MX_GPIO_Init+0x248>)
 800090e:	f001 fb81 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8000912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4836      	ldr	r0, [pc, #216]	; (8000a04 <MX_GPIO_Init+0x24c>)
 800092c:	f001 fb72 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000942:	230b      	movs	r3, #11
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	482c      	ldr	r0, [pc, #176]	; (8000a00 <MX_GPIO_Init+0x248>)
 800094e:	f001 fb61 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000952:	2340      	movs	r3, #64	; 0x40
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4827      	ldr	r0, [pc, #156]	; (8000a08 <MX_GPIO_Init+0x250>)
 800096a:	f001 fb53 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4821      	ldr	r0, [pc, #132]	; (8000a08 <MX_GPIO_Init+0x250>)
 8000982:	f001 fb47 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000986:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000998:	230a      	movs	r3, #10
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	481b      	ldr	r0, [pc, #108]	; (8000a10 <MX_GPIO_Init+0x258>)
 80009a4:	f001 fb36 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4814      	ldr	r0, [pc, #80]	; (8000a10 <MX_GPIO_Init+0x258>)
 80009be:	f001 fb29 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d4:	230b      	movs	r3, #11
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	480a      	ldr	r0, [pc, #40]	; (8000a08 <MX_GPIO_Init+0x250>)
 80009e0:	f001 fb18 	bl	8002014 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	2028      	movs	r0, #40	; 0x28
 80009ea:	f001 fa4a 	bl	8001e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ee:	2028      	movs	r0, #40	; 0x28
 80009f0:	f001 fa63 	bl	8001eba <HAL_NVIC_EnableIRQ>

}
 80009f4:	bf00      	nop
 80009f6:	3730      	adds	r7, #48	; 0x30
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020400 	.word	0x40020400
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40021800 	.word	0x40021800
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020000 	.word	0x40020000

08000a14 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>:
#include "stm32f7xx_hal.h"


namespace STM32{

    gpio::gpio(GPIO_TypeDef* pPortHandler, uint16_t pin)
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	80fb      	strh	r3, [r7, #6]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 f854 	bl	8000ad2 <_ZNSt8functionIFvvEEC1Ev>
    {
        m_portHandler = pPortHandler;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	68ba      	ldr	r2, [r7, #8]
 8000a2e:	611a      	str	r2, [r3, #16]
        m_pin = pin;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	88fa      	ldrh	r2, [r7, #6]
 8000a34:	829a      	strh	r2, [r3, #20]
    }
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <_ZN5STM324gpio6toggleEv>:
        GPIO_PinState ret = HAL_GPIO_ReadPin(m_portHandler, m_pin);
        return ret == GPIO_PIN_SET ? GPIO_ST::HIGH : GPIO_ST::LOW;
    }

    void gpio::toggle()
    {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
        HAL_GPIO_TogglePin(m_portHandler, m_pin);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	691a      	ldr	r2, [r3, #16]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	8a9b      	ldrh	r3, [r3, #20]
 8000a50:	4619      	mov	r1, r3
 8000a52:	4610      	mov	r0, r2
 8000a54:	f001 fca3 	bl	800239e <HAL_GPIO_TogglePin>
    }
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_ZN5STM324gpio5writeE7GPIO_ST>:

    void gpio::write(GPIO_ST st)
    {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
        GPIO_PinState pinState = map_hal_st_to_igpio_st(st); 
 8000a6a:	6838      	ldr	r0, [r7, #0]
 8000a6c:	f000 f80e 	bl	8000a8c <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>
 8000a70:	4603      	mov	r3, r0
 8000a72:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(m_portHandler, m_pin, pinState);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6918      	ldr	r0, [r3, #16]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	8a9b      	ldrh	r3, [r3, #20]
 8000a7c:	7bfa      	ldrb	r2, [r7, #15]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f001 fc74 	bl	800236c <HAL_GPIO_WritePin>
    }
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>:

    GPIO_PinState gpio::map_hal_st_to_igpio_st(GPIO_ST st)
	{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
		return st == GPIO_ST::HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d101      	bne.n	8000a9e <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x12>
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e000      	b.n	8000aa0 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x14>
 8000a9e:	2300      	movs	r3, #0
	}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_ZNSt14_Function_baseC1Ev>:
	  static bool
	  _M_not_empty_function(const _Tp&)
	  { return true; }
      };

    _Function_base() = default;
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	2300      	movs	r3, #0
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	6053      	str	r3, [r2, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	461a      	mov	r2, r3
 8000ade:	2300      	movs	r3, #0
 8000ae0:	6013      	str	r3, [r2, #0]
 8000ae2:	6053      	str	r3, [r2, #4]
 8000ae4:	6093      	str	r3, [r2, #8]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ffdf 	bl	8000aac <_ZNSt14_Function_baseC1Ev>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b02:	f000 fd1c 	bl	800153e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b06:	f000 f80d 	bl	8000b24 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0a:	f7ff fe55 	bl	80007b8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b0e:	f000 fc55 	bl	80013bc <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000b12:	f000 fa49 	bl	8000fa8 <MX_TIM5_Init>
  MX_CAN1_Init();
 8000b16:	f7ff fdd3 	bl	80006c0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  system_init();
 8000b1a:	f000 f981 	bl	8000e20 <_Z11system_initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  system_run_active_mode();
 8000b1e:	f000 f9a3 	bl	8000e68 <_Z22system_run_active_modev>
 8000b22:	e7fc      	b.n	8000b1e <main+0x20>

08000b24 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b094      	sub	sp, #80	; 0x50
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0320 	add.w	r3, r7, #32
 8000b2e:	2230      	movs	r2, #48	; 0x30
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f004 fd2d 	bl	8005592 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b48:	f001 fcbc 	bl	80024c4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	; (8000c04 <_Z18SystemClock_Configv+0xe0>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a2c      	ldr	r2, [pc, #176]	; (8000c04 <_Z18SystemClock_Configv+0xe0>)
 8000b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <_Z18SystemClock_Configv+0xe0>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b64:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <_Z18SystemClock_Configv+0xe4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b6c:	4a26      	ldr	r2, [pc, #152]	; (8000c08 <_Z18SystemClock_Configv+0xe4>)
 8000b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <_Z18SystemClock_Configv+0xe4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b80:	2309      	movs	r3, #9
 8000b82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b84:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b9c:	2348      	movs	r3, #72	; 0x48
 8000b9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba8:	f107 0320 	add.w	r3, r7, #32
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 fc99 	bl	80024e4 <HAL_RCC_OscConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	bf14      	ite	ne
 8000bb8:	2301      	movne	r3, #1
 8000bba:	2300      	moveq	r3, #0
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000bc2:	f000 f823 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc6:	230f      	movs	r3, #15
 8000bc8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	2102      	movs	r1, #2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 ff22 	bl	8002a2c <HAL_RCC_ClockConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	bf14      	ite	ne
 8000bee:	2301      	movne	r3, #1
 8000bf0:	2300      	moveq	r3, #0
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000bf8:	f000 f808 	bl	8000c0c <Error_Handler>
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	3750      	adds	r7, #80	; 0x50
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40007000 	.word	0x40007000

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <Error_Handler+0x8>
	...

08000c18 <_Z20fail_silent_mode_runv>:

#define LED_FAIL_SILENT_GPIO_Port LD3_GPIO_Port
#define LED_FAIL_SILENT_GPIO_Pin  LD3_Pin

void fail_silent_mode_run(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
	STM32::gpio ledFailSilent(LED_FAIL_SILENT_GPIO_Port, LED_FAIL_SILENT_GPIO_Pin);
 8000c1e:	463b      	mov	r3, r7
 8000c20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c24:	4904      	ldr	r1, [pc, #16]	; (8000c38 <_Z20fail_silent_mode_runv+0x20>)
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fef4 	bl	8000a14 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>


	ledFailSilent.write(GPIO_ST::HIGH);
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff15 	bl	8000a60 <_ZN5STM324gpio5writeE7GPIO_ST>

	while(1)
 8000c36:	e7fe      	b.n	8000c36 <_Z20fail_silent_mode_runv+0x1e>
 8000c38:	40020400 	.word	0x40020400

08000c3c <_Z15normal_mode_runv>:
#define LED_HEARTBEAT_GPIO_Pin  LD1_Pin

static bool run = false;

void normal_mode_run(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b09e      	sub	sp, #120	; 0x78
 8000c40:	af04      	add	r7, sp, #16
//	taskUARTsendData_t taskSendIMUUART1;
//	taskUARTsendData_t taskSendIMUUART2;
//	taskUARTsendData_t taskSendIMUUART3;

	// Inicialización del LED heartbeat==============================
	STM32::gpio ledHeartbeat(LED_HEARTBEAT_GPIO_Port, LED_HEARTBEAT_GPIO_Pin);
 8000c42:	463b      	mov	r3, r7
 8000c44:	2201      	movs	r2, #1
 8000c46:	4932      	ldr	r1, [pc, #200]	; (8000d10 <_Z15normal_mode_runv+0xd4>)
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fee3 	bl	8000a14 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

	// Inicialización de la CNI ==============================
	CNI_constructor(&hcan1);
 8000c4e:	4831      	ldr	r0, [pc, #196]	; (8000d14 <_Z15normal_mode_runv+0xd8>)
 8000c50:	f7ff fc58 	bl	8000504 <_Z15CNI_constructorP19__CAN_HandleTypeDef>

	// Inicialización de la UART ============================
//	timeTriggeredUART_constructor(&huart3, 8);

	// Creación de las tareas========================================
	taskWatchdog_constructor(&taskWatchdog,
 8000c54:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000c58:	4b2f      	ldr	r3, [pc, #188]	; (8000d18 <_Z15normal_mode_runv+0xdc>)
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2364      	movs	r3, #100	; 0x64
 8000c62:	2201      	movs	r2, #1
 8000c64:	2100      	movs	r1, #0
 8000c66:	f000 f957 	bl	8000f18 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>
			PERIOD_TASK_WATCHDOG_TICKS_NORMAL,
			WCET_TASK_WATCHDOG_US,
			BCET_TASK_WATCHDOG_US,
			&hiwdg);

	taskHeartbeat_constructor(&taskHeartbeat,
 8000c6a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000c6e:	463b      	mov	r3, r7
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	2300      	movs	r3, #0
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2364      	movs	r3, #100	; 0x64
 8000c78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	f000 f915 	bl	8000eac <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>
			PERIOD_TASK_HEARTBEAT_TICKS_NORMAL,
			WCET_TASK_HEARTBEAT_US,
			BCET_TASK_HEARTBEAT_US,
			&ledHeartbeat);

	taskTimeTriggeredSync_constructor(&taskPeriodicSync,
 8000c82:	f107 0018 	add.w	r0, r7, #24
 8000c86:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000c8a:	9303      	str	r3, [sp, #12]
 8000c8c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000c90:	9302      	str	r3, [sp, #8]
 8000c92:	2300      	movs	r3, #0
 8000c94:	9301      	str	r3, [sp, #4]
 8000c96:	2300      	movs	r3, #0
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2364      	movs	r3, #100	; 0x64
 8000c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ca0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8000ca4:	f000 fae4 	bl	8001270 <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm>
//			BCET_TASK_RECEIVE_IMU_3_US,
//			HANDLE_MSG_CNI_IMU_3);


	// Inicialización del scheduler =================================
	timeTriggeredScheduler_constructor(&htim5, MICROTICKS_IN_MACROTICK);
 8000ca8:	f240 31e7 	movw	r1, #999	; 0x3e7
 8000cac:	481b      	ldr	r0, [pc, #108]	; (8000d1c <_Z15normal_mode_runv+0xe0>)
 8000cae:	f000 fa01 	bl	80010b4 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm>
	timeTriggeredScheduler_init();
 8000cb2:	f000 fa29 	bl	8001108 <_Z27timeTriggeredScheduler_initv>

	CNI_init();
 8000cb6:	f7ff fc41 	bl	800053c <_Z8CNI_initv>

	taskHeartbeat_start(&taskHeartbeat);
 8000cba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f90e 	bl	8000ee0 <_Z19taskHeartbeat_startP15taskHeartbeat_t>

	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskHeartbeat);
 8000cc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 faa9 	bl	8001220 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskWatchdog);
 8000cce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 faa4 	bl	8001220 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskPeriodicSync);
 8000cd8:	f107 0318 	add.w	r3, r7, #24
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 fa9f 	bl	8001220 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
//	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskSendIMUUART2);
//	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskSendIMUUART3);



	CNI_start();
 8000ce2:	f7ff fc51 	bl	8000588 <_Z9CNI_startv>

	// Se queda acá esperando hasta que se cumpla la condición para comenzar
	while(!run)
 8000ce6:	bf00      	nop
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <_Z15normal_mode_runv+0xe4>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	f083 0301 	eor.w	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1f8      	bne.n	8000ce8 <_Z15normal_mode_runv+0xac>
	{
		//__asm__("wfi");
	}

#if IS_MASTER
	CNI_send_msg(HANDLE_MSG_CNI_SYNC);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff fc52 	bl	80005a0 <_Z12CNI_send_msgm>
#endif
	taskWatchdog_start(&taskWatchdog);
 8000cfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f937 	bl	8000f74 <_Z18taskWatchdog_startP14taskWatchdog_t>

	timeTriggeredScheduler_start();
 8000d06:	f000 fa17 	bl	8001138 <_Z28timeTriggeredScheduler_startv>

	while(1)
	{
		timeTriggeredScheduler_dispatch();
 8000d0a:	f000 fa21 	bl	8001150 <_Z31timeTriggeredScheduler_dispatchv>
 8000d0e:	e7fc      	b.n	8000d0a <_Z15normal_mode_runv+0xce>
 8000d10:	40020400 	.word	0x40020400
 8000d14:	20000140 	.word	0x20000140
 8000d18:	20000168 	.word	0x20000168
 8000d1c:	20000180 	.word	0x20000180
 8000d20:	20000178 	.word	0x20000178

08000d24 <HAL_GPIO_EXTI_Callback>:
	}
}

#if IS_MASTER
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USER_Btn_Pin)
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d34:	d102      	bne.n	8000d3c <HAL_GPIO_EXTI_Callback+0x18>
    {
    	run = true;
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x24>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
    }
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	20000178 	.word	0x20000178

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <HAL_MspInit+0x44>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <HAL_MspInit+0x44>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_MspInit+0x44>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_MspInit+0x44>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_MspInit+0x44>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_MspInit+0x44>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d98:	e7fe      	b.n	8000d98 <NMI_Handler+0x4>

08000d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <MemManage_Handler+0x4>

08000da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 fbea 	bl	80015b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <USART3_IRQHandler+0x10>)
 8000dee:	f003 fbad 	bl	800454c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000384 	.word	0x20000384

08000dfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000e00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e04:	f001 fae6 	bl	80023d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <TIM5_IRQHandler+0x10>)
 8000e12:	f002 fd2c 	bl	800386e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000180 	.word	0x20000180

08000e20 <_Z11system_initv>:
};

static systemMode theSystemMode = FAIL_SILENT;

void system_init(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <_Z11system_initv+0x40>)
 8000e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf14      	ite	ne
 8000e30:	2301      	movne	r3, #1
 8000e32:	2300      	moveq	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d009      	beq.n	8000e4e <_Z11system_initv+0x2e>
	{
		__HAL_RCC_CLEAR_RESET_FLAGS();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <_Z11system_initv+0x40>)
 8000e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <_Z11system_initv+0x40>)
 8000e40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e44:	6753      	str	r3, [r2, #116]	; 0x74

		theSystemMode = FAIL_SILENT;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_Z11system_initv+0x44>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		theSystemMode = NORMAL;
	}
}
 8000e4c:	e002      	b.n	8000e54 <_Z11system_initv+0x34>
		theSystemMode = NORMAL;
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <_Z11system_initv+0x44>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	2000017c 	.word	0x2000017c

08000e68 <_Z22system_run_active_modev>:

void system_run_active_mode(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	switch(theSystemMode)
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <_Z22system_run_active_modev+0x1c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d102      	bne.n	8000e7a <_Z22system_run_active_modev+0x12>
	{
		case NORMAL:
			normal_mode_run();
 8000e74:	f7ff fee2 	bl	8000c3c <_Z15normal_mode_runv>
			break;
 8000e78:	e002      	b.n	8000e80 <_Z22system_run_active_modev+0x18>

		default:
		case FAIL_SILENT:
			fail_silent_mode_run();
 8000e7a:	f7ff fecd 	bl	8000c18 <_Z20fail_silent_mode_runv>
			break;
 8000e7e:	bf00      	nop
	}
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000017c 	.word	0x2000017c

08000e88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <SystemInit+0x20>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <SystemInit+0x20>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>:
 */

#include "taskHeartbeat.h"

void taskHeartbeat_constructor(taskHeartbeat_t *me , uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, STM32::gpio *led)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskHeartbeat_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	4904      	ldr	r1, [pc, #16]	; (8000edc <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE+0x30>)
 8000eca:	f000 fa0f 	bl	80012ec <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mLED_ = led;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	69fa      	ldr	r2, [r7, #28]
 8000ed2:	615a      	str	r2, [r3, #20]
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	08000efd 	.word	0x08000efd

08000ee0 <_Z19taskHeartbeat_startP15taskHeartbeat_t>:
	me->mLED_->write(GPIO_ST::LOW);
	timeTriggeredTask_destructor(&me->super);
}

void taskHeartbeat_start(taskHeartbeat_t *me)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	me->mLED_->write(GPIO_ST::HIGH);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	2101      	movs	r1, #1
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fdb6 	bl	8000a60 <_ZN5STM324gpio5writeE7GPIO_ST>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <_Z20taskHeartbeat_updateP15taskHeartbeat_t>:

void taskHeartbeat_update(taskHeartbeat_t *me)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	me->mLED_->toggle();
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fd99 	bl	8000a40 <_ZN5STM324gpio6toggleEv>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>:
 */

#include "taskWatchdog.h"

void taskWatchdog_constructor(taskWatchdog_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, IWDG_HandleTypeDef *hiwdg)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af02      	add	r7, sp, #8
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskWatchdog_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	490d      	ldr	r1, [pc, #52]	; (8000f6c <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x54>)
 8000f36:	f000 f9d9 	bl	80012ec <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mHiwdg_ = hiwdg;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	69fa      	ldr	r2, [r7, #28]
 8000f3e:	615a      	str	r2, [r3, #20]

	me->mHiwdg_->Instance = IWDG;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x58>)
 8000f46:	601a      	str	r2, [r3, #0]
	me->mHiwdg_->Init.Prescaler = IWDG_PRESCALER_4;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
	me->mHiwdg_->Init.Window = 4095;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f58:	60da      	str	r2, [r3, #12]
	me->mHiwdg_->Init.Reload = 9;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	2209      	movs	r2, #9
 8000f60:	609a      	str	r2, [r3, #8]
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	08000f8f 	.word	0x08000f8f
 8000f70:	40003000 	.word	0x40003000

08000f74 <_Z18taskWatchdog_startP14taskWatchdog_t>:
{
	timeTriggeredTask_destructor(&me->super);
}

void taskWatchdog_start(taskWatchdog_t *me)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Init(me->mHiwdg_);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 fa3f 	bl	8002404 <HAL_IWDG_Init>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <_Z19taskWatchdog_updateP14taskWatchdog_t>:

void taskWatchdog_update(taskWatchdog_t *me)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(me->mHiwdg_);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fa81 	bl	80024a2 <HAL_IWDG_Refresh>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_TIM5_Init+0x94>)
 8000fc8:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <MX_TIM5_Init+0x98>)
 8000fca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_TIM5_Init+0x94>)
 8000fce:	2247      	movs	r2, #71	; 0x47
 8000fd0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_TIM5_Init+0x94>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_TIM5_Init+0x94>)
 8000fda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fde:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_TIM5_Init+0x94>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_TIM5_Init+0x94>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fec:	4813      	ldr	r0, [pc, #76]	; (800103c <MX_TIM5_Init+0x94>)
 8000fee:	f002 fb33 	bl	8003658 <HAL_TIM_Base_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000ff8:	f7ff fe08 	bl	8000c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001000:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001002:	f107 0310 	add.w	r3, r7, #16
 8001006:	4619      	mov	r1, r3
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <MX_TIM5_Init+0x94>)
 800100a:	f002 fd71 	bl	8003af0 <HAL_TIM_ConfigClockSource>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001014:	f7ff fdfa 	bl	8000c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_TIM5_Init+0x94>)
 8001026:	f003 f97d 	bl	8004324 <HAL_TIMEx_MasterConfigSynchronization>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001030:	f7ff fdec 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000180 	.word	0x20000180
 8001040:	40000c00 	.word	0x40000c00

08001044 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <HAL_TIM_Base_MspInit+0x44>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d113      	bne.n	800107e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <HAL_TIM_Base_MspInit+0x48>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <HAL_TIM_Base_MspInit+0x48>)
 800105c:	f043 0308 	orr.w	r3, r3, #8
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_TIM_Base_MspInit+0x48>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2032      	movs	r0, #50	; 0x32
 8001074:	f000 ff05 	bl	8001e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001078:	2032      	movs	r0, #50	; 0x32
 800107a:	f000 ff1e 	bl	8001eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40000c00 	.word	0x40000c00
 800108c:	40023800 	.word	0x40023800

08001090 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef>:
#include "CNI.h"

static timeTriggeredScheduler_t _instance;

static void timeTriggeredScheduler_tick(TIM_HandleTypeDef *htim)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	_instance.mTicks_++;
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef+0x20>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	3301      	adds	r3, #1
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef+0x20>)
 80010a0:	6053      	str	r3, [r2, #4]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	2000023c 	.word	0x2000023c

080010b4 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm>:

void timeTriggeredScheduler_constructor(TIM_HandleTypeDef *timer, uint32_t macroTick)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	uint32_t i;

	_instance.mTimer_ = timer;
 80010be:	4a11      	ldr	r2, [pc, #68]	; (8001104 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6013      	str	r3, [r2, #0]

	for(i = 0; i < MAX_NUM_TASKS ; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	e008      	b.n	80010dc <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x28>
	{
		_instance.mTaskList_[i] = 0;
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3302      	adds	r3, #2
 80010d0:	2100      	movs	r1, #0
 80010d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i = 0; i < MAX_NUM_TASKS ; i++)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3301      	adds	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b09      	cmp	r3, #9
 80010e0:	d9f3      	bls.n	80010ca <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x16>
	}

	_instance.mTicks_ = 0;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
	_instance.mMacroTick_ = macroTick;
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
	_instance.mSyncExecuted_ = 0;
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	2000023c 	.word	0x2000023c

08001108 <_Z27timeTriggeredScheduler_initv>:

void timeTriggeredScheduler_init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(_instance.mTimer_);
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <_Z27timeTriggeredScheduler_initv+0x28>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f002 fb7d 	bl	8003810 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_RegisterCallback(_instance.mTimer_, HAL_TIM_PERIOD_ELAPSED_CB_ID, timeTriggeredScheduler_tick);
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <_Z27timeTriggeredScheduler_initv+0x28>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a06      	ldr	r2, [pc, #24]	; (8001134 <_Z27timeTriggeredScheduler_initv+0x2c>)
 800111c:	210e      	movs	r1, #14
 800111e:	4618      	mov	r0, r3
 8001120:	f002 fe14 	bl	8003d4c <HAL_TIM_RegisterCallback>

	_instance.mSyncExecuted_ = 0;
 8001124:	4b02      	ldr	r3, [pc, #8]	; (8001130 <_Z27timeTriggeredScheduler_initv+0x28>)
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000023c 	.word	0x2000023c
 8001134:	08001091 	.word	0x08001091

08001138 <_Z28timeTriggeredScheduler_startv>:

void timeTriggeredScheduler_start(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(_instance.mTimer_);
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <_Z28timeTriggeredScheduler_startv+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f002 faed 	bl	8003720 <HAL_TIM_Base_Start_IT>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000023c 	.word	0x2000023c

08001150 <_Z31timeTriggeredScheduler_dispatchv>:
{
	HAL_TIM_Base_Stop_IT(_instance.mTimer_);
}

void timeTriggeredScheduler_dispatch(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
	uint8_t updateRequired = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 800115a:	b672      	cpsid	i
}
 800115c:	bf00      	nop
	uint32_t i;
	timeTriggeredTask_t *task;

	__disable_irq();
	if(_instance.mTicks_ > 0)
 800115e:	4b2f      	ldr	r3, [pc, #188]	; (800121c <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	bf14      	ite	ne
 8001166:	2301      	movne	r3, #1
 8001168:	2300      	moveq	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d006      	beq.n	800117e <_Z31timeTriggeredScheduler_dispatchv+0x2e>
	{
		_instance.mTicks_--;
 8001170:	4b2a      	ldr	r3, [pc, #168]	; (800121c <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	3b01      	subs	r3, #1
 8001176:	4a29      	ldr	r2, [pc, #164]	; (800121c <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 8001178:	6053      	str	r3, [r2, #4]
		updateRequired = 1;
 800117a:	2301      	movs	r3, #1
 800117c:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800117e:	b662      	cpsie	i
}
 8001180:	bf00      	nop
#endif
	}

	__enable_irq();

	while(updateRequired)
 8001182:	e043      	b.n	800120c <_Z31timeTriggeredScheduler_dispatchv+0xbc>
	{
		for(i = 0; i < MAX_NUM_TASKS; i++)
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	e026      	b.n	80011d8 <_Z31timeTriggeredScheduler_dispatchv+0x88>
		{
			if((task = _instance.mTaskList_[i]))
 800118a:	4a24      	ldr	r2, [pc, #144]	; (800121c <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	3302      	adds	r3, #2
 8001190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf14      	ite	ne
 800119c:	2301      	movne	r3, #1
 800119e:	2300      	moveq	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d015      	beq.n	80011d2 <_Z31timeTriggeredScheduler_dispatchv+0x82>
			{
				//if( (--(me->mTaskList_[i]->mDelayTicks_)) == 0 )
				if( (--(task->mDelayTicks_)) == 0 )
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	1e5a      	subs	r2, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bf0c      	ite	eq
 80011b8:	2301      	moveq	r3, #1
 80011ba:	2300      	movne	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <_Z31timeTriggeredScheduler_dispatchv+0x82>
				{
					//timeTriggeredTask_update((timeTriggeredTask_t*)(me->mTaskList_[i]));
					(*(task->mTaskHandler_))(task);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	4798      	blx	r3
					//me->mTaskList_[i]->mDelayTicks_ = me->mTaskList_[i]->mPeriodTicks_;
					task->mDelayTicks_ = task->mPeriodTicks_;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	605a      	str	r2, [r3, #4]
		for(i = 0; i < MAX_NUM_TASKS; i++)
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	3301      	adds	r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	2b09      	cmp	r3, #9
 80011dc:	d9d5      	bls.n	800118a <_Z31timeTriggeredScheduler_dispatchv+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 80011de:	b672      	cpsid	i
}
 80011e0:	bf00      	nop
			}
		}

		__disable_irq();

		if(_instance.mTicks_ > 0)
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf14      	ite	ne
 80011ea:	2301      	movne	r3, #1
 80011ec:	2300      	moveq	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d007      	beq.n	8001204 <_Z31timeTriggeredScheduler_dispatchv+0xb4>
		{
			_instance.mTicks_--;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 80011fc:	6053      	str	r3, [r2, #4]
			updateRequired = 1;
 80011fe:	2301      	movs	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	e001      	b.n	8001208 <_Z31timeTriggeredScheduler_dispatchv+0xb8>
		}
		else
		{
			updateRequired = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8001208:	b662      	cpsie	i
}
 800120a:	bf00      	nop
	while(updateRequired)
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1b8      	bne.n	8001184 <_Z31timeTriggeredScheduler_dispatchv+0x34>
		}

		__enable_irq();
	}
	__asm__("wfi");
 8001212:	bf30      	wfi
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000023c 	.word	0x2000023c

08001220 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>:

TTschStatus_t timeTriggeredScheduler_add_task(timeTriggeredTask_t *task)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]

	while( (_instance.mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 800122c:	e002      	b.n	8001234 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x14>
	{
		i++;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3301      	adds	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
	while( (_instance.mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x4c>)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3302      	adds	r3, #2
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x28>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2b09      	cmp	r3, #9
 8001246:	d9f2      	bls.n	800122e <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0xe>
	}

	if(i == MAX_NUM_TASKS)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b0a      	cmp	r3, #10
 800124c:	d101      	bne.n	8001252 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x32>
	{
		return TTsch_ERROR_MAX_TASKS_REACHED;
 800124e:	2301      	movs	r3, #1
 8001250:	e006      	b.n	8001260 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x40>
	}

	_instance.mTaskList_[i] = task;
 8001252:	4906      	ldr	r1, [pc, #24]	; (800126c <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x4c>)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3302      	adds	r3, #2
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return TTsch_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	2000023c 	.word	0x2000023c

08001270 <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm>:

void taskTimeTriggeredSync_constructor(taskTimeTriggeredSync_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg, uint32_t expectedTimestamp, uint32_t delaySync)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af02      	add	r7, sp, #8
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskTimeTriggeredSync_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	4907      	ldr	r1, [pc, #28]	; (80012ac <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm+0x3c>)
 800128e:	f000 f82d 	bl	80012ec <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mHandleMsg_ = handleMsg;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	615a      	str	r2, [r3, #20]
	me->mExpectedTimestamp_ = expectedTimestamp;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6a3a      	ldr	r2, [r7, #32]
 800129c:	619a      	str	r2, [r3, #24]
	me->mDelaySync_ = delaySync;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a2:	61da      	str	r2, [r3, #28]
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	080012b1 	.word	0x080012b1

080012b0 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t>:
{
	// Por ahora no hace nada
}

void taskTimeTriggeredSync_update(taskTimeTriggeredSync_t *me)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
		// Le aviso al scheduler que en el próximo tick, vuelva a dejar el timer como estaba antes
		_instance.mSyncExecuted_ = 1;
	}
#else
	// Espero un rato
	while(__HAL_TIM_GET_COUNTER(_instance.mTimer_) < me->mDelaySync_);
 80012b8:	bf00      	nop
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x38>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	bf34      	ite	cc
 80012ca:	2301      	movcc	r3, #1
 80012cc:	2300      	movcs	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f2      	bne.n	80012ba <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xa>
	// Envío el mensaje de sync
	CNI_send_msg(me->mHandleMsg_);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f961 	bl	80005a0 <_Z12CNI_send_msgm>
#endif
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000023c 	.word	0x2000023c

080012ec <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>:
 */

#include "timeTriggeredTask.h"

void timeTriggeredTask_constructor(timeTriggeredTask_t *me, taskHandler_t taskHandler, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	603b      	str	r3, [r7, #0]
	me->mTaskHandler_ = taskHandler;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	601a      	str	r2, [r3, #0]

	me->mDelayTicks_ = delayTicks + 1;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	605a      	str	r2, [r3, #4]
	me->mPeriodTicks_ = periodTicks;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	609a      	str	r2, [r3, #8]
	me->mWcetMicroSeconds_ = wcetMicroSeconds;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	60da      	str	r2, [r3, #12]
	me->mBcetMicroSeconds_ = bcetMicroSeconds;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	69fa      	ldr	r2, [r7, #28]
 8001318:	611a      	str	r2, [r3, #16]
}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <_ZN19timeTriggeredUART_tC1Ev>:
typedef struct
{
	UART_HandleTypeDef *mHuart_;
	circ_buffer<uint8_t, SIZE_BUFFER_UART> mBuffer_;
	uint8_t mBytesToSend_;
} timeTriggeredUART_t;
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3304      	adds	r3, #4
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f805 	bl	8001342 <_ZN11circ_bufferIhLm256EtEC1Ev>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_ZN11circ_bufferIhLm256EtEC1Ev>:
                bool mEmpty_;

        };

        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
        {
            mFull_ = false;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            mEmpty_ = true;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
            mHead_ = 0;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
            mTail_ = 0;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
            mSize_ = 0;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	801a      	strh	r2, [r3, #0]
            
        }
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <_Z41__static_initialization_and_destruction_0ii>:
	_instance.mBuffer_.copy_to(buffer, numElementsInBuffer);

	HAL_UART_Transmit(_instance.mHuart_,buffer, numElementsInBuffer, TIMEOUT_UART_SEND_MS);

	return TTUART_OK;
}
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d107      	bne.n	80013a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001396:	4293      	cmp	r3, r2
 8001398:	d102      	bne.n	80013a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
static timeTriggeredUART_t _instance;
 800139a:	4803      	ldr	r0, [pc, #12]	; (80013a8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800139c:	f7ff ffc3 	bl	8001326 <_ZN19timeTriggeredUART_tC1Ev>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000274 	.word	0x20000274

080013ac <_GLOBAL__sub_I__Z29timeTriggeredUART_constructorP20__UART_HandleTypeDefh>:
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff ffe3 	bl	8001380 <_Z41__static_initialization_and_destruction_0ii>
 80013ba:	bd80      	pop	{r7, pc}

080013bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013c2:	4a15      	ldr	r2, [pc, #84]	; (8001418 <MX_USART3_UART_Init+0x5c>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_USART3_UART_Init+0x58>)
 8001400:	f003 f846 	bl	8004490 <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800140a:	f7ff fbff 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000384 	.word	0x20000384
 8001418:	40004800 	.word	0x40004800

0800141c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b0aa      	sub	sp, #168	; 0xa8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	2284      	movs	r2, #132	; 0x84
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f004 f8a8 	bl	8005592 <memset>
  if(uartHandle->Instance==USART3)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a26      	ldr	r2, [pc, #152]	; (80014e0 <HAL_UART_MspInit+0xc4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d144      	bne.n	80014d6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800144c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001450:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001452:	2300      	movs	r3, #0
 8001454:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	4618      	mov	r0, r3
 800145c:	f001 fd0c 	bl	8002e78 <HAL_RCCEx_PeriphCLKConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001466:	f7ff fbd1 	bl	8000c0c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_UART_MspInit+0xc8>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_UART_MspInit+0xc8>)
 8001470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_UART_MspInit+0xc8>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_UART_MspInit+0xc8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <HAL_UART_MspInit+0xc8>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_UART_MspInit+0xc8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800149a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800149e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014b4:	2307      	movs	r3, #7
 80014b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014be:	4619      	mov	r1, r3
 80014c0:	4809      	ldr	r0, [pc, #36]	; (80014e8 <HAL_UART_MspInit+0xcc>)
 80014c2:	f000 fda7 	bl	8002014 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2027      	movs	r0, #39	; 0x27
 80014cc:	f000 fcd9 	bl	8001e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014d0:	2027      	movs	r0, #39	; 0x27
 80014d2:	f000 fcf2 	bl	8001eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014d6:	bf00      	nop
 80014d8:	37a8      	adds	r7, #168	; 0xa8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40004800 	.word	0x40004800
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020c00 	.word	0x40020c00

080014ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001524 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f0:	480d      	ldr	r0, [pc, #52]	; (8001528 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014f2:	490e      	ldr	r1, [pc, #56]	; (800152c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f4:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001508:	4c0b      	ldr	r4, [pc, #44]	; (8001538 <LoopFillZerobss+0x26>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001516:	f7ff fcb7 	bl	8000e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151a:	f004 f843 	bl	80055a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151e:	f7ff faee 	bl	8000afe <main>
  bx  lr    
 8001522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001524:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001530:	08005630 	.word	0x08005630
  ldr r2, =_sbss
 8001534:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001538:	2000043c 	.word	0x2000043c

0800153c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC_IRQHandler>

0800153e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001542:	2003      	movs	r0, #3
 8001544:	f000 fc92 	bl	8001e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001548:	2000      	movs	r0, #0
 800154a:	f000 f805 	bl	8001558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800154e:	f7ff fbfd 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x54>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_InitTick+0x58>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fcad 	bl	8001ed6 <HAL_SYSTICK_Config>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e00e      	b.n	80015a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	d80a      	bhi.n	80015a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158c:	2200      	movs	r2, #0
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001594:	f000 fc75 	bl	8001e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001598:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <HAL_InitTick+0x5c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200000f8 	.word	0x200000f8
 80015b0:	20000100 	.word	0x20000100
 80015b4:	200000fc 	.word	0x200000fc

080015b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x20>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_IncTick+0x24>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	4a04      	ldr	r2, [pc, #16]	; (80015dc <HAL_IncTick+0x24>)
 80015ca:	6013      	str	r3, [r2, #0]
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000100 	.word	0x20000100
 80015dc:	20000438 	.word	0x20000438

080015e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return uwTick;
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <HAL_GetTick+0x14>)
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000438 	.word	0x20000438

080015f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e0ed      	b.n	80017e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff f88a 	bl	8000730 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0201 	orr.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800162c:	f7ff ffd8 	bl	80015e0 <HAL_GetTick>
 8001630:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001632:	e012      	b.n	800165a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001634:	f7ff ffd4 	bl	80015e0 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b0a      	cmp	r3, #10
 8001640:	d90b      	bls.n	800165a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2205      	movs	r2, #5
 8001652:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0c5      	b.n	80017e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0e5      	beq.n	8001634 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0202 	bic.w	r2, r2, #2
 8001676:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001678:	f7ff ffb2 	bl	80015e0 <HAL_GetTick>
 800167c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800167e:	e012      	b.n	80016a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001680:	f7ff ffae 	bl	80015e0 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b0a      	cmp	r3, #10
 800168c:	d90b      	bls.n	80016a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2205      	movs	r2, #5
 800169e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e09f      	b.n	80017e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1e5      	bne.n	8001680 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7e1b      	ldrb	r3, [r3, #24]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d108      	bne.n	80016ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	e007      	b.n	80016de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	7e5b      	ldrb	r3, [r3, #25]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d108      	bne.n	80016f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	e007      	b.n	8001708 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001706:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7e9b      	ldrb	r3, [r3, #26]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d108      	bne.n	8001722 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0220 	orr.w	r2, r2, #32
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	e007      	b.n	8001732 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0220 	bic.w	r2, r2, #32
 8001730:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7edb      	ldrb	r3, [r3, #27]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d108      	bne.n	800174c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0210 	bic.w	r2, r2, #16
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e007      	b.n	800175c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0210 	orr.w	r2, r2, #16
 800175a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7f1b      	ldrb	r3, [r3, #28]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d108      	bne.n	8001776 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0208 	orr.w	r2, r2, #8
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	e007      	b.n	8001786 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0208 	bic.w	r2, r2, #8
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7f5b      	ldrb	r3, [r3, #29]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d108      	bne.n	80017a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0204 	orr.w	r2, r2, #4
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	e007      	b.n	80017b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0204 	bic.w	r2, r2, #4
 80017ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	ea42 0103 	orr.w	r1, r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	1e5a      	subs	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001806:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001808:	7cfb      	ldrb	r3, [r7, #19]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d003      	beq.n	8001816 <HAL_CAN_ConfigFilter+0x26>
 800180e:	7cfb      	ldrb	r3, [r7, #19]
 8001810:	2b02      	cmp	r3, #2
 8001812:	f040 80be 	bne.w	8001992 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001816:	4b65      	ldr	r3, [pc, #404]	; (80019ac <HAL_CAN_ConfigFilter+0x1bc>)
 8001818:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001820:	f043 0201 	orr.w	r2, r3, #1
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001830:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	431a      	orrs	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f003 031f 	and.w	r3, r3, #31
 8001856:	2201      	movs	r2, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	43db      	mvns	r3, r3
 8001868:	401a      	ands	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d123      	bne.n	80018c0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43db      	mvns	r3, r3
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800189a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3248      	adds	r2, #72	; 0x48
 80018a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018b6:	6979      	ldr	r1, [r7, #20]
 80018b8:	3348      	adds	r3, #72	; 0x48
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d122      	bne.n	800190e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3248      	adds	r2, #72	; 0x48
 80018ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001902:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001904:	6979      	ldr	r1, [r7, #20]
 8001906:	3348      	adds	r3, #72	; 0x48
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d109      	bne.n	800192a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	43db      	mvns	r3, r3
 8001920:	401a      	ands	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001928:	e007      	b.n	800193a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	431a      	orrs	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	43db      	mvns	r3, r3
 800194c:	401a      	ands	r2, r3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001954:	e007      	b.n	8001966 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	431a      	orrs	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d107      	bne.n	800197e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	431a      	orrs	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001984:	f023 0201 	bic.w	r2, r3, #1
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e006      	b.n	80019a0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
  }
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	40006400 	.word	0x40006400

080019b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d12e      	bne.n	8001a22 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2202      	movs	r2, #2
 80019c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0201 	bic.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019dc:	f7ff fe00 	bl	80015e0 <HAL_GetTick>
 80019e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019e2:	e012      	b.n	8001a0a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019e4:	f7ff fdfc 	bl	80015e0 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b0a      	cmp	r3, #10
 80019f0:	d90b      	bls.n	8001a0a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2205      	movs	r2, #5
 8001a02:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e012      	b.n	8001a30 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1e5      	bne.n	80019e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e006      	b.n	8001a30 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
  }
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a4c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a56:	7ffb      	ldrb	r3, [r7, #31]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d003      	beq.n	8001a64 <HAL_CAN_AddTxMessage+0x2c>
 8001a5c:	7ffb      	ldrb	r3, [r7, #31]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	f040 80ad 	bne.w	8001bbe <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10a      	bne.n	8001a84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d105      	bne.n	8001a84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8095 	beq.w	8001bae <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	0e1b      	lsrs	r3, r3, #24
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a8e:	2201      	movs	r2, #1
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10d      	bne.n	8001abc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001aaa:	68f9      	ldr	r1, [r7, #12]
 8001aac:	6809      	ldr	r1, [r1, #0]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	3318      	adds	r3, #24
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	440b      	add	r3, r1
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e00f      	b.n	8001adc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ac6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001acc:	68f9      	ldr	r1, [r7, #12]
 8001ace:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ad0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3318      	adds	r3, #24
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	440b      	add	r3, r1
 8001ada:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6819      	ldr	r1, [r3, #0]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3318      	adds	r3, #24
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	440b      	add	r3, r1
 8001aec:	3304      	adds	r3, #4
 8001aee:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	7d1b      	ldrb	r3, [r3, #20]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d111      	bne.n	8001b1c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3318      	adds	r3, #24
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	3304      	adds	r3, #4
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	6811      	ldr	r1, [r2, #0]
 8001b0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3318      	adds	r3, #24
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	440b      	add	r3, r1
 8001b18:	3304      	adds	r3, #4
 8001b1a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3307      	adds	r3, #7
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	061a      	lsls	r2, r3, #24
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3306      	adds	r3, #6
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	041b      	lsls	r3, r3, #16
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3305      	adds	r3, #5
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	4313      	orrs	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	3204      	adds	r2, #4
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	4610      	mov	r0, r2
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	6811      	ldr	r1, [r2, #0]
 8001b44:	ea43 0200 	orr.w	r2, r3, r0
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	440b      	add	r3, r1
 8001b4e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b52:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3303      	adds	r3, #3
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	061a      	lsls	r2, r3, #24
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3302      	adds	r3, #2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	041b      	lsls	r3, r3, #16
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	7812      	ldrb	r2, [r2, #0]
 8001b74:	4610      	mov	r0, r2
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	6811      	ldr	r1, [r2, #0]
 8001b7a:	ea43 0200 	orr.w	r2, r3, r0
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	440b      	add	r3, r1
 8001b84:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b88:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3318      	adds	r3, #24
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	4413      	add	r3, r2
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	6811      	ldr	r1, [r2, #0]
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	3318      	adds	r3, #24
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	440b      	add	r3, r1
 8001ba8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e00e      	b.n	8001bcc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e006      	b.n	8001bcc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
  }
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3724      	adds	r7, #36	; 0x24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d002      	beq.n	8001bf6 <HAL_CAN_AbortTxRequest+0x1e>
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d128      	bne.n	8001c48 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d007      	beq.n	8001c10 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c0e:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c28:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c42:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e006      	b.n	8001c56 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
  }
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b085      	sub	sp, #20
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c74:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c76:	7afb      	ldrb	r3, [r7, #11]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d002      	beq.n	8001c82 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001c7c:	7afb      	ldrb	r3, [r7, #11]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d11d      	bne.n	8001cbe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3301      	adds	r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <__NVIC_SetPriorityGrouping+0x40>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <__NVIC_SetPriorityGrouping+0x40>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00
 8001d10:	05fa0000 	.word	0x05fa0000

08001d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	db0b      	blt.n	8001d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	4907      	ldr	r1, [pc, #28]	; (8001d68 <__NVIC_EnableIRQ+0x38>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	2001      	movs	r0, #1
 8001d52:	fa00 f202 	lsl.w	r2, r0, r2
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100

08001d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db0a      	blt.n	8001d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	490c      	ldr	r1, [pc, #48]	; (8001db8 <__NVIC_SetPriority+0x4c>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d94:	e00a      	b.n	8001dac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4908      	ldr	r1, [pc, #32]	; (8001dbc <__NVIC_SetPriority+0x50>)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3b04      	subs	r3, #4
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	440b      	add	r3, r1
 8001daa:	761a      	strb	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f1c3 0307 	rsb	r3, r3, #7
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	bf28      	it	cs
 8001dde:	2304      	movcs	r3, #4
 8001de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3304      	adds	r3, #4
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d902      	bls.n	8001df0 <NVIC_EncodePriority+0x30>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3b03      	subs	r3, #3
 8001dee:	e000      	b.n	8001df2 <NVIC_EncodePriority+0x32>
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	401a      	ands	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	4313      	orrs	r3, r2
         );
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	; 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e38:	d301      	bcc.n	8001e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00f      	b.n	8001e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <SysTick_Config+0x40>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e46:	210f      	movs	r1, #15
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e4c:	f7ff ff8e 	bl	8001d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <SysTick_Config+0x40>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <SysTick_Config+0x40>)
 8001e58:	2207      	movs	r2, #7
 8001e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	e000e010 	.word	0xe000e010

08001e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff29 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e94:	f7ff ff3e 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	6978      	ldr	r0, [r7, #20]
 8001ea0:	f7ff ff8e 	bl	8001dc0 <NVIC_EncodePriority>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff5d 	bl	8001d6c <__NVIC_SetPriority>
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff31 	bl	8001d30 <__NVIC_EnableIRQ>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ffa2 	bl	8001e28 <SysTick_Config>
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001efc:	f7ff fb70 	bl	80015e0 <HAL_GetTick>
 8001f00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d008      	beq.n	8001f20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e052      	b.n	8001fc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0216 	bic.w	r2, r2, #22
 8001f2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d103      	bne.n	8001f50 <HAL_DMA_Abort+0x62>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0208 	bic.w	r2, r2, #8
 8001f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f70:	e013      	b.n	8001f9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f72:	f7ff fb35 	bl	80015e0 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d90c      	bls.n	8001f9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e015      	b.n	8001fc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1e4      	bne.n	8001f72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	223f      	movs	r2, #63	; 0x3f
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d004      	beq.n	8001fec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2280      	movs	r2, #128	; 0x80
 8001fe6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e00c      	b.n	8002006 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2205      	movs	r2, #5
 8001ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0201 	bic.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	e175      	b.n	8002320 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002034:	2201      	movs	r2, #1
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	429a      	cmp	r2, r3
 800204e:	f040 8164 	bne.w	800231a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d005      	beq.n	800206a <HAL_GPIO_Init+0x56>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d130      	bne.n	80020cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	2203      	movs	r2, #3
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a0:	2201      	movs	r2, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 0201 	and.w	r2, r3, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d017      	beq.n	8002108 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	2203      	movs	r2, #3
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d123      	bne.n	800215c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	08da      	lsrs	r2, r3, #3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3208      	adds	r2, #8
 800211c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	220f      	movs	r2, #15
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	08da      	lsrs	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3208      	adds	r2, #8
 8002156:	69b9      	ldr	r1, [r7, #24]
 8002158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0203 	and.w	r2, r3, #3
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80be 	beq.w	800231a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219e:	4b66      	ldr	r3, [pc, #408]	; (8002338 <HAL_GPIO_Init+0x324>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4a65      	ldr	r2, [pc, #404]	; (8002338 <HAL_GPIO_Init+0x324>)
 80021a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a8:	6453      	str	r3, [r2, #68]	; 0x44
 80021aa:	4b63      	ldr	r3, [pc, #396]	; (8002338 <HAL_GPIO_Init+0x324>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021b6:	4a61      	ldr	r2, [pc, #388]	; (800233c <HAL_GPIO_Init+0x328>)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	220f      	movs	r2, #15
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a58      	ldr	r2, [pc, #352]	; (8002340 <HAL_GPIO_Init+0x32c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d037      	beq.n	8002252 <HAL_GPIO_Init+0x23e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a57      	ldr	r2, [pc, #348]	; (8002344 <HAL_GPIO_Init+0x330>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d031      	beq.n	800224e <HAL_GPIO_Init+0x23a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a56      	ldr	r2, [pc, #344]	; (8002348 <HAL_GPIO_Init+0x334>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d02b      	beq.n	800224a <HAL_GPIO_Init+0x236>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a55      	ldr	r2, [pc, #340]	; (800234c <HAL_GPIO_Init+0x338>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d025      	beq.n	8002246 <HAL_GPIO_Init+0x232>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a54      	ldr	r2, [pc, #336]	; (8002350 <HAL_GPIO_Init+0x33c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01f      	beq.n	8002242 <HAL_GPIO_Init+0x22e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a53      	ldr	r2, [pc, #332]	; (8002354 <HAL_GPIO_Init+0x340>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d019      	beq.n	800223e <HAL_GPIO_Init+0x22a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a52      	ldr	r2, [pc, #328]	; (8002358 <HAL_GPIO_Init+0x344>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <HAL_GPIO_Init+0x226>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a51      	ldr	r2, [pc, #324]	; (800235c <HAL_GPIO_Init+0x348>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00d      	beq.n	8002236 <HAL_GPIO_Init+0x222>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a50      	ldr	r2, [pc, #320]	; (8002360 <HAL_GPIO_Init+0x34c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <HAL_GPIO_Init+0x21e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4f      	ldr	r2, [pc, #316]	; (8002364 <HAL_GPIO_Init+0x350>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <HAL_GPIO_Init+0x21a>
 800222a:	2309      	movs	r3, #9
 800222c:	e012      	b.n	8002254 <HAL_GPIO_Init+0x240>
 800222e:	230a      	movs	r3, #10
 8002230:	e010      	b.n	8002254 <HAL_GPIO_Init+0x240>
 8002232:	2308      	movs	r3, #8
 8002234:	e00e      	b.n	8002254 <HAL_GPIO_Init+0x240>
 8002236:	2307      	movs	r3, #7
 8002238:	e00c      	b.n	8002254 <HAL_GPIO_Init+0x240>
 800223a:	2306      	movs	r3, #6
 800223c:	e00a      	b.n	8002254 <HAL_GPIO_Init+0x240>
 800223e:	2305      	movs	r3, #5
 8002240:	e008      	b.n	8002254 <HAL_GPIO_Init+0x240>
 8002242:	2304      	movs	r3, #4
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x240>
 8002246:	2303      	movs	r3, #3
 8002248:	e004      	b.n	8002254 <HAL_GPIO_Init+0x240>
 800224a:	2302      	movs	r3, #2
 800224c:	e002      	b.n	8002254 <HAL_GPIO_Init+0x240>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_GPIO_Init+0x240>
 8002252:	2300      	movs	r3, #0
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	f002 0203 	and.w	r2, r2, #3
 800225a:	0092      	lsls	r2, r2, #2
 800225c:	4093      	lsls	r3, r2
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002264:	4935      	ldr	r1, [pc, #212]	; (800233c <HAL_GPIO_Init+0x328>)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002272:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <HAL_GPIO_Init+0x354>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002296:	4a34      	ldr	r2, [pc, #208]	; (8002368 <HAL_GPIO_Init+0x354>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800229c:	4b32      	ldr	r3, [pc, #200]	; (8002368 <HAL_GPIO_Init+0x354>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c0:	4a29      	ldr	r2, [pc, #164]	; (8002368 <HAL_GPIO_Init+0x354>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022c6:	4b28      	ldr	r3, [pc, #160]	; (8002368 <HAL_GPIO_Init+0x354>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ea:	4a1f      	ldr	r2, [pc, #124]	; (8002368 <HAL_GPIO_Init+0x354>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_GPIO_Init+0x354>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002314:	4a14      	ldr	r2, [pc, #80]	; (8002368 <HAL_GPIO_Init+0x354>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3301      	adds	r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b0f      	cmp	r3, #15
 8002324:	f67f ae86 	bls.w	8002034 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3724      	adds	r7, #36	; 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40013800 	.word	0x40013800
 8002340:	40020000 	.word	0x40020000
 8002344:	40020400 	.word	0x40020400
 8002348:	40020800 	.word	0x40020800
 800234c:	40020c00 	.word	0x40020c00
 8002350:	40021000 	.word	0x40021000
 8002354:	40021400 	.word	0x40021400
 8002358:	40021800 	.word	0x40021800
 800235c:	40021c00 	.word	0x40021c00
 8002360:	40022000 	.word	0x40022000
 8002364:	40022400 	.word	0x40022400
 8002368:	40013c00 	.word	0x40013c00

0800236c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
 8002378:	4613      	mov	r3, r2
 800237a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800237c:	787b      	ldrb	r3, [r7, #1]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002388:	e003      	b.n	8002392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800238a:	887b      	ldrh	r3, [r7, #2]
 800238c:	041a      	lsls	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	619a      	str	r2, [r3, #24]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	460b      	mov	r3, r1
 80023a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023b0:	887a      	ldrh	r2, [r7, #2]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4013      	ands	r3, r2
 80023b6:	041a      	lsls	r2, r3, #16
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	400b      	ands	r3, r1
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	619a      	str	r2, [r3, #24]
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d006      	beq.n	80023f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fc96 	bl	8000d24 <HAL_GPIO_EXTI_Callback>
  }
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40013c00 	.word	0x40013c00

08002404 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e041      	b.n	800249a <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800241e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f245 5255 	movw	r2, #21845	; 0x5555
 8002428:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6852      	ldr	r2, [r2, #4]
 8002432:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6892      	ldr	r2, [r2, #8]
 800243c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800243e:	f7ff f8cf 	bl	80015e0 <HAL_GetTick>
 8002442:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002444:	e00f      	b.n	8002466 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002446:	f7ff f8cb 	bl	80015e0 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b31      	cmp	r3, #49	; 0x31
 8002452:	d908      	bls.n	8002466 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e019      	b.n	800249a <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1e8      	bne.n	8002446 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	429a      	cmp	r2, r3
 8002480:	d005      	beq.n	800248e <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68d2      	ldr	r2, [r2, #12]
 800248a:	611a      	str	r2, [r3, #16]
 800248c:	e004      	b.n	8002498 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80024b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d2:	6013      	str	r3, [r2, #0]
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40007000 	.word	0x40007000

080024e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e291      	b.n	8002a1e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 8087 	beq.w	8002616 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002508:	4b96      	ldr	r3, [pc, #600]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b04      	cmp	r3, #4
 8002512:	d00c      	beq.n	800252e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002514:	4b93      	ldr	r3, [pc, #588]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d112      	bne.n	8002546 <HAL_RCC_OscConfig+0x62>
 8002520:	4b90      	ldr	r3, [pc, #576]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800252c:	d10b      	bne.n	8002546 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252e:	4b8d      	ldr	r3, [pc, #564]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d06c      	beq.n	8002614 <HAL_RCC_OscConfig+0x130>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d168      	bne.n	8002614 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e26b      	b.n	8002a1e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x7a>
 8002550:	4b84      	ldr	r3, [pc, #528]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a83      	ldr	r2, [pc, #524]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	e02e      	b.n	80025bc <HAL_RCC_OscConfig+0xd8>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x9c>
 8002566:	4b7f      	ldr	r3, [pc, #508]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a7e      	ldr	r2, [pc, #504]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 800256c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b7c      	ldr	r3, [pc, #496]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a7b      	ldr	r2, [pc, #492]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e01d      	b.n	80025bc <HAL_RCC_OscConfig+0xd8>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0xc0>
 800258a:	4b76      	ldr	r3, [pc, #472]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a75      	ldr	r2, [pc, #468]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b73      	ldr	r3, [pc, #460]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a72      	ldr	r2, [pc, #456]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_OscConfig+0xd8>
 80025a4:	4b6f      	ldr	r3, [pc, #444]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6e      	ldr	r2, [pc, #440]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 80025aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b6c      	ldr	r3, [pc, #432]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a6b      	ldr	r2, [pc, #428]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 80025b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7ff f80c 	bl	80015e0 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7ff f808 	bl	80015e0 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e21f      	b.n	8002a1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b61      	ldr	r3, [pc, #388]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0xe8>
 80025ea:	e014      	b.n	8002616 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fff8 	bl	80015e0 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7fe fff4 	bl	80015e0 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e20b      	b.n	8002a1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	4b57      	ldr	r3, [pc, #348]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x110>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d069      	beq.n	80026f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002622:	4b50      	ldr	r3, [pc, #320]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262e:	4b4d      	ldr	r3, [pc, #308]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b08      	cmp	r3, #8
 8002638:	d11c      	bne.n	8002674 <HAL_RCC_OscConfig+0x190>
 800263a:	4b4a      	ldr	r3, [pc, #296]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d116      	bne.n	8002674 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x17a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d001      	beq.n	800265e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e1df      	b.n	8002a1e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265e:	4b41      	ldr	r3, [pc, #260]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	493d      	ldr	r1, [pc, #244]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	e040      	b.n	80026f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d023      	beq.n	80026c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800267c:	4b39      	ldr	r3, [pc, #228]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a38      	ldr	r2, [pc, #224]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe ffaa 	bl	80015e0 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002690:	f7fe ffa6 	bl	80015e0 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e1bd      	b.n	8002a1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a2:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ae:	4b2d      	ldr	r3, [pc, #180]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4929      	ldr	r1, [pc, #164]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
 80026c2:	e018      	b.n	80026f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c4:	4b27      	ldr	r3, [pc, #156]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a26      	ldr	r2, [pc, #152]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe ff86 	bl	80015e0 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d8:	f7fe ff82 	bl	80015e0 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e199      	b.n	8002a1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ea:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d038      	beq.n	8002774 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d019      	beq.n	800273e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 800270c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270e:	4a15      	ldr	r2, [pc, #84]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002716:	f7fe ff63 	bl	80015e0 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271e:	f7fe ff5f 	bl	80015e0 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e176      	b.n	8002a1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x23a>
 800273c:	e01a      	b.n	8002774 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002742:	4a08      	ldr	r2, [pc, #32]	; (8002764 <HAL_RCC_OscConfig+0x280>)
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274a:	f7fe ff49 	bl	80015e0 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002752:	f7fe ff45 	bl	80015e0 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d903      	bls.n	8002768 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e15c      	b.n	8002a1e <HAL_RCC_OscConfig+0x53a>
 8002764:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002768:	4b91      	ldr	r3, [pc, #580]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 800276a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ee      	bne.n	8002752 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80a4 	beq.w	80028ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002782:	4b8b      	ldr	r3, [pc, #556]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b88      	ldr	r3, [pc, #544]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a87      	ldr	r2, [pc, #540]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b85      	ldr	r3, [pc, #532]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a6:	2301      	movs	r3, #1
 80027a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027aa:	4b82      	ldr	r3, [pc, #520]	; (80029b4 <HAL_RCC_OscConfig+0x4d0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d118      	bne.n	80027e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027b6:	4b7f      	ldr	r3, [pc, #508]	; (80029b4 <HAL_RCC_OscConfig+0x4d0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a7e      	ldr	r2, [pc, #504]	; (80029b4 <HAL_RCC_OscConfig+0x4d0>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c2:	f7fe ff0d 	bl	80015e0 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ca:	f7fe ff09 	bl	80015e0 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b64      	cmp	r3, #100	; 0x64
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e120      	b.n	8002a1e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027dc:	4b75      	ldr	r3, [pc, #468]	; (80029b4 <HAL_RCC_OscConfig+0x4d0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d106      	bne.n	80027fe <HAL_RCC_OscConfig+0x31a>
 80027f0:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 80027f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f4:	4a6e      	ldr	r2, [pc, #440]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6713      	str	r3, [r2, #112]	; 0x70
 80027fc:	e02d      	b.n	800285a <HAL_RCC_OscConfig+0x376>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10c      	bne.n	8002820 <HAL_RCC_OscConfig+0x33c>
 8002806:	4b6a      	ldr	r3, [pc, #424]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	4a69      	ldr	r2, [pc, #420]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	6713      	str	r3, [r2, #112]	; 0x70
 8002812:	4b67      	ldr	r3, [pc, #412]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	4a66      	ldr	r2, [pc, #408]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002818:	f023 0304 	bic.w	r3, r3, #4
 800281c:	6713      	str	r3, [r2, #112]	; 0x70
 800281e:	e01c      	b.n	800285a <HAL_RCC_OscConfig+0x376>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b05      	cmp	r3, #5
 8002826:	d10c      	bne.n	8002842 <HAL_RCC_OscConfig+0x35e>
 8002828:	4b61      	ldr	r3, [pc, #388]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282c:	4a60      	ldr	r2, [pc, #384]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	6713      	str	r3, [r2, #112]	; 0x70
 8002834:	4b5e      	ldr	r3, [pc, #376]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	4a5d      	ldr	r2, [pc, #372]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6713      	str	r3, [r2, #112]	; 0x70
 8002840:	e00b      	b.n	800285a <HAL_RCC_OscConfig+0x376>
 8002842:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002846:	4a5a      	ldr	r2, [pc, #360]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	6713      	str	r3, [r2, #112]	; 0x70
 800284e:	4b58      	ldr	r3, [pc, #352]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002852:	4a57      	ldr	r2, [pc, #348]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002854:	f023 0304 	bic.w	r3, r3, #4
 8002858:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d015      	beq.n	800288e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7fe febd 	bl	80015e0 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7fe feb9 	bl	80015e0 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	; 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0ce      	b.n	8002a1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002880:	4b4b      	ldr	r3, [pc, #300]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ee      	beq.n	800286a <HAL_RCC_OscConfig+0x386>
 800288c:	e014      	b.n	80028b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288e:	f7fe fea7 	bl	80015e0 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7fe fea3 	bl	80015e0 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e0b8      	b.n	8002a1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ac:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ee      	bne.n	8002896 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d105      	bne.n	80028ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028be:	4b3c      	ldr	r3, [pc, #240]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	4a3b      	ldr	r2, [pc, #236]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 80028c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 80a4 	beq.w	8002a1c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d4:	4b36      	ldr	r3, [pc, #216]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d06b      	beq.n	80029b8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d149      	bne.n	800297c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e8:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a30      	ldr	r2, [pc, #192]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 80028ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe fe74 	bl	80015e0 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe fe70 	bl	80015e0 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e087      	b.n	8002a1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	019b      	lsls	r3, r3, #6
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	085b      	lsrs	r3, r3, #1
 8002932:	3b01      	subs	r3, #1
 8002934:	041b      	lsls	r3, r3, #16
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	061b      	lsls	r3, r3, #24
 800293e:	4313      	orrs	r3, r2
 8002940:	4a1b      	ldr	r2, [pc, #108]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002942:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002946:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a18      	ldr	r2, [pc, #96]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 800294e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7fe fe44 	bl	80015e0 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe fe40 	bl	80015e0 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e057      	b.n	8002a1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296e:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x478>
 800297a:	e04f      	b.n	8002a1c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0b      	ldr	r2, [pc, #44]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fe2a 	bl	80015e0 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe fe26 	bl	80015e0 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e03d      	b.n	8002a1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x4ac>
 80029ae:	e035      	b.n	8002a1c <HAL_RCC_OscConfig+0x538>
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCC_OscConfig+0x544>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d028      	beq.n	8002a18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d121      	bne.n	8002a18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d11a      	bne.n	8002a18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029e8:	4013      	ands	r3, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d111      	bne.n	8002a18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	085b      	lsrs	r3, r3, #1
 8002a00:	3b01      	subs	r3, #1
 8002a02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800

08002a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0d0      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a44:	4b6a      	ldr	r3, [pc, #424]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d910      	bls.n	8002a74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b67      	ldr	r3, [pc, #412]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 020f 	bic.w	r2, r3, #15
 8002a5a:	4965      	ldr	r1, [pc, #404]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b63      	ldr	r3, [pc, #396]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0b8      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d020      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a8c:	4b59      	ldr	r3, [pc, #356]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a58      	ldr	r2, [pc, #352]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa4:	4b53      	ldr	r3, [pc, #332]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a52      	ldr	r2, [pc, #328]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab0:	4b50      	ldr	r3, [pc, #320]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	494d      	ldr	r1, [pc, #308]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d040      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b47      	ldr	r3, [pc, #284]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d115      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e07f      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aee:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e073      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afe:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e06b      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b0e:	4b39      	ldr	r3, [pc, #228]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f023 0203 	bic.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4936      	ldr	r1, [pc, #216]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b20:	f7fe fd5e 	bl	80015e0 <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b28:	f7fe fd5a 	bl	80015e0 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e053      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 020c 	and.w	r2, r3, #12
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d1eb      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b50:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d210      	bcs.n	8002b80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 020f 	bic.w	r2, r3, #15
 8002b66:	4922      	ldr	r1, [pc, #136]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e032      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b8c:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4916      	ldr	r1, [pc, #88]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	490e      	ldr	r1, [pc, #56]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bbe:	f000 f821 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	490a      	ldr	r1, [pc, #40]	; (8002bf8 <HAL_RCC_ClockConfig+0x1cc>)
 8002bd0:	5ccb      	ldrb	r3, [r1, r3]
 8002bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd6:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <HAL_RCC_ClockConfig+0x1d0>)
 8002bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_ClockConfig+0x1d4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe fcba 	bl	8001558 <HAL_InitTick>

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023c00 	.word	0x40023c00
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	08005604 	.word	0x08005604
 8002bfc:	200000f8 	.word	0x200000f8
 8002c00:	200000fc 	.word	0x200000fc

08002c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c08:	b094      	sub	sp, #80	; 0x50
 8002c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c10:	2300      	movs	r3, #0
 8002c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c14:	2300      	movs	r3, #0
 8002c16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c1c:	4b79      	ldr	r3, [pc, #484]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d00d      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x40>
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	f200 80e1 	bhi.w	8002df0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x34>
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d003      	beq.n	8002c3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c36:	e0db      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c38:	4b73      	ldr	r3, [pc, #460]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c3c:	e0db      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c3e:	4b73      	ldr	r3, [pc, #460]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x208>)
 8002c40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c42:	e0d8      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c44:	4b6f      	ldr	r3, [pc, #444]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c4c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c4e:	4b6d      	ldr	r3, [pc, #436]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d063      	beq.n	8002d22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5a:	4b6a      	ldr	r3, [pc, #424]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	099b      	lsrs	r3, r3, #6
 8002c60:	2200      	movs	r2, #0
 8002c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c6e:	2300      	movs	r3, #0
 8002c70:	637b      	str	r3, [r7, #52]	; 0x34
 8002c72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c76:	4622      	mov	r2, r4
 8002c78:	462b      	mov	r3, r5
 8002c7a:	f04f 0000 	mov.w	r0, #0
 8002c7e:	f04f 0100 	mov.w	r1, #0
 8002c82:	0159      	lsls	r1, r3, #5
 8002c84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c88:	0150      	lsls	r0, r2, #5
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4621      	mov	r1, r4
 8002c90:	1a51      	subs	r1, r2, r1
 8002c92:	6139      	str	r1, [r7, #16]
 8002c94:	4629      	mov	r1, r5
 8002c96:	eb63 0301 	sbc.w	r3, r3, r1
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ca8:	4659      	mov	r1, fp
 8002caa:	018b      	lsls	r3, r1, #6
 8002cac:	4651      	mov	r1, sl
 8002cae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cb2:	4651      	mov	r1, sl
 8002cb4:	018a      	lsls	r2, r1, #6
 8002cb6:	4651      	mov	r1, sl
 8002cb8:	ebb2 0801 	subs.w	r8, r2, r1
 8002cbc:	4659      	mov	r1, fp
 8002cbe:	eb63 0901 	sbc.w	r9, r3, r1
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cd6:	4690      	mov	r8, r2
 8002cd8:	4699      	mov	r9, r3
 8002cda:	4623      	mov	r3, r4
 8002cdc:	eb18 0303 	adds.w	r3, r8, r3
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	462b      	mov	r3, r5
 8002ce4:	eb49 0303 	adc.w	r3, r9, r3
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	024b      	lsls	r3, r1, #9
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d00:	4621      	mov	r1, r4
 8002d02:	024a      	lsls	r2, r1, #9
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d14:	f7fd fa78 	bl	8000208 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d20:	e058      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d22:	4b38      	ldr	r3, [pc, #224]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	099b      	lsrs	r3, r3, #6
 8002d28:	2200      	movs	r2, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d32:	623b      	str	r3, [r7, #32]
 8002d34:	2300      	movs	r3, #0
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
 8002d38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d3c:	4642      	mov	r2, r8
 8002d3e:	464b      	mov	r3, r9
 8002d40:	f04f 0000 	mov.w	r0, #0
 8002d44:	f04f 0100 	mov.w	r1, #0
 8002d48:	0159      	lsls	r1, r3, #5
 8002d4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d4e:	0150      	lsls	r0, r2, #5
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4641      	mov	r1, r8
 8002d56:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d5a:	4649      	mov	r1, r9
 8002d5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d74:	ebb2 040a 	subs.w	r4, r2, sl
 8002d78:	eb63 050b 	sbc.w	r5, r3, fp
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	00eb      	lsls	r3, r5, #3
 8002d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d8a:	00e2      	lsls	r2, r4, #3
 8002d8c:	4614      	mov	r4, r2
 8002d8e:	461d      	mov	r5, r3
 8002d90:	4643      	mov	r3, r8
 8002d92:	18e3      	adds	r3, r4, r3
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	464b      	mov	r3, r9
 8002d98:	eb45 0303 	adc.w	r3, r5, r3
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002daa:	4629      	mov	r1, r5
 8002dac:	028b      	lsls	r3, r1, #10
 8002dae:	4621      	mov	r1, r4
 8002db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db4:	4621      	mov	r1, r4
 8002db6:	028a      	lsls	r2, r1, #10
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	61fa      	str	r2, [r7, #28]
 8002dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dc8:	f7fd fa1e 	bl	8000208 <__aeabi_uldivmod>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	0c1b      	lsrs	r3, r3, #16
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	3301      	adds	r3, #1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002de4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dee:	e002      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002df2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3750      	adds	r7, #80	; 0x50
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
 8002e08:	00f42400 	.word	0x00f42400
 8002e0c:	007a1200 	.word	0x007a1200

08002e10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	200000f8 	.word	0x200000f8

08002e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e2c:	f7ff fff0 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 8002e30:	4602      	mov	r2, r0
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	0a9b      	lsrs	r3, r3, #10
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	4903      	ldr	r1, [pc, #12]	; (8002e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e3e:	5ccb      	ldrb	r3, [r1, r3]
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	08005614 	.word	0x08005614

08002e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e54:	f7ff ffdc 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	0b5b      	lsrs	r3, r3, #13
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	4903      	ldr	r1, [pc, #12]	; (8002e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40023800 	.word	0x40023800
 8002e74:	08005614 	.word	0x08005614

08002e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d012      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ea0:	4b69      	ldr	r3, [pc, #420]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a68      	ldr	r2, [pc, #416]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002eaa:	6093      	str	r3, [r2, #8]
 8002eac:	4b66      	ldr	r3, [pc, #408]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb4:	4964      	ldr	r1, [pc, #400]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d017      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ed2:	4b5d      	ldr	r3, [pc, #372]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	4959      	ldr	r1, [pc, #356]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002efe:	2301      	movs	r3, #1
 8002f00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d017      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f0e:	4b4e      	ldr	r3, [pc, #312]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	494a      	ldr	r1, [pc, #296]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 808b 	beq.w	8003072 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f5c:	4b3a      	ldr	r3, [pc, #232]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	4a39      	ldr	r2, [pc, #228]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f66:	6413      	str	r3, [r2, #64]	; 0x40
 8002f68:	4b37      	ldr	r3, [pc, #220]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f74:	4b35      	ldr	r3, [pc, #212]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a34      	ldr	r2, [pc, #208]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f80:	f7fe fb2e 	bl	80015e0 <HAL_GetTick>
 8002f84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f88:	f7fe fb2a 	bl	80015e0 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e357      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f9a:	4b2c      	ldr	r3, [pc, #176]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fa6:	4b28      	ldr	r3, [pc, #160]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d035      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d02e      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fc4:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fcc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fce:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	4a1d      	ldr	r2, [pc, #116]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fda:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	4a1a      	ldr	r2, [pc, #104]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002fe6:	4a18      	ldr	r2, [pc, #96]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fec:	4b16      	ldr	r3, [pc, #88]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d114      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe faf2 	bl	80015e0 <HAL_GetTick>
 8002ffc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffe:	e00a      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003000:	f7fe faee 	bl	80015e0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e319      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0ee      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800302e:	d111      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800303e:	400b      	ands	r3, r1
 8003040:	4901      	ldr	r1, [pc, #4]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
 8003046:	e00b      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003048:	40023800 	.word	0x40023800
 800304c:	40007000 	.word	0x40007000
 8003050:	0ffffcff 	.word	0x0ffffcff
 8003054:	4baa      	ldr	r3, [pc, #680]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4aa9      	ldr	r2, [pc, #676]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800305a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800305e:	6093      	str	r3, [r2, #8]
 8003060:	4ba7      	ldr	r3, [pc, #668]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003062:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306c:	49a4      	ldr	r1, [pc, #656]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306e:	4313      	orrs	r3, r2
 8003070:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b00      	cmp	r3, #0
 800307c:	d010      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800307e:	4ba0      	ldr	r3, [pc, #640]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003084:	4a9e      	ldr	r2, [pc, #632]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800308a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800308e:	4b9c      	ldr	r3, [pc, #624]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003090:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	4999      	ldr	r1, [pc, #612]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030ac:	4b94      	ldr	r3, [pc, #592]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ba:	4991      	ldr	r1, [pc, #580]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00a      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030ce:	4b8c      	ldr	r3, [pc, #560]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030dc:	4988      	ldr	r1, [pc, #544]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00a      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030f0:	4b83      	ldr	r3, [pc, #524]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030fe:	4980      	ldr	r1, [pc, #512]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003112:	4b7b      	ldr	r3, [pc, #492]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003118:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	4977      	ldr	r1, [pc, #476]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003134:	4b72      	ldr	r3, [pc, #456]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	f023 0203 	bic.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	496f      	ldr	r1, [pc, #444]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003156:	4b6a      	ldr	r3, [pc, #424]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	f023 020c 	bic.w	r2, r3, #12
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003164:	4966      	ldr	r1, [pc, #408]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003178:	4b61      	ldr	r3, [pc, #388]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003186:	495e      	ldr	r1, [pc, #376]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800319a:	4b59      	ldr	r3, [pc, #356]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800319c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a8:	4955      	ldr	r1, [pc, #340]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031bc:	4b50      	ldr	r3, [pc, #320]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	494d      	ldr	r1, [pc, #308]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80031de:	4b48      	ldr	r3, [pc, #288]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	4944      	ldr	r1, [pc, #272]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003200:	4b3f      	ldr	r3, [pc, #252]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320e:	493c      	ldr	r1, [pc, #240]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003222:	4b37      	ldr	r3, [pc, #220]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003230:	4933      	ldr	r1, [pc, #204]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003244:	4b2e      	ldr	r3, [pc, #184]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003252:	492b      	ldr	r1, [pc, #172]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d011      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003266:	4b26      	ldr	r3, [pc, #152]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003274:	4922      	ldr	r1, [pc, #136]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003280:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003284:	d101      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003286:	2301      	movs	r3, #1
 8003288:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003296:	2301      	movs	r3, #1
 8003298:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032a6:	4b16      	ldr	r3, [pc, #88]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b4:	4912      	ldr	r1, [pc, #72]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00b      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032c8:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d8:	4909      	ldr	r1, [pc, #36]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d006      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80d9 	beq.w	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032f4:	4b02      	ldr	r3, [pc, #8]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a01      	ldr	r2, [pc, #4]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032fe:	e001      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003300:	40023800 	.word	0x40023800
 8003304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003306:	f7fe f96b 	bl	80015e0 <HAL_GetTick>
 800330a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800330e:	f7fe f967 	bl	80015e0 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b64      	cmp	r3, #100	; 0x64
 800331a:	d901      	bls.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e194      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003320:	4b6c      	ldr	r3, [pc, #432]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f0      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d021      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333c:	2b00      	cmp	r3, #0
 800333e:	d11d      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003340:	4b64      	ldr	r3, [pc, #400]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003346:	0c1b      	lsrs	r3, r3, #16
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800334e:	4b61      	ldr	r3, [pc, #388]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003354:	0e1b      	lsrs	r3, r3, #24
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	019a      	lsls	r2, r3, #6
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	041b      	lsls	r3, r3, #16
 8003366:	431a      	orrs	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	061b      	lsls	r3, r3, #24
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	071b      	lsls	r3, r3, #28
 8003374:	4957      	ldr	r1, [pc, #348]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d004      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800339a:	2b00      	cmp	r3, #0
 800339c:	d02e      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a6:	d129      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033a8:	4b4a      	ldr	r3, [pc, #296]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ae:	0c1b      	lsrs	r3, r3, #16
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033b6:	4b47      	ldr	r3, [pc, #284]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033bc:	0f1b      	lsrs	r3, r3, #28
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	019a      	lsls	r2, r3, #6
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	041b      	lsls	r3, r3, #16
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	431a      	orrs	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	071b      	lsls	r3, r3, #28
 80033dc:	493d      	ldr	r1, [pc, #244]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033e4:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ea:	f023 021f 	bic.w	r2, r3, #31
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	3b01      	subs	r3, #1
 80033f4:	4937      	ldr	r1, [pc, #220]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01d      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003408:	4b32      	ldr	r3, [pc, #200]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800340a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800340e:	0e1b      	lsrs	r3, r3, #24
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003416:	4b2f      	ldr	r3, [pc, #188]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341c:	0f1b      	lsrs	r3, r3, #28
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	019a      	lsls	r2, r3, #6
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	041b      	lsls	r3, r3, #16
 8003430:	431a      	orrs	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	061b      	lsls	r3, r3, #24
 8003436:	431a      	orrs	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	071b      	lsls	r3, r3, #28
 800343c:	4925      	ldr	r1, [pc, #148]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d011      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	019a      	lsls	r2, r3, #6
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	041b      	lsls	r3, r3, #16
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	061b      	lsls	r3, r3, #24
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	071b      	lsls	r3, r3, #28
 800346c:	4919      	ldr	r1, [pc, #100]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003474:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800347a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800347e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003480:	f7fe f8ae 	bl	80015e0 <HAL_GetTick>
 8003484:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003486:	e008      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003488:	f7fe f8aa 	bl	80015e0 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	; 0x64
 8003494:	d901      	bls.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e0d7      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800349a:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	f040 80cd 	bne.w	8003648 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a08      	ldr	r2, [pc, #32]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ba:	f7fe f891 	bl	80015e0 <HAL_GetTick>
 80034be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034c0:	e00a      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034c2:	f7fe f88d 	bl	80015e0 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b64      	cmp	r3, #100	; 0x64
 80034ce:	d903      	bls.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e0ba      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80034d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034d8:	4b5e      	ldr	r3, [pc, #376]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034e4:	d0ed      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003502:	2b00      	cmp	r3, #0
 8003504:	d02e      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d12a      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800350e:	4b51      	ldr	r3, [pc, #324]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800351c:	4b4d      	ldr	r3, [pc, #308]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003522:	0f1b      	lsrs	r3, r3, #28
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	019a      	lsls	r2, r3, #6
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	041b      	lsls	r3, r3, #16
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	061b      	lsls	r3, r3, #24
 800353c:	431a      	orrs	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	071b      	lsls	r3, r3, #28
 8003542:	4944      	ldr	r1, [pc, #272]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800354a:	4b42      	ldr	r3, [pc, #264]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800354c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003550:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	3b01      	subs	r3, #1
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	493d      	ldr	r1, [pc, #244]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d022      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003574:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003578:	d11d      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800357a:	4b36      	ldr	r3, [pc, #216]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003580:	0e1b      	lsrs	r3, r3, #24
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003588:	4b32      	ldr	r3, [pc, #200]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358e:	0f1b      	lsrs	r3, r3, #28
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	019a      	lsls	r2, r3, #6
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	041b      	lsls	r3, r3, #16
 80035a2:	431a      	orrs	r2, r3
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	061b      	lsls	r3, r3, #24
 80035a8:	431a      	orrs	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	071b      	lsls	r3, r3, #28
 80035ae:	4929      	ldr	r1, [pc, #164]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d028      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035c2:	4b24      	ldr	r3, [pc, #144]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	0e1b      	lsrs	r3, r3, #24
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035d0:	4b20      	ldr	r3, [pc, #128]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d6:	0c1b      	lsrs	r3, r3, #16
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	019a      	lsls	r2, r3, #6
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	041b      	lsls	r3, r3, #16
 80035e8:	431a      	orrs	r2, r3
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	061b      	lsls	r3, r3, #24
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	071b      	lsls	r3, r3, #28
 80035f6:	4917      	ldr	r1, [pc, #92]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80035fe:	4b15      	ldr	r3, [pc, #84]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003604:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	4911      	ldr	r1, [pc, #68]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003614:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a0e      	ldr	r2, [pc, #56]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800361a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003620:	f7fd ffde 	bl	80015e0 <HAL_GetTick>
 8003624:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003628:	f7fd ffda 	bl	80015e0 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e007      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003646:	d1ef      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800

08003658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e054      	b.n	8003714 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d111      	bne.n	800369a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fdf2 	bl	8004268 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a23      	ldr	r2, [pc, #140]	; (800371c <HAL_TIM_Base_Init+0xc4>)
 8003690:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2202      	movs	r2, #2
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	4619      	mov	r1, r3
 80036ac:	4610      	mov	r0, r2
 80036ae:	f000 fca1 	bl	8003ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	08001045 	.word	0x08001045

08003720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	d001      	beq.n	8003738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e054      	b.n	80037e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a26      	ldr	r2, [pc, #152]	; (80037f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d022      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003762:	d01d      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d018      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a21      	ldr	r2, [pc, #132]	; (80037f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d013      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <HAL_TIM_Base_Start_IT+0xdc>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00e      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1e      	ldr	r2, [pc, #120]	; (8003800 <HAL_TIM_Base_Start_IT+0xe0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d009      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a1c      	ldr	r2, [pc, #112]	; (8003804 <HAL_TIM_Base_Start_IT+0xe4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1b      	ldr	r2, [pc, #108]	; (8003808 <HAL_TIM_Base_Start_IT+0xe8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d115      	bne.n	80037cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_TIM_Base_Start_IT+0xec>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b06      	cmp	r3, #6
 80037b0:	d015      	beq.n	80037de <HAL_TIM_Base_Start_IT+0xbe>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b8:	d011      	beq.n	80037de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0201 	orr.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ca:	e008      	b.n	80037de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	e000      	b.n	80037e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40000400 	.word	0x40000400
 80037f8:	40000800 	.word	0x40000800
 80037fc:	40000c00 	.word	0x40000c00
 8003800:	40010400 	.word	0x40010400
 8003804:	40014000 	.word	0x40014000
 8003808:	40001800 	.word	0x40001800
 800380c:	00010007 	.word	0x00010007

08003810 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6a1a      	ldr	r2, [r3, #32]
 800382e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10f      	bne.n	8003858 <HAL_TIM_Base_Stop_IT+0x48>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6a1a      	ldr	r2, [r3, #32]
 800383e:	f240 4344 	movw	r3, #1092	; 0x444
 8003842:	4013      	ands	r3, r2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d107      	bne.n	8003858 <HAL_TIM_Base_Stop_IT+0x48>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b02      	cmp	r3, #2
 8003882:	d128      	bne.n	80038d6 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b02      	cmp	r3, #2
 8003890:	d121      	bne.n	80038d6 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f06f 0202 	mvn.w	r2, #2
 800389a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3
 80038ba:	e009      	b.n	80038d0 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d128      	bne.n	8003936 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d121      	bne.n	8003936 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f06f 0204 	mvn.w	r2, #4
 80038fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
 800391a:	e009      	b.n	8003930 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b08      	cmp	r3, #8
 8003942:	d128      	bne.n	8003996 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b08      	cmp	r3, #8
 8003950:	d121      	bne.n	8003996 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f06f 0208 	mvn.w	r2, #8
 800395a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2204      	movs	r2, #4
 8003960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	4798      	blx	r3
 800397a:	e009      	b.n	8003990 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d128      	bne.n	80039f6 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d121      	bne.n	80039f6 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f06f 0210 	mvn.w	r2, #16
 80039ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2208      	movs	r2, #8
 80039c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	4798      	blx	r3
 80039da:	e009      	b.n	80039f0 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d110      	bne.n	8003a26 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d109      	bne.n	8003a26 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f06f 0201 	mvn.w	r2, #1
 8003a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a30:	2b80      	cmp	r3, #128	; 0x80
 8003a32:	d110      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3e:	2b80      	cmp	r3, #128	; 0x80
 8003a40:	d109      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a64:	d110      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a70:	2b80      	cmp	r3, #128	; 0x80
 8003a72:	d109      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b40      	cmp	r3, #64	; 0x40
 8003a94:	d110      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	d109      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d110      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d109      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0220 	mvn.w	r2, #32
 8003adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_TIM_ConfigClockSource+0x1c>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e0b4      	b.n	8003c76 <HAL_TIM_ConfigClockSource+0x186>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	4b56      	ldr	r3, [pc, #344]	; (8003c80 <HAL_TIM_ConfigClockSource+0x190>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b44:	d03e      	beq.n	8003bc4 <HAL_TIM_ConfigClockSource+0xd4>
 8003b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4a:	f200 8087 	bhi.w	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b52:	f000 8086 	beq.w	8003c62 <HAL_TIM_ConfigClockSource+0x172>
 8003b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5a:	d87f      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
 8003b5c:	2b70      	cmp	r3, #112	; 0x70
 8003b5e:	d01a      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0xa6>
 8003b60:	2b70      	cmp	r3, #112	; 0x70
 8003b62:	d87b      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
 8003b64:	2b60      	cmp	r3, #96	; 0x60
 8003b66:	d050      	beq.n	8003c0a <HAL_TIM_ConfigClockSource+0x11a>
 8003b68:	2b60      	cmp	r3, #96	; 0x60
 8003b6a:	d877      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
 8003b6c:	2b50      	cmp	r3, #80	; 0x50
 8003b6e:	d03c      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0xfa>
 8003b70:	2b50      	cmp	r3, #80	; 0x50
 8003b72:	d873      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d058      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0x13a>
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d86f      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
 8003b7c:	2b30      	cmp	r3, #48	; 0x30
 8003b7e:	d064      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x15a>
 8003b80:	2b30      	cmp	r3, #48	; 0x30
 8003b82:	d86b      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d060      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x15a>
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	d867      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d05c      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x15a>
 8003b90:	2b10      	cmp	r3, #16
 8003b92:	d05a      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x15a>
 8003b94:	e062      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ba6:	f000 fb3f 	bl	8004228 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	609a      	str	r2, [r3, #8]
      break;
 8003bc2:	e04f      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bd4:	f000 fb28 	bl	8004228 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003be6:	609a      	str	r2, [r3, #8]
      break;
 8003be8:	e03c      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f000 fa9c 	bl	8004134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2150      	movs	r1, #80	; 0x50
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 faf5 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003c08:	e02c      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c16:	461a      	mov	r2, r3
 8003c18:	f000 fabb 	bl	8004192 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2160      	movs	r1, #96	; 0x60
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fae5 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003c28:	e01c      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c36:	461a      	mov	r2, r3
 8003c38:	f000 fa7c 	bl	8004134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2140      	movs	r1, #64	; 0x40
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fad5 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003c48:	e00c      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f000 facc 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003c5a:	e003      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c60:	e000      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	fffeff88 	.word	0xfffeff88

08003c84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	460b      	mov	r3, r1
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e13e      	b.n	8003fe6 <HAL_TIM_RegisterCallback+0x29a>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_TIM_RegisterCallback+0x2a>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e137      	b.n	8003fe6 <HAL_TIM_RegisterCallback+0x29a>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	f040 80c2 	bne.w	8003f10 <HAL_TIM_RegisterCallback+0x1c4>
  {
    switch (CallbackID)
 8003d8c:	7afb      	ldrb	r3, [r7, #11]
 8003d8e:	2b1b      	cmp	r3, #27
 8003d90:	f200 80bb 	bhi.w	8003f0a <HAL_TIM_RegisterCallback+0x1be>
 8003d94:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <HAL_TIM_RegisterCallback+0x50>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003e0d 	.word	0x08003e0d
 8003da0:	08003e15 	.word	0x08003e15
 8003da4:	08003e1d 	.word	0x08003e1d
 8003da8:	08003e25 	.word	0x08003e25
 8003dac:	08003e2d 	.word	0x08003e2d
 8003db0:	08003e35 	.word	0x08003e35
 8003db4:	08003e3d 	.word	0x08003e3d
 8003db8:	08003e45 	.word	0x08003e45
 8003dbc:	08003e4d 	.word	0x08003e4d
 8003dc0:	08003e55 	.word	0x08003e55
 8003dc4:	08003e5d 	.word	0x08003e5d
 8003dc8:	08003e65 	.word	0x08003e65
 8003dcc:	08003e6d 	.word	0x08003e6d
 8003dd0:	08003e75 	.word	0x08003e75
 8003dd4:	08003e7f 	.word	0x08003e7f
 8003dd8:	08003e89 	.word	0x08003e89
 8003ddc:	08003e93 	.word	0x08003e93
 8003de0:	08003e9d 	.word	0x08003e9d
 8003de4:	08003ea7 	.word	0x08003ea7
 8003de8:	08003eb1 	.word	0x08003eb1
 8003dec:	08003ebb 	.word	0x08003ebb
 8003df0:	08003ec5 	.word	0x08003ec5
 8003df4:	08003ecf 	.word	0x08003ecf
 8003df8:	08003ed9 	.word	0x08003ed9
 8003dfc:	08003ee3 	.word	0x08003ee3
 8003e00:	08003eed 	.word	0x08003eed
 8003e04:	08003ef7 	.word	0x08003ef7
 8003e08:	08003f01 	.word	0x08003f01
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003e12:	e0e3      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8003e1a:	e0df      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003e22:	e0db      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8003e2a:	e0d7      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003e32:	e0d3      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003e3a:	e0cf      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8003e42:	e0cb      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8003e4a:	e0c7      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003e52:	e0c3      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003e5a:	e0bf      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8003e62:	e0bb      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8003e6a:	e0b7      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003e72:	e0b3      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8003e7c:	e0ae      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8003e86:	e0a9      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8003e90:	e0a4      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8003e9a:	e09f      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8003ea4:	e09a      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8003eae:	e095      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8003eb8:	e090      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8003ec2:	e08b      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8003ecc:	e086      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8003ed6:	e081      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8003ee0:	e07c      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8003eea:	e077      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8003ef4:	e072      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8003efe:	e06d      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8003f08:	e068      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	75fb      	strb	r3, [r7, #23]
        break;
 8003f0e:	e065      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d15d      	bne.n	8003fd8 <HAL_TIM_RegisterCallback+0x28c>
  {
    switch (CallbackID)
 8003f1c:	7afb      	ldrb	r3, [r7, #11]
 8003f1e:	2b0d      	cmp	r3, #13
 8003f20:	d857      	bhi.n	8003fd2 <HAL_TIM_RegisterCallback+0x286>
 8003f22:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <HAL_TIM_RegisterCallback+0x1dc>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f61 	.word	0x08003f61
 8003f2c:	08003f69 	.word	0x08003f69
 8003f30:	08003f71 	.word	0x08003f71
 8003f34:	08003f79 	.word	0x08003f79
 8003f38:	08003f81 	.word	0x08003f81
 8003f3c:	08003f89 	.word	0x08003f89
 8003f40:	08003f91 	.word	0x08003f91
 8003f44:	08003f99 	.word	0x08003f99
 8003f48:	08003fa1 	.word	0x08003fa1
 8003f4c:	08003fa9 	.word	0x08003fa9
 8003f50:	08003fb1 	.word	0x08003fb1
 8003f54:	08003fb9 	.word	0x08003fb9
 8003f58:	08003fc1 	.word	0x08003fc1
 8003f5c:	08003fc9 	.word	0x08003fc9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003f66:	e039      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8003f6e:	e035      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003f76:	e031      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8003f7e:	e02d      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003f86:	e029      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003f8e:	e025      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8003f96:	e021      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8003f9e:	e01d      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003fa6:	e019      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003fae:	e015      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8003fb6:	e011      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8003fbe:	e00d      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003fc6:	e009      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8003fd0:	e004      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	75fb      	strb	r3, [r7, #23]
        break;
 8003fd6:	e001      	b.n	8003fdc <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop

08003ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a40      	ldr	r2, [pc, #256]	; (8004108 <TIM_Base_SetConfig+0x114>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d013      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004012:	d00f      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a3d      	ldr	r2, [pc, #244]	; (800410c <TIM_Base_SetConfig+0x118>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00b      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a3c      	ldr	r2, [pc, #240]	; (8004110 <TIM_Base_SetConfig+0x11c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d007      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a3b      	ldr	r2, [pc, #236]	; (8004114 <TIM_Base_SetConfig+0x120>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d003      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a3a      	ldr	r2, [pc, #232]	; (8004118 <TIM_Base_SetConfig+0x124>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d108      	bne.n	8004046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a2f      	ldr	r2, [pc, #188]	; (8004108 <TIM_Base_SetConfig+0x114>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d02b      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004054:	d027      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a2c      	ldr	r2, [pc, #176]	; (800410c <TIM_Base_SetConfig+0x118>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d023      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2b      	ldr	r2, [pc, #172]	; (8004110 <TIM_Base_SetConfig+0x11c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01f      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <TIM_Base_SetConfig+0x120>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01b      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a29      	ldr	r2, [pc, #164]	; (8004118 <TIM_Base_SetConfig+0x124>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d017      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a28      	ldr	r2, [pc, #160]	; (800411c <TIM_Base_SetConfig+0x128>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a27      	ldr	r2, [pc, #156]	; (8004120 <TIM_Base_SetConfig+0x12c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00f      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a26      	ldr	r2, [pc, #152]	; (8004124 <TIM_Base_SetConfig+0x130>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00b      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a25      	ldr	r2, [pc, #148]	; (8004128 <TIM_Base_SetConfig+0x134>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d007      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a24      	ldr	r2, [pc, #144]	; (800412c <TIM_Base_SetConfig+0x138>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a23      	ldr	r2, [pc, #140]	; (8004130 <TIM_Base_SetConfig+0x13c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d108      	bne.n	80040b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <TIM_Base_SetConfig+0x114>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_Base_SetConfig+0xf8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a0c      	ldr	r2, [pc, #48]	; (8004118 <TIM_Base_SetConfig+0x124>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d103      	bne.n	80040f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	615a      	str	r2, [r3, #20]
}
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40010000 	.word	0x40010000
 800410c:	40000400 	.word	0x40000400
 8004110:	40000800 	.word	0x40000800
 8004114:	40000c00 	.word	0x40000c00
 8004118:	40010400 	.word	0x40010400
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800
 8004128:	40001800 	.word	0x40001800
 800412c:	40001c00 	.word	0x40001c00
 8004130:	40002000 	.word	0x40002000

08004134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f023 0201 	bic.w	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800415e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f023 030a 	bic.w	r3, r3, #10
 8004170:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	621a      	str	r2, [r3, #32]
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004192:	b480      	push	{r7}
 8004194:	b087      	sub	sp, #28
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f023 0210 	bic.w	r2, r3, #16
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	031b      	lsls	r3, r3, #12
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b085      	sub	sp, #20
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	f043 0307 	orr.w	r3, r3, #7
 8004214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	021a      	lsls	r2, r3, #8
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	431a      	orrs	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4313      	orrs	r3, r2
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	609a      	str	r2, [r3, #8]
}
 800425c:	bf00      	nop
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a1e      	ldr	r2, [pc, #120]	; (80042ec <TIM_ResetCallback+0x84>)
 8004274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a1d      	ldr	r2, [pc, #116]	; (80042f0 <TIM_ResetCallback+0x88>)
 800427c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a1c      	ldr	r2, [pc, #112]	; (80042f4 <TIM_ResetCallback+0x8c>)
 8004284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a1b      	ldr	r2, [pc, #108]	; (80042f8 <TIM_ResetCallback+0x90>)
 800428c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a1a      	ldr	r2, [pc, #104]	; (80042fc <TIM_ResetCallback+0x94>)
 8004294:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a19      	ldr	r2, [pc, #100]	; (8004300 <TIM_ResetCallback+0x98>)
 800429c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a18      	ldr	r2, [pc, #96]	; (8004304 <TIM_ResetCallback+0x9c>)
 80042a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a17      	ldr	r2, [pc, #92]	; (8004308 <TIM_ResetCallback+0xa0>)
 80042ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a16      	ldr	r2, [pc, #88]	; (800430c <TIM_ResetCallback+0xa4>)
 80042b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a15      	ldr	r2, [pc, #84]	; (8004310 <TIM_ResetCallback+0xa8>)
 80042bc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a14      	ldr	r2, [pc, #80]	; (8004314 <TIM_ResetCallback+0xac>)
 80042c4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a13      	ldr	r2, [pc, #76]	; (8004318 <TIM_ResetCallback+0xb0>)
 80042cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a12      	ldr	r2, [pc, #72]	; (800431c <TIM_ResetCallback+0xb4>)
 80042d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a11      	ldr	r2, [pc, #68]	; (8004320 <TIM_ResetCallback+0xb8>)
 80042dc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	08003c85 	.word	0x08003c85
 80042f0:	08003c99 	.word	0x08003c99
 80042f4:	08003d11 	.word	0x08003d11
 80042f8:	08003d25 	.word	0x08003d25
 80042fc:	08003cc1 	.word	0x08003cc1
 8004300:	08003cd5 	.word	0x08003cd5
 8004304:	08003cad 	.word	0x08003cad
 8004308:	08003ce9 	.word	0x08003ce9
 800430c:	08003cfd 	.word	0x08003cfd
 8004310:	08003d39 	.word	0x08003d39
 8004314:	08004441 	.word	0x08004441
 8004318:	08004455 	.word	0x08004455
 800431c:	08004469 	.word	0x08004469
 8004320:	0800447d 	.word	0x0800447d

08004324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004338:	2302      	movs	r3, #2
 800433a:	e06d      	b.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a30      	ldr	r2, [pc, #192]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d004      	beq.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a2f      	ldr	r2, [pc, #188]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d108      	bne.n	8004382 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004376:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004388:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a20      	ldr	r2, [pc, #128]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d022      	beq.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ae:	d01d      	beq.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1d      	ldr	r2, [pc, #116]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d018      	beq.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1c      	ldr	r2, [pc, #112]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d013      	beq.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1a      	ldr	r2, [pc, #104]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00e      	beq.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a15      	ldr	r2, [pc, #84]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d009      	beq.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a16      	ldr	r2, [pc, #88]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a15      	ldr	r2, [pc, #84]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d10c      	bne.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	40010000 	.word	0x40010000
 8004428:	40010400 	.word	0x40010400
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	40000c00 	.word	0x40000c00
 8004438:	40014000 	.word	0x40014000
 800443c:	40001800 	.word	0x40001800

08004440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e04e      	b.n	8004540 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d114      	bne.n	80044d4 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fb82 	bl	8004bbc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d103      	bne.n	80044ca <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a20      	ldr	r2, [pc, #128]	; (8004548 <HAL_UART_Init+0xb8>)
 80044c6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2224      	movs	r2, #36	; 0x24
 80044d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fba6 	bl	8004c3c <UART_SetConfig>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e022      	b.n	8004540 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fdfe 	bl	8005104 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004516:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004526:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fe85 	bl	8005248 <UART_CheckIdleState>
 800453e:	4603      	mov	r3, r0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	0800141d 	.word	0x0800141d

0800454c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b0ba      	sub	sp, #232	; 0xe8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004572:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004576:	f640 030f 	movw	r3, #2063	; 0x80f
 800457a:	4013      	ands	r3, r2
 800457c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d115      	bne.n	80045b4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00f      	beq.n	80045b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d009      	beq.n	80045b4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 82a1 	beq.w	8004aec <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	4798      	blx	r3
      }
      return;
 80045b2:	e29b      	b.n	8004aec <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 811d 	beq.w	80047f8 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80045ce:	4b88      	ldr	r3, [pc, #544]	; (80047f0 <HAL_UART_IRQHandler+0x2a4>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 8110 	beq.w	80047f8 <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d011      	beq.n	8004608 <HAL_UART_IRQHandler+0xbc>
 80045e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00b      	beq.n	8004608 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2201      	movs	r2, #1
 80045f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fe:	f043 0201 	orr.w	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d011      	beq.n	8004638 <HAL_UART_IRQHandler+0xec>
 8004614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00b      	beq.n	8004638 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2202      	movs	r2, #2
 8004626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800462e:	f043 0204 	orr.w	r2, r3, #4
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d011      	beq.n	8004668 <HAL_UART_IRQHandler+0x11c>
 8004644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00b      	beq.n	8004668 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2204      	movs	r2, #4
 8004656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465e:	f043 0202 	orr.w	r2, r3, #2
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d017      	beq.n	80046a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d105      	bne.n	800468c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004684:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00b      	beq.n	80046a4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2208      	movs	r2, #8
 8004692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800469a:	f043 0208 	orr.w	r2, r3, #8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d012      	beq.n	80046d6 <HAL_UART_IRQHandler+0x18a>
 80046b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00c      	beq.n	80046d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046cc:	f043 0220 	orr.w	r2, r3, #32
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8207 	beq.w	8004af0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00d      	beq.n	800470a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004710:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471e:	2b40      	cmp	r3, #64	; 0x40
 8004720:	d005      	beq.n	800472e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004726:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800472a:	2b00      	cmp	r3, #0
 800472c:	d053      	beq.n	80047d6 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fe87 	bl	8005442 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473e:	2b40      	cmp	r3, #64	; 0x40
 8004740:	d143      	bne.n	80047ca <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3308      	adds	r3, #8
 8004748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800475c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3308      	adds	r3, #8
 800476a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800476e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800477a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1d9      	bne.n	8004742 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004792:	2b00      	cmp	r3, #0
 8004794:	d013      	beq.n	80047be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800479a:	4a16      	ldr	r2, [pc, #88]	; (80047f4 <HAL_UART_IRQHandler+0x2a8>)
 800479c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fd fc13 	bl	8001fce <HAL_DMA_Abort_IT>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d01d      	beq.n	80047ea <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047b8:	4610      	mov	r0, r2
 80047ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047bc:	e015      	b.n	80047ea <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c8:	e00f      	b.n	80047ea <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d4:	e009      	b.n	80047ea <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80047e8:	e182      	b.n	8004af0 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ea:	bf00      	nop
    return;
 80047ec:	e180      	b.n	8004af0 <HAL_UART_IRQHandler+0x5a4>
 80047ee:	bf00      	nop
 80047f0:	04000120 	.word	0x04000120
 80047f4:	0800550b 	.word	0x0800550b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	f040 8150 	bne.w	8004aa2 <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8149 	beq.w	8004aa2 <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8142 	beq.w	8004aa2 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2210      	movs	r2, #16
 8004824:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004830:	2b40      	cmp	r3, #64	; 0x40
 8004832:	f040 80b8 	bne.w	80049a6 <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004842:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 8154 	beq.w	8004af4 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004856:	429a      	cmp	r2, r3
 8004858:	f080 814c 	bcs.w	8004af4 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004862:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004870:	f000 8086 	beq.w	8004980 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004888:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800488c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004890:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800489e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1da      	bne.n	8004874 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3308      	adds	r3, #8
 80048c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3308      	adds	r3, #8
 80048de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e1      	bne.n	80048be <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3308      	adds	r3, #8
 8004900:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800490a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800490c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3308      	adds	r3, #8
 800491a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800491e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004920:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004924:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800492c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e3      	bne.n	80048fa <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800494e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004950:	f023 0310 	bic.w	r3, r3, #16
 8004954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	461a      	mov	r2, r3
 800495e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004962:	65bb      	str	r3, [r7, #88]	; 0x58
 8004964:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004968:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e4      	bne.n	8004940 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497a:	4618      	mov	r0, r3
 800497c:	f7fd fab7 	bl	8001eee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 8004998:	b292      	uxth	r2, r2
 800499a:	1a8a      	subs	r2, r1, r2
 800499c:	b292      	uxth	r2, r2
 800499e:	4611      	mov	r1, r2
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049a4:	e0a6      	b.n	8004af4 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 8098 	beq.w	8004af8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80049c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8093 	beq.w	8004af8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049da:	e853 3f00 	ldrex	r3, [r3]
 80049de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049f4:	647b      	str	r3, [r7, #68]	; 0x44
 80049f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e4      	bne.n	80049d2 <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	623b      	str	r3, [r7, #32]
   return(result);
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	f023 0301 	bic.w	r3, r3, #1
 8004a1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3308      	adds	r3, #8
 8004a28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a2c:	633a      	str	r2, [r7, #48]	; 0x30
 8004a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a34:	e841 2300 	strex	r3, r2, [r1]
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e3      	bne.n	8004a08 <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	e853 3f00 	ldrex	r3, [r3]
 8004a60:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f023 0310 	bic.w	r3, r3, #16
 8004a68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7a:	69b9      	ldr	r1, [r7, #24]
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	e841 2300 	strex	r3, r2, [r1]
 8004a82:	617b      	str	r3, [r7, #20]
   return(result);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1e4      	bne.n	8004a54 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a96:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004aa0:	e02a      	b.n	8004af8 <HAL_UART_IRQHandler+0x5ac>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00e      	beq.n	8004acc <HAL_UART_IRQHandler+0x580>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d008      	beq.n	8004acc <HAL_UART_IRQHandler+0x580>
  {
    if (huart->TxISR != NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01c      	beq.n	8004afc <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
    }
    return;
 8004aca:	e017      	b.n	8004afc <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d012      	beq.n	8004afe <HAL_UART_IRQHandler+0x5b2>
 8004ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00c      	beq.n	8004afe <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fd28 	bl	800553a <UART_EndTransmit_IT>
    return;
 8004aea:	e008      	b.n	8004afe <HAL_UART_IRQHandler+0x5b2>
      return;
 8004aec:	bf00      	nop
 8004aee:	e006      	b.n	8004afe <HAL_UART_IRQHandler+0x5b2>
    return;
 8004af0:	bf00      	nop
 8004af2:	e004      	b.n	8004afe <HAL_UART_IRQHandler+0x5b2>
      return;
 8004af4:	bf00      	nop
 8004af6:	e002      	b.n	8004afe <HAL_UART_IRQHandler+0x5b2>
      return;
 8004af8:	bf00      	nop
 8004afa:	e000      	b.n	8004afe <HAL_UART_IRQHandler+0x5b2>
    return;
 8004afc:	bf00      	nop
  }

}
 8004afe:	37e8      	adds	r7, #232	; 0xe8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a14      	ldr	r2, [pc, #80]	; (8004c18 <UART_InitCallbacksToDefault+0x5c>)
 8004bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a13      	ldr	r2, [pc, #76]	; (8004c1c <UART_InitCallbacksToDefault+0x60>)
 8004bd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a12      	ldr	r2, [pc, #72]	; (8004c20 <UART_InitCallbacksToDefault+0x64>)
 8004bd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a11      	ldr	r2, [pc, #68]	; (8004c24 <UART_InitCallbacksToDefault+0x68>)
 8004be0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a10      	ldr	r2, [pc, #64]	; (8004c28 <UART_InitCallbacksToDefault+0x6c>)
 8004be8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a0f      	ldr	r2, [pc, #60]	; (8004c2c <UART_InitCallbacksToDefault+0x70>)
 8004bf0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a0e      	ldr	r2, [pc, #56]	; (8004c30 <UART_InitCallbacksToDefault+0x74>)
 8004bf8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a0d      	ldr	r2, [pc, #52]	; (8004c34 <UART_InitCallbacksToDefault+0x78>)
 8004c00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a0c      	ldr	r2, [pc, #48]	; (8004c38 <UART_InitCallbacksToDefault+0x7c>)
 8004c08:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	08004b19 	.word	0x08004b19
 8004c1c:	08004b05 	.word	0x08004b05
 8004c20:	08004b41 	.word	0x08004b41
 8004c24:	08004b2d 	.word	0x08004b2d
 8004c28:	08004b55 	.word	0x08004b55
 8004c2c:	08004b69 	.word	0x08004b69
 8004c30:	08004b7d 	.word	0x08004b7d
 8004c34:	08004b91 	.word	0x08004b91
 8004c38:	08004ba5 	.word	0x08004ba5

08004c3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4ba6      	ldr	r3, [pc, #664]	; (8004f00 <UART_SetConfig+0x2c4>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6812      	ldr	r2, [r2, #0]
 8004c6e:	6979      	ldr	r1, [r7, #20]
 8004c70:	430b      	orrs	r3, r1
 8004c72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a94      	ldr	r2, [pc, #592]	; (8004f04 <UART_SetConfig+0x2c8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d120      	bne.n	8004cfa <UART_SetConfig+0xbe>
 8004cb8:	4b93      	ldr	r3, [pc, #588]	; (8004f08 <UART_SetConfig+0x2cc>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d816      	bhi.n	8004cf4 <UART_SetConfig+0xb8>
 8004cc6:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <UART_SetConfig+0x90>)
 8004cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ccc:	08004cdd 	.word	0x08004cdd
 8004cd0:	08004ce9 	.word	0x08004ce9
 8004cd4:	08004ce3 	.word	0x08004ce3
 8004cd8:	08004cef 	.word	0x08004cef
 8004cdc:	2301      	movs	r3, #1
 8004cde:	77fb      	strb	r3, [r7, #31]
 8004ce0:	e150      	b.n	8004f84 <UART_SetConfig+0x348>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	77fb      	strb	r3, [r7, #31]
 8004ce6:	e14d      	b.n	8004f84 <UART_SetConfig+0x348>
 8004ce8:	2304      	movs	r3, #4
 8004cea:	77fb      	strb	r3, [r7, #31]
 8004cec:	e14a      	b.n	8004f84 <UART_SetConfig+0x348>
 8004cee:	2308      	movs	r3, #8
 8004cf0:	77fb      	strb	r3, [r7, #31]
 8004cf2:	e147      	b.n	8004f84 <UART_SetConfig+0x348>
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	77fb      	strb	r3, [r7, #31]
 8004cf8:	e144      	b.n	8004f84 <UART_SetConfig+0x348>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a83      	ldr	r2, [pc, #524]	; (8004f0c <UART_SetConfig+0x2d0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d132      	bne.n	8004d6a <UART_SetConfig+0x12e>
 8004d04:	4b80      	ldr	r3, [pc, #512]	; (8004f08 <UART_SetConfig+0x2cc>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	f003 030c 	and.w	r3, r3, #12
 8004d0e:	2b0c      	cmp	r3, #12
 8004d10:	d828      	bhi.n	8004d64 <UART_SetConfig+0x128>
 8004d12:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <UART_SetConfig+0xdc>)
 8004d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d18:	08004d4d 	.word	0x08004d4d
 8004d1c:	08004d65 	.word	0x08004d65
 8004d20:	08004d65 	.word	0x08004d65
 8004d24:	08004d65 	.word	0x08004d65
 8004d28:	08004d59 	.word	0x08004d59
 8004d2c:	08004d65 	.word	0x08004d65
 8004d30:	08004d65 	.word	0x08004d65
 8004d34:	08004d65 	.word	0x08004d65
 8004d38:	08004d53 	.word	0x08004d53
 8004d3c:	08004d65 	.word	0x08004d65
 8004d40:	08004d65 	.word	0x08004d65
 8004d44:	08004d65 	.word	0x08004d65
 8004d48:	08004d5f 	.word	0x08004d5f
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	e118      	b.n	8004f84 <UART_SetConfig+0x348>
 8004d52:	2302      	movs	r3, #2
 8004d54:	77fb      	strb	r3, [r7, #31]
 8004d56:	e115      	b.n	8004f84 <UART_SetConfig+0x348>
 8004d58:	2304      	movs	r3, #4
 8004d5a:	77fb      	strb	r3, [r7, #31]
 8004d5c:	e112      	b.n	8004f84 <UART_SetConfig+0x348>
 8004d5e:	2308      	movs	r3, #8
 8004d60:	77fb      	strb	r3, [r7, #31]
 8004d62:	e10f      	b.n	8004f84 <UART_SetConfig+0x348>
 8004d64:	2310      	movs	r3, #16
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	e10c      	b.n	8004f84 <UART_SetConfig+0x348>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a68      	ldr	r2, [pc, #416]	; (8004f10 <UART_SetConfig+0x2d4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d120      	bne.n	8004db6 <UART_SetConfig+0x17a>
 8004d74:	4b64      	ldr	r3, [pc, #400]	; (8004f08 <UART_SetConfig+0x2cc>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d7e:	2b30      	cmp	r3, #48	; 0x30
 8004d80:	d013      	beq.n	8004daa <UART_SetConfig+0x16e>
 8004d82:	2b30      	cmp	r3, #48	; 0x30
 8004d84:	d814      	bhi.n	8004db0 <UART_SetConfig+0x174>
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d009      	beq.n	8004d9e <UART_SetConfig+0x162>
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d810      	bhi.n	8004db0 <UART_SetConfig+0x174>
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <UART_SetConfig+0x15c>
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d006      	beq.n	8004da4 <UART_SetConfig+0x168>
 8004d96:	e00b      	b.n	8004db0 <UART_SetConfig+0x174>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	77fb      	strb	r3, [r7, #31]
 8004d9c:	e0f2      	b.n	8004f84 <UART_SetConfig+0x348>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	77fb      	strb	r3, [r7, #31]
 8004da2:	e0ef      	b.n	8004f84 <UART_SetConfig+0x348>
 8004da4:	2304      	movs	r3, #4
 8004da6:	77fb      	strb	r3, [r7, #31]
 8004da8:	e0ec      	b.n	8004f84 <UART_SetConfig+0x348>
 8004daa:	2308      	movs	r3, #8
 8004dac:	77fb      	strb	r3, [r7, #31]
 8004dae:	e0e9      	b.n	8004f84 <UART_SetConfig+0x348>
 8004db0:	2310      	movs	r3, #16
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e0e6      	b.n	8004f84 <UART_SetConfig+0x348>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a56      	ldr	r2, [pc, #344]	; (8004f14 <UART_SetConfig+0x2d8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d120      	bne.n	8004e02 <UART_SetConfig+0x1c6>
 8004dc0:	4b51      	ldr	r3, [pc, #324]	; (8004f08 <UART_SetConfig+0x2cc>)
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dca:	2bc0      	cmp	r3, #192	; 0xc0
 8004dcc:	d013      	beq.n	8004df6 <UART_SetConfig+0x1ba>
 8004dce:	2bc0      	cmp	r3, #192	; 0xc0
 8004dd0:	d814      	bhi.n	8004dfc <UART_SetConfig+0x1c0>
 8004dd2:	2b80      	cmp	r3, #128	; 0x80
 8004dd4:	d009      	beq.n	8004dea <UART_SetConfig+0x1ae>
 8004dd6:	2b80      	cmp	r3, #128	; 0x80
 8004dd8:	d810      	bhi.n	8004dfc <UART_SetConfig+0x1c0>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <UART_SetConfig+0x1a8>
 8004dde:	2b40      	cmp	r3, #64	; 0x40
 8004de0:	d006      	beq.n	8004df0 <UART_SetConfig+0x1b4>
 8004de2:	e00b      	b.n	8004dfc <UART_SetConfig+0x1c0>
 8004de4:	2300      	movs	r3, #0
 8004de6:	77fb      	strb	r3, [r7, #31]
 8004de8:	e0cc      	b.n	8004f84 <UART_SetConfig+0x348>
 8004dea:	2302      	movs	r3, #2
 8004dec:	77fb      	strb	r3, [r7, #31]
 8004dee:	e0c9      	b.n	8004f84 <UART_SetConfig+0x348>
 8004df0:	2304      	movs	r3, #4
 8004df2:	77fb      	strb	r3, [r7, #31]
 8004df4:	e0c6      	b.n	8004f84 <UART_SetConfig+0x348>
 8004df6:	2308      	movs	r3, #8
 8004df8:	77fb      	strb	r3, [r7, #31]
 8004dfa:	e0c3      	b.n	8004f84 <UART_SetConfig+0x348>
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e0c0      	b.n	8004f84 <UART_SetConfig+0x348>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a44      	ldr	r2, [pc, #272]	; (8004f18 <UART_SetConfig+0x2dc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d125      	bne.n	8004e58 <UART_SetConfig+0x21c>
 8004e0c:	4b3e      	ldr	r3, [pc, #248]	; (8004f08 <UART_SetConfig+0x2cc>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e1a:	d017      	beq.n	8004e4c <UART_SetConfig+0x210>
 8004e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e20:	d817      	bhi.n	8004e52 <UART_SetConfig+0x216>
 8004e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e26:	d00b      	beq.n	8004e40 <UART_SetConfig+0x204>
 8004e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2c:	d811      	bhi.n	8004e52 <UART_SetConfig+0x216>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <UART_SetConfig+0x1fe>
 8004e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e36:	d006      	beq.n	8004e46 <UART_SetConfig+0x20a>
 8004e38:	e00b      	b.n	8004e52 <UART_SetConfig+0x216>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	77fb      	strb	r3, [r7, #31]
 8004e3e:	e0a1      	b.n	8004f84 <UART_SetConfig+0x348>
 8004e40:	2302      	movs	r3, #2
 8004e42:	77fb      	strb	r3, [r7, #31]
 8004e44:	e09e      	b.n	8004f84 <UART_SetConfig+0x348>
 8004e46:	2304      	movs	r3, #4
 8004e48:	77fb      	strb	r3, [r7, #31]
 8004e4a:	e09b      	b.n	8004f84 <UART_SetConfig+0x348>
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	77fb      	strb	r3, [r7, #31]
 8004e50:	e098      	b.n	8004f84 <UART_SetConfig+0x348>
 8004e52:	2310      	movs	r3, #16
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e095      	b.n	8004f84 <UART_SetConfig+0x348>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a2f      	ldr	r2, [pc, #188]	; (8004f1c <UART_SetConfig+0x2e0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d125      	bne.n	8004eae <UART_SetConfig+0x272>
 8004e62:	4b29      	ldr	r3, [pc, #164]	; (8004f08 <UART_SetConfig+0x2cc>)
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e70:	d017      	beq.n	8004ea2 <UART_SetConfig+0x266>
 8004e72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e76:	d817      	bhi.n	8004ea8 <UART_SetConfig+0x26c>
 8004e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e7c:	d00b      	beq.n	8004e96 <UART_SetConfig+0x25a>
 8004e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e82:	d811      	bhi.n	8004ea8 <UART_SetConfig+0x26c>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <UART_SetConfig+0x254>
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8c:	d006      	beq.n	8004e9c <UART_SetConfig+0x260>
 8004e8e:	e00b      	b.n	8004ea8 <UART_SetConfig+0x26c>
 8004e90:	2301      	movs	r3, #1
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e076      	b.n	8004f84 <UART_SetConfig+0x348>
 8004e96:	2302      	movs	r3, #2
 8004e98:	77fb      	strb	r3, [r7, #31]
 8004e9a:	e073      	b.n	8004f84 <UART_SetConfig+0x348>
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e070      	b.n	8004f84 <UART_SetConfig+0x348>
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e06d      	b.n	8004f84 <UART_SetConfig+0x348>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e06a      	b.n	8004f84 <UART_SetConfig+0x348>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a1b      	ldr	r2, [pc, #108]	; (8004f20 <UART_SetConfig+0x2e4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d138      	bne.n	8004f2a <UART_SetConfig+0x2ee>
 8004eb8:	4b13      	ldr	r3, [pc, #76]	; (8004f08 <UART_SetConfig+0x2cc>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ec2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ec6:	d017      	beq.n	8004ef8 <UART_SetConfig+0x2bc>
 8004ec8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ecc:	d82a      	bhi.n	8004f24 <UART_SetConfig+0x2e8>
 8004ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed2:	d00b      	beq.n	8004eec <UART_SetConfig+0x2b0>
 8004ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed8:	d824      	bhi.n	8004f24 <UART_SetConfig+0x2e8>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <UART_SetConfig+0x2aa>
 8004ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee2:	d006      	beq.n	8004ef2 <UART_SetConfig+0x2b6>
 8004ee4:	e01e      	b.n	8004f24 <UART_SetConfig+0x2e8>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e04b      	b.n	8004f84 <UART_SetConfig+0x348>
 8004eec:	2302      	movs	r3, #2
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e048      	b.n	8004f84 <UART_SetConfig+0x348>
 8004ef2:	2304      	movs	r3, #4
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	e045      	b.n	8004f84 <UART_SetConfig+0x348>
 8004ef8:	2308      	movs	r3, #8
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e042      	b.n	8004f84 <UART_SetConfig+0x348>
 8004efe:	bf00      	nop
 8004f00:	efff69f3 	.word	0xefff69f3
 8004f04:	40011000 	.word	0x40011000
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	40004400 	.word	0x40004400
 8004f10:	40004800 	.word	0x40004800
 8004f14:	40004c00 	.word	0x40004c00
 8004f18:	40005000 	.word	0x40005000
 8004f1c:	40011400 	.word	0x40011400
 8004f20:	40007800 	.word	0x40007800
 8004f24:	2310      	movs	r3, #16
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e02c      	b.n	8004f84 <UART_SetConfig+0x348>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a72      	ldr	r2, [pc, #456]	; (80050f8 <UART_SetConfig+0x4bc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d125      	bne.n	8004f80 <UART_SetConfig+0x344>
 8004f34:	4b71      	ldr	r3, [pc, #452]	; (80050fc <UART_SetConfig+0x4c0>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f42:	d017      	beq.n	8004f74 <UART_SetConfig+0x338>
 8004f44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f48:	d817      	bhi.n	8004f7a <UART_SetConfig+0x33e>
 8004f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f4e:	d00b      	beq.n	8004f68 <UART_SetConfig+0x32c>
 8004f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f54:	d811      	bhi.n	8004f7a <UART_SetConfig+0x33e>
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <UART_SetConfig+0x326>
 8004f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f5e:	d006      	beq.n	8004f6e <UART_SetConfig+0x332>
 8004f60:	e00b      	b.n	8004f7a <UART_SetConfig+0x33e>
 8004f62:	2300      	movs	r3, #0
 8004f64:	77fb      	strb	r3, [r7, #31]
 8004f66:	e00d      	b.n	8004f84 <UART_SetConfig+0x348>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	77fb      	strb	r3, [r7, #31]
 8004f6c:	e00a      	b.n	8004f84 <UART_SetConfig+0x348>
 8004f6e:	2304      	movs	r3, #4
 8004f70:	77fb      	strb	r3, [r7, #31]
 8004f72:	e007      	b.n	8004f84 <UART_SetConfig+0x348>
 8004f74:	2308      	movs	r3, #8
 8004f76:	77fb      	strb	r3, [r7, #31]
 8004f78:	e004      	b.n	8004f84 <UART_SetConfig+0x348>
 8004f7a:	2310      	movs	r3, #16
 8004f7c:	77fb      	strb	r3, [r7, #31]
 8004f7e:	e001      	b.n	8004f84 <UART_SetConfig+0x348>
 8004f80:	2310      	movs	r3, #16
 8004f82:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8c:	d15b      	bne.n	8005046 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004f8e:	7ffb      	ldrb	r3, [r7, #31]
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d828      	bhi.n	8004fe6 <UART_SetConfig+0x3aa>
 8004f94:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0x360>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fc9 	.word	0x08004fc9
 8004fa4:	08004fd1 	.word	0x08004fd1
 8004fa8:	08004fe7 	.word	0x08004fe7
 8004fac:	08004fd7 	.word	0x08004fd7
 8004fb0:	08004fe7 	.word	0x08004fe7
 8004fb4:	08004fe7 	.word	0x08004fe7
 8004fb8:	08004fe7 	.word	0x08004fe7
 8004fbc:	08004fdf 	.word	0x08004fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc0:	f7fd ff32 	bl	8002e28 <HAL_RCC_GetPCLK1Freq>
 8004fc4:	61b8      	str	r0, [r7, #24]
        break;
 8004fc6:	e013      	b.n	8004ff0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc8:	f7fd ff42 	bl	8002e50 <HAL_RCC_GetPCLK2Freq>
 8004fcc:	61b8      	str	r0, [r7, #24]
        break;
 8004fce:	e00f      	b.n	8004ff0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd0:	4b4b      	ldr	r3, [pc, #300]	; (8005100 <UART_SetConfig+0x4c4>)
 8004fd2:	61bb      	str	r3, [r7, #24]
        break;
 8004fd4:	e00c      	b.n	8004ff0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd6:	f7fd fe15 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8004fda:	61b8      	str	r0, [r7, #24]
        break;
 8004fdc:	e008      	b.n	8004ff0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fe2:	61bb      	str	r3, [r7, #24]
        break;
 8004fe4:	e004      	b.n	8004ff0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	77bb      	strb	r3, [r7, #30]
        break;
 8004fee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d074      	beq.n	80050e0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	005a      	lsls	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	085b      	lsrs	r3, r3, #1
 8005000:	441a      	add	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	fbb2 f3f3 	udiv	r3, r2, r3
 800500a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	2b0f      	cmp	r3, #15
 8005010:	d916      	bls.n	8005040 <UART_SetConfig+0x404>
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005018:	d212      	bcs.n	8005040 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	b29b      	uxth	r3, r3
 800501e:	f023 030f 	bic.w	r3, r3, #15
 8005022:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	085b      	lsrs	r3, r3, #1
 8005028:	b29b      	uxth	r3, r3
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	b29a      	uxth	r2, r3
 8005030:	89fb      	ldrh	r3, [r7, #14]
 8005032:	4313      	orrs	r3, r2
 8005034:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	89fa      	ldrh	r2, [r7, #14]
 800503c:	60da      	str	r2, [r3, #12]
 800503e:	e04f      	b.n	80050e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	77bb      	strb	r3, [r7, #30]
 8005044:	e04c      	b.n	80050e0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005046:	7ffb      	ldrb	r3, [r7, #31]
 8005048:	2b08      	cmp	r3, #8
 800504a:	d828      	bhi.n	800509e <UART_SetConfig+0x462>
 800504c:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <UART_SetConfig+0x418>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	08005079 	.word	0x08005079
 8005058:	08005081 	.word	0x08005081
 800505c:	08005089 	.word	0x08005089
 8005060:	0800509f 	.word	0x0800509f
 8005064:	0800508f 	.word	0x0800508f
 8005068:	0800509f 	.word	0x0800509f
 800506c:	0800509f 	.word	0x0800509f
 8005070:	0800509f 	.word	0x0800509f
 8005074:	08005097 	.word	0x08005097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005078:	f7fd fed6 	bl	8002e28 <HAL_RCC_GetPCLK1Freq>
 800507c:	61b8      	str	r0, [r7, #24]
        break;
 800507e:	e013      	b.n	80050a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005080:	f7fd fee6 	bl	8002e50 <HAL_RCC_GetPCLK2Freq>
 8005084:	61b8      	str	r0, [r7, #24]
        break;
 8005086:	e00f      	b.n	80050a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005088:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <UART_SetConfig+0x4c4>)
 800508a:	61bb      	str	r3, [r7, #24]
        break;
 800508c:	e00c      	b.n	80050a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800508e:	f7fd fdb9 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8005092:	61b8      	str	r0, [r7, #24]
        break;
 8005094:	e008      	b.n	80050a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509a:	61bb      	str	r3, [r7, #24]
        break;
 800509c:	e004      	b.n	80050a8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	77bb      	strb	r3, [r7, #30]
        break;
 80050a6:	bf00      	nop
    }

    if (pclk != 0U)
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d018      	beq.n	80050e0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	085a      	lsrs	r2, r3, #1
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	441a      	add	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b0f      	cmp	r3, #15
 80050c6:	d909      	bls.n	80050dc <UART_SetConfig+0x4a0>
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ce:	d205      	bcs.n	80050dc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60da      	str	r2, [r3, #12]
 80050da:	e001      	b.n	80050e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40007c00 	.word	0x40007c00
 80050fc:	40023800 	.word	0x40023800
 8005100:	00f42400 	.word	0x00f42400

08005104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01a      	beq.n	800521a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005202:	d10a      	bne.n	800521a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	605a      	str	r2, [r3, #4]
  }
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af02      	add	r7, sp, #8
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005258:	f7fc f9c2 	bl	80015e0 <HAL_GetTick>
 800525c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b08      	cmp	r3, #8
 800526a:	d10e      	bne.n	800528a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800526c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f81b 	bl	80052b6 <UART_WaitOnFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e011      	b.n	80052ae <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b09c      	sub	sp, #112	; 0x70
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	603b      	str	r3, [r7, #0]
 80052c2:	4613      	mov	r3, r2
 80052c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c6:	e0a7      	b.n	8005418 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ce:	f000 80a3 	beq.w	8005418 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d2:	f7fc f985 	bl	80015e0 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052de:	429a      	cmp	r2, r3
 80052e0:	d302      	bcc.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80052e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d13f      	bne.n	8005368 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052fc:	667b      	str	r3, [r7, #100]	; 0x64
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005306:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005308:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800530c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e6      	bne.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3308      	adds	r3, #8
 8005320:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	f023 0301 	bic.w	r3, r3, #1
 8005330:	663b      	str	r3, [r7, #96]	; 0x60
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3308      	adds	r3, #8
 8005338:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800533a:	64ba      	str	r2, [r7, #72]	; 0x48
 800533c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005340:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e5      	bne.n	800531a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2220      	movs	r2, #32
 8005358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e068      	b.n	800543a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d050      	beq.n	8005418 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005384:	d148      	bne.n	8005418 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800538e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
 80053b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e6      	bne.n	8005390 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3308      	adds	r3, #8
 80053c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	613b      	str	r3, [r7, #16]
   return(result);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3308      	adds	r3, #8
 80053e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053e2:	623a      	str	r2, [r7, #32]
 80053e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	69f9      	ldr	r1, [r7, #28]
 80053e8:	6a3a      	ldr	r2, [r7, #32]
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e5      	bne.n	80053c2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2220      	movs	r2, #32
 8005400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e010      	b.n	800543a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69da      	ldr	r2, [r3, #28]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	4013      	ands	r3, r2
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	429a      	cmp	r2, r3
 8005426:	bf0c      	ite	eq
 8005428:	2301      	moveq	r3, #1
 800542a:	2300      	movne	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	461a      	mov	r2, r3
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	429a      	cmp	r2, r3
 8005434:	f43f af48 	beq.w	80052c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3770      	adds	r7, #112	; 0x70
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005442:	b480      	push	{r7}
 8005444:	b095      	sub	sp, #84	; 0x54
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800545e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	461a      	mov	r2, r3
 8005466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005468:	643b      	str	r3, [r7, #64]	; 0x40
 800546a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800546e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005470:	e841 2300 	strex	r3, r2, [r1]
 8005474:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1e6      	bne.n	800544a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3308      	adds	r3, #8
 8005482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	61fb      	str	r3, [r7, #28]
   return(result);
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f023 0301 	bic.w	r3, r3, #1
 8005492:	64bb      	str	r3, [r7, #72]	; 0x48
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3308      	adds	r3, #8
 800549a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800549c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800549e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054a4:	e841 2300 	strex	r3, r2, [r1]
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e5      	bne.n	800547c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d118      	bne.n	80054ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f023 0310 	bic.w	r3, r3, #16
 80054cc:	647b      	str	r3, [r7, #68]	; 0x44
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d6:	61bb      	str	r3, [r7, #24]
 80054d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	6979      	ldr	r1, [r7, #20]
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	613b      	str	r3, [r7, #16]
   return(result);
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e6      	bne.n	80054b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80054fe:	bf00      	nop
 8005500:	3754      	adds	r7, #84	; 0x54
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005532:	bf00      	nop
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b088      	sub	sp, #32
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005556:	61fb      	str	r3, [r7, #28]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	61bb      	str	r3, [r7, #24]
 8005562:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6979      	ldr	r1, [r7, #20]
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	613b      	str	r3, [r7, #16]
   return(result);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e6      	bne.n	8005542 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800558a:	bf00      	nop
 800558c:	3720      	adds	r7, #32
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <memset>:
 8005592:	4402      	add	r2, r0
 8005594:	4603      	mov	r3, r0
 8005596:	4293      	cmp	r3, r2
 8005598:	d100      	bne.n	800559c <memset+0xa>
 800559a:	4770      	bx	lr
 800559c:	f803 1b01 	strb.w	r1, [r3], #1
 80055a0:	e7f9      	b.n	8005596 <memset+0x4>
	...

080055a4 <__libc_init_array>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	4d0d      	ldr	r5, [pc, #52]	; (80055dc <__libc_init_array+0x38>)
 80055a8:	4c0d      	ldr	r4, [pc, #52]	; (80055e0 <__libc_init_array+0x3c>)
 80055aa:	1b64      	subs	r4, r4, r5
 80055ac:	10a4      	asrs	r4, r4, #2
 80055ae:	2600      	movs	r6, #0
 80055b0:	42a6      	cmp	r6, r4
 80055b2:	d109      	bne.n	80055c8 <__libc_init_array+0x24>
 80055b4:	4d0b      	ldr	r5, [pc, #44]	; (80055e4 <__libc_init_array+0x40>)
 80055b6:	4c0c      	ldr	r4, [pc, #48]	; (80055e8 <__libc_init_array+0x44>)
 80055b8:	f000 f818 	bl	80055ec <_init>
 80055bc:	1b64      	subs	r4, r4, r5
 80055be:	10a4      	asrs	r4, r4, #2
 80055c0:	2600      	movs	r6, #0
 80055c2:	42a6      	cmp	r6, r4
 80055c4:	d105      	bne.n	80055d2 <__libc_init_array+0x2e>
 80055c6:	bd70      	pop	{r4, r5, r6, pc}
 80055c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055cc:	4798      	blx	r3
 80055ce:	3601      	adds	r6, #1
 80055d0:	e7ee      	b.n	80055b0 <__libc_init_array+0xc>
 80055d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d6:	4798      	blx	r3
 80055d8:	3601      	adds	r6, #1
 80055da:	e7f2      	b.n	80055c2 <__libc_init_array+0x1e>
 80055dc:	08005624 	.word	0x08005624
 80055e0:	08005624 	.word	0x08005624
 80055e4:	08005624 	.word	0x08005624
 80055e8:	0800562c 	.word	0x0800562c

080055ec <_init>:
 80055ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ee:	bf00      	nop
 80055f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f2:	bc08      	pop	{r3}
 80055f4:	469e      	mov	lr, r3
 80055f6:	4770      	bx	lr

080055f8 <_fini>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	bf00      	nop
 80055fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fe:	bc08      	pop	{r3}
 8005600:	469e      	mov	lr, r3
 8005602:	4770      	bx	lr
