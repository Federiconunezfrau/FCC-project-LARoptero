
TT_IMU_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000588c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005a54  08005a54  00015a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a6c  08005a6c  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08005a6c  08005a6c  00015a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a74  08005a74  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005a74  08005a74  00015a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a7c  08005a7c  00015a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08005a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000104  08005b84  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08005b84  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001880a  00000000  00000000  00020177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a2d  00000000  00000000  00038981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  0003d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df7  00000000  00000000  0003e608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b0a7  00000000  00000000  0003f3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b11a  00000000  00000000  0006a4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5ec8  00000000  00000000  000855c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048c0  00000000  00000000  0017b488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0017fd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000104 	.word	0x20000104
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005a3c 	.word	0x08005a3c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000108 	.word	0x20000108
 8000204:	08005a3c 	.word	0x08005a3c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <_Z15CNI_constructorP19__CAN_HandleTypeDef>:

static CNI_t _instance;


void CNI_constructor(CAN_HandleTypeDef *hcan)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	_instance.mHcan_ = hcan;
 800050c:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6013      	str	r3, [r2, #0]

	_instance.mCANtxHeader_.ExtId = 0;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
	_instance.mCANtxHeader_.IDE = CAN_ID_STD;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
	_instance.mCANtxHeader_.RTR = CAN_RTR_DATA;
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
	_instance.mCANtxHeader_.TransmitGlobalTime = DISABLE;
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000526:	2200      	movs	r2, #0
 8000528:	771a      	strb	r2, [r3, #28]
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000120 	.word	0x20000120

0800053c <_Z8CNI_initv>:


void CNI_init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i = 0; i < lenCANfilterList ; i++)
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	e00e      	b.n	8000566 <_Z8CNI_initv+0x2a>
	{
		HAL_CAN_ConfigFilter(_instance.mHcan_, &CANfiltersList[i]);
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <_Z8CNI_initv+0x40>)
 800054a:	6818      	ldr	r0, [r3, #0]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	00db      	lsls	r3, r3, #3
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <_Z8CNI_initv+0x44>)
 8000558:	4413      	add	r3, r2
 800055a:	4619      	mov	r1, r3
 800055c:	f001 fa36 	bl	80019cc <HAL_CAN_ConfigFilter>
	for(i = 0; i < lenCANfilterList ; i++)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3301      	adds	r3, #1
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <_Z8CNI_initv+0x48>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	d3eb      	bcc.n	8000548 <_Z8CNI_initv+0xc>
	}
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000120 	.word	0x20000120
 8000580:	200000c8 	.word	0x200000c8
 8000584:	200000f4 	.word	0x200000f4

08000588 <_Z9CNI_startv>:


void CNI_start(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_CAN_Start(_instance.mHcan_);
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <_Z9CNI_startv+0x14>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fafb 	bl	8001b8c <HAL_CAN_Start>
#if !IS_MASTER
    HAL_CAN_ActivateNotification(_instance.mHcan_, CAN_IT_RX_FIFO0_MSG_PENDING);
#endif
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000120 	.word	0x20000120

080005a0 <_Z12CNI_send_msgm>:


CNI_status_t CNI_send_msg(uint32_t msgHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	uint32_t txMailbox;
	serviceID currentMsgServiceID;
	uint32_t i;

	if(msgHandle >= lenCANmsgList)
 80005a8:	4b41      	ldr	r3, [pc, #260]	; (80006b0 <_Z12CNI_send_msgm+0x110>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d301      	bcc.n	80005b6 <_Z12CNI_send_msgm+0x16>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 80005b2:	2301      	movs	r3, #1
 80005b4:	e077      	b.n	80006a6 <_Z12CNI_send_msgm+0x106>
	}

	if(CANmsgList[msgHandle].mNodeID_ != MY_NODE_ID)
 80005b6:	493f      	ldr	r1, [pc, #252]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	440b      	add	r3, r1
 80005c4:	3304      	adds	r3, #4
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <_Z12CNI_send_msgm+0x30>
	{
		return CNI_MSG_HANDLE_TX_NOT_ALLOWED;
 80005cc:	2302      	movs	r3, #2
 80005ce:	e06a      	b.n	80006a6 <_Z12CNI_send_msgm+0x106>
	}

	// Armar el mensaje
	currentMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 80005d0:	4938      	ldr	r1, [pc, #224]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	4613      	mov	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	4413      	add	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	440b      	add	r3, r1
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	613b      	str	r3, [r7, #16]
	_instance.mCANtxHeader_.StdId = CAN_MSG_MAKE_STD_ID_TX(currentMsgServiceID);
 80005e2:	693b      	ldr	r3, [r7, #16]
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	4a34      	ldr	r2, [pc, #208]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 80005e8:	6093      	str	r3, [r2, #8]

	// Pasarle el msj al periférico

	// Limpia todos los mensajes pendientes (no debería haber ninguno, pero por las dudas)
	HAL_CAN_AbortTxRequest(_instance.mHcan_,CAN_TX_MAILBOX0|CAN_TX_MAILBOX1|CAN_TX_MAILBOX2);
 80005ea:	4b33      	ldr	r3, [pc, #204]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2107      	movs	r1, #7
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fbdf 	bl	8001db4 <HAL_CAN_AbortTxRequest>

	// Comenzando por la posición "msgHandle" se recorre la lista de mensajes. Esto es debido
	// a que es posible que se requiera enviar más de un mensaje.
	i = msgHandle;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 80005fa:	e02a      	b.n	8000652 <_Z12CNI_send_msgm+0xb2>
	{
		while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 80005fc:	bf00      	nop
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fc1b 	bl	8001e3e <HAL_CAN_GetTxMailboxesFreeLevel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	bf0c      	ite	eq
 800060e:	2301      	moveq	r3, #1
 8000610:	2300      	movne	r3, #0
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1f2      	bne.n	80005fe <_Z12CNI_send_msgm+0x5e>

		_instance.mCANtxHeader_.DLC = CANmsgList[i].mLenPayload_;
 8000618:	4926      	ldr	r1, [pc, #152]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	4613      	mov	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4413      	add	r3, r2
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	440b      	add	r3, r1
 8000626:	3310      	adds	r3, #16
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 800062c:	6193      	str	r3, [r2, #24]
		HAL_CAN_AddTxMessage(_instance.mHcan_, &_instance.mCANtxHeader_, CANmsgList[i].mPayload_, &txMailbox);
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 8000630:	6818      	ldr	r0, [r3, #0]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	4613      	mov	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	4413      	add	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	3308      	adds	r3, #8
 800063e:	4a1d      	ldr	r2, [pc, #116]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 8000640:	441a      	add	r2, r3
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	491d      	ldr	r1, [pc, #116]	; (80006bc <_Z12CNI_send_msgm+0x11c>)
 8000648:	f001 fae4 	bl	8001c14 <HAL_CAN_AddTxMessage>
		i++;
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	3301      	adds	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <_Z12CNI_send_msgm+0x110>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	697a      	ldr	r2, [r7, #20]
 8000658:	429a      	cmp	r2, r3
 800065a:	d215      	bcs.n	8000688 <_Z12CNI_send_msgm+0xe8>
 800065c:	4915      	ldr	r1, [pc, #84]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 800065e:	697a      	ldr	r2, [r7, #20]
 8000660:	4613      	mov	r3, r2
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4413      	add	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	440b      	add	r3, r1
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	693a      	ldr	r2, [r7, #16]
 800066e:	429a      	cmp	r2, r3
 8000670:	d10a      	bne.n	8000688 <_Z12CNI_send_msgm+0xe8>
 8000672:	4910      	ldr	r1, [pc, #64]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 8000674:	697a      	ldr	r2, [r7, #20]
 8000676:	4613      	mov	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4413      	add	r3, r2
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	440b      	add	r3, r1
 8000680:	3304      	adds	r3, #4
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0b9      	beq.n	80005fc <_Z12CNI_send_msgm+0x5c>
	}

	// Antes de retornar, se queda esperando a que se terminen de enviar todos los mensajes
	while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 8000688:	bf00      	nop
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fbd5 	bl	8001e3e <HAL_CAN_GetTxMailboxesFreeLevel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	bf0c      	ite	eq
 800069a:	2301      	moveq	r3, #1
 800069c:	2300      	movne	r3, #0
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f2      	bne.n	800068a <_Z12CNI_send_msgm+0xea>

	return CNI_OK;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000f0 	.word	0x200000f0
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000120 	.word	0x20000120
 80006bc:	20000128 	.word	0x20000128

080006c0 <_Z15CNI_receive_msgm>:


CNI_status_t CNI_receive_msg(uint32_t msgHandle)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08c      	sub	sp, #48	; 0x30
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	serviceID rxMsgServiceID;
	uint32_t rxNodeID;
	uint32_t i;

	// Chequear si el msgHandle es válido
	if(msgHandle >= lenCANmsgList)
 80006c8:	4b45      	ldr	r3, [pc, #276]	; (80007e0 <_Z15CNI_receive_msgm+0x120>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d301      	bcc.n	80006d6 <_Z15CNI_receive_msgm+0x16>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 80006d2:	2301      	movs	r3, #1
 80006d4:	e080      	b.n	80007d8 <_Z15CNI_receive_msgm+0x118>
	}

	if(CANmsgList[msgHandle].mNodeID_ == MY_NODE_ID)
 80006d6:	4943      	ldr	r1, [pc, #268]	; (80007e4 <_Z15CNI_receive_msgm+0x124>)
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	4613      	mov	r3, r2
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4413      	add	r3, r2
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	440b      	add	r3, r1
 80006e4:	3304      	adds	r3, #4
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d101      	bne.n	80006f0 <_Z15CNI_receive_msgm+0x30>
	{
		return CNI_MSG_HANDLE_RX_NOT_ALLOWED;
 80006ec:	2303      	movs	r3, #3
 80006ee:	e073      	b.n	80007d8 <_Z15CNI_receive_msgm+0x118>
	}

	i = msgHandle;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	rxMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 80006f4:	493b      	ldr	r1, [pc, #236]	; (80007e4 <_Z15CNI_receive_msgm+0x124>)
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	4613      	mov	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4413      	add	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	440b      	add	r3, r1
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
	rxNodeID = CANmsgList[msgHandle].mNodeID_;
 8000706:	4937      	ldr	r1, [pc, #220]	; (80007e4 <_Z15CNI_receive_msgm+0x124>)
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	4613      	mov	r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4413      	add	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	440b      	add	r3, r1
 8000714:	3304      	adds	r3, #4
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	627b      	str	r3, [r7, #36]	; 0x24

	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID))
 800071a:	e040      	b.n	800079e <_Z15CNI_receive_msgm+0xde>
	{
		while( (HAL_CAN_GetRxFifoFillLevel(_instance.mHcan_, CAN_RX_FIFO0) == 0) );
 800071c:	bf00      	nop
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <_Z15CNI_receive_msgm+0x128>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fcd1 	bl	80020cc <HAL_CAN_GetRxFifoFillLevel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	bf0c      	ite	eq
 8000730:	2301      	moveq	r3, #1
 8000732:	2300      	movne	r3, #0
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1f1      	bne.n	800071e <_Z15CNI_receive_msgm+0x5e>
		HAL_CAN_GetRxMessage(_instance.mHcan_, CAN_RX_FIFO0, &auxCANrxHeader, CANmsgList[i].mPayload_);
 800073a:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <_Z15CNI_receive_msgm+0x128>)
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000740:	4613      	mov	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	4413      	add	r3, r2
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	3308      	adds	r3, #8
 800074a:	4a26      	ldr	r2, [pc, #152]	; (80007e4 <_Z15CNI_receive_msgm+0x124>)
 800074c:	4413      	add	r3, r2
 800074e:	f107 0208 	add.w	r2, r7, #8
 8000752:	2100      	movs	r1, #0
 8000754:	f001 fba8 	bl	8001ea8 <HAL_CAN_GetRxMessage>
		if( (rxMsgServiceID == CAN_MSG_GET_SERVICE_ID_FROM_STD_ID(auxCANrxHeader.StdId)) && (rxNodeID == CAN_MSG_GET_NODE_ID_FROM_STD_ID(auxCANrxHeader.StdId)) )
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	08db      	lsrs	r3, r3, #3
 800075c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800075e:	429a      	cmp	r2, r3
 8000760:	d113      	bne.n	800078a <_Z15CNI_receive_msgm+0xca>
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	f003 0307 	and.w	r3, r3, #7
 8000768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800076a:	429a      	cmp	r2, r3
 800076c:	d10d      	bne.n	800078a <_Z15CNI_receive_msgm+0xca>
		{
			CANmsgList[i].mLenPayload_ = auxCANrxHeader.DLC;
 800076e:	69b9      	ldr	r1, [r7, #24]
 8000770:	481c      	ldr	r0, [pc, #112]	; (80007e4 <_Z15CNI_receive_msgm+0x124>)
 8000772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000774:	4613      	mov	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4413      	add	r3, r2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	4403      	add	r3, r0
 800077e:	3310      	adds	r3, #16
 8000780:	6019      	str	r1, [r3, #0]
			i++;
 8000782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000784:	3301      	adds	r3, #1
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000788:	e009      	b.n	800079e <_Z15CNI_receive_msgm+0xde>
		}
		else
		{
			CANmsgList[i].mLenPayload_ = 0;
 800078a:	4916      	ldr	r1, [pc, #88]	; (80007e4 <_Z15CNI_receive_msgm+0x124>)
 800078c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800078e:	4613      	mov	r3, r2
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4413      	add	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	440b      	add	r3, r1
 8000798:	3310      	adds	r3, #16
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID))
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <_Z15CNI_receive_msgm+0x120>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d216      	bcs.n	80007d6 <_Z15CNI_receive_msgm+0x116>
 80007a8:	490e      	ldr	r1, [pc, #56]	; (80007e4 <_Z15CNI_receive_msgm+0x124>)
 80007aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	440b      	add	r3, r1
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d10b      	bne.n	80007d6 <_Z15CNI_receive_msgm+0x116>
 80007be:	4909      	ldr	r1, [pc, #36]	; (80007e4 <_Z15CNI_receive_msgm+0x124>)
 80007c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007c2:	4613      	mov	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	440b      	add	r3, r1
 80007cc:	3304      	adds	r3, #4
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d0a2      	beq.n	800071c <_Z15CNI_receive_msgm+0x5c>
		}
	}

	return CNI_OK;
 80007d6:	2300      	movs	r3, #0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3730      	adds	r7, #48	; 0x30
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000f0 	.word	0x200000f0
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000120 	.word	0x20000120

080007ec <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_CAN1_Init+0x68>)
 80007f2:	4a19      	ldr	r2, [pc, #100]	; (8000858 <MX_CAN1_Init+0x6c>)
 80007f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_CAN1_Init+0x68>)
 80007f8:	2203      	movs	r2, #3
 80007fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_CAN1_Init+0x68>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_CAN1_Init+0x68>)
 8000804:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000808:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_CAN1_Init+0x68>)
 800080c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000810:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_CAN1_Init+0x68>)
 8000814:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000818:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_CAN1_Init+0x68>)
 800081c:	2200      	movs	r2, #0
 800081e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_CAN1_Init+0x68>)
 8000822:	2200      	movs	r2, #0
 8000824:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_CAN1_Init+0x68>)
 8000828:	2200      	movs	r2, #0
 800082a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_CAN1_Init+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_CAN1_Init+0x68>)
 8000834:	2200      	movs	r2, #0
 8000836:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_CAN1_Init+0x68>)
 800083a:	2200      	movs	r2, #0
 800083c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_CAN1_Init+0x68>)
 8000840:	f000 ffc8 	bl	80017d4 <HAL_CAN_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800084a:	f000 fa75 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000140 	.word	0x20000140
 8000858:	40006400 	.word	0x40006400

0800085c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <HAL_CAN_MspInit+0x7c>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d127      	bne.n	80008ce <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <HAL_CAN_MspInit+0x80>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a16      	ldr	r2, [pc, #88]	; (80008dc <HAL_CAN_MspInit+0x80>)
 8000884:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <HAL_CAN_MspInit+0x80>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_CAN_MspInit+0x80>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a10      	ldr	r2, [pc, #64]	; (80008dc <HAL_CAN_MspInit+0x80>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <HAL_CAN_MspInit+0x80>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008ae:	2303      	movs	r3, #3
 80008b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008be:	2309      	movs	r3, #9
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <HAL_CAN_MspInit+0x84>)
 80008ca:	f001 fdcb 	bl	8002464 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	; 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40006400 	.word	0x40006400
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020c00 	.word	0x40020c00

080008e4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b8b      	ldr	r3, [pc, #556]	; (8000b28 <MX_GPIO_Init+0x244>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a8a      	ldr	r2, [pc, #552]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b88      	ldr	r3, [pc, #544]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	4b85      	ldr	r3, [pc, #532]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a84      	ldr	r2, [pc, #528]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b82      	ldr	r3, [pc, #520]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b7f      	ldr	r3, [pc, #508]	; (8000b28 <MX_GPIO_Init+0x244>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a7e      	ldr	r2, [pc, #504]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b7c      	ldr	r3, [pc, #496]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b79      	ldr	r3, [pc, #484]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a78      	ldr	r2, [pc, #480]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b76      	ldr	r3, [pc, #472]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095a:	4b73      	ldr	r3, [pc, #460]	; (8000b28 <MX_GPIO_Init+0x244>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a72      	ldr	r2, [pc, #456]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b70      	ldr	r3, [pc, #448]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0310 	and.w	r3, r3, #16
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	4b6d      	ldr	r3, [pc, #436]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a6c      	ldr	r2, [pc, #432]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b6a      	ldr	r3, [pc, #424]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098a:	4b67      	ldr	r3, [pc, #412]	; (8000b28 <MX_GPIO_Init+0x244>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a66      	ldr	r2, [pc, #408]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b64      	ldr	r3, [pc, #400]	; (8000b28 <MX_GPIO_Init+0x244>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009a8:	4860      	ldr	r0, [pc, #384]	; (8000b2c <MX_GPIO_Init+0x248>)
 80009aa:	f001 ff07 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b4:	485e      	ldr	r0, [pc, #376]	; (8000b30 <MX_GPIO_Init+0x24c>)
 80009b6:	f001 ff01 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2140      	movs	r1, #64	; 0x40
 80009be:	485d      	ldr	r0, [pc, #372]	; (8000b34 <MX_GPIO_Init+0x250>)
 80009c0:	f001 fefc 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4857      	ldr	r0, [pc, #348]	; (8000b38 <MX_GPIO_Init+0x254>)
 80009dc:	f001 fd42 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009e0:	2332      	movs	r3, #50	; 0x32
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f0:	230b      	movs	r3, #11
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	484f      	ldr	r0, [pc, #316]	; (8000b38 <MX_GPIO_Init+0x254>)
 80009fc:	f001 fd32 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a00:	2386      	movs	r3, #134	; 0x86
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a10:	230b      	movs	r3, #11
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4848      	ldr	r0, [pc, #288]	; (8000b3c <MX_GPIO_Init+0x258>)
 8000a1c:	f001 fd22 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a20:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	483c      	ldr	r0, [pc, #240]	; (8000b2c <MX_GPIO_Init+0x248>)
 8000a3a:	f001 fd13 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8000a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4836      	ldr	r0, [pc, #216]	; (8000b30 <MX_GPIO_Init+0x24c>)
 8000a58:	f001 fd04 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a6e:	230b      	movs	r3, #11
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	482c      	ldr	r0, [pc, #176]	; (8000b2c <MX_GPIO_Init+0x248>)
 8000a7a:	f001 fcf3 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a7e:	2340      	movs	r3, #64	; 0x40
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4827      	ldr	r0, [pc, #156]	; (8000b34 <MX_GPIO_Init+0x250>)
 8000a96:	f001 fce5 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4821      	ldr	r0, [pc, #132]	; (8000b34 <MX_GPIO_Init+0x250>)
 8000aae:	f001 fcd9 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ab2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ac4:	230a      	movs	r3, #10
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	481b      	ldr	r0, [pc, #108]	; (8000b3c <MX_GPIO_Init+0x258>)
 8000ad0:	f001 fcc8 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4814      	ldr	r0, [pc, #80]	; (8000b3c <MX_GPIO_Init+0x258>)
 8000aea:	f001 fcbb 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000aee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b00:	230b      	movs	r3, #11
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480a      	ldr	r0, [pc, #40]	; (8000b34 <MX_GPIO_Init+0x250>)
 8000b0c:	f001 fcaa 	bl	8002464 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2028      	movs	r0, #40	; 0x28
 8000b16:	f001 fbdc 	bl	80022d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b1a:	2028      	movs	r0, #40	; 0x28
 8000b1c:	f001 fbf5 	bl	800230a <HAL_NVIC_EnableIRQ>

}
 8000b20:	bf00      	nop
 8000b22:	3730      	adds	r7, #48	; 0x30
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40021800 	.word	0x40021800
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	40020000 	.word	0x40020000

08000b40 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>:
#include "stm32f7xx_hal.h"


namespace STM32{

    gpio::gpio(GPIO_TypeDef* pPortHandler, uint16_t pin)
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	80fb      	strh	r3, [r7, #6]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f854 	bl	8000bfe <_ZNSt8functionIFvvEEC1Ev>
    {
        m_portHandler = pPortHandler;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	68ba      	ldr	r2, [r7, #8]
 8000b5a:	611a      	str	r2, [r3, #16]
        m_pin = pin;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	88fa      	ldrh	r2, [r7, #6]
 8000b60:	829a      	strh	r2, [r3, #20]
    }
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <_ZN5STM324gpio6toggleEv>:
        GPIO_PinState ret = HAL_GPIO_ReadPin(m_portHandler, m_pin);
        return ret == GPIO_PIN_SET ? GPIO_ST::HIGH : GPIO_ST::LOW;
    }

    void gpio::toggle()
    {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
        HAL_GPIO_TogglePin(m_portHandler, m_pin);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691a      	ldr	r2, [r3, #16]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	8a9b      	ldrh	r3, [r3, #20]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4610      	mov	r0, r2
 8000b80:	f001 fe35 	bl	80027ee <HAL_GPIO_TogglePin>
    }
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <_ZN5STM324gpio5writeE7GPIO_ST>:

    void gpio::write(GPIO_ST st)
    {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
        GPIO_PinState pinState = map_hal_st_to_igpio_st(st); 
 8000b96:	6838      	ldr	r0, [r7, #0]
 8000b98:	f000 f80e 	bl	8000bb8 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(m_portHandler, m_pin, pinState);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6918      	ldr	r0, [r3, #16]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	8a9b      	ldrh	r3, [r3, #20]
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	4619      	mov	r1, r3
 8000bac:	f001 fe06 	bl	80027bc <HAL_GPIO_WritePin>
    }
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>:

    GPIO_PinState gpio::map_hal_st_to_igpio_st(GPIO_ST st)
	{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
		return st == GPIO_ST::HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d101      	bne.n	8000bca <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x12>
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e000      	b.n	8000bcc <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x14>
 8000bca:	2300      	movs	r3, #0
	}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <_ZNSt14_Function_baseC1Ev>:
	  static bool
	  _M_not_empty_function(const _Tp&)
	  { return true; }
      };

    _Function_base() = default;
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	461a      	mov	r2, r3
 8000be4:	2300      	movs	r3, #0
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	6053      	str	r3, [r2, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	6053      	str	r3, [r2, #4]
 8000c10:	6093      	str	r3, [r2, #8]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ffdf 	bl	8000bd8 <_ZNSt14_Function_baseC1Ev>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2e:	f000 fd74 	bl	800171a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c32:	f000 f80d 	bl	8000c50 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c36:	f7ff fe55 	bl	80008e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c3a:	f000 fcad 	bl	8001598 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000c3e:	f000 faa1 	bl	8001184 <MX_TIM5_Init>
  MX_CAN1_Init();
 8000c42:	f7ff fdd3 	bl	80007ec <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  system_init();
 8000c46:	f000 f9b1 	bl	8000fac <_Z11system_initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  system_run_active_mode();
 8000c4a:	f000 f9d3 	bl	8000ff4 <_Z22system_run_active_modev>
 8000c4e:	e7fc      	b.n	8000c4a <main+0x20>

08000c50 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	2230      	movs	r2, #48	; 0x30
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f004 febf 	bl	80059e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c74:	f001 fe4e 	bl	8002914 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <_Z18SystemClock_Configv+0xe0>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	4a2c      	ldr	r2, [pc, #176]	; (8000d30 <_Z18SystemClock_Configv+0xe0>)
 8000c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c82:	6413      	str	r3, [r2, #64]	; 0x40
 8000c84:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <_Z18SystemClock_Configv+0xe0>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c90:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <_Z18SystemClock_Configv+0xe4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c98:	4a26      	ldr	r2, [pc, #152]	; (8000d34 <_Z18SystemClock_Configv+0xe4>)
 8000c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <_Z18SystemClock_Configv+0xe4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000cac:	2309      	movs	r3, #9
 8000cae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cb0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000cc8:	2348      	movs	r3, #72	; 0x48
 8000cca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd4:	f107 0320 	add.w	r3, r7, #32
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 fe2b 	bl	8002934 <HAL_RCC_OscConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	bf14      	ite	ne
 8000ce4:	2301      	movne	r3, #1
 8000ce6:	2300      	moveq	r3, #0
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000cee:	f000 f823 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf2:	230f      	movs	r3, #15
 8000cf4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 f8b4 	bl	8002e7c <HAL_RCC_ClockConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	bf14      	ite	ne
 8000d1a:	2301      	movne	r3, #1
 8000d1c:	2300      	moveq	r3, #0
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000d24:	f000 f808 	bl	8000d38 <Error_Handler>
  }
}
 8000d28:	bf00      	nop
 8000d2a:	3750      	adds	r7, #80	; 0x50
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40007000 	.word	0x40007000

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <_Z20fail_silent_mode_runv>:

#define LED_FAIL_SILENT_GPIO_Port LD3_GPIO_Port
#define LED_FAIL_SILENT_GPIO_Pin  LD3_Pin

void fail_silent_mode_run(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
	STM32::gpio ledFailSilent(LED_FAIL_SILENT_GPIO_Port, LED_FAIL_SILENT_GPIO_Pin);
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d50:	4904      	ldr	r1, [pc, #16]	; (8000d64 <_Z20fail_silent_mode_runv+0x20>)
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fef4 	bl	8000b40 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>


	ledFailSilent.write(GPIO_ST::HIGH);
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff15 	bl	8000b8c <_ZN5STM324gpio5writeE7GPIO_ST>

	while(1)
 8000d62:	e7fe      	b.n	8000d62 <_Z20fail_silent_mode_runv+0x1e>
 8000d64:	40020400 	.word	0x40020400

08000d68 <_Z15normal_mode_runv>:
#define LED_HEARTBEAT_GPIO_Pin  LD1_Pin

static bool run = false;

void normal_mode_run(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0b0      	sub	sp, #192	; 0xc0
 8000d6c:	af04      	add	r7, sp, #16
//	taskUARTsendData_t taskSendIMUUART1;
//	taskUARTsendData_t taskSendIMUUART2;
//	taskUARTsendData_t taskSendIMUUART3;

	// Inicialización del LED heartbeat==============================
	STM32::gpio ledHeartbeat(LED_HEARTBEAT_GPIO_Port, LED_HEARTBEAT_GPIO_Pin);
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2201      	movs	r2, #1
 8000d72:	494a      	ldr	r1, [pc, #296]	; (8000e9c <_Z15normal_mode_runv+0x134>)
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fee3 	bl	8000b40 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

	// Inicialización de la CNI ==============================
	CNI_constructor(&hcan1);
 8000d7a:	4849      	ldr	r0, [pc, #292]	; (8000ea0 <_Z15normal_mode_runv+0x138>)
 8000d7c:	f7ff fbc2 	bl	8000504 <_Z15CNI_constructorP19__CAN_HandleTypeDef>

	// Inicialización de la UART ============================
//	timeTriggeredUART_constructor(&huart3, 8);

	// Creación de las tareas========================================
	taskWatchdog_constructor(&taskWatchdog,
 8000d80:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8000d84:	4b47      	ldr	r3, [pc, #284]	; (8000ea4 <_Z15normal_mode_runv+0x13c>)
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2100      	movs	r1, #0
 8000d92:	f000 f9af 	bl	80010f4 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>
			PERIOD_TASK_WATCHDOG_TICKS_NORMAL,
			WCET_TASK_WATCHDOG_US,
			BCET_TASK_WATCHDOG_US,
			&hiwdg);

	taskHeartbeat_constructor(&taskHeartbeat,
 8000d96:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2364      	movs	r3, #100	; 0x64
 8000da4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000da8:	2100      	movs	r1, #0
 8000daa:	f000 f96d 	bl	8001088 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>
			PERIOD_TASK_HEARTBEAT_TICKS_NORMAL,
			WCET_TASK_HEARTBEAT_US,
			BCET_TASK_HEARTBEAT_US,
			&ledHeartbeat);

	taskTimeTriggeredSync_constructor(&taskPeriodicSync,
 8000dae:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000db2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000db6:	9303      	str	r3, [sp, #12]
 8000db8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000dbc:	9302      	str	r3, [sp, #8]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2364      	movs	r3, #100	; 0x64
 8000dc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dcc:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8000dd0:	f000 fb3c 	bl	800144c <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm>
//			PERIOD_TASK_SEND_IMU_UART_TICKS_NORMAL,
//			WCET_TASK_SEND_IMU_UART_US,
//			BCET_TASK_SEND_IMU_UART_US,
//			HANDLE_MSG_CNI_IMU_3, 0x03);

	taskCNIreceiveData_constructor(&taskReceiveIMU1,
 8000dd4:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000dd8:	2301      	movs	r3, #1
 8000dda:	9301      	str	r3, [sp, #4]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	2264      	movs	r2, #100	; 0x64
 8000de4:	2102      	movs	r1, #2
 8000de6:	f000 f927 	bl	8001038 <_Z30taskCNIreceiveData_constructorP20taskCNIreceiveData_tmmmmm>
			PERIOD_TASK_RECEIVE_IMU_1_TICKS_NORMAL,
			WCET_TASK_RECEIVE_IMU_1_US,
			BCET_TASK_RECEIVE_IMU_1_US,
			HANDLE_MSG_CNI_IMU_1);

	taskCNIreceiveData_constructor(&taskReceiveIMU2,
 8000dea:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000dee:	2304      	movs	r3, #4
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	2300      	movs	r3, #0
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2364      	movs	r3, #100	; 0x64
 8000df8:	2264      	movs	r2, #100	; 0x64
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	f000 f91c 	bl	8001038 <_Z30taskCNIreceiveData_constructorP20taskCNIreceiveData_tmmmmm>
			PERIOD_TASK_RECEIVE_IMU_2_TICKS_NORMAL,
			WCET_TASK_RECEIVE_IMU_2_US,
			BCET_TASK_RECEIVE_IMU_2_US,
			HANDLE_MSG_CNI_IMU_2);

	taskCNIreceiveData_constructor(&taskReceiveIMU3,
 8000e00:	f107 0018 	add.w	r0, r7, #24
 8000e04:	2307      	movs	r3, #7
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	2300      	movs	r3, #0
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2364      	movs	r3, #100	; 0x64
 8000e0e:	2264      	movs	r2, #100	; 0x64
 8000e10:	2104      	movs	r1, #4
 8000e12:	f000 f911 	bl	8001038 <_Z30taskCNIreceiveData_constructorP20taskCNIreceiveData_tmmmmm>
			BCET_TASK_RECEIVE_IMU_3_US,
			HANDLE_MSG_CNI_IMU_3);


	// Inicialización del scheduler =================================
	timeTriggeredScheduler_constructor(&htim5, MICROTICKS_IN_MACROTICK);
 8000e16:	f240 31e7 	movw	r1, #999	; 0x3e7
 8000e1a:	4823      	ldr	r0, [pc, #140]	; (8000ea8 <_Z15normal_mode_runv+0x140>)
 8000e1c:	f000 fa38 	bl	8001290 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm>
	timeTriggeredScheduler_init();
 8000e20:	f000 fa60 	bl	80012e4 <_Z27timeTriggeredScheduler_initv>

	CNI_init();
 8000e24:	f7ff fb8a 	bl	800053c <_Z8CNI_initv>

	taskHeartbeat_start(&taskHeartbeat);
 8000e28:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 f945 	bl	80010bc <_Z19taskHeartbeat_startP15taskHeartbeat_t>

	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskHeartbeat);
 8000e32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 fae0 	bl	80013fc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskWatchdog);
 8000e3c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fadb 	bl	80013fc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskPeriodicSync);
 8000e46:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 fad6 	bl	80013fc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskReceiveIMU1);
 8000e50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fad1 	bl	80013fc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskReceiveIMU2);
 8000e5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 facc 	bl	80013fc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskReceiveIMU3);
 8000e64:	f107 0318 	add.w	r3, r7, #24
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 fac7 	bl	80013fc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
//	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskSendIMUUART1);
//	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskSendIMUUART2);
//	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskSendIMUUART3);

	CNI_start();
 8000e6e:	f7ff fb8b 	bl	8000588 <_Z9CNI_startv>

	// Se queda acá esperando hasta que se cumpla la condición para comenzar
	while(!run)
 8000e72:	bf00      	nop
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <_Z15normal_mode_runv+0x144>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	f083 0301 	eor.w	r3, r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f8      	bne.n	8000e74 <_Z15normal_mode_runv+0x10c>
	{
		//__asm__("wfi");
	}

#if IS_MASTER
	CNI_send_msg(HANDLE_MSG_CNI_SYNC);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f7ff fb8c 	bl	80005a0 <_Z12CNI_send_msgm>
#endif
	taskWatchdog_start(&taskWatchdog);
 8000e88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 f95f 	bl	8001150 <_Z18taskWatchdog_startP14taskWatchdog_t>

	timeTriggeredScheduler_start();
 8000e92:	f000 fa3f 	bl	8001314 <_Z28timeTriggeredScheduler_startv>

	while(1)
	{
		timeTriggeredScheduler_dispatch();
 8000e96:	f000 fa49 	bl	800132c <_Z31timeTriggeredScheduler_dispatchv>
 8000e9a:	e7fc      	b.n	8000e96 <_Z15normal_mode_runv+0x12e>
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	20000140 	.word	0x20000140
 8000ea4:	20000168 	.word	0x20000168
 8000ea8:	20000180 	.word	0x20000180
 8000eac:	20000178 	.word	0x20000178

08000eb0 <HAL_GPIO_EXTI_Callback>:
	}
}

#if IS_MASTER
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USER_Btn_Pin)
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ec0:	d102      	bne.n	8000ec8 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	run = true;
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x24>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
    }
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	20000178 	.word	0x20000178

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_MspInit+0x44>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_MspInit+0x44>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_MspInit+0x44>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x44>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 fc12 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <USART3_IRQHandler+0x10>)
 8000f7a:	f003 fd0f 	bl	800499c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000384 	.word	0x20000384

08000f88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000f8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f90:	f001 fc48 	bl	8002824 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <TIM5_IRQHandler+0x10>)
 8000f9e:	f002 fe8e 	bl	8003cbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000180 	.word	0x20000180

08000fac <_Z11system_initv>:
};

static systemMode theSystemMode = FAIL_SILENT;

void system_init(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <_Z11system_initv+0x40>)
 8000fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	bf14      	ite	ne
 8000fbc:	2301      	movne	r3, #1
 8000fbe:	2300      	moveq	r3, #0
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d009      	beq.n	8000fda <_Z11system_initv+0x2e>
	{
		__HAL_RCC_CLEAR_RESET_FLAGS();
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <_Z11system_initv+0x40>)
 8000fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fca:	4a08      	ldr	r2, [pc, #32]	; (8000fec <_Z11system_initv+0x40>)
 8000fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fd0:	6753      	str	r3, [r2, #116]	; 0x74

		theSystemMode = FAIL_SILENT;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <_Z11system_initv+0x44>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		theSystemMode = NORMAL;
	}
}
 8000fd8:	e002      	b.n	8000fe0 <_Z11system_initv+0x34>
		theSystemMode = NORMAL;
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <_Z11system_initv+0x44>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	2000017c 	.word	0x2000017c

08000ff4 <_Z22system_run_active_modev>:

void system_run_active_mode(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	switch(theSystemMode)
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <_Z22system_run_active_modev+0x1c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d102      	bne.n	8001006 <_Z22system_run_active_modev+0x12>
	{
		case NORMAL:
			normal_mode_run();
 8001000:	f7ff feb2 	bl	8000d68 <_Z15normal_mode_runv>
			break;
 8001004:	e002      	b.n	800100c <_Z22system_run_active_modev+0x18>

		default:
		case FAIL_SILENT:
			fail_silent_mode_run();
 8001006:	f7ff fe9d 	bl	8000d44 <_Z20fail_silent_mode_runv>
			break;
 800100a:	bf00      	nop
	}
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000017c 	.word	0x2000017c

08001014 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <SystemInit+0x20>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <SystemInit+0x20>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <_Z30taskCNIreceiveData_constructorP20taskCNIreceiveData_tmmmmm>:

#include "taskCNIreceiveData.h"
#include "CNI.h"

void taskCNIreceiveData_constructor(taskCNIreceiveData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskCNIreceiveData_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	4904      	ldr	r1, [pc, #16]	; (8001068 <_Z30taskCNIreceiveData_constructorP20taskCNIreceiveData_tmmmmm+0x30>)
 8001056:	f000 fa37 	bl	80014c8 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mHandleMsg_ = handleMsg;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	69fa      	ldr	r2, [r7, #28]
 800105e:	615a      	str	r2, [r3, #20]
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	0800106d 	.word	0x0800106d

0800106c <_Z25taskCNIreceiveData_updateP20taskCNIreceiveData_t>:
	//TODO: acá podría uno decirle a la CNI que se va a encargar de enviar el mensaje
	// asociado al handleMsg.
}

void taskCNIreceiveData_update(taskCNIreceiveData_t *me)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	CNI_receive_msg(me->mHandleMsg_);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fb21 	bl	80006c0 <_Z15CNI_receive_msgm>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>:
 */

#include "taskHeartbeat.h"

void taskHeartbeat_constructor(taskHeartbeat_t *me , uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, STM32::gpio *led)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af02      	add	r7, sp, #8
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskHeartbeat_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	4904      	ldr	r1, [pc, #16]	; (80010b8 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE+0x30>)
 80010a6:	f000 fa0f 	bl	80014c8 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mLED_ = led;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	69fa      	ldr	r2, [r7, #28]
 80010ae:	615a      	str	r2, [r3, #20]
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	080010d9 	.word	0x080010d9

080010bc <_Z19taskHeartbeat_startP15taskHeartbeat_t>:
	me->mLED_->write(GPIO_ST::LOW);
	timeTriggeredTask_destructor(&me->super);
}

void taskHeartbeat_start(taskHeartbeat_t *me)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	me->mLED_->write(GPIO_ST::HIGH);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	2101      	movs	r1, #1
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fd5e 	bl	8000b8c <_ZN5STM324gpio5writeE7GPIO_ST>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_Z20taskHeartbeat_updateP15taskHeartbeat_t>:

void taskHeartbeat_update(taskHeartbeat_t *me)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	me->mLED_->toggle();
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fd41 	bl	8000b6c <_ZN5STM324gpio6toggleEv>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>:
 */

#include "taskWatchdog.h"

void taskWatchdog_constructor(taskWatchdog_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, IWDG_HandleTypeDef *hiwdg)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskWatchdog_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	490d      	ldr	r1, [pc, #52]	; (8001148 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x54>)
 8001112:	f000 f9d9 	bl	80014c8 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mHiwdg_ = hiwdg;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	615a      	str	r2, [r3, #20]

	me->mHiwdg_->Instance = IWDG;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x58>)
 8001122:	601a      	str	r2, [r3, #0]
	me->mHiwdg_->Init.Prescaler = IWDG_PRESCALER_4;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
	me->mHiwdg_->Init.Window = 4095;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001134:	60da      	str	r2, [r3, #12]
	me->mHiwdg_->Init.Reload = 9;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	2209      	movs	r2, #9
 800113c:	609a      	str	r2, [r3, #8]
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	0800116b 	.word	0x0800116b
 800114c:	40003000 	.word	0x40003000

08001150 <_Z18taskWatchdog_startP14taskWatchdog_t>:
{
	timeTriggeredTask_destructor(&me->super);
}

void taskWatchdog_start(taskWatchdog_t *me)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Init(me->mHiwdg_);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fb79 	bl	8002854 <HAL_IWDG_Init>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <_Z19taskWatchdog_updateP14taskWatchdog_t>:

void taskWatchdog_update(taskWatchdog_t *me)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(me->mHiwdg_);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	4618      	mov	r0, r3
 8001178:	f001 fbbb 	bl	80028f2 <HAL_IWDG_Refresh>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_TIM5_Init+0x94>)
 80011a4:	4a1d      	ldr	r2, [pc, #116]	; (800121c <MX_TIM5_Init+0x98>)
 80011a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <MX_TIM5_Init+0x94>)
 80011aa:	2247      	movs	r2, #71	; 0x47
 80011ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_TIM5_Init+0x94>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <MX_TIM5_Init+0x94>)
 80011b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <MX_TIM5_Init+0x94>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_TIM5_Init+0x94>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011c8:	4813      	ldr	r0, [pc, #76]	; (8001218 <MX_TIM5_Init+0x94>)
 80011ca:	f002 fc6d 	bl	8003aa8 <HAL_TIM_Base_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80011d4:	f7ff fdb0 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4619      	mov	r1, r3
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <MX_TIM5_Init+0x94>)
 80011e6:	f002 feab 	bl	8003f40 <HAL_TIM_ConfigClockSource>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80011f0:	f7ff fda2 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4619      	mov	r1, r3
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_TIM5_Init+0x94>)
 8001202:	f003 fab7 	bl	8004774 <HAL_TIMEx_MasterConfigSynchronization>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800120c:	f7ff fd94 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000180 	.word	0x20000180
 800121c:	40000c00 	.word	0x40000c00

08001220 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <HAL_TIM_Base_MspInit+0x44>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d113      	bne.n	800125a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_TIM_Base_MspInit+0x48>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <HAL_TIM_Base_MspInit+0x48>)
 8001238:	f043 0308 	orr.w	r3, r3, #8
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_TIM_Base_MspInit+0x48>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	2032      	movs	r0, #50	; 0x32
 8001250:	f001 f83f 	bl	80022d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001254:	2032      	movs	r0, #50	; 0x32
 8001256:	f001 f858 	bl	800230a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40000c00 	.word	0x40000c00
 8001268:	40023800 	.word	0x40023800

0800126c <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef>:
#include "CNI.h"

static timeTriggeredScheduler_t _instance;

static void timeTriggeredScheduler_tick(TIM_HandleTypeDef *htim)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	_instance.mTicks_++;
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef+0x20>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	3301      	adds	r3, #1
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef+0x20>)
 800127c:	6053      	str	r3, [r2, #4]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	2000023c 	.word	0x2000023c

08001290 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm>:

void timeTriggeredScheduler_constructor(TIM_HandleTypeDef *timer, uint32_t macroTick)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
	uint32_t i;

	_instance.mTimer_ = timer;
 800129a:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6013      	str	r3, [r2, #0]

	for(i = 0; i < MAX_NUM_TASKS ; i++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	e008      	b.n	80012b8 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x28>
	{
		_instance.mTaskList_[i] = 0;
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3302      	adds	r3, #2
 80012ac:	2100      	movs	r1, #0
 80012ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i = 0; i < MAX_NUM_TASKS ; i++)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	3301      	adds	r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b09      	cmp	r3, #9
 80012bc:	d9f3      	bls.n	80012a6 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x16>
	}

	_instance.mTicks_ = 0;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
	_instance.mMacroTick_ = macroTick;
 80012c4:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
	_instance.mSyncExecuted_ = 0;
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	2000023c 	.word	0x2000023c

080012e4 <_Z27timeTriggeredScheduler_initv>:

void timeTriggeredScheduler_init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(_instance.mTimer_);
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <_Z27timeTriggeredScheduler_initv+0x28>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 fcb7 	bl	8003c60 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_RegisterCallback(_instance.mTimer_, HAL_TIM_PERIOD_ELAPSED_CB_ID, timeTriggeredScheduler_tick);
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <_Z27timeTriggeredScheduler_initv+0x28>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a06      	ldr	r2, [pc, #24]	; (8001310 <_Z27timeTriggeredScheduler_initv+0x2c>)
 80012f8:	210e      	movs	r1, #14
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 ff4e 	bl	800419c <HAL_TIM_RegisterCallback>

	_instance.mSyncExecuted_ = 0;
 8001300:	4b02      	ldr	r3, [pc, #8]	; (800130c <_Z27timeTriggeredScheduler_initv+0x28>)
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000023c 	.word	0x2000023c
 8001310:	0800126d 	.word	0x0800126d

08001314 <_Z28timeTriggeredScheduler_startv>:

void timeTriggeredScheduler_start(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(_instance.mTimer_);
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <_Z28timeTriggeredScheduler_startv+0x14>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f002 fc27 	bl	8003b70 <HAL_TIM_Base_Start_IT>
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000023c 	.word	0x2000023c

0800132c <_Z31timeTriggeredScheduler_dispatchv>:
{
	HAL_TIM_Base_Stop_IT(_instance.mTimer_);
}

void timeTriggeredScheduler_dispatch(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
	uint8_t updateRequired = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8001336:	b672      	cpsid	i
}
 8001338:	bf00      	nop
	uint32_t i;
	timeTriggeredTask_t *task;

	__disable_irq();
	if(_instance.mTicks_ > 0)
 800133a:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	bf14      	ite	ne
 8001342:	2301      	movne	r3, #1
 8001344:	2300      	moveq	r3, #0
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <_Z31timeTriggeredScheduler_dispatchv+0x2e>
	{
		_instance.mTicks_--;
 800134c:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	3b01      	subs	r3, #1
 8001352:	4a29      	ldr	r2, [pc, #164]	; (80013f8 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 8001354:	6053      	str	r3, [r2, #4]
		updateRequired = 1;
 8001356:	2301      	movs	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800135a:	b662      	cpsie	i
}
 800135c:	bf00      	nop
#endif
	}

	__enable_irq();

	while(updateRequired)
 800135e:	e043      	b.n	80013e8 <_Z31timeTriggeredScheduler_dispatchv+0xbc>
	{
		for(i = 0; i < MAX_NUM_TASKS; i++)
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	e026      	b.n	80013b4 <_Z31timeTriggeredScheduler_dispatchv+0x88>
		{
			if((task = _instance.mTaskList_[i]))
 8001366:	4a24      	ldr	r2, [pc, #144]	; (80013f8 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	3302      	adds	r3, #2
 800136c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf14      	ite	ne
 8001378:	2301      	movne	r3, #1
 800137a:	2300      	moveq	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d015      	beq.n	80013ae <_Z31timeTriggeredScheduler_dispatchv+0x82>
			{
				//if( (--(me->mTaskList_[i]->mDelayTicks_)) == 0 )
				if( (--(task->mDelayTicks_)) == 0 )
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	1e5a      	subs	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	bf0c      	ite	eq
 8001394:	2301      	moveq	r3, #1
 8001396:	2300      	movne	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <_Z31timeTriggeredScheduler_dispatchv+0x82>
				{
					//timeTriggeredTask_update((timeTriggeredTask_t*)(me->mTaskList_[i]));
					(*(task->mTaskHandler_))(task);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	4798      	blx	r3
					//me->mTaskList_[i]->mDelayTicks_ = me->mTaskList_[i]->mPeriodTicks_;
					task->mDelayTicks_ = task->mPeriodTicks_;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	605a      	str	r2, [r3, #4]
		for(i = 0; i < MAX_NUM_TASKS; i++)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3301      	adds	r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2b09      	cmp	r3, #9
 80013b8:	d9d5      	bls.n	8001366 <_Z31timeTriggeredScheduler_dispatchv+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 80013ba:	b672      	cpsid	i
}
 80013bc:	bf00      	nop
			}
		}

		__disable_irq();

		if(_instance.mTicks_ > 0)
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	bf14      	ite	ne
 80013c6:	2301      	movne	r3, #1
 80013c8:	2300      	moveq	r3, #0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d007      	beq.n	80013e0 <_Z31timeTriggeredScheduler_dispatchv+0xb4>
		{
			_instance.mTicks_--;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 80013d8:	6053      	str	r3, [r2, #4]
			updateRequired = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	e001      	b.n	80013e4 <_Z31timeTriggeredScheduler_dispatchv+0xb8>
		}
		else
		{
			updateRequired = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80013e4:	b662      	cpsie	i
}
 80013e6:	bf00      	nop
	while(updateRequired)
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1b8      	bne.n	8001360 <_Z31timeTriggeredScheduler_dispatchv+0x34>
		}

		__enable_irq();
	}
	__asm__("wfi");
 80013ee:	bf30      	wfi
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2000023c 	.word	0x2000023c

080013fc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>:

TTschStatus_t timeTriggeredScheduler_add_task(timeTriggeredTask_t *task)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]

	while( (_instance.mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 8001408:	e002      	b.n	8001410 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x14>
	{
		i++;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3301      	adds	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
	while( (_instance.mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x4c>)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x28>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2b09      	cmp	r3, #9
 8001422:	d9f2      	bls.n	800140a <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0xe>
	}

	if(i == MAX_NUM_TASKS)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2b0a      	cmp	r3, #10
 8001428:	d101      	bne.n	800142e <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x32>
	{
		return TTsch_ERROR_MAX_TASKS_REACHED;
 800142a:	2301      	movs	r3, #1
 800142c:	e006      	b.n	800143c <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x40>
	}

	_instance.mTaskList_[i] = task;
 800142e:	4906      	ldr	r1, [pc, #24]	; (8001448 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x4c>)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	3302      	adds	r3, #2
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return TTsch_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	2000023c 	.word	0x2000023c

0800144c <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm>:

void taskTimeTriggeredSync_constructor(taskTimeTriggeredSync_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg, uint32_t expectedTimestamp, uint32_t delaySync)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af02      	add	r7, sp, #8
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskTimeTriggeredSync_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	4907      	ldr	r1, [pc, #28]	; (8001488 <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm+0x3c>)
 800146a:	f000 f82d 	bl	80014c8 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mHandleMsg_ = handleMsg;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	615a      	str	r2, [r3, #20]
	me->mExpectedTimestamp_ = expectedTimestamp;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6a3a      	ldr	r2, [r7, #32]
 8001478:	619a      	str	r2, [r3, #24]
	me->mDelaySync_ = delaySync;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800147e:	61da      	str	r2, [r3, #28]
}
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	0800148d 	.word	0x0800148d

0800148c <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t>:
{
	// Por ahora no hace nada
}

void taskTimeTriggeredSync_update(taskTimeTriggeredSync_t *me)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
		// Le aviso al scheduler que en el próximo tick, vuelva a dejar el timer como estaba antes
		_instance.mSyncExecuted_ = 1;
	}
#else
	// Espero un rato
	while(__HAL_TIM_GET_COUNTER(_instance.mTimer_) < me->mDelaySync_);
 8001494:	bf00      	nop
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x38>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	bf34      	ite	cc
 80014a6:	2301      	movcc	r3, #1
 80014a8:	2300      	movcs	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f2      	bne.n	8001496 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xa>
	// Envío el mensaje de sync
	CNI_send_msg(me->mHandleMsg_);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f873 	bl	80005a0 <_Z12CNI_send_msgm>
#endif
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000023c 	.word	0x2000023c

080014c8 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>:
 */

#include "timeTriggeredTask.h"

void timeTriggeredTask_constructor(timeTriggeredTask_t *me, taskHandler_t taskHandler, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	603b      	str	r3, [r7, #0]
	me->mTaskHandler_ = taskHandler;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	601a      	str	r2, [r3, #0]

	me->mDelayTicks_ = delayTicks + 1;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	605a      	str	r2, [r3, #4]
	me->mPeriodTicks_ = periodTicks;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	609a      	str	r2, [r3, #8]
	me->mWcetMicroSeconds_ = wcetMicroSeconds;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	60da      	str	r2, [r3, #12]
	me->mBcetMicroSeconds_ = bcetMicroSeconds;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	611a      	str	r2, [r3, #16]
}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_ZN19timeTriggeredUART_tC1Ev>:
typedef struct
{
	UART_HandleTypeDef *mHuart_;
	circ_buffer<uint8_t, SIZE_BUFFER_UART> mBuffer_;
	uint8_t mBytesToSend_;
} timeTriggeredUART_t;
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3304      	adds	r3, #4
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f805 	bl	800151e <_ZN11circ_bufferIhLm256EtEC1Ev>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_ZN11circ_bufferIhLm256EtEC1Ev>:
                bool mEmpty_;

        };

        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
        {
            mFull_ = false;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            mEmpty_ = true;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
            mHead_ = 0;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
            mTail_ = 0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
            mSize_ = 0;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	801a      	strh	r2, [r3, #0]
            
        }
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <_Z41__static_initialization_and_destruction_0ii>:
	_instance.mBuffer_.copy_to(buffer, numElementsInBuffer);

	HAL_UART_Transmit(_instance.mHuart_,buffer, numElementsInBuffer, TIMEOUT_UART_SEND_MS);

	return TTUART_OK;
}
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d107      	bne.n	800157c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001572:	4293      	cmp	r3, r2
 8001574:	d102      	bne.n	800157c <_Z41__static_initialization_and_destruction_0ii+0x20>
static timeTriggeredUART_t _instance;
 8001576:	4803      	ldr	r0, [pc, #12]	; (8001584 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001578:	f7ff ffc3 	bl	8001502 <_ZN19timeTriggeredUART_tC1Ev>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000274 	.word	0x20000274

08001588 <_GLOBAL__sub_I__Z29timeTriggeredUART_constructorP20__UART_HandleTypeDefh>:
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
 800158c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001590:	2001      	movs	r0, #1
 8001592:	f7ff ffe3 	bl	800155c <_Z41__static_initialization_and_destruction_0ii>
 8001596:	bd80      	pop	{r7, pc}

08001598 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 800159e:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <MX_USART3_UART_Init+0x5c>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015dc:	f003 f980 	bl	80048e0 <HAL_UART_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015e6:	f7ff fba7 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000384 	.word	0x20000384
 80015f4:	40004800 	.word	0x40004800

080015f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0aa      	sub	sp, #168	; 0xa8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	2284      	movs	r2, #132	; 0x84
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f004 f9e2 	bl	80059e2 <memset>
  if(uartHandle->Instance==USART3)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a26      	ldr	r2, [pc, #152]	; (80016bc <HAL_UART_MspInit+0xc4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d144      	bne.n	80016b2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800162e:	2300      	movs	r3, #0
 8001630:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	4618      	mov	r0, r3
 8001638:	f001 fe46 	bl	80032c8 <HAL_RCCEx_PeriphCLKConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001642:	f7ff fb79 	bl	8000d38 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001646:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <HAL_UART_MspInit+0xc8>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_UART_MspInit+0xc8>)
 800164c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_UART_MspInit+0xc8>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_UART_MspInit+0xc8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <HAL_UART_MspInit+0xc8>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_UART_MspInit+0xc8>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001676:	f44f 7340 	mov.w	r3, #768	; 0x300
 800167a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001684:	2301      	movs	r3, #1
 8001686:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001690:	2307      	movs	r3, #7
 8001692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001696:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800169a:	4619      	mov	r1, r3
 800169c:	4809      	ldr	r0, [pc, #36]	; (80016c4 <HAL_UART_MspInit+0xcc>)
 800169e:	f000 fee1 	bl	8002464 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	2027      	movs	r0, #39	; 0x27
 80016a8:	f000 fe13 	bl	80022d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016ac:	2027      	movs	r0, #39	; 0x27
 80016ae:	f000 fe2c 	bl	800230a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016b2:	bf00      	nop
 80016b4:	37a8      	adds	r7, #168	; 0xa8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40004800 	.word	0x40004800
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020c00 	.word	0x40020c00

080016c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001700 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ce:	490e      	ldr	r1, [pc, #56]	; (8001708 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016d0:	4a0e      	ldr	r2, [pc, #56]	; (800170c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d4:	e002      	b.n	80016dc <LoopCopyDataInit>

080016d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016da:	3304      	adds	r3, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e0:	d3f9      	bcc.n	80016d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e4:	4c0b      	ldr	r4, [pc, #44]	; (8001714 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e8:	e001      	b.n	80016ee <LoopFillZerobss>

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ec:	3204      	adds	r2, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016f2:	f7ff fc8f 	bl	8001014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f6:	f004 f97d 	bl	80059f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fa:	f7ff fa96 	bl	8000c2a <main>
  bx  lr    
 80016fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001700:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001708:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 800170c:	08005a80 	.word	0x08005a80
  ldr r2, =_sbss
 8001710:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001714:	2000043c 	.word	0x2000043c

08001718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC_IRQHandler>

0800171a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171e:	2003      	movs	r0, #3
 8001720:	f000 fdcc 	bl	80022bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001724:	2000      	movs	r0, #0
 8001726:	f000 f805 	bl	8001734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800172a:	f7ff fbd5 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x54>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x58>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fde7 	bl	8002326 <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001770:	f000 fdaf 	bl	80022d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_InitTick+0x5c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200000f8 	.word	0x200000f8
 800178c:	20000100 	.word	0x20000100
 8001790:	200000fc 	.word	0x200000fc

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000100 	.word	0x20000100
 80017b8:	20000438 	.word	0x20000438

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000438 	.word	0x20000438

080017d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e0ed      	b.n	80019c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d102      	bne.n	80017f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff f832 	bl	800085c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001808:	f7ff ffd8 	bl	80017bc <HAL_GetTick>
 800180c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800180e:	e012      	b.n	8001836 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001810:	f7ff ffd4 	bl	80017bc <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b0a      	cmp	r3, #10
 800181c:	d90b      	bls.n	8001836 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2205      	movs	r2, #5
 800182e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e0c5      	b.n	80019c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0e5      	beq.n	8001810 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0202 	bic.w	r2, r2, #2
 8001852:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001854:	f7ff ffb2 	bl	80017bc <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800185a:	e012      	b.n	8001882 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800185c:	f7ff ffae 	bl	80017bc <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b0a      	cmp	r3, #10
 8001868:	d90b      	bls.n	8001882 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2205      	movs	r2, #5
 800187a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e09f      	b.n	80019c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1e5      	bne.n	800185c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7e1b      	ldrb	r3, [r3, #24]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d108      	bne.n	80018aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e007      	b.n	80018ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7e5b      	ldrb	r3, [r3, #25]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d108      	bne.n	80018d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e007      	b.n	80018e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7e9b      	ldrb	r3, [r3, #26]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d108      	bne.n	80018fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0220 	orr.w	r2, r2, #32
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e007      	b.n	800190e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0220 	bic.w	r2, r2, #32
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7edb      	ldrb	r3, [r3, #27]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d108      	bne.n	8001928 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0210 	bic.w	r2, r2, #16
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	e007      	b.n	8001938 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0210 	orr.w	r2, r2, #16
 8001936:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7f1b      	ldrb	r3, [r3, #28]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d108      	bne.n	8001952 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0208 	orr.w	r2, r2, #8
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	e007      	b.n	8001962 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0208 	bic.w	r2, r2, #8
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7f5b      	ldrb	r3, [r3, #29]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d108      	bne.n	800197c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 0204 	orr.w	r2, r2, #4
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	e007      	b.n	800198c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0204 	bic.w	r2, r2, #4
 800198a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	ea42 0103 	orr.w	r1, r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	1e5a      	subs	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80019e4:	7cfb      	ldrb	r3, [r7, #19]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d003      	beq.n	80019f2 <HAL_CAN_ConfigFilter+0x26>
 80019ea:	7cfb      	ldrb	r3, [r7, #19]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	f040 80be 	bne.w	8001b6e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80019f2:	4b65      	ldr	r3, [pc, #404]	; (8001b88 <HAL_CAN_ConfigFilter+0x1bc>)
 80019f4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019fc:	f043 0201 	orr.w	r2, r3, #1
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	431a      	orrs	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f003 031f 	and.w	r3, r3, #31
 8001a32:	2201      	movs	r2, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	401a      	ands	r2, r3
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d123      	bne.n	8001a9c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a76:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3248      	adds	r2, #72	; 0x48
 8001a7c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a90:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a92:	6979      	ldr	r1, [r7, #20]
 8001a94:	3348      	adds	r3, #72	; 0x48
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d122      	bne.n	8001aea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ac4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3248      	adds	r2, #72	; 0x48
 8001aca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ade:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ae0:	6979      	ldr	r1, [r7, #20]
 8001ae2:	3348      	adds	r3, #72	; 0x48
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	401a      	ands	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b04:	e007      	b.n	8001b16 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	401a      	ands	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b30:	e007      	b.n	8001b42 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d107      	bne.n	8001b5a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b60:	f023 0201 	bic.w	r2, r3, #1
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e006      	b.n	8001b7c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
  }
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40006400 	.word	0x40006400

08001b8c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d12e      	bne.n	8001bfe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bb8:	f7ff fe00 	bl	80017bc <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bbe:	e012      	b.n	8001be6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bc0:	f7ff fdfc 	bl	80017bc <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b0a      	cmp	r3, #10
 8001bcc:	d90b      	bls.n	8001be6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2205      	movs	r2, #5
 8001bde:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e012      	b.n	8001c0c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1e5      	bne.n	8001bc0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e006      	b.n	8001c0c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
  }
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c28:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c32:	7ffb      	ldrb	r3, [r7, #31]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d003      	beq.n	8001c40 <HAL_CAN_AddTxMessage+0x2c>
 8001c38:	7ffb      	ldrb	r3, [r7, #31]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	f040 80ad 	bne.w	8001d9a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10a      	bne.n	8001c60 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8095 	beq.w	8001d8a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	0e1b      	lsrs	r3, r3, #24
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10d      	bne.n	8001c98 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c86:	68f9      	ldr	r1, [r7, #12]
 8001c88:	6809      	ldr	r1, [r1, #0]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3318      	adds	r3, #24
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	440b      	add	r3, r1
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e00f      	b.n	8001cb8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ca2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ca8:	68f9      	ldr	r1, [r7, #12]
 8001caa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001cac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3318      	adds	r3, #24
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	440b      	add	r3, r1
 8001cb6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6819      	ldr	r1, [r3, #0]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3318      	adds	r3, #24
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3304      	adds	r3, #4
 8001cca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	7d1b      	ldrb	r3, [r3, #20]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d111      	bne.n	8001cf8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	3318      	adds	r3, #24
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	4413      	add	r3, r2
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	6811      	ldr	r1, [r2, #0]
 8001ce8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3318      	adds	r3, #24
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3307      	adds	r3, #7
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	061a      	lsls	r2, r3, #24
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3306      	adds	r3, #6
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	041b      	lsls	r3, r3, #16
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3305      	adds	r3, #5
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	4313      	orrs	r3, r2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	3204      	adds	r2, #4
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	6811      	ldr	r1, [r2, #0]
 8001d20:	ea43 0200 	orr.w	r2, r3, r0
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	440b      	add	r3, r1
 8001d2a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001d2e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3303      	adds	r3, #3
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	061a      	lsls	r2, r3, #24
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	041b      	lsls	r3, r3, #16
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3301      	adds	r3, #1
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	7812      	ldrb	r2, [r2, #0]
 8001d50:	4610      	mov	r0, r2
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	6811      	ldr	r1, [r2, #0]
 8001d56:	ea43 0200 	orr.w	r2, r3, r0
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	440b      	add	r3, r1
 8001d60:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001d64:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3318      	adds	r3, #24
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	6811      	ldr	r1, [r2, #0]
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3318      	adds	r3, #24
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	440b      	add	r3, r1
 8001d84:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e00e      	b.n	8001da8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e006      	b.n	8001da8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
  }
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3724      	adds	r7, #36	; 0x24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d002      	beq.n	8001dd2 <HAL_CAN_AbortTxRequest+0x1e>
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d128      	bne.n	8001e24 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dea:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e04:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e1e:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e006      	b.n	8001e32 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
  }
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b085      	sub	sp, #20
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e50:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e52:	7afb      	ldrb	r3, [r7, #11]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d002      	beq.n	8001e5e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001e58:	7afb      	ldrb	r3, [r7, #11]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d11d      	bne.n	8001e9a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	3301      	adds	r3, #1
 8001e84:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3301      	adds	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ebc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d003      	beq.n	8001ecc <HAL_CAN_GetRxMessage+0x24>
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	f040 80f3 	bne.w	80020b2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d116      	bne.n	8001f0e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0e7      	b.n	80020c0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d107      	bne.n	8001f0e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0d8      	b.n	80020c0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	331b      	adds	r3, #27
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	4413      	add	r3, r2
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0204 	and.w	r2, r3, #4
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10c      	bne.n	8001f46 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	331b      	adds	r3, #27
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	0d5b      	lsrs	r3, r3, #21
 8001f3c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e00b      	b.n	8001f5e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	331b      	adds	r3, #27
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	4413      	add	r3, r2
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	331b      	adds	r3, #27
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	4413      	add	r3, r2
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0202 	and.w	r2, r3, #2
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	331b      	adds	r3, #27
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	4413      	add	r3, r2
 8001f80:	3304      	adds	r3, #4
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 020f 	and.w	r2, r3, #15
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	331b      	adds	r3, #27
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	331b      	adds	r3, #27
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	4413      	add	r3, r2
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0c1b      	lsrs	r3, r3, #16
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	0a1a      	lsrs	r2, r3, #8
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0c1a      	lsrs	r2, r3, #16
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	3302      	adds	r3, #2
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	4413      	add	r3, r2
 8002010:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	0e1a      	lsrs	r2, r3, #24
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	3303      	adds	r3, #3
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	4413      	add	r3, r2
 800202a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	3304      	adds	r3, #4
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	4413      	add	r3, r2
 8002042:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0a1a      	lsrs	r2, r3, #8
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	3305      	adds	r3, #5
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	4413      	add	r3, r2
 800205c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	0c1a      	lsrs	r2, r3, #16
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	3306      	adds	r3, #6
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	4413      	add	r3, r2
 8002076:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	0e1a      	lsrs	r2, r3, #24
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	3307      	adds	r3, #7
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d108      	bne.n	800209e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0220 	orr.w	r2, r2, #32
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	e007      	b.n	80020ae <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0220 	orr.w	r2, r2, #32
 80020ac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e006      	b.n	80020c0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
  }
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020e2:	7afb      	ldrb	r3, [r7, #11]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d002      	beq.n	80020ee <HAL_CAN_GetRxFifoFillLevel+0x22>
 80020e8:	7afb      	ldrb	r3, [r7, #11]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d10f      	bne.n	800210e <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d106      	bne.n	8002102 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	e005      	b.n	800210e <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800210e:	68fb      	ldr	r3, [r7, #12]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <__NVIC_SetPriorityGrouping+0x40>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002138:	4013      	ands	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 8002146:	4313      	orrs	r3, r2
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <__NVIC_SetPriorityGrouping+0x40>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00
 8002160:	05fa0000 	.word	0x05fa0000

08002164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <__NVIC_GetPriorityGrouping+0x18>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	f003 0307 	and.w	r3, r3, #7
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	2b00      	cmp	r3, #0
 8002190:	db0b      	blt.n	80021aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	4907      	ldr	r1, [pc, #28]	; (80021b8 <__NVIC_EnableIRQ+0x38>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	2001      	movs	r0, #1
 80021a2:	fa00 f202 	lsl.w	r2, r0, r2
 80021a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000e100 	.word	0xe000e100

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	db0a      	blt.n	80021e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	490c      	ldr	r1, [pc, #48]	; (8002208 <__NVIC_SetPriority+0x4c>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	440b      	add	r3, r1
 80021e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e4:	e00a      	b.n	80021fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4908      	ldr	r1, [pc, #32]	; (800220c <__NVIC_SetPriority+0x50>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3b04      	subs	r3, #4
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	440b      	add	r3, r1
 80021fa:	761a      	strb	r2, [r3, #24]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000e100 	.word	0xe000e100
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f1c3 0307 	rsb	r3, r3, #7
 800222a:	2b04      	cmp	r3, #4
 800222c:	bf28      	it	cs
 800222e:	2304      	movcs	r3, #4
 8002230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3304      	adds	r3, #4
 8002236:	2b06      	cmp	r3, #6
 8002238:	d902      	bls.n	8002240 <NVIC_EncodePriority+0x30>
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3b03      	subs	r3, #3
 800223e:	e000      	b.n	8002242 <NVIC_EncodePriority+0x32>
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	401a      	ands	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43d9      	mvns	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	4313      	orrs	r3, r2
         );
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	; 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002288:	d301      	bcc.n	800228e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228a:	2301      	movs	r3, #1
 800228c:	e00f      	b.n	80022ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <SysTick_Config+0x40>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002296:	210f      	movs	r1, #15
 8002298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800229c:	f7ff ff8e 	bl	80021bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <SysTick_Config+0x40>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <SysTick_Config+0x40>)
 80022a8:	2207      	movs	r2, #7
 80022aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	e000e010 	.word	0xe000e010

080022bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ff29 	bl	800211c <__NVIC_SetPriorityGrouping>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e4:	f7ff ff3e 	bl	8002164 <__NVIC_GetPriorityGrouping>
 80022e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	6978      	ldr	r0, [r7, #20]
 80022f0:	f7ff ff8e 	bl	8002210 <NVIC_EncodePriority>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff5d 	bl	80021bc <__NVIC_SetPriority>
}
 8002302:	bf00      	nop
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff31 	bl	8002180 <__NVIC_EnableIRQ>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ffa2 	bl	8002278 <SysTick_Config>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800234c:	f7ff fa36 	bl	80017bc <HAL_GetTick>
 8002350:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d008      	beq.n	8002370 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2280      	movs	r2, #128	; 0x80
 8002362:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e052      	b.n	8002416 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0216 	bic.w	r2, r2, #22
 800237e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800238e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	2b00      	cmp	r3, #0
 8002396:	d103      	bne.n	80023a0 <HAL_DMA_Abort+0x62>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0208 	bic.w	r2, r2, #8
 80023ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c0:	e013      	b.n	80023ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023c2:	f7ff f9fb 	bl	80017bc <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d90c      	bls.n	80023ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2203      	movs	r2, #3
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e015      	b.n	8002416 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1e4      	bne.n	80023c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	223f      	movs	r2, #63	; 0x3f
 80023fe:	409a      	lsls	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d004      	beq.n	800243c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e00c      	b.n	8002456 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2205      	movs	r2, #5
 8002440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	e175      	b.n	8002770 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002484:	2201      	movs	r2, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	429a      	cmp	r2, r3
 800249e:	f040 8164 	bne.w	800276a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d005      	beq.n	80024ba <HAL_GPIO_Init+0x56>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d130      	bne.n	800251c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	2203      	movs	r2, #3
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f0:	2201      	movs	r2, #1
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 0201 	and.w	r2, r3, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b03      	cmp	r3, #3
 8002526:	d017      	beq.n	8002558 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d123      	bne.n	80025ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	08da      	lsrs	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3208      	adds	r2, #8
 800256c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	220f      	movs	r2, #15
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3208      	adds	r2, #8
 80025a6:	69b9      	ldr	r1, [r7, #24]
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80be 	beq.w	800276a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	4b66      	ldr	r3, [pc, #408]	; (8002788 <HAL_GPIO_Init+0x324>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	4a65      	ldr	r2, [pc, #404]	; (8002788 <HAL_GPIO_Init+0x324>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f8:	6453      	str	r3, [r2, #68]	; 0x44
 80025fa:	4b63      	ldr	r3, [pc, #396]	; (8002788 <HAL_GPIO_Init+0x324>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002606:	4a61      	ldr	r2, [pc, #388]	; (800278c <HAL_GPIO_Init+0x328>)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	220f      	movs	r2, #15
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a58      	ldr	r2, [pc, #352]	; (8002790 <HAL_GPIO_Init+0x32c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d037      	beq.n	80026a2 <HAL_GPIO_Init+0x23e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a57      	ldr	r2, [pc, #348]	; (8002794 <HAL_GPIO_Init+0x330>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d031      	beq.n	800269e <HAL_GPIO_Init+0x23a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a56      	ldr	r2, [pc, #344]	; (8002798 <HAL_GPIO_Init+0x334>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d02b      	beq.n	800269a <HAL_GPIO_Init+0x236>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a55      	ldr	r2, [pc, #340]	; (800279c <HAL_GPIO_Init+0x338>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d025      	beq.n	8002696 <HAL_GPIO_Init+0x232>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a54      	ldr	r2, [pc, #336]	; (80027a0 <HAL_GPIO_Init+0x33c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d01f      	beq.n	8002692 <HAL_GPIO_Init+0x22e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a53      	ldr	r2, [pc, #332]	; (80027a4 <HAL_GPIO_Init+0x340>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d019      	beq.n	800268e <HAL_GPIO_Init+0x22a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a52      	ldr	r2, [pc, #328]	; (80027a8 <HAL_GPIO_Init+0x344>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d013      	beq.n	800268a <HAL_GPIO_Init+0x226>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a51      	ldr	r2, [pc, #324]	; (80027ac <HAL_GPIO_Init+0x348>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00d      	beq.n	8002686 <HAL_GPIO_Init+0x222>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a50      	ldr	r2, [pc, #320]	; (80027b0 <HAL_GPIO_Init+0x34c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <HAL_GPIO_Init+0x21e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4f      	ldr	r2, [pc, #316]	; (80027b4 <HAL_GPIO_Init+0x350>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d101      	bne.n	800267e <HAL_GPIO_Init+0x21a>
 800267a:	2309      	movs	r3, #9
 800267c:	e012      	b.n	80026a4 <HAL_GPIO_Init+0x240>
 800267e:	230a      	movs	r3, #10
 8002680:	e010      	b.n	80026a4 <HAL_GPIO_Init+0x240>
 8002682:	2308      	movs	r3, #8
 8002684:	e00e      	b.n	80026a4 <HAL_GPIO_Init+0x240>
 8002686:	2307      	movs	r3, #7
 8002688:	e00c      	b.n	80026a4 <HAL_GPIO_Init+0x240>
 800268a:	2306      	movs	r3, #6
 800268c:	e00a      	b.n	80026a4 <HAL_GPIO_Init+0x240>
 800268e:	2305      	movs	r3, #5
 8002690:	e008      	b.n	80026a4 <HAL_GPIO_Init+0x240>
 8002692:	2304      	movs	r3, #4
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x240>
 8002696:	2303      	movs	r3, #3
 8002698:	e004      	b.n	80026a4 <HAL_GPIO_Init+0x240>
 800269a:	2302      	movs	r3, #2
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_Init+0x240>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_GPIO_Init+0x240>
 80026a2:	2300      	movs	r3, #0
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	f002 0203 	and.w	r2, r2, #3
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	4093      	lsls	r3, r2
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026b4:	4935      	ldr	r1, [pc, #212]	; (800278c <HAL_GPIO_Init+0x328>)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3302      	adds	r3, #2
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026c2:	4b3d      	ldr	r3, [pc, #244]	; (80027b8 <HAL_GPIO_Init+0x354>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026e6:	4a34      	ldr	r2, [pc, #208]	; (80027b8 <HAL_GPIO_Init+0x354>)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ec:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_GPIO_Init+0x354>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002710:	4a29      	ldr	r2, [pc, #164]	; (80027b8 <HAL_GPIO_Init+0x354>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002716:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <HAL_GPIO_Init+0x354>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800273a:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <HAL_GPIO_Init+0x354>)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <HAL_GPIO_Init+0x354>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002764:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <HAL_GPIO_Init+0x354>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3301      	adds	r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	2b0f      	cmp	r3, #15
 8002774:	f67f ae86 	bls.w	8002484 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3724      	adds	r7, #36	; 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40013800 	.word	0x40013800
 8002790:	40020000 	.word	0x40020000
 8002794:	40020400 	.word	0x40020400
 8002798:	40020800 	.word	0x40020800
 800279c:	40020c00 	.word	0x40020c00
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40021400 	.word	0x40021400
 80027a8:	40021800 	.word	0x40021800
 80027ac:	40021c00 	.word	0x40021c00
 80027b0:	40022000 	.word	0x40022000
 80027b4:	40022400 	.word	0x40022400
 80027b8:	40013c00 	.word	0x40013c00

080027bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	807b      	strh	r3, [r7, #2]
 80027c8:	4613      	mov	r3, r2
 80027ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027cc:	787b      	ldrb	r3, [r7, #1]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d2:	887a      	ldrh	r2, [r7, #2]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027d8:	e003      	b.n	80027e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027da:	887b      	ldrh	r3, [r7, #2]
 80027dc:	041a      	lsls	r2, r3, #16
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	619a      	str	r2, [r3, #24]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002800:	887a      	ldrh	r2, [r7, #2]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4013      	ands	r3, r2
 8002806:	041a      	lsls	r2, r3, #16
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	43d9      	mvns	r1, r3
 800280c:	887b      	ldrh	r3, [r7, #2]
 800280e:	400b      	ands	r3, r1
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	619a      	str	r2, [r3, #24]
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d006      	beq.n	8002848 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800283a:	4a05      	ldr	r2, [pc, #20]	; (8002850 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fb34 	bl	8000eb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40013c00 	.word	0x40013c00

08002854 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e041      	b.n	80028ea <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800286e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f245 5255 	movw	r2, #21845	; 0x5555
 8002878:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6852      	ldr	r2, [r2, #4]
 8002882:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6892      	ldr	r2, [r2, #8]
 800288c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800288e:	f7fe ff95 	bl	80017bc <HAL_GetTick>
 8002892:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002894:	e00f      	b.n	80028b6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002896:	f7fe ff91 	bl	80017bc <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b31      	cmp	r3, #49	; 0x31
 80028a2:	d908      	bls.n	80028b6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e019      	b.n	80028ea <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1e8      	bne.n	8002896 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d005      	beq.n	80028de <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68d2      	ldr	r2, [r2, #12]
 80028da:	611a      	str	r2, [r3, #16]
 80028dc:	e004      	b.n	80028e8 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80028e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002902:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800291e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002922:	6013      	str	r3, [r2, #0]
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40007000 	.word	0x40007000

08002934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800293c:	2300      	movs	r3, #0
 800293e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e291      	b.n	8002e6e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8087 	beq.w	8002a66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002958:	4b96      	ldr	r3, [pc, #600]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b04      	cmp	r3, #4
 8002962:	d00c      	beq.n	800297e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002964:	4b93      	ldr	r3, [pc, #588]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	2b08      	cmp	r3, #8
 800296e:	d112      	bne.n	8002996 <HAL_RCC_OscConfig+0x62>
 8002970:	4b90      	ldr	r3, [pc, #576]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800297c:	d10b      	bne.n	8002996 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297e:	4b8d      	ldr	r3, [pc, #564]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d06c      	beq.n	8002a64 <HAL_RCC_OscConfig+0x130>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d168      	bne.n	8002a64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e26b      	b.n	8002e6e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x7a>
 80029a0:	4b84      	ldr	r3, [pc, #528]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a83      	ldr	r2, [pc, #524]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	e02e      	b.n	8002a0c <HAL_RCC_OscConfig+0xd8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x9c>
 80029b6:	4b7f      	ldr	r3, [pc, #508]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a7e      	ldr	r2, [pc, #504]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b7c      	ldr	r3, [pc, #496]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a7b      	ldr	r2, [pc, #492]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e01d      	b.n	8002a0c <HAL_RCC_OscConfig+0xd8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0xc0>
 80029da:	4b76      	ldr	r3, [pc, #472]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a75      	ldr	r2, [pc, #468]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b73      	ldr	r3, [pc, #460]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a72      	ldr	r2, [pc, #456]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e00b      	b.n	8002a0c <HAL_RCC_OscConfig+0xd8>
 80029f4:	4b6f      	ldr	r3, [pc, #444]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a6e      	ldr	r2, [pc, #440]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b6c      	ldr	r3, [pc, #432]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a6b      	ldr	r2, [pc, #428]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fed2 	bl	80017bc <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fece 	bl	80017bc <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e21f      	b.n	8002e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	4b61      	ldr	r3, [pc, #388]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0xe8>
 8002a3a:	e014      	b.n	8002a66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe febe 	bl	80017bc <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe feba 	bl	80017bc <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e20b      	b.n	8002e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a56:	4b57      	ldr	r3, [pc, #348]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x110>
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d069      	beq.n	8002b46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a72:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00b      	beq.n	8002a96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7e:	4b4d      	ldr	r3, [pc, #308]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d11c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x190>
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d116      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <HAL_RCC_OscConfig+0x17a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e1df      	b.n	8002e6e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aae:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	493d      	ldr	r1, [pc, #244]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac2:	e040      	b.n	8002b46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d023      	beq.n	8002b14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002acc:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a38      	ldr	r2, [pc, #224]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7fe fe70 	bl	80017bc <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae0:	f7fe fe6c 	bl	80017bc <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e1bd      	b.n	8002e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af2:	4b30      	ldr	r3, [pc, #192]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afe:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4929      	ldr	r1, [pc, #164]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]
 8002b12:	e018      	b.n	8002b46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b14:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a26      	ldr	r2, [pc, #152]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe fe4c 	bl	80017bc <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b28:	f7fe fe48 	bl	80017bc <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e199      	b.n	8002e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3a:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d038      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d019      	beq.n	8002b8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5e:	4a15      	ldr	r2, [pc, #84]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fe fe29 	bl	80017bc <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6e:	f7fe fe25 	bl	80017bc <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e176      	b.n	8002e6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x23a>
 8002b8c:	e01a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b92:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9a:	f7fe fe0f 	bl	80017bc <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba0:	e00a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba2:	f7fe fe0b 	bl	80017bc <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d903      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e15c      	b.n	8002e6e <HAL_RCC_OscConfig+0x53a>
 8002bb4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb8:	4b91      	ldr	r3, [pc, #580]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ee      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80a4 	beq.w	8002d1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd2:	4b8b      	ldr	r3, [pc, #556]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10d      	bne.n	8002bfa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	4b88      	ldr	r3, [pc, #544]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	4a87      	ldr	r2, [pc, #540]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bea:	4b85      	ldr	r3, [pc, #532]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfa:	4b82      	ldr	r3, [pc, #520]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d118      	bne.n	8002c38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c06:	4b7f      	ldr	r3, [pc, #508]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a7e      	ldr	r2, [pc, #504]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c12:	f7fe fdd3 	bl	80017bc <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1a:	f7fe fdcf 	bl	80017bc <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b64      	cmp	r3, #100	; 0x64
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e120      	b.n	8002e6e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2c:	4b75      	ldr	r3, [pc, #468]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d106      	bne.n	8002c4e <HAL_RCC_OscConfig+0x31a>
 8002c40:	4b6f      	ldr	r3, [pc, #444]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	4a6e      	ldr	r2, [pc, #440]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4c:	e02d      	b.n	8002caa <HAL_RCC_OscConfig+0x376>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0x33c>
 8002c56:	4b6a      	ldr	r3, [pc, #424]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	4a69      	ldr	r2, [pc, #420]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002c5c:	f023 0301 	bic.w	r3, r3, #1
 8002c60:	6713      	str	r3, [r2, #112]	; 0x70
 8002c62:	4b67      	ldr	r3, [pc, #412]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	4a66      	ldr	r2, [pc, #408]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002c68:	f023 0304 	bic.w	r3, r3, #4
 8002c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6e:	e01c      	b.n	8002caa <HAL_RCC_OscConfig+0x376>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b05      	cmp	r3, #5
 8002c76:	d10c      	bne.n	8002c92 <HAL_RCC_OscConfig+0x35e>
 8002c78:	4b61      	ldr	r3, [pc, #388]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	4a60      	ldr	r2, [pc, #384]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002c7e:	f043 0304 	orr.w	r3, r3, #4
 8002c82:	6713      	str	r3, [r2, #112]	; 0x70
 8002c84:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	4a5d      	ldr	r2, [pc, #372]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c90:	e00b      	b.n	8002caa <HAL_RCC_OscConfig+0x376>
 8002c92:	4b5b      	ldr	r3, [pc, #364]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	4a5a      	ldr	r2, [pc, #360]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9e:	4b58      	ldr	r3, [pc, #352]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca2:	4a57      	ldr	r2, [pc, #348]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002ca4:	f023 0304 	bic.w	r3, r3, #4
 8002ca8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d015      	beq.n	8002cde <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb2:	f7fe fd83 	bl	80017bc <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7fe fd7f 	bl	80017bc <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e0ce      	b.n	8002e6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd0:	4b4b      	ldr	r3, [pc, #300]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ee      	beq.n	8002cba <HAL_RCC_OscConfig+0x386>
 8002cdc:	e014      	b.n	8002d08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cde:	f7fe fd6d 	bl	80017bc <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fe fd69 	bl	80017bc <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e0b8      	b.n	8002e6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfc:	4b40      	ldr	r3, [pc, #256]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ee      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d105      	bne.n	8002d1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0e:	4b3c      	ldr	r3, [pc, #240]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	4a3b      	ldr	r2, [pc, #236]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 80a4 	beq.w	8002e6c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d24:	4b36      	ldr	r3, [pc, #216]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 030c 	and.w	r3, r3, #12
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d06b      	beq.n	8002e08 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d149      	bne.n	8002dcc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d38:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a30      	ldr	r2, [pc, #192]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe fd3a 	bl	80017bc <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe fd36 	bl	80017bc <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e087      	b.n	8002e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	4b28      	ldr	r3, [pc, #160]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69da      	ldr	r2, [r3, #28]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	019b      	lsls	r3, r3, #6
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	3b01      	subs	r3, #1
 8002d84:	041b      	lsls	r3, r3, #16
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	4a1b      	ldr	r2, [pc, #108]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d96:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe fd0a 	bl	80017bc <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dac:	f7fe fd06 	bl	80017bc <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e057      	b.n	8002e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x478>
 8002dca:	e04f      	b.n	8002e6c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0b      	ldr	r2, [pc, #44]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fcf0 	bl	80017bc <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe fcec 	bl	80017bc <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e03d      	b.n	8002e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_RCC_OscConfig+0x4cc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x4ac>
 8002dfe:	e035      	b.n	8002e6c <HAL_RCC_OscConfig+0x538>
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e08:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <HAL_RCC_OscConfig+0x544>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d028      	beq.n	8002e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d121      	bne.n	8002e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d11a      	bne.n	8002e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e38:	4013      	ands	r3, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d111      	bne.n	8002e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	085b      	lsrs	r3, r3, #1
 8002e50:	3b01      	subs	r3, #1
 8002e52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800

08002e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0d0      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e94:	4b6a      	ldr	r3, [pc, #424]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d910      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b67      	ldr	r3, [pc, #412]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 020f 	bic.w	r2, r3, #15
 8002eaa:	4965      	ldr	r1, [pc, #404]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b63      	ldr	r3, [pc, #396]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0b8      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d020      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002edc:	4b59      	ldr	r3, [pc, #356]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4a58      	ldr	r2, [pc, #352]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ee6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef4:	4b53      	ldr	r3, [pc, #332]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	4a52      	ldr	r2, [pc, #328]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002efa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002efe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f00:	4b50      	ldr	r3, [pc, #320]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	494d      	ldr	r1, [pc, #308]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d040      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d115      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e07f      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3e:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e073      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e06b      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5e:	4b39      	ldr	r3, [pc, #228]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f023 0203 	bic.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4936      	ldr	r1, [pc, #216]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f70:	f7fe fc24 	bl	80017bc <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f78:	f7fe fc20 	bl	80017bc <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e053      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 020c 	and.w	r2, r3, #12
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d1eb      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b27      	ldr	r3, [pc, #156]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d210      	bcs.n	8002fd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b24      	ldr	r3, [pc, #144]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 020f 	bic.w	r2, r3, #15
 8002fb6:	4922      	ldr	r1, [pc, #136]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e032      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4916      	ldr	r1, [pc, #88]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ffa:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	490e      	ldr	r1, [pc, #56]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800300e:	f000 f821 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8003012:	4602      	mov	r2, r0
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	490a      	ldr	r1, [pc, #40]	; (8003048 <HAL_RCC_ClockConfig+0x1cc>)
 8003020:	5ccb      	ldrb	r3, [r1, r3]
 8003022:	fa22 f303 	lsr.w	r3, r2, r3
 8003026:	4a09      	ldr	r2, [pc, #36]	; (800304c <HAL_RCC_ClockConfig+0x1d0>)
 8003028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800302a:	4b09      	ldr	r3, [pc, #36]	; (8003050 <HAL_RCC_ClockConfig+0x1d4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe fb80 	bl	8001734 <HAL_InitTick>

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40023c00 	.word	0x40023c00
 8003044:	40023800 	.word	0x40023800
 8003048:	08005a54 	.word	0x08005a54
 800304c:	200000f8 	.word	0x200000f8
 8003050:	200000fc 	.word	0x200000fc

08003054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003058:	b094      	sub	sp, #80	; 0x50
 800305a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	647b      	str	r3, [r7, #68]	; 0x44
 8003060:	2300      	movs	r3, #0
 8003062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003064:	2300      	movs	r3, #0
 8003066:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800306c:	4b79      	ldr	r3, [pc, #484]	; (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b08      	cmp	r3, #8
 8003076:	d00d      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x40>
 8003078:	2b08      	cmp	r3, #8
 800307a:	f200 80e1 	bhi.w	8003240 <HAL_RCC_GetSysClockFreq+0x1ec>
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x34>
 8003082:	2b04      	cmp	r3, #4
 8003084:	d003      	beq.n	800308e <HAL_RCC_GetSysClockFreq+0x3a>
 8003086:	e0db      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003088:	4b73      	ldr	r3, [pc, #460]	; (8003258 <HAL_RCC_GetSysClockFreq+0x204>)
 800308a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800308c:	e0db      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800308e:	4b73      	ldr	r3, [pc, #460]	; (800325c <HAL_RCC_GetSysClockFreq+0x208>)
 8003090:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003092:	e0d8      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003094:	4b6f      	ldr	r3, [pc, #444]	; (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800309c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800309e:	4b6d      	ldr	r3, [pc, #436]	; (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d063      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030aa:	4b6a      	ldr	r3, [pc, #424]	; (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	099b      	lsrs	r3, r3, #6
 80030b0:	2200      	movs	r2, #0
 80030b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80030b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030bc:	633b      	str	r3, [r7, #48]	; 0x30
 80030be:	2300      	movs	r3, #0
 80030c0:	637b      	str	r3, [r7, #52]	; 0x34
 80030c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030c6:	4622      	mov	r2, r4
 80030c8:	462b      	mov	r3, r5
 80030ca:	f04f 0000 	mov.w	r0, #0
 80030ce:	f04f 0100 	mov.w	r1, #0
 80030d2:	0159      	lsls	r1, r3, #5
 80030d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d8:	0150      	lsls	r0, r2, #5
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4621      	mov	r1, r4
 80030e0:	1a51      	subs	r1, r2, r1
 80030e2:	6139      	str	r1, [r7, #16]
 80030e4:	4629      	mov	r1, r5
 80030e6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030f8:	4659      	mov	r1, fp
 80030fa:	018b      	lsls	r3, r1, #6
 80030fc:	4651      	mov	r1, sl
 80030fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003102:	4651      	mov	r1, sl
 8003104:	018a      	lsls	r2, r1, #6
 8003106:	4651      	mov	r1, sl
 8003108:	ebb2 0801 	subs.w	r8, r2, r1
 800310c:	4659      	mov	r1, fp
 800310e:	eb63 0901 	sbc.w	r9, r3, r1
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800311e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003126:	4690      	mov	r8, r2
 8003128:	4699      	mov	r9, r3
 800312a:	4623      	mov	r3, r4
 800312c:	eb18 0303 	adds.w	r3, r8, r3
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	462b      	mov	r3, r5
 8003134:	eb49 0303 	adc.w	r3, r9, r3
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003146:	4629      	mov	r1, r5
 8003148:	024b      	lsls	r3, r1, #9
 800314a:	4621      	mov	r1, r4
 800314c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003150:	4621      	mov	r1, r4
 8003152:	024a      	lsls	r2, r1, #9
 8003154:	4610      	mov	r0, r2
 8003156:	4619      	mov	r1, r3
 8003158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800315a:	2200      	movs	r2, #0
 800315c:	62bb      	str	r3, [r7, #40]	; 0x28
 800315e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003160:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003164:	f7fd f850 	bl	8000208 <__aeabi_uldivmod>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4613      	mov	r3, r2
 800316e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003170:	e058      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003172:	4b38      	ldr	r3, [pc, #224]	; (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	099b      	lsrs	r3, r3, #6
 8003178:	2200      	movs	r2, #0
 800317a:	4618      	mov	r0, r3
 800317c:	4611      	mov	r1, r2
 800317e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003182:	623b      	str	r3, [r7, #32]
 8003184:	2300      	movs	r3, #0
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
 8003188:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800318c:	4642      	mov	r2, r8
 800318e:	464b      	mov	r3, r9
 8003190:	f04f 0000 	mov.w	r0, #0
 8003194:	f04f 0100 	mov.w	r1, #0
 8003198:	0159      	lsls	r1, r3, #5
 800319a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800319e:	0150      	lsls	r0, r2, #5
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4641      	mov	r1, r8
 80031a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80031aa:	4649      	mov	r1, r9
 80031ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031c4:	ebb2 040a 	subs.w	r4, r2, sl
 80031c8:	eb63 050b 	sbc.w	r5, r3, fp
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	00eb      	lsls	r3, r5, #3
 80031d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031da:	00e2      	lsls	r2, r4, #3
 80031dc:	4614      	mov	r4, r2
 80031de:	461d      	mov	r5, r3
 80031e0:	4643      	mov	r3, r8
 80031e2:	18e3      	adds	r3, r4, r3
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	464b      	mov	r3, r9
 80031e8:	eb45 0303 	adc.w	r3, r5, r3
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031fa:	4629      	mov	r1, r5
 80031fc:	028b      	lsls	r3, r1, #10
 80031fe:	4621      	mov	r1, r4
 8003200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003204:	4621      	mov	r1, r4
 8003206:	028a      	lsls	r2, r1, #10
 8003208:	4610      	mov	r0, r2
 800320a:	4619      	mov	r1, r3
 800320c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800320e:	2200      	movs	r2, #0
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	61fa      	str	r2, [r7, #28]
 8003214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003218:	f7fc fff6 	bl	8000208 <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4613      	mov	r3, r2
 8003222:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	3301      	adds	r3, #1
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800323e:	e002      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_RCC_GetSysClockFreq+0x204>)
 8003242:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003248:	4618      	mov	r0, r3
 800324a:	3750      	adds	r7, #80	; 0x50
 800324c:	46bd      	mov	sp, r7
 800324e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	00f42400 	.word	0x00f42400
 800325c:	007a1200 	.word	0x007a1200

08003260 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_RCC_GetHCLKFreq+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	200000f8 	.word	0x200000f8

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800327c:	f7ff fff0 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	0a9b      	lsrs	r3, r3, #10
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4903      	ldr	r1, [pc, #12]	; (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	08005a64 	.word	0x08005a64

080032a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032a4:	f7ff ffdc 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	0b5b      	lsrs	r3, r3, #13
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4903      	ldr	r1, [pc, #12]	; (80032c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40023800 	.word	0x40023800
 80032c4:	08005a64 	.word	0x08005a64

080032c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d012      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032f0:	4b69      	ldr	r3, [pc, #420]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a68      	ldr	r2, [pc, #416]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032fa:	6093      	str	r3, [r2, #8]
 80032fc:	4b66      	ldr	r3, [pc, #408]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003304:	4964      	ldr	r1, [pc, #400]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003306:	4313      	orrs	r3, r2
 8003308:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003312:	2301      	movs	r3, #1
 8003314:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d017      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003322:	4b5d      	ldr	r3, [pc, #372]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003328:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003330:	4959      	ldr	r1, [pc, #356]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003340:	d101      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003342:	2301      	movs	r3, #1
 8003344:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800334e:	2301      	movs	r3, #1
 8003350:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d017      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800335e:	4b4e      	ldr	r3, [pc, #312]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003364:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	494a      	ldr	r1, [pc, #296]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800337c:	d101      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800337e:	2301      	movs	r3, #1
 8003380:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800338a:	2301      	movs	r3, #1
 800338c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800339a:	2301      	movs	r3, #1
 800339c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 808b 	beq.w	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033ac:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	4a39      	ldr	r2, [pc, #228]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b6:	6413      	str	r3, [r2, #64]	; 0x40
 80033b8:	4b37      	ldr	r3, [pc, #220]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033c4:	4b35      	ldr	r3, [pc, #212]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a34      	ldr	r2, [pc, #208]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d0:	f7fe f9f4 	bl	80017bc <HAL_GetTick>
 80033d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d8:	f7fe f9f0 	bl	80017bc <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	; 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e357      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033ea:	4b2c      	ldr	r3, [pc, #176]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033f6:	4b28      	ldr	r3, [pc, #160]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d035      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	429a      	cmp	r2, r3
 8003412:	d02e      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003414:	4b20      	ldr	r3, [pc, #128]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800341c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800341e:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800342a:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	4a1a      	ldr	r2, [pc, #104]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003434:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003436:	4a18      	ldr	r2, [pc, #96]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800343c:	4b16      	ldr	r3, [pc, #88]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d114      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fe f9b8 	bl	80017bc <HAL_GetTick>
 800344c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344e:	e00a      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003450:	f7fe f9b4 	bl	80017bc <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	; 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e319      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003466:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0ee      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800347e:	d111      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800348c:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800348e:	400b      	ands	r3, r1
 8003490:	4901      	ldr	r1, [pc, #4]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
 8003496:	e00b      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003498:	40023800 	.word	0x40023800
 800349c:	40007000 	.word	0x40007000
 80034a0:	0ffffcff 	.word	0x0ffffcff
 80034a4:	4baa      	ldr	r3, [pc, #680]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	4aa9      	ldr	r2, [pc, #676]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034ae:	6093      	str	r3, [r2, #8]
 80034b0:	4ba7      	ldr	r3, [pc, #668]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034bc:	49a4      	ldr	r1, [pc, #656]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d010      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034ce:	4ba0      	ldr	r3, [pc, #640]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034d4:	4a9e      	ldr	r2, [pc, #632]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80034de:	4b9c      	ldr	r3, [pc, #624]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	4999      	ldr	r1, [pc, #612]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034fc:	4b94      	ldr	r3, [pc, #592]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800350a:	4991      	ldr	r1, [pc, #580]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800351e:	4b8c      	ldr	r3, [pc, #560]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003524:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800352c:	4988      	ldr	r1, [pc, #544]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003540:	4b83      	ldr	r3, [pc, #524]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003546:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800354e:	4980      	ldr	r1, [pc, #512]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003562:	4b7b      	ldr	r3, [pc, #492]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003568:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003570:	4977      	ldr	r1, [pc, #476]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003584:	4b72      	ldr	r3, [pc, #456]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358a:	f023 0203 	bic.w	r2, r3, #3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	496f      	ldr	r1, [pc, #444]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035a6:	4b6a      	ldr	r3, [pc, #424]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	f023 020c 	bic.w	r2, r3, #12
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b4:	4966      	ldr	r1, [pc, #408]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035c8:	4b61      	ldr	r3, [pc, #388]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d6:	495e      	ldr	r1, [pc, #376]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035ea:	4b59      	ldr	r3, [pc, #356]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f8:	4955      	ldr	r1, [pc, #340]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800360c:	4b50      	ldr	r3, [pc, #320]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003612:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	494d      	ldr	r1, [pc, #308]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800362e:	4b48      	ldr	r3, [pc, #288]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003634:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	4944      	ldr	r1, [pc, #272]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003650:	4b3f      	ldr	r3, [pc, #252]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365e:	493c      	ldr	r1, [pc, #240]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003672:	4b37      	ldr	r3, [pc, #220]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003678:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003680:	4933      	ldr	r1, [pc, #204]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003694:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036a2:	492b      	ldr	r1, [pc, #172]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d011      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80036b6:	4b26      	ldr	r3, [pc, #152]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036c4:	4922      	ldr	r1, [pc, #136]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d4:	d101      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80036d6:	2301      	movs	r3, #1
 80036d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80036e6:	2301      	movs	r3, #1
 80036e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003704:	4912      	ldr	r1, [pc, #72]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00b      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003718:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003728:	4909      	ldr	r1, [pc, #36]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d006      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 80d9 	beq.w	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003744:	4b02      	ldr	r3, [pc, #8]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a01      	ldr	r2, [pc, #4]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800374e:	e001      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003750:	40023800 	.word	0x40023800
 8003754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003756:	f7fe f831 	bl	80017bc <HAL_GetTick>
 800375a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800375e:	f7fe f82d 	bl	80017bc <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b64      	cmp	r3, #100	; 0x64
 800376a:	d901      	bls.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e194      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003770:	4b6c      	ldr	r3, [pc, #432]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f0      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d021      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378c:	2b00      	cmp	r3, #0
 800378e:	d11d      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003790:	4b64      	ldr	r3, [pc, #400]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003796:	0c1b      	lsrs	r3, r3, #16
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800379e:	4b61      	ldr	r3, [pc, #388]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a4:	0e1b      	lsrs	r3, r3, #24
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	019a      	lsls	r2, r3, #6
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	041b      	lsls	r3, r3, #16
 80037b6:	431a      	orrs	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	061b      	lsls	r3, r3, #24
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	071b      	lsls	r3, r3, #28
 80037c4:	4957      	ldr	r1, [pc, #348]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d02e      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f6:	d129      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037f8:	4b4a      	ldr	r3, [pc, #296]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fe:	0c1b      	lsrs	r3, r3, #16
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003806:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800380c:	0f1b      	lsrs	r3, r3, #28
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	019a      	lsls	r2, r3, #6
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	431a      	orrs	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	071b      	lsls	r3, r3, #28
 800382c:	493d      	ldr	r1, [pc, #244]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003834:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800383a:	f023 021f 	bic.w	r2, r3, #31
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	3b01      	subs	r3, #1
 8003844:	4937      	ldr	r1, [pc, #220]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01d      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003858:	4b32      	ldr	r3, [pc, #200]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800385a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800385e:	0e1b      	lsrs	r3, r3, #24
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003866:	4b2f      	ldr	r3, [pc, #188]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800386c:	0f1b      	lsrs	r3, r3, #28
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	019a      	lsls	r2, r3, #6
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	041b      	lsls	r3, r3, #16
 8003880:	431a      	orrs	r2, r3
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	061b      	lsls	r3, r3, #24
 8003886:	431a      	orrs	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	071b      	lsls	r3, r3, #28
 800388c:	4925      	ldr	r1, [pc, #148]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d011      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	019a      	lsls	r2, r3, #6
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	041b      	lsls	r3, r3, #16
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	061b      	lsls	r3, r3, #24
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	071b      	lsls	r3, r3, #28
 80038bc:	4919      	ldr	r1, [pc, #100]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038c4:	4b17      	ldr	r3, [pc, #92]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a16      	ldr	r2, [pc, #88]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d0:	f7fd ff74 	bl	80017bc <HAL_GetTick>
 80038d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038d8:	f7fd ff70 	bl	80017bc <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b64      	cmp	r3, #100	; 0x64
 80038e4:	d901      	bls.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e0d7      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038ea:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	f040 80cd 	bne.w	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038fe:	4b09      	ldr	r3, [pc, #36]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a08      	ldr	r2, [pc, #32]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390a:	f7fd ff57 	bl	80017bc <HAL_GetTick>
 800390e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003910:	e00a      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003912:	f7fd ff53 	bl	80017bc <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b64      	cmp	r3, #100	; 0x64
 800391e:	d903      	bls.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e0ba      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003924:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003928:	4b5e      	ldr	r3, [pc, #376]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003934:	d0ed      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003952:	2b00      	cmp	r3, #0
 8003954:	d02e      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d12a      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800395e:	4b51      	ldr	r3, [pc, #324]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003964:	0c1b      	lsrs	r3, r3, #16
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800396c:	4b4d      	ldr	r3, [pc, #308]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	0f1b      	lsrs	r3, r3, #28
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	019a      	lsls	r2, r3, #6
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	041b      	lsls	r3, r3, #16
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	061b      	lsls	r3, r3, #24
 800398c:	431a      	orrs	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	071b      	lsls	r3, r3, #28
 8003992:	4944      	ldr	r1, [pc, #272]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800399a:	4b42      	ldr	r3, [pc, #264]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800399c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	3b01      	subs	r3, #1
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	493d      	ldr	r1, [pc, #244]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d022      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039c8:	d11d      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039ca:	4b36      	ldr	r3, [pc, #216]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	0e1b      	lsrs	r3, r3, #24
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039d8:	4b32      	ldr	r3, [pc, #200]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039de:	0f1b      	lsrs	r3, r3, #28
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	019a      	lsls	r2, r3, #6
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	431a      	orrs	r2, r3
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	061b      	lsls	r3, r3, #24
 80039f8:	431a      	orrs	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	071b      	lsls	r3, r3, #28
 80039fe:	4929      	ldr	r1, [pc, #164]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d028      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a12:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a18:	0e1b      	lsrs	r3, r3, #24
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a20:	4b20      	ldr	r3, [pc, #128]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	0c1b      	lsrs	r3, r3, #16
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	019a      	lsls	r2, r3, #6
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	041b      	lsls	r3, r3, #16
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	061b      	lsls	r3, r3, #24
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	071b      	lsls	r3, r3, #28
 8003a46:	4917      	ldr	r1, [pc, #92]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a4e:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	4911      	ldr	r1, [pc, #68]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a64:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a0e      	ldr	r2, [pc, #56]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a70:	f7fd fea4 	bl	80017bc <HAL_GetTick>
 8003a74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a78:	f7fd fea0 	bl	80017bc <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e007      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a8a:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a96:	d1ef      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40023800 	.word	0x40023800

08003aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e054      	b.n	8003b64 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d111      	bne.n	8003aea <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fdf2 	bl	80046b8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d102      	bne.n	8003ae2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a23      	ldr	r2, [pc, #140]	; (8003b6c <HAL_TIM_Base_Init+0xc4>)
 8003ae0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2202      	movs	r2, #2
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3304      	adds	r3, #4
 8003afa:	4619      	mov	r1, r3
 8003afc:	4610      	mov	r0, r2
 8003afe:	f000 fca1 	bl	8004444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	08001221 	.word	0x08001221

08003b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d001      	beq.n	8003b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e054      	b.n	8003c32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a26      	ldr	r2, [pc, #152]	; (8003c40 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d022      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x80>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb2:	d01d      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x80>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a22      	ldr	r2, [pc, #136]	; (8003c44 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d018      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x80>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a21      	ldr	r2, [pc, #132]	; (8003c48 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x80>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1f      	ldr	r2, [pc, #124]	; (8003c4c <HAL_TIM_Base_Start_IT+0xdc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x80>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1e      	ldr	r2, [pc, #120]	; (8003c50 <HAL_TIM_Base_Start_IT+0xe0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x80>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1c      	ldr	r2, [pc, #112]	; (8003c54 <HAL_TIM_Base_Start_IT+0xe4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x80>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1b      	ldr	r2, [pc, #108]	; (8003c58 <HAL_TIM_Base_Start_IT+0xe8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d115      	bne.n	8003c1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <HAL_TIM_Base_Start_IT+0xec>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b06      	cmp	r3, #6
 8003c00:	d015      	beq.n	8003c2e <HAL_TIM_Base_Start_IT+0xbe>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c08:	d011      	beq.n	8003c2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1a:	e008      	b.n	8003c2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	e000      	b.n	8003c30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40010000 	.word	0x40010000
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40000800 	.word	0x40000800
 8003c4c:	40000c00 	.word	0x40000c00
 8003c50:	40010400 	.word	0x40010400
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40001800 	.word	0x40001800
 8003c5c:	00010007 	.word	0x00010007

08003c60 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0201 	bic.w	r2, r2, #1
 8003c76:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6a1a      	ldr	r2, [r3, #32]
 8003c7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10f      	bne.n	8003ca8 <HAL_TIM_Base_Stop_IT+0x48>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6a1a      	ldr	r2, [r3, #32]
 8003c8e:	f240 4344 	movw	r3, #1092	; 0x444
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d107      	bne.n	8003ca8 <HAL_TIM_Base_Stop_IT+0x48>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d128      	bne.n	8003d26 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d121      	bne.n	8003d26 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f06f 0202 	mvn.w	r2, #2
 8003cea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	4798      	blx	r3
 8003d0a:	e009      	b.n	8003d20 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d128      	bne.n	8003d86 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d121      	bne.n	8003d86 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f06f 0204 	mvn.w	r2, #4
 8003d4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
 8003d6a:	e009      	b.n	8003d80 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d128      	bne.n	8003de6 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d121      	bne.n	8003de6 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f06f 0208 	mvn.w	r2, #8
 8003daa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2204      	movs	r2, #4
 8003db0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	4798      	blx	r3
 8003dca:	e009      	b.n	8003de0 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b10      	cmp	r3, #16
 8003df2:	d128      	bne.n	8003e46 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b10      	cmp	r3, #16
 8003e00:	d121      	bne.n	8003e46 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f06f 0210 	mvn.w	r2, #16
 8003e0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2208      	movs	r2, #8
 8003e10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
 8003e2a:	e009      	b.n	8003e40 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d110      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d109      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f06f 0201 	mvn.w	r2, #1
 8003e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b80      	cmp	r3, #128	; 0x80
 8003e82:	d110      	bne.n	8003ea6 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8e:	2b80      	cmp	r3, #128	; 0x80
 8003e90:	d109      	bne.n	8003ea6 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb4:	d110      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec0:	2b80      	cmp	r3, #128	; 0x80
 8003ec2:	d109      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d110      	bne.n	8003f08 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d109      	bne.n	8003f08 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d110      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d109      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0220 	mvn.w	r2, #32
 8003f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_TIM_ConfigClockSource+0x1c>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e0b4      	b.n	80040c6 <HAL_TIM_ConfigClockSource+0x186>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	4b56      	ldr	r3, [pc, #344]	; (80040d0 <HAL_TIM_ConfigClockSource+0x190>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f94:	d03e      	beq.n	8004014 <HAL_TIM_ConfigClockSource+0xd4>
 8003f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f9a:	f200 8087 	bhi.w	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa2:	f000 8086 	beq.w	80040b2 <HAL_TIM_ConfigClockSource+0x172>
 8003fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003faa:	d87f      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003fac:	2b70      	cmp	r3, #112	; 0x70
 8003fae:	d01a      	beq.n	8003fe6 <HAL_TIM_ConfigClockSource+0xa6>
 8003fb0:	2b70      	cmp	r3, #112	; 0x70
 8003fb2:	d87b      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003fb4:	2b60      	cmp	r3, #96	; 0x60
 8003fb6:	d050      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x11a>
 8003fb8:	2b60      	cmp	r3, #96	; 0x60
 8003fba:	d877      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003fbc:	2b50      	cmp	r3, #80	; 0x50
 8003fbe:	d03c      	beq.n	800403a <HAL_TIM_ConfigClockSource+0xfa>
 8003fc0:	2b50      	cmp	r3, #80	; 0x50
 8003fc2:	d873      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003fc4:	2b40      	cmp	r3, #64	; 0x40
 8003fc6:	d058      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x13a>
 8003fc8:	2b40      	cmp	r3, #64	; 0x40
 8003fca:	d86f      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003fcc:	2b30      	cmp	r3, #48	; 0x30
 8003fce:	d064      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x15a>
 8003fd0:	2b30      	cmp	r3, #48	; 0x30
 8003fd2:	d86b      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d060      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x15a>
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d867      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d05c      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x15a>
 8003fe0:	2b10      	cmp	r3, #16
 8003fe2:	d05a      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x15a>
 8003fe4:	e062      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ff6:	f000 fb3f 	bl	8004678 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004008:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	609a      	str	r2, [r3, #8]
      break;
 8004012:	e04f      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004024:	f000 fb28 	bl	8004678 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004036:	609a      	str	r2, [r3, #8]
      break;
 8004038:	e03c      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004046:	461a      	mov	r2, r3
 8004048:	f000 fa9c 	bl	8004584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2150      	movs	r1, #80	; 0x50
 8004052:	4618      	mov	r0, r3
 8004054:	f000 faf5 	bl	8004642 <TIM_ITRx_SetConfig>
      break;
 8004058:	e02c      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004066:	461a      	mov	r2, r3
 8004068:	f000 fabb 	bl	80045e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2160      	movs	r1, #96	; 0x60
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fae5 	bl	8004642 <TIM_ITRx_SetConfig>
      break;
 8004078:	e01c      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004086:	461a      	mov	r2, r3
 8004088:	f000 fa7c 	bl	8004584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2140      	movs	r1, #64	; 0x40
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fad5 	bl	8004642 <TIM_ITRx_SetConfig>
      break;
 8004098:	e00c      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4619      	mov	r1, r3
 80040a4:	4610      	mov	r0, r2
 80040a6:	f000 facc 	bl	8004642 <TIM_ITRx_SetConfig>
      break;
 80040aa:	e003      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]
      break;
 80040b0:	e000      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	fffeff88 	.word	0xfffeff88

080040d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	460b      	mov	r3, r1
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e13e      	b.n	8004436 <HAL_TIM_RegisterCallback+0x29a>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_TIM_RegisterCallback+0x2a>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e137      	b.n	8004436 <HAL_TIM_RegisterCallback+0x29a>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	f040 80c2 	bne.w	8004360 <HAL_TIM_RegisterCallback+0x1c4>
  {
    switch (CallbackID)
 80041dc:	7afb      	ldrb	r3, [r7, #11]
 80041de:	2b1b      	cmp	r3, #27
 80041e0:	f200 80bb 	bhi.w	800435a <HAL_TIM_RegisterCallback+0x1be>
 80041e4:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <HAL_TIM_RegisterCallback+0x50>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	0800425d 	.word	0x0800425d
 80041f0:	08004265 	.word	0x08004265
 80041f4:	0800426d 	.word	0x0800426d
 80041f8:	08004275 	.word	0x08004275
 80041fc:	0800427d 	.word	0x0800427d
 8004200:	08004285 	.word	0x08004285
 8004204:	0800428d 	.word	0x0800428d
 8004208:	08004295 	.word	0x08004295
 800420c:	0800429d 	.word	0x0800429d
 8004210:	080042a5 	.word	0x080042a5
 8004214:	080042ad 	.word	0x080042ad
 8004218:	080042b5 	.word	0x080042b5
 800421c:	080042bd 	.word	0x080042bd
 8004220:	080042c5 	.word	0x080042c5
 8004224:	080042cf 	.word	0x080042cf
 8004228:	080042d9 	.word	0x080042d9
 800422c:	080042e3 	.word	0x080042e3
 8004230:	080042ed 	.word	0x080042ed
 8004234:	080042f7 	.word	0x080042f7
 8004238:	08004301 	.word	0x08004301
 800423c:	0800430b 	.word	0x0800430b
 8004240:	08004315 	.word	0x08004315
 8004244:	0800431f 	.word	0x0800431f
 8004248:	08004329 	.word	0x08004329
 800424c:	08004333 	.word	0x08004333
 8004250:	0800433d 	.word	0x0800433d
 8004254:	08004347 	.word	0x08004347
 8004258:	08004351 	.word	0x08004351
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004262:	e0e3      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800426a:	e0df      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8004272:	e0db      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800427a:	e0d7      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8004282:	e0d3      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800428a:	e0cf      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8004292:	e0cb      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800429a:	e0c7      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80042a2:	e0c3      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80042aa:	e0bf      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80042b2:	e0bb      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80042ba:	e0b7      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80042c2:	e0b3      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 80042cc:	e0ae      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80042d6:	e0a9      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80042e0:	e0a4      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80042ea:	e09f      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80042f4:	e09a      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80042fe:	e095      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8004308:	e090      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8004312:	e08b      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800431c:	e086      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8004326:	e081      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8004330:	e07c      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800433a:	e077      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8004344:	e072      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 800434e:	e06d      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8004358:	e068      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	75fb      	strb	r3, [r7, #23]
        break;
 800435e:	e065      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d15d      	bne.n	8004428 <HAL_TIM_RegisterCallback+0x28c>
  {
    switch (CallbackID)
 800436c:	7afb      	ldrb	r3, [r7, #11]
 800436e:	2b0d      	cmp	r3, #13
 8004370:	d857      	bhi.n	8004422 <HAL_TIM_RegisterCallback+0x286>
 8004372:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <HAL_TIM_RegisterCallback+0x1dc>)
 8004374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004378:	080043b1 	.word	0x080043b1
 800437c:	080043b9 	.word	0x080043b9
 8004380:	080043c1 	.word	0x080043c1
 8004384:	080043c9 	.word	0x080043c9
 8004388:	080043d1 	.word	0x080043d1
 800438c:	080043d9 	.word	0x080043d9
 8004390:	080043e1 	.word	0x080043e1
 8004394:	080043e9 	.word	0x080043e9
 8004398:	080043f1 	.word	0x080043f1
 800439c:	080043f9 	.word	0x080043f9
 80043a0:	08004401 	.word	0x08004401
 80043a4:	08004409 	.word	0x08004409
 80043a8:	08004411 	.word	0x08004411
 80043ac:	08004419 	.word	0x08004419
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80043b6:	e039      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80043be:	e035      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80043c6:	e031      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80043ce:	e02d      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80043d6:	e029      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80043de:	e025      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80043e6:	e021      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80043ee:	e01d      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80043f6:	e019      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80043fe:	e015      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8004406:	e011      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800440e:	e00d      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8004416:	e009      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8004420:	e004      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
        break;
 8004426:	e001      	b.n	800442c <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004434:	7dfb      	ldrb	r3, [r7, #23]
}
 8004436:	4618      	mov	r0, r3
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop

08004444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a40      	ldr	r2, [pc, #256]	; (8004558 <TIM_Base_SetConfig+0x114>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004462:	d00f      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a3d      	ldr	r2, [pc, #244]	; (800455c <TIM_Base_SetConfig+0x118>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00b      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a3c      	ldr	r2, [pc, #240]	; (8004560 <TIM_Base_SetConfig+0x11c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d007      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a3b      	ldr	r2, [pc, #236]	; (8004564 <TIM_Base_SetConfig+0x120>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a3a      	ldr	r2, [pc, #232]	; (8004568 <TIM_Base_SetConfig+0x124>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d108      	bne.n	8004496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a2f      	ldr	r2, [pc, #188]	; (8004558 <TIM_Base_SetConfig+0x114>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d02b      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a4:	d027      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a2c      	ldr	r2, [pc, #176]	; (800455c <TIM_Base_SetConfig+0x118>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d023      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a2b      	ldr	r2, [pc, #172]	; (8004560 <TIM_Base_SetConfig+0x11c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d01f      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a2a      	ldr	r2, [pc, #168]	; (8004564 <TIM_Base_SetConfig+0x120>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d01b      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a29      	ldr	r2, [pc, #164]	; (8004568 <TIM_Base_SetConfig+0x124>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d017      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a28      	ldr	r2, [pc, #160]	; (800456c <TIM_Base_SetConfig+0x128>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a27      	ldr	r2, [pc, #156]	; (8004570 <TIM_Base_SetConfig+0x12c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00f      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a26      	ldr	r2, [pc, #152]	; (8004574 <TIM_Base_SetConfig+0x130>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00b      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a25      	ldr	r2, [pc, #148]	; (8004578 <TIM_Base_SetConfig+0x134>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d007      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a24      	ldr	r2, [pc, #144]	; (800457c <TIM_Base_SetConfig+0x138>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d003      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a23      	ldr	r2, [pc, #140]	; (8004580 <TIM_Base_SetConfig+0x13c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d108      	bne.n	8004508 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a0a      	ldr	r2, [pc, #40]	; (8004558 <TIM_Base_SetConfig+0x114>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d003      	beq.n	800453c <TIM_Base_SetConfig+0xf8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a0c      	ldr	r2, [pc, #48]	; (8004568 <TIM_Base_SetConfig+0x124>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d103      	bne.n	8004544 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	615a      	str	r2, [r3, #20]
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40010000 	.word	0x40010000
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800
 8004564:	40000c00 	.word	0x40000c00
 8004568:	40010400 	.word	0x40010400
 800456c:	40014000 	.word	0x40014000
 8004570:	40014400 	.word	0x40014400
 8004574:	40014800 	.word	0x40014800
 8004578:	40001800 	.word	0x40001800
 800457c:	40001c00 	.word	0x40001c00
 8004580:	40002000 	.word	0x40002000

08004584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f023 0201 	bic.w	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f023 030a 	bic.w	r3, r3, #10
 80045c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	621a      	str	r2, [r3, #32]
}
 80045d6:	bf00      	nop
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b087      	sub	sp, #28
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	f023 0210 	bic.w	r2, r3, #16
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800460c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	031b      	lsls	r3, r3, #12
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4313      	orrs	r3, r2
 8004616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800461e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	621a      	str	r2, [r3, #32]
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004642:	b480      	push	{r7}
 8004644:	b085      	sub	sp, #20
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	f043 0307 	orr.w	r3, r3, #7
 8004664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	609a      	str	r2, [r3, #8]
}
 800466c:	bf00      	nop
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	021a      	lsls	r2, r3, #8
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	431a      	orrs	r2, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4313      	orrs	r3, r2
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	609a      	str	r2, [r3, #8]
}
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a1e      	ldr	r2, [pc, #120]	; (800473c <TIM_ResetCallback+0x84>)
 80046c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <TIM_ResetCallback+0x88>)
 80046cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a1c      	ldr	r2, [pc, #112]	; (8004744 <TIM_ResetCallback+0x8c>)
 80046d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a1b      	ldr	r2, [pc, #108]	; (8004748 <TIM_ResetCallback+0x90>)
 80046dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a1a      	ldr	r2, [pc, #104]	; (800474c <TIM_ResetCallback+0x94>)
 80046e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a19      	ldr	r2, [pc, #100]	; (8004750 <TIM_ResetCallback+0x98>)
 80046ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <TIM_ResetCallback+0x9c>)
 80046f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a17      	ldr	r2, [pc, #92]	; (8004758 <TIM_ResetCallback+0xa0>)
 80046fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a16      	ldr	r2, [pc, #88]	; (800475c <TIM_ResetCallback+0xa4>)
 8004704:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a15      	ldr	r2, [pc, #84]	; (8004760 <TIM_ResetCallback+0xa8>)
 800470c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a14      	ldr	r2, [pc, #80]	; (8004764 <TIM_ResetCallback+0xac>)
 8004714:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a13      	ldr	r2, [pc, #76]	; (8004768 <TIM_ResetCallback+0xb0>)
 800471c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a12      	ldr	r2, [pc, #72]	; (800476c <TIM_ResetCallback+0xb4>)
 8004724:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a11      	ldr	r2, [pc, #68]	; (8004770 <TIM_ResetCallback+0xb8>)
 800472c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	080040d5 	.word	0x080040d5
 8004740:	080040e9 	.word	0x080040e9
 8004744:	08004161 	.word	0x08004161
 8004748:	08004175 	.word	0x08004175
 800474c:	08004111 	.word	0x08004111
 8004750:	08004125 	.word	0x08004125
 8004754:	080040fd 	.word	0x080040fd
 8004758:	08004139 	.word	0x08004139
 800475c:	0800414d 	.word	0x0800414d
 8004760:	08004189 	.word	0x08004189
 8004764:	08004891 	.word	0x08004891
 8004768:	080048a5 	.word	0x080048a5
 800476c:	080048b9 	.word	0x080048b9
 8004770:	080048cd 	.word	0x080048cd

08004774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004788:	2302      	movs	r3, #2
 800478a:	e06d      	b.n	8004868 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a30      	ldr	r2, [pc, #192]	; (8004874 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a2f      	ldr	r2, [pc, #188]	; (8004878 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d108      	bne.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a20      	ldr	r2, [pc, #128]	; (8004874 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d022      	beq.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fe:	d01d      	beq.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1d      	ldr	r2, [pc, #116]	; (800487c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d018      	beq.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1c      	ldr	r2, [pc, #112]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d013      	beq.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1a      	ldr	r2, [pc, #104]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00e      	beq.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a15      	ldr	r2, [pc, #84]	; (8004878 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d009      	beq.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a16      	ldr	r2, [pc, #88]	; (8004888 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a15      	ldr	r2, [pc, #84]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d10c      	bne.n	8004856 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004842:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	4313      	orrs	r3, r2
 800484c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	40010000 	.word	0x40010000
 8004878:	40010400 	.word	0x40010400
 800487c:	40000400 	.word	0x40000400
 8004880:	40000800 	.word	0x40000800
 8004884:	40000c00 	.word	0x40000c00
 8004888:	40014000 	.word	0x40014000
 800488c:	40001800 	.word	0x40001800

08004890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e04e      	b.n	8004990 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d114      	bne.n	8004924 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fb82 	bl	800500c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800490e:	2b00      	cmp	r3, #0
 8004910:	d103      	bne.n	800491a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a20      	ldr	r2, [pc, #128]	; (8004998 <HAL_UART_Init+0xb8>)
 8004916:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2224      	movs	r2, #36	; 0x24
 8004928:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0201 	bic.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fba6 	bl	800508c <UART_SetConfig>
 8004940:	4603      	mov	r3, r0
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e022      	b.n	8004990 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fdfe 	bl	8005554 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fe85 	bl	8005698 <UART_CheckIdleState>
 800498e:	4603      	mov	r3, r0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	080015f9 	.word	0x080015f9

0800499c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b0ba      	sub	sp, #232	; 0xe8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80049ca:	4013      	ands	r3, r2
 80049cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80049d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d115      	bne.n	8004a04 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00f      	beq.n	8004a04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 82a1 	beq.w	8004f3c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	4798      	blx	r3
      }
      return;
 8004a02:	e29b      	b.n	8004f3c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 811d 	beq.w	8004c48 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a1e:	4b88      	ldr	r3, [pc, #544]	; (8004c40 <HAL_UART_IRQHandler+0x2a4>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 8110 	beq.w	8004c48 <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d011      	beq.n	8004a58 <HAL_UART_IRQHandler+0xbc>
 8004a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00b      	beq.n	8004a58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2201      	movs	r2, #1
 8004a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a4e:	f043 0201 	orr.w	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d011      	beq.n	8004a88 <HAL_UART_IRQHandler+0xec>
 8004a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00b      	beq.n	8004a88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2202      	movs	r2, #2
 8004a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a7e:	f043 0204 	orr.w	r2, r3, #4
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d011      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x11c>
 8004a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00b      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aae:	f043 0202 	orr.w	r2, r3, #2
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d017      	beq.n	8004af4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d105      	bne.n	8004adc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ad4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00b      	beq.n	8004af4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aea:	f043 0208 	orr.w	r2, r3, #8
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d012      	beq.n	8004b26 <HAL_UART_IRQHandler+0x18a>
 8004b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00c      	beq.n	8004b26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b1c:	f043 0220 	orr.w	r2, r3, #32
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8207 	beq.w	8004f40 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00d      	beq.n	8004b5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d007      	beq.n	8004b5a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d005      	beq.n	8004b7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d053      	beq.n	8004c26 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fe87 	bl	8005892 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d143      	bne.n	8004c1a <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3308      	adds	r3, #8
 8004b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ba0:	e853 3f00 	ldrex	r3, [r3]
 8004ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3308      	adds	r3, #8
 8004bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1d9      	bne.n	8004b92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d013      	beq.n	8004c0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bea:	4a16      	ldr	r2, [pc, #88]	; (8004c44 <HAL_UART_IRQHandler+0x2a8>)
 8004bec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fd fc13 	bl	800241e <HAL_DMA_Abort_IT>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d01d      	beq.n	8004c3a <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c08:	4610      	mov	r0, r2
 8004c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0c:	e015      	b.n	8004c3a <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c18:	e00f      	b.n	8004c3a <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c24:	e009      	b.n	8004c3a <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004c38:	e182      	b.n	8004f40 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3a:	bf00      	nop
    return;
 8004c3c:	e180      	b.n	8004f40 <HAL_UART_IRQHandler+0x5a4>
 8004c3e:	bf00      	nop
 8004c40:	04000120 	.word	0x04000120
 8004c44:	0800595b 	.word	0x0800595b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	f040 8150 	bne.w	8004ef2 <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 8149 	beq.w	8004ef2 <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8142 	beq.w	8004ef2 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2210      	movs	r2, #16
 8004c74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	f040 80b8 	bne.w	8004df6 <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c92:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 8154 	beq.w	8004f44 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	f080 814c 	bcs.w	8004f44 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc0:	f000 8086 	beq.w	8004dd0 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cf2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1da      	bne.n	8004cc4 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3308      	adds	r3, #8
 8004d14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d18:	e853 3f00 	ldrex	r3, [r3]
 8004d1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e1      	bne.n	8004d0e <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3308      	adds	r3, #8
 8004d50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e3      	bne.n	8004d4a <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d98:	e853 3f00 	ldrex	r3, [r3]
 8004d9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da0:	f023 0310 	bic.w	r3, r3, #16
 8004da4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004db2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004db4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004db8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e4      	bne.n	8004d90 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fd fab7 	bl	800233e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 8004de8:	b292      	uxth	r2, r2
 8004dea:	1a8a      	subs	r2, r1, r2
 8004dec:	b292      	uxth	r2, r2
 8004dee:	4611      	mov	r1, r2
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004df4:	e0a6      	b.n	8004f44 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 8098 	beq.w	8004f48 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8093 	beq.w	8004f48 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e44:	647b      	str	r3, [r7, #68]	; 0x44
 8004e46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e4      	bne.n	8004e22 <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	623b      	str	r3, [r7, #32]
   return(result);
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	f023 0301 	bic.w	r3, r3, #1
 8004e6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3308      	adds	r3, #8
 8004e78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e7c:	633a      	str	r2, [r7, #48]	; 0x30
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e3      	bne.n	8004e58 <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f023 0310 	bic.w	r3, r3, #16
 8004eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ec6:	61fb      	str	r3, [r7, #28]
 8004ec8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	69b9      	ldr	r1, [r7, #24]
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e4      	bne.n	8004ea4 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2202      	movs	r2, #2
 8004ede:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ee6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8004eea:	4611      	mov	r1, r2
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ef0:	e02a      	b.n	8004f48 <HAL_UART_IRQHandler+0x5ac>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00e      	beq.n	8004f1c <HAL_UART_IRQHandler+0x580>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d008      	beq.n	8004f1c <HAL_UART_IRQHandler+0x580>
  {
    if (huart->TxISR != NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d01c      	beq.n	8004f4c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4798      	blx	r3
    }
    return;
 8004f1a:	e017      	b.n	8004f4c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d012      	beq.n	8004f4e <HAL_UART_IRQHandler+0x5b2>
 8004f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00c      	beq.n	8004f4e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fd28 	bl	800598a <UART_EndTransmit_IT>
    return;
 8004f3a:	e008      	b.n	8004f4e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004f3c:	bf00      	nop
 8004f3e:	e006      	b.n	8004f4e <HAL_UART_IRQHandler+0x5b2>
    return;
 8004f40:	bf00      	nop
 8004f42:	e004      	b.n	8004f4e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004f44:	bf00      	nop
 8004f46:	e002      	b.n	8004f4e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004f48:	bf00      	nop
 8004f4a:	e000      	b.n	8004f4e <HAL_UART_IRQHandler+0x5b2>
    return;
 8004f4c:	bf00      	nop
  }

}
 8004f4e:	37e8      	adds	r7, #232	; 0xe8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a14      	ldr	r2, [pc, #80]	; (8005068 <UART_InitCallbacksToDefault+0x5c>)
 8005018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a13      	ldr	r2, [pc, #76]	; (800506c <UART_InitCallbacksToDefault+0x60>)
 8005020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a12      	ldr	r2, [pc, #72]	; (8005070 <UART_InitCallbacksToDefault+0x64>)
 8005028:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a11      	ldr	r2, [pc, #68]	; (8005074 <UART_InitCallbacksToDefault+0x68>)
 8005030:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a10      	ldr	r2, [pc, #64]	; (8005078 <UART_InitCallbacksToDefault+0x6c>)
 8005038:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a0f      	ldr	r2, [pc, #60]	; (800507c <UART_InitCallbacksToDefault+0x70>)
 8005040:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a0e      	ldr	r2, [pc, #56]	; (8005080 <UART_InitCallbacksToDefault+0x74>)
 8005048:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a0d      	ldr	r2, [pc, #52]	; (8005084 <UART_InitCallbacksToDefault+0x78>)
 8005050:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a0c      	ldr	r2, [pc, #48]	; (8005088 <UART_InitCallbacksToDefault+0x7c>)
 8005058:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	08004f69 	.word	0x08004f69
 800506c:	08004f55 	.word	0x08004f55
 8005070:	08004f91 	.word	0x08004f91
 8005074:	08004f7d 	.word	0x08004f7d
 8005078:	08004fa5 	.word	0x08004fa5
 800507c:	08004fb9 	.word	0x08004fb9
 8005080:	08004fcd 	.word	0x08004fcd
 8005084:	08004fe1 	.word	0x08004fe1
 8005088:	08004ff5 	.word	0x08004ff5

0800508c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4ba6      	ldr	r3, [pc, #664]	; (8005350 <UART_SetConfig+0x2c4>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6812      	ldr	r2, [r2, #0]
 80050be:	6979      	ldr	r1, [r7, #20]
 80050c0:	430b      	orrs	r3, r1
 80050c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a94      	ldr	r2, [pc, #592]	; (8005354 <UART_SetConfig+0x2c8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d120      	bne.n	800514a <UART_SetConfig+0xbe>
 8005108:	4b93      	ldr	r3, [pc, #588]	; (8005358 <UART_SetConfig+0x2cc>)
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	2b03      	cmp	r3, #3
 8005114:	d816      	bhi.n	8005144 <UART_SetConfig+0xb8>
 8005116:	a201      	add	r2, pc, #4	; (adr r2, 800511c <UART_SetConfig+0x90>)
 8005118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511c:	0800512d 	.word	0x0800512d
 8005120:	08005139 	.word	0x08005139
 8005124:	08005133 	.word	0x08005133
 8005128:	0800513f 	.word	0x0800513f
 800512c:	2301      	movs	r3, #1
 800512e:	77fb      	strb	r3, [r7, #31]
 8005130:	e150      	b.n	80053d4 <UART_SetConfig+0x348>
 8005132:	2302      	movs	r3, #2
 8005134:	77fb      	strb	r3, [r7, #31]
 8005136:	e14d      	b.n	80053d4 <UART_SetConfig+0x348>
 8005138:	2304      	movs	r3, #4
 800513a:	77fb      	strb	r3, [r7, #31]
 800513c:	e14a      	b.n	80053d4 <UART_SetConfig+0x348>
 800513e:	2308      	movs	r3, #8
 8005140:	77fb      	strb	r3, [r7, #31]
 8005142:	e147      	b.n	80053d4 <UART_SetConfig+0x348>
 8005144:	2310      	movs	r3, #16
 8005146:	77fb      	strb	r3, [r7, #31]
 8005148:	e144      	b.n	80053d4 <UART_SetConfig+0x348>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a83      	ldr	r2, [pc, #524]	; (800535c <UART_SetConfig+0x2d0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d132      	bne.n	80051ba <UART_SetConfig+0x12e>
 8005154:	4b80      	ldr	r3, [pc, #512]	; (8005358 <UART_SetConfig+0x2cc>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515a:	f003 030c 	and.w	r3, r3, #12
 800515e:	2b0c      	cmp	r3, #12
 8005160:	d828      	bhi.n	80051b4 <UART_SetConfig+0x128>
 8005162:	a201      	add	r2, pc, #4	; (adr r2, 8005168 <UART_SetConfig+0xdc>)
 8005164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005168:	0800519d 	.word	0x0800519d
 800516c:	080051b5 	.word	0x080051b5
 8005170:	080051b5 	.word	0x080051b5
 8005174:	080051b5 	.word	0x080051b5
 8005178:	080051a9 	.word	0x080051a9
 800517c:	080051b5 	.word	0x080051b5
 8005180:	080051b5 	.word	0x080051b5
 8005184:	080051b5 	.word	0x080051b5
 8005188:	080051a3 	.word	0x080051a3
 800518c:	080051b5 	.word	0x080051b5
 8005190:	080051b5 	.word	0x080051b5
 8005194:	080051b5 	.word	0x080051b5
 8005198:	080051af 	.word	0x080051af
 800519c:	2300      	movs	r3, #0
 800519e:	77fb      	strb	r3, [r7, #31]
 80051a0:	e118      	b.n	80053d4 <UART_SetConfig+0x348>
 80051a2:	2302      	movs	r3, #2
 80051a4:	77fb      	strb	r3, [r7, #31]
 80051a6:	e115      	b.n	80053d4 <UART_SetConfig+0x348>
 80051a8:	2304      	movs	r3, #4
 80051aa:	77fb      	strb	r3, [r7, #31]
 80051ac:	e112      	b.n	80053d4 <UART_SetConfig+0x348>
 80051ae:	2308      	movs	r3, #8
 80051b0:	77fb      	strb	r3, [r7, #31]
 80051b2:	e10f      	b.n	80053d4 <UART_SetConfig+0x348>
 80051b4:	2310      	movs	r3, #16
 80051b6:	77fb      	strb	r3, [r7, #31]
 80051b8:	e10c      	b.n	80053d4 <UART_SetConfig+0x348>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a68      	ldr	r2, [pc, #416]	; (8005360 <UART_SetConfig+0x2d4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d120      	bne.n	8005206 <UART_SetConfig+0x17a>
 80051c4:	4b64      	ldr	r3, [pc, #400]	; (8005358 <UART_SetConfig+0x2cc>)
 80051c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051ce:	2b30      	cmp	r3, #48	; 0x30
 80051d0:	d013      	beq.n	80051fa <UART_SetConfig+0x16e>
 80051d2:	2b30      	cmp	r3, #48	; 0x30
 80051d4:	d814      	bhi.n	8005200 <UART_SetConfig+0x174>
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d009      	beq.n	80051ee <UART_SetConfig+0x162>
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d810      	bhi.n	8005200 <UART_SetConfig+0x174>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <UART_SetConfig+0x15c>
 80051e2:	2b10      	cmp	r3, #16
 80051e4:	d006      	beq.n	80051f4 <UART_SetConfig+0x168>
 80051e6:	e00b      	b.n	8005200 <UART_SetConfig+0x174>
 80051e8:	2300      	movs	r3, #0
 80051ea:	77fb      	strb	r3, [r7, #31]
 80051ec:	e0f2      	b.n	80053d4 <UART_SetConfig+0x348>
 80051ee:	2302      	movs	r3, #2
 80051f0:	77fb      	strb	r3, [r7, #31]
 80051f2:	e0ef      	b.n	80053d4 <UART_SetConfig+0x348>
 80051f4:	2304      	movs	r3, #4
 80051f6:	77fb      	strb	r3, [r7, #31]
 80051f8:	e0ec      	b.n	80053d4 <UART_SetConfig+0x348>
 80051fa:	2308      	movs	r3, #8
 80051fc:	77fb      	strb	r3, [r7, #31]
 80051fe:	e0e9      	b.n	80053d4 <UART_SetConfig+0x348>
 8005200:	2310      	movs	r3, #16
 8005202:	77fb      	strb	r3, [r7, #31]
 8005204:	e0e6      	b.n	80053d4 <UART_SetConfig+0x348>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a56      	ldr	r2, [pc, #344]	; (8005364 <UART_SetConfig+0x2d8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d120      	bne.n	8005252 <UART_SetConfig+0x1c6>
 8005210:	4b51      	ldr	r3, [pc, #324]	; (8005358 <UART_SetConfig+0x2cc>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005216:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800521a:	2bc0      	cmp	r3, #192	; 0xc0
 800521c:	d013      	beq.n	8005246 <UART_SetConfig+0x1ba>
 800521e:	2bc0      	cmp	r3, #192	; 0xc0
 8005220:	d814      	bhi.n	800524c <UART_SetConfig+0x1c0>
 8005222:	2b80      	cmp	r3, #128	; 0x80
 8005224:	d009      	beq.n	800523a <UART_SetConfig+0x1ae>
 8005226:	2b80      	cmp	r3, #128	; 0x80
 8005228:	d810      	bhi.n	800524c <UART_SetConfig+0x1c0>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <UART_SetConfig+0x1a8>
 800522e:	2b40      	cmp	r3, #64	; 0x40
 8005230:	d006      	beq.n	8005240 <UART_SetConfig+0x1b4>
 8005232:	e00b      	b.n	800524c <UART_SetConfig+0x1c0>
 8005234:	2300      	movs	r3, #0
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e0cc      	b.n	80053d4 <UART_SetConfig+0x348>
 800523a:	2302      	movs	r3, #2
 800523c:	77fb      	strb	r3, [r7, #31]
 800523e:	e0c9      	b.n	80053d4 <UART_SetConfig+0x348>
 8005240:	2304      	movs	r3, #4
 8005242:	77fb      	strb	r3, [r7, #31]
 8005244:	e0c6      	b.n	80053d4 <UART_SetConfig+0x348>
 8005246:	2308      	movs	r3, #8
 8005248:	77fb      	strb	r3, [r7, #31]
 800524a:	e0c3      	b.n	80053d4 <UART_SetConfig+0x348>
 800524c:	2310      	movs	r3, #16
 800524e:	77fb      	strb	r3, [r7, #31]
 8005250:	e0c0      	b.n	80053d4 <UART_SetConfig+0x348>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a44      	ldr	r2, [pc, #272]	; (8005368 <UART_SetConfig+0x2dc>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d125      	bne.n	80052a8 <UART_SetConfig+0x21c>
 800525c:	4b3e      	ldr	r3, [pc, #248]	; (8005358 <UART_SetConfig+0x2cc>)
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800526a:	d017      	beq.n	800529c <UART_SetConfig+0x210>
 800526c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005270:	d817      	bhi.n	80052a2 <UART_SetConfig+0x216>
 8005272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005276:	d00b      	beq.n	8005290 <UART_SetConfig+0x204>
 8005278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800527c:	d811      	bhi.n	80052a2 <UART_SetConfig+0x216>
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <UART_SetConfig+0x1fe>
 8005282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005286:	d006      	beq.n	8005296 <UART_SetConfig+0x20a>
 8005288:	e00b      	b.n	80052a2 <UART_SetConfig+0x216>
 800528a:	2300      	movs	r3, #0
 800528c:	77fb      	strb	r3, [r7, #31]
 800528e:	e0a1      	b.n	80053d4 <UART_SetConfig+0x348>
 8005290:	2302      	movs	r3, #2
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	e09e      	b.n	80053d4 <UART_SetConfig+0x348>
 8005296:	2304      	movs	r3, #4
 8005298:	77fb      	strb	r3, [r7, #31]
 800529a:	e09b      	b.n	80053d4 <UART_SetConfig+0x348>
 800529c:	2308      	movs	r3, #8
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e098      	b.n	80053d4 <UART_SetConfig+0x348>
 80052a2:	2310      	movs	r3, #16
 80052a4:	77fb      	strb	r3, [r7, #31]
 80052a6:	e095      	b.n	80053d4 <UART_SetConfig+0x348>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a2f      	ldr	r2, [pc, #188]	; (800536c <UART_SetConfig+0x2e0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d125      	bne.n	80052fe <UART_SetConfig+0x272>
 80052b2:	4b29      	ldr	r3, [pc, #164]	; (8005358 <UART_SetConfig+0x2cc>)
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052c0:	d017      	beq.n	80052f2 <UART_SetConfig+0x266>
 80052c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052c6:	d817      	bhi.n	80052f8 <UART_SetConfig+0x26c>
 80052c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052cc:	d00b      	beq.n	80052e6 <UART_SetConfig+0x25a>
 80052ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d2:	d811      	bhi.n	80052f8 <UART_SetConfig+0x26c>
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <UART_SetConfig+0x254>
 80052d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052dc:	d006      	beq.n	80052ec <UART_SetConfig+0x260>
 80052de:	e00b      	b.n	80052f8 <UART_SetConfig+0x26c>
 80052e0:	2301      	movs	r3, #1
 80052e2:	77fb      	strb	r3, [r7, #31]
 80052e4:	e076      	b.n	80053d4 <UART_SetConfig+0x348>
 80052e6:	2302      	movs	r3, #2
 80052e8:	77fb      	strb	r3, [r7, #31]
 80052ea:	e073      	b.n	80053d4 <UART_SetConfig+0x348>
 80052ec:	2304      	movs	r3, #4
 80052ee:	77fb      	strb	r3, [r7, #31]
 80052f0:	e070      	b.n	80053d4 <UART_SetConfig+0x348>
 80052f2:	2308      	movs	r3, #8
 80052f4:	77fb      	strb	r3, [r7, #31]
 80052f6:	e06d      	b.n	80053d4 <UART_SetConfig+0x348>
 80052f8:	2310      	movs	r3, #16
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e06a      	b.n	80053d4 <UART_SetConfig+0x348>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <UART_SetConfig+0x2e4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d138      	bne.n	800537a <UART_SetConfig+0x2ee>
 8005308:	4b13      	ldr	r3, [pc, #76]	; (8005358 <UART_SetConfig+0x2cc>)
 800530a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005312:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005316:	d017      	beq.n	8005348 <UART_SetConfig+0x2bc>
 8005318:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800531c:	d82a      	bhi.n	8005374 <UART_SetConfig+0x2e8>
 800531e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005322:	d00b      	beq.n	800533c <UART_SetConfig+0x2b0>
 8005324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005328:	d824      	bhi.n	8005374 <UART_SetConfig+0x2e8>
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <UART_SetConfig+0x2aa>
 800532e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005332:	d006      	beq.n	8005342 <UART_SetConfig+0x2b6>
 8005334:	e01e      	b.n	8005374 <UART_SetConfig+0x2e8>
 8005336:	2300      	movs	r3, #0
 8005338:	77fb      	strb	r3, [r7, #31]
 800533a:	e04b      	b.n	80053d4 <UART_SetConfig+0x348>
 800533c:	2302      	movs	r3, #2
 800533e:	77fb      	strb	r3, [r7, #31]
 8005340:	e048      	b.n	80053d4 <UART_SetConfig+0x348>
 8005342:	2304      	movs	r3, #4
 8005344:	77fb      	strb	r3, [r7, #31]
 8005346:	e045      	b.n	80053d4 <UART_SetConfig+0x348>
 8005348:	2308      	movs	r3, #8
 800534a:	77fb      	strb	r3, [r7, #31]
 800534c:	e042      	b.n	80053d4 <UART_SetConfig+0x348>
 800534e:	bf00      	nop
 8005350:	efff69f3 	.word	0xefff69f3
 8005354:	40011000 	.word	0x40011000
 8005358:	40023800 	.word	0x40023800
 800535c:	40004400 	.word	0x40004400
 8005360:	40004800 	.word	0x40004800
 8005364:	40004c00 	.word	0x40004c00
 8005368:	40005000 	.word	0x40005000
 800536c:	40011400 	.word	0x40011400
 8005370:	40007800 	.word	0x40007800
 8005374:	2310      	movs	r3, #16
 8005376:	77fb      	strb	r3, [r7, #31]
 8005378:	e02c      	b.n	80053d4 <UART_SetConfig+0x348>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a72      	ldr	r2, [pc, #456]	; (8005548 <UART_SetConfig+0x4bc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d125      	bne.n	80053d0 <UART_SetConfig+0x344>
 8005384:	4b71      	ldr	r3, [pc, #452]	; (800554c <UART_SetConfig+0x4c0>)
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800538e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005392:	d017      	beq.n	80053c4 <UART_SetConfig+0x338>
 8005394:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005398:	d817      	bhi.n	80053ca <UART_SetConfig+0x33e>
 800539a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800539e:	d00b      	beq.n	80053b8 <UART_SetConfig+0x32c>
 80053a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053a4:	d811      	bhi.n	80053ca <UART_SetConfig+0x33e>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <UART_SetConfig+0x326>
 80053aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ae:	d006      	beq.n	80053be <UART_SetConfig+0x332>
 80053b0:	e00b      	b.n	80053ca <UART_SetConfig+0x33e>
 80053b2:	2300      	movs	r3, #0
 80053b4:	77fb      	strb	r3, [r7, #31]
 80053b6:	e00d      	b.n	80053d4 <UART_SetConfig+0x348>
 80053b8:	2302      	movs	r3, #2
 80053ba:	77fb      	strb	r3, [r7, #31]
 80053bc:	e00a      	b.n	80053d4 <UART_SetConfig+0x348>
 80053be:	2304      	movs	r3, #4
 80053c0:	77fb      	strb	r3, [r7, #31]
 80053c2:	e007      	b.n	80053d4 <UART_SetConfig+0x348>
 80053c4:	2308      	movs	r3, #8
 80053c6:	77fb      	strb	r3, [r7, #31]
 80053c8:	e004      	b.n	80053d4 <UART_SetConfig+0x348>
 80053ca:	2310      	movs	r3, #16
 80053cc:	77fb      	strb	r3, [r7, #31]
 80053ce:	e001      	b.n	80053d4 <UART_SetConfig+0x348>
 80053d0:	2310      	movs	r3, #16
 80053d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053dc:	d15b      	bne.n	8005496 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80053de:	7ffb      	ldrb	r3, [r7, #31]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d828      	bhi.n	8005436 <UART_SetConfig+0x3aa>
 80053e4:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <UART_SetConfig+0x360>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	08005411 	.word	0x08005411
 80053f0:	08005419 	.word	0x08005419
 80053f4:	08005421 	.word	0x08005421
 80053f8:	08005437 	.word	0x08005437
 80053fc:	08005427 	.word	0x08005427
 8005400:	08005437 	.word	0x08005437
 8005404:	08005437 	.word	0x08005437
 8005408:	08005437 	.word	0x08005437
 800540c:	0800542f 	.word	0x0800542f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005410:	f7fd ff32 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8005414:	61b8      	str	r0, [r7, #24]
        break;
 8005416:	e013      	b.n	8005440 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005418:	f7fd ff42 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 800541c:	61b8      	str	r0, [r7, #24]
        break;
 800541e:	e00f      	b.n	8005440 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005420:	4b4b      	ldr	r3, [pc, #300]	; (8005550 <UART_SetConfig+0x4c4>)
 8005422:	61bb      	str	r3, [r7, #24]
        break;
 8005424:	e00c      	b.n	8005440 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005426:	f7fd fe15 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 800542a:	61b8      	str	r0, [r7, #24]
        break;
 800542c:	e008      	b.n	8005440 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800542e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005432:	61bb      	str	r3, [r7, #24]
        break;
 8005434:	e004      	b.n	8005440 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	77bb      	strb	r3, [r7, #30]
        break;
 800543e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d074      	beq.n	8005530 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	005a      	lsls	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	085b      	lsrs	r3, r3, #1
 8005450:	441a      	add	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	fbb2 f3f3 	udiv	r3, r2, r3
 800545a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	2b0f      	cmp	r3, #15
 8005460:	d916      	bls.n	8005490 <UART_SetConfig+0x404>
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005468:	d212      	bcs.n	8005490 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f023 030f 	bic.w	r3, r3, #15
 8005472:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	085b      	lsrs	r3, r3, #1
 8005478:	b29b      	uxth	r3, r3
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	b29a      	uxth	r2, r3
 8005480:	89fb      	ldrh	r3, [r7, #14]
 8005482:	4313      	orrs	r3, r2
 8005484:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	89fa      	ldrh	r2, [r7, #14]
 800548c:	60da      	str	r2, [r3, #12]
 800548e:	e04f      	b.n	8005530 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	77bb      	strb	r3, [r7, #30]
 8005494:	e04c      	b.n	8005530 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005496:	7ffb      	ldrb	r3, [r7, #31]
 8005498:	2b08      	cmp	r3, #8
 800549a:	d828      	bhi.n	80054ee <UART_SetConfig+0x462>
 800549c:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <UART_SetConfig+0x418>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080054c9 	.word	0x080054c9
 80054a8:	080054d1 	.word	0x080054d1
 80054ac:	080054d9 	.word	0x080054d9
 80054b0:	080054ef 	.word	0x080054ef
 80054b4:	080054df 	.word	0x080054df
 80054b8:	080054ef 	.word	0x080054ef
 80054bc:	080054ef 	.word	0x080054ef
 80054c0:	080054ef 	.word	0x080054ef
 80054c4:	080054e7 	.word	0x080054e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c8:	f7fd fed6 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 80054cc:	61b8      	str	r0, [r7, #24]
        break;
 80054ce:	e013      	b.n	80054f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d0:	f7fd fee6 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 80054d4:	61b8      	str	r0, [r7, #24]
        break;
 80054d6:	e00f      	b.n	80054f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d8:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <UART_SetConfig+0x4c4>)
 80054da:	61bb      	str	r3, [r7, #24]
        break;
 80054dc:	e00c      	b.n	80054f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054de:	f7fd fdb9 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 80054e2:	61b8      	str	r0, [r7, #24]
        break;
 80054e4:	e008      	b.n	80054f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ea:	61bb      	str	r3, [r7, #24]
        break;
 80054ec:	e004      	b.n	80054f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	77bb      	strb	r3, [r7, #30]
        break;
 80054f6:	bf00      	nop
    }

    if (pclk != 0U)
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d018      	beq.n	8005530 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	085a      	lsrs	r2, r3, #1
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	441a      	add	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005510:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b0f      	cmp	r3, #15
 8005516:	d909      	bls.n	800552c <UART_SetConfig+0x4a0>
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551e:	d205      	bcs.n	800552c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	b29a      	uxth	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	60da      	str	r2, [r3, #12]
 800552a:	e001      	b.n	8005530 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800553c:	7fbb      	ldrb	r3, [r7, #30]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3720      	adds	r7, #32
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40007c00 	.word	0x40007c00
 800554c:	40023800 	.word	0x40023800
 8005550:	00f42400 	.word	0x00f42400

08005554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01a      	beq.n	800566a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005652:	d10a      	bne.n	800566a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af02      	add	r7, sp, #8
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056a8:	f7fc f888 	bl	80017bc <HAL_GetTick>
 80056ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d10e      	bne.n	80056da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f81b 	bl	8005706 <UART_WaitOnFlagUntilTimeout>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e011      	b.n	80056fe <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2220      	movs	r2, #32
 80056de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b09c      	sub	sp, #112	; 0x70
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	603b      	str	r3, [r7, #0]
 8005712:	4613      	mov	r3, r2
 8005714:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005716:	e0a7      	b.n	8005868 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800571e:	f000 80a3 	beq.w	8005868 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005722:	f7fc f84b 	bl	80017bc <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800572e:	429a      	cmp	r2, r3
 8005730:	d302      	bcc.n	8005738 <UART_WaitOnFlagUntilTimeout+0x32>
 8005732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005734:	2b00      	cmp	r3, #0
 8005736:	d13f      	bne.n	80057b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005748:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800574c:	667b      	str	r3, [r7, #100]	; 0x64
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005756:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005758:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800575c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e6      	bne.n	8005738 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3308      	adds	r3, #8
 8005770:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	f023 0301 	bic.w	r3, r3, #1
 8005780:	663b      	str	r3, [r7, #96]	; 0x60
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3308      	adds	r3, #8
 8005788:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800578a:	64ba      	str	r2, [r7, #72]	; 0x48
 800578c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e5      	bne.n	800576a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2220      	movs	r2, #32
 80057a2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e068      	b.n	800588a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d050      	beq.n	8005868 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d4:	d148      	bne.n	8005868 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005800:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800580c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e6      	bne.n	80057e0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3308      	adds	r3, #8
 8005818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	613b      	str	r3, [r7, #16]
   return(result);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	66bb      	str	r3, [r7, #104]	; 0x68
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3308      	adds	r3, #8
 8005830:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005832:	623a      	str	r2, [r7, #32]
 8005834:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	69f9      	ldr	r1, [r7, #28]
 8005838:	6a3a      	ldr	r2, [r7, #32]
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e5      	bne.n	8005812 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2220      	movs	r2, #32
 800584a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e010      	b.n	800588a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69da      	ldr	r2, [r3, #28]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4013      	ands	r3, r2
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	429a      	cmp	r2, r3
 8005876:	bf0c      	ite	eq
 8005878:	2301      	moveq	r3, #1
 800587a:	2300      	movne	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	461a      	mov	r2, r3
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	429a      	cmp	r2, r3
 8005884:	f43f af48 	beq.w	8005718 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3770      	adds	r7, #112	; 0x70
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005892:	b480      	push	{r7}
 8005894:	b095      	sub	sp, #84	; 0x54
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	461a      	mov	r2, r3
 80058b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b8:	643b      	str	r3, [r7, #64]	; 0x40
 80058ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e6      	bne.n	800589a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3308      	adds	r3, #8
 80058d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	e853 3f00 	ldrex	r3, [r3]
 80058da:	61fb      	str	r3, [r7, #28]
   return(result);
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f023 0301 	bic.w	r3, r3, #1
 80058e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3308      	adds	r3, #8
 80058ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e5      	bne.n	80058cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005904:	2b01      	cmp	r3, #1
 8005906:	d118      	bne.n	800593a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	60bb      	str	r3, [r7, #8]
   return(result);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f023 0310 	bic.w	r3, r3, #16
 800591c:	647b      	str	r3, [r7, #68]	; 0x44
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	461a      	mov	r2, r3
 8005924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005926:	61bb      	str	r3, [r7, #24]
 8005928:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	6979      	ldr	r1, [r7, #20]
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	613b      	str	r3, [r7, #16]
   return(result);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e6      	bne.n	8005908 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800594e:	bf00      	nop
 8005950:	3754      	adds	r7, #84	; 0x54
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b084      	sub	sp, #16
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b088      	sub	sp, #32
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	60bb      	str	r3, [r7, #8]
   return(result);
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	461a      	mov	r2, r3
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	61bb      	str	r3, [r7, #24]
 80059b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	6979      	ldr	r1, [r7, #20]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	e841 2300 	strex	r3, r2, [r1]
 80059bc:	613b      	str	r3, [r7, #16]
   return(result);
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e6      	bne.n	8005992 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059da:	bf00      	nop
 80059dc:	3720      	adds	r7, #32
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <memset>:
 80059e2:	4402      	add	r2, r0
 80059e4:	4603      	mov	r3, r0
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d100      	bne.n	80059ec <memset+0xa>
 80059ea:	4770      	bx	lr
 80059ec:	f803 1b01 	strb.w	r1, [r3], #1
 80059f0:	e7f9      	b.n	80059e6 <memset+0x4>
	...

080059f4 <__libc_init_array>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	4d0d      	ldr	r5, [pc, #52]	; (8005a2c <__libc_init_array+0x38>)
 80059f8:	4c0d      	ldr	r4, [pc, #52]	; (8005a30 <__libc_init_array+0x3c>)
 80059fa:	1b64      	subs	r4, r4, r5
 80059fc:	10a4      	asrs	r4, r4, #2
 80059fe:	2600      	movs	r6, #0
 8005a00:	42a6      	cmp	r6, r4
 8005a02:	d109      	bne.n	8005a18 <__libc_init_array+0x24>
 8005a04:	4d0b      	ldr	r5, [pc, #44]	; (8005a34 <__libc_init_array+0x40>)
 8005a06:	4c0c      	ldr	r4, [pc, #48]	; (8005a38 <__libc_init_array+0x44>)
 8005a08:	f000 f818 	bl	8005a3c <_init>
 8005a0c:	1b64      	subs	r4, r4, r5
 8005a0e:	10a4      	asrs	r4, r4, #2
 8005a10:	2600      	movs	r6, #0
 8005a12:	42a6      	cmp	r6, r4
 8005a14:	d105      	bne.n	8005a22 <__libc_init_array+0x2e>
 8005a16:	bd70      	pop	{r4, r5, r6, pc}
 8005a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1c:	4798      	blx	r3
 8005a1e:	3601      	adds	r6, #1
 8005a20:	e7ee      	b.n	8005a00 <__libc_init_array+0xc>
 8005a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a26:	4798      	blx	r3
 8005a28:	3601      	adds	r6, #1
 8005a2a:	e7f2      	b.n	8005a12 <__libc_init_array+0x1e>
 8005a2c:	08005a74 	.word	0x08005a74
 8005a30:	08005a74 	.word	0x08005a74
 8005a34:	08005a74 	.word	0x08005a74
 8005a38:	08005a7c 	.word	0x08005a7c

08005a3c <_init>:
 8005a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3e:	bf00      	nop
 8005a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a42:	bc08      	pop	{r3}
 8005a44:	469e      	mov	lr, r3
 8005a46:	4770      	bx	lr

08005a48 <_fini>:
 8005a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4a:	bf00      	nop
 8005a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a4e:	bc08      	pop	{r3}
 8005a50:	469e      	mov	lr, r3
 8005a52:	4770      	bx	lr
