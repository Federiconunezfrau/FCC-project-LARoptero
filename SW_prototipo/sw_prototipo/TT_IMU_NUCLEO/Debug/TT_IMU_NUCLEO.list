
TT_IMU_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009530  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080096f8  080096f8  000196f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097ec  080097ec  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  080097ec  080097ec  000197ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097f4  080097f4  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097f4  080097f4  000197f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097f8  080097f8  000197f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  080097fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  20000118  08009914  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08009914  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 13 .debug_info   000233e4  00000000  00000000  0002018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f71  00000000  00000000  0004356f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae0  00000000  00000000  000494e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001468  00000000  00000000  0004afc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e354  00000000  00000000  0004c428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022b57  00000000  00000000  0007a77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00104b8d  00000000  00000000  0009d2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007448  00000000  00000000  001a1e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001a92a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000118 	.word	0x20000118
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080096e0 	.word	0x080096e0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000011c 	.word	0x2000011c
 8000204:	080096e0 	.word	0x080096e0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <_Z15CNI_constructorP19__CAN_HandleTypeDef>:

static CNI_t _instance;


void CNI_constructor(CAN_HandleTypeDef *hcan)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	_instance.mHcan_ = hcan;
 800050c:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6013      	str	r3, [r2, #0]

	_instance.mCANtxHeader_.ExtId = 0;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
	_instance.mCANtxHeader_.IDE = CAN_ID_STD;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
	_instance.mCANtxHeader_.RTR = CAN_RTR_DATA;
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
	_instance.mCANtxHeader_.TransmitGlobalTime = DISABLE;
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000526:	2200      	movs	r2, #0
 8000528:	771a      	strb	r2, [r3, #28]
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000134 	.word	0x20000134

0800053c <_Z8CNI_initv>:


void CNI_init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i = 0; i < lenCANfilterList ; i++)
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	e00e      	b.n	8000566 <_Z8CNI_initv+0x2a>
	{
		HAL_CAN_ConfigFilter(_instance.mHcan_, &CANfiltersList[i]);
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <_Z8CNI_initv+0x40>)
 800054a:	6818      	ldr	r0, [r3, #0]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	00db      	lsls	r3, r3, #3
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <_Z8CNI_initv+0x44>)
 8000558:	4413      	add	r3, r2
 800055a:	4619      	mov	r1, r3
 800055c:	f004 fbe6 	bl	8004d2c <HAL_CAN_ConfigFilter>
	for(i = 0; i < lenCANfilterList ; i++)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3301      	adds	r3, #1
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <_Z8CNI_initv+0x48>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	d3eb      	bcc.n	8000548 <_Z8CNI_initv+0xc>
	}
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000134 	.word	0x20000134
 8000580:	2000008c 	.word	0x2000008c
 8000584:	200000b8 	.word	0x200000b8

08000588 <_Z9CNI_startv>:


void CNI_start(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_CAN_Start(_instance.mHcan_);
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <_Z9CNI_startv+0x14>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f004 fcab 	bl	8004eec <HAL_CAN_Start>
#if !IS_MASTER
    HAL_CAN_ActivateNotification(_instance.mHcan_, CAN_IT_RX_FIFO0_MSG_PENDING);
#endif
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000134 	.word	0x20000134

080005a0 <_Z12CNI_send_msgm>:


CNI_status_t CNI_send_msg(uint32_t msgHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	uint32_t txMailbox;
	serviceID currentMsgServiceID;
	uint32_t i;

	if(msgHandle >= lenCANmsgList)
 80005a8:	4b41      	ldr	r3, [pc, #260]	; (80006b0 <_Z12CNI_send_msgm+0x110>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d301      	bcc.n	80005b6 <_Z12CNI_send_msgm+0x16>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 80005b2:	2301      	movs	r3, #1
 80005b4:	e077      	b.n	80006a6 <_Z12CNI_send_msgm+0x106>
	}

	if(CANmsgList[msgHandle].mNodeID_ != MY_NODE_ID)
 80005b6:	493f      	ldr	r1, [pc, #252]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	440b      	add	r3, r1
 80005c4:	3304      	adds	r3, #4
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <_Z12CNI_send_msgm+0x30>
	{
		return CNI_MSG_HANDLE_TX_NOT_ALLOWED;
 80005cc:	2302      	movs	r3, #2
 80005ce:	e06a      	b.n	80006a6 <_Z12CNI_send_msgm+0x106>
	}

	// Armar el mensaje
	currentMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 80005d0:	4938      	ldr	r1, [pc, #224]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	4613      	mov	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	4413      	add	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	440b      	add	r3, r1
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	613b      	str	r3, [r7, #16]
	_instance.mCANtxHeader_.StdId = CAN_MSG_MAKE_STD_ID_TX(currentMsgServiceID);
 80005e2:	693b      	ldr	r3, [r7, #16]
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	4a34      	ldr	r2, [pc, #208]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 80005e8:	6093      	str	r3, [r2, #8]

	// Pasarle el msj al periférico

	// Limpia todos los mensajes pendientes (no debería haber ninguno, pero por las dudas)
	HAL_CAN_AbortTxRequest(_instance.mHcan_,CAN_TX_MAILBOX0|CAN_TX_MAILBOX1|CAN_TX_MAILBOX2);
 80005ea:	4b33      	ldr	r3, [pc, #204]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2107      	movs	r1, #7
 80005f0:	4618      	mov	r0, r3
 80005f2:	f004 fd8f 	bl	8005114 <HAL_CAN_AbortTxRequest>

	// Comenzando por la posición "msgHandle" se recorre la lista de mensajes. Esto es debido
	// a que es posible que se requiera enviar más de un mensaje.
	i = msgHandle;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 80005fa:	e02a      	b.n	8000652 <_Z12CNI_send_msgm+0xb2>
	{
		while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 80005fc:	bf00      	nop
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f004 fdcb 	bl	800519e <HAL_CAN_GetTxMailboxesFreeLevel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	bf0c      	ite	eq
 800060e:	2301      	moveq	r3, #1
 8000610:	2300      	movne	r3, #0
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1f2      	bne.n	80005fe <_Z12CNI_send_msgm+0x5e>

		_instance.mCANtxHeader_.DLC = CANmsgList[i].mLenPayload_;
 8000618:	4926      	ldr	r1, [pc, #152]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	4613      	mov	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4413      	add	r3, r2
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	440b      	add	r3, r1
 8000626:	3310      	adds	r3, #16
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 800062c:	6193      	str	r3, [r2, #24]
		HAL_CAN_AddTxMessage(_instance.mHcan_, &_instance.mCANtxHeader_, CANmsgList[i].mPayload_, &txMailbox);
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 8000630:	6818      	ldr	r0, [r3, #0]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	4613      	mov	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	4413      	add	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	3308      	adds	r3, #8
 800063e:	4a1d      	ldr	r2, [pc, #116]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 8000640:	441a      	add	r2, r3
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	491d      	ldr	r1, [pc, #116]	; (80006bc <_Z12CNI_send_msgm+0x11c>)
 8000648:	f004 fc94 	bl	8004f74 <HAL_CAN_AddTxMessage>
		i++;
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	3301      	adds	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <_Z12CNI_send_msgm+0x110>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	697a      	ldr	r2, [r7, #20]
 8000658:	429a      	cmp	r2, r3
 800065a:	d215      	bcs.n	8000688 <_Z12CNI_send_msgm+0xe8>
 800065c:	4915      	ldr	r1, [pc, #84]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 800065e:	697a      	ldr	r2, [r7, #20]
 8000660:	4613      	mov	r3, r2
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4413      	add	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	440b      	add	r3, r1
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	693a      	ldr	r2, [r7, #16]
 800066e:	429a      	cmp	r2, r3
 8000670:	d10a      	bne.n	8000688 <_Z12CNI_send_msgm+0xe8>
 8000672:	4910      	ldr	r1, [pc, #64]	; (80006b4 <_Z12CNI_send_msgm+0x114>)
 8000674:	697a      	ldr	r2, [r7, #20]
 8000676:	4613      	mov	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4413      	add	r3, r2
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	440b      	add	r3, r1
 8000680:	3304      	adds	r3, #4
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0b9      	beq.n	80005fc <_Z12CNI_send_msgm+0x5c>
	}

	// Antes de retornar, se queda esperando a que se terminen de enviar todos los mensajes
	while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 8000688:	bf00      	nop
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <_Z12CNI_send_msgm+0x118>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fd85 	bl	800519e <HAL_CAN_GetTxMailboxesFreeLevel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	bf0c      	ite	eq
 800069a:	2301      	moveq	r3, #1
 800069c:	2300      	movne	r3, #0
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f2      	bne.n	800068a <_Z12CNI_send_msgm+0xea>

	return CNI_OK;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000b4 	.word	0x200000b4
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000134 	.word	0x20000134
 80006bc:	2000013c 	.word	0x2000013c

080006c0 <_Z22CNI_update_msg_contentmPhm>:

	return CNI_OK;
}

CNI_status_t CNI_update_msg_content(uint32_t msgHandle, uint8_t *payload, uint32_t lenPayload)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
	serviceID rxMsgServiceID;
	uint32_t rxNodeID;
	uint32_t auxLenPayload;

	// Chequear si el msgHandle es válido
	if(msgHandle >= lenCANmsgList)
 80006cc:	4b48      	ldr	r3, [pc, #288]	; (80007f0 <_Z22CNI_update_msg_contentmPhm+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d301      	bcc.n	80006da <_Z22CNI_update_msg_contentmPhm+0x1a>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e086      	b.n	80007e8 <_Z22CNI_update_msg_contentmPhm+0x128>
	}

	if(CANmsgList[msgHandle].mNodeID_ != MY_NODE_ID)
 80006da:	4946      	ldr	r1, [pc, #280]	; (80007f4 <_Z22CNI_update_msg_contentmPhm+0x134>)
 80006dc:	68fa      	ldr	r2, [r7, #12]
 80006de:	4613      	mov	r3, r2
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	440b      	add	r3, r1
 80006e8:	3304      	adds	r3, #4
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <_Z22CNI_update_msg_contentmPhm+0x34>
	{
		return CNI_MSG_HANDLE_TX_NOT_ALLOWED;
 80006f0:	2302      	movs	r3, #2
 80006f2:	e079      	b.n	80007e8 <_Z22CNI_update_msg_contentmPhm+0x128>
	}

	i = msgHandle;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	61fb      	str	r3, [r7, #28]
	rxMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 80006f8:	493e      	ldr	r1, [pc, #248]	; (80007f4 <_Z22CNI_update_msg_contentmPhm+0x134>)
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	4613      	mov	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	440b      	add	r3, r1
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	617b      	str	r3, [r7, #20]
	rxNodeID = CANmsgList[msgHandle].mNodeID_;
 800070a:	493a      	ldr	r1, [pc, #232]	; (80007f4 <_Z22CNI_update_msg_contentmPhm+0x134>)
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	4613      	mov	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	440b      	add	r3, r1
 8000718:	3304      	adds	r3, #4
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	613b      	str	r3, [r7, #16]
	auxLenPayload = lenPayload;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	61bb      	str	r3, [r7, #24]

	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID) && (auxLenPayload > 0))
 8000722:	e041      	b.n	80007a8 <_Z22CNI_update_msg_contentmPhm+0xe8>
	{
		if(auxLenPayload > MAX_LEN_PAYLOAD_CAN)
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	2b08      	cmp	r3, #8
 8000728:	d91e      	bls.n	8000768 <_Z22CNI_update_msg_contentmPhm+0xa8>
		{
			//memcpy(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], MAX_LEN_PAYLOAD_CAN);
			my_copy_array_of_uint8(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], MAX_LEN_PAYLOAD_CAN);
 800072a:	69fa      	ldr	r2, [r7, #28]
 800072c:	4613      	mov	r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4413      	add	r3, r2
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	3308      	adds	r3, #8
 8000736:	4a2f      	ldr	r2, [pc, #188]	; (80007f4 <_Z22CNI_update_msg_contentmPhm+0x134>)
 8000738:	1898      	adds	r0, r3, r2
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	68ba      	ldr	r2, [r7, #8]
 8000742:	4413      	add	r3, r2
 8000744:	2208      	movs	r2, #8
 8000746:	4619      	mov	r1, r3
 8000748:	f003 fc6d 	bl	8004026 <_Z22my_copy_array_of_uint8PhPKhm>
			CANmsgList[i].mLenPayload_ = MAX_LEN_PAYLOAD_CAN;
 800074c:	4929      	ldr	r1, [pc, #164]	; (80007f4 <_Z22CNI_update_msg_contentmPhm+0x134>)
 800074e:	69fa      	ldr	r2, [r7, #28]
 8000750:	4613      	mov	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	440b      	add	r3, r1
 800075a:	3310      	adds	r3, #16
 800075c:	2208      	movs	r2, #8
 800075e:	601a      	str	r2, [r3, #0]
			auxLenPayload-=MAX_LEN_PAYLOAD_CAN;
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	3b08      	subs	r3, #8
 8000764:	61bb      	str	r3, [r7, #24]
 8000766:	e01c      	b.n	80007a2 <_Z22CNI_update_msg_contentmPhm+0xe2>
		}
		else
		{
			//memcpy(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], auxLenPayload);
			my_copy_array_of_uint8(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], auxLenPayload);
 8000768:	69fa      	ldr	r2, [r7, #28]
 800076a:	4613      	mov	r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	4413      	add	r3, r2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	3308      	adds	r3, #8
 8000774:	4a1f      	ldr	r2, [pc, #124]	; (80007f4 <_Z22CNI_update_msg_contentmPhm+0x134>)
 8000776:	1898      	adds	r0, r3, r2
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	4413      	add	r3, r2
 8000782:	69ba      	ldr	r2, [r7, #24]
 8000784:	4619      	mov	r1, r3
 8000786:	f003 fc4e 	bl	8004026 <_Z22my_copy_array_of_uint8PhPKhm>
			CANmsgList[i].mLenPayload_ = auxLenPayload;
 800078a:	491a      	ldr	r1, [pc, #104]	; (80007f4 <_Z22CNI_update_msg_contentmPhm+0x134>)
 800078c:	69fa      	ldr	r2, [r7, #28]
 800078e:	4613      	mov	r3, r2
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4413      	add	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	440b      	add	r3, r1
 8000798:	3310      	adds	r3, #16
 800079a:	69ba      	ldr	r2, [r7, #24]
 800079c:	601a      	str	r2, [r3, #0]
			auxLenPayload = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
		}
		i++;
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3301      	adds	r3, #1
 80007a6:	61fb      	str	r3, [r7, #28]
	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID) && (auxLenPayload > 0))
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <_Z22CNI_update_msg_contentmPhm+0x130>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	69fa      	ldr	r2, [r7, #28]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d219      	bcs.n	80007e6 <_Z22CNI_update_msg_contentmPhm+0x126>
 80007b2:	4910      	ldr	r1, [pc, #64]	; (80007f4 <_Z22CNI_update_msg_contentmPhm+0x134>)
 80007b4:	69fa      	ldr	r2, [r7, #28]
 80007b6:	4613      	mov	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	440b      	add	r3, r1
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d10e      	bne.n	80007e6 <_Z22CNI_update_msg_contentmPhm+0x126>
 80007c8:	490a      	ldr	r1, [pc, #40]	; (80007f4 <_Z22CNI_update_msg_contentmPhm+0x134>)
 80007ca:	69fa      	ldr	r2, [r7, #28]
 80007cc:	4613      	mov	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	3304      	adds	r3, #4
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d102      	bne.n	80007e6 <_Z22CNI_update_msg_contentmPhm+0x126>
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d19e      	bne.n	8000724 <_Z22CNI_update_msg_contentmPhm+0x64>
	}

	return CNI_OK;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000b4 	.word	0x200000b4
 80007f4:	20000000 	.word	0x20000000

080007f8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_CAN1_Init+0x68>)
 80007fe:	4a19      	ldr	r2, [pc, #100]	; (8000864 <MX_CAN1_Init+0x6c>)
 8000800:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_CAN1_Init+0x68>)
 8000804:	2203      	movs	r2, #3
 8000806:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_CAN1_Init+0x68>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_CAN1_Init+0x68>)
 8000810:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000814:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_CAN1_Init+0x68>)
 8000818:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800081c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_CAN1_Init+0x68>)
 8000820:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000824:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_CAN1_Init+0x68>)
 8000828:	2200      	movs	r2, #0
 800082a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_CAN1_Init+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_CAN1_Init+0x68>)
 8000834:	2200      	movs	r2, #0
 8000836:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_CAN1_Init+0x68>)
 800083a:	2200      	movs	r2, #0
 800083c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_CAN1_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_CAN1_Init+0x68>)
 8000846:	2200      	movs	r2, #0
 8000848:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_CAN1_Init+0x68>)
 800084c:	f004 f972 	bl	8004b34 <HAL_CAN_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000856:	f003 f933 	bl	8003ac0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000154 	.word	0x20000154
 8000864:	40006400 	.word	0x40006400

08000868 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <HAL_CAN_MspInit+0x7c>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d127      	bne.n	80008da <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_CAN_MspInit+0x80>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <HAL_CAN_MspInit+0x80>)
 8000890:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_CAN_MspInit+0x80>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_CAN_MspInit+0x80>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <HAL_CAN_MspInit+0x80>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_CAN_MspInit+0x80>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008ba:	2303      	movs	r3, #3
 80008bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c6:	2303      	movs	r3, #3
 80008c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008ca:	2309      	movs	r3, #9
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <HAL_CAN_MspInit+0x84>)
 80008d6:	f004 fe3b 	bl	8005550 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80008da:	bf00      	nop
 80008dc:	3728      	adds	r7, #40	; 0x28
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40006400 	.word	0x40006400
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020c00 	.word	0x40020c00

080008f0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b8b      	ldr	r3, [pc, #556]	; (8000b34 <MX_GPIO_Init+0x244>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a8a      	ldr	r2, [pc, #552]	; (8000b34 <MX_GPIO_Init+0x244>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b88      	ldr	r3, [pc, #544]	; (8000b34 <MX_GPIO_Init+0x244>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	4b85      	ldr	r3, [pc, #532]	; (8000b34 <MX_GPIO_Init+0x244>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a84      	ldr	r2, [pc, #528]	; (8000b34 <MX_GPIO_Init+0x244>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b82      	ldr	r3, [pc, #520]	; (8000b34 <MX_GPIO_Init+0x244>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b7f      	ldr	r3, [pc, #508]	; (8000b34 <MX_GPIO_Init+0x244>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a7e      	ldr	r2, [pc, #504]	; (8000b34 <MX_GPIO_Init+0x244>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b7c      	ldr	r3, [pc, #496]	; (8000b34 <MX_GPIO_Init+0x244>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b79      	ldr	r3, [pc, #484]	; (8000b34 <MX_GPIO_Init+0x244>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a78      	ldr	r2, [pc, #480]	; (8000b34 <MX_GPIO_Init+0x244>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b76      	ldr	r3, [pc, #472]	; (8000b34 <MX_GPIO_Init+0x244>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000966:	4b73      	ldr	r3, [pc, #460]	; (8000b34 <MX_GPIO_Init+0x244>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a72      	ldr	r2, [pc, #456]	; (8000b34 <MX_GPIO_Init+0x244>)
 800096c:	f043 0310 	orr.w	r3, r3, #16
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b70      	ldr	r3, [pc, #448]	; (8000b34 <MX_GPIO_Init+0x244>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0310 	and.w	r3, r3, #16
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097e:	4b6d      	ldr	r3, [pc, #436]	; (8000b34 <MX_GPIO_Init+0x244>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a6c      	ldr	r2, [pc, #432]	; (8000b34 <MX_GPIO_Init+0x244>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b6a      	ldr	r3, [pc, #424]	; (8000b34 <MX_GPIO_Init+0x244>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000996:	4b67      	ldr	r3, [pc, #412]	; (8000b34 <MX_GPIO_Init+0x244>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a66      	ldr	r2, [pc, #408]	; (8000b34 <MX_GPIO_Init+0x244>)
 800099c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b64      	ldr	r3, [pc, #400]	; (8000b34 <MX_GPIO_Init+0x244>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009b4:	4860      	ldr	r0, [pc, #384]	; (8000b38 <MX_GPIO_Init+0x248>)
 80009b6:	f004 ff77 	bl	80058a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c0:	485e      	ldr	r0, [pc, #376]	; (8000b3c <MX_GPIO_Init+0x24c>)
 80009c2:	f004 ff71 	bl	80058a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2140      	movs	r1, #64	; 0x40
 80009ca:	485d      	ldr	r0, [pc, #372]	; (8000b40 <MX_GPIO_Init+0x250>)
 80009cc:	f004 ff6c 	bl	80058a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4857      	ldr	r0, [pc, #348]	; (8000b44 <MX_GPIO_Init+0x254>)
 80009e8:	f004 fdb2 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009ec:	2332      	movs	r3, #50	; 0x32
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009fc:	230b      	movs	r3, #11
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	484f      	ldr	r0, [pc, #316]	; (8000b44 <MX_GPIO_Init+0x254>)
 8000a08:	f004 fda2 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a0c:	2386      	movs	r3, #134	; 0x86
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a1c:	230b      	movs	r3, #11
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	4848      	ldr	r0, [pc, #288]	; (8000b48 <MX_GPIO_Init+0x258>)
 8000a28:	f004 fd92 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a2c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	483c      	ldr	r0, [pc, #240]	; (8000b38 <MX_GPIO_Init+0x248>)
 8000a46:	f004 fd83 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8000a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	4836      	ldr	r0, [pc, #216]	; (8000b3c <MX_GPIO_Init+0x24c>)
 8000a64:	f004 fd74 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a7a:	230b      	movs	r3, #11
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	482c      	ldr	r0, [pc, #176]	; (8000b38 <MX_GPIO_Init+0x248>)
 8000a86:	f004 fd63 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a8a:	2340      	movs	r3, #64	; 0x40
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4827      	ldr	r0, [pc, #156]	; (8000b40 <MX_GPIO_Init+0x250>)
 8000aa2:	f004 fd55 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4821      	ldr	r0, [pc, #132]	; (8000b40 <MX_GPIO_Init+0x250>)
 8000aba:	f004 fd49 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000abe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ad0:	230a      	movs	r3, #10
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	481b      	ldr	r0, [pc, #108]	; (8000b48 <MX_GPIO_Init+0x258>)
 8000adc:	f004 fd38 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4814      	ldr	r0, [pc, #80]	; (8000b48 <MX_GPIO_Init+0x258>)
 8000af6:	f004 fd2b 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000afa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b0c:	230b      	movs	r3, #11
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	480a      	ldr	r0, [pc, #40]	; (8000b40 <MX_GPIO_Init+0x250>)
 8000b18:	f004 fd1a 	bl	8005550 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2028      	movs	r0, #40	; 0x28
 8000b22:	f004 fc4c 	bl	80053be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b26:	2028      	movs	r0, #40	; 0x28
 8000b28:	f004 fc65 	bl	80053f6 <HAL_NVIC_EnableIRQ>

}
 8000b2c:	bf00      	nop
 8000b2e:	3730      	adds	r7, #48	; 0x30
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40021800 	.word	0x40021800
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020000 	.word	0x40020000

08000b4c <_ZN5STM324gpioC1EP12GPIO_TypeDeft>:
#include "stm32f7xx_hal.h"


namespace STM32{

    gpio::gpio(GPIO_TypeDef* pPortHandler, uint16_t pin)
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	4613      	mov	r3, r2
 8000b58:	80fb      	strh	r3, [r7, #6]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 f854 	bl	8000c0a <_ZNSt8functionIFvvEEC1Ev>
    {
        m_portHandler = pPortHandler;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	68ba      	ldr	r2, [r7, #8]
 8000b66:	611a      	str	r2, [r3, #16]
        m_pin = pin;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	88fa      	ldrh	r2, [r7, #6]
 8000b6c:	829a      	strh	r2, [r3, #20]
    }
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_ZN5STM324gpio6toggleEv>:
        GPIO_PinState ret = HAL_GPIO_ReadPin(m_portHandler, m_pin);
        return ret == GPIO_PIN_SET ? GPIO_ST::HIGH : GPIO_ST::LOW;
    }

    void gpio::toggle()
    {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
        HAL_GPIO_TogglePin(m_portHandler, m_pin);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	691a      	ldr	r2, [r3, #16]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	8a9b      	ldrh	r3, [r3, #20]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	f004 fea5 	bl	80058da <HAL_GPIO_TogglePin>
    }
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <_ZN5STM324gpio5writeE7GPIO_ST>:

    void gpio::write(GPIO_ST st)
    {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
        GPIO_PinState pinState = map_hal_st_to_igpio_st(st); 
 8000ba2:	6838      	ldr	r0, [r7, #0]
 8000ba4:	f000 f80e 	bl	8000bc4 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(m_portHandler, m_pin, pinState);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6918      	ldr	r0, [r3, #16]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	8a9b      	ldrh	r3, [r3, #20]
 8000bb4:	7bfa      	ldrb	r2, [r7, #15]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f004 fe76 	bl	80058a8 <HAL_GPIO_WritePin>
    }
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>:

    GPIO_PinState gpio::map_hal_st_to_igpio_st(GPIO_ST st)
	{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
		return st == GPIO_ST::HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d101      	bne.n	8000bd6 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x12>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e000      	b.n	8000bd8 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x14>
 8000bd6:	2300      	movs	r3, #0
	}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_ZNSt14_Function_baseC1Ev>:
	  static bool
	  _M_not_empty_function(const _Tp&)
	  { return true; }
      };

    _Function_base() = default;
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	6053      	str	r3, [r2, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	461a      	mov	r2, r3
 8000c16:	2300      	movs	r3, #0
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	6053      	str	r3, [r2, #4]
 8000c1c:	6093      	str	r3, [r2, #8]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ffdf 	bl	8000be4 <_ZNSt14_Function_baseC1Ev>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
      if (_M_manager)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d005      	beq.n	8000c7e <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	4798      	blx	r3
    }
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <_ZN9iPHandler4lockEv>:
    	}else{
    		return normalMode ? reg << 1 : (reg  << 0x01 | 1);
    	}
    }

    bool lock()
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	{
		if(m_mutex){
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7a1b      	ldrb	r3, [r3, #8]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <_ZN9iPHandler4lockEv+0x14>
			return false;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	e003      	b.n	8000ca4 <_ZN9iPHandler4lockEv+0x1c>
		}
		m_mutex = true;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	721a      	strb	r2, [r3, #8]
		return true;
 8000ca2:	2301      	movs	r3, #1
	}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <_ZN9iPHandler6unlockEv>:


	bool unlock()
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	{
		if(!m_mutex){
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	7a1b      	ldrb	r3, [r3, #8]
 8000cbc:	f083 0301 	eor.w	r3, r3, #1
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <_ZN9iPHandler6unlockEv+0x1a>
			return false;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e003      	b.n	8000cd2 <_ZN9iPHandler6unlockEv+0x22>
		}
		m_mutex = false;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	721a      	strb	r2, [r3, #8]
		return true;
 8000cd0:	2301      	movs	r3, #1
	}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_ZN8ICM426888GYRO_CNFlsENS0_3ODREh>:
        constexpr uint32_t operator<<(uint8_t n, ODR odr)
        {
            return  n << static_cast<uint8_t> (odr);
        }
        constexpr uint32_t operator<<(ODR odr, uint8_t n)
        {
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (odr) << n ;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	461a      	mov	r2, r3
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
        }
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_ZN8ICM426888GYRO_CNFlsENS0_3FSREh>:
        constexpr uint32_t operator<<(uint8_t n, FSR fsr)
        {
            return  n << static_cast<uint8_t> (fsr);
        }   
        constexpr uint32_t operator<<( FSR fsr, uint8_t n)
        {
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (fsr) << n;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
        } 
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <_ZN8ICM426889ACCEL_CNFlsENS0_3ODREh>:
        constexpr uint32_t operator<<(uint8_t n, ODR odr)
        {
            return  n << static_cast<uint8_t> (odr);
        }
        constexpr uint32_t operator<<( ODR odr, uint8_t n)
        {
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (odr) << n;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
        }
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <_ZN8ICM426889ACCEL_CNFlsENS0_3FSREh>:
        constexpr uint32_t operator<<(uint8_t n, FSR fsr)
        {
            return  n << static_cast<uint8_t> (fsr);
        } 
        constexpr uint32_t operator<<(FSR fsr, uint8_t n)
        {
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	460b      	mov	r3, r1
 8000d54:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (fsr) << n;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
        } 
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_ZN8ICM4268811FIFO_CONFIG13SET_FIFO_MODEENS_9FIFO_MODEE>:
    //FIFOconfig addresses and bits
	constexpr uint8_t FIFO_CONFIG_ADD = 0x16;
	namespace FIFO_CONFIG {
		constexpr uint8_t FIFO_MODE_POS = 0x06;
		constexpr uint8_t FIFO_MODE_MASK = static_cast<uint8_t>(0xC0  << FIFO_MODE_POS);
		constexpr uint8_t SET_FIFO_MODE(FIFO_MODE fifoMode) {
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
			return  (static_cast<uint8_t>(fifoMode) << FIFO_MODE_POS);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	019b      	lsls	r3, r3, #6
 8000d7c:	b2db      	uxtb	r3, r3
		}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>:
    //Gyro config addresses and bits
    constexpr uint8_t GYRO_CONFIG0_ADD = 0x4F;
    namespace GYRO_CONFIG0 {
        constexpr uint8_t FS_SEL_POS = 0x05;
        constexpr uint8_t FS_SEL_MASK = 0x07  << FS_SEL_POS;
        constexpr uint8_t SET_FSR(uint8_t reg, GYRO_CNF::FSR fsr) {
 8000d8a:	b590      	push	{r4, r7, lr}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	6039      	str	r1, [r7, #0]
 8000d94:	71fb      	strb	r3, [r7, #7]
            return  (reg & ~FS_SEL_MASK) | ( fsr << FS_SEL_POS);
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 031f 	and.w	r3, r3, #31
 8000d9c:	b2dc      	uxtb	r4, r3
 8000d9e:	2105      	movs	r1, #5
 8000da0:	6838      	ldr	r0, [r7, #0]
 8000da2:	f7ff ffae 	bl	8000d02 <_ZN8ICM426888GYRO_CNFlsENS0_3FSREh>
 8000da6:	4603      	mov	r3, r0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4323      	orrs	r3, r4
 8000dac:	b2db      	uxtb	r3, r3
        }
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd90      	pop	{r4, r7, pc}

08000db6 <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>:

        constexpr uint8_t ODR_POS = 0x00;
        constexpr uint8_t ODR_MASK = 0x0F  << ODR_POS;
        constexpr uint8_t SET_ODR(uint8_t reg, GYRO_CNF::ODR odr) {
 8000db6:	b590      	push	{r4, r7, lr}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	6039      	str	r1, [r7, #0]
 8000dc0:	71fb      	strb	r3, [r7, #7]
            return  (reg & ~ODR_MASK) | ( odr << ODR_POS);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f023 030f 	bic.w	r3, r3, #15
 8000dc8:	b2dc      	uxtb	r4, r3
 8000dca:	2100      	movs	r1, #0
 8000dcc:	6838      	ldr	r0, [r7, #0]
 8000dce:	f7ff ff86 	bl	8000cde <_ZN8ICM426888GYRO_CNFlsENS0_3ODREh>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4323      	orrs	r3, r4
 8000dd8:	b2db      	uxtb	r3, r3
        }
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd90      	pop	{r4, r7, pc}

08000de2 <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>:
    //Accel config addresses and bits
    constexpr uint8_t ACCEL_CONFIG0_ADD = 0x50;
    namespace ACCEL_CONFIG0 {
        constexpr uint8_t FS_SEL_POS = 0x05;
        constexpr uint8_t FS_SEL_MASK = 0x07  << FS_SEL_POS;
        constexpr uint8_t SET_FSR(uint8_t reg, ACCEL_CNF::FSR fsr) {
 8000de2:	b590      	push	{r4, r7, lr}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	6039      	str	r1, [r7, #0]
 8000dec:	71fb      	strb	r3, [r7, #7]
            return   (reg & ~FS_SEL_MASK)  | ( fsr << FS_SEL_POS);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 031f 	and.w	r3, r3, #31
 8000df4:	b2dc      	uxtb	r4, r3
 8000df6:	2105      	movs	r1, #5
 8000df8:	6838      	ldr	r0, [r7, #0]
 8000dfa:	f7ff ffa6 	bl	8000d4a <_ZN8ICM426889ACCEL_CNFlsENS0_3FSREh>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4323      	orrs	r3, r4
 8000e04:	b2db      	uxtb	r3, r3
        }
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd90      	pop	{r4, r7, pc}

08000e0e <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>:

        constexpr uint8_t ODR_POS = 0x00;
        constexpr uint8_t ODR_MASK = 0x0F  << ODR_POS;
        constexpr uint8_t SET_ODR(uint8_t reg, ACCEL_CNF::ODR odr) {
 8000e0e:	b590      	push	{r4, r7, lr}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	6039      	str	r1, [r7, #0]
 8000e18:	71fb      	strb	r3, [r7, #7]
            return   (reg & ~ODR_MASK) | ( odr << ODR_POS);
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f023 030f 	bic.w	r3, r3, #15
 8000e20:	b2dc      	uxtb	r4, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	6838      	ldr	r0, [r7, #0]
 8000e26:	f7ff ff7e 	bl	8000d26 <_ZN8ICM426889ACCEL_CNFlsENS0_3ODREh>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4323      	orrs	r3, r4
 8000e30:	b2db      	uxtb	r3, r3
        }
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd90      	pop	{r4, r7, pc}
	...

08000e3c <_ZN4iIMUC1Ev>:
 * @brief Define un struct vacio para que se haga un struct herencia del mismo en los archivos de implementación. Esto es para dejar a la implementación la forma en obtener los  datos de la IMU. Por ejemplo, si se tiene 1 IMU con lectura sobre 1 solo eje vs 3 ejes. De esta forma también se podría usar esta interfaz para implementar acelerómetros.
 * 
 */
// struct iImu_data{};

class iIMU {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <_ZN4iIMUC1Ev+0x1c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	0800976c 	.word	0x0800976c

08000e5c <_ZN8ICM426889RegistersC1Ev>:
namespace ICM42688{

    constexpr uint16_t BUFFER_SIZE = 32;
    constexpr uint16_t IMU_DATA_BUFFER_SIZE = 16;

    struct Registers {
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2206      	movs	r2, #6
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2206      	movs	r2, #6
 8000e6e:	705a      	strb	r2, [r3, #1]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2230      	movs	r2, #48	; 0x30
 8000e74:	709a      	strb	r2, [r3, #2]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	70da      	strb	r2, [r3, #3]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	711a      	strb	r2, [r3, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	715a      	strb	r2, [r3, #5]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	719a      	strb	r2, [r3, #6]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_>:
#include "icm42688_utils.hpp"
#include "icm42688.hpp"

namespace ICM42688{

    icm42688::icm42688( Config& cnf, iPHandler* handler, gpio *cs,
 8000e9c:	b5b0      	push	{r4, r5, r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	603b      	str	r3, [r7, #0]
        , m_handler(handler)
        , m_cs(cs)
        , m_i2cAdd(slaveAdd)
        , m_INT1(INT1)
        , m_INT2(INT2)
        , m_currentBankReg(bankRegister::BANK0)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ffc5 	bl	8000e3c <_ZN4iIMUC1Ev>
 8000eb2:	4a34      	ldr	r2, [pc, #208]	; (8000f84 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_+0xe8>)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	601a      	str	r2, [r3, #0]
        : imuDataBuffer()
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3304      	adds	r3, #4
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f001 f935 	bl	800212c <_ZN11circ_bufferI7IMUDataLm16EtEC1Ev>
        , m_cnf(cnf)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	f503 74e8 	add.w	r4, r3, #464	; 0x1d0
 8000eca:	4615      	mov	r5, r2
 8000ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ed8:	e884 0003 	stmia.w	r4, {r0, r1}
        , m_currentBankReg(bankRegister::BANK0)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ffba 	bl	8000e5c <_ZN8ICM426889RegistersC1Ev>
        , m_handler(handler)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
        , m_cs(cs)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        , m_i2cAdd(slaveAdd)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000efe:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
        , m_INT1(INT1)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f06:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
        , m_INT2(INT2)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f0e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
        , m_currentBankReg(bankRegister::BANK0)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258

    {
        m_mode = COMM_MODE::BLCK;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
        m_gyroODRValue    = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 fb79 	bl	8003620 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 8000f2e:	eef0 7a40 	vmov.f32	s15, s0
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_gyroFSRValue    = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 fbce 	bl	80036e0 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 8000f44:	eef0 7a40 	vmov.f32	s15, s0
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	edc3 7a97 	vstr	s15, [r3, #604]	; 0x25c
        m_accelODRValue   = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 fbe7 	bl	8003728 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 8000f5a:	eef0 7a40 	vmov.f32	s15, s0
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
        m_accelFSRValue   = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 fc3c 	bl	80037e8 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 8000f70:	eef0 7a40 	vmov.f32	s15, s0
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264
    }
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bdb0      	pop	{r4, r5, r7, pc}
 8000f84:	0800971c 	.word	0x0800971c

08000f88 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioE>:
        m_spiSet = true;
        //write_config();
        enable();
    }

    icm42688::icm42688(Config& cnf, iPHandler *handlerSpi, gpio *cs)
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af04      	add	r7, sp, #16
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
        : icm42688(cnf, handlerSpi, cs, 0xFF, nullptr, nullptr)
 8000f96:	2300      	movs	r3, #0
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	23ff      	movs	r3, #255	; 0xff
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f7ff ff77 	bl	8000e9c <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_>
    {
        m_spiSet = true;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
        //write_config();
        enable();
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 ff30 	bl	8001e1c <_ZN8ICM426888icm426886enableEv>
    }
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_ZN11PHandlerOptC1Ev>:
struct PHandlerOpt {
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	731a      	strb	r2, [r3, #12]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	735a      	strb	r2, [r3, #13]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	739a      	strb	r2, [r3, #14]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>:
        enable();
    }


    iIMU_ST icm42688::set_bank_register(bankRegister bankReg)
    {
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b088      	sub	sp, #32
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
        //iHANDLER_ST retHandler(iHANDLER_ST::OK);
        uint8_t bank;
        PHandlerOpt opt;
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ffdc 	bl	8000fc6 <_ZN11PHandlerOptC1Ev>

        if(m_currentBankReg != bankReg){
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	d033      	beq.n	8001082 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x88>

            bank = static_cast<uint8_t>(bankReg);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	77fb      	strb	r3, [r7, #31]
            opt.add = REG_BANK_SEL_ADD;
 800101e:	2376      	movs	r3, #118	; 0x76
 8001020:	733b      	strb	r3, [r7, #12]
            opt.size = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	737b      	strb	r3, [r7, #13]
            opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x3e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001036:	e002      	b.n	800103e <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x44>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800103e:	613b      	str	r3, [r7, #16]
            m_TxBuffer[0] = bank;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7ffa      	ldrb	r2, [r7, #31]
 8001044:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

            if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3304      	adds	r3, #4
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001060:	f107 020c 	add.w	r2, r7, #12
 8001064:	4798      	blx	r3
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	bf14      	ite	ne
 800106c:	2301      	movne	r3, #1
 800106e:	2300      	moveq	r3, #0
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x80>
            	return iIMU_ST::ERROR_COMM;
 8001076:	2301      	movs	r3, #1
 8001078:	e004      	b.n	8001084 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x8a>
            }

            m_currentBankReg = bankReg;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
        }

        return iIMU_ST::OK;
 8001082:	2300      	movs	r3, #0
    }
 8001084:	4618      	mov	r0, r3
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_ZN8ICM426888icm426889save_dataEv>:

    /////////////////////////////////////// PUBLIC ///////////////////////////////////////

        
    iIMU_ST icm42688::save_data()
    {
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
        iIMU_ST ret = iIMU_ST::OK;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
        iPHANDLER_ST retHandler(iPHANDLER_ST::OK);
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
        PHandlerOpt opt;
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff90 	bl	8000fc6 <_ZN11PHandlerOptC1Ev>

        ret = set_bank_register(bankRegister::BANK0);
 80010a6:	2100      	movs	r1, #0
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ffa6 	bl	8000ffa <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80010ae:	61f8      	str	r0, [r7, #28]
        if( ret != iIMU_ST::OK){
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <_ZN8ICM426888icm426889save_dataEv+0x2e>
            return ret;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	e055      	b.n	8001166 <_ZN8ICM426888icm426889save_dataEv+0xda>
        }
        

        opt.add = TEMP_DATA1_ADD;
 80010ba:	231d      	movs	r3, #29
 80010bc:	723b      	strb	r3, [r7, #8]
        opt.size = IMU_DATA_N_REGS;
 80010be:	230e      	movs	r3, #14
 80010c0:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <_ZN8ICM426888icm426889save_dataEv+0x48>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80010d2:	e002      	b.n	80010da <_ZN8ICM426888icm426889save_dataEv+0x4e>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80010da:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80010e2:	613b      	str	r3, [r7, #16]


        if(!m_handler->lock()){
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fdcc 	bl	8000c88 <_ZN9iPHandler4lockEv>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f083 0301 	eor.w	r3, r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <_ZN8ICM426888icm426889save_dataEv+0x74>
        	return iIMU_ST::ERROR_HANDLER_UNAVAILABLE;
 80010fc:	2305      	movs	r3, #5
 80010fe:	e032      	b.n	8001166 <_ZN8ICM426888icm426889save_dataEv+0xda>
        }

        retHandler = m_handler->read_registers(opt);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f107 0108 	add.w	r1, r7, #8
 8001114:	4610      	mov	r0, r2
 8001116:	4798      	blx	r3
 8001118:	61b8      	str	r0, [r7, #24]
        if(retHandler != iPHANDLER_ST::OK){
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d004      	beq.n	800112a <_ZN8ICM426888icm426889save_dataEv+0x9e>
            return map_handler_ret_to_iIMU_ret(retHandler);
 8001120:	69b8      	ldr	r0, [r7, #24]
 8001122:	f000 ffdf 	bl	80020e4 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST>
 8001126:	4603      	mov	r3, r0
 8001128:	e01d      	b.n	8001166 <_ZN8ICM426888icm426889save_dataEv+0xda>
        }
         

        if(m_mode == COMM_MODE::BLCK){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001130:	2b00      	cmp	r3, #0
 8001132:	d117      	bne.n	8001164 <_ZN8ICM426888icm426889save_dataEv+0xd8>
        	memcpy(m_RxBuffer, m_handler->m_recvBuffer, opt.size);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f503 7006 	add.w	r0, r3, #536	; 0x218
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	7a7a      	ldrb	r2, [r7, #9]
 8001144:	4619      	mov	r1, r3
 8001146:	f008 fa71 	bl	800962c <memcpy>
            m_handler->unlock();
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fdad 	bl	8000cb0 <_ZN9iPHandler6unlockEv>
        	//load_data(dummyIMUData, m_RxBuffer);
            load_data(m_RxBuffer);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800115c:	4619      	mov	r1, r3
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 ff48 	bl	8001ff4 <_ZN8ICM426888icm426889load_dataEPh>
            //m_handler->m_mutex = false;
        }


        return ret;
 8001164:	69fb      	ldr	r3, [r7, #28]
    }
 8001166:	4618      	mov	r0, r3
 8001168:	3720      	adds	r7, #32
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <_ZN8ICM426888icm4268818save_data_callbackEv>:

    void icm42688::save_data_callback()
    {
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
        //IMUData dummyIMUData;
        load_data(m_handler->m_recvBuffer);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4619      	mov	r1, r3
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 ff37 	bl	8001ff4 <_ZN8ICM426888icm426889load_dataEPh>
        m_handler->unlock();
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fd8f 	bl	8000cb0 <_ZN9iPHandler6unlockEv>
        //m_handler->m_mutex = false;
    }
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <_ZN8ICM426888icm4268814save_fifo_dataEh>:
    


    iIMU_ST icm42688::save_fifo_data(uint8_t qty)
    {
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	460b      	mov	r3, r1
 80011a4:	70fb      	strb	r3, [r7, #3]
				return iIMU_ST::ERROR_BUFFER;
			}
        }

        */
        return iIMU_ST::OK;
 80011a6:	2300      	movs	r3, #0
        
    }
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <_ZN8ICM426888icm4268823save_fifo_data_callbackEv>:

    void icm42688::save_fifo_data_callback()
    {
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
            dummyIMUData.temp   = convertTempFIFOData(mRxBuffer[FIFO_PACKET_SIZE*i + 13]);
            imuDataBuffer.write(dummyIMUData);
        }
        */
        //return;
    }
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <_ZN8ICM426888icm426889read_dataEP7IMUData>:


    iIMU_ST icm42688::read_data(IMUData *pData)
    {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
        if(imuDataBuffer.read(pData) == EXIT_OK){
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3304      	adds	r3, #4
 80011d6:	6839      	ldr	r1, [r7, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 ffc5 	bl	8002168 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	bf0c      	ite	eq
 80011e4:	2301      	moveq	r3, #1
 80011e6:	2300      	movne	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <_ZN8ICM426888icm426889read_dataEP7IMUData+0x2a>
            return iIMU_ST::OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <_ZN8ICM426888icm426889read_dataEP7IMUData+0x2c>
        }
        return iIMU_ST::ERROR_BUFFER;
 80011f2:	2304      	movs	r3, #4
    }
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <_ZN8ICM426888icm4268812set_gyro_odrEh>:


    iIMU_ST icm42688::set_gyro_odr(uint8_t odr) 
    {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
        GYRO_CNF::ODR gyroNewODR = static_cast<GYRO_CNF::ODR> (odr);
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fed8 	bl	8000fc6 <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8001216:	2100      	movs	r1, #0
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff feee 	bl	8000ffa <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	bf14      	ite	ne
 8001224:	2301      	movne	r3, #1
 8001226:	2300      	moveq	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <_ZN8ICM426888icm4268812set_gyro_odrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 800122e:	2301      	movs	r3, #1
 8001230:	e04e      	b.n	80012d0 <_ZN8ICM426888icm4268812set_gyro_odrEh+0xd4>
        }
        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_ODR(m_reg.GYRO_CONFIG0, gyroNewODR);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8001238:	69f9      	ldr	r1, [r7, #28]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fdbb 	bl	8000db6 <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>
 8001240:	4603      	mov	r3, r0
 8001242:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7efa      	ldrb	r2, [r7, #27]
 8001248:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = GYRO_CONFIG0_ADD;
 800124c:	234f      	movs	r3, #79	; 0x4f
 800124e:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <_ZN8ICM426888icm4268812set_gyro_odrEh+0x6a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001264:	e002      	b.n	800126c <_ZN8ICM426888icm4268812set_gyro_odrEh+0x70>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800126c:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001274:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3304      	adds	r3, #4
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 800128e:	f107 0208 	add.w	r2, r7, #8
 8001292:	4798      	blx	r3
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	bf14      	ite	ne
 800129a:	2301      	movne	r3, #1
 800129c:	2300      	moveq	r3, #0
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <_ZN8ICM426888icm4268812set_gyro_odrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e013      	b.n	80012d0 <_ZN8ICM426888icm4268812set_gyro_odrEh+0xd4>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7efa      	ldrb	r2, [r7, #27]
 80012ac:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_cnf.gyroODR = gyroNewODR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        m_gyroODRValue = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 f9ae 	bl	8003620 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 80012c4:	eef0 7a40 	vmov.f32	s15, s0
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260

        return iIMU_ST::OK;
 80012ce:	2300      	movs	r3, #0
    }
 80012d0:	4618      	mov	r0, r3
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_ZN8ICM426888icm4268812set_gyro_fsrEh>:


    iIMU_ST icm42688::set_gyro_fsr(uint8_t fsr)
    {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
        GYRO_CNF::FSR gyroNewFSR = static_cast<GYRO_CNF::FSR> (fsr);
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fe6a 	bl	8000fc6 <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80012f2:	2100      	movs	r1, #0
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fe80 	bl	8000ffa <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf14      	ite	ne
 8001300:	2301      	movne	r3, #1
 8001302:	2300      	moveq	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 800130a:	2301      	movs	r3, #1
 800130c:	e04e      	b.n	80013ac <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xd4>
        }

        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_FSR(m_reg.GYRO_CONFIG0, gyroNewFSR);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8001314:	69f9      	ldr	r1, [r7, #28]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fd37 	bl	8000d8a <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>
 800131c:	4603      	mov	r3, r0
 800131e:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7efa      	ldrb	r2, [r7, #27]
 8001324:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = GYRO_CONFIG0_ADD;
 8001328:	234f      	movs	r3, #79	; 0x4f
 800132a:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 800132c:	2301      	movs	r3, #1
 800132e:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x6a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001340:	e002      	b.n	8001348 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x70>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001348:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001350:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3304      	adds	r3, #4
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 800136a:	f107 0208 	add.w	r2, r7, #8
 800136e:	4798      	blx	r3
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 8001380:	2301      	movs	r3, #1
 8001382:	e013      	b.n	80013ac <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xd4>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	7efa      	ldrb	r2, [r7, #27]
 8001388:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_cnf.gyroFSR = gyroNewFSR; 
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        m_gyroODRValue = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800139a:	4618      	mov	r0, r3
 800139c:	f002 f9a0 	bl	80036e0 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 80013a0:	eef0 7a40 	vmov.f32	s15, s0
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260

        return iIMU_ST::OK;
 80013aa:	2300      	movs	r3, #0

    } 
 80013ac:	4618      	mov	r0, r3
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <_ZN8ICM426888icm4268813set_accel_odrEh>:


    iIMU_ST icm42688::set_accel_odr(uint8_t odr)
    {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	70fb      	strb	r3, [r7, #3]
        ACCEL_CNF::ODR accelNewODR = static_cast<ACCEL_CNF::ODR> (odr);
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fdfc 	bl	8000fc6 <_ZN11PHandlerOptC1Ev>
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80013ce:	2100      	movs	r1, #0
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff fe12 	bl	8000ffa <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	bf14      	ite	ne
 80013dc:	2301      	movne	r3, #1
 80013de:	2300      	moveq	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <_ZN8ICM426888icm4268813set_accel_odrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e04e      	b.n	8001488 <_ZN8ICM426888icm4268813set_accel_odrEh+0xd4>
        }

        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_ODR(m_reg.ACCEL_CONFIG0, accelNewODR);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 80013f0:	69f9      	ldr	r1, [r7, #28]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fd0b 	bl	8000e0e <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>
 80013f8:	4603      	mov	r3, r0
 80013fa:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7efa      	ldrb	r2, [r7, #27]
 8001400:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = ACCEL_CONFIG0_ADD;
 8001404:	2350      	movs	r3, #80	; 0x50
 8001406:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 8001408:	2301      	movs	r3, #1
 800140a:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <_ZN8ICM426888icm4268813set_accel_odrEh+0x6a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800141c:	e002      	b.n	8001424 <_ZN8ICM426888icm4268813set_accel_odrEh+0x70>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001424:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 800142c:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3304      	adds	r3, #4
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001446:	f107 0208 	add.w	r2, r7, #8
 800144a:	4798      	blx	r3
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	bf14      	ite	ne
 8001452:	2301      	movne	r3, #1
 8001454:	2300      	moveq	r3, #0
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <_ZN8ICM426888icm4268813set_accel_odrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 800145c:	2301      	movs	r3, #1
 800145e:	e013      	b.n	8001488 <_ZN8ICM426888icm4268813set_accel_odrEh+0xd4>
        }

        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7efa      	ldrb	r2, [r7, #27]
 8001464:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        m_cnf.accelODR = accelNewODR; 
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        m_accelODRValue = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8001476:	4618      	mov	r0, r3
 8001478:	f002 f956 	bl	8003728 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 800147c:	eef0 7a40 	vmov.f32	s15, s0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268

        return iIMU_ST::OK;
 8001486:	2300      	movs	r3, #0
    }
 8001488:	4618      	mov	r0, r3
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <_ZN8ICM426888icm4268813set_accel_fsrEh>:


    iIMU_ST icm42688::set_accel_fsr(uint8_t fsr)
    {
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	70fb      	strb	r3, [r7, #3]
        ACCEL_CNF::FSR accelNewFSR = static_cast<ACCEL_CNF::FSR> (fsr);
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 80014a0:	f107 0308 	add.w	r3, r7, #8
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fd8e 	bl	8000fc6 <_ZN11PHandlerOptC1Ev>
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80014aa:	2100      	movs	r1, #0
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fda4 	bl	8000ffa <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf14      	ite	ne
 80014b8:	2301      	movne	r3, #1
 80014ba:	2300      	moveq	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <_ZN8ICM426888icm4268813set_accel_fsrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e04e      	b.n	8001564 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xd4>
        }

        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_FSR(m_reg.ACCEL_CONFIG0, accelNewFSR);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 80014cc:	69f9      	ldr	r1, [r7, #28]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fc87 	bl	8000de2 <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>
 80014d4:	4603      	mov	r3, r0
 80014d6:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7efa      	ldrb	r2, [r7, #27]
 80014dc:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = ACCEL_CONFIG0_ADD;
 80014e0:	2350      	movs	r3, #80	; 0x50
 80014e2:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <_ZN8ICM426888icm4268813set_accel_fsrEh+0x6a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80014f8:	e002      	b.n	8001500 <_ZN8ICM426888icm4268813set_accel_fsrEh+0x70>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001500:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001508:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	3304      	adds	r3, #4
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001522:	f107 0208 	add.w	r2, r7, #8
 8001526:	4798      	blx	r3
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	bf14      	ite	ne
 800152e:	2301      	movne	r3, #1
 8001530:	2300      	moveq	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <_ZN8ICM426888icm4268813set_accel_fsrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 8001538:	2301      	movs	r3, #1
 800153a:	e013      	b.n	8001564 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xd4>
        }

        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7efa      	ldrb	r2, [r7, #27]
 8001540:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        m_cnf.accelFSR = accelNewFSR; 
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
        m_accelFSRValue = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8001552:	4618      	mov	r0, r3
 8001554:	f002 f948 	bl	80037e8 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 8001558:	eef0 7a40 	vmov.f32	s15, s0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264

        return iIMU_ST::OK;
 8001562:	2300      	movs	r3, #0
    }
 8001564:	4618      	mov	r0, r3
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_ZN8ICM426888icm4268819get_accel_odr_valueEv>:

    float icm42688::get_accel_odr_value()
    {
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
        return m_accelODRValue;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800157a:	ee07 3a90 	vmov	s15, r3
    }
 800157e:	eeb0 0a67 	vmov.f32	s0, s15
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_ZN8ICM426888icm4268819get_accel_fsr_valueEv>:
    float icm42688::get_accel_fsr_value()
    {
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
        return m_accelFSRValue;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 800159a:	ee07 3a90 	vmov	s15, r3
    }
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_ZN8ICM426888icm4268818get_gyro_odr_valueEv>:
    float icm42688::get_gyro_odr_value() 
    {
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
        return m_gyroODRValue;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80015ba:	ee07 3a90 	vmov	s15, r3
    }
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <_ZN8ICM426888icm4268818get_gyro_fsr_valueEv>:
    float icm42688::get_gyro_fsr_value() 
    {
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
        return m_gyroFSRValue;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 80015da:	ee07 3a90 	vmov	s15, r3
    }
 80015de:	eeb0 0a67 	vmov.f32	s0, s15
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_ZN8ICM426888icm4268820get_accel_resolutionEv>:
    
    float icm42688::get_accel_resolution()
    {
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
        return m_accelFSRValue/(1<<15);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	edd3 7a99 	vldr	s15, [r3, #612]	; 0x264
 80015fa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001614 <_ZN8ICM426888icm4268820get_accel_resolutionEv+0x28>
 80015fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001602:	eef0 7a66 	vmov.f32	s15, s13
    }
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	47000000 	.word	0x47000000

08001618 <_ZN8ICM426888icm4268819get_gyro_resolutionEv>:
    
    float icm42688::get_gyro_resolution()
    {
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
        return m_gyroFSRValue/(1<<15);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 8001626:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001640 <_ZN8ICM426888icm4268819get_gyro_resolutionEv+0x28>
 800162a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800162e:	eef0 7a66 	vmov.f32	s15, s13
    }
 8001632:	eeb0 0a67 	vmov.f32	s0, s15
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	47000000 	.word	0x47000000

08001644 <_ZN8ICM426888icm4268815convertGyroDataEhh>:



    float icm42688::convertGyroData(uint8_t rawGyroH, uint8_t rawGyroL)
    {
 8001644:	b580      	push	{r7, lr}
 8001646:	ed2d 8b02 	vpush	{d8}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
 8001654:	4613      	mov	r3, r2
 8001656:	70bb      	strb	r3, [r7, #2]
        int16_t gyro_data = (rawGyroH << 8)  | rawGyroL;
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b21a      	sxth	r2, r3
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	b21b      	sxth	r3, r3
 8001662:	4313      	orrs	r3, r2
 8001664:	81fb      	strh	r3, [r7, #14]
        return gyro_data * get_gyro_resolution();
 8001666:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	3340      	adds	r3, #64	; 0x40
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	4798      	blx	r3
 800167e:	eef0 7a40 	vmov.f32	s15, s0
 8001682:	ee68 7a27 	vmul.f32	s15, s16, s15

    }
 8001686:	eeb0 0a67 	vmov.f32	s0, s15
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	ecbd 8b02 	vpop	{d8}
 8001692:	bd80      	pop	{r7, pc}

08001694 <_ZN8ICM426888icm4268816convertAccelDataEhh>:

    float icm42688::convertAccelData(uint8_t rawAccelH, uint8_t rawAccelL)
    {
 8001694:	b580      	push	{r7, lr}
 8001696:	ed2d 8b02 	vpush	{d8}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
 80016a4:	4613      	mov	r3, r2
 80016a6:	70bb      	strb	r3, [r7, #2]
        int16_t gyro_data = (rawAccelH << 8)  | rawAccelL;
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	b21a      	sxth	r2, r3
 80016ae:	78bb      	ldrb	r3, [r7, #2]
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	4313      	orrs	r3, r2
 80016b4:	81fb      	strh	r3, [r7, #14]
        return gyro_data * get_accel_resolution();
 80016b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	333c      	adds	r3, #60	; 0x3c
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	4798      	blx	r3
 80016ce:	eef0 7a40 	vmov.f32	s15, s0
 80016d2:	ee68 7a27 	vmul.f32	s15, s16, s15
    }
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	ecbd 8b02 	vpop	{d8}
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_ZN8ICM426888icm4268812write_configEv>:

    iIMU_ST icm42688::write_config()
    {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
        iIMU_ST ret = iIMU_ST::OK; 
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
        
        
        if( (ret = write_config_accel_gyro()) != iIMU_ST::OK){
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f82c 	bl	800174e <_ZN8ICM426888icm4268823write_config_accel_gyroEv>
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bf14      	ite	ne
 80016fe:	2301      	movne	r3, #1
 8001700:	2300      	moveq	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <_ZN8ICM426888icm4268812write_configEv+0x28>
            return ret;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	e01c      	b.n	8001746 <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        if( (ret = write_config_FIFO()) != iIMU_ST::OK){
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f8eb 	bl	80018e8 <_ZN8ICM426888icm4268817write_config_FIFOEv>
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	bf14      	ite	ne
 800171a:	2301      	movne	r3, #1
 800171c:	2300      	moveq	r3, #0
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <_ZN8ICM426888icm4268812write_configEv+0x44>
            return ret;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	e00e      	b.n	8001746 <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        if( (ret = write_config_int()) != iIMU_ST::OK){
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f9d5 	bl	8001ad8 <_ZN8ICM426888icm4268816write_config_intEv>
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	bf14      	ite	ne
 8001736:	2301      	movne	r3, #1
 8001738:	2300      	moveq	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <_ZN8ICM426888icm4268812write_configEv+0x60>
            return ret;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	e000      	b.n	8001746 <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        return ret;
 8001744:	68fb      	ldr	r3, [r7, #12]
        
    }
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <_ZN8ICM426888icm4268823write_config_accel_gyroEv>:

    iIMU_ST icm42688::write_config_accel_gyro()
    {
 800174e:	b580      	push	{r7, lr}
 8001750:	b088      	sub	sp, #32
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fc33 	bl	8000fc6 <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8001760:	2100      	movs	r1, #0
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fc49 	bl	8000ffa <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	bf14      	ite	ne
 800176e:	2301      	movne	r3, #1
 8001770:	2300      	moveq	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 8001778:	2301      	movs	r3, #1
 800177a:	e0b1      	b.n	80018e0 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }


        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_FSR(m_reg.GYRO_CONFIG0, m_cnf.gyroFSR);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 2238 	ldrb.w	r2, [r3, #568]	; 0x238
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8001788:	4619      	mov	r1, r3
 800178a:	4610      	mov	r0, r2
 800178c:	f7ff fafd 	bl	8000d8a <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>
 8001790:	4603      	mov	r3, r0
 8001792:	77fb      	strb	r3, [r7, #31]
        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_ODR(new_GYRO_CONFIG0, m_cnf.gyroODR);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 800179a:	7ffb      	ldrb	r3, [r7, #31]
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fb09 	bl	8000db6 <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>
 80017a4:	4603      	mov	r3, r0
 80017a6:	77fb      	strb	r3, [r7, #31]
        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_FSR(m_reg.ACCEL_CONFIG0, m_cnf.accelFSR);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 2239 	ldrb.w	r2, [r3, #569]	; 0x239
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80017b4:	4619      	mov	r1, r3
 80017b6:	4610      	mov	r0, r2
 80017b8:	f7ff fb13 	bl	8000de2 <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>
 80017bc:	4603      	mov	r3, r0
 80017be:	77bb      	strb	r3, [r7, #30]
        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_ODR(new_ACCEL_CONFIG0, m_cnf.accelODR);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 80017c6:	7fbb      	ldrb	r3, [r7, #30]
 80017c8:	4611      	mov	r1, r2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fb1f 	bl	8000e0e <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>
 80017d0:	4603      	mov	r3, r0
 80017d2:	77bb      	strb	r3, [r7, #30]


        //m_TxBuffer[1] = new_ACCEL_CONFIG0;

        opt.size = 1;
 80017d4:	2301      	movs	r3, #1
 80017d6:	737b      	strb	r3, [r7, #13]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x9c>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80017e8:	e002      	b.n	80017f0 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0xa2>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80017f0:	613b      	str	r3, [r7, #16]
        opt.mode = m_mode;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80017f8:	617b      	str	r3, [r7, #20]

        opt.add = GYRO_CONFIG0_ADD;
 80017fa:	234f      	movs	r3, #79	; 0x4f
 80017fc:	733b      	strb	r3, [r7, #12]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7ffa      	ldrb	r2, [r7, #31]
 8001802:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3304      	adds	r3, #4
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 800181e:	f107 020c 	add.w	r2, r7, #12
 8001822:	4798      	blx	r3
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf14      	ite	ne
 800182a:	2301      	movne	r3, #1
 800182c:	2300      	moveq	r3, #0
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0xea>
            return iIMU_ST::ERROR_COMM;
 8001834:	2301      	movs	r3, #1
 8001836:	e053      	b.n	80018e0 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }

        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7fba      	ldrb	r2, [r7, #30]
 800183c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
        opt.add = ACCEL_CONFIG0_ADD;
 8001840:	2350      	movs	r3, #80	; 0x50
 8001842:	733b      	strb	r3, [r7, #12]
        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	3304      	adds	r3, #4
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 800185c:	f107 020c 	add.w	r2, r7, #12
 8001860:	4798      	blx	r3
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf14      	ite	ne
 8001868:	2301      	movne	r3, #1
 800186a:	2300      	moveq	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x128>
            return iIMU_ST::ERROR_COMM;
 8001872:	2301      	movs	r3, #1
 8001874:	e034      	b.n	80018e0 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7ffa      	ldrb	r2, [r7, #31]
 800187a:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7fba      	ldrb	r2, [r7, #30]
 8001882:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        
        m_gyroODRValue = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800188c:	4618      	mov	r0, r3
 800188e:	f001 fec7 	bl	8003620 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 8001892:	eef0 7a40 	vmov.f32	s15, s0
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_gyroODRValue = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f001 ff1c 	bl	80036e0 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 80018a8:	eef0 7a40 	vmov.f32	s15, s0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_accelODRValue = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 ff35 	bl	8003728 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 80018be:	eef0 7a40 	vmov.f32	s15, s0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
        m_accelFSRValue = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80018ce:	4618      	mov	r0, r3
 80018d0:	f001 ff8a 	bl	80037e8 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 80018d4:	eef0 7a40 	vmov.f32	s15, s0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264

        return iIMU_ST::OK;
 80018de:	2300      	movs	r3, #0
    }
 80018e0:	4618      	mov	r0, r3
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_ZN8ICM426888icm4268817write_config_FIFOEv>:
    
    
    iIMU_ST icm42688::write_config_FIFO()
    {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fb66 	bl	8000fc6 <_ZN11PHandlerOptC1Ev>
        uint8_t new_INTF_CONFIG0;
        uint8_t new_FIFO_CONFIG;
        uint8_t new_FIFO_CONFIG1, new_FIFO_CONFIG2, new_FIFO_CONFIG3;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80018fa:	2100      	movs	r1, #0
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fb7c 	bl	8000ffa <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	bf14      	ite	ne
 8001908:	2301      	movne	r3, #1
 800190a:	2300      	moveq	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 8001912:	2301      	movs	r3, #1
 8001914:	e0dc      	b.n	8001ad0 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }


        // Configuracion de registro INTF_CONFIG0
        opt.add = INTF_CONFIG0_ADD;
 8001916:	234c      	movs	r3, #76	; 0x4c
 8001918:	733b      	strb	r3, [r7, #12]
        opt.size = 1;
 800191a:	2301      	movs	r3, #1
 800191c:	737b      	strb	r3, [r7, #13]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x48>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800192e:	e002      	b.n	8001936 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x4e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001936:	613b      	str	r3, [r7, #16]
        opt.mode = m_mode;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 800193e:	617b      	str	r3, [r7, #20]

        new_INTF_CONFIG0 = m_reg.INTF_CONFIG0 | FIFO_CNF::FIFO_COUNT_REC;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 8001946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800194a:	b2db      	uxtb	r3, r3
 800194c:	72fb      	strb	r3, [r7, #11]
        if(m_handler->write_registers(&new_INTF_CONFIG0, opt) != iPHANDLER_ST::OK){
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3304      	adds	r3, #4
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f107 020c 	add.w	r2, r7, #12
 8001964:	f107 010b 	add.w	r1, r7, #11
 8001968:	4798      	blx	r3
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <_ZN8ICM426888icm4268817write_config_FIFOEv+0x96>
            return iIMU_ST::ERROR_COMM;
 800197a:	2301      	movs	r3, #1
 800197c:	e0a8      	b.n	8001ad0 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }
        m_reg.INTF_CONFIG0 = new_INTF_CONFIG0;
 800197e:	7afa      	ldrb	r2, [r7, #11]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a

        // Configuracion de registro FIFO_CONFIG
        opt.add = FIFO_CONFIG_ADD;
 8001986:	2316      	movs	r3, #22
 8001988:	733b      	strb	r3, [r7, #12]
        new_FIFO_CONFIG = FIFO_CONFIG::SET_FIFO_MODE(m_cnf.fifoCnf.mode);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff f9ec 	bl	8000d6e <_ZN8ICM4268811FIFO_CONFIG13SET_FIFO_MODEENS_9FIFO_MODEE>
 8001996:	4603      	mov	r3, r0
 8001998:	72bb      	strb	r3, [r7, #10]
        if(m_handler->write_registers(&new_FIFO_CONFIG, opt) != iPHANDLER_ST::OK){
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	3304      	adds	r3, #4
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f107 020c 	add.w	r2, r7, #12
 80019b0:	f107 010a 	add.w	r1, r7, #10
 80019b4:	4798      	blx	r3
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf14      	ite	ne
 80019bc:	2301      	movne	r3, #1
 80019be:	2300      	moveq	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <_ZN8ICM426888icm4268817write_config_FIFOEv+0xe2>
            return iIMU_ST::ERROR_COMM;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e082      	b.n	8001ad0 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }        
        m_reg.FIFO_CONFIG = new_FIFO_CONFIG;
 80019ca:	7aba      	ldrb	r2, [r7, #10]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b


        // Configuracion de los registros FIFO_CONFIG1, FIFO_CONFIG2 y FIFO_CONFIG3
        if(m_cnf.fifoCnf.mode != FIFO_MODE::BYPASS){
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d078      	beq.n	8001ace <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e6>
        	//Sets packets and watermark
        	new_FIFO_CONFIG1 = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	77fb      	strb	r3, [r7, #31]
        	new_FIFO_CONFIG1 = FIFO_CNF::FIFO_TEMP_EN | FIFO_CNF::FIFO_GYRO_EN | FIFO_CNF::FIFO_ACCEL_EN;
 80019e0:	2307      	movs	r3, #7
 80019e2:	77fb      	strb	r3, [r7, #31]
        	new_FIFO_CONFIG2 = m_cnf.fifoCnf.watermark;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 80019ea:	77bb      	strb	r3, [r7, #30]
        	new_FIFO_CONFIG3 = m_cnf.fifoCnf.watermark >> 8;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 80019f2:	0a1b      	lsrs	r3, r3, #8
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	777b      	strb	r3, [r7, #29]

            
             opt.size = 1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	737b      	strb	r3, [r7, #13]

            opt.add = FIFO_CONFIG1_ADD;
 80019fc:	235f      	movs	r3, #95	; 0x5f
 80019fe:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	7ffa      	ldrb	r2, [r7, #31]
 8001a04:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
            //m_TxBuffer[1] = new_FIFO_CONFIG2;
            //m_TxBuffer[2] = new_FIFO_CONFIG3;

            if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	3304      	adds	r3, #4
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001a20:	f107 020c 	add.w	r2, r7, #12
 8001a24:	4798      	blx	r3
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <_ZN8ICM426888icm4268817write_config_FIFOEv+0x152>
                return iIMU_ST::ERROR_COMM;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e04a      	b.n	8001ad0 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            opt.add = FIFO_CONFIG2_ADD;
 8001a3a:	2360      	movs	r3, #96	; 0x60
 8001a3c:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG2;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7fba      	ldrb	r2, [r7, #30]
 8001a42:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
             if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	3304      	adds	r3, #4
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001a5e:	f107 020c 	add.w	r2, r7, #12
 8001a62:	4798      	blx	r3
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf14      	ite	ne
 8001a6a:	2301      	movne	r3, #1
 8001a6c:	2300      	moveq	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x190>
                return iIMU_ST::ERROR_COMM;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e02b      	b.n	8001ad0 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            opt.add = FIFO_CONFIG3_ADD;
 8001a78:	2361      	movs	r3, #97	; 0x61
 8001a7a:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG3;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7f7a      	ldrb	r2, [r7, #29]
 8001a80:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
             if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3304      	adds	r3, #4
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001a9c:	f107 020c 	add.w	r2, r7, #12
 8001aa0:	4798      	blx	r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf14      	ite	ne
 8001aa8:	2301      	movne	r3, #1
 8001aaa:	2300      	moveq	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1ce>
                return iIMU_ST::ERROR_COMM;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00c      	b.n	8001ad0 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7ffa      	ldrb	r2, [r7, #31]
 8001aba:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG2;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7fba      	ldrb	r2, [r7, #30]
 8001ac2:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG3;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7f7a      	ldrb	r2, [r7, #29]
 8001aca:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
        }

        return iIMU_ST::OK;
 8001ace:	2300      	movs	r3, #0
    }
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_ZN8ICM426888icm4268816write_config_intEv>:


    iIMU_ST icm42688::write_config_int()
    {
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	f2ad 5d2c 	subw	sp, sp, #1324	; 0x52c
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001ae4:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001ae8:	6018      	str	r0, [r3, #0]

        PHandlerOpt opt;
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fa69 	bl	8000fc6 <_ZN11PHandlerOptC1Ev>
        uint8_t new_INT_CONFIG = 0x00;
 8001af4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001af8:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
        uint8_t new_INT_SOURCE0;
        uint8_t new_INT_SOURCE1;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8001b00:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001b04:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001b08:	2100      	movs	r1, #0
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	f7ff fa75 	bl	8000ffa <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	bf14      	ite	ne
 8001b16:	2301      	movne	r3, #1
 8001b18:	2300      	moveq	r3, #0
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <_ZN8ICM426888icm4268816write_config_intEv+0x4c>
            return iIMU_ST::ERROR_COMM;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e174      	b.n	8001e0e <_ZN8ICM426888icm4268816write_config_intEv+0x336>
        }
        
        opt.size = 1;
 8001b24:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001b28:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	705a      	strb	r2, [r3, #1]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001b30:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001b34:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d007      	beq.n	8001b52 <_ZN8ICM426888icm4268816write_config_intEv+0x7a>
 8001b42:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001b46:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001b50:	e006      	b.n	8001b60 <_ZN8ICM426888icm4268816write_config_intEv+0x88>
 8001b52:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001b56:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001b60:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8001b64:	f2a2 521c 	subw	r2, r2, #1308	; 0x51c
 8001b68:	6053      	str	r3, [r2, #4]
        opt.mode = m_mode;
 8001b6a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001b6e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8001b78:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001b7c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001b80:	609a      	str	r2, [r3, #8]


    	if(m_cnf.intCnf.int1Source != INT_SOURCE::DISABLED){
 8001b82:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001b86:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b94:	f000 80bb 	beq.w	8001d0e <_ZN8ICM426888icm4268816write_config_intEv+0x236>
    		new_INT_CONFIG |= static_cast<uint8_t>(m_cnf.intCnf.int1Mode);
 8001b98:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001b9c:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001bac:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001bba:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001bbe:	701a      	strb	r2, [r3, #0]
    		new_INT_SOURCE0 = (1 << static_cast<uint8_t>(m_cnf.intCnf.int1Source ));
 8001bc0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001bc4:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	4093      	lsls	r3, r2
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001bdc:	f2a3 531e 	subw	r3, r3, #1310	; 0x51e
 8001be0:	701a      	strb	r2, [r3, #0]
            
            opt.add = INT_SOURCE0_ADD;
 8001be2:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001be6:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001bea:	2265      	movs	r2, #101	; 0x65
 8001bec:	701a      	strb	r2, [r3, #0]
            if(m_handler->write_registers(&new_INT_SOURCE0, opt) != iPHANDLER_ST::OK){
 8001bee:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001bf2:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001bfc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001c00:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f107 020c 	add.w	r2, r7, #12
 8001c14:	f107 010a 	add.w	r1, r7, #10
 8001c18:	4798      	blx	r3
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf14      	ite	ne
 8001c20:	2301      	movne	r3, #1
 8001c22:	2300      	moveq	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <_ZN8ICM426888icm4268816write_config_intEv+0x156>
                return iIMU_ST::ERROR_COMM;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0ef      	b.n	8001e0e <_ZN8ICM426888icm4268816write_config_intEv+0x336>
            }
            switch(m_cnf.intCnf.int1Source){
 8001c2e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001c32:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d034      	beq.n	8001caa <_ZN8ICM426888icm4268816write_config_intEv+0x1d2>
            default:
            case INT_SOURCE::DATA_RDY:
            	m_INT1->interrupt_handler = std::bind(&icm42688::save_data, *this);
 8001c40:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001c44:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8001c4e:	461c      	mov	r4, r3
 8001c50:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001c54:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001c60:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001c64:	2201      	movs	r2, #1
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001c6c:	f5a3 7126 	sub.w	r1, r3, #664	; 0x298
 8001c70:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001c74:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8001c78:	460b      	mov	r3, r1
 8001c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c82:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001c86:	f2a3 500c 	subw	r0, r3, #1292	; 0x50c
 8001c8a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001c8e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001c92:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f000 fae1 	bl	800225e <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f000 faff 	bl	80022a6 <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>
				break;
 8001ca8:	e031      	b.n	8001d0e <_ZN8ICM426888icm4268816write_config_intEv+0x236>
            case INT_SOURCE::FIFO_THR:
            	m_INT1->interrupt_handler = std::bind(&icm42688::save_fifo_data, *this, m_cnf.fifoCnf.watermark);
 8001caa:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001cae:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8001cb8:	461c      	mov	r4, r3
 8001cba:	4a57      	ldr	r2, [pc, #348]	; (8001e18 <_ZN8ICM426888icm4268816write_config_intEv+0x340>)
 8001cbc:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001cc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8001cc8:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8001ccc:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8001cd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cd4:	e883 0003 	stmia.w	r3, {r0, r1}
 8001cd8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001cdc:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001ce6:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8001cea:	f5a2 7022 	sub.w	r0, r2, #648	; 0x288
 8001cee:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8001cf2:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 8001cf6:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	f000 fbef 	bl	80024de <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISD_EEE5valueESB_JDpT0_EE4typeEOSB_DpOSI_>
 8001d00:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001d04:	4619      	mov	r1, r3
 8001d06:	4620      	mov	r0, r4
 8001d08:	f000 fc05 	bl	8002516 <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>
					break;
 8001d0c:	bf00      	nop
            }
    	}

    	if(m_cnf.intCnf.int2Source != INT_SOURCE::DISABLED){
 8001d0e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d12:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d20:	d04e      	beq.n	8001dc0 <_ZN8ICM426888icm4268816write_config_intEv+0x2e8>
    		new_INT_CONFIG |= (static_cast<uint8_t>(m_cnf.intCnf.int2Mode) << 3);
 8001d22:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d26:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	b25a      	sxtb	r2, r3
 8001d36:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d3a:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b25b      	sxtb	r3, r3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d4c:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001d50:	701a      	strb	r2, [r3, #0]
    		new_INT_SOURCE1 = (1 << static_cast<uint8_t>(m_cnf.intCnf.int2Source ));
 8001d52:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d56:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	2301      	movs	r3, #1
 8001d66:	4093      	lsls	r3, r2
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d6e:	f2a3 531f 	subw	r3, r3, #1311	; 0x51f
 8001d72:	701a      	strb	r2, [r3, #0]
            
            opt.add = INT_SOURCE1_ADD;
 8001d74:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d78:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001d7c:	2266      	movs	r2, #102	; 0x66
 8001d7e:	701a      	strb	r2, [r3, #0]
            if(m_handler->write_registers(&new_INT_SOURCE1, opt) != iPHANDLER_ST::OK){
 8001d80:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d84:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001d8e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d92:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f107 020c 	add.w	r2, r7, #12
 8001da6:	f107 0109 	add.w	r1, r7, #9
 8001daa:	4798      	blx	r3
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf14      	ite	ne
 8001db2:	2301      	movne	r3, #1
 8001db4:	2300      	moveq	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <_ZN8ICM426888icm4268816write_config_intEv+0x2e8>
                return iIMU_ST::ERROR_COMM;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e026      	b.n	8001e0e <_ZN8ICM426888icm4268816write_config_intEv+0x336>
            }  
		}

        //Enables watermark interrupt on INT1
        opt.add = INT_CONFIG_ADD;
 8001dc0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001dc4:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001dc8:	2214      	movs	r2, #20
 8001dca:	701a      	strb	r2, [r3, #0]
        if(m_handler->write_registers(&new_INT_CONFIG, opt) != iPHANDLER_ST::OK){
 8001dcc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001dd0:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001dda:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001dde:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	3304      	adds	r3, #4
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f107 020c 	add.w	r2, r7, #12
 8001df2:	f107 010b 	add.w	r1, r7, #11
 8001df6:	4798      	blx	r3
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	bf14      	ite	ne
 8001dfe:	2301      	movne	r3, #1
 8001e00:	2300      	moveq	r3, #0
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <_ZN8ICM426888icm4268816write_config_intEv+0x334>
            return iIMU_ST::ERROR_COMM;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <_ZN8ICM426888icm4268816write_config_intEv+0x336>
        } 

        return iIMU_ST::OK;
 8001e0c:	2300      	movs	r3, #0
    }
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f207 572c 	addw	r7, r7, #1324	; 0x52c
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd90      	pop	{r4, r7, pc}
 8001e18:	080096f8 	.word	0x080096f8

08001e1c <_ZN8ICM426888icm426886enableEv>:


    iIMU_ST icm42688::enable()
    {        
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8001e24:	f107 0308 	add.w	r3, r7, #8
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff f8cc 	bl	8000fc6 <_ZN11PHandlerOptC1Ev>
        
        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8001e2e:	2100      	movs	r1, #0
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff f8e2 	bl	8000ffa <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <_ZN8ICM426888icm426886enableEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e038      	b.n	8001ebc <_ZN8ICM426888icm426886enableEv+0xa0>
        }
        
        opt.add = PWR_MGMT0_ADD;
 8001e4a:	234e      	movs	r3, #78	; 0x4e
 8001e4c:	723b      	strb	r3, [r7, #8]
        opt.size = 1;        
 8001e4e:	2301      	movs	r3, #1
 8001e50:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <_ZN8ICM426888icm426886enableEv+0x48>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001e62:	e002      	b.n	8001e6a <_ZN8ICM426888icm426886enableEv+0x4e>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001e6a:	60fb      	str	r3, [r7, #12]
        if(m_handler->write_registers((uint8_t*)&IMU_ENABLE_LOW_NOISE, opt) != iPHANDLER_ST::OK){
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f107 0208 	add.w	r2, r7, #8
 8001e82:	4910      	ldr	r1, [pc, #64]	; (8001ec4 <_ZN8ICM426888icm426886enableEv+0xa8>)
 8001e84:	4798      	blx	r3
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <_ZN8ICM426888icm426886enableEv+0x7e>
            return iIMU_ST::ERROR_COMM;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e010      	b.n	8001ebc <_ZN8ICM426888icm426886enableEv+0xa0>
        } 

        if(write_config() != iIMU_ST::OK){
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	3344      	adds	r3, #68	; 0x44
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4798      	blx	r3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf14      	ite	ne
 8001eac:	2301      	movne	r3, #1
 8001eae:	2300      	moveq	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <_ZN8ICM426888icm426886enableEv+0x9e>
        	return iIMU_ST::ERROR_COMM;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <_ZN8ICM426888icm426886enableEv+0xa0>
        }

        return iIMU_ST::OK;
 8001eba:	2300      	movs	r3, #0

    	//return write_register(PWR_MGMT0_ADD, bankRegister::BANK0, IMU_ENABLE_LOW_NOISE);
    	// Algunos milisegundos deben pasar luego de habilitar la imu para que funcione (leer pag 77 de datasheet)
    }
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	08009710 	.word	0x08009710

08001ec8 <_ZN8ICM426888icm426887disableEv>:



    iIMU_ST icm42688::disable()
	{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff f876 	bl	8000fc6 <_ZN11PHandlerOptC1Ev>
        uint8_t nullValue = 0x00;
 8001eda:	2300      	movs	r3, #0
 8001edc:	73fb      	strb	r3, [r7, #15]
        
//        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
//            return iIMU_ST::ERROR_COMM;
//        }

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8001ede:	2100      	movs	r1, #0
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff f88a 	bl	8000ffa <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf14      	ite	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	2300      	moveq	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <_ZN8ICM426888icm426887disableEv+0x32>
            return iIMU_ST::ERROR_COMM;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e076      	b.n	8001fe8 <_ZN8ICM426888icm426887disableEv+0x120>
        }
        opt.size = 1;
 8001efa:	2301      	movs	r3, #1
 8001efc:	747b      	strb	r3, [r7, #17]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <_ZN8ICM426888icm426887disableEv+0x48>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001f0e:	e002      	b.n	8001f16 <_ZN8ICM426888icm426887disableEv+0x4e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001f16:	617b      	str	r3, [r7, #20]
        

        // Desabilita todos las configuraciones de interrupciones
		opt.add = INT_SOURCE0_ADD;
 8001f18:	2365      	movs	r3, #101	; 0x65
 8001f1a:	743b      	strb	r3, [r7, #16]
		if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f107 0210 	add.w	r2, r7, #16
 8001f32:	f107 010f 	add.w	r1, r7, #15
 8001f36:	4798      	blx	r3
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bf14      	ite	ne
 8001f3e:	2301      	movne	r3, #1
 8001f40:	2300      	moveq	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <_ZN8ICM426888icm426887disableEv+0x84>
			return iIMU_ST::ERROR_COMM;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e04d      	b.n	8001fe8 <_ZN8ICM426888icm426887disableEv+0x120>
		}
		opt.add = INT_SOURCE1_ADD;
 8001f4c:	2366      	movs	r3, #102	; 0x66
 8001f4e:	743b      	strb	r3, [r7, #16]
		if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f107 0210 	add.w	r2, r7, #16
 8001f66:	f107 010f 	add.w	r1, r7, #15
 8001f6a:	4798      	blx	r3
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <_ZN8ICM426888icm426887disableEv+0xb8>
			return iIMU_ST::ERROR_COMM;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e033      	b.n	8001fe8 <_ZN8ICM426888icm426887disableEv+0x120>
		}
        opt.add = INT_CONFIG_ADD;
 8001f80:	2314      	movs	r3, #20
 8001f82:	743b      	strb	r3, [r7, #16]
        if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3304      	adds	r3, #4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f107 0210 	add.w	r2, r7, #16
 8001f9a:	f107 010f 	add.w	r1, r7, #15
 8001f9e:	4798      	blx	r3
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf14      	ite	ne
 8001fa6:	2301      	movne	r3, #1
 8001fa8:	2300      	moveq	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <_ZN8ICM426888icm426887disableEv+0xec>
            return iIMU_ST::ERROR_COMM;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e019      	b.n	8001fe8 <_ZN8ICM426888icm426887disableEv+0x120>
        }


        //Low power
        opt.add = PWR_MGMT0_ADD;
 8001fb4:	234e      	movs	r3, #78	; 0x4e
 8001fb6:	743b      	strb	r3, [r7, #16]
        if(m_handler->write_registers((uint8_t*)&IMU_DISABLE, opt) != iPHANDLER_ST::OK){
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f107 0210 	add.w	r2, r7, #16
 8001fce:	4908      	ldr	r1, [pc, #32]	; (8001ff0 <_ZN8ICM426888icm426887disableEv+0x128>)
 8001fd0:	4798      	blx	r3
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <_ZN8ICM426888icm426887disableEv+0x11e>
            return iIMU_ST::ERROR_COMM;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <_ZN8ICM426888icm426887disableEv+0x120>
        } 
        return iIMU_ST::OK;
 8001fe6:	2300      	movs	r3, #0
    	
        
        //return write_register(PWR_MGMT0_ADD, bankRegister::BANK0, IMU_DISABLE);
    	// Algunos milisegundos deben pasar luego de habilitar la imu para que funcione (leer pag 77 de datasheet)
	}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	08009711 	.word	0x08009711

08001ff4 <_ZN8ICM426888icm426889load_dataEPh>:


    }

    void icm42688::load_data(uint8_t *buffertData)
    {
 8001ff4:	b5b0      	push	{r4, r5, r7, lr}
 8001ff6:	b08e      	sub	sp, #56	; 0x38
 8001ff8:	af04      	add	r7, sp, #16
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
    	IMUData data;
        data.temp   = convertTempData(buffertData[0], buffertData[1]);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	4610      	mov	r0, r2
 800200c:	f001 fc0e 	bl	800382c <_ZN8ICM4268815convertTempDataEhh>
 8002010:	eef0 7a40 	vmov.f32	s15, s0
 8002014:	edc7 7a03 	vstr	s15, [r7, #12]
        data.accelX = convertAccelData(buffertData[2], buffertData[3]);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	3302      	adds	r3, #2
 800201c:	7819      	ldrb	r1, [r3, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	3303      	adds	r3, #3
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fb34 	bl	8001694 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 800202c:	eef0 7a40 	vmov.f32	s15, s0
 8002030:	edc7 7a07 	vstr	s15, [r7, #28]
        data.accelY = convertAccelData(buffertData[4], buffertData[5]);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	3304      	adds	r3, #4
 8002038:	7819      	ldrb	r1, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	3305      	adds	r3, #5
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fb26 	bl	8001694 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 8002048:	eef0 7a40 	vmov.f32	s15, s0
 800204c:	edc7 7a08 	vstr	s15, [r7, #32]
        data.accelZ = convertAccelData(buffertData[6], buffertData[7]);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	3306      	adds	r3, #6
 8002054:	7819      	ldrb	r1, [r3, #0]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	3307      	adds	r3, #7
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff fb18 	bl	8001694 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 8002064:	eef0 7a40 	vmov.f32	s15, s0
 8002068:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        data.gyroX  = convertGyroData(buffertData[8], buffertData[9]);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	3308      	adds	r3, #8
 8002070:	7819      	ldrb	r1, [r3, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	3309      	adds	r3, #9
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fae2 	bl	8001644 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 8002080:	eef0 7a40 	vmov.f32	s15, s0
 8002084:	edc7 7a04 	vstr	s15, [r7, #16]
        data.gyroY  = convertGyroData(buffertData[10], buffertData[11]);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	330a      	adds	r3, #10
 800208c:	7819      	ldrb	r1, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	330b      	adds	r3, #11
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fad4 	bl	8001644 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 800209c:	eef0 7a40 	vmov.f32	s15, s0
 80020a0:	edc7 7a05 	vstr	s15, [r7, #20]
        data.gyroZ  = convertGyroData(buffertData[12], buffertData[13]);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	330c      	adds	r3, #12
 80020a8:	7819      	ldrb	r1, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	330d      	adds	r3, #13
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fac6 	bl	8001644 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 80020b8:	eef0 7a40 	vmov.f32	s15, s0
 80020bc:	edc7 7a06 	vstr	s15, [r7, #24]
        imuDataBuffer.write(data);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	1d1d      	adds	r5, r3, #4
 80020c4:	466c      	mov	r4, sp
 80020c6:	f107 0318 	add.w	r3, r7, #24
 80020ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d6:	4628      	mov	r0, r5
 80020d8:	f000 fa3c 	bl	8002554 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_>
    }
 80020dc:	bf00      	nop
 80020de:	3728      	adds	r7, #40	; 0x28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bdb0      	pop	{r4, r5, r7, pc}

080020e4 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST>:

    iIMU_ST icm42688::map_handler_ret_to_iIMU_ret(iPHANDLER_ST iHandlerRet){
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    	iIMU_ST ret;

    	switch(iHandlerRet){
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d012      	beq.n	8002118 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x34>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	dc09      	bgt.n	800210c <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x28>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x22>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d006      	beq.n	8002112 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x2e>
 8002104:	e002      	b.n	800210c <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x28>
    	case iPHANDLER_ST::OK:
    		ret = iIMU_ST::OK;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
    		break;
 800210a:	e008      	b.n	800211e <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::ERROR:
    	default:
    		ret = iIMU_ST::ERROR_COMM;
 800210c:	2301      	movs	r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
    		break;
 8002110:	e005      	b.n	800211e <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::UNAVAILABLE:
    		ret = iIMU_ST::ERROR_HANDLER_UNAVAILABLE;
 8002112:	2305      	movs	r3, #5
 8002114:	60fb      	str	r3, [r7, #12]
    		break;
 8002116:	e002      	b.n	800211e <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::INVALID:
    		ret = iIMU_ST::ERROR_INVALID_OP;
 8002118:	2303      	movs	r3, #3
 800211a:	60fb      	str	r3, [r7, #12]
    		break;
 800211c:	bf00      	nop

    	}

    	return ret;
 800211e:	68fb      	ldr	r3, [r7, #12]
    }
 8002120:	4618      	mov	r0, r3
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <_ZN11circ_bufferI7IMUDataLm16EtEC1Ev>:
                bool mEmpty_;

        };

        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
        {
            mFull_ = false;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
            mEmpty_ = true;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            mHead_ = 0;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
            mTail_ = 0;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
            mSize_ = 0;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	801a      	strh	r2, [r3, #0]
            
        }
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_>:
            return EXIT_OK;
        }


        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::read(bufferDataType* pData)
 8002168:	b4b0      	push	{r4, r5, r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
        {
            // bufferDataType data = 0;

            if (mEmpty_){
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x18>
                return EXIT_ERROR;
 800217c:	2300      	movs	r3, #0
 800217e:	e040      	b.n	8002202 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x9a>
                // return data;
            }

            *pData = mBuffer_[mTail_];
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 8002186:	4619      	mov	r1, r3
 8002188:	6838      	ldr	r0, [r7, #0]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	1a5b      	subs	r3, r3, r1
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	4605      	mov	r5, r0
 8002198:	1d1c      	adds	r4, r3, #4
 800219a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800219c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800219e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80021a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            mFull_ = false;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

            if(--mSize_ == 0){
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	801a      	strh	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bf0c      	ite	eq
 80021c2:	2301      	moveq	r3, #1
 80021c4:	2300      	movne	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x6c>
                mEmpty_ = true;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            }

            if(++mTail_ == sCapacity_){
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 80021da:	3301      	adds	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	bf0c      	ite	eq
 80021ee:	2301      	moveq	r3, #1
 80021f0:	2300      	movne	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x98>
                mTail_ = 0;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
            } 

            return EXIT_OK;
 8002200:	2301      	movs	r3, #1
        }
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bcb0      	pop	{r4, r5, r7}
 800220a:	4770      	bx	lr

0800220c <_ZNSt5tupleIJN8ICM426888icm42688EEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fa33 	bl	8002688 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1EOS2_>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1EOS6_>:
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800223e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f103 0208 	add.w	r2, r3, #8
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	3308      	adds	r3, #8
 800224c:	4619      	mov	r1, r3
 800224e:	4610      	mov	r0, r2
 8002250:	f7ff ffdc 	bl	800220c <_ZNSt5tupleIJN8ICM426888icm42688EEEC1EOS2_>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline _GLIBCXX20_CONSTEXPR typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 800225e:	b590      	push	{r4, r7, lr}
 8002260:	b085      	sub	sp, #20
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 800226a:	68b8      	ldr	r0, [r7, #8]
 800226c:	f000 f9d7 	bl	800261e <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS5_E4typeE>
 8002270:	4604      	mov	r4, r0
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f9de 	bl	8002634 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	4621      	mov	r1, r4
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f9e3 	bl	800264a <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1IJRS1_EEEOS4_DpOT_>
    }
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	bd90      	pop	{r4, r7, pc}

0800228c <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fce3 	bl	8000c62 <_ZNSt14_Function_baseD1Ev>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<_Functor>, function&>
	operator=(_Functor&& __f)
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
 80022b0:	6838      	ldr	r0, [r7, #0]
 80022b2:	f000 f9f9 	bl	80026a8 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 80022b6:	4602      	mov	r2, r0
 80022b8:	f107 0308 	add.w	r3, r7, #8
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f9fe 	bl	80026c0 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_>
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fa28 	bl	8002720 <_ZNSt8functionIFvvEE4swapERS1_>
 80022d0:	f107 0308 	add.w	r3, r7, #8
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ffd9 	bl	800228c <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 80022da:	687b      	ldr	r3, [r7, #4]
	}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <_ZN4iIMUC1EOS_>:
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <_ZN4iIMUC1EOS_+0x20>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	0800976c 	.word	0x0800976c

08002308 <_ZN8ICM426888icm42688C1EOS0_>:
        uint8_t FIFO_CONFIG1 = 0x00;
        uint8_t FIFO_CONFIG2 = 0x00;
        uint8_t FIFO_CONFIG3 = 0x00;
    };

    class icm42688: public iIMU{
 8002308:	b5b0      	push	{r4, r5, r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ffe3 	bl	80022e4 <_ZN4iIMUC1EOS_>
 800231e:	4a46      	ldr	r2, [pc, #280]	; (8002438 <_ZN8ICM426888icm42688C1EOS0_+0x130>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	1d10      	adds	r0, r2, #4
 800232a:	3304      	adds	r3, #4
 800232c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8002330:	4619      	mov	r1, r3
 8002332:	f007 f97b 	bl	800962c <memcpy>
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f502 74e8 	add.w	r4, r2, #464	; 0x1d0
 800233e:	f503 75e8 	add.w	r5, r3, #464	; 0x1d0
 8002342:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800234a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800234e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f502 74fc 	add.w	r4, r2, #504	; 0x1f8
 800235a:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 800235e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002362:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002366:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f502 7406 	add.w	r4, r2, #536	; 0x218
 8002372:	f503 7506 	add.w	r5, r3, #536	; 0x218
 8002376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800237a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800237e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800238a:	f502 720e 	add.w	r2, r2, #568	; 0x238
 800238e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002392:	6018      	str	r0, [r3, #0]
 8002394:	3304      	adds	r3, #4
 8002396:	8019      	strh	r1, [r3, #0]
 8002398:	3302      	adds	r3, #2
 800239a:	0c0a      	lsrs	r2, r1, #16
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f893 2248 	ldrb.w	r2, [r3, #584]	; 0x248
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	f893 2249 	ldrb.w	r2, [r3, #585]	; 0x249
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bdb0      	pop	{r4, r5, r7, pc}
 8002438:	0800971c 	.word	0x0800971c

0800243c <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>:
      constexpr _Head_base(_Head_base&&) = default;
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff5b 	bl	8002308 <_ZN8ICM426888icm42688C1EOS0_>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&&) = default;
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f9b3 	bl	80027d8 <_ZNSt11_Tuple_implILj1EJtEEC1EOS0_>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	1d1a      	adds	r2, r3, #4
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	3304      	adds	r3, #4
 800247a:	4619      	mov	r1, r3
 800247c:	4610      	mov	r0, r2
 800247e:	f7ff ffdd 	bl	800243c <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1EOS2_>:
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ffdd 	bl	800245c <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1EOS2_>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1EOS6_>:
      _Bind(_Bind&&) = default;
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024be:	e883 0003 	stmia.w	r3, {r0, r1}
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f103 0208 	add.w	r2, r3, #8
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	3308      	adds	r3, #8
 80024cc:	4619      	mov	r1, r3
 80024ce:	4610      	mov	r0, r2
 80024d0:	f7ff ffdc 	bl	800248c <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1EOS2_>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISD_EEE5valueESB_JDpT0_EE4typeEOSB_DpOSI_>:
    bind(_Func&& __f, _BoundArgs&&... __args)
 80024de:	b5b0      	push	{r4, r5, r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	603b      	str	r3, [r7, #0]
					  std::forward<_BoundArgs>(__args)...);
 80024ec:	68b8      	ldr	r0, [r7, #8]
 80024ee:	f000 f938 	bl	8002762 <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS5_E4typeE>
 80024f2:	4604      	mov	r4, r0
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f89d 	bl	8002634 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80024fa:	4605      	mov	r5, r0
 80024fc:	6838      	ldr	r0, [r7, #0]
 80024fe:	f000 f93b 	bl	8002778 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8002502:	4603      	mov	r3, r0
 8002504:	462a      	mov	r2, r5
 8002506:	4621      	mov	r1, r4
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f940 	bl	800278e <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1IJRS1_RtEEEOS4_DpOT_>
    }
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bdb0      	pop	{r4, r5, r7, pc}

08002516 <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>:
	operator=(_Functor&& __f)
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8002520:	6838      	ldr	r0, [r7, #0]
 8002522:	f000 f969 	bl	80027f8 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002526:	4602      	mov	r2, r0
 8002528:	f107 0308 	add.w	r3, r7, #8
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f96e 	bl	8002810 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_>
 8002534:	f107 0308 	add.w	r3, r7, #8
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f8f0 	bl	8002720 <_ZNSt8functionIFvvEE4swapERS1_>
 8002540:	f107 0308 	add.w	r3, r7, #8
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fea1 	bl	800228c <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 800254a:	687b      	ldr	r3, [r7, #4]
	}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_>:
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::write(bufferDataType data)
 8002554:	b084      	sub	sp, #16
 8002556:	b4b0      	push	{r4, r5, r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	f107 001c 	add.w	r0, r7, #28
 8002562:	e880 000e 	stmia.w	r0, {r1, r2, r3}
            mBuffer_[mHead_] = data;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 800256c:	4619      	mov	r1, r3
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	1a5b      	subs	r3, r3, r1
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	1d1c      	adds	r4, r3, #4
 800257c:	f107 051c 	add.w	r5, r7, #28
 8002580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            mEmpty_ = false;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            if(++mHead_ == sCapacity_){
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 800259a:	3301      	adds	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 80025aa:	2b10      	cmp	r3, #16
 80025ac:	bf0c      	ite	eq
 80025ae:	2301      	moveq	r3, #1
 80025b0:	2300      	movne	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x6c>
                mHead_ = 0;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
            if(mFull_ == true){
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d10f      	bne.n	80025ea <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x96>
                mTail_ = mTail_ + 1 == sCapacity_ ? 0 : mTail_ + 1; // mTail_ = ++mTail_ == sCapacity_ ? 0 : mTail_;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 80025d0:	2b0f      	cmp	r3, #15
 80025d2:	d005      	beq.n	80025e0 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x8c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 80025da:	3301      	adds	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	e000      	b.n	80025e2 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x8e>
 80025e0:	2200      	movs	r2, #0
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 80025e8:	e012      	b.n	8002610 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0xbc>
            }else if(++mSize_ == sCapacity_){
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	3301      	adds	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	801a      	strh	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	bf0c      	ite	eq
 80025fe:	2301      	moveq	r3, #1
 8002600:	2300      	movne	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0xbc>
                mFull_ = true;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
            return EXIT_OK;
 8002610:	2301      	movs	r3, #1
        }
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bcb0      	pop	{r4, r5, r7}
 800261a:	b004      	add	sp, #16
 800261c:	4770      	bx	lr

0800261e <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1IJRS1_EEEOS4_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 800264a:	b590      	push	{r4, r7, lr}
 800264c:	b085      	sub	sp, #20
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 8002656:	68b8      	ldr	r0, [r7, #8]
 8002658:	f000 f90a 	bl	8002870 <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_STvEEONSt16remove_referenceIT_E4typeEOS7_>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002664:	e883 0003 	stmia.w	r3, {r0, r1}
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f103 0408 	add.w	r4, r3, #8
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ffe0 	bl	8002634 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002674:	4603      	mov	r3, r0
 8002676:	4619      	mov	r1, r3
 8002678:	4620      	mov	r0, r4
 800267a:	f000 f904 	bl	8002886 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1IJRS1_ELb1ELb1EEEDpOT_>
	{ }
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bd90      	pop	{r4, r7, pc}

08002688 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fecf 	bl	800243c <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>
      { }
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_>:
	function(_Functor&& __f)
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	461a      	mov	r2, r3
 80026ce:	2300      	movs	r3, #0
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	6053      	str	r3, [r2, #4]
 80026d4:	6093      	str	r3, [r2, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe fa83 	bl	8000be4 <_ZNSt14_Function_baseC1Ev>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80026e4:	6838      	ldr	r0, [r7, #0]
 80026e6:	f000 f8e1 	bl	80028ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE21_M_not_empty_functionIS8_EEbRKT_>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00e      	beq.n	800270e <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80026f0:	687c      	ldr	r4, [r7, #4]
 80026f2:	6838      	ldr	r0, [r7, #0]
 80026f4:	f7ff ffd8 	bl	80026a8 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4619      	mov	r1, r3
 80026fc:	4620      	mov	r0, r4
 80026fe:	f000 f8e0 	bl	80028c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x58>)
 8002706:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a04      	ldr	r2, [pc, #16]	; (800271c <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x5c>)
 800270c:	609a      	str	r2, [r3, #8]
	}
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bd90      	pop	{r4, r7, pc}
 8002718:	080028e7 	.word	0x080028e7
 800271c:	08002905 	.word	0x08002905

08002720 <_ZNSt8functionIFvvEE4swapERS1_>:
       *  @param __x A %function with identical call signature.
       *
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x) noexcept
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_functor, __x._M_functor);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f000 f911 	bl	8002958 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f103 0208 	add.w	r2, r3, #8
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	3308      	adds	r3, #8
 8002740:	4619      	mov	r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f000 f93a 	bl	80029bc <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f103 020c 	add.w	r2, r3, #12
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	4619      	mov	r1, r3
 8002754:	4610      	mov	r0, r2
 8002756:	f000 f95b 	bl	8002a10 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1IJRS1_RtEEEOS4_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 800278e:	b5b0      	push	{r4, r5, r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 800279c:	68b8      	ldr	r0, [r7, #8]
 800279e:	f000 f956 	bl	8002a4e <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_SThEEONSt16remove_referenceIT_E4typeEOS7_>
 80027a2:	4602      	mov	r2, r0
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f103 0408 	add.w	r4, r3, #8
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff3d 	bl	8002634 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80027ba:	4605      	mov	r5, r0
 80027bc:	6838      	ldr	r0, [r7, #0]
 80027be:	f7ff ffdb 	bl	8002778 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80027c2:	4603      	mov	r3, r0
 80027c4:	461a      	mov	r2, r3
 80027c6:	4629      	mov	r1, r5
 80027c8:	4620      	mov	r0, r4
 80027ca:	f000 f94b 	bl	8002a64 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1IRS1_RtLb1EEEOT_OT0_>
	{ }
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bdb0      	pop	{r4, r5, r7, pc}

080027d8 <_ZNSt11_Tuple_implILj1EJtEEC1EOS0_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	8812      	ldrh	r2, [r2, #0]
 80027e8:	801a      	strh	r2, [r3, #0]
      { }
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_>:
	function(_Functor&& __f)
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	461a      	mov	r2, r3
 800281e:	2300      	movs	r3, #0
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	6053      	str	r3, [r2, #4]
 8002824:	6093      	str	r3, [r2, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4618      	mov	r0, r3
 800282a:	f7fe f9db 	bl	8000be4 <_ZNSt14_Function_baseC1Ev>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8002834:	6838      	ldr	r0, [r7, #0]
 8002836:	f000 f92e 	bl	8002a96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE21_M_not_empty_functionIS8_EEbRKT_>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00e      	beq.n	800285e <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8002840:	687c      	ldr	r4, [r7, #4]
 8002842:	6838      	ldr	r0, [r7, #0]
 8002844:	f7ff ffd8 	bl	80027f8 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002848:	4603      	mov	r3, r0
 800284a:	4619      	mov	r1, r3
 800284c:	4620      	mov	r0, r4
 800284e:	f000 f92d 	bl	8002aac <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a04      	ldr	r2, [pc, #16]	; (8002868 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x58>)
 8002856:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a04      	ldr	r2, [pc, #16]	; (800286c <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x5c>)
 800285c:	609a      	str	r2, [r3, #8]
	}
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bd90      	pop	{r4, r7, pc}
 8002868:	08002ad1 	.word	0x08002ad1
 800286c:	08002aef 	.word	0x08002aef

08002870 <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_STvEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1IJRS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8002886:	b590      	push	{r4, r7, lr}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8002890:	687c      	ldr	r4, [r7, #4]
 8002892:	6838      	ldr	r0, [r7, #0]
 8002894:	f7ff fece 	bl	8002634 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002898:	4603      	mov	r3, r0
 800289a:	4619      	mov	r1, r3
 800289c:	4620      	mov	r0, r4
 800289e:	f000 f945 	bl	8002b2c <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1IRS1_EEOT_>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd90      	pop	{r4, r7, pc}

080028ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	  { return true; }
 80028b4:	2301      	movs	r3, #1
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80028c2:	b590      	push	{r4, r7, lr}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80028cc:	6838      	ldr	r0, [r7, #0]
 80028ce:	f7ff feeb 	bl	80026a8 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4622      	mov	r2, r4
 80028d6:	4619      	mov	r1, r3
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f93a 	bl	8002b52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd90      	pop	{r4, r7, pc}

080028e6 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f94c 	bl	8002b8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f966 	bl	8002bc8 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 80028fc:	bf00      	nop
      }
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	4613      	mov	r3, r2
 8002910:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d109      	bne.n	800292c <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f965 	bl	8002be8 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 800291e:	4604      	mov	r4, r0
 8002920:	68b8      	ldr	r0, [r7, #8]
 8002922:	f000 f933 	bl	8002b8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8002926:	4603      	mov	r3, r0
 8002928:	6023      	str	r3, [r4, #0]
	    break;
 800292a:	e005      	b.n	8002938 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	461a      	mov	r2, r3
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f964 	bl	8002c00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 8002938:	2300      	movs	r3, #0
      }
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bd90      	pop	{r4, r7, pc}

08002942 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ffed 	bl	8002942 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002968:	4602      	mov	r2, r0
 800296a:	f107 0308 	add.w	r3, r7, #8
 800296e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002972:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8002976:	6838      	ldr	r0, [r7, #0]
 8002978:	f7ff ffe3 	bl	8002942 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800297c:	4602      	mov	r2, r0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002984:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8002988:	f107 0308 	add.w	r3, r7, #8
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ffd8 	bl	8002942 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002992:	4602      	mov	r2, r0
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	e892 0003 	ldmia.w	r2, {r0, r1}
 800299a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ffed 	bl	80029a6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80029cc:	4603      	mov	r3, r0
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80029d2:	6838      	ldr	r0, [r7, #0]
 80029d4:	f7ff ffe7 	bl	80029a6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80029d8:	4603      	mov	r3, r0
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80029e0:	f107 030c 	add.w	r3, r7, #12
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ffde 	bl	80029a6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80029ea:	4603      	mov	r3, r0
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	601a      	str	r2, [r3, #0]
    }
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ffed 	bl	80029fa <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8002a20:	4603      	mov	r3, r0
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002a26:	6838      	ldr	r0, [r7, #0]
 8002a28:	f7ff ffe7 	bl	80029fa <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002a34:	f107 030c 	add.w	r3, r7, #12
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ffde 	bl	80029fa <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	601a      	str	r2, [r3, #0]
    }
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_SThEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1IRS1_RtLb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8002a64:	b5b0      	push	{r4, r5, r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8002a70:	68fc      	ldr	r4, [r7, #12]
 8002a72:	68b8      	ldr	r0, [r7, #8]
 8002a74:	f7ff fdde 	bl	8002634 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a78:	4605      	mov	r5, r0
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff fe7c 	bl	8002778 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461a      	mov	r2, r3
 8002a84:	4629      	mov	r1, r5
 8002a86:	4620      	mov	r0, r4
 8002a88:	f000 f8f4 	bl	8002c74 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1IRS1_JRtEvEEOT_DpOT0_>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bdb0      	pop	{r4, r5, r7, pc}

08002a96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
	  { return true; }
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8002ab6:	6838      	ldr	r0, [r7, #0]
 8002ab8:	f7ff fe9e 	bl	80027f8 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4622      	mov	r2, r4
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8f4 	bl	8002cb0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd90      	pop	{r4, r7, pc}

08002ad0 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f906 	bl	8002cea <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 f920 	bl	8002d26 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 8002ae6:	bf00      	nop
      }
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002aee:	b590      	push	{r4, r7, lr}
 8002af0:	b085      	sub	sp, #20
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	4613      	mov	r3, r2
 8002afa:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d109      	bne.n	8002b16 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f91f 	bl	8002d46 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8002b08:	4604      	mov	r4, r0
 8002b0a:	68b8      	ldr	r0, [r7, #8]
 8002b0c:	f000 f8ed 	bl	8002cea <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8002b10:	4603      	mov	r3, r0
 8002b12:	6023      	str	r3, [r4, #0]
	    break;
 8002b14:	e005      	b.n	8002b22 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f91f 	bl	8002d60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 8002b22:	2300      	movs	r3, #0
      }
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd90      	pop	{r4, r7, pc}

08002b2c <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1IRS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8002b36:	687c      	ldr	r4, [r7, #4]
 8002b38:	6838      	ldr	r0, [r7, #0]
 8002b3a:	f7ff fd7b 	bl	8002634 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4619      	mov	r1, r3
 8002b42:	4620      	mov	r0, r4
 8002b44:	f000 f9f2 	bl	8002f2c <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>
	{ }
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd90      	pop	{r4, r7, pc}

08002b52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8002b52:	b5b0      	push	{r4, r5, r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8002b5e:	68b8      	ldr	r0, [r7, #8]
 8002b60:	f7ff fda2 	bl	80026a8 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002b64:	4605      	mov	r5, r0
 8002b66:	f44f 701d 	mov.w	r0, #628	; 0x274
 8002b6a:	f006 fbf8 	bl	800935e <_Znwj>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461c      	mov	r4, r3
 8002b72:	4629      	mov	r1, r5
 8002b74:	4620      	mov	r0, r4
 8002b76:	f7ff fb59 	bl	800222c <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1EOS6_>
	    __dest._M_access<_Functor*>()
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f834 	bl	8002be8 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8002b80:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8002b82:	601c      	str	r4, [r3, #0]
	  }
 8002b84:	bf00      	nop
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bdb0      	pop	{r4, r5, r7, pc}

08002b8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f9dc 	bl	8002f52 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERKT_v>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	681b      	ldr	r3, [r3, #0]
	}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_vES3_EEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	7138      	strb	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8002bb0:	6838      	ldr	r0, [r7, #0]
 8002bb2:	f000 f9da 	bl	8002f6a <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 f9e1 	bl	8002f80 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEclIJES2_EET0_DpOT_>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f9ca 	bl	8002f6a <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4620      	mov	r0, r4
 8002bdc:	f7ff ffe3 	bl	8002ba6 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_vES3_EEJEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd90      	pop	{r4, r7, pc}

08002be8 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>:
      _M_access()
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7fe f820 	bl	8000c36 <_ZNSt9_Any_data9_M_accessEv>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d82a      	bhi.n	8002c6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
 8002c14:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1c>)
 8002c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1a:	bf00      	nop
 8002c1c:	08002c2d 	.word	0x08002c2d
 8002c20:	08002c3b 	.word	0x08002c3b
 8002c24:	08002c4f 	.word	0x08002c4f
 8002c28:	08002c61 	.word	0x08002c61
	      __dest._M_access<const type_info*>() = nullptr;
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 f9b9 	bl	8002fa4 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
	      break;
 8002c38:	e017      	b.n	8002c6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f7ff ffd4 	bl	8002be8 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8002c40:	4604      	mov	r4, r0
 8002c42:	68b8      	ldr	r0, [r7, #8]
 8002c44:	f7ff ffa2 	bl	8002b8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	6023      	str	r3, [r4, #0]
	      break;
 8002c4c:	e00d      	b.n	8002c6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8002c4e:	68b8      	ldr	r0, [r7, #8]
 8002c50:	f7ff ff9c 	bl	8002b8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8002c54:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8002c56:	4619      	mov	r1, r3
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f9af 	bl	8002fbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>
	      break;
 8002c5e:	e004      	b.n	8002c6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8002c60:	4621      	mov	r1, r4
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f9bc 	bl	8002fe0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8002c68:	bf00      	nop
	  return false;
 8002c6a:	2300      	movs	r3, #0
	}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd90      	pop	{r4, r7, pc}

08002c74 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1IRS1_JRtEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8002c74:	b590      	push	{r4, r7, lr}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8002c80:	68fc      	ldr	r4, [r7, #12]
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff fd78 	bl	8002778 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	f000 f9bc 	bl	800300a <_ZNSt11_Tuple_implILj1EJtEEC1IRtEEOT_>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1d1c      	adds	r4, r3, #4
 8002c96:	68b8      	ldr	r0, [r7, #8]
 8002c98:	f7ff fccc 	bl	8002634 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f000 f943 	bl	8002f2c <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>
	{ }
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd90      	pop	{r4, r7, pc}

08002cb0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8002cb0:	b5b0      	push	{r4, r5, r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8002cbc:	68b8      	ldr	r0, [r7, #8]
 8002cbe:	f7ff fd9b 	bl	80027f8 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002cc2:	4605      	mov	r5, r0
 8002cc4:	f44f 701e 	mov.w	r0, #632	; 0x278
 8002cc8:	f006 fb49 	bl	800935e <_Znwj>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461c      	mov	r4, r3
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f7ff fbea 	bl	80024ac <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1EOS6_>
	    __dest._M_access<_Functor*>()
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f834 	bl	8002d46 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8002cde:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8002ce0:	601c      	str	r4, [r3, #0]
	  }
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bdb0      	pop	{r4, r5, r7, pc}

08002cea <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f99c 	bl	8003030 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERKT_v>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	681b      	ldr	r3, [r3, #0]
	}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_hES3_tEEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	7138      	strb	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8002d0e:	6838      	ldr	r0, [r7, #0]
 8002d10:	f000 f99a 	bl	8003048 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f9a1 	bl	800305e <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEclIJES2_EET0_DpOT_>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002d26:	b590      	push	{r4, r7, lr}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f98a 	bl	8003048 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4619      	mov	r1, r3
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f7ff ffe3 	bl	8002d04 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_hES3_tEEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd90      	pop	{r4, r7, pc}

08002d46 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>:
      _M_access()
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fd ff71 	bl	8000c36 <_ZNSt9_Any_data9_M_accessEv>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d82a      	bhi.n	8002dca <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
 8002d74:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1c>)
 8002d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7a:	bf00      	nop
 8002d7c:	08002d8d 	.word	0x08002d8d
 8002d80:	08002d9b 	.word	0x08002d9b
 8002d84:	08002daf 	.word	0x08002daf
 8002d88:	08002dc1 	.word	0x08002dc1
	      __dest._M_access<const type_info*>() = nullptr;
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f909 	bl	8002fa4 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
	      break;
 8002d98:	e017      	b.n	8002dca <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f7ff ffd3 	bl	8002d46 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8002da0:	4604      	mov	r4, r0
 8002da2:	68b8      	ldr	r0, [r7, #8]
 8002da4:	f7ff ffa1 	bl	8002cea <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8002da8:	4603      	mov	r3, r0
 8002daa:	6023      	str	r3, [r4, #0]
	      break;
 8002dac:	e00d      	b.n	8002dca <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8002dae:	68b8      	ldr	r0, [r7, #8]
 8002db0:	f7ff ff9b 	bl	8002cea <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8002db4:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8002db6:	4619      	mov	r1, r3
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f962 	bl	8003082 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>
	      break;
 8002dbe:	e004      	b.n	8002dca <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f96f 	bl	80030a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8002dc8:	bf00      	nop
	  return false;
 8002dca:	2300      	movs	r3, #0
	}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd90      	pop	{r4, r7, pc}

08002dd4 <_ZN4iIMUC1ERKS_>:
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
 8002dde:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <_ZN4iIMUC1ERKS_+0x20>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	0800976c 	.word	0x0800976c

08002df8 <_ZN8ICM426888icm42688C1ERKS0_>:
 8002df8:	b5b0      	push	{r4, r5, r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ffe3 	bl	8002dd4 <_ZN4iIMUC1ERKS_>
 8002e0e:	4a46      	ldr	r2, [pc, #280]	; (8002f28 <_ZN8ICM426888icm42688C1ERKS0_+0x130>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	1d10      	adds	r0, r2, #4
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8002e20:	4619      	mov	r1, r3
 8002e22:	f006 fc03 	bl	800962c <memcpy>
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	f502 74e8 	add.w	r4, r2, #464	; 0x1d0
 8002e2e:	f503 75e8 	add.w	r5, r3, #464	; 0x1d0
 8002e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002e3e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f502 74fc 	add.w	r4, r2, #504	; 0x1f8
 8002e4a:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 8002e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e52:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	f502 7406 	add.w	r4, r2, #536	; 0x218
 8002e62:	f503 7506 	add.w	r5, r3, #536	; 0x218
 8002e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8002e7a:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8002e7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e82:	6018      	str	r0, [r3, #0]
 8002e84:	3304      	adds	r3, #4
 8002e86:	8019      	strh	r1, [r3, #0]
 8002e88:	3302      	adds	r3, #2
 8002e8a:	0c0a      	lsrs	r2, r1, #16
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	f893 2248 	ldrb.w	r2, [r3, #584]	; 0x248
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f893 2249 	ldrb.w	r2, [r3, #585]	; 0x249
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bdb0      	pop	{r4, r5, r7, pc}
 8002f28:	0800971c 	.word	0x0800971c

08002f2c <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8002f36:	687c      	ldr	r4, [r7, #4]
 8002f38:	6838      	ldr	r0, [r7, #0]
 8002f3a:	f7ff fb7b 	bl	8002634 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4619      	mov	r1, r3
 8002f42:	4620      	mov	r0, r4
 8002f44:	f7ff ff58 	bl	8002df8 <_ZN8ICM426888icm42688C1ERKS0_>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd90      	pop	{r4, r7, pc}

08002f52 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERKT_v>:
      _M_access() const
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fd fe76 	bl	8000c4c <_ZNKSt9_Any_data9_M_accessEv>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEclIJES2_EET0_DpOT_>:
	operator()(_Args&&... __args)
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 8002f88:	f000 f8a2 	bl	80030d0 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	  return this->__call<_Result>(
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	4622      	mov	r2, r4
 8002f92:	4619      	mov	r1, r3
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f8a3 	bl	80030e0 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EE6__callIS2_JEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
 8002f9a:	4603      	mov	r3, r0
	}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd90      	pop	{r4, r7, pc}

08002fa4 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7fd fe42 	bl	8000c36 <_ZNSt9_Any_data9_M_accessEv>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8002fc6:	6838      	ldr	r0, [r7, #0]
 8002fc8:	f000 f8a7 	bl	800311a <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4622      	mov	r2, r4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f8f5 	bl	80031c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd90      	pop	{r4, r7, pc}

08002fe0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff fdfc 	bl	8002be8 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d004      	beq.n	8003002 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x22>
 8002ff8:	f44f 711d 	mov.w	r1, #628	; 0x274
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f006 f9ac 	bl	800935a <_ZdlPvj>
	}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <_ZNSt11_Tuple_implILj1EJtEEC1IRtEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800300a:	b590      	push	{r4, r7, lr}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8003014:	687c      	ldr	r4, [r7, #4]
 8003016:	6838      	ldr	r0, [r7, #0]
 8003018:	f7ff fbae 	bl	8002778 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800301c:	4603      	mov	r3, r0
 800301e:	4619      	mov	r1, r3
 8003020:	4620      	mov	r0, r4
 8003022:	f000 f8eb 	bl	80031fc <_ZNSt10_Head_baseILj1EtLb0EEC1IRtEEOT_>
	{ }
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bd90      	pop	{r4, r7, pc}

08003030 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERKT_v>:
      _M_access() const
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7fd fe07 	bl	8000c4c <_ZNKSt9_Any_data9_M_accessEv>
 800303e:	4603      	mov	r3, r0
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEclIJES2_EET0_DpOT_>:
	operator()(_Args&&... __args)
 800305e:	b590      	push	{r4, r7, lr}
 8003060:	b085      	sub	sp, #20
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 8003066:	f000 f833 	bl	80030d0 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	  return this->__call<_Result>(
 800306a:	f107 030c 	add.w	r3, r7, #12
 800306e:	4622      	mov	r2, r4
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f8d3 	bl	800321e <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEE6__callIS2_JEJLj0ELj1EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
 8003078:	4603      	mov	r3, r0
	}
 800307a:	4618      	mov	r0, r3
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bd90      	pop	{r4, r7, pc}

08003082 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8003082:	b590      	push	{r4, r7, lr}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800308c:	6838      	ldr	r0, [r7, #0]
 800308e:	f000 f8f1 	bl	8003274 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>
 8003092:	4603      	mov	r3, r0
 8003094:	4622      	mov	r2, r4
 8003096:	4619      	mov	r1, r3
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f935 	bl	8003308 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd90      	pop	{r4, r7, pc}

080030a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff fe48 	bl	8002d46 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 80030b6:	4603      	mov	r3, r0
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d004      	beq.n	80030c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x22>
 80030be:	f44f 711e 	mov.w	r1, #632	; 0x278
 80030c2:	4618      	mov	r0, r3
 80030c4:	f006 f949 	bl	800935a <_ZdlPvj>
	}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 80030d4:	bf00      	nop
 80030d6:	4618      	mov	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EE6__callIS2_JEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 80030ec:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3308      	adds	r3, #8
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f925 	bl	8003342 <_ZSt3getILj0EJN8ICM426888icm42688EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80030f8:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 80030fa:	f107 0314 	add.w	r3, r7, #20
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	4618      	mov	r0, r3
 8003102:	f000 f92b 	bl	800335c <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>
 8003106:	4603      	mov	r3, r0
 8003108:	4619      	mov	r1, r3
 800310a:	4620      	mov	r0, r4
 800310c:	f000 f934 	bl	8003378 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
 8003110:	4603      	mov	r3, r0
	}
 8003112:	4618      	mov	r0, r3
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	bd90      	pop	{r4, r7, pc}

0800311a <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>:
      constexpr _Head_base(const _Head_base&) = default;
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	4611      	mov	r1, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fe59 	bl	8002df8 <_ZN8ICM426888icm42688C1ERKS0_>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1ERKS2_>:
      constexpr _Tuple_impl(const _Tuple_impl&) = default;
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ffe5 	bl	8003130 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1ERKS2_>:
      constexpr tuple(const tuple&) = default;
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ffe5 	bl	8003150 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1ERKS2_>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1ERKS6_>:
      _Bind(const _Bind&) = default;
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f103 0208 	add.w	r2, r3, #8
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	3308      	adds	r3, #8
 80031b0:	4619      	mov	r1, r3
 80031b2:	4610      	mov	r0, r2
 80031b4:	f7ff ffdc 	bl	8003170 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1ERKS2_>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 80031c2:	b5b0      	push	{r4, r5, r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 80031ce:	68b8      	ldr	r0, [r7, #8]
 80031d0:	f7ff ffa3 	bl	800311a <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>
 80031d4:	4605      	mov	r5, r0
 80031d6:	f44f 701d 	mov.w	r0, #628	; 0x274
 80031da:	f006 f8c0 	bl	800935e <_Znwj>
 80031de:	4603      	mov	r3, r0
 80031e0:	461c      	mov	r4, r3
 80031e2:	4629      	mov	r1, r5
 80031e4:	4620      	mov	r0, r4
 80031e6:	f7ff ffd3 	bl	8003190 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1ERKS6_>
	    __dest._M_access<_Functor*>()
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f7ff fcfc 	bl	8002be8 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 80031f0:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 80031f2:	601c      	str	r4, [r3, #0]
	  }
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bdb0      	pop	{r4, r5, r7, pc}

080031fc <_ZNSt10_Head_baseILj1EtLb0EEC1IRtEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8003206:	6838      	ldr	r0, [r7, #0]
 8003208:	f7ff fab6 	bl	8002778 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800320c:	4603      	mov	r3, r0
 800320e:	881a      	ldrh	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	801a      	strh	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEE6__callIS2_JEJLj0ELj1EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 800321e:	b5b0      	push	{r4, r5, r7, lr}
 8003220:	b086      	sub	sp, #24
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 800322a:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3308      	adds	r3, #8
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f8b8 	bl	80033a6 <_ZSt3getILj0EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8003236:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 8003238:	f107 0310 	add.w	r3, r7, #16
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	4618      	mov	r0, r3
 8003240:	f000 f88c 	bl	800335c <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>
 8003244:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	3308      	adds	r3, #8
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f8b8 	bl	80033c0 <_ZSt3getILj1EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8003250:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 8003252:	f107 0314 	add.w	r3, r7, #20
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	4618      	mov	r0, r3
 800325a:	f000 f8be 	bl	80033da <_ZNVKSt3_MuItLb0ELb0EEclIRtSt5tupleIJEEEEOT_S6_RT0_>
 800325e:	4603      	mov	r3, r0
 8003260:	461a      	mov	r2, r3
 8003262:	4629      	mov	r1, r5
 8003264:	4620      	mov	r0, r4
 8003266:	f000 f8c6 	bl	80033f6 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>
 800326a:	4603      	mov	r3, r0
	}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bdb0      	pop	{r4, r5, r7, pc}

08003274 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4618      	mov	r0, r3
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1ERKS2_>:
      constexpr _Tuple_impl(const _Tuple_impl&) = default;
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	8812      	ldrh	r2, [r2, #0]
 800329a:	801a      	strh	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	1d1a      	adds	r2, r3, #4
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f7ff ff42 	bl	8003130 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1ERKS2_>:
      constexpr tuple(const tuple&) = default;
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff ffdf 	bl	800328a <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1ERKS2_>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1ERKS6_>:
      _Bind(const _Bind&) = default;
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f103 0208 	add.w	r2, r3, #8
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	3308      	adds	r3, #8
 80032f6:	4619      	mov	r1, r3
 80032f8:	4610      	mov	r0, r2
 80032fa:	f7ff ffdc 	bl	80032b6 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1ERKS2_>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8003308:	b5b0      	push	{r4, r5, r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8003314:	68b8      	ldr	r0, [r7, #8]
 8003316:	f7ff ffad 	bl	8003274 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>
 800331a:	4605      	mov	r5, r0
 800331c:	f44f 701e 	mov.w	r0, #632	; 0x278
 8003320:	f006 f81d 	bl	800935e <_Znwj>
 8003324:	4603      	mov	r3, r0
 8003326:	461c      	mov	r4, r3
 8003328:	4629      	mov	r1, r5
 800332a:	4620      	mov	r0, r4
 800332c:	f7ff ffd3 	bl	80032d6 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1ERKS6_>
	    __dest._M_access<_Functor*>()
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f7ff fd08 	bl	8002d46 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8003336:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8003338:	601c      	str	r4, [r3, #0]
	  }
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bdb0      	pop	{r4, r5, r7, pc}

08003342 <_ZSt3getILj0EJN8ICM426888icm42688EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4618      	mov	r0, r3
 800334e:	f000 f86e 	bl	800342e <_ZSt12__get_helperILj0EN8ICM426888icm42688EJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8003352:	4603      	mov	r3, r0
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 8003368:	68b8      	ldr	r0, [r7, #8]
 800336a:	f7ff f963 	bl	8002634 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 800336e:	4603      	mov	r3, r0
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f85f 	bl	8003446 <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003388:	4604      	mov	r4, r0
 800338a:	6838      	ldr	r0, [r7, #0]
 800338c:	f7ff f952 	bl	8002634 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003390:	4603      	mov	r3, r0
 8003392:	461a      	mov	r2, r3
 8003394:	4621      	mov	r1, r4
 8003396:	4628      	mov	r0, r5
 8003398:	f000 f860 	bl	800345c <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>
 800339c:	4603      	mov	r3, r0
    }
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bdb0      	pop	{r4, r5, r7, pc}

080033a6 <_ZSt3getILj0EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 f87a 	bl	80034aa <_ZSt12__get_helperILj0EN8ICM426888icm42688EJtEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80033b6:	4603      	mov	r3, r0
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <_ZSt3getILj1EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f879 	bl	80034c2 <_ZSt12__get_helperILj1EtJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <_ZNVKSt3_MuItLb0ELb0EEclIRtSt5tupleIJEEEEOT_S6_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 80033e6:	68b8      	ldr	r0, [r7, #8]
 80033e8:	f7ff f9c6 	bl	8002778 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 80033f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f869 	bl	80034da <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003408:	4604      	mov	r4, r0
 800340a:	68b8      	ldr	r0, [r7, #8]
 800340c:	f7ff f912 	bl	8002634 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003410:	4605      	mov	r5, r0
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff f9b0 	bl	8002778 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8003418:	4603      	mov	r3, r0
 800341a:	462a      	mov	r2, r5
 800341c:	4621      	mov	r1, r4
 800341e:	4630      	mov	r0, r6
 8003420:	f000 f866 	bl	80034f0 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>
 8003424:	4603      	mov	r3, r0
    }
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800342e <_ZSt12__get_helperILj0EN8ICM426888icm42688EJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f889 	bl	800354e <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEE7_M_headERS2_>
 800343c:	4603      	mov	r3, r0
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	7338      	strb	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f87d 	bl	8003568 <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>
 800346e:	4603      	mov	r3, r0
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	6852      	ldr	r2, [r2, #4]
 8003474:	1052      	asrs	r2, r2, #1
 8003476:	1899      	adds	r1, r3, r2
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	6852      	ldr	r2, [r2, #4]
 800347c:	f002 0201 	and.w	r2, r2, #1
 8003480:	2a00      	cmp	r2, #0
 8003482:	d102      	bne.n	800348a <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x2e>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	e008      	b.n	800349c <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x40>
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	6852      	ldr	r2, [r2, #4]
 800348e:	1052      	asrs	r2, r2, #1
 8003490:	4413      	add	r3, r2
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	4413      	add	r3, r2
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4608      	mov	r0, r1
 800349e:	4798      	blx	r3
 80034a0:	4603      	mov	r3, r0
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <_ZSt12__get_helperILj0EN8ICM426888icm42688EJtEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f863 	bl	800357e <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEE7_M_headERS2_>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <_ZSt12__get_helperILj1EtJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f865 	bl	800359a <_ZNSt11_Tuple_implILj1EJtEE7_M_headERS0_>
 80034d0:	4603      	mov	r3, r0
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
 80034f0:	b5b0      	push	{r4, r5, r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	7338      	strb	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f832 	bl	8003568 <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>
 8003504:	4603      	mov	r3, r0
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	6852      	ldr	r2, [r2, #4]
 800350a:	1052      	asrs	r2, r2, #1
 800350c:	189d      	adds	r5, r3, r2
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	6852      	ldr	r2, [r2, #4]
 8003512:	f002 0201 	and.w	r2, r2, #1
 8003516:	2a00      	cmp	r2, #0
 8003518:	d102      	bne.n	8003520 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x30>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	681c      	ldr	r4, [r3, #0]
 800351e:	e008      	b.n	8003532 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x42>
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	6852      	ldr	r2, [r2, #4]
 8003524:	1052      	asrs	r2, r2, #1
 8003526:	4413      	add	r3, r2
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	4413      	add	r3, r2
 8003530:	681c      	ldr	r4, [r3, #0]
 8003532:	6838      	ldr	r0, [r7, #0]
 8003534:	f7ff f920 	bl	8002778 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8003538:	4603      	mov	r3, r0
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	4619      	mov	r1, r3
 8003540:	4628      	mov	r0, r5
 8003542:	47a0      	blx	r4
 8003544:	4603      	mov	r3, r0
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bdb0      	pop	{r4, r5, r7, pc}

0800354e <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4618      	mov	r0, r3
 800355a:	f000 f82b 	bl	80035b4 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>
 800355e:	4603      	mov	r3, r0
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>:
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Up&&>(__t); }
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3304      	adds	r3, #4
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f812 	bl	80035b4 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>
 8003590:	4603      	mov	r3, r0
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <_ZNSt11_Tuple_implILj1EJtEE7_M_headERS0_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f810 	bl	80035ca <_ZNSt10_Head_baseILj1EtLb0EE7_M_headERS0_>
 80035aa:	4603      	mov	r3, r0
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <_ZNSt10_Head_baseILj1EtLb0EE7_M_headERS0_>:
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <_ZN8ICM426888GYRO_CNFlsEhNS0_3FSRE>:
        {
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	6039      	str	r1, [r7, #0]
 80035ea:	71fb      	strb	r3, [r7, #7]
            return  n << static_cast<uint8_t> (fsr);
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	4093      	lsls	r3, r2
        }   
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <_ZN8ICM426889ACCEL_CNFlsEhNS0_3FSRE>:
        {
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	6039      	str	r1, [r7, #0]
 800360a:	71fb      	strb	r3, [r7, #7]
            return  n << static_cast<uint8_t> (fsr);
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	4093      	lsls	r3, r2
        } 
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>:

namespace ICM42688{

    //float map_gyro_ODR_CNF_to_ODR(const config& cnf){

	float map_gyro_ODR_CNF_to_ODR(GYRO_CNF::ODR gyroODR){
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
        using namespace GYRO_CNF;

        if(gyroODR == ODR::ODR_500){
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b0f      	cmp	r3, #15
 800362c:	d102      	bne.n	8003634 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x14>
            return 500.0f;
 800362e:	eddf 7a29 	vldr	s15, [pc, #164]	; 80036d4 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xb4>
 8003632:	e049      	b.n	80036c8 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        if(gyroODR <= ODR::ODR_1000 && gyroODR >= ODR::ODR_32000){
 8003634:	2106      	movs	r1, #6
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f91e 	bl	8003878 <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x34>
 8003642:	2101      	movs	r1, #1
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f92b 	bl	80038a0 <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x34>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x36>
 8003654:	2300      	movs	r3, #0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d010      	beq.n	800367c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x5c>
            return 32000.0f / (1 << (gyroODR - ODR::ODR_32000));
 800365a:	2101      	movs	r1, #1
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f933 	bl	80038c8 <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>
 8003662:	4603      	mov	r3, r0
 8003664:	461a      	mov	r2, r3
 8003666:	2301      	movs	r3, #1
 8003668:	4093      	lsls	r3, r2
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003672:	eddf 6a19 	vldr	s13, [pc, #100]	; 80036d8 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xb8>
 8003676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800367a:	e025      	b.n	80036c8 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        if(gyroODR <= ODR::ODR_12_5 && gyroODR >= ODR::ODR_200){
 800367c:	210b      	movs	r1, #11
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8fa 	bl	8003878 <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d008      	beq.n	800369c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7c>
 800368a:	2107      	movs	r1, #7
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f907 	bl	80038a0 <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7c>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7e>
 800369c:	2300      	movs	r3, #0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d010      	beq.n	80036c4 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa4>
            return 200.0f /  (1 << (gyroODR - ODR::ODR_200));
 80036a2:	2107      	movs	r1, #7
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f90f 	bl	80038c8 <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>
 80036aa:	4603      	mov	r3, r0
 80036ac:	461a      	mov	r2, r3
 80036ae:	2301      	movs	r3, #1
 80036b0:	4093      	lsls	r3, r2
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036ba:	eddf 6a08 	vldr	s13, [pc, #32]	; 80036dc <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xbc>
 80036be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c2:	e001      	b.n	80036c8 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        return -1.0f;
 80036c4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
 80036c8:	eeb0 0a67 	vmov.f32	s0, s15
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	43fa0000 	.word	0x43fa0000
 80036d8:	46fa0000 	.word	0x46fa0000
 80036dc:	43480000 	.word	0x43480000

080036e0 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>:


    //float map_gyro_FSR_CNF_to_FSR(const config& cnf){
	float map_gyro_FSR_CNF_to_FSR(GYRO_CNF::FSR gyroFSR){
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
        using namespace GYRO_CNF;

        if(gyroFSR <= FSR::FSR_15_625){
 80036e8:	2107      	movs	r1, #7
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f8fd 	bl	80038ea <_ZN8ICM426888GYRO_CNFleENS0_3FSRES1_>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00c      	beq.n	8003710 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x30>
            return 2000.0f / (1 << gyroFSR);
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	2001      	movs	r0, #1
 80036fa:	f7ff ff71 	bl	80035e0 <_ZN8ICM426888GYRO_CNFlsEhNS0_3FSRE>
 80036fe:	ee07 0a90 	vmov	s15, r0
 8003702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003706:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003724 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x44>
 800370a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370e:	e001      	b.n	8003714 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x34>
        }

        return -1.0f;
 8003710:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    }
 8003714:	eef0 7a47 	vmov.f32	s15, s14
 8003718:	eeb0 0a67 	vmov.f32	s0, s15
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	44fa0000 	.word	0x44fa0000

08003728 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>:

    //float map_accel_ODR_CNF_to_ODR(const config& cnf){
	float map_accel_ODR_CNF_to_ODR(ACCEL_CNF::ODR accelODR){
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
        using namespace ACCEL_CNF;

        if(accelODR == ODR::ODR_500){
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b0f      	cmp	r3, #15
 8003734:	d102      	bne.n	800373c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x14>
            return 500.0f;
 8003736:	eddf 7a29 	vldr	s15, [pc, #164]	; 80037dc <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xb4>
 800373a:	e049      	b.n	80037d0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        if(accelODR <= ODR::ODR_1000 && accelODR >= ODR::ODR_32000){
 800373c:	2106      	movs	r1, #6
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f8e7 	bl	8003912 <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x34>
 800374a:	2101      	movs	r1, #1
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f8f4 	bl	800393a <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x34>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x36>
 800375c:	2300      	movs	r3, #0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d010      	beq.n	8003784 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x5c>
            return 32000.0f / (1 << (accelODR - ODR::ODR_32000)) ;
 8003762:	2101      	movs	r1, #1
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f8fc 	bl	8003962 <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>
 800376a:	4603      	mov	r3, r0
 800376c:	461a      	mov	r2, r3
 800376e:	2301      	movs	r3, #1
 8003770:	4093      	lsls	r3, r2
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800377a:	eddf 6a19 	vldr	s13, [pc, #100]	; 80037e0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xb8>
 800377e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003782:	e025      	b.n	80037d0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        if(accelODR <= ODR::ODR_1_562 && accelODR >= ODR::ODR_200){
 8003784:	210e      	movs	r1, #14
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8c3 	bl	8003912 <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7c>
 8003792:	2107      	movs	r1, #7
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f8d0 	bl	800393a <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7c>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7e>
 80037a4:	2300      	movs	r3, #0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d010      	beq.n	80037cc <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa4>
            return 200.0f /  ( 1 << (accelODR - ODR::ODR_200));
 80037aa:	2107      	movs	r1, #7
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f8d8 	bl	8003962 <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>
 80037b2:	4603      	mov	r3, r0
 80037b4:	461a      	mov	r2, r3
 80037b6:	2301      	movs	r3, #1
 80037b8:	4093      	lsls	r3, r2
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037c2:	eddf 6a08 	vldr	s13, [pc, #32]	; 80037e4 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xbc>
 80037c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ca:	e001      	b.n	80037d0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        return -1.0f;
 80037cc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
 80037d0:	eeb0 0a67 	vmov.f32	s0, s15
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	43fa0000 	.word	0x43fa0000
 80037e0:	46fa0000 	.word	0x46fa0000
 80037e4:	43480000 	.word	0x43480000

080037e8 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>:

    //float map_accel_FSR_CNF_to_FSR(const config& cnf){
	float map_accel_FSR_CNF_to_FSR(ACCEL_CNF::FSR accelFSR){
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
        using namespace ACCEL_CNF;
  
        if(accelFSR <= FSR::FSR_2){
 80037f0:	2103      	movs	r1, #3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f8c6 	bl	8003984 <_ZN8ICM426889ACCEL_CNFleENS0_3FSRES1_>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00c      	beq.n	8003818 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE+0x30>
            return 16.0f / (1 << accelFSR);
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	2001      	movs	r0, #1
 8003802:	f7ff fefd 	bl	8003600 <_ZN8ICM426889ACCEL_CNFlsEhNS0_3FSRE>
 8003806:	ee07 0a90 	vmov	s15, r0
 800380a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8003812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003816:	e001      	b.n	800381c <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE+0x34>
        }

        return -1.0f;
 8003818:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    }
 800381c:	eef0 7a47 	vmov.f32	s15, s14
 8003820:	eeb0 0a67 	vmov.f32	s0, s15
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <_ZN8ICM4268815convertTempDataEhh>:

    
    float convertTempData(uint8_t rawTempH, uint8_t rawTempL)
    {
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	460a      	mov	r2, r1
 8003836:	71fb      	strb	r3, [r7, #7]
 8003838:	4613      	mov	r3, r2
 800383a:	71bb      	strb	r3, [r7, #6]
        int16_t temp_data = (rawTempH << 8) |  rawTempL;
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	b21a      	sxth	r2, r3
 8003842:	79bb      	ldrb	r3, [r7, #6]
 8003844:	b21b      	sxth	r3, r3
 8003846:	4313      	orrs	r3, r2
 8003848:	81fb      	strh	r3, [r7, #14]
        return (temp_data / 132.48f + 25);
 800384a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003856:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003874 <_ZN8ICM4268815convertTempDataEhh+0x48>
 800385a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800385e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003862:	ee77 7a87 	vadd.f32	s15, s15, s14
    }
 8003866:	eeb0 0a67 	vmov.f32	s0, s15
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	43047ae1 	.word	0x43047ae1

08003878 <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>:
    /////////////////////////// GYRO_CNF /////////////////////////////////////

    namespace GYRO_CNF {

        bool operator<=(ODR odr1, ODR odr2) 
        {
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) <= static_cast<uint8_t> (odr2);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	429a      	cmp	r2, r3
 800388c:	bf94      	ite	ls
 800388e:	2301      	movls	r3, #1
 8003890:	2300      	movhi	r3, #0
 8003892:	b2db      	uxtb	r3, r3
        }
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>:
        bool operator>=(ODR odr1, ODR odr2) 
        {
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) >= static_cast<uint8_t> (odr2);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	429a      	cmp	r2, r3
 80038b4:	bf2c      	ite	cs
 80038b6:	2301      	movcs	r3, #1
 80038b8:	2300      	movcc	r3, #0
 80038ba:	b2db      	uxtb	r3, r3
        }
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>:
        uint8_t operator-(ODR odr1, ODR odr2)
        {
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) - static_cast<uint8_t> (odr2);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	b2db      	uxtb	r3, r3
        }
 80038de:	4618      	mov	r0, r3
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <_ZN8ICM426888GYRO_CNFleENS0_3FSRES1_>:


        bool operator<=(FSR fsr1, FSR fsr2)
        {
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (fsr1) <= static_cast<uint8_t> (fsr2);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	429a      	cmp	r2, r3
 80038fe:	bf94      	ite	ls
 8003900:	2301      	movls	r3, #1
 8003902:	2300      	movhi	r3, #0
 8003904:	b2db      	uxtb	r3, r3
        }
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>:

    /////////////////////////// ACCEL_CNF /////////////////////////////////////
    namespace ACCEL_CNF {

        bool operator<=(ODR odr1, ODR odr2) 
        {
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) <= static_cast<uint8_t> (odr2);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	b2da      	uxtb	r2, r3
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	429a      	cmp	r2, r3
 8003926:	bf94      	ite	ls
 8003928:	2301      	movls	r3, #1
 800392a:	2300      	movhi	r3, #0
 800392c:	b2db      	uxtb	r3, r3
        }
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>:
        bool operator>=(ODR odr1, ODR odr2) 
        {
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) >= static_cast<uint8_t> (odr2);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	b2da      	uxtb	r2, r3
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	429a      	cmp	r2, r3
 800394e:	bf2c      	ite	cs
 8003950:	2301      	movcs	r3, #1
 8003952:	2300      	movcc	r3, #0
 8003954:	b2db      	uxtb	r3, r3
        }
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>:
        uint8_t operator-(ODR odr1, ODR odr2)
        {
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) - static_cast<uint8_t> (odr2);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	b2db      	uxtb	r3, r3
        }
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <_ZN8ICM426889ACCEL_CNFleENS0_3FSRES1_>:

        bool operator<=(FSR fsr1, FSR fsr2)
        {
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (fsr1) <= static_cast<uint8_t> (fsr2);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	b2da      	uxtb	r2, r3
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	429a      	cmp	r2, r3
 8003998:	bf94      	ite	ls
 800399a:	2301      	movls	r3, #1
 800399c:	2300      	movhi	r3, #0
 800399e:	b2db      	uxtb	r3, r3
        }  
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039b0:	f001 f863 	bl	8004a7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039b4:	f000 f810 	bl	80039d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039b8:	f7fc ff9a 	bl	80008f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80039bc:	f000 ff9c 	bl	80048f8 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 80039c0:	f000 fb50 	bl	8004064 <MX_SPI2_Init>
  MX_TIM5_Init();
 80039c4:	f000 fe22 	bl	800460c <MX_TIM5_Init>
  MX_CAN1_Init();
 80039c8:	f7fc ff16 	bl	80007f8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  system_init();
 80039cc:	f000 fcac 	bl	8004328 <_Z11system_initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  system_run_active_mode();
 80039d0:	f000 fcce 	bl	8004370 <_Z22system_run_active_modev>
 80039d4:	e7fc      	b.n	80039d0 <main+0x24>
	...

080039d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b094      	sub	sp, #80	; 0x50
 80039dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039de:	f107 0320 	add.w	r3, r7, #32
 80039e2:	2230      	movs	r2, #48	; 0x30
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f005 fd98 	bl	800951c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039ec:	f107 030c 	add.w	r3, r7, #12
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80039fc:	f002 f800 	bl	8005a00 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a00:	4b2d      	ldr	r3, [pc, #180]	; (8003ab8 <_Z18SystemClock_Configv+0xe0>)
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	4a2c      	ldr	r2, [pc, #176]	; (8003ab8 <_Z18SystemClock_Configv+0xe0>)
 8003a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0c:	4b2a      	ldr	r3, [pc, #168]	; (8003ab8 <_Z18SystemClock_Configv+0xe0>)
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003a18:	4b28      	ldr	r3, [pc, #160]	; (8003abc <_Z18SystemClock_Configv+0xe4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003a20:	4a26      	ldr	r2, [pc, #152]	; (8003abc <_Z18SystemClock_Configv+0xe4>)
 8003a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	4b24      	ldr	r3, [pc, #144]	; (8003abc <_Z18SystemClock_Configv+0xe4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003a34:	2309      	movs	r3, #9
 8003a36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003a38:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a42:	2302      	movs	r3, #2
 8003a44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003a50:	2348      	movs	r3, #72	; 0x48
 8003a52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a54:	2302      	movs	r3, #2
 8003a56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a5c:	f107 0320 	add.w	r3, r7, #32
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 ffdd 	bl	8005a20 <HAL_RCC_OscConfig>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bf14      	ite	ne
 8003a6c:	2301      	movne	r3, #1
 8003a6e:	2300      	moveq	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8003a76:	f000 f823 	bl	8003ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a7a:	230f      	movs	r3, #15
 8003a7c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a90:	f107 030c 	add.w	r3, r7, #12
 8003a94:	2102      	movs	r1, #2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f002 fa66 	bl	8005f68 <HAL_RCC_ClockConfig>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bf14      	ite	ne
 8003aa2:	2301      	movne	r3, #1
 8003aa4:	2300      	moveq	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8003aac:	f000 f808 	bl	8003ac0 <Error_Handler>
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	3750      	adds	r7, #80	; 0x50
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40007000 	.word	0x40007000

08003ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ac4:	b672      	cpsid	i
}
 8003ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ac8:	e7fe      	b.n	8003ac8 <Error_Handler+0x8>
	...

08003acc <_Z20fail_silent_mode_runv>:

#define LED_FAIL_SILENT_GPIO_Port LD3_GPIO_Port
#define LED_FAIL_SILENT_GPIO_Pin  LD3_Pin

void fail_silent_mode_run(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
	gpio ledFailSilent(LED_FAIL_SILENT_GPIO_Port, LED_FAIL_SILENT_GPIO_Pin);
 8003ad2:	463b      	mov	r3, r7
 8003ad4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ad8:	4904      	ldr	r1, [pc, #16]	; (8003aec <_Z20fail_silent_mode_runv+0x20>)
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fd f836 	bl	8000b4c <_ZN5STM324gpioC1EP12GPIO_TypeDeft>


	ledFailSilent.write(GPIO_ST::HIGH);
 8003ae0:	463b      	mov	r3, r7
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fd f857 	bl	8000b98 <_ZN5STM324gpio5writeE7GPIO_ST>

	while(1)
 8003aea:	e7fe      	b.n	8003aea <_Z20fail_silent_mode_runv+0x1e>
 8003aec:	40020400 	.word	0x40020400

08003af0 <_ZN9iPHandler12add_read_bitEhbb>:
    static uint8_t add_read_bit(uint8_t reg, bool normalMode = true, bool rwBitInFront = true)
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
 8003afa:	460b      	mov	r3, r1
 8003afc:	71bb      	strb	r3, [r7, #6]
 8003afe:	4613      	mov	r3, r2
 8003b00:	717b      	strb	r3, [r7, #5]
    	if(rwBitInFront){
 8003b02:	797b      	ldrb	r3, [r7, #5]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d009      	beq.n	8003b1c <_ZN9iPHandler12add_read_bitEhbb+0x2c>
    		return normalMode ? (reg | (1 << 7)) : reg;
 8003b08:	79bb      	ldrb	r3, [r7, #6]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d004      	beq.n	8003b18 <_ZN9iPHandler12add_read_bitEhbb+0x28>
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	e00f      	b.n	8003b38 <_ZN9iPHandler12add_read_bitEhbb+0x48>
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	e00d      	b.n	8003b38 <_ZN9iPHandler12add_read_bitEhbb+0x48>
    		return normalMode ? (reg << 1) | 0x01 : reg << 1;
 8003b1c:	79bb      	ldrb	r3, [r7, #6]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <_ZN9iPHandler12add_read_bitEhbb+0x42>
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	b25b      	sxtb	r3, r3
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	b25b      	sxtb	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	e002      	b.n	8003b38 <_ZN9iPHandler12add_read_bitEhbb+0x48>
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	b2db      	uxtb	r3, r3
    }
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <_ZN9iPHandler13add_write_bitEhbb>:
    static uint8_t add_write_bit(uint8_t reg, bool normalMode = true, bool rwBitInFront = true)
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	71bb      	strb	r3, [r7, #6]
 8003b52:	4613      	mov	r3, r2
 8003b54:	717b      	strb	r3, [r7, #5]
    	if(rwBitInFront){
 8003b56:	797b      	ldrb	r3, [r7, #5]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d009      	beq.n	8003b70 <_ZN9iPHandler13add_write_bitEhbb+0x2c>
    		return normalMode ? reg : (reg | (1 << 7));
 8003b5c:	79bb      	ldrb	r3, [r7, #6]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <_ZN9iPHandler13add_write_bitEhbb+0x22>
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	e012      	b.n	8003b8c <_ZN9iPHandler13add_write_bitEhbb+0x48>
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	e00d      	b.n	8003b8c <_ZN9iPHandler13add_write_bitEhbb+0x48>
    		return normalMode ? reg << 1 : (reg  << 0x01 | 1);
 8003b70:	79bb      	ldrb	r3, [r7, #6]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <_ZN9iPHandler13add_write_bitEhbb+0x3a>
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	e006      	b.n	8003b8c <_ZN9iPHandler13add_write_bitEhbb+0x48>
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	b25b      	sxtb	r3, r3
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	b25b      	sxtb	r3, r3
 8003b8a:	b2db      	uxtb	r3, r3
    }
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <_Z15normal_mode_runv>:
#define LED_HEARTBEAT_GPIO_Pin  LD1_Pin

static bool run = false;

void normal_mode_run(void)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	f5ad 7d75 	sub.w	sp, sp, #980	; 0x3d4
 8003b9e:	af04      	add	r7, sp, #16
	taskWatchdog_t taskWatchdog;
	taskIMUgetData_t taskIMUgetData;
	taskCNIsendData_t taskCNIsendIMUdata;

	// Inicialización de la IMU =====================================
	gpio imuCS(ICM42688_CS_GPIO_Port, ICM42688_CS_Pin);
 8003ba0:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8003ba4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ba8:	4972      	ldr	r1, [pc, #456]	; (8003d74 <_Z15normal_mode_runv+0x1dc>)
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fc ffce 	bl	8000b4c <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

	phandler_spi<> spi2(&hspi2, &imuCS, COMM_MODE::BLCK);
 8003bb0:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8003bb4:	f507 7032 	add.w	r0, r7, #712	; 0x2c8
 8003bb8:	2300      	movs	r3, #0
 8003bba:	496f      	ldr	r1, [pc, #444]	; (8003d78 <_Z15normal_mode_runv+0x1e0>)
 8003bbc:	f000 f90e 	bl	8003ddc <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE>

	ICM42688::config_FIFO icmFifoCnf =
 8003bc0:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003bc4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003bc8:	2201      	movs	r2, #1
 8003bca:	801a      	strh	r2, [r3, #0]
 8003bcc:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003bd0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	605a      	str	r2, [r3, #4]
	{
		  .watermark = 1,
		  .mode = ICM42688::FIFO_MODE::BYPASS,
	};

	ICM42688::config_INT icmIntCnf =
 8003bd8:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003bdc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003be0:	4a66      	ldr	r2, [pc, #408]	; (8003d7c <_Z15normal_mode_runv+0x1e4>)
 8003be2:	461c      	mov	r4, r3
 8003be4:	4613      	mov	r3, r2
 8003be6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003be8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			//.int1Mode = ICM42688::INT_MODE::PULSED_PP_HIGH,
			.int2Source = ICM42688::INT_SOURCE::DISABLED,
			.int2Mode = ICM42688::INT_MODE::DISABLED,
	};

	ICM42688::Config icmCnf =
 8003bec:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003bf0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	2328      	movs	r3, #40	; 0x28
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	f005 fc8e 	bl	800951c <memset>
 8003c00:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003c04:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c08:	2203      	movs	r2, #3
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003c10:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c14:	2206      	movs	r2, #6
 8003c16:	605a      	str	r2, [r3, #4]
 8003c18:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003c1c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c20:	2202      	movs	r2, #2
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003c28:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c2c:	2206      	movs	r2, #6
 8003c2e:	60da      	str	r2, [r3, #12]
		.gyroODR 					= ICM42688::GYRO_CNF::ODR::ODR_1000,
		.accelFSR 					= ICM42688::ACCEL_CNF::FSR::FSR_4,
		.accelODR 					= ICM42688::ACCEL_CNF::ODR::ODR_1000,
		.fifoCnf					= icmFifoCnf,
		.intCnf						= icmIntCnf,
	};
 8003c30:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003c34:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c38:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8003c3c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003c40:	3310      	adds	r3, #16
 8003c42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c46:	e883 0003 	stmia.w	r3, {r0, r1}
 8003c4a:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003c4e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c52:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8003c56:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003c5a:	f103 0418 	add.w	r4, r3, #24
 8003c5e:	4613      	mov	r3, r2
 8003c60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	ICM42688::icm42688 imu(icmCnf, &spi2, &imuCS);
 8003c66:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8003c6a:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8003c6e:	f507 7122 	add.w	r1, r7, #648	; 0x288
 8003c72:	f107 001c 	add.w	r0, r7, #28
 8003c76:	f7fd f987 	bl	8000f88 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioE>

	// Inicialización del LED heartbeat==============================
	gpio ledHeartbeat(LED_HEARTBEAT_GPIO_Port, LED_HEARTBEAT_GPIO_Pin);
 8003c7a:	1d3b      	adds	r3, r7, #4
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	4940      	ldr	r1, [pc, #256]	; (8003d80 <_Z15normal_mode_runv+0x1e8>)
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fc ff63 	bl	8000b4c <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

	// Inicialización de la CNI ==============================
	CNI_constructor(&hcan1);
 8003c86:	483f      	ldr	r0, [pc, #252]	; (8003d84 <_Z15normal_mode_runv+0x1ec>)
 8003c88:	f7fc fc3c 	bl	8000504 <_Z15CNI_constructorP19__CAN_HandleTypeDef>

	// Creación de las tareas========================================
	taskWatchdog_constructor(&taskWatchdog,
 8003c8c:	f507 7064 	add.w	r0, r7, #912	; 0x390
 8003c90:	4b3d      	ldr	r3, [pc, #244]	; (8003d88 <_Z15normal_mode_runv+0x1f0>)
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	2300      	movs	r3, #0
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	2364      	movs	r3, #100	; 0x64
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	f000 fc6d 	bl	800457c <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>
			PERIOD_TASK_WATCHDOG_TICKS_NORMAL,
			WCET_TASK_WATCHDOG_US,
			BCET_TASK_WATCHDOG_US,
			&hiwdg);

	taskHeartbeat_constructor(&taskHeartbeat,
 8003ca2:	f507 706a 	add.w	r0, r7, #936	; 0x3a8
 8003ca6:	1d3b      	adds	r3, r7, #4
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	2300      	movs	r3, #0
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	2364      	movs	r3, #100	; 0x64
 8003cb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	f000 fbaf 	bl	8004418 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>
		  PERIOD_TASK_HEARTBEAT_TICKS_NORMAL,
		  WCET_TASK_HEARTBEAT_US,
		  BCET_TASK_HEARTBEAT_US,
		  &ledHeartbeat);

	taskIMUgetData_constructor(&taskIMUgetData,
 8003cba:	f507 7056 	add.w	r0, r7, #856	; 0x358
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	9302      	str	r3, [sp, #8]
 8003cc2:	f107 031c 	add.w	r3, r7, #28
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	2364      	movs	r3, #100	; 0x64
 8003cce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	f000 fbd6 	bl	8004484 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688Em>
		  PERIOD_TASK_IMU_TICKS_NORMAL,
		  WCET_TASK_IMU_US,
		  BCET_TASK_IMU_US,
		  &imu, HANDLE_MSG_CNI_SEND_IMU_DATA);

	taskCNIsendData_constructor(&taskCNIsendIMUdata,
 8003cd8:	f507 7050 	add.w	r0, r7, #832	; 0x340
 8003cdc:	2301      	movs	r3, #1
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2364      	movs	r3, #100	; 0x64
 8003ce6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cea:	2102      	movs	r1, #2
 8003cec:	f000 fb62 	bl	80043b4 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>
		  WCET_TASK_CNI_SEND_IMU_US,
		  BCET_TASK_CNI_SEND_IMU_US,
		  HANDLE_MSG_CNI_SEND_IMU_DATA);

	// Inicialización del scheduler =================================
	timeTriggeredScheduler_constructor(&htim5);
 8003cf0:	4826      	ldr	r0, [pc, #152]	; (8003d8c <_Z15normal_mode_runv+0x1f4>)
 8003cf2:	f000 fd11 	bl	8004718 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDef>
	timeTriggeredScheduler_init();
 8003cf6:	f000 fd31 	bl	800475c <_Z27timeTriggeredScheduler_initv>

	CNI_init();
 8003cfa:	f7fc fc1f 	bl	800053c <_Z8CNI_initv>

	taskHeartbeat_start(&taskHeartbeat);
 8003cfe:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fba2 	bl	800444c <_Z19taskHeartbeat_startP15taskHeartbeat_t>
	taskIMUgetData_start(&taskIMUgetData);
 8003d08:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fbd7 	bl	80044c0 <_Z20taskIMUgetData_startP16taskIMUgetData_t>
	taskCNIsendData_start(&taskCNIsendIMUdata);
 8003d12:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fb66 	bl	80043e8 <_Z21taskCNIsendData_startP17taskCNIsendData_t>

	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskHeartbeat);
 8003d1c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fda3 	bl	800486c <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskWatchdog);
 8003d26:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fd9e 	bl	800486c <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskIMUgetData);
 8003d30:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fd99 	bl	800486c <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIsendIMUdata);
 8003d3a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fd94 	bl	800486c <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>

	CNI_start();
 8003d44:	f7fc fc20 	bl	8000588 <_Z9CNI_startv>

	// Se queda acá esperando hasta que se cumpla la condición para comenzar
	while(!run)
 8003d48:	e000      	b.n	8003d4c <_Z15normal_mode_runv+0x1b4>
	{
		__asm__("wfi");
 8003d4a:	bf30      	wfi
	while(!run)
 8003d4c:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <_Z15normal_mode_runv+0x1f8>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	f083 0301 	eor.w	r3, r3, #1
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f7      	bne.n	8003d4a <_Z15normal_mode_runv+0x1b2>
	}

#if IS_MASTER
	CNI_send_msg(HANDLE_MSG_CNI_SYNC);
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	f7fc fc20 	bl	80005a0 <_Z12CNI_send_msgm>
#endif
	taskWatchdog_start(&taskWatchdog);
 8003d60:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fc37 	bl	80045d8 <_Z18taskWatchdog_startP14taskWatchdog_t>

	timeTriggeredScheduler_start();
 8003d6a:	f000 fd0b 	bl	8004784 <_Z28timeTriggeredScheduler_startv>

	while(1)
	{
		timeTriggeredScheduler_dispatch();
 8003d6e:	f000 fd15 	bl	800479c <_Z31timeTriggeredScheduler_dispatchv>
 8003d72:	e7fc      	b.n	8003d6e <_Z15normal_mode_runv+0x1d6>
 8003d74:	40021000 	.word	0x40021000
 8003d78:	20000190 	.word	0x20000190
 8003d7c:	08009700 	.word	0x08009700
 8003d80:	40020400 	.word	0x40020400
 8003d84:	20000154 	.word	0x20000154
 8003d88:	2000017c 	.word	0x2000017c
 8003d8c:	200001fc 	.word	0x200001fc
 8003d90:	2000018c 	.word	0x2000018c

08003d94 <HAL_GPIO_EXTI_Callback>:
	}
}

#if IS_MASTER
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USER_Btn_Pin)
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da4:	d102      	bne.n	8003dac <HAL_GPIO_EXTI_Callback+0x18>
    {
    	run = true;
 8003da6:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <HAL_GPIO_EXTI_Callback+0x24>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	701a      	strb	r2, [r3, #0]
    }
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	2000018c 	.word	0x2000018c

08003dbc <_ZN9iPHandlerC1Ev>:
class iPHandler {
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	4a04      	ldr	r2, [pc, #16]	; (8003dd8 <_ZN9iPHandlerC1Ev+0x1c>)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	080097cc 	.word	0x080097cc

08003ddc <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE>:

template <uint8_t BufferSize = 32>
class PHandlerSPI : public iPHandler {
public:

	PHandlerSPI(SPI_HandleTypeDef* spiHandler, gpio *cs, COMM_MODE mode)
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
		: m_handler(spiHandler)
		, m_cs(cs)
		, m_mode(mode)
		, m_size(0)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ffe5 	bl	8003dbc <_ZN9iPHandlerC1Ev>
 8003df2:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE+0x64>)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	601a      	str	r2, [r3, #0]
		: m_handler(spiHandler)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	60da      	str	r2, [r3, #12]
		, m_cs(cs)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	611a      	str	r2, [r3, #16]
		, m_mode(mode)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	615a      	str	r2, [r3, #20]
		, m_size(0)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		{

			m_mutex = false;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	721a      	strb	r2, [r3, #8]
			m_cs->write(GPIO_ST::HIGH);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fc feba 	bl	8000b98 <_ZN5STM324gpio5writeE7GPIO_ST>
			m_recvBuffer = &m_rxBuffer[1];
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f103 0219 	add.w	r2, r3, #25
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	605a      	str	r2, [r3, #4]
			//m_blockDelay = delay == 0 ? HAL_MAX_DELAY : delay;
			m_blockDelay = 5000;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e34:	65da      	str	r2, [r3, #92]	; 0x5c
		}
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	080097bc 	.word	0x080097bc

08003e44 <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt>:
		: PHandlerSPI(spiHandler, cs, COMM_MODE::BLCK)
		{}


	//iHANDLER_ST read_registers(uint8_t add, uint8_t size, void *cs, COMM_MODE mode)
	iPHANDLER_ST read_registers(const PHandlerOpt &opt) override
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
	{
		//SPI_ST ret = SPI_ST::OK;

		if(opt.size > BufferSize-1){
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	785b      	ldrb	r3, [r3, #1]
 8003e52:	2b1f      	cmp	r3, #31
 8003e54:	d901      	bls.n	8003e5a <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt+0x16>
				return iPHANDLER_ST::ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e029      	b.n	8003eae <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt+0x6a>
		//if(m_mutex == true){
		//	return iHANDLER_ST::UNAVAILABLE;
		//}
		//m_mutex = true;

		m_txBuffer[0] = add_read_bit(opt.add, opt.rw, opt.rwFront);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	7818      	ldrb	r0, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	7b19      	ldrb	r1, [r3, #12]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	7b5b      	ldrb	r3, [r3, #13]
 8003e66:	461a      	mov	r2, r3
 8003e68:	f7ff fe42 	bl	8003af0 <_ZN9iPHandler12add_read_bitEhbb>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461a      	mov	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		m_mode = opt.mode;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	615a      	str	r2, [r3, #20]
		m_size = opt.size + 1;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	785b      	ldrb	r3, [r3, #1]
 8003e82:	3301      	adds	r3, #1
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		m_cs = static_cast<gpio*>(opt.slave);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	611a      	str	r2, [r3, #16]
		m_recvBuffer = &m_rxBuffer[opt.addSize]; // recvBuffer apunta a donde comienza la recepción de SPI según el largo del address (en bytes)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	7b9b      	ldrb	r3, [r3, #14]
 8003e98:	3318      	adds	r3, #24
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	441a      	add	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	605a      	str	r2, [r3, #4]

		return start_transmition();
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f842 	bl	8003f2e <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	bf00      	nop
	}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt>:

	//iHANDLER_ST write_registers(uint8_t add, uint8_t *data, uint8_t size, void *cs, COMM_MODE mode)
	iPHANDLER_ST write_registers(uint8_t *data, const PHandlerOpt &opt) override
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
	{
		//SPI_ST ret = SPI_ST::OK;

		if(opt.size > BufferSize-1){
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	785b      	ldrb	r3, [r3, #1]
 8003ec6:	2b1f      	cmp	r3, #31
 8003ec8:	d901      	bls.n	8003ece <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt+0x18>
				return iPHANDLER_ST::ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e02b      	b.n	8003f26 <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt+0x70>
		//if(m_mutex == true){
		//	return iHANDLER_ST::UNAVAILABLE;
		//}
		//m_mutex = true;

		m_txBuffer[0] = add_write_bit(opt.add, opt.rw, opt.rwFront);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	7818      	ldrb	r0, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	7b19      	ldrb	r1, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	7b5b      	ldrb	r3, [r3, #13]
 8003eda:	461a      	mov	r2, r3
 8003edc:	f7ff fe32 	bl	8003b44 <_ZN9iPHandler13add_write_bitEhbb>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		memcpy(m_txBuffer + 1, data, opt.size);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3338      	adds	r3, #56	; 0x38
 8003eee:	1c58      	adds	r0, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	785b      	ldrb	r3, [r3, #1]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	f005 fb98 	bl	800962c <memcpy>
		m_mode = opt.mode;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	615a      	str	r2, [r3, #20]
		m_size = opt.size + 1;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	785b      	ldrb	r3, [r3, #1]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		m_cs = static_cast<gpio*>(opt.slave);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	611a      	str	r2, [r3, #16]

		return start_transmition();
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f806 	bl	8003f2e <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>
 8003f22:	4603      	mov	r3, r0
 8003f24:	bf00      	nop
	}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>:




	iPHANDLER_ST start_transmition(void *fn_pointer = nullptr ) // arreglar cuando se use la DMA
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
	{
		iPHANDLER_ST ret = iPHANDLER_ST::OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]
		//m_spiHandler.m_csPin = m_cs;

		m_cs->write(GPIO_ST::LOW);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2100      	movs	r1, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fc fe28 	bl	8000b98 <_ZN5STM324gpio5writeE7GPIO_ST>
		switch (m_mode)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d021      	beq.n	8003f94 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x66>
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	dc21      	bgt.n	8003f98 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x6a>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x30>
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d019      	beq.n	8003f90 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x62>
 8003f5c:	e01c      	b.n	8003f98 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x6a>
		{
		case COMM_MODE::BLCK:

			ret = transmit(m_txBuffer, m_rxBuffer, m_size);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f103 0218 	add.w	r2, r3, #24
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f81e 	bl	8003fb4 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t>
 8003f78:	60f8      	str	r0, [r7, #12]
			m_cs->write(GPIO_ST::HIGH);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2101      	movs	r1, #1
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fc fe09 	bl	8000b98 <_ZN5STM324gpio5writeE7GPIO_ST>
			if(ret != iPHANDLER_ST::OK){
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00d      	beq.n	8003fa8 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7a>
				return iPHANDLER_ST::ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e00d      	b.n	8003fac <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			}
			break;

		case COMM_MODE::IT:
			 return iPHANDLER_ST::INVALID;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e00b      	b.n	8003fac <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;

		case COMM_MODE::DMA:
			return iPHANDLER_ST::INVALID;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e009      	b.n	8003fac <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;


		default:
			m_cs->write(GPIO_ST::HIGH);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fc fdfa 	bl	8000b98 <_ZN5STM324gpio5writeE7GPIO_ST>
			return iPHANDLER_ST::INVALID;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e001      	b.n	8003fac <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;
 8003fa8:	bf00      	nop
			break;
		}

		return iPHANDLER_ST::OK;
 8003faa:	2300      	movs	r3, #0
	}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t>:


	   return map_hal_st_to_handler_st(retHal);
   }

   iPHANDLER_ST transmit(uint8_t *pTxData, uint8_t *pRxData, uint16_t size)
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	807b      	strh	r3, [r7, #2]
   {

	   HAL_StatusTypeDef retHal = HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	75fb      	strb	r3, [r7, #23]
	   if(m_cs == nullptr)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t+0x1e>
		   return iPHANDLER_ST::ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e013      	b.n	8003ffa <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t+0x46>

	   //m_csPin->write(GPIO_ST::LOW);

	   retHal = HAL_SPI_TransmitReceive(
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	68d8      	ldr	r0, [r3, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fda:	887a      	ldrh	r2, [r7, #2]
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	f002 fe81 	bl	8006cea <HAL_SPI_TransmitReceive>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	75fb      	strb	r3, [r7, #23]
				   size,
				m_blockDelay
			   );
	   //m_csPin->write(GPIO_ST::HIGH);

	   return map_hal_st_to_handler_st(retHal);
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	4619      	mov	r1, r3
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f806 	bl	8004002 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	bf00      	nop

   }
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef>:
   {
	   return iPHANDLER_ST::INVALID;
   }


   iPHANDLER_ST map_hal_st_to_handler_st(HAL_StatusTypeDef st)
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	460b      	mov	r3, r1
 800400c:	70fb      	strb	r3, [r7, #3]
   {
	   switch (st){
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef+0x16>
	   case HAL_OK:
		   return iPHANDLER_ST::OK;
 8004014:	2300      	movs	r3, #0
 8004016:	e000      	b.n	800401a <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef+0x18>
		   break;
	   case HAL_TIMEOUT:
	   case HAL_ERROR:
	   default:
		   return iPHANDLER_ST::ERROR;
 8004018:	2301      	movs	r3, #1
		   break;
	   }
   }
 800401a:	4618      	mov	r0, r3
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <_Z22my_copy_array_of_uint8PhPKhm>:
 */

#include "myUtils.h"

void my_copy_array_of_uint8(uint8_t *dest, const uint8_t *src, uint32_t n)
{
 8004026:	b480      	push	{r7}
 8004028:	b087      	sub	sp, #28
 800402a:	af00      	add	r7, sp, #0
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	607a      	str	r2, [r7, #4]
	uint32_t i;

	for(i = 0; i < n; i++)
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	e00a      	b.n	800404e <_Z22my_copy_array_of_uint8PhPKhm+0x28>
	{
		dest[i] = src[i];
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	441a      	add	r2, r3
 800403e:	68f9      	ldr	r1, [r7, #12]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	440b      	add	r3, r1
 8004044:	7812      	ldrb	r2, [r2, #0]
 8004046:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < n; i++)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	3301      	adds	r3, #1
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	429a      	cmp	r2, r3
 8004054:	d3f0      	bcc.n	8004038 <_Z22my_copy_array_of_uint8PhPKhm+0x12>
	}
}
 8004056:	bf00      	nop
 8004058:	bf00      	nop
 800405a:	371c      	adds	r7, #28
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004068:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <MX_SPI2_Init+0x74>)
 800406a:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <MX_SPI2_Init+0x78>)
 800406c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800406e:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <MX_SPI2_Init+0x74>)
 8004070:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004074:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004076:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <MX_SPI2_Init+0x74>)
 8004078:	2200      	movs	r2, #0
 800407a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800407c:	4b16      	ldr	r3, [pc, #88]	; (80040d8 <MX_SPI2_Init+0x74>)
 800407e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004082:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004084:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <MX_SPI2_Init+0x74>)
 8004086:	2200      	movs	r2, #0
 8004088:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800408a:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <MX_SPI2_Init+0x74>)
 800408c:	2201      	movs	r2, #1
 800408e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004090:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <MX_SPI2_Init+0x74>)
 8004092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004096:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <MX_SPI2_Init+0x74>)
 800409a:	2220      	movs	r2, #32
 800409c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800409e:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <MX_SPI2_Init+0x74>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <MX_SPI2_Init+0x74>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040aa:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <MX_SPI2_Init+0x74>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80040b0:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <MX_SPI2_Init+0x74>)
 80040b2:	2207      	movs	r2, #7
 80040b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80040b6:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <MX_SPI2_Init+0x74>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <MX_SPI2_Init+0x74>)
 80040be:	2200      	movs	r2, #0
 80040c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040c2:	4805      	ldr	r0, [pc, #20]	; (80040d8 <MX_SPI2_Init+0x74>)
 80040c4:	f002 fd66 	bl	8006b94 <HAL_SPI_Init>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80040ce:	f7ff fcf7 	bl	8003ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000190 	.word	0x20000190
 80040dc:	40003800 	.word	0x40003800

080040e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	; 0x28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e8:	f107 0314 	add.w	r3, r7, #20
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	60da      	str	r2, [r3, #12]
 80040f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a25      	ldr	r2, [pc, #148]	; (8004194 <HAL_SPI_MspInit+0xb4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d144      	bne.n	800418c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004102:	4b25      	ldr	r3, [pc, #148]	; (8004198 <HAL_SPI_MspInit+0xb8>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	4a24      	ldr	r2, [pc, #144]	; (8004198 <HAL_SPI_MspInit+0xb8>)
 8004108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800410c:	6413      	str	r3, [r2, #64]	; 0x40
 800410e:	4b22      	ldr	r3, [pc, #136]	; (8004198 <HAL_SPI_MspInit+0xb8>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800411a:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <HAL_SPI_MspInit+0xb8>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	4a1e      	ldr	r2, [pc, #120]	; (8004198 <HAL_SPI_MspInit+0xb8>)
 8004120:	f043 0304 	orr.w	r3, r3, #4
 8004124:	6313      	str	r3, [r2, #48]	; 0x30
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <HAL_SPI_MspInit+0xb8>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_SPI_MspInit+0xb8>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	4a18      	ldr	r2, [pc, #96]	; (8004198 <HAL_SPI_MspInit+0xb8>)
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	6313      	str	r3, [r2, #48]	; 0x30
 800413e:	4b16      	ldr	r3, [pc, #88]	; (8004198 <HAL_SPI_MspInit+0xb8>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	60bb      	str	r3, [r7, #8]
 8004148:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = IMU_MISO_Pin|IMU_MOSI_Pin;
 800414a:	230c      	movs	r3, #12
 800414c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414e:	2302      	movs	r3, #2
 8004150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004156:	2303      	movs	r3, #3
 8004158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800415a:	2305      	movs	r3, #5
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800415e:	f107 0314 	add.w	r3, r7, #20
 8004162:	4619      	mov	r1, r3
 8004164:	480d      	ldr	r0, [pc, #52]	; (800419c <HAL_SPI_MspInit+0xbc>)
 8004166:	f001 f9f3 	bl	8005550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SCK_Pin;
 800416a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800416e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004170:	2302      	movs	r3, #2
 8004172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	2300      	movs	r3, #0
 8004176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004178:	2303      	movs	r3, #3
 800417a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800417c:	2305      	movs	r3, #5
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMU_SCK_GPIO_Port, &GPIO_InitStruct);
 8004180:	f107 0314 	add.w	r3, r7, #20
 8004184:	4619      	mov	r1, r3
 8004186:	4806      	ldr	r0, [pc, #24]	; (80041a0 <HAL_SPI_MspInit+0xc0>)
 8004188:	f001 f9e2 	bl	8005550 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800418c:	bf00      	nop
 800418e:	3728      	adds	r7, #40	; 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40003800 	.word	0x40003800
 8004198:	40023800 	.word	0x40023800
 800419c:	40020800 	.word	0x40020800
 80041a0:	40020400 	.word	0x40020400

080041a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80041aa:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <HAL_MspInit+0x44>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	4a0e      	ldr	r2, [pc, #56]	; (80041e8 <HAL_MspInit+0x44>)
 80041b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b4:	6413      	str	r3, [r2, #64]	; 0x40
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <HAL_MspInit+0x44>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	607b      	str	r3, [r7, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <HAL_MspInit+0x44>)
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	4a08      	ldr	r2, [pc, #32]	; (80041e8 <HAL_MspInit+0x44>)
 80041c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041cc:	6453      	str	r3, [r2, #68]	; 0x44
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <HAL_MspInit+0x44>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40023800 	.word	0x40023800

080041ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041f0:	e7fe      	b.n	80041f0 <NMI_Handler+0x4>

080041f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041f2:	b480      	push	{r7}
 80041f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041f6:	e7fe      	b.n	80041f6 <HardFault_Handler+0x4>

080041f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041fc:	e7fe      	b.n	80041fc <MemManage_Handler+0x4>

080041fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041fe:	b480      	push	{r7}
 8004200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004202:	e7fe      	b.n	8004202 <BusFault_Handler+0x4>

08004204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004208:	e7fe      	b.n	8004208 <UsageFault_Handler+0x4>

0800420a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800420a:	b480      	push	{r7}
 800420c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800420e:	bf00      	nop
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004226:	b480      	push	{r7}
 8004228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800422a:	bf00      	nop
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004238:	f000 fc5c 	bl	8004af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800423c:	bf00      	nop
 800423e:	bd80      	pop	{r7, pc}

08004240 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004244:	4802      	ldr	r0, [pc, #8]	; (8004250 <USART3_IRQHandler+0x10>)
 8004246:	f004 f865 	bl	8008314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	200002e8 	.word	0x200002e8

08004254 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8004258:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800425c:	f001 fb58 	bl	8005910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004260:	bf00      	nop
 8004262:	bd80      	pop	{r7, pc}

08004264 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004268:	4802      	ldr	r0, [pc, #8]	; (8004274 <TIM5_IRQHandler+0x10>)
 800426a:	f003 f9e4 	bl	8007636 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800426e:	bf00      	nop
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	200001fc 	.word	0x200001fc

08004278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return 1;
 800427c:	2301      	movs	r3, #1
}
 800427e:	4618      	mov	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <_kill>:

int _kill(int pid, int sig)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004292:	f005 f99f 	bl	80095d4 <__errno>
 8004296:	4603      	mov	r3, r0
 8004298:	2216      	movs	r2, #22
 800429a:	601a      	str	r2, [r3, #0]
  return -1;
 800429c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <_exit>:

void _exit (int status)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80042b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff ffe7 	bl	8004288 <_kill>
  while (1) {}    /* Make sure we hang here */
 80042ba:	e7fe      	b.n	80042ba <_exit+0x12>

080042bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042c4:	4a14      	ldr	r2, [pc, #80]	; (8004318 <_sbrk+0x5c>)
 80042c6:	4b15      	ldr	r3, [pc, #84]	; (800431c <_sbrk+0x60>)
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042d0:	4b13      	ldr	r3, [pc, #76]	; (8004320 <_sbrk+0x64>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d102      	bne.n	80042de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042d8:	4b11      	ldr	r3, [pc, #68]	; (8004320 <_sbrk+0x64>)
 80042da:	4a12      	ldr	r2, [pc, #72]	; (8004324 <_sbrk+0x68>)
 80042dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042de:	4b10      	ldr	r3, [pc, #64]	; (8004320 <_sbrk+0x64>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4413      	add	r3, r2
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d207      	bcs.n	80042fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042ec:	f005 f972 	bl	80095d4 <__errno>
 80042f0:	4603      	mov	r3, r0
 80042f2:	220c      	movs	r2, #12
 80042f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042fa:	e009      	b.n	8004310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042fc:	4b08      	ldr	r3, [pc, #32]	; (8004320 <_sbrk+0x64>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004302:	4b07      	ldr	r3, [pc, #28]	; (8004320 <_sbrk+0x64>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4413      	add	r3, r2
 800430a:	4a05      	ldr	r2, [pc, #20]	; (8004320 <_sbrk+0x64>)
 800430c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800430e:	68fb      	ldr	r3, [r7, #12]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	20050000 	.word	0x20050000
 800431c:	00000400 	.word	0x00000400
 8004320:	200001f4 	.word	0x200001f4
 8004324:	200004f0 	.word	0x200004f0

08004328 <_Z11system_initv>:
};

static systemMode theSystemMode = FAIL_SILENT;

void system_init(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800432c:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <_Z11system_initv+0x40>)
 800432e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	bf14      	ite	ne
 8004338:	2301      	movne	r3, #1
 800433a:	2300      	moveq	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <_Z11system_initv+0x2e>
	{
		__HAL_RCC_CLEAR_RESET_FLAGS();
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <_Z11system_initv+0x40>)
 8004344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004346:	4a08      	ldr	r2, [pc, #32]	; (8004368 <_Z11system_initv+0x40>)
 8004348:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800434c:	6753      	str	r3, [r2, #116]	; 0x74

		theSystemMode = FAIL_SILENT;
 800434e:	4b07      	ldr	r3, [pc, #28]	; (800436c <_Z11system_initv+0x44>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
	}
	else
	{
		theSystemMode = NORMAL;
	}
}
 8004354:	e002      	b.n	800435c <_Z11system_initv+0x34>
		theSystemMode = NORMAL;
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <_Z11system_initv+0x44>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40023800 	.word	0x40023800
 800436c:	200001f8 	.word	0x200001f8

08004370 <_Z22system_run_active_modev>:

void system_run_active_mode(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
	switch(theSystemMode)
 8004374:	4b05      	ldr	r3, [pc, #20]	; (800438c <_Z22system_run_active_modev+0x1c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d102      	bne.n	8004382 <_Z22system_run_active_modev+0x12>
	{
		case NORMAL:
			normal_mode_run();
 800437c:	f7ff fc0c 	bl	8003b98 <_Z15normal_mode_runv>
			break;
 8004380:	e002      	b.n	8004388 <_Z22system_run_active_modev+0x18>

		default:
		case FAIL_SILENT:
			fail_silent_mode_run();
 8004382:	f7ff fba3 	bl	8003acc <_Z20fail_silent_mode_runv>
			break;
 8004386:	bf00      	nop
	}
}
 8004388:	bf00      	nop
 800438a:	bd80      	pop	{r7, pc}
 800438c:	200001f8 	.word	0x200001f8

08004390 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <SystemInit+0x20>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	4a05      	ldr	r2, [pc, #20]	; (80043b0 <SystemInit+0x20>)
 800439c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043a4:	bf00      	nop
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	e000ed00 	.word	0xe000ed00

080043b4 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>:

#include "taskCNIsendData.h"
#include "CNI.h"

void taskCNIsendData_constructor(taskCNIsendData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskCNIsendData_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	9301      	str	r3, [sp, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	4904      	ldr	r1, [pc, #16]	; (80043e4 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm+0x30>)
 80043d2:	f000 fa73 	bl	80048bc <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mHandleMsg_ = handleMsg;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	615a      	str	r2, [r3, #20]
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	080043fd 	.word	0x080043fd

080043e8 <_Z21taskCNIsendData_startP17taskCNIsendData_t>:
	//TODO: hay que hacer que si uno llama a la tarea nuevamente, la tarea simplemente no haga nada.
	timeTriggeredTask_destructor(&me->super);
}

void taskCNIsendData_start(taskCNIsendData_t *me)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	//TODO: acá podría uno decirle a la CNI que se va a encargar de enviar el mensaje
	// asociado al handleMsg.
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <_Z22taskCNIsendData_updateP17taskCNIsendData_t>:

void taskCNIsendData_update(taskCNIsendData_t *me)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	CNI_send_msg(me->mHandleMsg_);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	4618      	mov	r0, r3
 800440a:	f7fc f8c9 	bl	80005a0 <_Z12CNI_send_msgm>
}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>:
 */

#include "taskHeartbeat.h"

void taskHeartbeat_constructor(taskHeartbeat_t *me , uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, gpio *led)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskHeartbeat_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	4904      	ldr	r1, [pc, #16]	; (8004448 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE+0x30>)
 8004436:	f000 fa41 	bl	80048bc <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mLED_ = led;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	615a      	str	r2, [r3, #20]
}
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	08004469 	.word	0x08004469

0800444c <_Z19taskHeartbeat_startP15taskHeartbeat_t>:
	me->mLED_->write(GPIO_ST::LOW);
	timeTriggeredTask_destructor(&me->super);
}

void taskHeartbeat_start(taskHeartbeat_t *me)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
	me->mLED_->write(GPIO_ST::HIGH);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	2101      	movs	r1, #1
 800445a:	4618      	mov	r0, r3
 800445c:	f7fc fb9c 	bl	8000b98 <_ZN5STM324gpio5writeE7GPIO_ST>
}
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <_Z20taskHeartbeat_updateP15taskHeartbeat_t>:

void taskHeartbeat_update(taskHeartbeat_t *me)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
	me->mLED_->toggle();
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	4618      	mov	r0, r3
 8004476:	f7fc fb7f 	bl	8000b78 <_ZN5STM324gpio6toggleEv>
}
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688Em>:
#define LEN_IMU_CNI_DATA 24

static void make_imu_data_for_cni(IMUData imuData, uint8_t *dataForCni);

void taskIMUgetData_constructor(taskIMUgetData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, ICM42688::icm42688 *imu, uint32_t handleMsg)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskIMUgetData_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	9301      	str	r3, [sp, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	4906      	ldr	r1, [pc, #24]	; (80044bc <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688Em+0x38>)
 80044a2:	f000 fa0b 	bl	80048bc <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mIMU_ = imu;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	615a      	str	r2, [r3, #20]
	me->mHandleMsg_ = handleMsg;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a3a      	ldr	r2, [r7, #32]
 80044b0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	080044d5 	.word	0x080044d5

080044c0 <_Z20taskIMUgetData_startP16taskIMUgetData_t>:

	timeTriggeredTask_destructor(&me->super);
}

void taskIMUgetData_start(taskIMUgetData_t *me)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	// Por ahora no hace nada
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <_Z21taskIMUgetData_updateP16taskIMUgetData_t>:

void taskIMUgetData_update(taskIMUgetData_t *me)
{
 80044d4:	b590      	push	{r4, r7, lr}
 80044d6:	b08d      	sub	sp, #52	; 0x34
 80044d8:	af04      	add	r7, sp, #16
 80044da:	6078      	str	r0, [r7, #4]
	uint8_t dataForCni[LEN_IMU_CNI_DATA];

	me->mIMU_->save_data();
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695a      	ldr	r2, [r3, #20]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4610      	mov	r0, r2
 80044ea:	4798      	blx	r3
	me->mIMU_->read_data(&(me->mIMUdata_));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6958      	ldr	r0, [r3, #20]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3310      	adds	r3, #16
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	3218      	adds	r2, #24
 80044fe:	4611      	mov	r1, r2
 8004500:	4798      	blx	r3

	// Convertir los datos de la IMU en bytes
	make_imu_data_for_cni(me->mIMUdata_, dataForCni);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f107 0208 	add.w	r2, r7, #8
 8004508:	9203      	str	r2, [sp, #12]
 800450a:	466c      	mov	r4, sp
 800450c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004510:	ca07      	ldmia	r2, {r0, r1, r2}
 8004512:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004516:	3318      	adds	r3, #24
 8004518:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800451a:	f000 f80c 	bl	8004536 <_ZL21make_imu_data_for_cni7IMUDataPh>

	// Actualizarlos en la CNI
	CNI_update_msg_content(me->mHandleMsg_, dataForCni, LEN_IMU_CNI_DATA);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004522:	f107 0108 	add.w	r1, r7, #8
 8004526:	2218      	movs	r2, #24
 8004528:	4618      	mov	r0, r3
 800452a:	f7fc f8c9 	bl	80006c0 <_Z22CNI_update_msg_contentmPhm>
}
 800452e:	bf00      	nop
 8004530:	3724      	adds	r7, #36	; 0x24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd90      	pop	{r4, r7, pc}

08004536 <_ZL21make_imu_data_for_cni7IMUDataPh>:

static void make_imu_data_for_cni(IMUData imuData, uint8_t *dataForCni)
{
 8004536:	b084      	sub	sp, #16
 8004538:	b490      	push	{r4, r7}
 800453a:	af00      	add	r7, sp, #0
 800453c:	f107 0408 	add.w	r4, r7, #8
 8004540:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004544:	69ba      	ldr	r2, [r7, #24]
	memcpy(dataForCni     , &imuData.accelX, 4);
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[4] , &imuData.accelY, 4);
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	3304      	adds	r3, #4
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[8] , &imuData.accelZ, 4);
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	3308      	adds	r3, #8
 8004556:	6a3a      	ldr	r2, [r7, #32]
 8004558:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[12], &imuData.gyroX , 4);
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	330c      	adds	r3, #12
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[16], &imuData.gyroY , 4);
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	3310      	adds	r3, #16
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[20], &imuData.gyroZ , 4);
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	3314      	adds	r3, #20
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	601a      	str	r2, [r3, #0]
}
 8004572:	bf00      	nop
 8004574:	46bd      	mov	sp, r7
 8004576:	bc90      	pop	{r4, r7}
 8004578:	b004      	add	sp, #16
 800457a:	4770      	bx	lr

0800457c <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>:
 */

#include "taskWatchdog.h"

void taskWatchdog_constructor(taskWatchdog_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, IWDG_HandleTypeDef *hiwdg)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskWatchdog_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	490d      	ldr	r1, [pc, #52]	; (80045d0 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x54>)
 800459a:	f000 f98f 	bl	80048bc <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mHiwdg_ = hiwdg;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	615a      	str	r2, [r3, #20]

	me->mHiwdg_->Instance = IWDG;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x58>)
 80045aa:	601a      	str	r2, [r3, #0]
	me->mHiwdg_->Init.Prescaler = IWDG_PRESCALER_4;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	2200      	movs	r2, #0
 80045b2:	605a      	str	r2, [r3, #4]
	me->mHiwdg_->Init.Window = 4095;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80045bc:	60da      	str	r2, [r3, #12]
	me->mHiwdg_->Init.Reload = 9;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	2209      	movs	r2, #9
 80045c4:	609a      	str	r2, [r3, #8]
}
 80045c6:	bf00      	nop
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	080045f3 	.word	0x080045f3
 80045d4:	40003000 	.word	0x40003000

080045d8 <_Z18taskWatchdog_startP14taskWatchdog_t>:
{
	timeTriggeredTask_destructor(&me->super);
}

void taskWatchdog_start(taskWatchdog_t *me)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Init(me->mHiwdg_);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f001 f9ab 	bl	8005940 <HAL_IWDG_Init>
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <_Z19taskWatchdog_updateP14taskWatchdog_t>:

void taskWatchdog_update(taskWatchdog_t *me)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(me->mHiwdg_);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	4618      	mov	r0, r3
 8004600:	f001 f9ed 	bl	80059de <HAL_IWDG_Refresh>
}
 8004604:	bf00      	nop
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004612:	f107 0310 	add.w	r3, r7, #16
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	609a      	str	r2, [r3, #8]
 800461e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004620:	1d3b      	adds	r3, r7, #4
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	605a      	str	r2, [r3, #4]
 8004628:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800462a:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <MX_TIM5_Init+0x94>)
 800462c:	4a1d      	ldr	r2, [pc, #116]	; (80046a4 <MX_TIM5_Init+0x98>)
 800462e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 8004630:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <MX_TIM5_Init+0x94>)
 8004632:	2247      	movs	r2, #71	; 0x47
 8004634:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004636:	4b1a      	ldr	r3, [pc, #104]	; (80046a0 <MX_TIM5_Init+0x94>)
 8004638:	2200      	movs	r2, #0
 800463a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 800463c:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <MX_TIM5_Init+0x94>)
 800463e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004642:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004644:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <MX_TIM5_Init+0x94>)
 8004646:	2200      	movs	r2, #0
 8004648:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800464a:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <MX_TIM5_Init+0x94>)
 800464c:	2200      	movs	r2, #0
 800464e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004650:	4813      	ldr	r0, [pc, #76]	; (80046a0 <MX_TIM5_Init+0x94>)
 8004652:	f002 fee5 	bl	8007420 <HAL_TIM_Base_Init>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800465c:	f7ff fa30 	bl	8003ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004664:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004666:	f107 0310 	add.w	r3, r7, #16
 800466a:	4619      	mov	r1, r3
 800466c:	480c      	ldr	r0, [pc, #48]	; (80046a0 <MX_TIM5_Init+0x94>)
 800466e:	f003 f923 	bl	80078b8 <HAL_TIM_ConfigClockSource>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004678:	f7ff fa22 	bl	8003ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800467c:	2300      	movs	r3, #0
 800467e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004684:	1d3b      	adds	r3, r7, #4
 8004686:	4619      	mov	r1, r3
 8004688:	4805      	ldr	r0, [pc, #20]	; (80046a0 <MX_TIM5_Init+0x94>)
 800468a:	f003 fd2f 	bl	80080ec <HAL_TIMEx_MasterConfigSynchronization>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004694:	f7ff fa14 	bl	8003ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004698:	bf00      	nop
 800469a:	3720      	adds	r7, #32
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	200001fc 	.word	0x200001fc
 80046a4:	40000c00 	.word	0x40000c00

080046a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0d      	ldr	r2, [pc, #52]	; (80046ec <HAL_TIM_Base_MspInit+0x44>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d113      	bne.n	80046e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80046ba:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <HAL_TIM_Base_MspInit+0x48>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	4a0c      	ldr	r2, [pc, #48]	; (80046f0 <HAL_TIM_Base_MspInit+0x48>)
 80046c0:	f043 0308 	orr.w	r3, r3, #8
 80046c4:	6413      	str	r3, [r2, #64]	; 0x40
 80046c6:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <HAL_TIM_Base_MspInit+0x48>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80046d2:	2200      	movs	r2, #0
 80046d4:	2100      	movs	r1, #0
 80046d6:	2032      	movs	r0, #50	; 0x32
 80046d8:	f000 fe71 	bl	80053be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80046dc:	2032      	movs	r0, #50	; 0x32
 80046de:	f000 fe8a 	bl	80053f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40000c00 	.word	0x40000c00
 80046f0:	40023800 	.word	0x40023800

080046f4 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef>:

static timeTriggeredScheduler_t _instance;
//volatile uint32_t _ticks;

static void timeTriggeredScheduler_tick(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
	_instance.mTicks_++;
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef+0x20>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	3301      	adds	r3, #1
 8004702:	4a04      	ldr	r2, [pc, #16]	; (8004714 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef+0x20>)
 8004704:	6053      	str	r3, [r2, #4]
	//_ticks++;
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	200002b8 	.word	0x200002b8

08004718 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDef>:

void timeTriggeredScheduler_constructor(TIM_HandleTypeDef *timer)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	uint32_t i;

	_instance.mTimer_ = timer;
 8004720:	4a0d      	ldr	r2, [pc, #52]	; (8004758 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDef+0x40>)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6013      	str	r3, [r2, #0]

	for(i = 0; i < MAX_NUM_TASKS ; i++)
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	e008      	b.n	800473e <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDef+0x26>
	{
		_instance.mTaskList_[i] = 0;
 800472c:	4a0a      	ldr	r2, [pc, #40]	; (8004758 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDef+0x40>)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3302      	adds	r3, #2
 8004732:	2100      	movs	r1, #0
 8004734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i = 0; i < MAX_NUM_TASKS ; i++)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3301      	adds	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b09      	cmp	r3, #9
 8004742:	d9f3      	bls.n	800472c <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDef+0x14>
	}

	_instance.mTicks_ = 0;
 8004744:	4b04      	ldr	r3, [pc, #16]	; (8004758 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDef+0x40>)
 8004746:	2200      	movs	r2, #0
 8004748:	605a      	str	r2, [r3, #4]
	//_ticks = 0;
}
 800474a:	bf00      	nop
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	200002b8 	.word	0x200002b8

0800475c <_Z27timeTriggeredScheduler_initv>:

void timeTriggeredScheduler_init(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(_instance.mTimer_);
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <_Z27timeTriggeredScheduler_initv+0x20>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f002 ff37 	bl	80075d8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_RegisterCallback(_instance.mTimer_, HAL_TIM_PERIOD_ELAPSED_CB_ID, timeTriggeredScheduler_tick);
 800476a:	4b04      	ldr	r3, [pc, #16]	; (800477c <_Z27timeTriggeredScheduler_initv+0x20>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a04      	ldr	r2, [pc, #16]	; (8004780 <_Z27timeTriggeredScheduler_initv+0x24>)
 8004770:	210e      	movs	r1, #14
 8004772:	4618      	mov	r0, r3
 8004774:	f003 f9ce 	bl	8007b14 <HAL_TIM_RegisterCallback>
}
 8004778:	bf00      	nop
 800477a:	bd80      	pop	{r7, pc}
 800477c:	200002b8 	.word	0x200002b8
 8004780:	080046f5 	.word	0x080046f5

08004784 <_Z28timeTriggeredScheduler_startv>:

void timeTriggeredScheduler_start(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(_instance.mTimer_);
 8004788:	4b03      	ldr	r3, [pc, #12]	; (8004798 <_Z28timeTriggeredScheduler_startv+0x14>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f002 feab 	bl	80074e8 <HAL_TIM_Base_Start_IT>
}
 8004792:	bf00      	nop
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	200002b8 	.word	0x200002b8

0800479c <_Z31timeTriggeredScheduler_dispatchv>:
{
	HAL_TIM_Base_Stop_IT(_instance.mTimer_);
}

void timeTriggeredScheduler_dispatch(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
	uint8_t updateRequired = 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 80047a6:	b672      	cpsid	i
}
 80047a8:	bf00      	nop
	uint32_t i;
	timeTriggeredTask_t *task;

	__disable_irq();
	if(_instance.mTicks_ > 0)
 80047aa:	4b2f      	ldr	r3, [pc, #188]	; (8004868 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bf14      	ite	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	2300      	moveq	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d006      	beq.n	80047ca <_Z31timeTriggeredScheduler_dispatchv+0x2e>
	{
		_instance.mTicks_--;
 80047bc:	4b2a      	ldr	r3, [pc, #168]	; (8004868 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	4a29      	ldr	r2, [pc, #164]	; (8004868 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 80047c4:	6053      	str	r3, [r2, #4]
		updateRequired = 1;
 80047c6:	2301      	movs	r3, #1
 80047c8:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80047ca:	b662      	cpsie	i
}
 80047cc:	bf00      	nop
	}
	__enable_irq();

	while(updateRequired)
 80047ce:	e043      	b.n	8004858 <_Z31timeTriggeredScheduler_dispatchv+0xbc>
	{
		for(i = 0; i < MAX_NUM_TASKS; i++)
 80047d0:	2300      	movs	r3, #0
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	e026      	b.n	8004824 <_Z31timeTriggeredScheduler_dispatchv+0x88>
		{
			if((task = _instance.mTaskList_[i]))
 80047d6:	4a24      	ldr	r2, [pc, #144]	; (8004868 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	3302      	adds	r3, #2
 80047dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e0:	607b      	str	r3, [r7, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf14      	ite	ne
 80047e8:	2301      	movne	r3, #1
 80047ea:	2300      	moveq	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d015      	beq.n	800481e <_Z31timeTriggeredScheduler_dispatchv+0x82>
			{
				//if( (--(me->mTaskList_[i]->mDelayTicks_)) == 0 )
				if( (--(task->mDelayTicks_)) == 0 )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	1e5a      	subs	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	605a      	str	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <_Z31timeTriggeredScheduler_dispatchv+0x82>
				{
					//timeTriggeredTask_update((timeTriggeredTask_t*)(me->mTaskList_[i]));
					(*(task->mTaskHandler_))(task);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
					//me->mTaskList_[i]->mDelayTicks_ = me->mTaskList_[i]->mPeriodTicks_;
					task->mDelayTicks_ = task->mPeriodTicks_;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	605a      	str	r2, [r3, #4]
		for(i = 0; i < MAX_NUM_TASKS; i++)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	3301      	adds	r3, #1
 8004822:	60bb      	str	r3, [r7, #8]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b09      	cmp	r3, #9
 8004828:	d9d5      	bls.n	80047d6 <_Z31timeTriggeredScheduler_dispatchv+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 800482a:	b672      	cpsid	i
}
 800482c:	bf00      	nop
			}
		}

		__disable_irq();

		if(_instance.mTicks_ > 0)
 800482e:	4b0e      	ldr	r3, [pc, #56]	; (8004868 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	bf14      	ite	ne
 8004836:	2301      	movne	r3, #1
 8004838:	2300      	moveq	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <_Z31timeTriggeredScheduler_dispatchv+0xb4>
		{
			_instance.mTicks_--;
 8004840:	4b09      	ldr	r3, [pc, #36]	; (8004868 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	3b01      	subs	r3, #1
 8004846:	4a08      	ldr	r2, [pc, #32]	; (8004868 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 8004848:	6053      	str	r3, [r2, #4]
			updateRequired = 1;
 800484a:	2301      	movs	r3, #1
 800484c:	73fb      	strb	r3, [r7, #15]
 800484e:	e001      	b.n	8004854 <_Z31timeTriggeredScheduler_dispatchv+0xb8>
		}
		else
		{
			updateRequired = 0;
 8004850:	2300      	movs	r3, #0
 8004852:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004854:	b662      	cpsie	i
}
 8004856:	bf00      	nop
	while(updateRequired)
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1b8      	bne.n	80047d0 <_Z31timeTriggeredScheduler_dispatchv+0x34>
		}

		__enable_irq();
	}
	__asm__("wfi");
 800485e:	bf30      	wfi
}
 8004860:	bf00      	nop
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	200002b8 	.word	0x200002b8

0800486c <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>:

TTschStatus_t timeTriggeredScheduler_add_task(timeTriggeredTask_t *task)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]

	while( (_instance.mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 8004878:	e002      	b.n	8004880 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x14>
	{
		i++;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3301      	adds	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
	while( (_instance.mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 8004880:	4a0d      	ldr	r2, [pc, #52]	; (80048b8 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x4c>)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3302      	adds	r3, #2
 8004886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x28>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b09      	cmp	r3, #9
 8004892:	d9f2      	bls.n	800487a <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0xe>
	}

	if(i == MAX_NUM_TASKS)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2b0a      	cmp	r3, #10
 8004898:	d101      	bne.n	800489e <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x32>
	{
		return TTsch_ERROR_MAX_TASKS_REACHED;
 800489a:	2301      	movs	r3, #1
 800489c:	e006      	b.n	80048ac <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x40>
	}

	_instance.mTaskList_[i] = task;
 800489e:	4906      	ldr	r1, [pc, #24]	; (80048b8 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x4c>)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3302      	adds	r3, #2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return TTsch_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	200002b8 	.word	0x200002b8

080048bc <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>:
 */

#include "timeTriggeredTask.h"

void timeTriggeredTask_constructor(timeTriggeredTask_t *me, taskHandler_t taskHandler, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
	me->mTaskHandler_ = taskHandler;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	601a      	str	r2, [r3, #0]

	me->mDelayTicks_ = delayTicks + 1;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	605a      	str	r2, [r3, #4]
	me->mPeriodTicks_ = periodTicks;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	609a      	str	r2, [r3, #8]
	me->mWcetMicroSeconds_ = wcetMicroSeconds;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	60da      	str	r2, [r3, #12]
	me->mBcetMicroSeconds_ = bcetMicroSeconds;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	611a      	str	r2, [r3, #16]
}
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
	...

080048f8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80048fc:	4b14      	ldr	r3, [pc, #80]	; (8004950 <MX_USART3_UART_Init+0x58>)
 80048fe:	4a15      	ldr	r2, [pc, #84]	; (8004954 <MX_USART3_UART_Init+0x5c>)
 8004900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004902:	4b13      	ldr	r3, [pc, #76]	; (8004950 <MX_USART3_UART_Init+0x58>)
 8004904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004908:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800490a:	4b11      	ldr	r3, [pc, #68]	; (8004950 <MX_USART3_UART_Init+0x58>)
 800490c:	2200      	movs	r2, #0
 800490e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004910:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <MX_USART3_UART_Init+0x58>)
 8004912:	2200      	movs	r2, #0
 8004914:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004916:	4b0e      	ldr	r3, [pc, #56]	; (8004950 <MX_USART3_UART_Init+0x58>)
 8004918:	2200      	movs	r2, #0
 800491a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800491c:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <MX_USART3_UART_Init+0x58>)
 800491e:	220c      	movs	r2, #12
 8004920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004922:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <MX_USART3_UART_Init+0x58>)
 8004924:	2200      	movs	r2, #0
 8004926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004928:	4b09      	ldr	r3, [pc, #36]	; (8004950 <MX_USART3_UART_Init+0x58>)
 800492a:	2200      	movs	r2, #0
 800492c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800492e:	4b08      	ldr	r3, [pc, #32]	; (8004950 <MX_USART3_UART_Init+0x58>)
 8004930:	2200      	movs	r2, #0
 8004932:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004934:	4b06      	ldr	r3, [pc, #24]	; (8004950 <MX_USART3_UART_Init+0x58>)
 8004936:	2200      	movs	r2, #0
 8004938:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800493a:	4805      	ldr	r0, [pc, #20]	; (8004950 <MX_USART3_UART_Init+0x58>)
 800493c:	f003 fc8c 	bl	8008258 <HAL_UART_Init>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004946:	f7ff f8bb 	bl	8003ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800494a:	bf00      	nop
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	200002e8 	.word	0x200002e8
 8004954:	40004800 	.word	0x40004800

08004958 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b0aa      	sub	sp, #168	; 0xa8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004960:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	605a      	str	r2, [r3, #4]
 800496a:	609a      	str	r2, [r3, #8]
 800496c:	60da      	str	r2, [r3, #12]
 800496e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004970:	f107 0310 	add.w	r3, r7, #16
 8004974:	2284      	movs	r2, #132	; 0x84
 8004976:	2100      	movs	r1, #0
 8004978:	4618      	mov	r0, r3
 800497a:	f004 fdcf 	bl	800951c <memset>
  if(uartHandle->Instance==USART3)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a26      	ldr	r2, [pc, #152]	; (8004a1c <HAL_UART_MspInit+0xc4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d144      	bne.n	8004a12 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800498c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800498e:	2300      	movs	r3, #0
 8004990:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004992:	f107 0310 	add.w	r3, r7, #16
 8004996:	4618      	mov	r0, r3
 8004998:	f001 fd0c 	bl	80063b4 <HAL_RCCEx_PeriphCLKConfig>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80049a2:	f7ff f88d 	bl	8003ac0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80049a6:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <HAL_UART_MspInit+0xc8>)
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	4a1d      	ldr	r2, [pc, #116]	; (8004a20 <HAL_UART_MspInit+0xc8>)
 80049ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b0:	6413      	str	r3, [r2, #64]	; 0x40
 80049b2:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <HAL_UART_MspInit+0xc8>)
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80049be:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <HAL_UART_MspInit+0xc8>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	4a17      	ldr	r2, [pc, #92]	; (8004a20 <HAL_UART_MspInit+0xc8>)
 80049c4:	f043 0308 	orr.w	r3, r3, #8
 80049c8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ca:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <HAL_UART_MspInit+0xc8>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	60bb      	str	r3, [r7, #8]
 80049d4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80049d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80049da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049de:	2302      	movs	r3, #2
 80049e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ea:	2303      	movs	r3, #3
 80049ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80049f0:	2307      	movs	r3, #7
 80049f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049f6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80049fa:	4619      	mov	r1, r3
 80049fc:	4809      	ldr	r0, [pc, #36]	; (8004a24 <HAL_UART_MspInit+0xcc>)
 80049fe:	f000 fda7 	bl	8005550 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004a02:	2200      	movs	r2, #0
 8004a04:	2100      	movs	r1, #0
 8004a06:	2027      	movs	r0, #39	; 0x27
 8004a08:	f000 fcd9 	bl	80053be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004a0c:	2027      	movs	r0, #39	; 0x27
 8004a0e:	f000 fcf2 	bl	80053f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004a12:	bf00      	nop
 8004a14:	37a8      	adds	r7, #168	; 0xa8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40004800 	.word	0x40004800
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40020c00 	.word	0x40020c00

08004a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a2c:	480d      	ldr	r0, [pc, #52]	; (8004a64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004a2e:	490e      	ldr	r1, [pc, #56]	; (8004a68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004a30:	4a0e      	ldr	r2, [pc, #56]	; (8004a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a34:	e002      	b.n	8004a3c <LoopCopyDataInit>

08004a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a3a:	3304      	adds	r3, #4

08004a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a40:	d3f9      	bcc.n	8004a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a42:	4a0b      	ldr	r2, [pc, #44]	; (8004a70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004a44:	4c0b      	ldr	r4, [pc, #44]	; (8004a74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a48:	e001      	b.n	8004a4e <LoopFillZerobss>

08004a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a4c:	3204      	adds	r2, #4

08004a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a50:	d3fb      	bcc.n	8004a4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a52:	f7ff fc9d 	bl	8004390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a56:	f004 fdc3 	bl	80095e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a5a:	f7fe ffa7 	bl	80039ac <main>
  bx  lr    
 8004a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a60:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a68:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8004a6c:	080097fc 	.word	0x080097fc
  ldr r2, =_sbss
 8004a70:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8004a74:	200004ec 	.word	0x200004ec

08004a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a78:	e7fe      	b.n	8004a78 <ADC_IRQHandler>

08004a7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a7e:	2003      	movs	r0, #3
 8004a80:	f000 fc92 	bl	80053a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a84:	2000      	movs	r0, #0
 8004a86:	f000 f805 	bl	8004a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a8a:	f7ff fb8b 	bl	80041a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a9c:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <HAL_InitTick+0x54>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4b12      	ldr	r3, [pc, #72]	; (8004aec <HAL_InitTick+0x58>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fcad 	bl	8005412 <HAL_SYSTICK_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e00e      	b.n	8004ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b0f      	cmp	r3, #15
 8004ac6:	d80a      	bhi.n	8004ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ac8:	2200      	movs	r2, #0
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ad0:	f000 fc75 	bl	80053be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ad4:	4a06      	ldr	r2, [pc, #24]	; (8004af0 <HAL_InitTick+0x5c>)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e000      	b.n	8004ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	200000bc 	.word	0x200000bc
 8004aec:	200000c4 	.word	0x200000c4
 8004af0:	200000c0 	.word	0x200000c0

08004af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_IncTick+0x20>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <HAL_IncTick+0x24>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4413      	add	r3, r2
 8004b04:	4a04      	ldr	r2, [pc, #16]	; (8004b18 <HAL_IncTick+0x24>)
 8004b06:	6013      	str	r3, [r2, #0]
}
 8004b08:	bf00      	nop
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	200000c4 	.word	0x200000c4
 8004b18:	2000039c 	.word	0x2000039c

08004b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8004b20:	4b03      	ldr	r3, [pc, #12]	; (8004b30 <HAL_GetTick+0x14>)
 8004b22:	681b      	ldr	r3, [r3, #0]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	2000039c 	.word	0x2000039c

08004b34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e0ed      	b.n	8004d22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fb fe88 	bl	8000868 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0201 	orr.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b68:	f7ff ffd8 	bl	8004b1c <HAL_GetTick>
 8004b6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b6e:	e012      	b.n	8004b96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b70:	f7ff ffd4 	bl	8004b1c <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b0a      	cmp	r3, #10
 8004b7c:	d90b      	bls.n	8004b96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2205      	movs	r2, #5
 8004b8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e0c5      	b.n	8004d22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0e5      	beq.n	8004b70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0202 	bic.w	r2, r2, #2
 8004bb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bb4:	f7ff ffb2 	bl	8004b1c <HAL_GetTick>
 8004bb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004bba:	e012      	b.n	8004be2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004bbc:	f7ff ffae 	bl	8004b1c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b0a      	cmp	r3, #10
 8004bc8:	d90b      	bls.n	8004be2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2205      	movs	r2, #5
 8004bda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e09f      	b.n	8004d22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e5      	bne.n	8004bbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	7e1b      	ldrb	r3, [r3, #24]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d108      	bne.n	8004c0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	e007      	b.n	8004c1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	7e5b      	ldrb	r3, [r3, #25]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d108      	bne.n	8004c34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	e007      	b.n	8004c44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	7e9b      	ldrb	r3, [r3, #26]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d108      	bne.n	8004c5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0220 	orr.w	r2, r2, #32
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	e007      	b.n	8004c6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0220 	bic.w	r2, r2, #32
 8004c6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	7edb      	ldrb	r3, [r3, #27]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d108      	bne.n	8004c88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0210 	bic.w	r2, r2, #16
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	e007      	b.n	8004c98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0210 	orr.w	r2, r2, #16
 8004c96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	7f1b      	ldrb	r3, [r3, #28]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d108      	bne.n	8004cb2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0208 	orr.w	r2, r2, #8
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	e007      	b.n	8004cc2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0208 	bic.w	r2, r2, #8
 8004cc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	7f5b      	ldrb	r3, [r3, #29]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d108      	bne.n	8004cdc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0204 	orr.w	r2, r2, #4
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	e007      	b.n	8004cec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0204 	bic.w	r2, r2, #4
 8004cea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	ea42 0103 	orr.w	r1, r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	1e5a      	subs	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d42:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004d44:	7cfb      	ldrb	r3, [r7, #19]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d003      	beq.n	8004d52 <HAL_CAN_ConfigFilter+0x26>
 8004d4a:	7cfb      	ldrb	r3, [r7, #19]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	f040 80be 	bne.w	8004ece <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004d52:	4b65      	ldr	r3, [pc, #404]	; (8004ee8 <HAL_CAN_ConfigFilter+0x1bc>)
 8004d54:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d5c:	f043 0201 	orr.w	r2, r3, #1
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d6c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	021b      	lsls	r3, r3, #8
 8004d82:	431a      	orrs	r2, r3
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f003 031f 	and.w	r3, r3, #31
 8004d92:	2201      	movs	r2, #1
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	43db      	mvns	r3, r3
 8004da4:	401a      	ands	r2, r3
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d123      	bne.n	8004dfc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004dd6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	3248      	adds	r2, #72	; 0x48
 8004ddc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004df0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004df2:	6979      	ldr	r1, [r7, #20]
 8004df4:	3348      	adds	r3, #72	; 0x48
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	440b      	add	r3, r1
 8004dfa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d122      	bne.n	8004e4a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e24:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	3248      	adds	r2, #72	; 0x48
 8004e2a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e3e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e40:	6979      	ldr	r1, [r7, #20]
 8004e42:	3348      	adds	r3, #72	; 0x48
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	440b      	add	r3, r1
 8004e48:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	401a      	ands	r2, r3
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004e64:	e007      	b.n	8004e76 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d109      	bne.n	8004e92 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	43db      	mvns	r3, r3
 8004e88:	401a      	ands	r2, r3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004e90:	e007      	b.n	8004ea2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d107      	bne.n	8004eba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ec0:	f023 0201 	bic.w	r2, r3, #1
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e006      	b.n	8004edc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
  }
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	371c      	adds	r7, #28
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	40006400 	.word	0x40006400

08004eec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d12e      	bne.n	8004f5e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0201 	bic.w	r2, r2, #1
 8004f16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f18:	f7ff fe00 	bl	8004b1c <HAL_GetTick>
 8004f1c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f1e:	e012      	b.n	8004f46 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f20:	f7ff fdfc 	bl	8004b1c <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b0a      	cmp	r3, #10
 8004f2c:	d90b      	bls.n	8004f46 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2205      	movs	r2, #5
 8004f3e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e012      	b.n	8004f6c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e5      	bne.n	8004f20 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e006      	b.n	8004f6c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
  }
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b089      	sub	sp, #36	; 0x24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f88:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f92:	7ffb      	ldrb	r3, [r7, #31]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d003      	beq.n	8004fa0 <HAL_CAN_AddTxMessage+0x2c>
 8004f98:	7ffb      	ldrb	r3, [r7, #31]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	f040 80ad 	bne.w	80050fa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10a      	bne.n	8004fc0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d105      	bne.n	8004fc0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8095 	beq.w	80050ea <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	0e1b      	lsrs	r3, r3, #24
 8004fc4:	f003 0303 	and.w	r3, r3, #3
 8004fc8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004fca:	2201      	movs	r2, #1
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	409a      	lsls	r2, r3
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10d      	bne.n	8004ff8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004fe6:	68f9      	ldr	r1, [r7, #12]
 8004fe8:	6809      	ldr	r1, [r1, #0]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	3318      	adds	r3, #24
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	440b      	add	r3, r1
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	e00f      	b.n	8005018 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005002:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005008:	68f9      	ldr	r1, [r7, #12]
 800500a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800500c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	3318      	adds	r3, #24
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	440b      	add	r3, r1
 8005016:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6819      	ldr	r1, [r3, #0]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	3318      	adds	r3, #24
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	440b      	add	r3, r1
 8005028:	3304      	adds	r3, #4
 800502a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	7d1b      	ldrb	r3, [r3, #20]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d111      	bne.n	8005058 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	3318      	adds	r3, #24
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	4413      	add	r3, r2
 8005040:	3304      	adds	r3, #4
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	6811      	ldr	r1, [r2, #0]
 8005048:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	3318      	adds	r3, #24
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	440b      	add	r3, r1
 8005054:	3304      	adds	r3, #4
 8005056:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3307      	adds	r3, #7
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	061a      	lsls	r2, r3, #24
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3306      	adds	r3, #6
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	041b      	lsls	r3, r3, #16
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3305      	adds	r3, #5
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	4313      	orrs	r3, r2
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	3204      	adds	r2, #4
 8005078:	7812      	ldrb	r2, [r2, #0]
 800507a:	4610      	mov	r0, r2
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	6811      	ldr	r1, [r2, #0]
 8005080:	ea43 0200 	orr.w	r2, r3, r0
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	440b      	add	r3, r1
 800508a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800508e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3303      	adds	r3, #3
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	061a      	lsls	r2, r3, #24
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3302      	adds	r3, #2
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	041b      	lsls	r3, r3, #16
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	3301      	adds	r3, #1
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	021b      	lsls	r3, r3, #8
 80050aa:	4313      	orrs	r3, r2
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	7812      	ldrb	r2, [r2, #0]
 80050b0:	4610      	mov	r0, r2
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	6811      	ldr	r1, [r2, #0]
 80050b6:	ea43 0200 	orr.w	r2, r3, r0
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	440b      	add	r3, r1
 80050c0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80050c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	3318      	adds	r3, #24
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	4413      	add	r3, r2
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	6811      	ldr	r1, [r2, #0]
 80050d8:	f043 0201 	orr.w	r2, r3, #1
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	3318      	adds	r3, #24
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	440b      	add	r3, r1
 80050e4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e00e      	b.n	8005108 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e006      	b.n	8005108 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
  }
}
 8005108:	4618      	mov	r0, r3
 800510a:	3724      	adds	r7, #36	; 0x24
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005124:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d002      	beq.n	8005132 <HAL_CAN_AbortTxRequest+0x1e>
 800512c:	7bfb      	ldrb	r3, [r7, #15]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d128      	bne.n	8005184 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d007      	beq.n	800514c <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800514a:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d007      	beq.n	8005166 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005164:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800517e:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	e006      	b.n	8005192 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800519e:	b480      	push	{r7}
 80051a0:	b085      	sub	sp, #20
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051b0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80051b2:	7afb      	ldrb	r3, [r7, #11]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d002      	beq.n	80051be <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80051b8:	7afb      	ldrb	r3, [r7, #11]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d11d      	bne.n	80051fa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3301      	adds	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3301      	adds	r3, #1
 80051e4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3301      	adds	r3, #1
 80051f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80051fa:	68fb      	ldr	r3, [r7, #12]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <__NVIC_SetPriorityGrouping+0x40>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005224:	4013      	ands	r3, r2
 8005226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <__NVIC_SetPriorityGrouping+0x44>)
 8005232:	4313      	orrs	r3, r2
 8005234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005236:	4a04      	ldr	r2, [pc, #16]	; (8005248 <__NVIC_SetPriorityGrouping+0x40>)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	60d3      	str	r3, [r2, #12]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	e000ed00 	.word	0xe000ed00
 800524c:	05fa0000 	.word	0x05fa0000

08005250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005254:	4b04      	ldr	r3, [pc, #16]	; (8005268 <__NVIC_GetPriorityGrouping+0x18>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	0a1b      	lsrs	r3, r3, #8
 800525a:	f003 0307 	and.w	r3, r3, #7
}
 800525e:	4618      	mov	r0, r3
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	e000ed00 	.word	0xe000ed00

0800526c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800527a:	2b00      	cmp	r3, #0
 800527c:	db0b      	blt.n	8005296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	f003 021f 	and.w	r2, r3, #31
 8005284:	4907      	ldr	r1, [pc, #28]	; (80052a4 <__NVIC_EnableIRQ+0x38>)
 8005286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	2001      	movs	r0, #1
 800528e:	fa00 f202 	lsl.w	r2, r0, r2
 8005292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	e000e100 	.word	0xe000e100

080052a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	6039      	str	r1, [r7, #0]
 80052b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	db0a      	blt.n	80052d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	490c      	ldr	r1, [pc, #48]	; (80052f4 <__NVIC_SetPriority+0x4c>)
 80052c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c6:	0112      	lsls	r2, r2, #4
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	440b      	add	r3, r1
 80052cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052d0:	e00a      	b.n	80052e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	4908      	ldr	r1, [pc, #32]	; (80052f8 <__NVIC_SetPriority+0x50>)
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	3b04      	subs	r3, #4
 80052e0:	0112      	lsls	r2, r2, #4
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	440b      	add	r3, r1
 80052e6:	761a      	strb	r2, [r3, #24]
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	e000e100 	.word	0xe000e100
 80052f8:	e000ed00 	.word	0xe000ed00

080052fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b089      	sub	sp, #36	; 0x24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f1c3 0307 	rsb	r3, r3, #7
 8005316:	2b04      	cmp	r3, #4
 8005318:	bf28      	it	cs
 800531a:	2304      	movcs	r3, #4
 800531c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	3304      	adds	r3, #4
 8005322:	2b06      	cmp	r3, #6
 8005324:	d902      	bls.n	800532c <NVIC_EncodePriority+0x30>
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3b03      	subs	r3, #3
 800532a:	e000      	b.n	800532e <NVIC_EncodePriority+0x32>
 800532c:	2300      	movs	r3, #0
 800532e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	43da      	mvns	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	401a      	ands	r2, r3
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005344:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	fa01 f303 	lsl.w	r3, r1, r3
 800534e:	43d9      	mvns	r1, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005354:	4313      	orrs	r3, r2
         );
}
 8005356:	4618      	mov	r0, r3
 8005358:	3724      	adds	r7, #36	; 0x24
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3b01      	subs	r3, #1
 8005370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005374:	d301      	bcc.n	800537a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005376:	2301      	movs	r3, #1
 8005378:	e00f      	b.n	800539a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800537a:	4a0a      	ldr	r2, [pc, #40]	; (80053a4 <SysTick_Config+0x40>)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3b01      	subs	r3, #1
 8005380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005382:	210f      	movs	r1, #15
 8005384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005388:	f7ff ff8e 	bl	80052a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <SysTick_Config+0x40>)
 800538e:	2200      	movs	r2, #0
 8005390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005392:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <SysTick_Config+0x40>)
 8005394:	2207      	movs	r2, #7
 8005396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	e000e010 	.word	0xe000e010

080053a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff ff29 	bl	8005208 <__NVIC_SetPriorityGrouping>
}
 80053b6:	bf00      	nop
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053be:	b580      	push	{r7, lr}
 80053c0:	b086      	sub	sp, #24
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	4603      	mov	r3, r0
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053d0:	f7ff ff3e 	bl	8005250 <__NVIC_GetPriorityGrouping>
 80053d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	6978      	ldr	r0, [r7, #20]
 80053dc:	f7ff ff8e 	bl	80052fc <NVIC_EncodePriority>
 80053e0:	4602      	mov	r2, r0
 80053e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053e6:	4611      	mov	r1, r2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff ff5d 	bl	80052a8 <__NVIC_SetPriority>
}
 80053ee:	bf00      	nop
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	4603      	mov	r3, r0
 80053fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff ff31 	bl	800526c <__NVIC_EnableIRQ>
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff ffa2 	bl	8005364 <SysTick_Config>
 8005420:	4603      	mov	r3, r0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005436:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005438:	f7ff fb70 	bl	8004b1c <HAL_GetTick>
 800543c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d008      	beq.n	800545c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2280      	movs	r2, #128	; 0x80
 800544e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e052      	b.n	8005502 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0216 	bic.w	r2, r2, #22
 800546a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695a      	ldr	r2, [r3, #20]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800547a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	2b00      	cmp	r3, #0
 8005482:	d103      	bne.n	800548c <HAL_DMA_Abort+0x62>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0208 	bic.w	r2, r2, #8
 800549a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0201 	bic.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054ac:	e013      	b.n	80054d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054ae:	f7ff fb35 	bl	8004b1c <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b05      	cmp	r3, #5
 80054ba:	d90c      	bls.n	80054d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2203      	movs	r2, #3
 80054c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e015      	b.n	8005502 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e4      	bne.n	80054ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e8:	223f      	movs	r2, #63	; 0x3f
 80054ea:	409a      	lsls	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d004      	beq.n	8005528 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2280      	movs	r2, #128	; 0x80
 8005522:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e00c      	b.n	8005542 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2205      	movs	r2, #5
 800552c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
	...

08005550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005550:	b480      	push	{r7}
 8005552:	b089      	sub	sp, #36	; 0x24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005562:	2300      	movs	r3, #0
 8005564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005566:	2300      	movs	r3, #0
 8005568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
 800556e:	e175      	b.n	800585c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005570:	2201      	movs	r2, #1
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4013      	ands	r3, r2
 8005582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	429a      	cmp	r2, r3
 800558a:	f040 8164 	bne.w	8005856 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	2b01      	cmp	r3, #1
 8005598:	d005      	beq.n	80055a6 <HAL_GPIO_Init+0x56>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d130      	bne.n	8005608 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	2203      	movs	r2, #3
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	43db      	mvns	r3, r3
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	4013      	ands	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055dc:	2201      	movs	r2, #1
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4013      	ands	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	091b      	lsrs	r3, r3, #4
 80055f2:	f003 0201 	and.w	r2, r3, #1
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	4313      	orrs	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f003 0303 	and.w	r3, r3, #3
 8005610:	2b03      	cmp	r3, #3
 8005612:	d017      	beq.n	8005644 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	2203      	movs	r2, #3
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	43db      	mvns	r3, r3
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	4013      	ands	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4313      	orrs	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d123      	bne.n	8005698 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	08da      	lsrs	r2, r3, #3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3208      	adds	r2, #8
 8005658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	220f      	movs	r2, #15
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4013      	ands	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	4313      	orrs	r3, r2
 8005688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	08da      	lsrs	r2, r3, #3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3208      	adds	r2, #8
 8005692:	69b9      	ldr	r1, [r7, #24]
 8005694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	2203      	movs	r2, #3
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	43db      	mvns	r3, r3
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	4013      	ands	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f003 0203 	and.w	r2, r3, #3
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 80be 	beq.w	8005856 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056da:	4b66      	ldr	r3, [pc, #408]	; (8005874 <HAL_GPIO_Init+0x324>)
 80056dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056de:	4a65      	ldr	r2, [pc, #404]	; (8005874 <HAL_GPIO_Init+0x324>)
 80056e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056e4:	6453      	str	r3, [r2, #68]	; 0x44
 80056e6:	4b63      	ldr	r3, [pc, #396]	; (8005874 <HAL_GPIO_Init+0x324>)
 80056e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80056f2:	4a61      	ldr	r2, [pc, #388]	; (8005878 <HAL_GPIO_Init+0x328>)
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	089b      	lsrs	r3, r3, #2
 80056f8:	3302      	adds	r3, #2
 80056fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	220f      	movs	r2, #15
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43db      	mvns	r3, r3
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	4013      	ands	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a58      	ldr	r2, [pc, #352]	; (800587c <HAL_GPIO_Init+0x32c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d037      	beq.n	800578e <HAL_GPIO_Init+0x23e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a57      	ldr	r2, [pc, #348]	; (8005880 <HAL_GPIO_Init+0x330>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d031      	beq.n	800578a <HAL_GPIO_Init+0x23a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a56      	ldr	r2, [pc, #344]	; (8005884 <HAL_GPIO_Init+0x334>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d02b      	beq.n	8005786 <HAL_GPIO_Init+0x236>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a55      	ldr	r2, [pc, #340]	; (8005888 <HAL_GPIO_Init+0x338>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d025      	beq.n	8005782 <HAL_GPIO_Init+0x232>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a54      	ldr	r2, [pc, #336]	; (800588c <HAL_GPIO_Init+0x33c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d01f      	beq.n	800577e <HAL_GPIO_Init+0x22e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a53      	ldr	r2, [pc, #332]	; (8005890 <HAL_GPIO_Init+0x340>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d019      	beq.n	800577a <HAL_GPIO_Init+0x22a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a52      	ldr	r2, [pc, #328]	; (8005894 <HAL_GPIO_Init+0x344>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_GPIO_Init+0x226>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a51      	ldr	r2, [pc, #324]	; (8005898 <HAL_GPIO_Init+0x348>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00d      	beq.n	8005772 <HAL_GPIO_Init+0x222>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a50      	ldr	r2, [pc, #320]	; (800589c <HAL_GPIO_Init+0x34c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d007      	beq.n	800576e <HAL_GPIO_Init+0x21e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a4f      	ldr	r2, [pc, #316]	; (80058a0 <HAL_GPIO_Init+0x350>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d101      	bne.n	800576a <HAL_GPIO_Init+0x21a>
 8005766:	2309      	movs	r3, #9
 8005768:	e012      	b.n	8005790 <HAL_GPIO_Init+0x240>
 800576a:	230a      	movs	r3, #10
 800576c:	e010      	b.n	8005790 <HAL_GPIO_Init+0x240>
 800576e:	2308      	movs	r3, #8
 8005770:	e00e      	b.n	8005790 <HAL_GPIO_Init+0x240>
 8005772:	2307      	movs	r3, #7
 8005774:	e00c      	b.n	8005790 <HAL_GPIO_Init+0x240>
 8005776:	2306      	movs	r3, #6
 8005778:	e00a      	b.n	8005790 <HAL_GPIO_Init+0x240>
 800577a:	2305      	movs	r3, #5
 800577c:	e008      	b.n	8005790 <HAL_GPIO_Init+0x240>
 800577e:	2304      	movs	r3, #4
 8005780:	e006      	b.n	8005790 <HAL_GPIO_Init+0x240>
 8005782:	2303      	movs	r3, #3
 8005784:	e004      	b.n	8005790 <HAL_GPIO_Init+0x240>
 8005786:	2302      	movs	r3, #2
 8005788:	e002      	b.n	8005790 <HAL_GPIO_Init+0x240>
 800578a:	2301      	movs	r3, #1
 800578c:	e000      	b.n	8005790 <HAL_GPIO_Init+0x240>
 800578e:	2300      	movs	r3, #0
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	f002 0203 	and.w	r2, r2, #3
 8005796:	0092      	lsls	r2, r2, #2
 8005798:	4093      	lsls	r3, r2
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	4313      	orrs	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80057a0:	4935      	ldr	r1, [pc, #212]	; (8005878 <HAL_GPIO_Init+0x328>)
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	089b      	lsrs	r3, r3, #2
 80057a6:	3302      	adds	r3, #2
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057ae:	4b3d      	ldr	r3, [pc, #244]	; (80058a4 <HAL_GPIO_Init+0x354>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	43db      	mvns	r3, r3
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	4013      	ands	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057d2:	4a34      	ldr	r2, [pc, #208]	; (80058a4 <HAL_GPIO_Init+0x354>)
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057d8:	4b32      	ldr	r3, [pc, #200]	; (80058a4 <HAL_GPIO_Init+0x354>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	43db      	mvns	r3, r3
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	4013      	ands	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057fc:	4a29      	ldr	r2, [pc, #164]	; (80058a4 <HAL_GPIO_Init+0x354>)
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005802:	4b28      	ldr	r3, [pc, #160]	; (80058a4 <HAL_GPIO_Init+0x354>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	43db      	mvns	r3, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	4013      	ands	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005826:	4a1f      	ldr	r2, [pc, #124]	; (80058a4 <HAL_GPIO_Init+0x354>)
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800582c:	4b1d      	ldr	r3, [pc, #116]	; (80058a4 <HAL_GPIO_Init+0x354>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	43db      	mvns	r3, r3
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	4013      	ands	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005850:	4a14      	ldr	r2, [pc, #80]	; (80058a4 <HAL_GPIO_Init+0x354>)
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	3301      	adds	r3, #1
 800585a:	61fb      	str	r3, [r7, #28]
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	2b0f      	cmp	r3, #15
 8005860:	f67f ae86 	bls.w	8005570 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop
 8005868:	3724      	adds	r7, #36	; 0x24
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40023800 	.word	0x40023800
 8005878:	40013800 	.word	0x40013800
 800587c:	40020000 	.word	0x40020000
 8005880:	40020400 	.word	0x40020400
 8005884:	40020800 	.word	0x40020800
 8005888:	40020c00 	.word	0x40020c00
 800588c:	40021000 	.word	0x40021000
 8005890:	40021400 	.word	0x40021400
 8005894:	40021800 	.word	0x40021800
 8005898:	40021c00 	.word	0x40021c00
 800589c:	40022000 	.word	0x40022000
 80058a0:	40022400 	.word	0x40022400
 80058a4:	40013c00 	.word	0x40013c00

080058a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	807b      	strh	r3, [r7, #2]
 80058b4:	4613      	mov	r3, r2
 80058b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058b8:	787b      	ldrb	r3, [r7, #1]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058be:	887a      	ldrh	r2, [r7, #2]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80058c4:	e003      	b.n	80058ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80058c6:	887b      	ldrh	r3, [r7, #2]
 80058c8:	041a      	lsls	r2, r3, #16
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	619a      	str	r2, [r3, #24]
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	460b      	mov	r3, r1
 80058e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058ec:	887a      	ldrh	r2, [r7, #2]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4013      	ands	r3, r2
 80058f2:	041a      	lsls	r2, r3, #16
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	43d9      	mvns	r1, r3
 80058f8:	887b      	ldrh	r3, [r7, #2]
 80058fa:	400b      	ands	r3, r1
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	619a      	str	r2, [r3, #24]
}
 8005902:	bf00      	nop
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
	...

08005910 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800591a:	4b08      	ldr	r3, [pc, #32]	; (800593c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800591c:	695a      	ldr	r2, [r3, #20]
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	4013      	ands	r3, r2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d006      	beq.n	8005934 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005926:	4a05      	ldr	r2, [pc, #20]	; (800593c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe fa30 	bl	8003d94 <HAL_GPIO_EXTI_Callback>
  }
}
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40013c00 	.word	0x40013c00

08005940 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e041      	b.n	80059d6 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800595a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f245 5255 	movw	r2, #21845	; 0x5555
 8005964:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6852      	ldr	r2, [r2, #4]
 800596e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6892      	ldr	r2, [r2, #8]
 8005978:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800597a:	f7ff f8cf 	bl	8004b1c <HAL_GetTick>
 800597e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005980:	e00f      	b.n	80059a2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005982:	f7ff f8cb 	bl	8004b1c <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b31      	cmp	r3, #49	; 0x31
 800598e:	d908      	bls.n	80059a2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e019      	b.n	80059d6 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e8      	bne.n	8005982 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	691a      	ldr	r2, [r3, #16]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d005      	beq.n	80059ca <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	68d2      	ldr	r2, [r2, #12]
 80059c6:	611a      	str	r2, [r3, #16]
 80059c8:	e004      	b.n	80059d4 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80059d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80059ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
	...

08005a00 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a04:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a04      	ldr	r2, [pc, #16]	; (8005a1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a0e:	6013      	str	r3, [r2, #0]
}
 8005a10:	bf00      	nop
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40007000 	.word	0x40007000

08005a20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e291      	b.n	8005f5a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 8087 	beq.w	8005b52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a44:	4b96      	ldr	r3, [pc, #600]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 030c 	and.w	r3, r3, #12
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d00c      	beq.n	8005a6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a50:	4b93      	ldr	r3, [pc, #588]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 030c 	and.w	r3, r3, #12
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d112      	bne.n	8005a82 <HAL_RCC_OscConfig+0x62>
 8005a5c:	4b90      	ldr	r3, [pc, #576]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a68:	d10b      	bne.n	8005a82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a6a:	4b8d      	ldr	r3, [pc, #564]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d06c      	beq.n	8005b50 <HAL_RCC_OscConfig+0x130>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d168      	bne.n	8005b50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e26b      	b.n	8005f5a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a8a:	d106      	bne.n	8005a9a <HAL_RCC_OscConfig+0x7a>
 8005a8c:	4b84      	ldr	r3, [pc, #528]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a83      	ldr	r2, [pc, #524]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	e02e      	b.n	8005af8 <HAL_RCC_OscConfig+0xd8>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10c      	bne.n	8005abc <HAL_RCC_OscConfig+0x9c>
 8005aa2:	4b7f      	ldr	r3, [pc, #508]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a7e      	ldr	r2, [pc, #504]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	4b7c      	ldr	r3, [pc, #496]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a7b      	ldr	r2, [pc, #492]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	e01d      	b.n	8005af8 <HAL_RCC_OscConfig+0xd8>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ac4:	d10c      	bne.n	8005ae0 <HAL_RCC_OscConfig+0xc0>
 8005ac6:	4b76      	ldr	r3, [pc, #472]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a75      	ldr	r2, [pc, #468]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	4b73      	ldr	r3, [pc, #460]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a72      	ldr	r2, [pc, #456]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	e00b      	b.n	8005af8 <HAL_RCC_OscConfig+0xd8>
 8005ae0:	4b6f      	ldr	r3, [pc, #444]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a6e      	ldr	r2, [pc, #440]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	4b6c      	ldr	r3, [pc, #432]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a6b      	ldr	r2, [pc, #428]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d013      	beq.n	8005b28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b00:	f7ff f80c 	bl	8004b1c <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b08:	f7ff f808 	bl	8004b1c <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b64      	cmp	r3, #100	; 0x64
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e21f      	b.n	8005f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b1a:	4b61      	ldr	r3, [pc, #388]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0xe8>
 8005b26:	e014      	b.n	8005b52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b28:	f7fe fff8 	bl	8004b1c <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b30:	f7fe fff4 	bl	8004b1c <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b64      	cmp	r3, #100	; 0x64
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e20b      	b.n	8005f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b42:	4b57      	ldr	r3, [pc, #348]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1f0      	bne.n	8005b30 <HAL_RCC_OscConfig+0x110>
 8005b4e:	e000      	b.n	8005b52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d069      	beq.n	8005c32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b5e:	4b50      	ldr	r3, [pc, #320]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 030c 	and.w	r3, r3, #12
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00b      	beq.n	8005b82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b6a:	4b4d      	ldr	r3, [pc, #308]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 030c 	and.w	r3, r3, #12
 8005b72:	2b08      	cmp	r3, #8
 8005b74:	d11c      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x190>
 8005b76:	4b4a      	ldr	r3, [pc, #296]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d116      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b82:	4b47      	ldr	r3, [pc, #284]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <HAL_RCC_OscConfig+0x17a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d001      	beq.n	8005b9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e1df      	b.n	8005f5a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b9a:	4b41      	ldr	r3, [pc, #260]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	493d      	ldr	r1, [pc, #244]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bae:	e040      	b.n	8005c32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d023      	beq.n	8005c00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bb8:	4b39      	ldr	r3, [pc, #228]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a38      	ldr	r2, [pc, #224]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc4:	f7fe ffaa 	bl	8004b1c <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bcc:	f7fe ffa6 	bl	8004b1c <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e1bd      	b.n	8005f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bde:	4b30      	ldr	r3, [pc, #192]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0f0      	beq.n	8005bcc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bea:	4b2d      	ldr	r3, [pc, #180]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4929      	ldr	r1, [pc, #164]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	600b      	str	r3, [r1, #0]
 8005bfe:	e018      	b.n	8005c32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c00:	4b27      	ldr	r3, [pc, #156]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a26      	ldr	r2, [pc, #152]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005c06:	f023 0301 	bic.w	r3, r3, #1
 8005c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0c:	f7fe ff86 	bl	8004b1c <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c14:	f7fe ff82 	bl	8004b1c <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e199      	b.n	8005f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c26:	4b1e      	ldr	r3, [pc, #120]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f0      	bne.n	8005c14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d038      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d019      	beq.n	8005c7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c46:	4b16      	ldr	r3, [pc, #88]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c4a:	4a15      	ldr	r2, [pc, #84]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005c4c:	f043 0301 	orr.w	r3, r3, #1
 8005c50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c52:	f7fe ff63 	bl	8004b1c <HAL_GetTick>
 8005c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c58:	e008      	b.n	8005c6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c5a:	f7fe ff5f 	bl	8004b1c <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e176      	b.n	8005f5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0f0      	beq.n	8005c5a <HAL_RCC_OscConfig+0x23a>
 8005c78:	e01a      	b.n	8005cb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c7a:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c7e:	4a08      	ldr	r2, [pc, #32]	; (8005ca0 <HAL_RCC_OscConfig+0x280>)
 8005c80:	f023 0301 	bic.w	r3, r3, #1
 8005c84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c86:	f7fe ff49 	bl	8004b1c <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c8c:	e00a      	b.n	8005ca4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c8e:	f7fe ff45 	bl	8004b1c <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d903      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e15c      	b.n	8005f5a <HAL_RCC_OscConfig+0x53a>
 8005ca0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ca4:	4b91      	ldr	r3, [pc, #580]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1ee      	bne.n	8005c8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 80a4 	beq.w	8005e06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cbe:	4b8b      	ldr	r3, [pc, #556]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10d      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cca:	4b88      	ldr	r3, [pc, #544]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	4a87      	ldr	r2, [pc, #540]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cd6:	4b85      	ldr	r3, [pc, #532]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cde:	60bb      	str	r3, [r7, #8]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ce6:	4b82      	ldr	r3, [pc, #520]	; (8005ef0 <HAL_RCC_OscConfig+0x4d0>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d118      	bne.n	8005d24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005cf2:	4b7f      	ldr	r3, [pc, #508]	; (8005ef0 <HAL_RCC_OscConfig+0x4d0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a7e      	ldr	r2, [pc, #504]	; (8005ef0 <HAL_RCC_OscConfig+0x4d0>)
 8005cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cfe:	f7fe ff0d 	bl	8004b1c <HAL_GetTick>
 8005d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d04:	e008      	b.n	8005d18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d06:	f7fe ff09 	bl	8004b1c <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b64      	cmp	r3, #100	; 0x64
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e120      	b.n	8005f5a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d18:	4b75      	ldr	r3, [pc, #468]	; (8005ef0 <HAL_RCC_OscConfig+0x4d0>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0f0      	beq.n	8005d06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d106      	bne.n	8005d3a <HAL_RCC_OscConfig+0x31a>
 8005d2c:	4b6f      	ldr	r3, [pc, #444]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d30:	4a6e      	ldr	r2, [pc, #440]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	6713      	str	r3, [r2, #112]	; 0x70
 8005d38:	e02d      	b.n	8005d96 <HAL_RCC_OscConfig+0x376>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10c      	bne.n	8005d5c <HAL_RCC_OscConfig+0x33c>
 8005d42:	4b6a      	ldr	r3, [pc, #424]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d46:	4a69      	ldr	r2, [pc, #420]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005d48:	f023 0301 	bic.w	r3, r3, #1
 8005d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d4e:	4b67      	ldr	r3, [pc, #412]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d52:	4a66      	ldr	r2, [pc, #408]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005d54:	f023 0304 	bic.w	r3, r3, #4
 8005d58:	6713      	str	r3, [r2, #112]	; 0x70
 8005d5a:	e01c      	b.n	8005d96 <HAL_RCC_OscConfig+0x376>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b05      	cmp	r3, #5
 8005d62:	d10c      	bne.n	8005d7e <HAL_RCC_OscConfig+0x35e>
 8005d64:	4b61      	ldr	r3, [pc, #388]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d68:	4a60      	ldr	r2, [pc, #384]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005d6a:	f043 0304 	orr.w	r3, r3, #4
 8005d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d70:	4b5e      	ldr	r3, [pc, #376]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d74:	4a5d      	ldr	r2, [pc, #372]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005d76:	f043 0301 	orr.w	r3, r3, #1
 8005d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d7c:	e00b      	b.n	8005d96 <HAL_RCC_OscConfig+0x376>
 8005d7e:	4b5b      	ldr	r3, [pc, #364]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d82:	4a5a      	ldr	r2, [pc, #360]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005d84:	f023 0301 	bic.w	r3, r3, #1
 8005d88:	6713      	str	r3, [r2, #112]	; 0x70
 8005d8a:	4b58      	ldr	r3, [pc, #352]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8e:	4a57      	ldr	r2, [pc, #348]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005d90:	f023 0304 	bic.w	r3, r3, #4
 8005d94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d015      	beq.n	8005dca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d9e:	f7fe febd 	bl	8004b1c <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da4:	e00a      	b.n	8005dbc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da6:	f7fe feb9 	bl	8004b1c <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e0ce      	b.n	8005f5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dbc:	4b4b      	ldr	r3, [pc, #300]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d0ee      	beq.n	8005da6 <HAL_RCC_OscConfig+0x386>
 8005dc8:	e014      	b.n	8005df4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dca:	f7fe fea7 	bl	8004b1c <HAL_GetTick>
 8005dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dd0:	e00a      	b.n	8005de8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dd2:	f7fe fea3 	bl	8004b1c <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d901      	bls.n	8005de8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e0b8      	b.n	8005f5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005de8:	4b40      	ldr	r3, [pc, #256]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1ee      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005df4:	7dfb      	ldrb	r3, [r7, #23]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d105      	bne.n	8005e06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dfa:	4b3c      	ldr	r3, [pc, #240]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	4a3b      	ldr	r2, [pc, #236]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 80a4 	beq.w	8005f58 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e10:	4b36      	ldr	r3, [pc, #216]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f003 030c 	and.w	r3, r3, #12
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d06b      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d149      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e24:	4b31      	ldr	r3, [pc, #196]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a30      	ldr	r2, [pc, #192]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e30:	f7fe fe74 	bl	8004b1c <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e38:	f7fe fe70 	bl	8004b1c <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e087      	b.n	8005f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e4a:	4b28      	ldr	r3, [pc, #160]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f0      	bne.n	8005e38 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	69da      	ldr	r2, [r3, #28]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	019b      	lsls	r3, r3, #6
 8005e66:	431a      	orrs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	041b      	lsls	r3, r3, #16
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e78:	061b      	lsls	r3, r3, #24
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	4a1b      	ldr	r2, [pc, #108]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005e7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e82:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e84:	4b19      	ldr	r3, [pc, #100]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a18      	ldr	r2, [pc, #96]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e90:	f7fe fe44 	bl	8004b1c <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e98:	f7fe fe40 	bl	8004b1c <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e057      	b.n	8005f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eaa:	4b10      	ldr	r3, [pc, #64]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0x478>
 8005eb6:	e04f      	b.n	8005f58 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb8:	4b0c      	ldr	r3, [pc, #48]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a0b      	ldr	r2, [pc, #44]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec4:	f7fe fe2a 	bl	8004b1c <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ecc:	f7fe fe26 	bl	8004b1c <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e03d      	b.n	8005f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ede:	4b03      	ldr	r3, [pc, #12]	; (8005eec <HAL_RCC_OscConfig+0x4cc>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1f0      	bne.n	8005ecc <HAL_RCC_OscConfig+0x4ac>
 8005eea:	e035      	b.n	8005f58 <HAL_RCC_OscConfig+0x538>
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005ef4:	4b1b      	ldr	r3, [pc, #108]	; (8005f64 <HAL_RCC_OscConfig+0x544>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d028      	beq.n	8005f54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d121      	bne.n	8005f54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d11a      	bne.n	8005f54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f24:	4013      	ands	r3, r2
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d111      	bne.n	8005f54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	085b      	lsrs	r3, r3, #1
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d107      	bne.n	8005f54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d001      	beq.n	8005f58 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e000      	b.n	8005f5a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	40023800 	.word	0x40023800

08005f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0d0      	b.n	8006122 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f80:	4b6a      	ldr	r3, [pc, #424]	; (800612c <HAL_RCC_ClockConfig+0x1c4>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d910      	bls.n	8005fb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8e:	4b67      	ldr	r3, [pc, #412]	; (800612c <HAL_RCC_ClockConfig+0x1c4>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f023 020f 	bic.w	r2, r3, #15
 8005f96:	4965      	ldr	r1, [pc, #404]	; (800612c <HAL_RCC_ClockConfig+0x1c4>)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9e:	4b63      	ldr	r3, [pc, #396]	; (800612c <HAL_RCC_ClockConfig+0x1c4>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d001      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0b8      	b.n	8006122 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d020      	beq.n	8005ffe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0304 	and.w	r3, r3, #4
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fc8:	4b59      	ldr	r3, [pc, #356]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	4a58      	ldr	r2, [pc, #352]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 8005fce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d005      	beq.n	8005fec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fe0:	4b53      	ldr	r3, [pc, #332]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	4a52      	ldr	r2, [pc, #328]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 8005fe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005fea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fec:	4b50      	ldr	r3, [pc, #320]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	494d      	ldr	r1, [pc, #308]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d040      	beq.n	800608c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d107      	bne.n	8006022 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006012:	4b47      	ldr	r3, [pc, #284]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d115      	bne.n	800604a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e07f      	b.n	8006122 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2b02      	cmp	r3, #2
 8006028:	d107      	bne.n	800603a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800602a:	4b41      	ldr	r3, [pc, #260]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d109      	bne.n	800604a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e073      	b.n	8006122 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800603a:	4b3d      	ldr	r3, [pc, #244]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e06b      	b.n	8006122 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800604a:	4b39      	ldr	r3, [pc, #228]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f023 0203 	bic.w	r2, r3, #3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4936      	ldr	r1, [pc, #216]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 8006058:	4313      	orrs	r3, r2
 800605a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800605c:	f7fe fd5e 	bl	8004b1c <HAL_GetTick>
 8006060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006062:	e00a      	b.n	800607a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006064:	f7fe fd5a 	bl	8004b1c <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006072:	4293      	cmp	r3, r2
 8006074:	d901      	bls.n	800607a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e053      	b.n	8006122 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800607a:	4b2d      	ldr	r3, [pc, #180]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 020c 	and.w	r2, r3, #12
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	429a      	cmp	r2, r3
 800608a:	d1eb      	bne.n	8006064 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800608c:	4b27      	ldr	r3, [pc, #156]	; (800612c <HAL_RCC_ClockConfig+0x1c4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 030f 	and.w	r3, r3, #15
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d210      	bcs.n	80060bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800609a:	4b24      	ldr	r3, [pc, #144]	; (800612c <HAL_RCC_ClockConfig+0x1c4>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f023 020f 	bic.w	r2, r3, #15
 80060a2:	4922      	ldr	r1, [pc, #136]	; (800612c <HAL_RCC_ClockConfig+0x1c4>)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060aa:	4b20      	ldr	r3, [pc, #128]	; (800612c <HAL_RCC_ClockConfig+0x1c4>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d001      	beq.n	80060bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e032      	b.n	8006122 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d008      	beq.n	80060da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060c8:	4b19      	ldr	r3, [pc, #100]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	4916      	ldr	r1, [pc, #88]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d009      	beq.n	80060fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060e6:	4b12      	ldr	r3, [pc, #72]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	490e      	ldr	r1, [pc, #56]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060fa:	f000 f821 	bl	8006140 <HAL_RCC_GetSysClockFreq>
 80060fe:	4602      	mov	r2, r0
 8006100:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <HAL_RCC_ClockConfig+0x1c8>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	091b      	lsrs	r3, r3, #4
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	490a      	ldr	r1, [pc, #40]	; (8006134 <HAL_RCC_ClockConfig+0x1cc>)
 800610c:	5ccb      	ldrb	r3, [r1, r3]
 800610e:	fa22 f303 	lsr.w	r3, r2, r3
 8006112:	4a09      	ldr	r2, [pc, #36]	; (8006138 <HAL_RCC_ClockConfig+0x1d0>)
 8006114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006116:	4b09      	ldr	r3, [pc, #36]	; (800613c <HAL_RCC_ClockConfig+0x1d4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f7fe fcba 	bl	8004a94 <HAL_InitTick>

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	40023c00 	.word	0x40023c00
 8006130:	40023800 	.word	0x40023800
 8006134:	080097d4 	.word	0x080097d4
 8006138:	200000bc 	.word	0x200000bc
 800613c:	200000c0 	.word	0x200000c0

08006140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006144:	b094      	sub	sp, #80	; 0x50
 8006146:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	647b      	str	r3, [r7, #68]	; 0x44
 800614c:	2300      	movs	r3, #0
 800614e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006150:	2300      	movs	r3, #0
 8006152:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006158:	4b79      	ldr	r3, [pc, #484]	; (8006340 <HAL_RCC_GetSysClockFreq+0x200>)
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f003 030c 	and.w	r3, r3, #12
 8006160:	2b08      	cmp	r3, #8
 8006162:	d00d      	beq.n	8006180 <HAL_RCC_GetSysClockFreq+0x40>
 8006164:	2b08      	cmp	r3, #8
 8006166:	f200 80e1 	bhi.w	800632c <HAL_RCC_GetSysClockFreq+0x1ec>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_RCC_GetSysClockFreq+0x34>
 800616e:	2b04      	cmp	r3, #4
 8006170:	d003      	beq.n	800617a <HAL_RCC_GetSysClockFreq+0x3a>
 8006172:	e0db      	b.n	800632c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006174:	4b73      	ldr	r3, [pc, #460]	; (8006344 <HAL_RCC_GetSysClockFreq+0x204>)
 8006176:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006178:	e0db      	b.n	8006332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800617a:	4b73      	ldr	r3, [pc, #460]	; (8006348 <HAL_RCC_GetSysClockFreq+0x208>)
 800617c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800617e:	e0d8      	b.n	8006332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006180:	4b6f      	ldr	r3, [pc, #444]	; (8006340 <HAL_RCC_GetSysClockFreq+0x200>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006188:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800618a:	4b6d      	ldr	r3, [pc, #436]	; (8006340 <HAL_RCC_GetSysClockFreq+0x200>)
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d063      	beq.n	800625e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006196:	4b6a      	ldr	r3, [pc, #424]	; (8006340 <HAL_RCC_GetSysClockFreq+0x200>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	099b      	lsrs	r3, r3, #6
 800619c:	2200      	movs	r2, #0
 800619e:	63bb      	str	r3, [r7, #56]	; 0x38
 80061a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a8:	633b      	str	r3, [r7, #48]	; 0x30
 80061aa:	2300      	movs	r3, #0
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
 80061ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80061b2:	4622      	mov	r2, r4
 80061b4:	462b      	mov	r3, r5
 80061b6:	f04f 0000 	mov.w	r0, #0
 80061ba:	f04f 0100 	mov.w	r1, #0
 80061be:	0159      	lsls	r1, r3, #5
 80061c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061c4:	0150      	lsls	r0, r2, #5
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	4621      	mov	r1, r4
 80061cc:	1a51      	subs	r1, r2, r1
 80061ce:	6139      	str	r1, [r7, #16]
 80061d0:	4629      	mov	r1, r5
 80061d2:	eb63 0301 	sbc.w	r3, r3, r1
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061e4:	4659      	mov	r1, fp
 80061e6:	018b      	lsls	r3, r1, #6
 80061e8:	4651      	mov	r1, sl
 80061ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061ee:	4651      	mov	r1, sl
 80061f0:	018a      	lsls	r2, r1, #6
 80061f2:	4651      	mov	r1, sl
 80061f4:	ebb2 0801 	subs.w	r8, r2, r1
 80061f8:	4659      	mov	r1, fp
 80061fa:	eb63 0901 	sbc.w	r9, r3, r1
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800620a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800620e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006212:	4690      	mov	r8, r2
 8006214:	4699      	mov	r9, r3
 8006216:	4623      	mov	r3, r4
 8006218:	eb18 0303 	adds.w	r3, r8, r3
 800621c:	60bb      	str	r3, [r7, #8]
 800621e:	462b      	mov	r3, r5
 8006220:	eb49 0303 	adc.w	r3, r9, r3
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006232:	4629      	mov	r1, r5
 8006234:	024b      	lsls	r3, r1, #9
 8006236:	4621      	mov	r1, r4
 8006238:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800623c:	4621      	mov	r1, r4
 800623e:	024a      	lsls	r2, r1, #9
 8006240:	4610      	mov	r0, r2
 8006242:	4619      	mov	r1, r3
 8006244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006246:	2200      	movs	r2, #0
 8006248:	62bb      	str	r3, [r7, #40]	; 0x28
 800624a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800624c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006250:	f7f9 ffda 	bl	8000208 <__aeabi_uldivmod>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4613      	mov	r3, r2
 800625a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800625c:	e058      	b.n	8006310 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800625e:	4b38      	ldr	r3, [pc, #224]	; (8006340 <HAL_RCC_GetSysClockFreq+0x200>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	099b      	lsrs	r3, r3, #6
 8006264:	2200      	movs	r2, #0
 8006266:	4618      	mov	r0, r3
 8006268:	4611      	mov	r1, r2
 800626a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800626e:	623b      	str	r3, [r7, #32]
 8006270:	2300      	movs	r3, #0
 8006272:	627b      	str	r3, [r7, #36]	; 0x24
 8006274:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006278:	4642      	mov	r2, r8
 800627a:	464b      	mov	r3, r9
 800627c:	f04f 0000 	mov.w	r0, #0
 8006280:	f04f 0100 	mov.w	r1, #0
 8006284:	0159      	lsls	r1, r3, #5
 8006286:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800628a:	0150      	lsls	r0, r2, #5
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4641      	mov	r1, r8
 8006292:	ebb2 0a01 	subs.w	sl, r2, r1
 8006296:	4649      	mov	r1, r9
 8006298:	eb63 0b01 	sbc.w	fp, r3, r1
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062b0:	ebb2 040a 	subs.w	r4, r2, sl
 80062b4:	eb63 050b 	sbc.w	r5, r3, fp
 80062b8:	f04f 0200 	mov.w	r2, #0
 80062bc:	f04f 0300 	mov.w	r3, #0
 80062c0:	00eb      	lsls	r3, r5, #3
 80062c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062c6:	00e2      	lsls	r2, r4, #3
 80062c8:	4614      	mov	r4, r2
 80062ca:	461d      	mov	r5, r3
 80062cc:	4643      	mov	r3, r8
 80062ce:	18e3      	adds	r3, r4, r3
 80062d0:	603b      	str	r3, [r7, #0]
 80062d2:	464b      	mov	r3, r9
 80062d4:	eb45 0303 	adc.w	r3, r5, r3
 80062d8:	607b      	str	r3, [r7, #4]
 80062da:	f04f 0200 	mov.w	r2, #0
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062e6:	4629      	mov	r1, r5
 80062e8:	028b      	lsls	r3, r1, #10
 80062ea:	4621      	mov	r1, r4
 80062ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062f0:	4621      	mov	r1, r4
 80062f2:	028a      	lsls	r2, r1, #10
 80062f4:	4610      	mov	r0, r2
 80062f6:	4619      	mov	r1, r3
 80062f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062fa:	2200      	movs	r2, #0
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	61fa      	str	r2, [r7, #28]
 8006300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006304:	f7f9 ff80 	bl	8000208 <__aeabi_uldivmod>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	4613      	mov	r3, r2
 800630e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006310:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <HAL_RCC_GetSysClockFreq+0x200>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	0c1b      	lsrs	r3, r3, #16
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	3301      	adds	r3, #1
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006320:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006324:	fbb2 f3f3 	udiv	r3, r2, r3
 8006328:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800632a:	e002      	b.n	8006332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800632c:	4b05      	ldr	r3, [pc, #20]	; (8006344 <HAL_RCC_GetSysClockFreq+0x204>)
 800632e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006334:	4618      	mov	r0, r3
 8006336:	3750      	adds	r7, #80	; 0x50
 8006338:	46bd      	mov	sp, r7
 800633a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800633e:	bf00      	nop
 8006340:	40023800 	.word	0x40023800
 8006344:	00f42400 	.word	0x00f42400
 8006348:	007a1200 	.word	0x007a1200

0800634c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006350:	4b03      	ldr	r3, [pc, #12]	; (8006360 <HAL_RCC_GetHCLKFreq+0x14>)
 8006352:	681b      	ldr	r3, [r3, #0]
}
 8006354:	4618      	mov	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	200000bc 	.word	0x200000bc

08006364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006368:	f7ff fff0 	bl	800634c <HAL_RCC_GetHCLKFreq>
 800636c:	4602      	mov	r2, r0
 800636e:	4b05      	ldr	r3, [pc, #20]	; (8006384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	0a9b      	lsrs	r3, r3, #10
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	4903      	ldr	r1, [pc, #12]	; (8006388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800637a:	5ccb      	ldrb	r3, [r1, r3]
 800637c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006380:	4618      	mov	r0, r3
 8006382:	bd80      	pop	{r7, pc}
 8006384:	40023800 	.word	0x40023800
 8006388:	080097e4 	.word	0x080097e4

0800638c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006390:	f7ff ffdc 	bl	800634c <HAL_RCC_GetHCLKFreq>
 8006394:	4602      	mov	r2, r0
 8006396:	4b05      	ldr	r3, [pc, #20]	; (80063ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	0b5b      	lsrs	r3, r3, #13
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	4903      	ldr	r1, [pc, #12]	; (80063b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063a2:	5ccb      	ldrb	r3, [r1, r3]
 80063a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	40023800 	.word	0x40023800
 80063b0:	080097e4 	.word	0x080097e4

080063b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d012      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063dc:	4b69      	ldr	r3, [pc, #420]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	4a68      	ldr	r2, [pc, #416]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80063e6:	6093      	str	r3, [r2, #8]
 80063e8:	4b66      	ldr	r3, [pc, #408]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f0:	4964      	ldr	r1, [pc, #400]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80063fe:	2301      	movs	r3, #1
 8006400:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d017      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800640e:	4b5d      	ldr	r3, [pc, #372]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006414:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641c:	4959      	ldr	r1, [pc, #356]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800641e:	4313      	orrs	r3, r2
 8006420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800642c:	d101      	bne.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800642e:	2301      	movs	r3, #1
 8006430:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800643a:	2301      	movs	r3, #1
 800643c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d017      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800644a:	4b4e      	ldr	r3, [pc, #312]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800644c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006450:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006458:	494a      	ldr	r1, [pc, #296]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800645a:	4313      	orrs	r3, r2
 800645c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006468:	d101      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800646a:	2301      	movs	r3, #1
 800646c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006476:	2301      	movs	r3, #1
 8006478:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006486:	2301      	movs	r3, #1
 8006488:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 808b 	beq.w	80065ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006498:	4b3a      	ldr	r3, [pc, #232]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	4a39      	ldr	r2, [pc, #228]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800649e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a2:	6413      	str	r3, [r2, #64]	; 0x40
 80064a4:	4b37      	ldr	r3, [pc, #220]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ac:	60bb      	str	r3, [r7, #8]
 80064ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064b0:	4b35      	ldr	r3, [pc, #212]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a34      	ldr	r2, [pc, #208]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064bc:	f7fe fb2e 	bl	8004b1c <HAL_GetTick>
 80064c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064c4:	f7fe fb2a 	bl	8004b1c <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b64      	cmp	r3, #100	; 0x64
 80064d0:	d901      	bls.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e357      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064d6:	4b2c      	ldr	r3, [pc, #176]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0f0      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064e2:	4b28      	ldr	r3, [pc, #160]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d035      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d02e      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006500:	4b20      	ldr	r3, [pc, #128]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006508:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800650a:	4b1e      	ldr	r3, [pc, #120]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800650c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650e:	4a1d      	ldr	r2, [pc, #116]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006514:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006516:	4b1b      	ldr	r3, [pc, #108]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651a:	4a1a      	ldr	r2, [pc, #104]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800651c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006520:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006522:	4a18      	ldr	r2, [pc, #96]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006528:	4b16      	ldr	r3, [pc, #88]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800652a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b01      	cmp	r3, #1
 8006532:	d114      	bne.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006534:	f7fe faf2 	bl	8004b1c <HAL_GetTick>
 8006538:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800653a:	e00a      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800653c:	f7fe faee 	bl	8004b1c <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	f241 3288 	movw	r2, #5000	; 0x1388
 800654a:	4293      	cmp	r3, r2
 800654c:	d901      	bls.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e319      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006552:	4b0c      	ldr	r3, [pc, #48]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0ee      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800656a:	d111      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800656c:	4b05      	ldr	r3, [pc, #20]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006578:	4b04      	ldr	r3, [pc, #16]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800657a:	400b      	ands	r3, r1
 800657c:	4901      	ldr	r1, [pc, #4]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800657e:	4313      	orrs	r3, r2
 8006580:	608b      	str	r3, [r1, #8]
 8006582:	e00b      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006584:	40023800 	.word	0x40023800
 8006588:	40007000 	.word	0x40007000
 800658c:	0ffffcff 	.word	0x0ffffcff
 8006590:	4baa      	ldr	r3, [pc, #680]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	4aa9      	ldr	r2, [pc, #676]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006596:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800659a:	6093      	str	r3, [r2, #8]
 800659c:	4ba7      	ldr	r3, [pc, #668]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800659e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065a8:	49a4      	ldr	r1, [pc, #656]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0310 	and.w	r3, r3, #16
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d010      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065ba:	4ba0      	ldr	r3, [pc, #640]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065c0:	4a9e      	ldr	r2, [pc, #632]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065ca:	4b9c      	ldr	r3, [pc, #624]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	4999      	ldr	r1, [pc, #612]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00a      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065e8:	4b94      	ldr	r3, [pc, #592]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f6:	4991      	ldr	r1, [pc, #580]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800660a:	4b8c      	ldr	r3, [pc, #560]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800660c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006610:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006618:	4988      	ldr	r1, [pc, #544]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800661a:	4313      	orrs	r3, r2
 800661c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00a      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800662c:	4b83      	ldr	r3, [pc, #524]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800662e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006632:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800663a:	4980      	ldr	r1, [pc, #512]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800663c:	4313      	orrs	r3, r2
 800663e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800664e:	4b7b      	ldr	r3, [pc, #492]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006654:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665c:	4977      	ldr	r1, [pc, #476]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800665e:	4313      	orrs	r3, r2
 8006660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00a      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006670:	4b72      	ldr	r3, [pc, #456]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006676:	f023 0203 	bic.w	r2, r3, #3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667e:	496f      	ldr	r1, [pc, #444]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006680:	4313      	orrs	r3, r2
 8006682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006692:	4b6a      	ldr	r3, [pc, #424]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006698:	f023 020c 	bic.w	r2, r3, #12
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a0:	4966      	ldr	r1, [pc, #408]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00a      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066b4:	4b61      	ldr	r3, [pc, #388]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c2:	495e      	ldr	r1, [pc, #376]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00a      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066d6:	4b59      	ldr	r3, [pc, #356]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e4:	4955      	ldr	r1, [pc, #340]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00a      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066f8:	4b50      	ldr	r3, [pc, #320]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	494d      	ldr	r1, [pc, #308]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006708:	4313      	orrs	r3, r2
 800670a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800671a:	4b48      	ldr	r3, [pc, #288]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800671c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006720:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006728:	4944      	ldr	r1, [pc, #272]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800672a:	4313      	orrs	r3, r2
 800672c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800673c:	4b3f      	ldr	r3, [pc, #252]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800673e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006742:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674a:	493c      	ldr	r1, [pc, #240]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800674c:	4313      	orrs	r3, r2
 800674e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800675e:	4b37      	ldr	r3, [pc, #220]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006764:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676c:	4933      	ldr	r1, [pc, #204]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006780:	4b2e      	ldr	r3, [pc, #184]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006786:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800678e:	492b      	ldr	r1, [pc, #172]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006790:	4313      	orrs	r3, r2
 8006792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d011      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80067a2:	4b26      	ldr	r3, [pc, #152]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067b0:	4922      	ldr	r1, [pc, #136]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067c0:	d101      	bne.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80067c2:	2301      	movs	r3, #1
 80067c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80067d2:	2301      	movs	r3, #1
 80067d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00a      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067e2:	4b16      	ldr	r3, [pc, #88]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f0:	4912      	ldr	r1, [pc, #72]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00b      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006804:	4b0d      	ldr	r3, [pc, #52]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006814:	4909      	ldr	r1, [pc, #36]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d006      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 80d9 	beq.w	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006830:	4b02      	ldr	r3, [pc, #8]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a01      	ldr	r2, [pc, #4]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006836:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800683a:	e001      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800683c:	40023800 	.word	0x40023800
 8006840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006842:	f7fe f96b 	bl	8004b1c <HAL_GetTick>
 8006846:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006848:	e008      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800684a:	f7fe f967 	bl	8004b1c <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b64      	cmp	r3, #100	; 0x64
 8006856:	d901      	bls.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e194      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800685c:	4b6c      	ldr	r3, [pc, #432]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1f0      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d021      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006878:	2b00      	cmp	r3, #0
 800687a:	d11d      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800687c:	4b64      	ldr	r3, [pc, #400]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800687e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006882:	0c1b      	lsrs	r3, r3, #16
 8006884:	f003 0303 	and.w	r3, r3, #3
 8006888:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800688a:	4b61      	ldr	r3, [pc, #388]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800688c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006890:	0e1b      	lsrs	r3, r3, #24
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	019a      	lsls	r2, r3, #6
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	041b      	lsls	r3, r3, #16
 80068a2:	431a      	orrs	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	061b      	lsls	r3, r3, #24
 80068a8:	431a      	orrs	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	071b      	lsls	r3, r3, #28
 80068b0:	4957      	ldr	r1, [pc, #348]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d004      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068cc:	d00a      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d02e      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068e2:	d129      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80068e4:	4b4a      	ldr	r3, [pc, #296]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ea:	0c1b      	lsrs	r3, r3, #16
 80068ec:	f003 0303 	and.w	r3, r3, #3
 80068f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80068f2:	4b47      	ldr	r3, [pc, #284]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068f8:	0f1b      	lsrs	r3, r3, #28
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	019a      	lsls	r2, r3, #6
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	041b      	lsls	r3, r3, #16
 800690a:	431a      	orrs	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	061b      	lsls	r3, r3, #24
 8006912:	431a      	orrs	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	071b      	lsls	r3, r3, #28
 8006918:	493d      	ldr	r1, [pc, #244]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800691a:	4313      	orrs	r3, r2
 800691c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006920:	4b3b      	ldr	r3, [pc, #236]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006926:	f023 021f 	bic.w	r2, r3, #31
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	3b01      	subs	r3, #1
 8006930:	4937      	ldr	r1, [pc, #220]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01d      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006944:	4b32      	ldr	r3, [pc, #200]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800694a:	0e1b      	lsrs	r3, r3, #24
 800694c:	f003 030f 	and.w	r3, r3, #15
 8006950:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006952:	4b2f      	ldr	r3, [pc, #188]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006958:	0f1b      	lsrs	r3, r3, #28
 800695a:	f003 0307 	and.w	r3, r3, #7
 800695e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	019a      	lsls	r2, r3, #6
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	041b      	lsls	r3, r3, #16
 800696c:	431a      	orrs	r2, r3
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	061b      	lsls	r3, r3, #24
 8006972:	431a      	orrs	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	071b      	lsls	r3, r3, #28
 8006978:	4925      	ldr	r1, [pc, #148]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800697a:	4313      	orrs	r3, r2
 800697c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d011      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	019a      	lsls	r2, r3, #6
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	041b      	lsls	r3, r3, #16
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	061b      	lsls	r3, r3, #24
 80069a0:	431a      	orrs	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	071b      	lsls	r3, r3, #28
 80069a8:	4919      	ldr	r1, [pc, #100]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069b0:	4b17      	ldr	r3, [pc, #92]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a16      	ldr	r2, [pc, #88]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069bc:	f7fe f8ae 	bl	8004b1c <HAL_GetTick>
 80069c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069c2:	e008      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069c4:	f7fe f8aa 	bl	8004b1c <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b64      	cmp	r3, #100	; 0x64
 80069d0:	d901      	bls.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e0d7      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069d6:	4b0e      	ldr	r3, [pc, #56]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0f0      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	f040 80cd 	bne.w	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80069ea:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a08      	ldr	r2, [pc, #32]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069f6:	f7fe f891 	bl	8004b1c <HAL_GetTick>
 80069fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80069fc:	e00a      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80069fe:	f7fe f88d 	bl	8004b1c <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	2b64      	cmp	r3, #100	; 0x64
 8006a0a:	d903      	bls.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e0ba      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006a10:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a14:	4b5e      	ldr	r3, [pc, #376]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a20:	d0ed      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d009      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d02e      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d12a      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006a4a:	4b51      	ldr	r3, [pc, #324]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a50:	0c1b      	lsrs	r3, r3, #16
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006a58:	4b4d      	ldr	r3, [pc, #308]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5e:	0f1b      	lsrs	r3, r3, #28
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	019a      	lsls	r2, r3, #6
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	041b      	lsls	r3, r3, #16
 8006a70:	431a      	orrs	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	061b      	lsls	r3, r3, #24
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	071b      	lsls	r3, r3, #28
 8006a7e:	4944      	ldr	r1, [pc, #272]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006a86:	4b42      	ldr	r3, [pc, #264]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a94:	3b01      	subs	r3, #1
 8006a96:	021b      	lsls	r3, r3, #8
 8006a98:	493d      	ldr	r1, [pc, #244]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d022      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ab4:	d11d      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ab6:	4b36      	ldr	r3, [pc, #216]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006abc:	0e1b      	lsrs	r3, r3, #24
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ac4:	4b32      	ldr	r3, [pc, #200]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aca:	0f1b      	lsrs	r3, r3, #28
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	019a      	lsls	r2, r3, #6
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	041b      	lsls	r3, r3, #16
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	061b      	lsls	r3, r3, #24
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	071b      	lsls	r3, r3, #28
 8006aea:	4929      	ldr	r1, [pc, #164]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d028      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006afe:	4b24      	ldr	r3, [pc, #144]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b04:	0e1b      	lsrs	r3, r3, #24
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b0c:	4b20      	ldr	r3, [pc, #128]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b12:	0c1b      	lsrs	r3, r3, #16
 8006b14:	f003 0303 	and.w	r3, r3, #3
 8006b18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	019a      	lsls	r2, r3, #6
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	041b      	lsls	r3, r3, #16
 8006b24:	431a      	orrs	r2, r3
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	061b      	lsls	r3, r3, #24
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	071b      	lsls	r3, r3, #28
 8006b32:	4917      	ldr	r1, [pc, #92]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006b3a:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	4911      	ldr	r1, [pc, #68]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b50:	4b0f      	ldr	r3, [pc, #60]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a0e      	ldr	r2, [pc, #56]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b5c:	f7fd ffde 	bl	8004b1c <HAL_GetTick>
 8006b60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b62:	e008      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b64:	f7fd ffda 	bl	8004b1c <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b64      	cmp	r3, #100	; 0x64
 8006b70:	d901      	bls.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e007      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b76:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b82:	d1ef      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3720      	adds	r7, #32
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	40023800 	.word	0x40023800

08006b94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e09d      	b.n	8006ce2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d108      	bne.n	8006bc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bb6:	d009      	beq.n	8006bcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	61da      	str	r2, [r3, #28]
 8006bbe:	e005      	b.n	8006bcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d106      	bne.n	8006bec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7fd fa7a 	bl	80040e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c0c:	d902      	bls.n	8006c14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	e002      	b.n	8006c1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006c22:	d007      	beq.n	8006c34 <HAL_SPI_Init+0xa0>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c2c:	d002      	beq.n	8006c34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c44:	431a      	orrs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c76:	ea42 0103 	orr.w	r1, r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	0c1b      	lsrs	r3, r3, #16
 8006c90:	f003 0204 	and.w	r2, r3, #4
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	f003 0310 	and.w	r3, r3, #16
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca2:	f003 0308 	and.w	r3, r3, #8
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006cb0:	ea42 0103 	orr.w	r1, r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69da      	ldr	r2, [r3, #28]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b08a      	sub	sp, #40	; 0x28
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	60f8      	str	r0, [r7, #12]
 8006cf2:	60b9      	str	r1, [r7, #8]
 8006cf4:	607a      	str	r2, [r7, #4]
 8006cf6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d101      	bne.n	8006d10 <HAL_SPI_TransmitReceive+0x26>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	e1fb      	b.n	8007108 <HAL_SPI_TransmitReceive+0x41e>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d18:	f7fd ff00 	bl	8004b1c <HAL_GetTick>
 8006d1c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d24:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d2c:	887b      	ldrh	r3, [r7, #2]
 8006d2e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006d30:	887b      	ldrh	r3, [r7, #2]
 8006d32:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d34:	7efb      	ldrb	r3, [r7, #27]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d00e      	beq.n	8006d58 <HAL_SPI_TransmitReceive+0x6e>
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d40:	d106      	bne.n	8006d50 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d102      	bne.n	8006d50 <HAL_SPI_TransmitReceive+0x66>
 8006d4a:	7efb      	ldrb	r3, [r7, #27]
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d003      	beq.n	8006d58 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006d50:	2302      	movs	r3, #2
 8006d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006d56:	e1cd      	b.n	80070f4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d005      	beq.n	8006d6a <HAL_SPI_TransmitReceive+0x80>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <HAL_SPI_TransmitReceive+0x80>
 8006d64:	887b      	ldrh	r3, [r7, #2]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d103      	bne.n	8006d72 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006d70:	e1c0      	b.n	80070f4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d003      	beq.n	8006d86 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2205      	movs	r2, #5
 8006d82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	887a      	ldrh	r2, [r7, #2]
 8006d96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	887a      	ldrh	r2, [r7, #2]
 8006d9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	887a      	ldrh	r2, [r7, #2]
 8006dac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	887a      	ldrh	r2, [r7, #2]
 8006db2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dc8:	d802      	bhi.n	8006dd0 <HAL_SPI_TransmitReceive+0xe6>
 8006dca:	8a3b      	ldrh	r3, [r7, #16]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d908      	bls.n	8006de2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dde:	605a      	str	r2, [r3, #4]
 8006de0:	e007      	b.n	8006df2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006df0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfc:	2b40      	cmp	r3, #64	; 0x40
 8006dfe:	d007      	beq.n	8006e10 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e18:	d97c      	bls.n	8006f14 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <HAL_SPI_TransmitReceive+0x13e>
 8006e22:	8a7b      	ldrh	r3, [r7, #18]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d169      	bne.n	8006efc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2c:	881a      	ldrh	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e38:	1c9a      	adds	r2, r3, #2
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	3b01      	subs	r3, #1
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e4c:	e056      	b.n	8006efc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d11b      	bne.n	8006e94 <HAL_SPI_TransmitReceive+0x1aa>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d016      	beq.n	8006e94 <HAL_SPI_TransmitReceive+0x1aa>
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d113      	bne.n	8006e94 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	881a      	ldrh	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7c:	1c9a      	adds	r2, r3, #2
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d11c      	bne.n	8006edc <HAL_SPI_TransmitReceive+0x1f2>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d016      	beq.n	8006edc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	b292      	uxth	r2, r2
 8006eba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec0:	1c9a      	adds	r2, r3, #2
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006edc:	f7fd fe1e 	bl	8004b1c <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d807      	bhi.n	8006efc <HAL_SPI_TransmitReceive+0x212>
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ef2:	d003      	beq.n	8006efc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006efa:	e0fb      	b.n	80070f4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1a3      	bne.n	8006e4e <HAL_SPI_TransmitReceive+0x164>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d19d      	bne.n	8006e4e <HAL_SPI_TransmitReceive+0x164>
 8006f12:	e0df      	b.n	80070d4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <HAL_SPI_TransmitReceive+0x23a>
 8006f1c:	8a7b      	ldrh	r3, [r7, #18]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	f040 80cb 	bne.w	80070ba <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d912      	bls.n	8006f54 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f32:	881a      	ldrh	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3e:	1c9a      	adds	r2, r3, #2
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3b02      	subs	r3, #2
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f52:	e0b2      	b.n	80070ba <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	330c      	adds	r3, #12
 8006f5e:	7812      	ldrb	r2, [r2, #0]
 8006f60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f7a:	e09e      	b.n	80070ba <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d134      	bne.n	8006ff4 <HAL_SPI_TransmitReceive+0x30a>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d02f      	beq.n	8006ff4 <HAL_SPI_TransmitReceive+0x30a>
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d12c      	bne.n	8006ff4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d912      	bls.n	8006fca <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	881a      	ldrh	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	1c9a      	adds	r2, r3, #2
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b02      	subs	r3, #2
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fc8:	e012      	b.n	8006ff0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	7812      	ldrb	r2, [r2, #0]
 8006fd6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d148      	bne.n	8007094 <HAL_SPI_TransmitReceive+0x3aa>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d042      	beq.n	8007094 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007014:	b29b      	uxth	r3, r3
 8007016:	2b01      	cmp	r3, #1
 8007018:	d923      	bls.n	8007062 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	b292      	uxth	r2, r2
 8007026:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	1c9a      	adds	r2, r3, #2
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007038:	b29b      	uxth	r3, r3
 800703a:	3b02      	subs	r3, #2
 800703c:	b29a      	uxth	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800704a:	b29b      	uxth	r3, r3
 800704c:	2b01      	cmp	r3, #1
 800704e:	d81f      	bhi.n	8007090 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800705e:	605a      	str	r2, [r3, #4]
 8007060:	e016      	b.n	8007090 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f103 020c 	add.w	r2, r3, #12
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	7812      	ldrb	r2, [r2, #0]
 8007070:	b2d2      	uxtb	r2, r2
 8007072:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29a      	uxth	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007090:	2301      	movs	r3, #1
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007094:	f7fd fd42 	bl	8004b1c <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d803      	bhi.n	80070ac <HAL_SPI_TransmitReceive+0x3c2>
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070aa:	d102      	bne.n	80070b2 <HAL_SPI_TransmitReceive+0x3c8>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d103      	bne.n	80070ba <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80070b8:	e01c      	b.n	80070f4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070be:	b29b      	uxth	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f47f af5b 	bne.w	8006f7c <HAL_SPI_TransmitReceive+0x292>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f47f af54 	bne.w	8006f7c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070d4:	69fa      	ldr	r2, [r7, #28]
 80070d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 f937 	bl	800734c <SPI_EndRxTxTransaction>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d006      	beq.n	80070f2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2220      	movs	r2, #32
 80070ee:	661a      	str	r2, [r3, #96]	; 0x60
 80070f0:	e000      	b.n	80070f4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80070f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007104:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007108:	4618      	mov	r0, r3
 800710a:	3728      	adds	r7, #40	; 0x28
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b088      	sub	sp, #32
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	4613      	mov	r3, r2
 800711e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007120:	f7fd fcfc 	bl	8004b1c <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	1a9b      	subs	r3, r3, r2
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	4413      	add	r3, r2
 800712e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007130:	f7fd fcf4 	bl	8004b1c <HAL_GetTick>
 8007134:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007136:	4b39      	ldr	r3, [pc, #228]	; (800721c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	015b      	lsls	r3, r3, #5
 800713c:	0d1b      	lsrs	r3, r3, #20
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	fb02 f303 	mul.w	r3, r2, r3
 8007144:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007146:	e054      	b.n	80071f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800714e:	d050      	beq.n	80071f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007150:	f7fd fce4 	bl	8004b1c <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	69fa      	ldr	r2, [r7, #28]
 800715c:	429a      	cmp	r2, r3
 800715e:	d902      	bls.n	8007166 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d13d      	bne.n	80071e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007174:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800717e:	d111      	bne.n	80071a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007188:	d004      	beq.n	8007194 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007192:	d107      	bne.n	80071a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ac:	d10f      	bne.n	80071ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e017      	b.n	8007212 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	3b01      	subs	r3, #1
 80071f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4013      	ands	r3, r2
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	429a      	cmp	r2, r3
 8007200:	bf0c      	ite	eq
 8007202:	2301      	moveq	r3, #1
 8007204:	2300      	movne	r3, #0
 8007206:	b2db      	uxtb	r3, r3
 8007208:	461a      	mov	r2, r3
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	429a      	cmp	r2, r3
 800720e:	d19b      	bne.n	8007148 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3720      	adds	r7, #32
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	200000bc 	.word	0x200000bc

08007220 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08a      	sub	sp, #40	; 0x28
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007232:	f7fd fc73 	bl	8004b1c <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723a:	1a9b      	subs	r3, r3, r2
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	4413      	add	r3, r2
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007242:	f7fd fc6b 	bl	8004b1c <HAL_GetTick>
 8007246:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	330c      	adds	r3, #12
 800724e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007250:	4b3d      	ldr	r3, [pc, #244]	; (8007348 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	4613      	mov	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	00da      	lsls	r2, r3, #3
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	0d1b      	lsrs	r3, r3, #20
 8007260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007262:	fb02 f303 	mul.w	r3, r2, r3
 8007266:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007268:	e060      	b.n	800732c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007270:	d107      	bne.n	8007282 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d104      	bne.n	8007282 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007280:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007288:	d050      	beq.n	800732c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800728a:	f7fd fc47 	bl	8004b1c <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007296:	429a      	cmp	r2, r3
 8007298:	d902      	bls.n	80072a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	2b00      	cmp	r3, #0
 800729e:	d13d      	bne.n	800731c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072b8:	d111      	bne.n	80072de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072c2:	d004      	beq.n	80072ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072cc:	d107      	bne.n	80072de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072e6:	d10f      	bne.n	8007308 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072f6:	601a      	str	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007306:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e010      	b.n	800733e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	3b01      	subs	r3, #1
 800732a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	4013      	ands	r3, r2
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	429a      	cmp	r2, r3
 800733a:	d196      	bne.n	800726a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3728      	adds	r7, #40	; 0x28
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	200000bc 	.word	0x200000bc

0800734c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b088      	sub	sp, #32
 8007350:	af02      	add	r7, sp, #8
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2200      	movs	r2, #0
 8007360:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f7ff ff5b 	bl	8007220 <SPI_WaitFifoStateUntilTimeout>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d007      	beq.n	8007380 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007374:	f043 0220 	orr.w	r2, r3, #32
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e046      	b.n	800740e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007380:	4b25      	ldr	r3, [pc, #148]	; (8007418 <SPI_EndRxTxTransaction+0xcc>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a25      	ldr	r2, [pc, #148]	; (800741c <SPI_EndRxTxTransaction+0xd0>)
 8007386:	fba2 2303 	umull	r2, r3, r2, r3
 800738a:	0d5b      	lsrs	r3, r3, #21
 800738c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007390:	fb02 f303 	mul.w	r3, r2, r3
 8007394:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800739e:	d112      	bne.n	80073c6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2200      	movs	r2, #0
 80073a8:	2180      	movs	r1, #128	; 0x80
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f7ff feb0 	bl	8007110 <SPI_WaitFlagStateUntilTimeout>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d016      	beq.n	80073e4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ba:	f043 0220 	orr.w	r2, r3, #32
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e023      	b.n	800740e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00a      	beq.n	80073e2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073dc:	2b80      	cmp	r3, #128	; 0x80
 80073de:	d0f2      	beq.n	80073c6 <SPI_EndRxTxTransaction+0x7a>
 80073e0:	e000      	b.n	80073e4 <SPI_EndRxTxTransaction+0x98>
        break;
 80073e2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f7ff ff15 	bl	8007220 <SPI_WaitFifoStateUntilTimeout>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d007      	beq.n	800740c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007400:	f043 0220 	orr.w	r2, r3, #32
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e000      	b.n	800740e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	200000bc 	.word	0x200000bc
 800741c:	165e9f81 	.word	0x165e9f81

08007420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e054      	b.n	80074dc <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d111      	bne.n	8007462 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fdf2 	bl	8008030 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007450:	2b00      	cmp	r3, #0
 8007452:	d102      	bne.n	800745a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a23      	ldr	r2, [pc, #140]	; (80074e4 <HAL_TIM_Base_Init+0xc4>)
 8007458:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2202      	movs	r2, #2
 8007466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	3304      	adds	r3, #4
 8007472:	4619      	mov	r1, r3
 8007474:	4610      	mov	r0, r2
 8007476:	f000 fca1 	bl	8007dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	080046a9 	.word	0x080046a9

080074e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d001      	beq.n	8007500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e054      	b.n	80075aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2202      	movs	r2, #2
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68da      	ldr	r2, [r3, #12]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f042 0201 	orr.w	r2, r2, #1
 8007516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a26      	ldr	r2, [pc, #152]	; (80075b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d022      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x80>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800752a:	d01d      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x80>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a22      	ldr	r2, [pc, #136]	; (80075bc <HAL_TIM_Base_Start_IT+0xd4>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d018      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x80>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a21      	ldr	r2, [pc, #132]	; (80075c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d013      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x80>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a1f      	ldr	r2, [pc, #124]	; (80075c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d00e      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x80>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a1e      	ldr	r2, [pc, #120]	; (80075c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d009      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x80>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1c      	ldr	r2, [pc, #112]	; (80075cc <HAL_TIM_Base_Start_IT+0xe4>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d004      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x80>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1b      	ldr	r2, [pc, #108]	; (80075d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d115      	bne.n	8007594 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	4b19      	ldr	r3, [pc, #100]	; (80075d4 <HAL_TIM_Base_Start_IT+0xec>)
 8007570:	4013      	ands	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b06      	cmp	r3, #6
 8007578:	d015      	beq.n	80075a6 <HAL_TIM_Base_Start_IT+0xbe>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007580:	d011      	beq.n	80075a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f042 0201 	orr.w	r2, r2, #1
 8007590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007592:	e008      	b.n	80075a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0201 	orr.w	r2, r2, #1
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	e000      	b.n	80075a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40010000 	.word	0x40010000
 80075bc:	40000400 	.word	0x40000400
 80075c0:	40000800 	.word	0x40000800
 80075c4:	40000c00 	.word	0x40000c00
 80075c8:	40010400 	.word	0x40010400
 80075cc:	40014000 	.word	0x40014000
 80075d0:	40001800 	.word	0x40001800
 80075d4:	00010007 	.word	0x00010007

080075d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f022 0201 	bic.w	r2, r2, #1
 80075ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6a1a      	ldr	r2, [r3, #32]
 80075f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80075fa:	4013      	ands	r3, r2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10f      	bne.n	8007620 <HAL_TIM_Base_Stop_IT+0x48>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6a1a      	ldr	r2, [r3, #32]
 8007606:	f240 4344 	movw	r3, #1092	; 0x444
 800760a:	4013      	ands	r3, r2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d107      	bne.n	8007620 <HAL_TIM_Base_Stop_IT+0x48>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 0201 	bic.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b02      	cmp	r3, #2
 800764a:	d128      	bne.n	800769e <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b02      	cmp	r3, #2
 8007658:	d121      	bne.n	800769e <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f06f 0202 	mvn.w	r2, #2
 8007662:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	f003 0303 	and.w	r3, r3, #3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d005      	beq.n	8007684 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4798      	blx	r3
 8007682:	e009      	b.n	8007698 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	f003 0304 	and.w	r3, r3, #4
 80076a8:	2b04      	cmp	r3, #4
 80076aa:	d128      	bne.n	80076fe <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f003 0304 	and.w	r3, r3, #4
 80076b6:	2b04      	cmp	r3, #4
 80076b8:	d121      	bne.n	80076fe <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f06f 0204 	mvn.w	r2, #4
 80076c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	4798      	blx	r3
 80076e2:	e009      	b.n	80076f8 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	f003 0308 	and.w	r3, r3, #8
 8007708:	2b08      	cmp	r3, #8
 800770a:	d128      	bne.n	800775e <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f003 0308 	and.w	r3, r3, #8
 8007716:	2b08      	cmp	r3, #8
 8007718:	d121      	bne.n	800775e <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f06f 0208 	mvn.w	r2, #8
 8007722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2204      	movs	r2, #4
 8007728:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	f003 0303 	and.w	r3, r3, #3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4798      	blx	r3
 8007742:	e009      	b.n	8007758 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	f003 0310 	and.w	r3, r3, #16
 8007768:	2b10      	cmp	r3, #16
 800776a:	d128      	bne.n	80077be <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f003 0310 	and.w	r3, r3, #16
 8007776:	2b10      	cmp	r3, #16
 8007778:	d121      	bne.n	80077be <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f06f 0210 	mvn.w	r2, #16
 8007782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2208      	movs	r2, #8
 8007788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007794:	2b00      	cmp	r3, #0
 8007796:	d005      	beq.n	80077a4 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4798      	blx	r3
 80077a2:	e009      	b.n	80077b8 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d110      	bne.n	80077ee <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d109      	bne.n	80077ee <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f06f 0201 	mvn.w	r2, #1
 80077e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f8:	2b80      	cmp	r3, #128	; 0x80
 80077fa:	d110      	bne.n	800781e <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007806:	2b80      	cmp	r3, #128	; 0x80
 8007808:	d109      	bne.n	800781e <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800782c:	d110      	bne.n	8007850 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007838:	2b80      	cmp	r3, #128	; 0x80
 800783a:	d109      	bne.n	8007850 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785a:	2b40      	cmp	r3, #64	; 0x40
 800785c:	d110      	bne.n	8007880 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007868:	2b40      	cmp	r3, #64	; 0x40
 800786a:	d109      	bne.n	8007880 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b20      	cmp	r3, #32
 800788c:	d110      	bne.n	80078b0 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f003 0320 	and.w	r3, r3, #32
 8007898:	2b20      	cmp	r3, #32
 800789a:	d109      	bne.n	80078b0 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f06f 0220 	mvn.w	r2, #32
 80078a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d101      	bne.n	80078d4 <HAL_TIM_ConfigClockSource+0x1c>
 80078d0:	2302      	movs	r3, #2
 80078d2:	e0b4      	b.n	8007a3e <HAL_TIM_ConfigClockSource+0x186>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	4b56      	ldr	r3, [pc, #344]	; (8007a48 <HAL_TIM_ConfigClockSource+0x190>)
 80078f0:	4013      	ands	r3, r2
 80078f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800790c:	d03e      	beq.n	800798c <HAL_TIM_ConfigClockSource+0xd4>
 800790e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007912:	f200 8087 	bhi.w	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
 8007916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800791a:	f000 8086 	beq.w	8007a2a <HAL_TIM_ConfigClockSource+0x172>
 800791e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007922:	d87f      	bhi.n	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
 8007924:	2b70      	cmp	r3, #112	; 0x70
 8007926:	d01a      	beq.n	800795e <HAL_TIM_ConfigClockSource+0xa6>
 8007928:	2b70      	cmp	r3, #112	; 0x70
 800792a:	d87b      	bhi.n	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
 800792c:	2b60      	cmp	r3, #96	; 0x60
 800792e:	d050      	beq.n	80079d2 <HAL_TIM_ConfigClockSource+0x11a>
 8007930:	2b60      	cmp	r3, #96	; 0x60
 8007932:	d877      	bhi.n	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
 8007934:	2b50      	cmp	r3, #80	; 0x50
 8007936:	d03c      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0xfa>
 8007938:	2b50      	cmp	r3, #80	; 0x50
 800793a:	d873      	bhi.n	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
 800793c:	2b40      	cmp	r3, #64	; 0x40
 800793e:	d058      	beq.n	80079f2 <HAL_TIM_ConfigClockSource+0x13a>
 8007940:	2b40      	cmp	r3, #64	; 0x40
 8007942:	d86f      	bhi.n	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
 8007944:	2b30      	cmp	r3, #48	; 0x30
 8007946:	d064      	beq.n	8007a12 <HAL_TIM_ConfigClockSource+0x15a>
 8007948:	2b30      	cmp	r3, #48	; 0x30
 800794a:	d86b      	bhi.n	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
 800794c:	2b20      	cmp	r3, #32
 800794e:	d060      	beq.n	8007a12 <HAL_TIM_ConfigClockSource+0x15a>
 8007950:	2b20      	cmp	r3, #32
 8007952:	d867      	bhi.n	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
 8007954:	2b00      	cmp	r3, #0
 8007956:	d05c      	beq.n	8007a12 <HAL_TIM_ConfigClockSource+0x15a>
 8007958:	2b10      	cmp	r3, #16
 800795a:	d05a      	beq.n	8007a12 <HAL_TIM_ConfigClockSource+0x15a>
 800795c:	e062      	b.n	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800796e:	f000 fb3f 	bl	8007ff0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007980:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	609a      	str	r2, [r3, #8]
      break;
 800798a:	e04f      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800799c:	f000 fb28 	bl	8007ff0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689a      	ldr	r2, [r3, #8]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079ae:	609a      	str	r2, [r3, #8]
      break;
 80079b0:	e03c      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079be:	461a      	mov	r2, r3
 80079c0:	f000 fa9c 	bl	8007efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2150      	movs	r1, #80	; 0x50
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 faf5 	bl	8007fba <TIM_ITRx_SetConfig>
      break;
 80079d0:	e02c      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079de:	461a      	mov	r2, r3
 80079e0:	f000 fabb 	bl	8007f5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2160      	movs	r1, #96	; 0x60
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 fae5 	bl	8007fba <TIM_ITRx_SetConfig>
      break;
 80079f0:	e01c      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079fe:	461a      	mov	r2, r3
 8007a00:	f000 fa7c 	bl	8007efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2140      	movs	r1, #64	; 0x40
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fad5 	bl	8007fba <TIM_ITRx_SetConfig>
      break;
 8007a10:	e00c      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	f000 facc 	bl	8007fba <TIM_ITRx_SetConfig>
      break;
 8007a22:	e003      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	73fb      	strb	r3, [r7, #15]
      break;
 8007a28:	e000      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	fffeff88 	.word	0xfffeff88

08007a4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e13e      	b.n	8007dae <HAL_TIM_RegisterCallback+0x29a>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_TIM_RegisterCallback+0x2a>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e137      	b.n	8007dae <HAL_TIM_RegisterCallback+0x29a>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	f040 80c2 	bne.w	8007cd8 <HAL_TIM_RegisterCallback+0x1c4>
  {
    switch (CallbackID)
 8007b54:	7afb      	ldrb	r3, [r7, #11]
 8007b56:	2b1b      	cmp	r3, #27
 8007b58:	f200 80bb 	bhi.w	8007cd2 <HAL_TIM_RegisterCallback+0x1be>
 8007b5c:	a201      	add	r2, pc, #4	; (adr r2, 8007b64 <HAL_TIM_RegisterCallback+0x50>)
 8007b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b62:	bf00      	nop
 8007b64:	08007bd5 	.word	0x08007bd5
 8007b68:	08007bdd 	.word	0x08007bdd
 8007b6c:	08007be5 	.word	0x08007be5
 8007b70:	08007bed 	.word	0x08007bed
 8007b74:	08007bf5 	.word	0x08007bf5
 8007b78:	08007bfd 	.word	0x08007bfd
 8007b7c:	08007c05 	.word	0x08007c05
 8007b80:	08007c0d 	.word	0x08007c0d
 8007b84:	08007c15 	.word	0x08007c15
 8007b88:	08007c1d 	.word	0x08007c1d
 8007b8c:	08007c25 	.word	0x08007c25
 8007b90:	08007c2d 	.word	0x08007c2d
 8007b94:	08007c35 	.word	0x08007c35
 8007b98:	08007c3d 	.word	0x08007c3d
 8007b9c:	08007c47 	.word	0x08007c47
 8007ba0:	08007c51 	.word	0x08007c51
 8007ba4:	08007c5b 	.word	0x08007c5b
 8007ba8:	08007c65 	.word	0x08007c65
 8007bac:	08007c6f 	.word	0x08007c6f
 8007bb0:	08007c79 	.word	0x08007c79
 8007bb4:	08007c83 	.word	0x08007c83
 8007bb8:	08007c8d 	.word	0x08007c8d
 8007bbc:	08007c97 	.word	0x08007c97
 8007bc0:	08007ca1 	.word	0x08007ca1
 8007bc4:	08007cab 	.word	0x08007cab
 8007bc8:	08007cb5 	.word	0x08007cb5
 8007bcc:	08007cbf 	.word	0x08007cbf
 8007bd0:	08007cc9 	.word	0x08007cc9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007bda:	e0e3      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8007be2:	e0df      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007bea:	e0db      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8007bf2:	e0d7      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007bfa:	e0d3      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007c02:	e0cf      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007c0a:	e0cb      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007c12:	e0c7      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007c1a:	e0c3      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007c22:	e0bf      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007c2a:	e0bb      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8007c32:	e0b7      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007c3a:	e0b3      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8007c44:	e0ae      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8007c4e:	e0a9      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8007c58:	e0a4      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8007c62:	e09f      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8007c6c:	e09a      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8007c76:	e095      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8007c80:	e090      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8007c8a:	e08b      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8007c94:	e086      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8007c9e:	e081      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8007ca8:	e07c      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8007cb2:	e077      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8007cbc:	e072      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8007cc6:	e06d      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8007cd0:	e068      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	75fb      	strb	r3, [r7, #23]
        break;
 8007cd6:	e065      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d15d      	bne.n	8007da0 <HAL_TIM_RegisterCallback+0x28c>
  {
    switch (CallbackID)
 8007ce4:	7afb      	ldrb	r3, [r7, #11]
 8007ce6:	2b0d      	cmp	r3, #13
 8007ce8:	d857      	bhi.n	8007d9a <HAL_TIM_RegisterCallback+0x286>
 8007cea:	a201      	add	r2, pc, #4	; (adr r2, 8007cf0 <HAL_TIM_RegisterCallback+0x1dc>)
 8007cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf0:	08007d29 	.word	0x08007d29
 8007cf4:	08007d31 	.word	0x08007d31
 8007cf8:	08007d39 	.word	0x08007d39
 8007cfc:	08007d41 	.word	0x08007d41
 8007d00:	08007d49 	.word	0x08007d49
 8007d04:	08007d51 	.word	0x08007d51
 8007d08:	08007d59 	.word	0x08007d59
 8007d0c:	08007d61 	.word	0x08007d61
 8007d10:	08007d69 	.word	0x08007d69
 8007d14:	08007d71 	.word	0x08007d71
 8007d18:	08007d79 	.word	0x08007d79
 8007d1c:	08007d81 	.word	0x08007d81
 8007d20:	08007d89 	.word	0x08007d89
 8007d24:	08007d91 	.word	0x08007d91
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007d2e:	e039      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8007d36:	e035      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007d3e:	e031      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8007d46:	e02d      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007d4e:	e029      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007d56:	e025      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007d5e:	e021      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007d66:	e01d      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007d6e:	e019      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007d76:	e015      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007d7e:	e011      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8007d86:	e00d      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007d8e:	e009      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8007d98:	e004      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	75fb      	strb	r3, [r7, #23]
        break;
 8007d9e:	e001      	b.n	8007da4 <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop

08007dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a40      	ldr	r2, [pc, #256]	; (8007ed0 <TIM_Base_SetConfig+0x114>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d013      	beq.n	8007dfc <TIM_Base_SetConfig+0x40>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dda:	d00f      	beq.n	8007dfc <TIM_Base_SetConfig+0x40>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a3d      	ldr	r2, [pc, #244]	; (8007ed4 <TIM_Base_SetConfig+0x118>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d00b      	beq.n	8007dfc <TIM_Base_SetConfig+0x40>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a3c      	ldr	r2, [pc, #240]	; (8007ed8 <TIM_Base_SetConfig+0x11c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d007      	beq.n	8007dfc <TIM_Base_SetConfig+0x40>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a3b      	ldr	r2, [pc, #236]	; (8007edc <TIM_Base_SetConfig+0x120>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d003      	beq.n	8007dfc <TIM_Base_SetConfig+0x40>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a3a      	ldr	r2, [pc, #232]	; (8007ee0 <TIM_Base_SetConfig+0x124>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d108      	bne.n	8007e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a2f      	ldr	r2, [pc, #188]	; (8007ed0 <TIM_Base_SetConfig+0x114>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d02b      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e1c:	d027      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a2c      	ldr	r2, [pc, #176]	; (8007ed4 <TIM_Base_SetConfig+0x118>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d023      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a2b      	ldr	r2, [pc, #172]	; (8007ed8 <TIM_Base_SetConfig+0x11c>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d01f      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a2a      	ldr	r2, [pc, #168]	; (8007edc <TIM_Base_SetConfig+0x120>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d01b      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a29      	ldr	r2, [pc, #164]	; (8007ee0 <TIM_Base_SetConfig+0x124>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d017      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a28      	ldr	r2, [pc, #160]	; (8007ee4 <TIM_Base_SetConfig+0x128>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d013      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a27      	ldr	r2, [pc, #156]	; (8007ee8 <TIM_Base_SetConfig+0x12c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d00f      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a26      	ldr	r2, [pc, #152]	; (8007eec <TIM_Base_SetConfig+0x130>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d00b      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a25      	ldr	r2, [pc, #148]	; (8007ef0 <TIM_Base_SetConfig+0x134>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d007      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a24      	ldr	r2, [pc, #144]	; (8007ef4 <TIM_Base_SetConfig+0x138>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d003      	beq.n	8007e6e <TIM_Base_SetConfig+0xb2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a23      	ldr	r2, [pc, #140]	; (8007ef8 <TIM_Base_SetConfig+0x13c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d108      	bne.n	8007e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a0a      	ldr	r2, [pc, #40]	; (8007ed0 <TIM_Base_SetConfig+0x114>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d003      	beq.n	8007eb4 <TIM_Base_SetConfig+0xf8>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a0c      	ldr	r2, [pc, #48]	; (8007ee0 <TIM_Base_SetConfig+0x124>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d103      	bne.n	8007ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	691a      	ldr	r2, [r3, #16]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	615a      	str	r2, [r3, #20]
}
 8007ec2:	bf00      	nop
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	40010000 	.word	0x40010000
 8007ed4:	40000400 	.word	0x40000400
 8007ed8:	40000800 	.word	0x40000800
 8007edc:	40000c00 	.word	0x40000c00
 8007ee0:	40010400 	.word	0x40010400
 8007ee4:	40014000 	.word	0x40014000
 8007ee8:	40014400 	.word	0x40014400
 8007eec:	40014800 	.word	0x40014800
 8007ef0:	40001800 	.word	0x40001800
 8007ef4:	40001c00 	.word	0x40001c00
 8007ef8:	40002000 	.word	0x40002000

08007efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a1b      	ldr	r3, [r3, #32]
 8007f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	f023 0201 	bic.w	r2, r3, #1
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	011b      	lsls	r3, r3, #4
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	f023 030a 	bic.w	r3, r3, #10
 8007f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	621a      	str	r2, [r3, #32]
}
 8007f4e:	bf00      	nop
 8007f50:	371c      	adds	r7, #28
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b087      	sub	sp, #28
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	60b9      	str	r1, [r7, #8]
 8007f64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	f023 0210 	bic.w	r2, r3, #16
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	031b      	lsls	r3, r3, #12
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	011b      	lsls	r3, r3, #4
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	621a      	str	r2, [r3, #32]
}
 8007fae:	bf00      	nop
 8007fb0:	371c      	adds	r7, #28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b085      	sub	sp, #20
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	f043 0307 	orr.w	r3, r3, #7
 8007fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	609a      	str	r2, [r3, #8]
}
 8007fe4:	bf00      	nop
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800800a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	021a      	lsls	r2, r3, #8
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	431a      	orrs	r2, r3
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	4313      	orrs	r3, r2
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	609a      	str	r2, [r3, #8]
}
 8008024:	bf00      	nop
 8008026:	371c      	adds	r7, #28
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a1e      	ldr	r2, [pc, #120]	; (80080b4 <TIM_ResetCallback+0x84>)
 800803c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a1d      	ldr	r2, [pc, #116]	; (80080b8 <TIM_ResetCallback+0x88>)
 8008044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a1c      	ldr	r2, [pc, #112]	; (80080bc <TIM_ResetCallback+0x8c>)
 800804c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a1b      	ldr	r2, [pc, #108]	; (80080c0 <TIM_ResetCallback+0x90>)
 8008054:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a1a      	ldr	r2, [pc, #104]	; (80080c4 <TIM_ResetCallback+0x94>)
 800805c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a19      	ldr	r2, [pc, #100]	; (80080c8 <TIM_ResetCallback+0x98>)
 8008064:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a18      	ldr	r2, [pc, #96]	; (80080cc <TIM_ResetCallback+0x9c>)
 800806c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a17      	ldr	r2, [pc, #92]	; (80080d0 <TIM_ResetCallback+0xa0>)
 8008074:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a16      	ldr	r2, [pc, #88]	; (80080d4 <TIM_ResetCallback+0xa4>)
 800807c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a15      	ldr	r2, [pc, #84]	; (80080d8 <TIM_ResetCallback+0xa8>)
 8008084:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a14      	ldr	r2, [pc, #80]	; (80080dc <TIM_ResetCallback+0xac>)
 800808c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a13      	ldr	r2, [pc, #76]	; (80080e0 <TIM_ResetCallback+0xb0>)
 8008094:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a12      	ldr	r2, [pc, #72]	; (80080e4 <TIM_ResetCallback+0xb4>)
 800809c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a11      	ldr	r2, [pc, #68]	; (80080e8 <TIM_ResetCallback+0xb8>)
 80080a4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	08007a4d 	.word	0x08007a4d
 80080b8:	08007a61 	.word	0x08007a61
 80080bc:	08007ad9 	.word	0x08007ad9
 80080c0:	08007aed 	.word	0x08007aed
 80080c4:	08007a89 	.word	0x08007a89
 80080c8:	08007a9d 	.word	0x08007a9d
 80080cc:	08007a75 	.word	0x08007a75
 80080d0:	08007ab1 	.word	0x08007ab1
 80080d4:	08007ac5 	.word	0x08007ac5
 80080d8:	08007b01 	.word	0x08007b01
 80080dc:	08008209 	.word	0x08008209
 80080e0:	0800821d 	.word	0x0800821d
 80080e4:	08008231 	.word	0x08008231
 80080e8:	08008245 	.word	0x08008245

080080ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d101      	bne.n	8008104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008100:	2302      	movs	r3, #2
 8008102:	e06d      	b.n	80081e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a30      	ldr	r2, [pc, #192]	; (80081ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d004      	beq.n	8008138 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a2f      	ldr	r2, [pc, #188]	; (80081f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d108      	bne.n	800814a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800813e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	4313      	orrs	r3, r2
 8008148:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008150:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	4313      	orrs	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a20      	ldr	r2, [pc, #128]	; (80081ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d022      	beq.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008176:	d01d      	beq.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a1d      	ldr	r2, [pc, #116]	; (80081f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d018      	beq.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a1c      	ldr	r2, [pc, #112]	; (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d013      	beq.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a1a      	ldr	r2, [pc, #104]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00e      	beq.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a15      	ldr	r2, [pc, #84]	; (80081f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d009      	beq.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a16      	ldr	r2, [pc, #88]	; (8008200 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d004      	beq.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a15      	ldr	r2, [pc, #84]	; (8008204 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d10c      	bne.n	80081ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	40010000 	.word	0x40010000
 80081f0:	40010400 	.word	0x40010400
 80081f4:	40000400 	.word	0x40000400
 80081f8:	40000800 	.word	0x40000800
 80081fc:	40000c00 	.word	0x40000c00
 8008200:	40014000 	.word	0x40014000
 8008204:	40001800 	.word	0x40001800

08008208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e04e      	b.n	8008308 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800826e:	2b00      	cmp	r3, #0
 8008270:	d114      	bne.n	800829c <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fb82 	bl	8008984 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008286:	2b00      	cmp	r3, #0
 8008288:	d103      	bne.n	8008292 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a20      	ldr	r2, [pc, #128]	; (8008310 <HAL_UART_Init+0xb8>)
 800828e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2224      	movs	r2, #36	; 0x24
 80082a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f022 0201 	bic.w	r2, r2, #1
 80082b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fba6 	bl	8008a04 <UART_SetConfig>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d101      	bne.n	80082c2 <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e022      	b.n	8008308 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fdfe 	bl	8008ecc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689a      	ldr	r2, [r3, #8]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0201 	orr.w	r2, r2, #1
 80082fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fe85 	bl	8009010 <UART_CheckIdleState>
 8008306:	4603      	mov	r3, r0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	08004959 	.word	0x08004959

08008314 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b0ba      	sub	sp, #232	; 0xe8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800833a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800833e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008342:	4013      	ands	r3, r2
 8008344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800834c:	2b00      	cmp	r3, #0
 800834e:	d115      	bne.n	800837c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008354:	f003 0320 	and.w	r3, r3, #32
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00f      	beq.n	800837c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800835c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008360:	f003 0320 	and.w	r3, r3, #32
 8008364:	2b00      	cmp	r3, #0
 8008366:	d009      	beq.n	800837c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 82a1 	beq.w	80088b4 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	4798      	blx	r3
      }
      return;
 800837a:	e29b      	b.n	80088b4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800837c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008380:	2b00      	cmp	r3, #0
 8008382:	f000 811d 	beq.w	80085c0 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	2b00      	cmp	r3, #0
 8008390:	d106      	bne.n	80083a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008392:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008396:	4b88      	ldr	r3, [pc, #544]	; (80085b8 <HAL_UART_IRQHandler+0x2a4>)
 8008398:	4013      	ands	r3, r2
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 8110 	beq.w	80085c0 <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d011      	beq.n	80083d0 <HAL_UART_IRQHandler+0xbc>
 80083ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00b      	beq.n	80083d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2201      	movs	r2, #1
 80083be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083c6:	f043 0201 	orr.w	r2, r3, #1
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d4:	f003 0302 	and.w	r3, r3, #2
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d011      	beq.n	8008400 <HAL_UART_IRQHandler+0xec>
 80083dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2202      	movs	r2, #2
 80083ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083f6:	f043 0204 	orr.w	r2, r3, #4
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008404:	f003 0304 	and.w	r3, r3, #4
 8008408:	2b00      	cmp	r3, #0
 800840a:	d011      	beq.n	8008430 <HAL_UART_IRQHandler+0x11c>
 800840c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008410:	f003 0301 	and.w	r3, r3, #1
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00b      	beq.n	8008430 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2204      	movs	r2, #4
 800841e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008426:	f043 0202 	orr.w	r2, r3, #2
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008434:	f003 0308 	and.w	r3, r3, #8
 8008438:	2b00      	cmp	r3, #0
 800843a:	d017      	beq.n	800846c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800843c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008440:	f003 0320 	and.w	r3, r3, #32
 8008444:	2b00      	cmp	r3, #0
 8008446:	d105      	bne.n	8008454 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800844c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00b      	beq.n	800846c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2208      	movs	r2, #8
 800845a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008462:	f043 0208 	orr.w	r2, r3, #8
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800846c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008474:	2b00      	cmp	r3, #0
 8008476:	d012      	beq.n	800849e <HAL_UART_IRQHandler+0x18a>
 8008478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800847c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00c      	beq.n	800849e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800848c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008494:	f043 0220 	orr.w	r2, r3, #32
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 8207 	beq.w	80088b8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80084aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ae:	f003 0320 	and.w	r3, r3, #32
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00d      	beq.n	80084d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80084b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084ba:	f003 0320 	and.w	r3, r3, #32
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d007      	beq.n	80084d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d003      	beq.n	80084d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e6:	2b40      	cmp	r3, #64	; 0x40
 80084e8:	d005      	beq.n	80084f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80084ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d053      	beq.n	800859e <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fe87 	bl	800920a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008506:	2b40      	cmp	r3, #64	; 0x40
 8008508:	d143      	bne.n	8008592 <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3308      	adds	r3, #8
 8008510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3308      	adds	r3, #8
 8008532:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008536:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800853a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008542:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008546:	e841 2300 	strex	r3, r2, [r1]
 800854a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800854e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1d9      	bne.n	800850a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800855a:	2b00      	cmp	r3, #0
 800855c:	d013      	beq.n	8008586 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008562:	4a16      	ldr	r2, [pc, #88]	; (80085bc <HAL_UART_IRQHandler+0x2a8>)
 8008564:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800856a:	4618      	mov	r0, r3
 800856c:	f7fc ffcd 	bl	800550a <HAL_DMA_Abort_IT>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d01d      	beq.n	80085b2 <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800857a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008580:	4610      	mov	r0, r2
 8008582:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008584:	e015      	b.n	80085b2 <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008590:	e00f      	b.n	80085b2 <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800859c:	e009      	b.n	80085b2 <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80085b0:	e182      	b.n	80088b8 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b2:	bf00      	nop
    return;
 80085b4:	e180      	b.n	80088b8 <HAL_UART_IRQHandler+0x5a4>
 80085b6:	bf00      	nop
 80085b8:	04000120 	.word	0x04000120
 80085bc:	080092d3 	.word	0x080092d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	f040 8150 	bne.w	800886a <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80085ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ce:	f003 0310 	and.w	r3, r3, #16
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 8149 	beq.w	800886a <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80085d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 8142 	beq.w	800886a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2210      	movs	r2, #16
 80085ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f8:	2b40      	cmp	r3, #64	; 0x40
 80085fa:	f040 80b8 	bne.w	800876e <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800860a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 8154 	beq.w	80088bc <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800861a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800861e:	429a      	cmp	r2, r3
 8008620:	f080 814c 	bcs.w	80088bc <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800862a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008638:	f000 8086 	beq.w	8008748 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008650:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008658:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008666:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800866a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008672:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008676:	e841 2300 	strex	r3, r2, [r1]
 800867a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800867e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1da      	bne.n	800863c <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3308      	adds	r3, #8
 800868c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008698:	f023 0301 	bic.w	r3, r3, #1
 800869c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3308      	adds	r3, #8
 80086a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80086aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80086ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80086b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80086b6:	e841 2300 	strex	r3, r2, [r1]
 80086ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80086bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1e1      	bne.n	8008686 <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3308      	adds	r3, #8
 80086c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086cc:	e853 3f00 	ldrex	r3, [r3]
 80086d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80086d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3308      	adds	r3, #8
 80086e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80086e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80086e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80086f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e3      	bne.n	80086c2 <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008718:	f023 0310 	bic.w	r3, r3, #16
 800871c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	461a      	mov	r2, r3
 8008726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800872a:	65bb      	str	r3, [r7, #88]	; 0x58
 800872c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008732:	e841 2300 	strex	r3, r2, [r1]
 8008736:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1e4      	bne.n	8008708 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008742:	4618      	mov	r0, r3
 8008744:	f7fc fe71 	bl	800542a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2202      	movs	r2, #2
 800874c:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 8008760:	b292      	uxth	r2, r2
 8008762:	1a8a      	subs	r2, r1, r2
 8008764:	b292      	uxth	r2, r2
 8008766:	4611      	mov	r1, r2
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800876c:	e0a6      	b.n	80088bc <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800877a:	b29b      	uxth	r3, r3
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008788:	b29b      	uxth	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	f000 8098 	beq.w	80088c0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8008790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 8093 	beq.w	80088c0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a2:	e853 3f00 	ldrex	r3, [r3]
 80087a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087bc:	647b      	str	r3, [r7, #68]	; 0x44
 80087be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e4      	bne.n	800879a <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3308      	adds	r3, #8
 80087d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	e853 3f00 	ldrex	r3, [r3]
 80087de:	623b      	str	r3, [r7, #32]
   return(result);
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	f023 0301 	bic.w	r3, r3, #1
 80087e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3308      	adds	r3, #8
 80087f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087f4:	633a      	str	r2, [r7, #48]	; 0x30
 80087f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087fc:	e841 2300 	strex	r3, r2, [r1]
 8008800:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1e3      	bne.n	80087d0 <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2220      	movs	r2, #32
 800880c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	e853 3f00 	ldrex	r3, [r3]
 8008828:	60fb      	str	r3, [r7, #12]
   return(result);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f023 0310 	bic.w	r3, r3, #16
 8008830:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	461a      	mov	r2, r3
 800883a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800883e:	61fb      	str	r3, [r7, #28]
 8008840:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008842:	69b9      	ldr	r1, [r7, #24]
 8008844:	69fa      	ldr	r2, [r7, #28]
 8008846:	e841 2300 	strex	r3, r2, [r1]
 800884a:	617b      	str	r3, [r7, #20]
   return(result);
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1e4      	bne.n	800881c <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2202      	movs	r2, #2
 8008856:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800885e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8008862:	4611      	mov	r1, r2
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008868:	e02a      	b.n	80088c0 <HAL_UART_IRQHandler+0x5ac>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800886a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800886e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00e      	beq.n	8008894 <HAL_UART_IRQHandler+0x580>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800887a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800887e:	2b00      	cmp	r3, #0
 8008880:	d008      	beq.n	8008894 <HAL_UART_IRQHandler+0x580>
  {
    if (huart->TxISR != NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008886:	2b00      	cmp	r3, #0
 8008888:	d01c      	beq.n	80088c4 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4798      	blx	r3
    }
    return;
 8008892:	e017      	b.n	80088c4 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889c:	2b00      	cmp	r3, #0
 800889e:	d012      	beq.n	80088c6 <HAL_UART_IRQHandler+0x5b2>
 80088a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00c      	beq.n	80088c6 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fd28 	bl	8009302 <UART_EndTransmit_IT>
    return;
 80088b2:	e008      	b.n	80088c6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80088b4:	bf00      	nop
 80088b6:	e006      	b.n	80088c6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80088b8:	bf00      	nop
 80088ba:	e004      	b.n	80088c6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80088bc:	bf00      	nop
 80088be:	e002      	b.n	80088c6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80088c0:	bf00      	nop
 80088c2:	e000      	b.n	80088c6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80088c4:	bf00      	nop
  }

}
 80088c6:	37e8      	adds	r7, #232	; 0xe8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a14      	ldr	r2, [pc, #80]	; (80089e0 <UART_InitCallbacksToDefault+0x5c>)
 8008990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a13      	ldr	r2, [pc, #76]	; (80089e4 <UART_InitCallbacksToDefault+0x60>)
 8008998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a12      	ldr	r2, [pc, #72]	; (80089e8 <UART_InitCallbacksToDefault+0x64>)
 80089a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a11      	ldr	r2, [pc, #68]	; (80089ec <UART_InitCallbacksToDefault+0x68>)
 80089a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a10      	ldr	r2, [pc, #64]	; (80089f0 <UART_InitCallbacksToDefault+0x6c>)
 80089b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a0f      	ldr	r2, [pc, #60]	; (80089f4 <UART_InitCallbacksToDefault+0x70>)
 80089b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a0e      	ldr	r2, [pc, #56]	; (80089f8 <UART_InitCallbacksToDefault+0x74>)
 80089c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a0d      	ldr	r2, [pc, #52]	; (80089fc <UART_InitCallbacksToDefault+0x78>)
 80089c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a0c      	ldr	r2, [pc, #48]	; (8008a00 <UART_InitCallbacksToDefault+0x7c>)
 80089d0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	080088e1 	.word	0x080088e1
 80089e4:	080088cd 	.word	0x080088cd
 80089e8:	08008909 	.word	0x08008909
 80089ec:	080088f5 	.word	0x080088f5
 80089f0:	0800891d 	.word	0x0800891d
 80089f4:	08008931 	.word	0x08008931
 80089f8:	08008945 	.word	0x08008945
 80089fc:	08008959 	.word	0x08008959
 8008a00:	0800896d 	.word	0x0800896d

08008a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b088      	sub	sp, #32
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689a      	ldr	r2, [r3, #8]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	4ba6      	ldr	r3, [pc, #664]	; (8008cc8 <UART_SetConfig+0x2c4>)
 8008a30:	4013      	ands	r3, r2
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6812      	ldr	r2, [r2, #0]
 8008a36:	6979      	ldr	r1, [r7, #20]
 8008a38:	430b      	orrs	r3, r1
 8008a3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a94      	ldr	r2, [pc, #592]	; (8008ccc <UART_SetConfig+0x2c8>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d120      	bne.n	8008ac2 <UART_SetConfig+0xbe>
 8008a80:	4b93      	ldr	r3, [pc, #588]	; (8008cd0 <UART_SetConfig+0x2cc>)
 8008a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a86:	f003 0303 	and.w	r3, r3, #3
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d816      	bhi.n	8008abc <UART_SetConfig+0xb8>
 8008a8e:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <UART_SetConfig+0x90>)
 8008a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a94:	08008aa5 	.word	0x08008aa5
 8008a98:	08008ab1 	.word	0x08008ab1
 8008a9c:	08008aab 	.word	0x08008aab
 8008aa0:	08008ab7 	.word	0x08008ab7
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	77fb      	strb	r3, [r7, #31]
 8008aa8:	e150      	b.n	8008d4c <UART_SetConfig+0x348>
 8008aaa:	2302      	movs	r3, #2
 8008aac:	77fb      	strb	r3, [r7, #31]
 8008aae:	e14d      	b.n	8008d4c <UART_SetConfig+0x348>
 8008ab0:	2304      	movs	r3, #4
 8008ab2:	77fb      	strb	r3, [r7, #31]
 8008ab4:	e14a      	b.n	8008d4c <UART_SetConfig+0x348>
 8008ab6:	2308      	movs	r3, #8
 8008ab8:	77fb      	strb	r3, [r7, #31]
 8008aba:	e147      	b.n	8008d4c <UART_SetConfig+0x348>
 8008abc:	2310      	movs	r3, #16
 8008abe:	77fb      	strb	r3, [r7, #31]
 8008ac0:	e144      	b.n	8008d4c <UART_SetConfig+0x348>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a83      	ldr	r2, [pc, #524]	; (8008cd4 <UART_SetConfig+0x2d0>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d132      	bne.n	8008b32 <UART_SetConfig+0x12e>
 8008acc:	4b80      	ldr	r3, [pc, #512]	; (8008cd0 <UART_SetConfig+0x2cc>)
 8008ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ad2:	f003 030c 	and.w	r3, r3, #12
 8008ad6:	2b0c      	cmp	r3, #12
 8008ad8:	d828      	bhi.n	8008b2c <UART_SetConfig+0x128>
 8008ada:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <UART_SetConfig+0xdc>)
 8008adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae0:	08008b15 	.word	0x08008b15
 8008ae4:	08008b2d 	.word	0x08008b2d
 8008ae8:	08008b2d 	.word	0x08008b2d
 8008aec:	08008b2d 	.word	0x08008b2d
 8008af0:	08008b21 	.word	0x08008b21
 8008af4:	08008b2d 	.word	0x08008b2d
 8008af8:	08008b2d 	.word	0x08008b2d
 8008afc:	08008b2d 	.word	0x08008b2d
 8008b00:	08008b1b 	.word	0x08008b1b
 8008b04:	08008b2d 	.word	0x08008b2d
 8008b08:	08008b2d 	.word	0x08008b2d
 8008b0c:	08008b2d 	.word	0x08008b2d
 8008b10:	08008b27 	.word	0x08008b27
 8008b14:	2300      	movs	r3, #0
 8008b16:	77fb      	strb	r3, [r7, #31]
 8008b18:	e118      	b.n	8008d4c <UART_SetConfig+0x348>
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	77fb      	strb	r3, [r7, #31]
 8008b1e:	e115      	b.n	8008d4c <UART_SetConfig+0x348>
 8008b20:	2304      	movs	r3, #4
 8008b22:	77fb      	strb	r3, [r7, #31]
 8008b24:	e112      	b.n	8008d4c <UART_SetConfig+0x348>
 8008b26:	2308      	movs	r3, #8
 8008b28:	77fb      	strb	r3, [r7, #31]
 8008b2a:	e10f      	b.n	8008d4c <UART_SetConfig+0x348>
 8008b2c:	2310      	movs	r3, #16
 8008b2e:	77fb      	strb	r3, [r7, #31]
 8008b30:	e10c      	b.n	8008d4c <UART_SetConfig+0x348>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a68      	ldr	r2, [pc, #416]	; (8008cd8 <UART_SetConfig+0x2d4>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d120      	bne.n	8008b7e <UART_SetConfig+0x17a>
 8008b3c:	4b64      	ldr	r3, [pc, #400]	; (8008cd0 <UART_SetConfig+0x2cc>)
 8008b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b46:	2b30      	cmp	r3, #48	; 0x30
 8008b48:	d013      	beq.n	8008b72 <UART_SetConfig+0x16e>
 8008b4a:	2b30      	cmp	r3, #48	; 0x30
 8008b4c:	d814      	bhi.n	8008b78 <UART_SetConfig+0x174>
 8008b4e:	2b20      	cmp	r3, #32
 8008b50:	d009      	beq.n	8008b66 <UART_SetConfig+0x162>
 8008b52:	2b20      	cmp	r3, #32
 8008b54:	d810      	bhi.n	8008b78 <UART_SetConfig+0x174>
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <UART_SetConfig+0x15c>
 8008b5a:	2b10      	cmp	r3, #16
 8008b5c:	d006      	beq.n	8008b6c <UART_SetConfig+0x168>
 8008b5e:	e00b      	b.n	8008b78 <UART_SetConfig+0x174>
 8008b60:	2300      	movs	r3, #0
 8008b62:	77fb      	strb	r3, [r7, #31]
 8008b64:	e0f2      	b.n	8008d4c <UART_SetConfig+0x348>
 8008b66:	2302      	movs	r3, #2
 8008b68:	77fb      	strb	r3, [r7, #31]
 8008b6a:	e0ef      	b.n	8008d4c <UART_SetConfig+0x348>
 8008b6c:	2304      	movs	r3, #4
 8008b6e:	77fb      	strb	r3, [r7, #31]
 8008b70:	e0ec      	b.n	8008d4c <UART_SetConfig+0x348>
 8008b72:	2308      	movs	r3, #8
 8008b74:	77fb      	strb	r3, [r7, #31]
 8008b76:	e0e9      	b.n	8008d4c <UART_SetConfig+0x348>
 8008b78:	2310      	movs	r3, #16
 8008b7a:	77fb      	strb	r3, [r7, #31]
 8008b7c:	e0e6      	b.n	8008d4c <UART_SetConfig+0x348>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a56      	ldr	r2, [pc, #344]	; (8008cdc <UART_SetConfig+0x2d8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d120      	bne.n	8008bca <UART_SetConfig+0x1c6>
 8008b88:	4b51      	ldr	r3, [pc, #324]	; (8008cd0 <UART_SetConfig+0x2cc>)
 8008b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b92:	2bc0      	cmp	r3, #192	; 0xc0
 8008b94:	d013      	beq.n	8008bbe <UART_SetConfig+0x1ba>
 8008b96:	2bc0      	cmp	r3, #192	; 0xc0
 8008b98:	d814      	bhi.n	8008bc4 <UART_SetConfig+0x1c0>
 8008b9a:	2b80      	cmp	r3, #128	; 0x80
 8008b9c:	d009      	beq.n	8008bb2 <UART_SetConfig+0x1ae>
 8008b9e:	2b80      	cmp	r3, #128	; 0x80
 8008ba0:	d810      	bhi.n	8008bc4 <UART_SetConfig+0x1c0>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <UART_SetConfig+0x1a8>
 8008ba6:	2b40      	cmp	r3, #64	; 0x40
 8008ba8:	d006      	beq.n	8008bb8 <UART_SetConfig+0x1b4>
 8008baa:	e00b      	b.n	8008bc4 <UART_SetConfig+0x1c0>
 8008bac:	2300      	movs	r3, #0
 8008bae:	77fb      	strb	r3, [r7, #31]
 8008bb0:	e0cc      	b.n	8008d4c <UART_SetConfig+0x348>
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	77fb      	strb	r3, [r7, #31]
 8008bb6:	e0c9      	b.n	8008d4c <UART_SetConfig+0x348>
 8008bb8:	2304      	movs	r3, #4
 8008bba:	77fb      	strb	r3, [r7, #31]
 8008bbc:	e0c6      	b.n	8008d4c <UART_SetConfig+0x348>
 8008bbe:	2308      	movs	r3, #8
 8008bc0:	77fb      	strb	r3, [r7, #31]
 8008bc2:	e0c3      	b.n	8008d4c <UART_SetConfig+0x348>
 8008bc4:	2310      	movs	r3, #16
 8008bc6:	77fb      	strb	r3, [r7, #31]
 8008bc8:	e0c0      	b.n	8008d4c <UART_SetConfig+0x348>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a44      	ldr	r2, [pc, #272]	; (8008ce0 <UART_SetConfig+0x2dc>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d125      	bne.n	8008c20 <UART_SetConfig+0x21c>
 8008bd4:	4b3e      	ldr	r3, [pc, #248]	; (8008cd0 <UART_SetConfig+0x2cc>)
 8008bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008be2:	d017      	beq.n	8008c14 <UART_SetConfig+0x210>
 8008be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008be8:	d817      	bhi.n	8008c1a <UART_SetConfig+0x216>
 8008bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bee:	d00b      	beq.n	8008c08 <UART_SetConfig+0x204>
 8008bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bf4:	d811      	bhi.n	8008c1a <UART_SetConfig+0x216>
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <UART_SetConfig+0x1fe>
 8008bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bfe:	d006      	beq.n	8008c0e <UART_SetConfig+0x20a>
 8008c00:	e00b      	b.n	8008c1a <UART_SetConfig+0x216>
 8008c02:	2300      	movs	r3, #0
 8008c04:	77fb      	strb	r3, [r7, #31]
 8008c06:	e0a1      	b.n	8008d4c <UART_SetConfig+0x348>
 8008c08:	2302      	movs	r3, #2
 8008c0a:	77fb      	strb	r3, [r7, #31]
 8008c0c:	e09e      	b.n	8008d4c <UART_SetConfig+0x348>
 8008c0e:	2304      	movs	r3, #4
 8008c10:	77fb      	strb	r3, [r7, #31]
 8008c12:	e09b      	b.n	8008d4c <UART_SetConfig+0x348>
 8008c14:	2308      	movs	r3, #8
 8008c16:	77fb      	strb	r3, [r7, #31]
 8008c18:	e098      	b.n	8008d4c <UART_SetConfig+0x348>
 8008c1a:	2310      	movs	r3, #16
 8008c1c:	77fb      	strb	r3, [r7, #31]
 8008c1e:	e095      	b.n	8008d4c <UART_SetConfig+0x348>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a2f      	ldr	r2, [pc, #188]	; (8008ce4 <UART_SetConfig+0x2e0>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d125      	bne.n	8008c76 <UART_SetConfig+0x272>
 8008c2a:	4b29      	ldr	r3, [pc, #164]	; (8008cd0 <UART_SetConfig+0x2cc>)
 8008c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c38:	d017      	beq.n	8008c6a <UART_SetConfig+0x266>
 8008c3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c3e:	d817      	bhi.n	8008c70 <UART_SetConfig+0x26c>
 8008c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c44:	d00b      	beq.n	8008c5e <UART_SetConfig+0x25a>
 8008c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c4a:	d811      	bhi.n	8008c70 <UART_SetConfig+0x26c>
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <UART_SetConfig+0x254>
 8008c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c54:	d006      	beq.n	8008c64 <UART_SetConfig+0x260>
 8008c56:	e00b      	b.n	8008c70 <UART_SetConfig+0x26c>
 8008c58:	2301      	movs	r3, #1
 8008c5a:	77fb      	strb	r3, [r7, #31]
 8008c5c:	e076      	b.n	8008d4c <UART_SetConfig+0x348>
 8008c5e:	2302      	movs	r3, #2
 8008c60:	77fb      	strb	r3, [r7, #31]
 8008c62:	e073      	b.n	8008d4c <UART_SetConfig+0x348>
 8008c64:	2304      	movs	r3, #4
 8008c66:	77fb      	strb	r3, [r7, #31]
 8008c68:	e070      	b.n	8008d4c <UART_SetConfig+0x348>
 8008c6a:	2308      	movs	r3, #8
 8008c6c:	77fb      	strb	r3, [r7, #31]
 8008c6e:	e06d      	b.n	8008d4c <UART_SetConfig+0x348>
 8008c70:	2310      	movs	r3, #16
 8008c72:	77fb      	strb	r3, [r7, #31]
 8008c74:	e06a      	b.n	8008d4c <UART_SetConfig+0x348>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a1b      	ldr	r2, [pc, #108]	; (8008ce8 <UART_SetConfig+0x2e4>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d138      	bne.n	8008cf2 <UART_SetConfig+0x2ee>
 8008c80:	4b13      	ldr	r3, [pc, #76]	; (8008cd0 <UART_SetConfig+0x2cc>)
 8008c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c86:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008c8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c8e:	d017      	beq.n	8008cc0 <UART_SetConfig+0x2bc>
 8008c90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c94:	d82a      	bhi.n	8008cec <UART_SetConfig+0x2e8>
 8008c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c9a:	d00b      	beq.n	8008cb4 <UART_SetConfig+0x2b0>
 8008c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ca0:	d824      	bhi.n	8008cec <UART_SetConfig+0x2e8>
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d003      	beq.n	8008cae <UART_SetConfig+0x2aa>
 8008ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008caa:	d006      	beq.n	8008cba <UART_SetConfig+0x2b6>
 8008cac:	e01e      	b.n	8008cec <UART_SetConfig+0x2e8>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	77fb      	strb	r3, [r7, #31]
 8008cb2:	e04b      	b.n	8008d4c <UART_SetConfig+0x348>
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	77fb      	strb	r3, [r7, #31]
 8008cb8:	e048      	b.n	8008d4c <UART_SetConfig+0x348>
 8008cba:	2304      	movs	r3, #4
 8008cbc:	77fb      	strb	r3, [r7, #31]
 8008cbe:	e045      	b.n	8008d4c <UART_SetConfig+0x348>
 8008cc0:	2308      	movs	r3, #8
 8008cc2:	77fb      	strb	r3, [r7, #31]
 8008cc4:	e042      	b.n	8008d4c <UART_SetConfig+0x348>
 8008cc6:	bf00      	nop
 8008cc8:	efff69f3 	.word	0xefff69f3
 8008ccc:	40011000 	.word	0x40011000
 8008cd0:	40023800 	.word	0x40023800
 8008cd4:	40004400 	.word	0x40004400
 8008cd8:	40004800 	.word	0x40004800
 8008cdc:	40004c00 	.word	0x40004c00
 8008ce0:	40005000 	.word	0x40005000
 8008ce4:	40011400 	.word	0x40011400
 8008ce8:	40007800 	.word	0x40007800
 8008cec:	2310      	movs	r3, #16
 8008cee:	77fb      	strb	r3, [r7, #31]
 8008cf0:	e02c      	b.n	8008d4c <UART_SetConfig+0x348>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a72      	ldr	r2, [pc, #456]	; (8008ec0 <UART_SetConfig+0x4bc>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d125      	bne.n	8008d48 <UART_SetConfig+0x344>
 8008cfc:	4b71      	ldr	r3, [pc, #452]	; (8008ec4 <UART_SetConfig+0x4c0>)
 8008cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d0a:	d017      	beq.n	8008d3c <UART_SetConfig+0x338>
 8008d0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d10:	d817      	bhi.n	8008d42 <UART_SetConfig+0x33e>
 8008d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d16:	d00b      	beq.n	8008d30 <UART_SetConfig+0x32c>
 8008d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d1c:	d811      	bhi.n	8008d42 <UART_SetConfig+0x33e>
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <UART_SetConfig+0x326>
 8008d22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d26:	d006      	beq.n	8008d36 <UART_SetConfig+0x332>
 8008d28:	e00b      	b.n	8008d42 <UART_SetConfig+0x33e>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	77fb      	strb	r3, [r7, #31]
 8008d2e:	e00d      	b.n	8008d4c <UART_SetConfig+0x348>
 8008d30:	2302      	movs	r3, #2
 8008d32:	77fb      	strb	r3, [r7, #31]
 8008d34:	e00a      	b.n	8008d4c <UART_SetConfig+0x348>
 8008d36:	2304      	movs	r3, #4
 8008d38:	77fb      	strb	r3, [r7, #31]
 8008d3a:	e007      	b.n	8008d4c <UART_SetConfig+0x348>
 8008d3c:	2308      	movs	r3, #8
 8008d3e:	77fb      	strb	r3, [r7, #31]
 8008d40:	e004      	b.n	8008d4c <UART_SetConfig+0x348>
 8008d42:	2310      	movs	r3, #16
 8008d44:	77fb      	strb	r3, [r7, #31]
 8008d46:	e001      	b.n	8008d4c <UART_SetConfig+0x348>
 8008d48:	2310      	movs	r3, #16
 8008d4a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	69db      	ldr	r3, [r3, #28]
 8008d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d54:	d15b      	bne.n	8008e0e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008d56:	7ffb      	ldrb	r3, [r7, #31]
 8008d58:	2b08      	cmp	r3, #8
 8008d5a:	d828      	bhi.n	8008dae <UART_SetConfig+0x3aa>
 8008d5c:	a201      	add	r2, pc, #4	; (adr r2, 8008d64 <UART_SetConfig+0x360>)
 8008d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d62:	bf00      	nop
 8008d64:	08008d89 	.word	0x08008d89
 8008d68:	08008d91 	.word	0x08008d91
 8008d6c:	08008d99 	.word	0x08008d99
 8008d70:	08008daf 	.word	0x08008daf
 8008d74:	08008d9f 	.word	0x08008d9f
 8008d78:	08008daf 	.word	0x08008daf
 8008d7c:	08008daf 	.word	0x08008daf
 8008d80:	08008daf 	.word	0x08008daf
 8008d84:	08008da7 	.word	0x08008da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d88:	f7fd faec 	bl	8006364 <HAL_RCC_GetPCLK1Freq>
 8008d8c:	61b8      	str	r0, [r7, #24]
        break;
 8008d8e:	e013      	b.n	8008db8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d90:	f7fd fafc 	bl	800638c <HAL_RCC_GetPCLK2Freq>
 8008d94:	61b8      	str	r0, [r7, #24]
        break;
 8008d96:	e00f      	b.n	8008db8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d98:	4b4b      	ldr	r3, [pc, #300]	; (8008ec8 <UART_SetConfig+0x4c4>)
 8008d9a:	61bb      	str	r3, [r7, #24]
        break;
 8008d9c:	e00c      	b.n	8008db8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d9e:	f7fd f9cf 	bl	8006140 <HAL_RCC_GetSysClockFreq>
 8008da2:	61b8      	str	r0, [r7, #24]
        break;
 8008da4:	e008      	b.n	8008db8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008daa:	61bb      	str	r3, [r7, #24]
        break;
 8008dac:	e004      	b.n	8008db8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008dae:	2300      	movs	r3, #0
 8008db0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	77bb      	strb	r3, [r7, #30]
        break;
 8008db6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d074      	beq.n	8008ea8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	005a      	lsls	r2, r3, #1
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	085b      	lsrs	r3, r3, #1
 8008dc8:	441a      	add	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	2b0f      	cmp	r3, #15
 8008dd8:	d916      	bls.n	8008e08 <UART_SetConfig+0x404>
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008de0:	d212      	bcs.n	8008e08 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	f023 030f 	bic.w	r3, r3, #15
 8008dea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	085b      	lsrs	r3, r3, #1
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	f003 0307 	and.w	r3, r3, #7
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	89fb      	ldrh	r3, [r7, #14]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	89fa      	ldrh	r2, [r7, #14]
 8008e04:	60da      	str	r2, [r3, #12]
 8008e06:	e04f      	b.n	8008ea8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	77bb      	strb	r3, [r7, #30]
 8008e0c:	e04c      	b.n	8008ea8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e0e:	7ffb      	ldrb	r3, [r7, #31]
 8008e10:	2b08      	cmp	r3, #8
 8008e12:	d828      	bhi.n	8008e66 <UART_SetConfig+0x462>
 8008e14:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <UART_SetConfig+0x418>)
 8008e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1a:	bf00      	nop
 8008e1c:	08008e41 	.word	0x08008e41
 8008e20:	08008e49 	.word	0x08008e49
 8008e24:	08008e51 	.word	0x08008e51
 8008e28:	08008e67 	.word	0x08008e67
 8008e2c:	08008e57 	.word	0x08008e57
 8008e30:	08008e67 	.word	0x08008e67
 8008e34:	08008e67 	.word	0x08008e67
 8008e38:	08008e67 	.word	0x08008e67
 8008e3c:	08008e5f 	.word	0x08008e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e40:	f7fd fa90 	bl	8006364 <HAL_RCC_GetPCLK1Freq>
 8008e44:	61b8      	str	r0, [r7, #24]
        break;
 8008e46:	e013      	b.n	8008e70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e48:	f7fd faa0 	bl	800638c <HAL_RCC_GetPCLK2Freq>
 8008e4c:	61b8      	str	r0, [r7, #24]
        break;
 8008e4e:	e00f      	b.n	8008e70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e50:	4b1d      	ldr	r3, [pc, #116]	; (8008ec8 <UART_SetConfig+0x4c4>)
 8008e52:	61bb      	str	r3, [r7, #24]
        break;
 8008e54:	e00c      	b.n	8008e70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e56:	f7fd f973 	bl	8006140 <HAL_RCC_GetSysClockFreq>
 8008e5a:	61b8      	str	r0, [r7, #24]
        break;
 8008e5c:	e008      	b.n	8008e70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e62:	61bb      	str	r3, [r7, #24]
        break;
 8008e64:	e004      	b.n	8008e70 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	77bb      	strb	r3, [r7, #30]
        break;
 8008e6e:	bf00      	nop
    }

    if (pclk != 0U)
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d018      	beq.n	8008ea8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	085a      	lsrs	r2, r3, #1
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	441a      	add	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	2b0f      	cmp	r3, #15
 8008e8e:	d909      	bls.n	8008ea4 <UART_SetConfig+0x4a0>
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e96:	d205      	bcs.n	8008ea4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	60da      	str	r2, [r3, #12]
 8008ea2:	e001      	b.n	8008ea8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008eb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3720      	adds	r7, #32
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	40007c00 	.word	0x40007c00
 8008ec4:	40023800 	.word	0x40023800
 8008ec8:	00f42400 	.word	0x00f42400

08008ecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00a      	beq.n	8008ef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	f003 0302 	and.w	r3, r3, #2
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00a      	beq.n	8008f18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	430a      	orrs	r2, r1
 8008f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	f003 0304 	and.w	r3, r3, #4
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00a      	beq.n	8008f3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	f003 0308 	and.w	r3, r3, #8
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f60:	f003 0310 	and.w	r3, r3, #16
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00a      	beq.n	8008f7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f82:	f003 0320 	and.w	r3, r3, #32
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00a      	beq.n	8008fa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d01a      	beq.n	8008fe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fca:	d10a      	bne.n	8008fe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00a      	beq.n	8009004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	430a      	orrs	r2, r1
 8009002:	605a      	str	r2, [r3, #4]
  }
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af02      	add	r7, sp, #8
 8009016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009020:	f7fb fd7c 	bl	8004b1c <HAL_GetTick>
 8009024:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0308 	and.w	r3, r3, #8
 8009030:	2b08      	cmp	r3, #8
 8009032:	d10e      	bne.n	8009052 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f81b 	bl	800907e <UART_WaitOnFlagUntilTimeout>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800904e:	2303      	movs	r3, #3
 8009050:	e011      	b.n	8009076 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2220      	movs	r2, #32
 8009056:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2220      	movs	r2, #32
 800905c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b09c      	sub	sp, #112	; 0x70
 8009082:	af00      	add	r7, sp, #0
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	60b9      	str	r1, [r7, #8]
 8009088:	603b      	str	r3, [r7, #0]
 800908a:	4613      	mov	r3, r2
 800908c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800908e:	e0a7      	b.n	80091e0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009096:	f000 80a3 	beq.w	80091e0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800909a:	f7fb fd3f 	bl	8004b1c <HAL_GetTick>
 800909e:	4602      	mov	r2, r0
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d302      	bcc.n	80090b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80090aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d13f      	bne.n	8009130 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80090be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090c4:	667b      	str	r3, [r7, #100]	; 0x64
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80090dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e6      	bne.n	80090b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3308      	adds	r3, #8
 80090e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ec:	e853 3f00 	ldrex	r3, [r3]
 80090f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f4:	f023 0301 	bic.w	r3, r3, #1
 80090f8:	663b      	str	r3, [r7, #96]	; 0x60
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3308      	adds	r3, #8
 8009100:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009102:	64ba      	str	r2, [r7, #72]	; 0x48
 8009104:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009106:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800910a:	e841 2300 	strex	r3, r2, [r1]
 800910e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1e5      	bne.n	80090e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2220      	movs	r2, #32
 800911a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2220      	movs	r2, #32
 8009120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e068      	b.n	8009202 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0304 	and.w	r3, r3, #4
 800913a:	2b00      	cmp	r3, #0
 800913c:	d050      	beq.n	80091e0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800914c:	d148      	bne.n	80091e0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009156:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800916c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009176:	637b      	str	r3, [r7, #52]	; 0x34
 8009178:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800917c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e6      	bne.n	8009158 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3308      	adds	r3, #8
 8009190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	e853 3f00 	ldrex	r3, [r3]
 8009198:	613b      	str	r3, [r7, #16]
   return(result);
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f023 0301 	bic.w	r3, r3, #1
 80091a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3308      	adds	r3, #8
 80091a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091aa:	623a      	str	r2, [r7, #32]
 80091ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ae:	69f9      	ldr	r1, [r7, #28]
 80091b0:	6a3a      	ldr	r2, [r7, #32]
 80091b2:	e841 2300 	strex	r3, r2, [r1]
 80091b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1e5      	bne.n	800918a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2220      	movs	r2, #32
 80091c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2220      	movs	r2, #32
 80091c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2220      	movs	r2, #32
 80091d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e010      	b.n	8009202 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	69da      	ldr	r2, [r3, #28]
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	4013      	ands	r3, r2
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	bf0c      	ite	eq
 80091f0:	2301      	moveq	r3, #1
 80091f2:	2300      	movne	r3, #0
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	461a      	mov	r2, r3
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	f43f af48 	beq.w	8009090 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3770      	adds	r7, #112	; 0x70
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800920a:	b480      	push	{r7}
 800920c:	b095      	sub	sp, #84	; 0x54
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921a:	e853 3f00 	ldrex	r3, [r3]
 800921e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009222:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	461a      	mov	r2, r3
 800922e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009230:	643b      	str	r3, [r7, #64]	; 0x40
 8009232:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009234:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009236:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009238:	e841 2300 	strex	r3, r2, [r1]
 800923c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1e6      	bne.n	8009212 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3308      	adds	r3, #8
 800924a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	e853 3f00 	ldrex	r3, [r3]
 8009252:	61fb      	str	r3, [r7, #28]
   return(result);
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	f023 0301 	bic.w	r3, r3, #1
 800925a:	64bb      	str	r3, [r7, #72]	; 0x48
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	3308      	adds	r3, #8
 8009262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009264:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800926a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800926c:	e841 2300 	strex	r3, r2, [r1]
 8009270:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1e5      	bne.n	8009244 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800927c:	2b01      	cmp	r3, #1
 800927e:	d118      	bne.n	80092b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	e853 3f00 	ldrex	r3, [r3]
 800928c:	60bb      	str	r3, [r7, #8]
   return(result);
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f023 0310 	bic.w	r3, r3, #16
 8009294:	647b      	str	r3, [r7, #68]	; 0x44
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800929e:	61bb      	str	r3, [r7, #24]
 80092a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a2:	6979      	ldr	r1, [r7, #20]
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	e841 2300 	strex	r3, r2, [r1]
 80092aa:	613b      	str	r3, [r7, #16]
   return(result);
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1e6      	bne.n	8009280 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2220      	movs	r2, #32
 80092b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80092c6:	bf00      	nop
 80092c8:	3754      	adds	r7, #84	; 0x54
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b084      	sub	sp, #16
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092fa:	bf00      	nop
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b088      	sub	sp, #32
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	e853 3f00 	ldrex	r3, [r3]
 8009316:	60bb      	str	r3, [r7, #8]
   return(result);
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800931e:	61fb      	str	r3, [r7, #28]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	461a      	mov	r2, r3
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	61bb      	str	r3, [r7, #24]
 800932a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932c:	6979      	ldr	r1, [r7, #20]
 800932e:	69ba      	ldr	r2, [r7, #24]
 8009330:	e841 2300 	strex	r3, r2, [r1]
 8009334:	613b      	str	r3, [r7, #16]
   return(result);
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1e6      	bne.n	800930a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2220      	movs	r2, #32
 8009340:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009352:	bf00      	nop
 8009354:	3720      	adds	r7, #32
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <_ZdlPvj>:
 800935a:	f000 b811 	b.w	8009380 <_ZdlPv>

0800935e <_Znwj>:
 800935e:	2801      	cmp	r0, #1
 8009360:	bf38      	it	cc
 8009362:	2001      	movcc	r0, #1
 8009364:	b510      	push	{r4, lr}
 8009366:	4604      	mov	r4, r0
 8009368:	4620      	mov	r0, r4
 800936a:	f000 f81b 	bl	80093a4 <malloc>
 800936e:	b100      	cbz	r0, 8009372 <_Znwj+0x14>
 8009370:	bd10      	pop	{r4, pc}
 8009372:	f000 f807 	bl	8009384 <_ZSt15get_new_handlerv>
 8009376:	b908      	cbnz	r0, 800937c <_Znwj+0x1e>
 8009378:	f000 f80c 	bl	8009394 <abort>
 800937c:	4780      	blx	r0
 800937e:	e7f3      	b.n	8009368 <_Znwj+0xa>

08009380 <_ZdlPv>:
 8009380:	f000 b818 	b.w	80093b4 <free>

08009384 <_ZSt15get_new_handlerv>:
 8009384:	4b02      	ldr	r3, [pc, #8]	; (8009390 <_ZSt15get_new_handlerv+0xc>)
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	f3bf 8f5b 	dmb	ish
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	200003a0 	.word	0x200003a0

08009394 <abort>:
 8009394:	b508      	push	{r3, lr}
 8009396:	2006      	movs	r0, #6
 8009398:	f000 f8f0 	bl	800957c <raise>
 800939c:	2001      	movs	r0, #1
 800939e:	f7fa ff83 	bl	80042a8 <_exit>
	...

080093a4 <malloc>:
 80093a4:	4b02      	ldr	r3, [pc, #8]	; (80093b0 <malloc+0xc>)
 80093a6:	4601      	mov	r1, r0
 80093a8:	6818      	ldr	r0, [r3, #0]
 80093aa:	f000 b82b 	b.w	8009404 <_malloc_r>
 80093ae:	bf00      	nop
 80093b0:	20000114 	.word	0x20000114

080093b4 <free>:
 80093b4:	4b02      	ldr	r3, [pc, #8]	; (80093c0 <free+0xc>)
 80093b6:	4601      	mov	r1, r0
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	f000 b945 	b.w	8009648 <_free_r>
 80093be:	bf00      	nop
 80093c0:	20000114 	.word	0x20000114

080093c4 <sbrk_aligned>:
 80093c4:	b570      	push	{r4, r5, r6, lr}
 80093c6:	4e0e      	ldr	r6, [pc, #56]	; (8009400 <sbrk_aligned+0x3c>)
 80093c8:	460c      	mov	r4, r1
 80093ca:	6831      	ldr	r1, [r6, #0]
 80093cc:	4605      	mov	r5, r0
 80093ce:	b911      	cbnz	r1, 80093d6 <sbrk_aligned+0x12>
 80093d0:	f000 f8f0 	bl	80095b4 <_sbrk_r>
 80093d4:	6030      	str	r0, [r6, #0]
 80093d6:	4621      	mov	r1, r4
 80093d8:	4628      	mov	r0, r5
 80093da:	f000 f8eb 	bl	80095b4 <_sbrk_r>
 80093de:	1c43      	adds	r3, r0, #1
 80093e0:	d00a      	beq.n	80093f8 <sbrk_aligned+0x34>
 80093e2:	1cc4      	adds	r4, r0, #3
 80093e4:	f024 0403 	bic.w	r4, r4, #3
 80093e8:	42a0      	cmp	r0, r4
 80093ea:	d007      	beq.n	80093fc <sbrk_aligned+0x38>
 80093ec:	1a21      	subs	r1, r4, r0
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 f8e0 	bl	80095b4 <_sbrk_r>
 80093f4:	3001      	adds	r0, #1
 80093f6:	d101      	bne.n	80093fc <sbrk_aligned+0x38>
 80093f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80093fc:	4620      	mov	r0, r4
 80093fe:	bd70      	pop	{r4, r5, r6, pc}
 8009400:	200003a8 	.word	0x200003a8

08009404 <_malloc_r>:
 8009404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009408:	1ccd      	adds	r5, r1, #3
 800940a:	f025 0503 	bic.w	r5, r5, #3
 800940e:	3508      	adds	r5, #8
 8009410:	2d0c      	cmp	r5, #12
 8009412:	bf38      	it	cc
 8009414:	250c      	movcc	r5, #12
 8009416:	2d00      	cmp	r5, #0
 8009418:	4607      	mov	r7, r0
 800941a:	db01      	blt.n	8009420 <_malloc_r+0x1c>
 800941c:	42a9      	cmp	r1, r5
 800941e:	d905      	bls.n	800942c <_malloc_r+0x28>
 8009420:	230c      	movs	r3, #12
 8009422:	603b      	str	r3, [r7, #0]
 8009424:	2600      	movs	r6, #0
 8009426:	4630      	mov	r0, r6
 8009428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800942c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009500 <_malloc_r+0xfc>
 8009430:	f000 f868 	bl	8009504 <__malloc_lock>
 8009434:	f8d8 3000 	ldr.w	r3, [r8]
 8009438:	461c      	mov	r4, r3
 800943a:	bb5c      	cbnz	r4, 8009494 <_malloc_r+0x90>
 800943c:	4629      	mov	r1, r5
 800943e:	4638      	mov	r0, r7
 8009440:	f7ff ffc0 	bl	80093c4 <sbrk_aligned>
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	4604      	mov	r4, r0
 8009448:	d155      	bne.n	80094f6 <_malloc_r+0xf2>
 800944a:	f8d8 4000 	ldr.w	r4, [r8]
 800944e:	4626      	mov	r6, r4
 8009450:	2e00      	cmp	r6, #0
 8009452:	d145      	bne.n	80094e0 <_malloc_r+0xdc>
 8009454:	2c00      	cmp	r4, #0
 8009456:	d048      	beq.n	80094ea <_malloc_r+0xe6>
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	4631      	mov	r1, r6
 800945c:	4638      	mov	r0, r7
 800945e:	eb04 0903 	add.w	r9, r4, r3
 8009462:	f000 f8a7 	bl	80095b4 <_sbrk_r>
 8009466:	4581      	cmp	r9, r0
 8009468:	d13f      	bne.n	80094ea <_malloc_r+0xe6>
 800946a:	6821      	ldr	r1, [r4, #0]
 800946c:	1a6d      	subs	r5, r5, r1
 800946e:	4629      	mov	r1, r5
 8009470:	4638      	mov	r0, r7
 8009472:	f7ff ffa7 	bl	80093c4 <sbrk_aligned>
 8009476:	3001      	adds	r0, #1
 8009478:	d037      	beq.n	80094ea <_malloc_r+0xe6>
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	442b      	add	r3, r5
 800947e:	6023      	str	r3, [r4, #0]
 8009480:	f8d8 3000 	ldr.w	r3, [r8]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d038      	beq.n	80094fa <_malloc_r+0xf6>
 8009488:	685a      	ldr	r2, [r3, #4]
 800948a:	42a2      	cmp	r2, r4
 800948c:	d12b      	bne.n	80094e6 <_malloc_r+0xe2>
 800948e:	2200      	movs	r2, #0
 8009490:	605a      	str	r2, [r3, #4]
 8009492:	e00f      	b.n	80094b4 <_malloc_r+0xb0>
 8009494:	6822      	ldr	r2, [r4, #0]
 8009496:	1b52      	subs	r2, r2, r5
 8009498:	d41f      	bmi.n	80094da <_malloc_r+0xd6>
 800949a:	2a0b      	cmp	r2, #11
 800949c:	d917      	bls.n	80094ce <_malloc_r+0xca>
 800949e:	1961      	adds	r1, r4, r5
 80094a0:	42a3      	cmp	r3, r4
 80094a2:	6025      	str	r5, [r4, #0]
 80094a4:	bf18      	it	ne
 80094a6:	6059      	strne	r1, [r3, #4]
 80094a8:	6863      	ldr	r3, [r4, #4]
 80094aa:	bf08      	it	eq
 80094ac:	f8c8 1000 	streq.w	r1, [r8]
 80094b0:	5162      	str	r2, [r4, r5]
 80094b2:	604b      	str	r3, [r1, #4]
 80094b4:	4638      	mov	r0, r7
 80094b6:	f104 060b 	add.w	r6, r4, #11
 80094ba:	f000 f829 	bl	8009510 <__malloc_unlock>
 80094be:	f026 0607 	bic.w	r6, r6, #7
 80094c2:	1d23      	adds	r3, r4, #4
 80094c4:	1af2      	subs	r2, r6, r3
 80094c6:	d0ae      	beq.n	8009426 <_malloc_r+0x22>
 80094c8:	1b9b      	subs	r3, r3, r6
 80094ca:	50a3      	str	r3, [r4, r2]
 80094cc:	e7ab      	b.n	8009426 <_malloc_r+0x22>
 80094ce:	42a3      	cmp	r3, r4
 80094d0:	6862      	ldr	r2, [r4, #4]
 80094d2:	d1dd      	bne.n	8009490 <_malloc_r+0x8c>
 80094d4:	f8c8 2000 	str.w	r2, [r8]
 80094d8:	e7ec      	b.n	80094b4 <_malloc_r+0xb0>
 80094da:	4623      	mov	r3, r4
 80094dc:	6864      	ldr	r4, [r4, #4]
 80094de:	e7ac      	b.n	800943a <_malloc_r+0x36>
 80094e0:	4634      	mov	r4, r6
 80094e2:	6876      	ldr	r6, [r6, #4]
 80094e4:	e7b4      	b.n	8009450 <_malloc_r+0x4c>
 80094e6:	4613      	mov	r3, r2
 80094e8:	e7cc      	b.n	8009484 <_malloc_r+0x80>
 80094ea:	230c      	movs	r3, #12
 80094ec:	603b      	str	r3, [r7, #0]
 80094ee:	4638      	mov	r0, r7
 80094f0:	f000 f80e 	bl	8009510 <__malloc_unlock>
 80094f4:	e797      	b.n	8009426 <_malloc_r+0x22>
 80094f6:	6025      	str	r5, [r4, #0]
 80094f8:	e7dc      	b.n	80094b4 <_malloc_r+0xb0>
 80094fa:	605b      	str	r3, [r3, #4]
 80094fc:	deff      	udf	#255	; 0xff
 80094fe:	bf00      	nop
 8009500:	200003a4 	.word	0x200003a4

08009504 <__malloc_lock>:
 8009504:	4801      	ldr	r0, [pc, #4]	; (800950c <__malloc_lock+0x8>)
 8009506:	f000 b88f 	b.w	8009628 <__retarget_lock_acquire_recursive>
 800950a:	bf00      	nop
 800950c:	200004e8 	.word	0x200004e8

08009510 <__malloc_unlock>:
 8009510:	4801      	ldr	r0, [pc, #4]	; (8009518 <__malloc_unlock+0x8>)
 8009512:	f000 b88a 	b.w	800962a <__retarget_lock_release_recursive>
 8009516:	bf00      	nop
 8009518:	200004e8 	.word	0x200004e8

0800951c <memset>:
 800951c:	4402      	add	r2, r0
 800951e:	4603      	mov	r3, r0
 8009520:	4293      	cmp	r3, r2
 8009522:	d100      	bne.n	8009526 <memset+0xa>
 8009524:	4770      	bx	lr
 8009526:	f803 1b01 	strb.w	r1, [r3], #1
 800952a:	e7f9      	b.n	8009520 <memset+0x4>

0800952c <_raise_r>:
 800952c:	291f      	cmp	r1, #31
 800952e:	b538      	push	{r3, r4, r5, lr}
 8009530:	4604      	mov	r4, r0
 8009532:	460d      	mov	r5, r1
 8009534:	d904      	bls.n	8009540 <_raise_r+0x14>
 8009536:	2316      	movs	r3, #22
 8009538:	6003      	str	r3, [r0, #0]
 800953a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009542:	b112      	cbz	r2, 800954a <_raise_r+0x1e>
 8009544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009548:	b94b      	cbnz	r3, 800955e <_raise_r+0x32>
 800954a:	4620      	mov	r0, r4
 800954c:	f000 f830 	bl	80095b0 <_getpid_r>
 8009550:	462a      	mov	r2, r5
 8009552:	4601      	mov	r1, r0
 8009554:	4620      	mov	r0, r4
 8009556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800955a:	f000 b817 	b.w	800958c <_kill_r>
 800955e:	2b01      	cmp	r3, #1
 8009560:	d00a      	beq.n	8009578 <_raise_r+0x4c>
 8009562:	1c59      	adds	r1, r3, #1
 8009564:	d103      	bne.n	800956e <_raise_r+0x42>
 8009566:	2316      	movs	r3, #22
 8009568:	6003      	str	r3, [r0, #0]
 800956a:	2001      	movs	r0, #1
 800956c:	e7e7      	b.n	800953e <_raise_r+0x12>
 800956e:	2400      	movs	r4, #0
 8009570:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009574:	4628      	mov	r0, r5
 8009576:	4798      	blx	r3
 8009578:	2000      	movs	r0, #0
 800957a:	e7e0      	b.n	800953e <_raise_r+0x12>

0800957c <raise>:
 800957c:	4b02      	ldr	r3, [pc, #8]	; (8009588 <raise+0xc>)
 800957e:	4601      	mov	r1, r0
 8009580:	6818      	ldr	r0, [r3, #0]
 8009582:	f7ff bfd3 	b.w	800952c <_raise_r>
 8009586:	bf00      	nop
 8009588:	20000114 	.word	0x20000114

0800958c <_kill_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	4d07      	ldr	r5, [pc, #28]	; (80095ac <_kill_r+0x20>)
 8009590:	2300      	movs	r3, #0
 8009592:	4604      	mov	r4, r0
 8009594:	4608      	mov	r0, r1
 8009596:	4611      	mov	r1, r2
 8009598:	602b      	str	r3, [r5, #0]
 800959a:	f7fa fe75 	bl	8004288 <_kill>
 800959e:	1c43      	adds	r3, r0, #1
 80095a0:	d102      	bne.n	80095a8 <_kill_r+0x1c>
 80095a2:	682b      	ldr	r3, [r5, #0]
 80095a4:	b103      	cbz	r3, 80095a8 <_kill_r+0x1c>
 80095a6:	6023      	str	r3, [r4, #0]
 80095a8:	bd38      	pop	{r3, r4, r5, pc}
 80095aa:	bf00      	nop
 80095ac:	200004e4 	.word	0x200004e4

080095b0 <_getpid_r>:
 80095b0:	f7fa be62 	b.w	8004278 <_getpid>

080095b4 <_sbrk_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4d06      	ldr	r5, [pc, #24]	; (80095d0 <_sbrk_r+0x1c>)
 80095b8:	2300      	movs	r3, #0
 80095ba:	4604      	mov	r4, r0
 80095bc:	4608      	mov	r0, r1
 80095be:	602b      	str	r3, [r5, #0]
 80095c0:	f7fa fe7c 	bl	80042bc <_sbrk>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	d102      	bne.n	80095ce <_sbrk_r+0x1a>
 80095c8:	682b      	ldr	r3, [r5, #0]
 80095ca:	b103      	cbz	r3, 80095ce <_sbrk_r+0x1a>
 80095cc:	6023      	str	r3, [r4, #0]
 80095ce:	bd38      	pop	{r3, r4, r5, pc}
 80095d0:	200004e4 	.word	0x200004e4

080095d4 <__errno>:
 80095d4:	4b01      	ldr	r3, [pc, #4]	; (80095dc <__errno+0x8>)
 80095d6:	6818      	ldr	r0, [r3, #0]
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	20000114 	.word	0x20000114

080095e0 <__libc_init_array>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	4d0d      	ldr	r5, [pc, #52]	; (8009618 <__libc_init_array+0x38>)
 80095e4:	4c0d      	ldr	r4, [pc, #52]	; (800961c <__libc_init_array+0x3c>)
 80095e6:	1b64      	subs	r4, r4, r5
 80095e8:	10a4      	asrs	r4, r4, #2
 80095ea:	2600      	movs	r6, #0
 80095ec:	42a6      	cmp	r6, r4
 80095ee:	d109      	bne.n	8009604 <__libc_init_array+0x24>
 80095f0:	4d0b      	ldr	r5, [pc, #44]	; (8009620 <__libc_init_array+0x40>)
 80095f2:	4c0c      	ldr	r4, [pc, #48]	; (8009624 <__libc_init_array+0x44>)
 80095f4:	f000 f874 	bl	80096e0 <_init>
 80095f8:	1b64      	subs	r4, r4, r5
 80095fa:	10a4      	asrs	r4, r4, #2
 80095fc:	2600      	movs	r6, #0
 80095fe:	42a6      	cmp	r6, r4
 8009600:	d105      	bne.n	800960e <__libc_init_array+0x2e>
 8009602:	bd70      	pop	{r4, r5, r6, pc}
 8009604:	f855 3b04 	ldr.w	r3, [r5], #4
 8009608:	4798      	blx	r3
 800960a:	3601      	adds	r6, #1
 800960c:	e7ee      	b.n	80095ec <__libc_init_array+0xc>
 800960e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009612:	4798      	blx	r3
 8009614:	3601      	adds	r6, #1
 8009616:	e7f2      	b.n	80095fe <__libc_init_array+0x1e>
 8009618:	080097f4 	.word	0x080097f4
 800961c:	080097f4 	.word	0x080097f4
 8009620:	080097f4 	.word	0x080097f4
 8009624:	080097f8 	.word	0x080097f8

08009628 <__retarget_lock_acquire_recursive>:
 8009628:	4770      	bx	lr

0800962a <__retarget_lock_release_recursive>:
 800962a:	4770      	bx	lr

0800962c <memcpy>:
 800962c:	440a      	add	r2, r1
 800962e:	4291      	cmp	r1, r2
 8009630:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009634:	d100      	bne.n	8009638 <memcpy+0xc>
 8009636:	4770      	bx	lr
 8009638:	b510      	push	{r4, lr}
 800963a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800963e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009642:	4291      	cmp	r1, r2
 8009644:	d1f9      	bne.n	800963a <memcpy+0xe>
 8009646:	bd10      	pop	{r4, pc}

08009648 <_free_r>:
 8009648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800964a:	2900      	cmp	r1, #0
 800964c:	d044      	beq.n	80096d8 <_free_r+0x90>
 800964e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009652:	9001      	str	r0, [sp, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	f1a1 0404 	sub.w	r4, r1, #4
 800965a:	bfb8      	it	lt
 800965c:	18e4      	addlt	r4, r4, r3
 800965e:	f7ff ff51 	bl	8009504 <__malloc_lock>
 8009662:	4a1e      	ldr	r2, [pc, #120]	; (80096dc <_free_r+0x94>)
 8009664:	9801      	ldr	r0, [sp, #4]
 8009666:	6813      	ldr	r3, [r2, #0]
 8009668:	b933      	cbnz	r3, 8009678 <_free_r+0x30>
 800966a:	6063      	str	r3, [r4, #4]
 800966c:	6014      	str	r4, [r2, #0]
 800966e:	b003      	add	sp, #12
 8009670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009674:	f7ff bf4c 	b.w	8009510 <__malloc_unlock>
 8009678:	42a3      	cmp	r3, r4
 800967a:	d908      	bls.n	800968e <_free_r+0x46>
 800967c:	6825      	ldr	r5, [r4, #0]
 800967e:	1961      	adds	r1, r4, r5
 8009680:	428b      	cmp	r3, r1
 8009682:	bf01      	itttt	eq
 8009684:	6819      	ldreq	r1, [r3, #0]
 8009686:	685b      	ldreq	r3, [r3, #4]
 8009688:	1949      	addeq	r1, r1, r5
 800968a:	6021      	streq	r1, [r4, #0]
 800968c:	e7ed      	b.n	800966a <_free_r+0x22>
 800968e:	461a      	mov	r2, r3
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	b10b      	cbz	r3, 8009698 <_free_r+0x50>
 8009694:	42a3      	cmp	r3, r4
 8009696:	d9fa      	bls.n	800968e <_free_r+0x46>
 8009698:	6811      	ldr	r1, [r2, #0]
 800969a:	1855      	adds	r5, r2, r1
 800969c:	42a5      	cmp	r5, r4
 800969e:	d10b      	bne.n	80096b8 <_free_r+0x70>
 80096a0:	6824      	ldr	r4, [r4, #0]
 80096a2:	4421      	add	r1, r4
 80096a4:	1854      	adds	r4, r2, r1
 80096a6:	42a3      	cmp	r3, r4
 80096a8:	6011      	str	r1, [r2, #0]
 80096aa:	d1e0      	bne.n	800966e <_free_r+0x26>
 80096ac:	681c      	ldr	r4, [r3, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	6053      	str	r3, [r2, #4]
 80096b2:	440c      	add	r4, r1
 80096b4:	6014      	str	r4, [r2, #0]
 80096b6:	e7da      	b.n	800966e <_free_r+0x26>
 80096b8:	d902      	bls.n	80096c0 <_free_r+0x78>
 80096ba:	230c      	movs	r3, #12
 80096bc:	6003      	str	r3, [r0, #0]
 80096be:	e7d6      	b.n	800966e <_free_r+0x26>
 80096c0:	6825      	ldr	r5, [r4, #0]
 80096c2:	1961      	adds	r1, r4, r5
 80096c4:	428b      	cmp	r3, r1
 80096c6:	bf04      	itt	eq
 80096c8:	6819      	ldreq	r1, [r3, #0]
 80096ca:	685b      	ldreq	r3, [r3, #4]
 80096cc:	6063      	str	r3, [r4, #4]
 80096ce:	bf04      	itt	eq
 80096d0:	1949      	addeq	r1, r1, r5
 80096d2:	6021      	streq	r1, [r4, #0]
 80096d4:	6054      	str	r4, [r2, #4]
 80096d6:	e7ca      	b.n	800966e <_free_r+0x26>
 80096d8:	b003      	add	sp, #12
 80096da:	bd30      	pop	{r4, r5, pc}
 80096dc:	200003a4 	.word	0x200003a4

080096e0 <_init>:
 80096e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e2:	bf00      	nop
 80096e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e6:	bc08      	pop	{r3}
 80096e8:	469e      	mov	lr, r3
 80096ea:	4770      	bx	lr

080096ec <_fini>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	bf00      	nop
 80096f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f2:	bc08      	pop	{r3}
 80096f4:	469e      	mov	lr, r3
 80096f6:	4770      	bx	lr
