
TT_IMU_Choriboard_IV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a60c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800a7d8  0800a7d8  0001a7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a938  0800a938  000202bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a938  0800a938  0001a938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a940  0800a940  000202bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a940  0800a940  0001a940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a944  0800a944  0001a944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  0800a948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  200002bc  0800ac04  000202bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  0800ac04  000206b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022fa4  00000000  00000000  0002032f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000066e7  00000000  00000000  000432d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bc0  00000000  00000000  000499c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ee  00000000  00000000  0004b580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ec54  00000000  00000000  0004ca6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024945  00000000  00000000  0007b6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102cad  00000000  00000000  000a0007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007994  00000000  00000000  001a2cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001aa648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200002bc 	.word	0x200002bc
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a7bc 	.word	0x0800a7bc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200002c0 	.word	0x200002c0
 8000204:	0800a7bc 	.word	0x0800a7bc

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b68:	f000 b970 	b.w	8000e4c <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9e08      	ldr	r6, [sp, #32]
 8000b8a:	460d      	mov	r5, r1
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	460f      	mov	r7, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14a      	bne.n	8000c2a <__udivmoddi4+0xa6>
 8000b94:	428a      	cmp	r2, r1
 8000b96:	4694      	mov	ip, r2
 8000b98:	d965      	bls.n	8000c66 <__udivmoddi4+0xe2>
 8000b9a:	fab2 f382 	clz	r3, r2
 8000b9e:	b143      	cbz	r3, 8000bb2 <__udivmoddi4+0x2e>
 8000ba0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba4:	f1c3 0220 	rsb	r2, r3, #32
 8000ba8:	409f      	lsls	r7, r3
 8000baa:	fa20 f202 	lsr.w	r2, r0, r2
 8000bae:	4317      	orrs	r7, r2
 8000bb0:	409c      	lsls	r4, r3
 8000bb2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bb6:	fa1f f58c 	uxth.w	r5, ip
 8000bba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bbe:	0c22      	lsrs	r2, r4, #16
 8000bc0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bc8:	fb01 f005 	mul.w	r0, r1, r5
 8000bcc:	4290      	cmp	r0, r2
 8000bce:	d90a      	bls.n	8000be6 <__udivmoddi4+0x62>
 8000bd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bd8:	f080 811c 	bcs.w	8000e14 <__udivmoddi4+0x290>
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	f240 8119 	bls.w	8000e14 <__udivmoddi4+0x290>
 8000be2:	3902      	subs	r1, #2
 8000be4:	4462      	add	r2, ip
 8000be6:	1a12      	subs	r2, r2, r0
 8000be8:	b2a4      	uxth	r4, r4
 8000bea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf6:	fb00 f505 	mul.w	r5, r0, r5
 8000bfa:	42a5      	cmp	r5, r4
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x90>
 8000bfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000c02:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x294>
 8000c0a:	42a5      	cmp	r5, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x294>
 8000c10:	4464      	add	r4, ip
 8000c12:	3802      	subs	r0, #2
 8000c14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c18:	1b64      	subs	r4, r4, r5
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	b11e      	cbz	r6, 8000c26 <__udivmoddi4+0xa2>
 8000c1e:	40dc      	lsrs	r4, r3
 8000c20:	2300      	movs	r3, #0
 8000c22:	e9c6 4300 	strd	r4, r3, [r6]
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0xbc>
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	f000 80ed 	beq.w	8000e0e <__udivmoddi4+0x28a>
 8000c34:	2100      	movs	r1, #0
 8000c36:	e9c6 0500 	strd	r0, r5, [r6]
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c40:	fab3 f183 	clz	r1, r3
 8000c44:	2900      	cmp	r1, #0
 8000c46:	d149      	bne.n	8000cdc <__udivmoddi4+0x158>
 8000c48:	42ab      	cmp	r3, r5
 8000c4a:	d302      	bcc.n	8000c52 <__udivmoddi4+0xce>
 8000c4c:	4282      	cmp	r2, r0
 8000c4e:	f200 80f8 	bhi.w	8000e42 <__udivmoddi4+0x2be>
 8000c52:	1a84      	subs	r4, r0, r2
 8000c54:	eb65 0203 	sbc.w	r2, r5, r3
 8000c58:	2001      	movs	r0, #1
 8000c5a:	4617      	mov	r7, r2
 8000c5c:	2e00      	cmp	r6, #0
 8000c5e:	d0e2      	beq.n	8000c26 <__udivmoddi4+0xa2>
 8000c60:	e9c6 4700 	strd	r4, r7, [r6]
 8000c64:	e7df      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xe6>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f382 	clz	r3, r2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f040 8090 	bne.w	8000d94 <__udivmoddi4+0x210>
 8000c74:	1a8a      	subs	r2, r1, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f fe8c 	uxth.w	lr, ip
 8000c7e:	2101      	movs	r1, #1
 8000c80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c84:	fb07 2015 	mls	r0, r7, r5, r2
 8000c88:	0c22      	lsrs	r2, r4, #16
 8000c8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c8e:	fb0e f005 	mul.w	r0, lr, r5
 8000c92:	4290      	cmp	r0, r2
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x124>
 8000c96:	eb1c 0202 	adds.w	r2, ip, r2
 8000c9a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x122>
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	f200 80cb 	bhi.w	8000e3c <__udivmoddi4+0x2b8>
 8000ca6:	4645      	mov	r5, r8
 8000ca8:	1a12      	subs	r2, r2, r0
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cbc:	45a6      	cmp	lr, r4
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x14e>
 8000cc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cc8:	d202      	bcs.n	8000cd0 <__udivmoddi4+0x14c>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f200 80bb 	bhi.w	8000e46 <__udivmoddi4+0x2c2>
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	eba4 040e 	sub.w	r4, r4, lr
 8000cd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cda:	e79f      	b.n	8000c1c <__udivmoddi4+0x98>
 8000cdc:	f1c1 0720 	rsb	r7, r1, #32
 8000ce0:	408b      	lsls	r3, r1
 8000ce2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cea:	fa05 f401 	lsl.w	r4, r5, r1
 8000cee:	fa20 f307 	lsr.w	r3, r0, r7
 8000cf2:	40fd      	lsrs	r5, r7
 8000cf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf8:	4323      	orrs	r3, r4
 8000cfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	fb09 5518 	mls	r5, r9, r8, r5
 8000d06:	0c1c      	lsrs	r4, r3, #16
 8000d08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d10:	42a5      	cmp	r5, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	fa00 f001 	lsl.w	r0, r0, r1
 8000d1a:	d90b      	bls.n	8000d34 <__udivmoddi4+0x1b0>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d24:	f080 8088 	bcs.w	8000e38 <__udivmoddi4+0x2b4>
 8000d28:	42a5      	cmp	r5, r4
 8000d2a:	f240 8085 	bls.w	8000e38 <__udivmoddi4+0x2b4>
 8000d2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d32:	4464      	add	r4, ip
 8000d34:	1b64      	subs	r4, r4, r5
 8000d36:	b29d      	uxth	r5, r3
 8000d38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x1da>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d54:	d26c      	bcs.n	8000e30 <__udivmoddi4+0x2ac>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	d96a      	bls.n	8000e30 <__udivmoddi4+0x2ac>
 8000d5a:	3b02      	subs	r3, #2
 8000d5c:	4464      	add	r4, ip
 8000d5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d62:	fba3 9502 	umull	r9, r5, r3, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	42ac      	cmp	r4, r5
 8000d6c:	46c8      	mov	r8, r9
 8000d6e:	46ae      	mov	lr, r5
 8000d70:	d356      	bcc.n	8000e20 <__udivmoddi4+0x29c>
 8000d72:	d053      	beq.n	8000e1c <__udivmoddi4+0x298>
 8000d74:	b156      	cbz	r6, 8000d8c <__udivmoddi4+0x208>
 8000d76:	ebb0 0208 	subs.w	r2, r0, r8
 8000d7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d82:	40ca      	lsrs	r2, r1
 8000d84:	40cc      	lsrs	r4, r1
 8000d86:	4317      	orrs	r7, r2
 8000d88:	e9c6 7400 	strd	r7, r4, [r6]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	2100      	movs	r1, #0
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	f1c3 0120 	rsb	r1, r3, #32
 8000d98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000da0:	fa25 f101 	lsr.w	r1, r5, r1
 8000da4:	409d      	lsls	r5, r3
 8000da6:	432a      	orrs	r2, r5
 8000da8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dac:	fa1f fe8c 	uxth.w	lr, ip
 8000db0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db4:	fb07 1510 	mls	r5, r7, r0, r1
 8000db8:	0c11      	lsrs	r1, r2, #16
 8000dba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000dc2:	428d      	cmp	r5, r1
 8000dc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x258>
 8000dca:	eb1c 0101 	adds.w	r1, ip, r1
 8000dce:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dd2:	d22f      	bcs.n	8000e34 <__udivmoddi4+0x2b0>
 8000dd4:	428d      	cmp	r5, r1
 8000dd6:	d92d      	bls.n	8000e34 <__udivmoddi4+0x2b0>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4461      	add	r1, ip
 8000ddc:	1b49      	subs	r1, r1, r5
 8000dde:	b292      	uxth	r2, r2
 8000de0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000de4:	fb07 1115 	mls	r1, r7, r5, r1
 8000de8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dec:	fb05 f10e 	mul.w	r1, r5, lr
 8000df0:	4291      	cmp	r1, r2
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x282>
 8000df4:	eb1c 0202 	adds.w	r2, ip, r2
 8000df8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dfc:	d216      	bcs.n	8000e2c <__udivmoddi4+0x2a8>
 8000dfe:	4291      	cmp	r1, r2
 8000e00:	d914      	bls.n	8000e2c <__udivmoddi4+0x2a8>
 8000e02:	3d02      	subs	r5, #2
 8000e04:	4462      	add	r2, ip
 8000e06:	1a52      	subs	r2, r2, r1
 8000e08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e0c:	e738      	b.n	8000c80 <__udivmoddi4+0xfc>
 8000e0e:	4631      	mov	r1, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e708      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000e14:	4639      	mov	r1, r7
 8000e16:	e6e6      	b.n	8000be6 <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x90>
 8000e1c:	4548      	cmp	r0, r9
 8000e1e:	d2a9      	bcs.n	8000d74 <__udivmoddi4+0x1f0>
 8000e20:	ebb9 0802 	subs.w	r8, r9, r2
 8000e24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	e7a3      	b.n	8000d74 <__udivmoddi4+0x1f0>
 8000e2c:	4645      	mov	r5, r8
 8000e2e:	e7ea      	b.n	8000e06 <__udivmoddi4+0x282>
 8000e30:	462b      	mov	r3, r5
 8000e32:	e794      	b.n	8000d5e <__udivmoddi4+0x1da>
 8000e34:	4640      	mov	r0, r8
 8000e36:	e7d1      	b.n	8000ddc <__udivmoddi4+0x258>
 8000e38:	46d0      	mov	r8, sl
 8000e3a:	e77b      	b.n	8000d34 <__udivmoddi4+0x1b0>
 8000e3c:	3d02      	subs	r5, #2
 8000e3e:	4462      	add	r2, ip
 8000e40:	e732      	b.n	8000ca8 <__udivmoddi4+0x124>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e70a      	b.n	8000c5c <__udivmoddi4+0xd8>
 8000e46:	4464      	add	r4, ip
 8000e48:	3802      	subs	r0, #2
 8000e4a:	e742      	b.n	8000cd2 <__udivmoddi4+0x14e>

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <_Z15CNI_constructorP19__CAN_HandleTypeDef>:

static CNI_t _instance;


void CNI_constructor(CAN_HandleTypeDef *hcan)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	_instance.mHcan_ = hcan;
 8000e58:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]

	_instance.mCANtxHeader_.ExtId = 0;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
	_instance.mCANtxHeader_.IDE = CAN_ID_STD;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
	_instance.mCANtxHeader_.RTR = CAN_RTR_DATA;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
	_instance.mCANtxHeader_.TransmitGlobalTime = DISABLE;
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	771a      	strb	r2, [r3, #28]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	200002d8 	.word	0x200002d8

08000e88 <_Z8CNI_initv>:


void CNI_init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i = 0; i < lenCANfilterList ; i++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	e00e      	b.n	8000eb2 <_Z8CNI_initv+0x2a>
	{
		HAL_CAN_ConfigFilter(_instance.mHcan_, &CANfiltersList[i]);
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <_Z8CNI_initv+0x40>)
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <_Z8CNI_initv+0x44>)
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f005 f98c 	bl	80061c4 <HAL_CAN_ConfigFilter>
	for(i = 0; i < lenCANfilterList ; i++)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <_Z8CNI_initv+0x48>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d3eb      	bcc.n	8000e94 <_Z8CNI_initv+0xc>
	}
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200002d8 	.word	0x200002d8
 8000ecc:	200001b8 	.word	0x200001b8
 8000ed0:	2000025c 	.word	0x2000025c

08000ed4 <_Z9CNI_startv>:


void CNI_start(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	HAL_CAN_Start(_instance.mHcan_);
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <_Z9CNI_startv+0x20>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f005 fa51 	bl	8006384 <HAL_CAN_Start>
#if !IS_MASTER
    HAL_CAN_ActivateNotification(_instance.mHcan_, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <_Z9CNI_startv+0x20>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f005 fd13 	bl	8006914 <HAL_CAN_ActivateNotification>
#endif
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200002d8 	.word	0x200002d8

08000ef8 <_Z12CNI_send_msgm>:


CNI_status_t CNI_send_msg(uint32_t msgHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	uint32_t txMailbox;
	serviceID currentMsgServiceID;
	uint32_t i;

	if(msgHandle >= lenCANmsgList)
 8000f00:	4b42      	ldr	r3, [pc, #264]	; (800100c <_Z12CNI_send_msgm+0x114>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d301      	bcc.n	8000f0e <_Z12CNI_send_msgm+0x16>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e079      	b.n	8001002 <_Z12CNI_send_msgm+0x10a>
	}

	if(CANmsgList[msgHandle].mNodeID_ != MY_NODE_ID)
 8000f0e:	4940      	ldr	r1, [pc, #256]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d001      	beq.n	8000f28 <_Z12CNI_send_msgm+0x30>
	{
		return CNI_MSG_HANDLE_TX_NOT_ALLOWED;
 8000f24:	2302      	movs	r3, #2
 8000f26:	e06c      	b.n	8001002 <_Z12CNI_send_msgm+0x10a>
	}

	// Armar el mensaje
	currentMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 8000f28:	4939      	ldr	r1, [pc, #228]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	613b      	str	r3, [r7, #16]
	_instance.mCANtxHeader_.StdId = CAN_MSG_MAKE_STD_ID_TX(currentMsgServiceID);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	f043 0303 	orr.w	r3, r3, #3
 8000f42:	4a34      	ldr	r2, [pc, #208]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000f44:	6093      	str	r3, [r2, #8]

	// Pasarle el msj al periférico

	// Limpia todos los mensajes pendientes (no debería haber ninguno, pero por las dudas)
	HAL_CAN_AbortTxRequest(_instance.mHcan_,CAN_TX_MAILBOX0|CAN_TX_MAILBOX1|CAN_TX_MAILBOX2);
 8000f46:	4b33      	ldr	r3, [pc, #204]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2107      	movs	r1, #7
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f005 fb2d 	bl	80065ac <HAL_CAN_AbortTxRequest>

	// Comenzando por la posición "msgHandle" se recorre la lista de mensajes. Esto es debido
	// a que es posible que se requiera enviar más de un mensaje.
	i = msgHandle;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 8000f56:	e02a      	b.n	8000fae <_Z12CNI_send_msgm+0xb6>
	{
		while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 8000f58:	bf00      	nop
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f005 fb69 	bl	8006636 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	bf0c      	ite	eq
 8000f6a:	2301      	moveq	r3, #1
 8000f6c:	2300      	movne	r3, #0
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1f2      	bne.n	8000f5a <_Z12CNI_send_msgm+0x62>

		_instance.mCANtxHeader_.DLC = CANmsgList[i].mLenPayload_;
 8000f74:	4926      	ldr	r1, [pc, #152]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	3310      	adds	r3, #16
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a23      	ldr	r2, [pc, #140]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000f88:	6193      	str	r3, [r2, #24]
		HAL_CAN_AddTxMessage(_instance.mHcan_, &_instance.mCANtxHeader_, CANmsgList[i].mPayload_, &txMailbox);
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	3308      	adds	r3, #8
 8000f9a:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000f9c:	441a      	add	r2, r3
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	491d      	ldr	r1, [pc, #116]	; (8001018 <_Z12CNI_send_msgm+0x120>)
 8000fa4:	f005 fa32 	bl	800640c <HAL_CAN_AddTxMessage>
		i++;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <_Z12CNI_send_msgm+0x114>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d215      	bcs.n	8000fe4 <_Z12CNI_send_msgm+0xec>
 8000fb8:	4915      	ldr	r1, [pc, #84]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d10a      	bne.n	8000fe4 <_Z12CNI_send_msgm+0xec>
 8000fce:	4910      	ldr	r1, [pc, #64]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3304      	adds	r3, #4
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d0b9      	beq.n	8000f58 <_Z12CNI_send_msgm+0x60>
	}

	// Antes de retornar, se queda esperando a que se terminen de enviar todos los mensajes
	while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 8000fe4:	bf00      	nop
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 fb23 	bl	8006636 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2301      	moveq	r3, #1
 8000ff8:	2300      	movne	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f2      	bne.n	8000fe6 <_Z12CNI_send_msgm+0xee>

	return CNI_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000258 	.word	0x20000258
 8001010:	20000000 	.word	0x20000000
 8001014:	200002d8 	.word	0x200002d8
 8001018:	200002e0 	.word	0x200002e0

0800101c <_Z15CNI_receive_msgm>:


CNI_status_t CNI_receive_msg(uint32_t msgHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	serviceID rxMsgServiceID;
	uint32_t rxNodeID;
	uint32_t i;

	// Chequear si el msgHandle es válido
	if(msgHandle >= lenCANmsgList)
 8001024:	4b45      	ldr	r3, [pc, #276]	; (800113c <_Z15CNI_receive_msgm+0x120>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	429a      	cmp	r2, r3
 800102c:	d301      	bcc.n	8001032 <_Z15CNI_receive_msgm+0x16>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 800102e:	2301      	movs	r3, #1
 8001030:	e080      	b.n	8001134 <_Z15CNI_receive_msgm+0x118>
	}

	if(CANmsgList[msgHandle].mNodeID_ == MY_NODE_ID)
 8001032:	4943      	ldr	r1, [pc, #268]	; (8001140 <_Z15CNI_receive_msgm+0x124>)
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	3304      	adds	r3, #4
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b03      	cmp	r3, #3
 8001046:	d101      	bne.n	800104c <_Z15CNI_receive_msgm+0x30>
	{
		return CNI_MSG_HANDLE_RX_NOT_ALLOWED;
 8001048:	2303      	movs	r3, #3
 800104a:	e073      	b.n	8001134 <_Z15CNI_receive_msgm+0x118>
	}

	i = msgHandle;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
	rxMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 8001050:	493b      	ldr	r1, [pc, #236]	; (8001140 <_Z15CNI_receive_msgm+0x124>)
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
	rxNodeID = CANmsgList[msgHandle].mNodeID_;
 8001062:	4937      	ldr	r1, [pc, #220]	; (8001140 <_Z15CNI_receive_msgm+0x124>)
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	3304      	adds	r3, #4
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	627b      	str	r3, [r7, #36]	; 0x24

	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID))
 8001076:	e040      	b.n	80010fa <_Z15CNI_receive_msgm+0xde>
	{
		while( (HAL_CAN_GetRxFifoFillLevel(_instance.mHcan_, CAN_RX_FIFO0) == 0) );
 8001078:	bf00      	nop
 800107a:	4b32      	ldr	r3, [pc, #200]	; (8001144 <_Z15CNI_receive_msgm+0x128>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f005 fc1f 	bl	80068c4 <HAL_CAN_GetRxFifoFillLevel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	bf0c      	ite	eq
 800108c:	2301      	moveq	r3, #1
 800108e:	2300      	movne	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f1      	bne.n	800107a <_Z15CNI_receive_msgm+0x5e>
		HAL_CAN_GetRxMessage(_instance.mHcan_, CAN_RX_FIFO0, &auxCANrxHeader, CANmsgList[i].mPayload_);
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <_Z15CNI_receive_msgm+0x128>)
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	3308      	adds	r3, #8
 80010a6:	4a26      	ldr	r2, [pc, #152]	; (8001140 <_Z15CNI_receive_msgm+0x124>)
 80010a8:	4413      	add	r3, r2
 80010aa:	f107 0208 	add.w	r2, r7, #8
 80010ae:	2100      	movs	r1, #0
 80010b0:	f005 faf6 	bl	80066a0 <HAL_CAN_GetRxMessage>
		if( (rxMsgServiceID == CAN_MSG_GET_SERVICE_ID_FROM_STD_ID(auxCANrxHeader.StdId)) && (rxNodeID == CAN_MSG_GET_NODE_ID_FROM_STD_ID(auxCANrxHeader.StdId)) )
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	08db      	lsrs	r3, r3, #3
 80010b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d113      	bne.n	80010e6 <_Z15CNI_receive_msgm+0xca>
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d10d      	bne.n	80010e6 <_Z15CNI_receive_msgm+0xca>
		{
			CANmsgList[i].mLenPayload_ = auxCANrxHeader.DLC;
 80010ca:	69b9      	ldr	r1, [r7, #24]
 80010cc:	481c      	ldr	r0, [pc, #112]	; (8001140 <_Z15CNI_receive_msgm+0x124>)
 80010ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4403      	add	r3, r0
 80010da:	3310      	adds	r3, #16
 80010dc:	6019      	str	r1, [r3, #0]
			i++;
 80010de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e0:	3301      	adds	r3, #1
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010e4:	e009      	b.n	80010fa <_Z15CNI_receive_msgm+0xde>
		}
		else
		{
			CANmsgList[i].mLenPayload_ = 0;
 80010e6:	4916      	ldr	r1, [pc, #88]	; (8001140 <_Z15CNI_receive_msgm+0x124>)
 80010e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	3310      	adds	r3, #16
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID))
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_Z15CNI_receive_msgm+0x120>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001100:	429a      	cmp	r2, r3
 8001102:	d216      	bcs.n	8001132 <_Z15CNI_receive_msgm+0x116>
 8001104:	490e      	ldr	r1, [pc, #56]	; (8001140 <_Z15CNI_receive_msgm+0x124>)
 8001106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001116:	429a      	cmp	r2, r3
 8001118:	d10b      	bne.n	8001132 <_Z15CNI_receive_msgm+0x116>
 800111a:	4909      	ldr	r1, [pc, #36]	; (8001140 <_Z15CNI_receive_msgm+0x124>)
 800111c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	3304      	adds	r3, #4
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112e:	429a      	cmp	r2, r3
 8001130:	d0a2      	beq.n	8001078 <_Z15CNI_receive_msgm+0x5c>
		}
	}

	return CNI_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3730      	adds	r7, #48	; 0x30
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000258 	.word	0x20000258
 8001140:	20000000 	.word	0x20000000
 8001144:	200002d8 	.word	0x200002d8

08001148 <_Z22CNI_update_msg_contentmPhm>:

CNI_status_t CNI_update_msg_content(uint32_t msgHandle, uint8_t *payload, uint32_t lenPayload)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
	serviceID rxMsgServiceID;
	uint32_t rxNodeID;
	uint32_t auxLenPayload;

	// Chequear si el msgHandle es válido
	if(msgHandle >= lenCANmsgList)
 8001154:	4b48      	ldr	r3, [pc, #288]	; (8001278 <_Z22CNI_update_msg_contentmPhm+0x130>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	429a      	cmp	r2, r3
 800115c:	d301      	bcc.n	8001162 <_Z22CNI_update_msg_contentmPhm+0x1a>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 800115e:	2301      	movs	r3, #1
 8001160:	e086      	b.n	8001270 <_Z22CNI_update_msg_contentmPhm+0x128>
	}

	if(CANmsgList[msgHandle].mNodeID_ != MY_NODE_ID)
 8001162:	4946      	ldr	r1, [pc, #280]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	3304      	adds	r3, #4
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b03      	cmp	r3, #3
 8001176:	d001      	beq.n	800117c <_Z22CNI_update_msg_contentmPhm+0x34>
	{
		return CNI_MSG_HANDLE_TX_NOT_ALLOWED;
 8001178:	2302      	movs	r3, #2
 800117a:	e079      	b.n	8001270 <_Z22CNI_update_msg_contentmPhm+0x128>
	}

	i = msgHandle;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	61fb      	str	r3, [r7, #28]
	rxMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 8001180:	493e      	ldr	r1, [pc, #248]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	617b      	str	r3, [r7, #20]
	rxNodeID = CANmsgList[msgHandle].mNodeID_;
 8001192:	493a      	ldr	r1, [pc, #232]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	3304      	adds	r3, #4
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	613b      	str	r3, [r7, #16]
	auxLenPayload = lenPayload;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	61bb      	str	r3, [r7, #24]

	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID) && (auxLenPayload > 0))
 80011aa:	e041      	b.n	8001230 <_Z22CNI_update_msg_contentmPhm+0xe8>
	{
		if(auxLenPayload > MAX_LEN_PAYLOAD_CAN)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d91e      	bls.n	80011f0 <_Z22CNI_update_msg_contentmPhm+0xa8>
		{
			//memcpy(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], MAX_LEN_PAYLOAD_CAN);
			my_copy_array_of_uint8(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], MAX_LEN_PAYLOAD_CAN);
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	3308      	adds	r3, #8
 80011be:	4a2f      	ldr	r2, [pc, #188]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 80011c0:	1898      	adds	r0, r3, r2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	4413      	add	r3, r2
 80011cc:	2208      	movs	r2, #8
 80011ce:	4619      	mov	r1, r3
 80011d0:	f003 ff43 	bl	800505a <_Z22my_copy_array_of_uint8PhPKhm>
			CANmsgList[i].mLenPayload_ = MAX_LEN_PAYLOAD_CAN;
 80011d4:	4929      	ldr	r1, [pc, #164]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	3310      	adds	r3, #16
 80011e4:	2208      	movs	r2, #8
 80011e6:	601a      	str	r2, [r3, #0]
			auxLenPayload-=MAX_LEN_PAYLOAD_CAN;
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	3b08      	subs	r3, #8
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	e01c      	b.n	800122a <_Z22CNI_update_msg_contentmPhm+0xe2>
		}
		else
		{
			//memcpy(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], auxLenPayload);
			my_copy_array_of_uint8(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], auxLenPayload);
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	3308      	adds	r3, #8
 80011fc:	4a1f      	ldr	r2, [pc, #124]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 80011fe:	1898      	adds	r0, r3, r2
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	4413      	add	r3, r2
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4619      	mov	r1, r3
 800120e:	f003 ff24 	bl	800505a <_Z22my_copy_array_of_uint8PhPKhm>
			CANmsgList[i].mLenPayload_ = auxLenPayload;
 8001212:	491a      	ldr	r1, [pc, #104]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	3310      	adds	r3, #16
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	601a      	str	r2, [r3, #0]
			auxLenPayload = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
		}
		i++;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3301      	adds	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID) && (auxLenPayload > 0))
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_Z22CNI_update_msg_contentmPhm+0x130>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	429a      	cmp	r2, r3
 8001238:	d219      	bcs.n	800126e <_Z22CNI_update_msg_contentmPhm+0x126>
 800123a:	4910      	ldr	r1, [pc, #64]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	d10e      	bne.n	800126e <_Z22CNI_update_msg_contentmPhm+0x126>
 8001250:	490a      	ldr	r1, [pc, #40]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	3304      	adds	r3, #4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d102      	bne.n	800126e <_Z22CNI_update_msg_contentmPhm+0x126>
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d19e      	bne.n	80011ac <_Z22CNI_update_msg_contentmPhm+0x64>
	}

	return CNI_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3720      	adds	r7, #32
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000258 	.word	0x20000258
 800127c:	20000000 	.word	0x20000000

08001280 <_Z19CNI_get_msg_contentmPhmPm>:

CNI_status_t CNI_get_msg_content(uint32_t msgHandle, uint8_t *buffer, uint32_t lenBuffer, uint32_t *lenPayload)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
	uint32_t i;
	serviceID msgServiceID;
	uint32_t nodeID;

	// Chequear si el msgHandle es válido
	if(msgHandle >= lenCANmsgList)
 800128e:	4b37      	ldr	r3, [pc, #220]	; (800136c <_Z19CNI_get_msg_contentmPhmPm+0xec>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d301      	bcc.n	800129c <_Z19CNI_get_msg_contentmPhmPm+0x1c>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 8001298:	2301      	movs	r3, #1
 800129a:	e063      	b.n	8001364 <_Z19CNI_get_msg_contentmPhmPm+0xe4>
	}

	i = msgHandle;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	61fb      	str	r3, [r7, #28]
	msgServiceID = CANmsgList[msgHandle].mServiceID_;
 80012a0:	4933      	ldr	r1, [pc, #204]	; (8001370 <_Z19CNI_get_msg_contentmPhmPm+0xf0>)
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
	nodeID = CANmsgList[msgHandle].mNodeID_;
 80012b2:	492f      	ldr	r1, [pc, #188]	; (8001370 <_Z19CNI_get_msg_contentmPhmPm+0xf0>)
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	3304      	adds	r3, #4
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	617b      	str	r3, [r7, #20]
	(*lenPayload) = 0;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]

	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == msgServiceID) && (CANmsgList[i].mNodeID_ == nodeID) && ( (*lenPayload) < lenBuffer) )
 80012cc:	e028      	b.n	8001320 <_Z19CNI_get_msg_contentmPhmPm+0xa0>
	{
		my_copy_array_of_uint8(&buffer[*lenPayload], CANmsgList[i].mPayload_, CANmsgList[i].mLenPayload_);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	18d0      	adds	r0, r2, r3
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	3308      	adds	r3, #8
 80012e2:	4a23      	ldr	r2, [pc, #140]	; (8001370 <_Z19CNI_get_msg_contentmPhmPm+0xf0>)
 80012e4:	1899      	adds	r1, r3, r2
 80012e6:	4c22      	ldr	r4, [pc, #136]	; (8001370 <_Z19CNI_get_msg_contentmPhmPm+0xf0>)
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4423      	add	r3, r4
 80012f4:	3310      	adds	r3, #16
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	f003 feae 	bl	800505a <_Z22my_copy_array_of_uint8PhPKhm>
		(*lenPayload) += CANmsgList[i].mLenPayload_;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	6819      	ldr	r1, [r3, #0]
 8001302:	481b      	ldr	r0, [pc, #108]	; (8001370 <_Z19CNI_get_msg_contentmPhmPm+0xf0>)
 8001304:	69fa      	ldr	r2, [r7, #28]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4403      	add	r3, r0
 8001310:	3310      	adds	r3, #16
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	18ca      	adds	r2, r1, r3
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	601a      	str	r2, [r3, #0]
		i++;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3301      	adds	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == msgServiceID) && (CANmsgList[i].mNodeID_ == nodeID) && ( (*lenPayload) < lenBuffer) )
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <_Z19CNI_get_msg_contentmPhmPm+0xec>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	429a      	cmp	r2, r3
 8001328:	d21b      	bcs.n	8001362 <_Z19CNI_get_msg_contentmPhmPm+0xe2>
 800132a:	4911      	ldr	r1, [pc, #68]	; (8001370 <_Z19CNI_get_msg_contentmPhmPm+0xf0>)
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	429a      	cmp	r2, r3
 800133e:	d110      	bne.n	8001362 <_Z19CNI_get_msg_contentmPhmPm+0xe2>
 8001340:	490b      	ldr	r1, [pc, #44]	; (8001370 <_Z19CNI_get_msg_contentmPhmPm+0xf0>)
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	3304      	adds	r3, #4
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	429a      	cmp	r2, r3
 8001356:	d104      	bne.n	8001362 <_Z19CNI_get_msg_contentmPhmPm+0xe2>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	429a      	cmp	r2, r3
 8001360:	d8b5      	bhi.n	80012ce <_Z19CNI_get_msg_contentmPhmPm+0x4e>
	}

	return CNI_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3724      	adds	r7, #36	; 0x24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd90      	pop	{r4, r7, pc}
 800136c:	20000258 	.word	0x20000258
 8001370:	20000000 	.word	0x20000000

08001374 <_Z29attitudeEstimator_constructorff>:
#define PI 3.14159265

static attitudeEstimator_t _instance;

void attitudeEstimator_constructor(float alpha, float deltaT)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	ed87 0a01 	vstr	s0, [r7, #4]
 800137e:	edc7 0a00 	vstr	s1, [r7]
	_instance.mAlpha_ = alpha;
 8001382:	4a16      	ldr	r2, [pc, #88]	; (80013dc <_Z29attitudeEstimator_constructorff+0x68>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6013      	str	r3, [r2, #0]
	_instance.mDeltaT_ = deltaT;
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <_Z29attitudeEstimator_constructorff+0x68>)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	6053      	str	r3, [r2, #4]

	_instance.mOutputData_.mPitch_ = 0.0;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <_Z29attitudeEstimator_constructorff+0x68>)
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
	_instance.mOutputData_.mRoll_ = 0.0;
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <_Z29attitudeEstimator_constructorff+0x68>)
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	60da      	str	r2, [r3, #12]

	_instance.mIMUdata_.accelX = 0.0;
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <_Z29attitudeEstimator_constructorff+0x68>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	621a      	str	r2, [r3, #32]
	_instance.mIMUdata_.accelY = 0.0;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <_Z29attitudeEstimator_constructorff+0x68>)
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
	_instance.mIMUdata_.accelZ = 1.0;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <_Z29attitudeEstimator_constructorff+0x68>)
 80013b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
	_instance.mIMUdata_.gyroX = 0.0;
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <_Z29attitudeEstimator_constructorff+0x68>)
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
	_instance.mIMUdata_.gyroY = 0.0;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <_Z29attitudeEstimator_constructorff+0x68>)
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
	_instance.mIMUdata_.gyroZ = 0.0;
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <_Z29attitudeEstimator_constructorff+0x68>)
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	200002f8 	.word	0x200002f8

080013e0 <_Z30attitudeEstimator_set_imu_data7IMUData>:

void attitudeEstimator_set_imu_data(IMUData imuData)
{
 80013e0:	b084      	sub	sp, #16
 80013e2:	b4b0      	push	{r4, r5, r7}
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	f107 040c 	add.w	r4, r7, #12
 80013ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	_instance.mIMUdata_ = imuData;
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_Z30attitudeEstimator_set_imu_data7IMUData+0x30>)
 80013f0:	f103 0410 	add.w	r4, r3, #16
 80013f4:	f107 050c 	add.w	r5, r7, #12
 80013f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001400:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bcb0      	pop	{r4, r5, r7}
 800140a:	b004      	add	sp, #16
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	200002f8 	.word	0x200002f8
 8001414:	00000000 	.word	0x00000000

08001418 <_Z24attitudeEstimator_updatev>:


//void attitudeEstimator_update(float *accelData, float *gyroData)
void attitudeEstimator_update(void)
{
 8001418:	b5b0      	push	{r4, r5, r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
	//float pitchAccel = atan2(-1 * accelData[POS_ACCEL_X], accelData[POS_ACCEL_Z]) * 180.0 / PI;
	//float rollAccel  = atan2(accelData[POS_ACCEL_Y], accelData[POS_ACCEL_Z]) * 180.0 / PI;

	float pitchAccel = atan2(-1.0 * _instance.mIMUdata_.accelX, _instance.mIMUdata_.accelZ) * 180.0 / PI;
 800141e:	4b54      	ldr	r3, [pc, #336]	; (8001570 <_Z24attitudeEstimator_updatev+0x158>)
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f854 	bl	80004d0 <__aeabi_f2d>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4614      	mov	r4, r2
 800142e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001432:	4b4f      	ldr	r3, [pc, #316]	; (8001570 <_Z24attitudeEstimator_updatev+0x158>)
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f84a 	bl	80004d0 <__aeabi_f2d>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	ec43 2b11 	vmov	d1, r2, r3
 8001444:	ec45 4b10 	vmov	d0, r4, r5
 8001448:	f008 fda0 	bl	8009f8c <atan2>
 800144c:	ec51 0b10 	vmov	r0, r1, d0
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	4b47      	ldr	r3, [pc, #284]	; (8001574 <_Z24attitudeEstimator_updatev+0x15c>)
 8001456:	f7ff f893 	bl	8000580 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	a341      	add	r3, pc, #260	; (adr r3, 8001568 <_Z24attitudeEstimator_updatev+0x150>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f9b4 	bl	80007d4 <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fb1e 	bl	8000ab4 <__aeabi_d2f>
 8001478:	4603      	mov	r3, r0
 800147a:	607b      	str	r3, [r7, #4]
	float rollAccel  = atan2(       _instance.mIMUdata_.accelY, _instance.mIMUdata_.accelZ) * 180.0 / PI;
 800147c:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <_Z24attitudeEstimator_updatev+0x158>)
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f825 	bl	80004d0 <__aeabi_f2d>
 8001486:	4604      	mov	r4, r0
 8001488:	460d      	mov	r5, r1
 800148a:	4b39      	ldr	r3, [pc, #228]	; (8001570 <_Z24attitudeEstimator_updatev+0x158>)
 800148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f81e 	bl	80004d0 <__aeabi_f2d>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	ec43 2b11 	vmov	d1, r2, r3
 800149c:	ec45 4b10 	vmov	d0, r4, r5
 80014a0:	f008 fd74 	bl	8009f8c <atan2>
 80014a4:	ec51 0b10 	vmov	r0, r1, d0
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	4b31      	ldr	r3, [pc, #196]	; (8001574 <_Z24attitudeEstimator_updatev+0x15c>)
 80014ae:	f7ff f867 	bl	8000580 <__aeabi_dmul>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	a32b      	add	r3, pc, #172	; (adr r3, 8001568 <_Z24attitudeEstimator_updatev+0x150>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7ff f988 	bl	80007d4 <__aeabi_ddiv>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f7ff faf2 	bl	8000ab4 <__aeabi_d2f>
 80014d0:	4603      	mov	r3, r0
 80014d2:	603b      	str	r3, [r7, #0]

	//_instance.mPitch_ = _instance.mAlpha_ * pitchAccel + (1 - _instance.mAlpha_) * (_instance.mDeltaT_ * gyroData[POS_GYRO_Y] + _instance.mPitch_);
	//_instance.mRoll_  = _instance.mAlpha_ * rollAccel  + (1 - _instance.mAlpha_) * (_instance.mDeltaT_ * gyroData[POS_GYRO_X] + _instance.mRoll_);

	_instance.mOutputData_.mPitch_ = _instance.mAlpha_ * pitchAccel + (1 - _instance.mAlpha_) * (_instance.mDeltaT_ * _instance.mIMUdata_.gyroY + _instance.mOutputData_.mPitch_);
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <_Z24attitudeEstimator_updatev+0x158>)
 80014d6:	ed93 7a00 	vldr	s14, [r3]
 80014da:	edd7 7a01 	vldr	s15, [r7, #4]
 80014de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <_Z24attitudeEstimator_updatev+0x158>)
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <_Z24attitudeEstimator_updatev+0x158>)
 80014f2:	ed93 6a01 	vldr	s12, [r3, #4]
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <_Z24attitudeEstimator_updatev+0x158>)
 80014f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <_Z24attitudeEstimator_updatev+0x158>)
 8001502:	edd3 7a02 	vldr	s15, [r3, #8]
 8001506:	ee76 7a27 	vadd.f32	s15, s12, s15
 800150a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800150e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <_Z24attitudeEstimator_updatev+0x158>)
 8001514:	edc3 7a02 	vstr	s15, [r3, #8]
	_instance.mOutputData_.mRoll_  = _instance.mAlpha_ * rollAccel  + (1 - _instance.mAlpha_) * (_instance.mDeltaT_ * _instance.mIMUdata_.gyroX + _instance.mOutputData_.mRoll_);
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <_Z24attitudeEstimator_updatev+0x158>)
 800151a:	ed93 7a00 	vldr	s14, [r3]
 800151e:	edd7 7a00 	vldr	s15, [r7]
 8001522:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <_Z24attitudeEstimator_updatev+0x158>)
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001530:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <_Z24attitudeEstimator_updatev+0x158>)
 8001536:	ed93 6a01 	vldr	s12, [r3, #4]
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <_Z24attitudeEstimator_updatev+0x158>)
 800153c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001540:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <_Z24attitudeEstimator_updatev+0x158>)
 8001546:	edd3 7a03 	vldr	s15, [r3, #12]
 800154a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800154e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <_Z24attitudeEstimator_updatev+0x158>)
 8001558:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bdb0      	pop	{r4, r5, r7, pc}
 8001564:	f3af 8000 	nop.w
 8001568:	53c8d4f1 	.word	0x53c8d4f1
 800156c:	400921fb 	.word	0x400921fb
 8001570:	200002f8 	.word	0x200002f8
 8001574:	40668000 	.word	0x40668000

08001578 <_Z27attitudeEstimator_read_dataP14attitudeData_t>:

void attitudeEstimator_read_data(attitudeData_t *outputData)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	(*outputData) = _instance.mOutputData_;
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <_Z27attitudeEstimator_read_dataP14attitudeData_t+0x24>)
 8001584:	3308      	adds	r3, #8
 8001586:	e893 0003 	ldmia.w	r3, {r0, r1}
 800158a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	200002f8 	.word	0x200002f8

080015a0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MX_CAN1_Init+0x68>)
 80015a6:	4a19      	ldr	r2, [pc, #100]	; (800160c <MX_CAN1_Init+0x6c>)
 80015a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <MX_CAN1_Init+0x68>)
 80015ac:	2206      	movs	r2, #6
 80015ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <MX_CAN1_Init+0x68>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_CAN1_Init+0x68>)
 80015b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015bc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <MX_CAN1_Init+0x68>)
 80015c0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80015c4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <MX_CAN1_Init+0x68>)
 80015c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015cc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_CAN1_Init+0x68>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_CAN1_Init+0x68>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <MX_CAN1_Init+0x68>)
 80015dc:	2200      	movs	r2, #0
 80015de:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_CAN1_Init+0x68>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <MX_CAN1_Init+0x68>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_CAN1_Init+0x68>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_CAN1_Init+0x68>)
 80015f4:	f004 fcea 	bl	8005fcc <HAL_CAN_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80015fe:	f003 f9e9 	bl	80049d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000324 	.word	0x20000324
 800160c:	40006400 	.word	0x40006400

08001610 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <MX_CAN2_Init+0x68>)
 8001616:	4a19      	ldr	r2, [pc, #100]	; (800167c <MX_CAN2_Init+0x6c>)
 8001618:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_CAN2_Init+0x68>)
 800161c:	2206      	movs	r2, #6
 800161e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <MX_CAN2_Init+0x68>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_CAN2_Init+0x68>)
 8001628:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800162c:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <MX_CAN2_Init+0x68>)
 8001630:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001634:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <MX_CAN2_Init+0x68>)
 8001638:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800163c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_CAN2_Init+0x68>)
 8001640:	2200      	movs	r2, #0
 8001642:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_CAN2_Init+0x68>)
 8001646:	2200      	movs	r2, #0
 8001648:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <MX_CAN2_Init+0x68>)
 800164c:	2200      	movs	r2, #0
 800164e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_CAN2_Init+0x68>)
 8001652:	2200      	movs	r2, #0
 8001654:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <MX_CAN2_Init+0x68>)
 8001658:	2200      	movs	r2, #0
 800165a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_CAN2_Init+0x68>)
 800165e:	2200      	movs	r2, #0
 8001660:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_CAN2_Init+0x68>)
 8001664:	f004 fcb2 	bl	8005fcc <HAL_CAN_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 800166e:	f003 f9b1 	bl	80049d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	2000034c 	.word	0x2000034c
 800167c:	40006800 	.word	0x40006800

08001680 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08c      	sub	sp, #48	; 0x30
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a41      	ldr	r2, [pc, #260]	; (80017a4 <HAL_CAN_MspInit+0x124>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d13a      	bne.n	8001718 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80016a2:	4b41      	ldr	r3, [pc, #260]	; (80017a8 <HAL_CAN_MspInit+0x128>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a3f      	ldr	r2, [pc, #252]	; (80017a8 <HAL_CAN_MspInit+0x128>)
 80016aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80016ac:	4b3e      	ldr	r3, [pc, #248]	; (80017a8 <HAL_CAN_MspInit+0x128>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10b      	bne.n	80016cc <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80016b4:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <HAL_CAN_MspInit+0x12c>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a3c      	ldr	r2, [pc, #240]	; (80017ac <HAL_CAN_MspInit+0x12c>)
 80016ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
 80016c0:	4b3a      	ldr	r3, [pc, #232]	; (80017ac <HAL_CAN_MspInit+0x12c>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	4b37      	ldr	r3, [pc, #220]	; (80017ac <HAL_CAN_MspInit+0x12c>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4a36      	ldr	r2, [pc, #216]	; (80017ac <HAL_CAN_MspInit+0x12c>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	6313      	str	r3, [r2, #48]	; 0x30
 80016d8:	4b34      	ldr	r3, [pc, #208]	; (80017ac <HAL_CAN_MspInit+0x12c>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016f6:	2309      	movs	r3, #9
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	482b      	ldr	r0, [pc, #172]	; (80017b0 <HAL_CAN_MspInit+0x130>)
 8001702:	f005 fcc7 	bl	8007094 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2014      	movs	r0, #20
 800170c:	f005 fc7d 	bl	800700a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001710:	2014      	movs	r0, #20
 8001712:	f005 fc96 	bl	8007042 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001716:	e041      	b.n	800179c <HAL_CAN_MspInit+0x11c>
  else if(canHandle->Instance==CAN2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <HAL_CAN_MspInit+0x134>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d13c      	bne.n	800179c <HAL_CAN_MspInit+0x11c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001722:	4b22      	ldr	r3, [pc, #136]	; (80017ac <HAL_CAN_MspInit+0x12c>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a21      	ldr	r2, [pc, #132]	; (80017ac <HAL_CAN_MspInit+0x12c>)
 8001728:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <HAL_CAN_MspInit+0x12c>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_CAN_MspInit+0x128>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	3301      	adds	r3, #1
 8001740:	4a19      	ldr	r2, [pc, #100]	; (80017a8 <HAL_CAN_MspInit+0x128>)
 8001742:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_CAN_MspInit+0x128>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d10b      	bne.n	8001764 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_CAN_MspInit+0x12c>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	4a16      	ldr	r2, [pc, #88]	; (80017ac <HAL_CAN_MspInit+0x12c>)
 8001752:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001756:	6413      	str	r3, [r2, #64]	; 0x40
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_CAN_MspInit+0x12c>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_CAN_MspInit+0x12c>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	4a10      	ldr	r2, [pc, #64]	; (80017ac <HAL_CAN_MspInit+0x12c>)
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	6313      	str	r3, [r2, #48]	; 0x30
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_CAN_MspInit+0x12c>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800177c:	2360      	movs	r3, #96	; 0x60
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800178c:	2309      	movs	r3, #9
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	4806      	ldr	r0, [pc, #24]	; (80017b0 <HAL_CAN_MspInit+0x130>)
 8001798:	f005 fc7c 	bl	8007094 <HAL_GPIO_Init>
}
 800179c:	bf00      	nop
 800179e:	3730      	adds	r7, #48	; 0x30
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40006400 	.word	0x40006400
 80017a8:	20000374 	.word	0x20000374
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40006800 	.word	0x40006800

080017b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ce:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <MX_GPIO_Init+0x13c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <MX_GPIO_Init+0x13c>)
 80017d4:	f043 0310 	orr.w	r3, r3, #16
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <MX_GPIO_Init+0x13c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	61bb      	str	r3, [r7, #24]
 80017e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017e6:	4b43      	ldr	r3, [pc, #268]	; (80018f4 <MX_GPIO_Init+0x13c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a42      	ldr	r2, [pc, #264]	; (80018f4 <MX_GPIO_Init+0x13c>)
 80017ec:	f043 0320 	orr.w	r3, r3, #32
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b40      	ldr	r3, [pc, #256]	; (80018f4 <MX_GPIO_Init+0x13c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0320 	and.w	r3, r3, #32
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fe:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <MX_GPIO_Init+0x13c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a3c      	ldr	r2, [pc, #240]	; (80018f4 <MX_GPIO_Init+0x13c>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <MX_GPIO_Init+0x13c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <MX_GPIO_Init+0x13c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a36      	ldr	r2, [pc, #216]	; (80018f4 <MX_GPIO_Init+0x13c>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <MX_GPIO_Init+0x13c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <MX_GPIO_Init+0x13c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a30      	ldr	r2, [pc, #192]	; (80018f4 <MX_GPIO_Init+0x13c>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <MX_GPIO_Init+0x13c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001846:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <MX_GPIO_Init+0x13c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a2a      	ldr	r2, [pc, #168]	; (80018f4 <MX_GPIO_Init+0x13c>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <MX_GPIO_Init+0x13c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED2_Pin|LED1_Pin|LED7_Pin|LED4_Pin
 800185e:	2200      	movs	r2, #0
 8001860:	217a      	movs	r1, #122	; 0x7a
 8001862:	4825      	ldr	r0, [pc, #148]	; (80018f8 <MX_GPIO_Init+0x140>)
 8001864:	f005 fdc2 	bl	80073ec <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED6_Pin|LED8_Pin|LED5_Pin, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	211c      	movs	r1, #28
 800186c:	4823      	ldr	r0, [pc, #140]	; (80018fc <MX_GPIO_Init+0x144>)
 800186e:	f005 fdbd 	bl	80073ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 8001872:	2201      	movs	r2, #1
 8001874:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001878:	4821      	ldr	r0, [pc, #132]	; (8001900 <MX_GPIO_Init+0x148>)
 800187a:	f005 fdb7 	bl	80073ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED7_Pin|LED4_Pin
 800187e:	237a      	movs	r3, #122	; 0x7a
 8001880:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800188e:	f107 031c 	add.w	r3, r7, #28
 8001892:	4619      	mov	r1, r3
 8001894:	4818      	ldr	r0, [pc, #96]	; (80018f8 <MX_GPIO_Init+0x140>)
 8001896:	f005 fbfd 	bl	8007094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED6_Pin|LED8_Pin|LED5_Pin;
 800189a:	231c      	movs	r3, #28
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	4619      	mov	r1, r3
 80018b0:	4812      	ldr	r0, [pc, #72]	; (80018fc <MX_GPIO_Init+0x144>)
 80018b2:	f005 fbef 	bl	8007094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 80018b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	2301      	movs	r3, #1
 80018be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	4619      	mov	r1, r3
 80018ce:	480c      	ldr	r0, [pc, #48]	; (8001900 <MX_GPIO_Init+0x148>)
 80018d0:	f005 fbe0 	bl	8007094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_SW_Pin;
 80018d4:	2308      	movs	r3, #8
 80018d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_SW_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	4619      	mov	r1, r3
 80018e6:	4807      	ldr	r0, [pc, #28]	; (8001904 <MX_GPIO_Init+0x14c>)
 80018e8:	f005 fbd4 	bl	8007094 <HAL_GPIO_Init>

}
 80018ec:	bf00      	nop
 80018ee:	3730      	adds	r7, #48	; 0x30
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40021400 	.word	0x40021400
 8001900:	40020400 	.word	0x40020400
 8001904:	40020c00 	.word	0x40020c00

08001908 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>:
#include "stm32f7xx_hal.h"


namespace STM32{

    gpio::gpio(GPIO_TypeDef* pPortHandler, uint16_t pin)
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	4613      	mov	r3, r2
 8001914:	80fb      	strh	r3, [r7, #6]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f854 	bl	80019c6 <_ZNSt8functionIFvvEEC1Ev>
    {
        m_portHandler = pPortHandler;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	611a      	str	r2, [r3, #16]
        m_pin = pin;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	88fa      	ldrh	r2, [r7, #6]
 8001928:	829a      	strh	r2, [r3, #20]
    }
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_ZN5STM324gpio6toggleEv>:
        GPIO_PinState ret = HAL_GPIO_ReadPin(m_portHandler, m_pin);
        return ret == GPIO_PIN_SET ? GPIO_ST::HIGH : GPIO_ST::LOW;
    }

    void gpio::toggle()
    {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
        HAL_GPIO_TogglePin(m_portHandler, m_pin);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691a      	ldr	r2, [r3, #16]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	8a9b      	ldrh	r3, [r3, #20]
 8001944:	4619      	mov	r1, r3
 8001946:	4610      	mov	r0, r2
 8001948:	f005 fd69 	bl	800741e <HAL_GPIO_TogglePin>
    }
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_ZN5STM324gpio5writeE7GPIO_ST>:

    void gpio::write(GPIO_ST st)
    {
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
        GPIO_PinState pinState = map_hal_st_to_igpio_st(st); 
 800195e:	6838      	ldr	r0, [r7, #0]
 8001960:	f000 f80e 	bl	8001980 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>
 8001964:	4603      	mov	r3, r0
 8001966:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(m_portHandler, m_pin, pinState);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6918      	ldr	r0, [r3, #16]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	8a9b      	ldrh	r3, [r3, #20]
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	4619      	mov	r1, r3
 8001974:	f005 fd3a 	bl	80073ec <HAL_GPIO_WritePin>
    }
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>:

    GPIO_PinState gpio::map_hal_st_to_igpio_st(GPIO_ST st)
	{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
		return st == GPIO_ST::HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x12>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x14>
 8001992:	2300      	movs	r3, #0
	}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_ZNSt14_Function_baseC1Ev>:
	  static bool
	  _M_not_empty_function(const _Tp&)
	  { return true; }
      };

    _Function_base() = default;
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	461a      	mov	r2, r3
 80019ac:	2300      	movs	r3, #0
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	6053      	str	r3, [r2, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	461a      	mov	r2, r3
 80019d2:	2300      	movs	r3, #0
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	6053      	str	r3, [r2, #4]
 80019d8:	6093      	str	r3, [r2, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ffdf 	bl	80019a0 <_ZNSt14_Function_baseC1Ev>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <MX_I2C4_Init+0x74>)
 80019fa:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <MX_I2C4_Init+0x78>)
 80019fc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <MX_I2C4_Init+0x74>)
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <MX_I2C4_Init+0x7c>)
 8001a02:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <MX_I2C4_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <MX_I2C4_Init+0x74>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <MX_I2C4_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <MX_I2C4_Init+0x74>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_I2C4_Init+0x74>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_I2C4_Init+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_I2C4_Init+0x74>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001a2e:	480e      	ldr	r0, [pc, #56]	; (8001a68 <MX_I2C4_Init+0x74>)
 8001a30:	f005 fd10 	bl	8007454 <HAL_I2C_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001a3a:	f002 ffcb 	bl	80049d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4809      	ldr	r0, [pc, #36]	; (8001a68 <MX_I2C4_Init+0x74>)
 8001a42:	f005 fd97 	bl	8007574 <HAL_I2CEx_ConfigAnalogFilter>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001a4c:	f002 ffc2 	bl	80049d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001a50:	2100      	movs	r1, #0
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_I2C4_Init+0x74>)
 8001a54:	f005 fdd9 	bl	800760a <HAL_I2CEx_ConfigDigitalFilter>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001a5e:	f002 ffb9 	bl	80049d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000378 	.word	0x20000378
 8001a6c:	40006000 	.word	0x40006000
 8001a70:	20404768 	.word	0x20404768

08001a74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b0aa      	sub	sp, #168	; 0xa8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	2284      	movs	r2, #132	; 0x84
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f008 fdaf 	bl	800a5f8 <memset>
  if(i2cHandle->Instance==I2C4)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a22      	ldr	r2, [pc, #136]	; (8001b28 <HAL_I2C_MspInit+0xb4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d13d      	bne.n	8001b20 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001aa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f006 faf9 	bl	80080ac <HAL_RCCEx_PeriphCLKConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001ac0:	f002 ff88 	bl	80049d4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_I2C_MspInit+0xb8>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <HAL_I2C_MspInit+0xb8>)
 8001aca:	f043 0320 	orr.w	r3, r3, #32
 8001ace:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad0:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <HAL_I2C_MspInit+0xb8>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001adc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ae0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae4:	2312      	movs	r3, #18
 8001ae6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001af6:	2304      	movs	r3, #4
 8001af8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001afc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b00:	4619      	mov	r1, r3
 8001b02:	480b      	ldr	r0, [pc, #44]	; (8001b30 <HAL_I2C_MspInit+0xbc>)
 8001b04:	f005 fac6 	bl	8007094 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_I2C_MspInit+0xb8>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <HAL_I2C_MspInit+0xb8>)
 8001b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b12:	6413      	str	r3, [r2, #64]	; 0x40
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_I2C_MspInit+0xb8>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001b20:	bf00      	nop
 8001b22:	37a8      	adds	r7, #168	; 0xa8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40006000 	.word	0x40006000
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40021400 	.word	0x40021400

08001b34 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
      if (_M_manager)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	2203      	movs	r2, #3
 8001b7a:	4798      	blx	r3
    }
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_ZN9iPHandler4lockEv>:
    	}else{
    		return normalMode ? reg << 1 : (reg  << 0x01 | 1);
    	}
    }

    bool lock()
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
	{
		if(m_mutex){
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7a1b      	ldrb	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <_ZN9iPHandler4lockEv+0x14>
			return false;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e003      	b.n	8001ba2 <_ZN9iPHandler4lockEv+0x1c>
		}
		m_mutex = true;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	721a      	strb	r2, [r3, #8]
		return true;
 8001ba0:	2301      	movs	r3, #1
	}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <_ZN9iPHandler6unlockEv>:


	bool unlock()
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
	{
		if(!m_mutex){
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7a1b      	ldrb	r3, [r3, #8]
 8001bba:	f083 0301 	eor.w	r3, r3, #1
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <_ZN9iPHandler6unlockEv+0x1a>
			return false;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e003      	b.n	8001bd0 <_ZN9iPHandler6unlockEv+0x22>
		}
		m_mutex = false;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	721a      	strb	r2, [r3, #8]
		return true;
 8001bce:	2301      	movs	r3, #1
	}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <_ZN8ICM426888GYRO_CNFlsENS0_3ODREh>:
        constexpr uint32_t operator<<(uint8_t n, ODR odr)
        {
            return  n << static_cast<uint8_t> (odr);
        }
        constexpr uint32_t operator<<(ODR odr, uint8_t n)
        {
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (odr) << n ;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
        }
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <_ZN8ICM426888GYRO_CNFlsENS0_3FSREh>:
        constexpr uint32_t operator<<(uint8_t n, FSR fsr)
        {
            return  n << static_cast<uint8_t> (fsr);
        }   
        constexpr uint32_t operator<<( FSR fsr, uint8_t n)
        {
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (fsr) << n;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
        } 
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <_ZN8ICM426889ACCEL_CNFlsENS0_3ODREh>:
        constexpr uint32_t operator<<(uint8_t n, ODR odr)
        {
            return  n << static_cast<uint8_t> (odr);
        }
        constexpr uint32_t operator<<( ODR odr, uint8_t n)
        {
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (odr) << n;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
        }
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_ZN8ICM426889ACCEL_CNFlsENS0_3FSREh>:
        constexpr uint32_t operator<<(uint8_t n, FSR fsr)
        {
            return  n << static_cast<uint8_t> (fsr);
        } 
        constexpr uint32_t operator<<(FSR fsr, uint8_t n)
        {
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (fsr) << n;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
        } 
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_ZN8ICM4268811FIFO_CONFIG13SET_FIFO_MODEENS_9FIFO_MODEE>:
    //FIFOconfig addresses and bits
	constexpr uint8_t FIFO_CONFIG_ADD = 0x16;
	namespace FIFO_CONFIG {
		constexpr uint8_t FIFO_MODE_POS = 0x06;
		constexpr uint8_t FIFO_MODE_MASK = static_cast<uint8_t>(0xC0  << FIFO_MODE_POS);
		constexpr uint8_t SET_FIFO_MODE(FIFO_MODE fifoMode) {
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
			return  (static_cast<uint8_t>(fifoMode) << FIFO_MODE_POS);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	019b      	lsls	r3, r3, #6
 8001c7a:	b2db      	uxtb	r3, r3
		}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>:
    //Gyro config addresses and bits
    constexpr uint8_t GYRO_CONFIG0_ADD = 0x4F;
    namespace GYRO_CONFIG0 {
        constexpr uint8_t FS_SEL_POS = 0x05;
        constexpr uint8_t FS_SEL_MASK = 0x07  << FS_SEL_POS;
        constexpr uint8_t SET_FSR(uint8_t reg, GYRO_CNF::FSR fsr) {
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
            return  (reg & ~FS_SEL_MASK) | ( fsr << FS_SEL_POS);
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	b2dc      	uxtb	r4, r3
 8001c9c:	2105      	movs	r1, #5
 8001c9e:	6838      	ldr	r0, [r7, #0]
 8001ca0:	f7ff ffae 	bl	8001c00 <_ZN8ICM426888GYRO_CNFlsENS0_3FSREh>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	4323      	orrs	r3, r4
 8001caa:	b2db      	uxtb	r3, r3
        }
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}

08001cb4 <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>:

        constexpr uint8_t ODR_POS = 0x00;
        constexpr uint8_t ODR_MASK = 0x0F  << ODR_POS;
        constexpr uint8_t SET_ODR(uint8_t reg, GYRO_CNF::ODR odr) {
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
            return  (reg & ~ODR_MASK) | ( odr << ODR_POS);
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f023 030f 	bic.w	r3, r3, #15
 8001cc6:	b2dc      	uxtb	r4, r3
 8001cc8:	2100      	movs	r1, #0
 8001cca:	6838      	ldr	r0, [r7, #0]
 8001ccc:	f7ff ff86 	bl	8001bdc <_ZN8ICM426888GYRO_CNFlsENS0_3ODREh>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4323      	orrs	r3, r4
 8001cd6:	b2db      	uxtb	r3, r3
        }
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd90      	pop	{r4, r7, pc}

08001ce0 <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>:
    //Accel config addresses and bits
    constexpr uint8_t ACCEL_CONFIG0_ADD = 0x50;
    namespace ACCEL_CONFIG0 {
        constexpr uint8_t FS_SEL_POS = 0x05;
        constexpr uint8_t FS_SEL_MASK = 0x07  << FS_SEL_POS;
        constexpr uint8_t SET_FSR(uint8_t reg, ACCEL_CNF::FSR fsr) {
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
            return   (reg & ~FS_SEL_MASK)  | ( fsr << FS_SEL_POS);
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	b2dc      	uxtb	r4, r3
 8001cf4:	2105      	movs	r1, #5
 8001cf6:	6838      	ldr	r0, [r7, #0]
 8001cf8:	f7ff ffa6 	bl	8001c48 <_ZN8ICM426889ACCEL_CNFlsENS0_3FSREh>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	4323      	orrs	r3, r4
 8001d02:	b2db      	uxtb	r3, r3
        }
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd90      	pop	{r4, r7, pc}

08001d0c <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>:

        constexpr uint8_t ODR_POS = 0x00;
        constexpr uint8_t ODR_MASK = 0x0F  << ODR_POS;
        constexpr uint8_t SET_ODR(uint8_t reg, ACCEL_CNF::ODR odr) {
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	71fb      	strb	r3, [r7, #7]
            return   (reg & ~ODR_MASK) | ( odr << ODR_POS);
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f023 030f 	bic.w	r3, r3, #15
 8001d1e:	b2dc      	uxtb	r4, r3
 8001d20:	2100      	movs	r1, #0
 8001d22:	6838      	ldr	r0, [r7, #0]
 8001d24:	f7ff ff7e 	bl	8001c24 <_ZN8ICM426889ACCEL_CNFlsENS0_3ODREh>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	4323      	orrs	r3, r4
 8001d2e:	b2db      	uxtb	r3, r3
        }
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd90      	pop	{r4, r7, pc}

08001d38 <_ZN4iIMUC1Ev>:
 * @brief Define un struct vacio para que se haga un struct herencia del mismo en los archivos de implementación. Esto es para dejar a la implementación la forma en obtener los  datos de la IMU. Por ejemplo, si se tiene 1 IMU con lectura sobre 1 solo eje vs 3 ejes. De esta forma también se podría usar esta interfaz para implementar acelerómetros.
 * 
 */
// struct iImu_data{};

class iIMU {
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <_ZN4iIMUC1Ev+0x1c>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	0800a84c 	.word	0x0800a84c

08001d58 <_ZN8ICM426889RegistersC1Ev>:
namespace ICM42688{

    constexpr uint16_t BUFFER_SIZE = 32;
    constexpr uint16_t IMU_DATA_BUFFER_SIZE = 16;

    struct Registers {
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2206      	movs	r2, #6
 8001d64:	701a      	strb	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2206      	movs	r2, #6
 8001d6a:	705a      	strb	r2, [r3, #1]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2230      	movs	r2, #48	; 0x30
 8001d70:	709a      	strb	r2, [r3, #2]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	70da      	strb	r2, [r3, #3]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	711a      	strb	r2, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	715a      	strb	r2, [r3, #5]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	719a      	strb	r2, [r3, #6]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_>:
#include "icm42688_utils.hpp"
#include "icm42688.hpp"

namespace ICM42688{

    icm42688::icm42688( Config& cnf, iPHandler* handler, gpio *cs,
 8001d98:	b5b0      	push	{r4, r5, r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
        , m_handler(handler)
        , m_cs(cs)
        , m_i2cAdd(slaveAdd)
        , m_INT1(INT1)
        , m_INT2(INT2)
        , m_currentBankReg(bankRegister::BANK0)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ffc5 	bl	8001d38 <_ZN4iIMUC1Ev>
 8001dae:	4a34      	ldr	r2, [pc, #208]	; (8001e80 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_+0xe8>)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	601a      	str	r2, [r3, #0]
        : imuDataBuffer()
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3304      	adds	r3, #4
 8001db8:	4618      	mov	r0, r3
 8001dba:	f001 f935 	bl	8003028 <_ZN11circ_bufferI7IMUDataLm16EtEC1Ev>
        , m_cnf(cnf)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	f503 74e8 	add.w	r4, r3, #464	; 0x1d0
 8001dc6:	4615      	mov	r5, r2
 8001dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001dd4:	e884 0003 	stmia.w	r4, {r0, r1}
        , m_currentBankReg(bankRegister::BANK0)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ffba 	bl	8001d58 <_ZN8ICM426889RegistersC1Ev>
        , m_handler(handler)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
        , m_cs(cs)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        , m_i2cAdd(slaveAdd)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dfa:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
        , m_INT1(INT1)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e02:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
        , m_INT2(INT2)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e0a:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
        , m_currentBankReg(bankRegister::BANK0)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258

    {
        m_mode = COMM_MODE::BLCK;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
        m_gyroODRValue    = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8001e24:	4618      	mov	r0, r3
 8001e26:	f002 fb79 	bl	800451c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 8001e2a:	eef0 7a40 	vmov.f32	s15, s0
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_gyroFSRValue    = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 fbce 	bl	80045dc <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 8001e40:	eef0 7a40 	vmov.f32	s15, s0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	edc3 7a97 	vstr	s15, [r3, #604]	; 0x25c
        m_accelODRValue   = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 fbe7 	bl	8004624 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 8001e56:	eef0 7a40 	vmov.f32	s15, s0
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
        m_accelFSRValue   = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8001e66:	4618      	mov	r0, r3
 8001e68:	f002 fc3c 	bl	80046e4 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 8001e6c:	eef0 7a40 	vmov.f32	s15, s0
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264
    }
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e80:	0800a7fc 	.word	0x0800a7fc

08001e84 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioE>:
        m_spiSet = true;
        //write_config();
        enable();
    }

    icm42688::icm42688(Config& cnf, iPHandler *handlerSpi, gpio *cs)
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af04      	add	r7, sp, #16
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
        : icm42688(cnf, handlerSpi, cs, 0xFF, nullptr, nullptr)
 8001e92:	2300      	movs	r3, #0
 8001e94:	9302      	str	r3, [sp, #8]
 8001e96:	2300      	movs	r3, #0
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	23ff      	movs	r3, #255	; 0xff
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	68b9      	ldr	r1, [r7, #8]
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7ff ff77 	bl	8001d98 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_>
    {
        m_spiSet = true;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
        //write_config();
        enable();
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 ff30 	bl	8002d18 <_ZN8ICM426888icm426886enableEv>
    }
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_ZN11PHandlerOptC1Ev>:
struct PHandlerOpt {
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	731a      	strb	r2, [r3, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	735a      	strb	r2, [r3, #13]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	739a      	strb	r2, [r3, #14]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>:
        enable();
    }


    iIMU_ST icm42688::set_bank_register(bankRegister bankReg)
    {
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b088      	sub	sp, #32
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
        //iHANDLER_ST retHandler(iHANDLER_ST::OK);
        uint8_t bank;
        PHandlerOpt opt;
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ffdc 	bl	8001ec2 <_ZN11PHandlerOptC1Ev>

        if(m_currentBankReg != bankReg){
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d033      	beq.n	8001f7e <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x88>

            bank = static_cast<uint8_t>(bankReg);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	77fb      	strb	r3, [r7, #31]
            opt.add = REG_BANK_SEL_ADD;
 8001f1a:	2376      	movs	r3, #118	; 0x76
 8001f1c:	733b      	strb	r3, [r7, #12]
            opt.size = 1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	737b      	strb	r3, [r7, #13]
            opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x3e>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001f32:	e002      	b.n	8001f3a <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x44>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001f3a:	613b      	str	r3, [r7, #16]
            m_TxBuffer[0] = bank;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7ffa      	ldrb	r2, [r7, #31]
 8001f40:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

            if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	3304      	adds	r3, #4
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001f5c:	f107 020c 	add.w	r2, r7, #12
 8001f60:	4798      	blx	r3
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf14      	ite	ne
 8001f68:	2301      	movne	r3, #1
 8001f6a:	2300      	moveq	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x80>
            	return iIMU_ST::ERROR_COMM;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e004      	b.n	8001f80 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x8a>
            }

            m_currentBankReg = bankReg;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
        }

        return iIMU_ST::OK;
 8001f7e:	2300      	movs	r3, #0
    }
 8001f80:	4618      	mov	r0, r3
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <_ZN8ICM426888icm426889save_dataEv>:

    /////////////////////////////////////// PUBLIC ///////////////////////////////////////

        
    iIMU_ST icm42688::save_data()
    {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
        iIMU_ST ret = iIMU_ST::OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
        iPHANDLER_ST retHandler(iPHANDLER_ST::OK);
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
        PHandlerOpt opt;
 8001f98:	f107 0308 	add.w	r3, r7, #8
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff90 	bl	8001ec2 <_ZN11PHandlerOptC1Ev>

        ret = set_bank_register(bankRegister::BANK0);
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ffa6 	bl	8001ef6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001faa:	61f8      	str	r0, [r7, #28]
        if( ret != iIMU_ST::OK){
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <_ZN8ICM426888icm426889save_dataEv+0x2e>
            return ret;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	e055      	b.n	8002062 <_ZN8ICM426888icm426889save_dataEv+0xda>
        }
        

        opt.add = TEMP_DATA1_ADD;
 8001fb6:	231d      	movs	r3, #29
 8001fb8:	723b      	strb	r3, [r7, #8]
        opt.size = IMU_DATA_N_REGS;
 8001fba:	230e      	movs	r3, #14
 8001fbc:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <_ZN8ICM426888icm426889save_dataEv+0x48>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001fce:	e002      	b.n	8001fd6 <_ZN8ICM426888icm426889save_dataEv+0x4e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001fd6:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001fde:	613b      	str	r3, [r7, #16]


        if(!m_handler->lock()){
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fdcd 	bl	8001b86 <_ZN9iPHandler4lockEv>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f083 0301 	eor.w	r3, r3, #1
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <_ZN8ICM426888icm426889save_dataEv+0x74>
        	return iIMU_ST::ERROR_HANDLER_UNAVAILABLE;
 8001ff8:	2305      	movs	r3, #5
 8001ffa:	e032      	b.n	8002062 <_ZN8ICM426888icm426889save_dataEv+0xda>
        }

        retHandler = m_handler->read_registers(opt);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f107 0108 	add.w	r1, r7, #8
 8002010:	4610      	mov	r0, r2
 8002012:	4798      	blx	r3
 8002014:	61b8      	str	r0, [r7, #24]
        if(retHandler != iPHANDLER_ST::OK){
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <_ZN8ICM426888icm426889save_dataEv+0x9e>
            return map_handler_ret_to_iIMU_ret(retHandler);
 800201c:	69b8      	ldr	r0, [r7, #24]
 800201e:	f000 ffdf 	bl	8002fe0 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST>
 8002022:	4603      	mov	r3, r0
 8002024:	e01d      	b.n	8002062 <_ZN8ICM426888icm426889save_dataEv+0xda>
        }
         

        if(m_mode == COMM_MODE::BLCK){
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 800202c:	2b00      	cmp	r3, #0
 800202e:	d117      	bne.n	8002060 <_ZN8ICM426888icm426889save_dataEv+0xd8>
        	memcpy(m_RxBuffer, m_handler->m_recvBuffer, opt.size);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f503 7006 	add.w	r0, r3, #536	; 0x218
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	7a7a      	ldrb	r2, [r7, #9]
 8002040:	4619      	mov	r1, r3
 8002042:	f008 fb61 	bl	800a708 <memcpy>
            m_handler->unlock();
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fdae 	bl	8001bae <_ZN9iPHandler6unlockEv>
        	//load_data(dummyIMUData, m_RxBuffer);
            load_data(m_RxBuffer);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002058:	4619      	mov	r1, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 ff48 	bl	8002ef0 <_ZN8ICM426888icm426889load_dataEPh>
            //m_handler->m_mutex = false;
        }


        return ret;
 8002060:	69fb      	ldr	r3, [r7, #28]
    }
 8002062:	4618      	mov	r0, r3
 8002064:	3720      	adds	r7, #32
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_ZN8ICM426888icm4268818save_data_callbackEv>:

    void icm42688::save_data_callback()
    {
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
        //IMUData dummyIMUData;
        load_data(m_handler->m_recvBuffer);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4619      	mov	r1, r3
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 ff37 	bl	8002ef0 <_ZN8ICM426888icm426889load_dataEPh>
        m_handler->unlock();
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fd90 	bl	8001bae <_ZN9iPHandler6unlockEv>
        //m_handler->m_mutex = false;
    }
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <_ZN8ICM426888icm4268814save_fifo_dataEh>:
    


    iIMU_ST icm42688::save_fifo_data(uint8_t qty)
    {
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	70fb      	strb	r3, [r7, #3]
				return iIMU_ST::ERROR_BUFFER;
			}
        }

        */
        return iIMU_ST::OK;
 80020a2:	2300      	movs	r3, #0
        
    }
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <_ZN8ICM426888icm4268823save_fifo_data_callbackEv>:

    void icm42688::save_fifo_data_callback()
    {
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
            dummyIMUData.temp   = convertTempFIFOData(mRxBuffer[FIFO_PACKET_SIZE*i + 13]);
            imuDataBuffer.write(dummyIMUData);
        }
        */
        //return;
    }
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_ZN8ICM426888icm426889read_dataEP7IMUData>:


    iIMU_ST icm42688::read_data(IMUData *pData)
    {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
        if(imuDataBuffer.read(pData) == EXIT_OK){
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3304      	adds	r3, #4
 80020d2:	6839      	ldr	r1, [r7, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 ffc5 	bl	8003064 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b01      	cmp	r3, #1
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <_ZN8ICM426888icm426889read_dataEP7IMUData+0x2a>
            return iIMU_ST::OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e000      	b.n	80020f0 <_ZN8ICM426888icm426889read_dataEP7IMUData+0x2c>
        }
        return iIMU_ST::ERROR_BUFFER;
 80020ee:	2304      	movs	r3, #4
    }
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_ZN8ICM426888icm4268812set_gyro_odrEh>:


    iIMU_ST icm42688::set_gyro_odr(uint8_t odr) 
    {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	70fb      	strb	r3, [r7, #3]
        GYRO_CNF::ODR gyroNewODR = static_cast<GYRO_CNF::ODR> (odr);
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 8002108:	f107 0308 	add.w	r3, r7, #8
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fed8 	bl	8001ec2 <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8002112:	2100      	movs	r1, #0
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff feee 	bl	8001ef6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf14      	ite	ne
 8002120:	2301      	movne	r3, #1
 8002122:	2300      	moveq	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <_ZN8ICM426888icm4268812set_gyro_odrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 800212a:	2301      	movs	r3, #1
 800212c:	e04e      	b.n	80021cc <_ZN8ICM426888icm4268812set_gyro_odrEh+0xd4>
        }
        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_ODR(m_reg.GYRO_CONFIG0, gyroNewODR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8002134:	69f9      	ldr	r1, [r7, #28]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fdbc 	bl	8001cb4 <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>
 800213c:	4603      	mov	r3, r0
 800213e:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7efa      	ldrb	r2, [r7, #27]
 8002144:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = GYRO_CONFIG0_ADD;
 8002148:	234f      	movs	r3, #79	; 0x4f
 800214a:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 800214c:	2301      	movs	r3, #1
 800214e:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <_ZN8ICM426888icm4268812set_gyro_odrEh+0x6a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002160:	e002      	b.n	8002168 <_ZN8ICM426888icm4268812set_gyro_odrEh+0x70>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002168:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8002170:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	3304      	adds	r3, #4
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 800218a:	f107 0208 	add.w	r2, r7, #8
 800218e:	4798      	blx	r3
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	bf14      	ite	ne
 8002196:	2301      	movne	r3, #1
 8002198:	2300      	moveq	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <_ZN8ICM426888icm4268812set_gyro_odrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e013      	b.n	80021cc <_ZN8ICM426888icm4268812set_gyro_odrEh+0xd4>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7efa      	ldrb	r2, [r7, #27]
 80021a8:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_cnf.gyroODR = gyroNewODR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        m_gyroODRValue = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80021ba:	4618      	mov	r0, r3
 80021bc:	f002 f9ae 	bl	800451c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 80021c0:	eef0 7a40 	vmov.f32	s15, s0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260

        return iIMU_ST::OK;
 80021ca:	2300      	movs	r3, #0
    }
 80021cc:	4618      	mov	r0, r3
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <_ZN8ICM426888icm4268812set_gyro_fsrEh>:


    iIMU_ST icm42688::set_gyro_fsr(uint8_t fsr)
    {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
        GYRO_CNF::FSR gyroNewFSR = static_cast<GYRO_CNF::FSR> (fsr);
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 80021e4:	f107 0308 	add.w	r3, r7, #8
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fe6a 	bl	8001ec2 <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80021ee:	2100      	movs	r1, #0
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fe80 	bl	8001ef6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf14      	ite	ne
 80021fc:	2301      	movne	r3, #1
 80021fe:	2300      	moveq	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 8002206:	2301      	movs	r3, #1
 8002208:	e04e      	b.n	80022a8 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xd4>
        }

        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_FSR(m_reg.GYRO_CONFIG0, gyroNewFSR);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8002210:	69f9      	ldr	r1, [r7, #28]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fd38 	bl	8001c88 <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>
 8002218:	4603      	mov	r3, r0
 800221a:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7efa      	ldrb	r2, [r7, #27]
 8002220:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = GYRO_CONFIG0_ADD;
 8002224:	234f      	movs	r3, #79	; 0x4f
 8002226:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 8002228:	2301      	movs	r3, #1
 800222a:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x6a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800223c:	e002      	b.n	8002244 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x70>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002244:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 800224c:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3304      	adds	r3, #4
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8002266:	f107 0208 	add.w	r2, r7, #8
 800226a:	4798      	blx	r3
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	bf14      	ite	ne
 8002272:	2301      	movne	r3, #1
 8002274:	2300      	moveq	r3, #0
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 800227c:	2301      	movs	r3, #1
 800227e:	e013      	b.n	80022a8 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xd4>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7efa      	ldrb	r2, [r7, #27]
 8002284:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_cnf.gyroFSR = gyroNewFSR; 
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        m_gyroODRValue = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8002296:	4618      	mov	r0, r3
 8002298:	f002 f9a0 	bl	80045dc <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 800229c:	eef0 7a40 	vmov.f32	s15, s0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260

        return iIMU_ST::OK;
 80022a6:	2300      	movs	r3, #0

    } 
 80022a8:	4618      	mov	r0, r3
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_ZN8ICM426888icm4268813set_accel_odrEh>:


    iIMU_ST icm42688::set_accel_odr(uint8_t odr)
    {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
        ACCEL_CNF::ODR accelNewODR = static_cast<ACCEL_CNF::ODR> (odr);
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 80022c0:	f107 0308 	add.w	r3, r7, #8
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fdfc 	bl	8001ec2 <_ZN11PHandlerOptC1Ev>
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80022ca:	2100      	movs	r1, #0
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff fe12 	bl	8001ef6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <_ZN8ICM426888icm4268813set_accel_odrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e04e      	b.n	8002384 <_ZN8ICM426888icm4268813set_accel_odrEh+0xd4>
        }

        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_ODR(m_reg.ACCEL_CONFIG0, accelNewODR);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 80022ec:	69f9      	ldr	r1, [r7, #28]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fd0c 	bl	8001d0c <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>
 80022f4:	4603      	mov	r3, r0
 80022f6:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7efa      	ldrb	r2, [r7, #27]
 80022fc:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = ACCEL_CONFIG0_ADD;
 8002300:	2350      	movs	r3, #80	; 0x50
 8002302:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 8002304:	2301      	movs	r3, #1
 8002306:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <_ZN8ICM426888icm4268813set_accel_odrEh+0x6a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002318:	e002      	b.n	8002320 <_ZN8ICM426888icm4268813set_accel_odrEh+0x70>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002320:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8002328:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3304      	adds	r3, #4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8002342:	f107 0208 	add.w	r2, r7, #8
 8002346:	4798      	blx	r3
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf14      	ite	ne
 800234e:	2301      	movne	r3, #1
 8002350:	2300      	moveq	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <_ZN8ICM426888icm4268813set_accel_odrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 8002358:	2301      	movs	r3, #1
 800235a:	e013      	b.n	8002384 <_ZN8ICM426888icm4268813set_accel_odrEh+0xd4>
        }

        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7efa      	ldrb	r2, [r7, #27]
 8002360:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        m_cnf.accelODR = accelNewODR; 
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        m_accelODRValue = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8002372:	4618      	mov	r0, r3
 8002374:	f002 f956 	bl	8004624 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 8002378:	eef0 7a40 	vmov.f32	s15, s0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268

        return iIMU_ST::OK;
 8002382:	2300      	movs	r3, #0
    }
 8002384:	4618      	mov	r0, r3
 8002386:	3720      	adds	r7, #32
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <_ZN8ICM426888icm4268813set_accel_fsrEh>:


    iIMU_ST icm42688::set_accel_fsr(uint8_t fsr)
    {
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
        ACCEL_CNF::FSR accelNewFSR = static_cast<ACCEL_CNF::FSR> (fsr);
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 800239c:	f107 0308 	add.w	r3, r7, #8
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fd8e 	bl	8001ec2 <_ZN11PHandlerOptC1Ev>
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80023a6:	2100      	movs	r1, #0
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff fda4 	bl	8001ef6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf14      	ite	ne
 80023b4:	2301      	movne	r3, #1
 80023b6:	2300      	moveq	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <_ZN8ICM426888icm4268813set_accel_fsrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 80023be:	2301      	movs	r3, #1
 80023c0:	e04e      	b.n	8002460 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xd4>
        }

        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_FSR(m_reg.ACCEL_CONFIG0, accelNewFSR);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 80023c8:	69f9      	ldr	r1, [r7, #28]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fc88 	bl	8001ce0 <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>
 80023d0:	4603      	mov	r3, r0
 80023d2:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7efa      	ldrb	r2, [r7, #27]
 80023d8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = ACCEL_CONFIG0_ADD;
 80023dc:	2350      	movs	r3, #80	; 0x50
 80023de:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 80023e0:	2301      	movs	r3, #1
 80023e2:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <_ZN8ICM426888icm4268813set_accel_fsrEh+0x6a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80023f4:	e002      	b.n	80023fc <_ZN8ICM426888icm4268813set_accel_fsrEh+0x70>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80023fc:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8002404:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	3304      	adds	r3, #4
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 800241e:	f107 0208 	add.w	r2, r7, #8
 8002422:	4798      	blx	r3
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	bf14      	ite	ne
 800242a:	2301      	movne	r3, #1
 800242c:	2300      	moveq	r3, #0
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 8002434:	2301      	movs	r3, #1
 8002436:	e013      	b.n	8002460 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xd4>
        }

        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7efa      	ldrb	r2, [r7, #27]
 800243c:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        m_cnf.accelFSR = accelNewFSR; 
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
        m_accelFSRValue = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800244e:	4618      	mov	r0, r3
 8002450:	f002 f948 	bl	80046e4 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 8002454:	eef0 7a40 	vmov.f32	s15, s0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264

        return iIMU_ST::OK;
 800245e:	2300      	movs	r3, #0
    }
 8002460:	4618      	mov	r0, r3
 8002462:	3720      	adds	r7, #32
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_ZN8ICM426888icm4268819get_accel_odr_valueEv>:

    float icm42688::get_accel_odr_value()
    {
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
        return m_accelODRValue;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8002476:	ee07 3a90 	vmov	s15, r3
    }
 800247a:	eeb0 0a67 	vmov.f32	s0, s15
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_ZN8ICM426888icm4268819get_accel_fsr_valueEv>:
    float icm42688::get_accel_fsr_value()
    {
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
        return m_accelFSRValue;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8002496:	ee07 3a90 	vmov	s15, r3
    }
 800249a:	eeb0 0a67 	vmov.f32	s0, s15
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <_ZN8ICM426888icm4268818get_gyro_odr_valueEv>:
    float icm42688::get_gyro_odr_value() 
    {
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
        return m_gyroODRValue;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80024b6:	ee07 3a90 	vmov	s15, r3
    }
 80024ba:	eeb0 0a67 	vmov.f32	s0, s15
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <_ZN8ICM426888icm4268818get_gyro_fsr_valueEv>:
    float icm42688::get_gyro_fsr_value() 
    {
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
        return m_gyroFSRValue;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 80024d6:	ee07 3a90 	vmov	s15, r3
    }
 80024da:	eeb0 0a67 	vmov.f32	s0, s15
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <_ZN8ICM426888icm4268820get_accel_resolutionEv>:
    
    float icm42688::get_accel_resolution()
    {
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
        return m_accelFSRValue/(1<<15);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	edd3 7a99 	vldr	s15, [r3, #612]	; 0x264
 80024f6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002510 <_ZN8ICM426888icm4268820get_accel_resolutionEv+0x28>
 80024fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024fe:	eef0 7a66 	vmov.f32	s15, s13
    }
 8002502:	eeb0 0a67 	vmov.f32	s0, s15
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	47000000 	.word	0x47000000

08002514 <_ZN8ICM426888icm4268819get_gyro_resolutionEv>:
    
    float icm42688::get_gyro_resolution()
    {
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
        return m_gyroFSRValue/(1<<15);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 8002522:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800253c <_ZN8ICM426888icm4268819get_gyro_resolutionEv+0x28>
 8002526:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800252a:	eef0 7a66 	vmov.f32	s15, s13
    }
 800252e:	eeb0 0a67 	vmov.f32	s0, s15
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	47000000 	.word	0x47000000

08002540 <_ZN8ICM426888icm4268815convertGyroDataEhh>:



    float icm42688::convertGyroData(uint8_t rawGyroH, uint8_t rawGyroL)
    {
 8002540:	b580      	push	{r7, lr}
 8002542:	ed2d 8b02 	vpush	{d8}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	70fb      	strb	r3, [r7, #3]
 8002550:	4613      	mov	r3, r2
 8002552:	70bb      	strb	r3, [r7, #2]
        int16_t gyro_data = (rawGyroH << 8)  | rawGyroL;
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	b21a      	sxth	r2, r3
 800255a:	78bb      	ldrb	r3, [r7, #2]
 800255c:	b21b      	sxth	r3, r3
 800255e:	4313      	orrs	r3, r2
 8002560:	81fb      	strh	r3, [r7, #14]
        return gyro_data * get_gyro_resolution();
 8002562:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3340      	adds	r3, #64	; 0x40
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	4798      	blx	r3
 800257a:	eef0 7a40 	vmov.f32	s15, s0
 800257e:	ee68 7a27 	vmul.f32	s15, s16, s15

    }
 8002582:	eeb0 0a67 	vmov.f32	s0, s15
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	ecbd 8b02 	vpop	{d8}
 800258e:	bd80      	pop	{r7, pc}

08002590 <_ZN8ICM426888icm4268816convertAccelDataEhh>:

    float icm42688::convertAccelData(uint8_t rawAccelH, uint8_t rawAccelL)
    {
 8002590:	b580      	push	{r7, lr}
 8002592:	ed2d 8b02 	vpush	{d8}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
 80025a0:	4613      	mov	r3, r2
 80025a2:	70bb      	strb	r3, [r7, #2]
        int16_t gyro_data = (rawAccelH << 8)  | rawAccelL;
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	78bb      	ldrb	r3, [r7, #2]
 80025ac:	b21b      	sxth	r3, r3
 80025ae:	4313      	orrs	r3, r2
 80025b0:	81fb      	strh	r3, [r7, #14]
        return gyro_data * get_accel_resolution();
 80025b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025b6:	ee07 3a90 	vmov	s15, r3
 80025ba:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	333c      	adds	r3, #60	; 0x3c
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	4798      	blx	r3
 80025ca:	eef0 7a40 	vmov.f32	s15, s0
 80025ce:	ee68 7a27 	vmul.f32	s15, s16, s15
    }
 80025d2:	eeb0 0a67 	vmov.f32	s0, s15
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	ecbd 8b02 	vpop	{d8}
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_ZN8ICM426888icm4268812write_configEv>:

    iIMU_ST icm42688::write_config()
    {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
        iIMU_ST ret = iIMU_ST::OK; 
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
        
        
        if( (ret = write_config_accel_gyro()) != iIMU_ST::OK){
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f82c 	bl	800264a <_ZN8ICM426888icm4268823write_config_accel_gyroEv>
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	bf14      	ite	ne
 80025fa:	2301      	movne	r3, #1
 80025fc:	2300      	moveq	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <_ZN8ICM426888icm4268812write_configEv+0x28>
            return ret;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	e01c      	b.n	8002642 <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        if( (ret = write_config_FIFO()) != iIMU_ST::OK){
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f8eb 	bl	80027e4 <_ZN8ICM426888icm4268817write_config_FIFOEv>
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	bf14      	ite	ne
 8002616:	2301      	movne	r3, #1
 8002618:	2300      	moveq	r3, #0
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <_ZN8ICM426888icm4268812write_configEv+0x44>
            return ret;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	e00e      	b.n	8002642 <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        if( (ret = write_config_int()) != iIMU_ST::OK){
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f9d5 	bl	80029d4 <_ZN8ICM426888icm4268816write_config_intEv>
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	bf14      	ite	ne
 8002632:	2301      	movne	r3, #1
 8002634:	2300      	moveq	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <_ZN8ICM426888icm4268812write_configEv+0x60>
            return ret;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	e000      	b.n	8002642 <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        return ret;
 8002640:	68fb      	ldr	r3, [r7, #12]
        
    }
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <_ZN8ICM426888icm4268823write_config_accel_gyroEv>:

    iIMU_ST icm42688::write_config_accel_gyro()
    {
 800264a:	b580      	push	{r7, lr}
 800264c:	b088      	sub	sp, #32
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8002652:	f107 030c 	add.w	r3, r7, #12
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fc33 	bl	8001ec2 <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 800265c:	2100      	movs	r1, #0
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fc49 	bl	8001ef6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	bf14      	ite	ne
 800266a:	2301      	movne	r3, #1
 800266c:	2300      	moveq	r3, #0
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 8002674:	2301      	movs	r3, #1
 8002676:	e0b1      	b.n	80027dc <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }


        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_FSR(m_reg.GYRO_CONFIG0, m_cnf.gyroFSR);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 2238 	ldrb.w	r2, [r3, #568]	; 0x238
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f7ff fafe 	bl	8001c88 <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>
 800268c:	4603      	mov	r3, r0
 800268e:	77fb      	strb	r3, [r7, #31]
        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_ODR(new_GYRO_CONFIG0, m_cnf.gyroODR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 8002696:	7ffb      	ldrb	r3, [r7, #31]
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fb0a 	bl	8001cb4 <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>
 80026a0:	4603      	mov	r3, r0
 80026a2:	77fb      	strb	r3, [r7, #31]
        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_FSR(m_reg.ACCEL_CONFIG0, m_cnf.accelFSR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 2239 	ldrb.w	r2, [r3, #569]	; 0x239
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80026b0:	4619      	mov	r1, r3
 80026b2:	4610      	mov	r0, r2
 80026b4:	f7ff fb14 	bl	8001ce0 <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>
 80026b8:	4603      	mov	r3, r0
 80026ba:	77bb      	strb	r3, [r7, #30]
        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_ODR(new_ACCEL_CONFIG0, m_cnf.accelODR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 80026c2:	7fbb      	ldrb	r3, [r7, #30]
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fb20 	bl	8001d0c <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>
 80026cc:	4603      	mov	r3, r0
 80026ce:	77bb      	strb	r3, [r7, #30]


        //m_TxBuffer[1] = new_ACCEL_CONFIG0;

        opt.size = 1;
 80026d0:	2301      	movs	r3, #1
 80026d2:	737b      	strb	r3, [r7, #13]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x9c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80026e4:	e002      	b.n	80026ec <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0xa2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80026ec:	613b      	str	r3, [r7, #16]
        opt.mode = m_mode;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80026f4:	617b      	str	r3, [r7, #20]

        opt.add = GYRO_CONFIG0_ADD;
 80026f6:	234f      	movs	r3, #79	; 0x4f
 80026f8:	733b      	strb	r3, [r7, #12]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7ffa      	ldrb	r2, [r7, #31]
 80026fe:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3304      	adds	r3, #4
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 800271a:	f107 020c 	add.w	r2, r7, #12
 800271e:	4798      	blx	r3
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	bf14      	ite	ne
 8002726:	2301      	movne	r3, #1
 8002728:	2300      	moveq	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0xea>
            return iIMU_ST::ERROR_COMM;
 8002730:	2301      	movs	r3, #1
 8002732:	e053      	b.n	80027dc <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }

        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	7fba      	ldrb	r2, [r7, #30]
 8002738:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
        opt.add = ACCEL_CONFIG0_ADD;
 800273c:	2350      	movs	r3, #80	; 0x50
 800273e:	733b      	strb	r3, [r7, #12]
        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3304      	adds	r3, #4
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8002758:	f107 020c 	add.w	r2, r7, #12
 800275c:	4798      	blx	r3
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf14      	ite	ne
 8002764:	2301      	movne	r3, #1
 8002766:	2300      	moveq	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x128>
            return iIMU_ST::ERROR_COMM;
 800276e:	2301      	movs	r3, #1
 8002770:	e034      	b.n	80027dc <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	7ffa      	ldrb	r2, [r7, #31]
 8002776:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	7fba      	ldrb	r2, [r7, #30]
 800277e:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        
        m_gyroODRValue = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8002788:	4618      	mov	r0, r3
 800278a:	f001 fec7 	bl	800451c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 800278e:	eef0 7a40 	vmov.f32	s15, s0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_gyroODRValue = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 ff1c 	bl	80045dc <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 80027a4:	eef0 7a40 	vmov.f32	s15, s0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_accelODRValue = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 ff35 	bl	8004624 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 80027ba:	eef0 7a40 	vmov.f32	s15, s0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
        m_accelFSRValue = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80027ca:	4618      	mov	r0, r3
 80027cc:	f001 ff8a 	bl	80046e4 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 80027d0:	eef0 7a40 	vmov.f32	s15, s0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264

        return iIMU_ST::OK;
 80027da:	2300      	movs	r3, #0
    }
 80027dc:	4618      	mov	r0, r3
 80027de:	3720      	adds	r7, #32
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <_ZN8ICM426888icm4268817write_config_FIFOEv>:
    
    
    iIMU_ST icm42688::write_config_FIFO()
    {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 80027ec:	f107 030c 	add.w	r3, r7, #12
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fb66 	bl	8001ec2 <_ZN11PHandlerOptC1Ev>
        uint8_t new_INTF_CONFIG0;
        uint8_t new_FIFO_CONFIG;
        uint8_t new_FIFO_CONFIG1, new_FIFO_CONFIG2, new_FIFO_CONFIG3;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80027f6:	2100      	movs	r1, #0
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff fb7c 	bl	8001ef6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf14      	ite	ne
 8002804:	2301      	movne	r3, #1
 8002806:	2300      	moveq	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 800280e:	2301      	movs	r3, #1
 8002810:	e0dc      	b.n	80029cc <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }


        // Configuracion de registro INTF_CONFIG0
        opt.add = INTF_CONFIG0_ADD;
 8002812:	234c      	movs	r3, #76	; 0x4c
 8002814:	733b      	strb	r3, [r7, #12]
        opt.size = 1;
 8002816:	2301      	movs	r3, #1
 8002818:	737b      	strb	r3, [r7, #13]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <_ZN8ICM426888icm4268817write_config_FIFOEv+0x48>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800282a:	e002      	b.n	8002832 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x4e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002832:	613b      	str	r3, [r7, #16]
        opt.mode = m_mode;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 800283a:	617b      	str	r3, [r7, #20]

        new_INTF_CONFIG0 = m_reg.INTF_CONFIG0 | FIFO_CNF::FIFO_COUNT_REC;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 8002842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002846:	b2db      	uxtb	r3, r3
 8002848:	72fb      	strb	r3, [r7, #11]
        if(m_handler->write_registers(&new_INTF_CONFIG0, opt) != iPHANDLER_ST::OK){
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3304      	adds	r3, #4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f107 020c 	add.w	r2, r7, #12
 8002860:	f107 010b 	add.w	r1, r7, #11
 8002864:	4798      	blx	r3
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf14      	ite	ne
 800286c:	2301      	movne	r3, #1
 800286e:	2300      	moveq	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <_ZN8ICM426888icm4268817write_config_FIFOEv+0x96>
            return iIMU_ST::ERROR_COMM;
 8002876:	2301      	movs	r3, #1
 8002878:	e0a8      	b.n	80029cc <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }
        m_reg.INTF_CONFIG0 = new_INTF_CONFIG0;
 800287a:	7afa      	ldrb	r2, [r7, #11]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a

        // Configuracion de registro FIFO_CONFIG
        opt.add = FIFO_CONFIG_ADD;
 8002882:	2316      	movs	r3, #22
 8002884:	733b      	strb	r3, [r7, #12]
        new_FIFO_CONFIG = FIFO_CONFIG::SET_FIFO_MODE(m_cnf.fifoCnf.mode);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff f9ed 	bl	8001c6c <_ZN8ICM4268811FIFO_CONFIG13SET_FIFO_MODEENS_9FIFO_MODEE>
 8002892:	4603      	mov	r3, r0
 8002894:	72bb      	strb	r3, [r7, #10]
        if(m_handler->write_registers(&new_FIFO_CONFIG, opt) != iPHANDLER_ST::OK){
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3304      	adds	r3, #4
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f107 020c 	add.w	r2, r7, #12
 80028ac:	f107 010a 	add.w	r1, r7, #10
 80028b0:	4798      	blx	r3
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <_ZN8ICM426888icm4268817write_config_FIFOEv+0xe2>
            return iIMU_ST::ERROR_COMM;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e082      	b.n	80029cc <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }        
        m_reg.FIFO_CONFIG = new_FIFO_CONFIG;
 80028c6:	7aba      	ldrb	r2, [r7, #10]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b


        // Configuracion de los registros FIFO_CONFIG1, FIFO_CONFIG2 y FIFO_CONFIG3
        if(m_cnf.fifoCnf.mode != FIFO_MODE::BYPASS){
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d078      	beq.n	80029ca <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e6>
        	//Sets packets and watermark
        	new_FIFO_CONFIG1 = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	77fb      	strb	r3, [r7, #31]
        	new_FIFO_CONFIG1 = FIFO_CNF::FIFO_TEMP_EN | FIFO_CNF::FIFO_GYRO_EN | FIFO_CNF::FIFO_ACCEL_EN;
 80028dc:	2307      	movs	r3, #7
 80028de:	77fb      	strb	r3, [r7, #31]
        	new_FIFO_CONFIG2 = m_cnf.fifoCnf.watermark;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 80028e6:	77bb      	strb	r3, [r7, #30]
        	new_FIFO_CONFIG3 = m_cnf.fifoCnf.watermark >> 8;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	777b      	strb	r3, [r7, #29]

            
             opt.size = 1;
 80028f4:	2301      	movs	r3, #1
 80028f6:	737b      	strb	r3, [r7, #13]

            opt.add = FIFO_CONFIG1_ADD;
 80028f8:	235f      	movs	r3, #95	; 0x5f
 80028fa:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG1;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7ffa      	ldrb	r2, [r7, #31]
 8002900:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
            //m_TxBuffer[1] = new_FIFO_CONFIG2;
            //m_TxBuffer[2] = new_FIFO_CONFIG3;

            if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	3304      	adds	r3, #4
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 800291c:	f107 020c 	add.w	r2, r7, #12
 8002920:	4798      	blx	r3
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf14      	ite	ne
 8002928:	2301      	movne	r3, #1
 800292a:	2300      	moveq	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x152>
                return iIMU_ST::ERROR_COMM;
 8002932:	2301      	movs	r3, #1
 8002934:	e04a      	b.n	80029cc <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            opt.add = FIFO_CONFIG2_ADD;
 8002936:	2360      	movs	r3, #96	; 0x60
 8002938:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7fba      	ldrb	r2, [r7, #30]
 800293e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
             if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3304      	adds	r3, #4
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 800295a:	f107 020c 	add.w	r2, r7, #12
 800295e:	4798      	blx	r3
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	bf14      	ite	ne
 8002966:	2301      	movne	r3, #1
 8002968:	2300      	moveq	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x190>
                return iIMU_ST::ERROR_COMM;
 8002970:	2301      	movs	r3, #1
 8002972:	e02b      	b.n	80029cc <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            opt.add = FIFO_CONFIG3_ADD;
 8002974:	2361      	movs	r3, #97	; 0x61
 8002976:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG3;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7f7a      	ldrb	r2, [r7, #29]
 800297c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
             if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3304      	adds	r3, #4
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8002998:	f107 020c 	add.w	r2, r7, #12
 800299c:	4798      	blx	r3
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1ce>
                return iIMU_ST::ERROR_COMM;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e00c      	b.n	80029cc <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7ffa      	ldrb	r2, [r7, #31]
 80029b6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7fba      	ldrb	r2, [r7, #30]
 80029be:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG3;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7f7a      	ldrb	r2, [r7, #29]
 80029c6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
        }

        return iIMU_ST::OK;
 80029ca:	2300      	movs	r3, #0
    }
 80029cc:	4618      	mov	r0, r3
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_ZN8ICM426888icm4268816write_config_intEv>:


    iIMU_ST icm42688::write_config_int()
    {
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	f2ad 5d2c 	subw	sp, sp, #1324	; 0x52c
 80029da:	af00      	add	r7, sp, #0
 80029dc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80029e0:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80029e4:	6018      	str	r0, [r3, #0]

        PHandlerOpt opt;
 80029e6:	f107 030c 	add.w	r3, r7, #12
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fa69 	bl	8001ec2 <_ZN11PHandlerOptC1Ev>
        uint8_t new_INT_CONFIG = 0x00;
 80029f0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80029f4:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
        uint8_t new_INT_SOURCE0;
        uint8_t new_INT_SOURCE1;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80029fc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a00:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002a04:	2100      	movs	r1, #0
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	f7ff fa75 	bl	8001ef6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	bf14      	ite	ne
 8002a12:	2301      	movne	r3, #1
 8002a14:	2300      	moveq	r3, #0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <_ZN8ICM426888icm4268816write_config_intEv+0x4c>
            return iIMU_ST::ERROR_COMM;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e174      	b.n	8002d0a <_ZN8ICM426888icm4268816write_config_intEv+0x336>
        }
        
        opt.size = 1;
 8002a20:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a24:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002a28:	2201      	movs	r2, #1
 8002a2a:	705a      	strb	r2, [r3, #1]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002a2c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a30:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <_ZN8ICM426888icm4268816write_config_intEv+0x7a>
 8002a3e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a42:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002a4c:	e006      	b.n	8002a5c <_ZN8ICM426888icm4268816write_config_intEv+0x88>
 8002a4e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a52:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002a5c:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8002a60:	f2a2 521c 	subw	r2, r2, #1308	; 0x51c
 8002a64:	6053      	str	r3, [r2, #4]
        opt.mode = m_mode;
 8002a66:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a6a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8002a74:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a78:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002a7c:	609a      	str	r2, [r3, #8]


    	if(m_cnf.intCnf.int1Source != INT_SOURCE::DISABLED){
 8002a7e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a82:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a90:	f000 80bb 	beq.w	8002c0a <_ZN8ICM426888icm4268816write_config_intEv+0x236>
    		new_INT_CONFIG |= static_cast<uint8_t>(m_cnf.intCnf.int1Mode);
 8002a94:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a98:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002aa8:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002ab6:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8002aba:	701a      	strb	r2, [r3, #0]
    		new_INT_SOURCE0 = (1 << static_cast<uint8_t>(m_cnf.intCnf.int1Source ));
 8002abc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002ac0:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	2301      	movs	r3, #1
 8002ad0:	4093      	lsls	r3, r2
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002ad8:	f2a3 531e 	subw	r3, r3, #1310	; 0x51e
 8002adc:	701a      	strb	r2, [r3, #0]
            
            opt.add = INT_SOURCE0_ADD;
 8002ade:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002ae2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002ae6:	2265      	movs	r2, #101	; 0x65
 8002ae8:	701a      	strb	r2, [r3, #0]
            if(m_handler->write_registers(&new_INT_SOURCE0, opt) != iPHANDLER_ST::OK){
 8002aea:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002aee:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002af8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002afc:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f107 020c 	add.w	r2, r7, #12
 8002b10:	f107 010a 	add.w	r1, r7, #10
 8002b14:	4798      	blx	r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <_ZN8ICM426888icm4268816write_config_intEv+0x156>
                return iIMU_ST::ERROR_COMM;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0ef      	b.n	8002d0a <_ZN8ICM426888icm4268816write_config_intEv+0x336>
            }
            switch(m_cnf.intCnf.int1Source){
 8002b2a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b2e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d034      	beq.n	8002ba6 <_ZN8ICM426888icm4268816write_config_intEv+0x1d2>
            default:
            case INT_SOURCE::DATA_RDY:
            	m_INT1->interrupt_handler = std::bind(&icm42688::save_data, *this);
 8002b3c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b40:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002b4a:	461c      	mov	r4, r3
 8002b4c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b50:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b5c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8002b60:	2201      	movs	r2, #1
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b68:	f5a3 7126 	sub.w	r1, r3, #664	; 0x298
 8002b6c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b70:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8002b74:	460b      	mov	r3, r1
 8002b76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b7a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002b7e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b82:	f2a3 500c 	subw	r0, r3, #1292	; 0x50c
 8002b86:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b8a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002b8e:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	f000 fae1 	bl	800315a <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 8002b98:	f107 031c 	add.w	r3, r7, #28
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f000 faff 	bl	80031a2 <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>
				break;
 8002ba4:	e031      	b.n	8002c0a <_ZN8ICM426888icm4268816write_config_intEv+0x236>
            case INT_SOURCE::FIFO_THR:
            	m_INT1->interrupt_handler = std::bind(&icm42688::save_fifo_data, *this, m_cnf.fifoCnf.watermark);
 8002ba6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002baa:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002bb4:	461c      	mov	r4, r3
 8002bb6:	4a57      	ldr	r2, [pc, #348]	; (8002d14 <_ZN8ICM426888icm4268816write_config_intEv+0x340>)
 8002bb8:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8002bbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bc0:	e883 0003 	stmia.w	r3, {r0, r1}
 8002bc4:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8002bc8:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8002bcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bd0:	e883 0003 	stmia.w	r3, {r0, r1}
 8002bd4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002bd8:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002be2:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8002be6:	f5a2 7022 	sub.w	r0, r2, #648	; 0x288
 8002bea:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8002bee:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 8002bf2:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	f000 fbef 	bl	80033da <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISD_EEE5valueESB_JDpT0_EE4typeEOSB_DpOSI_>
 8002bfc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002c00:	4619      	mov	r1, r3
 8002c02:	4620      	mov	r0, r4
 8002c04:	f000 fc05 	bl	8003412 <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>
					break;
 8002c08:	bf00      	nop
            }
    	}

    	if(m_cnf.intCnf.int2Source != INT_SOURCE::DISABLED){
 8002c0a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002c0e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c1c:	d04e      	beq.n	8002cbc <_ZN8ICM426888icm4268816write_config_intEv+0x2e8>
    		new_INT_CONFIG |= (static_cast<uint8_t>(m_cnf.intCnf.int2Mode) << 3);
 8002c1e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002c22:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	b25a      	sxtb	r2, r3
 8002c32:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002c36:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	b25b      	sxtb	r3, r3
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	b25b      	sxtb	r3, r3
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002c48:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8002c4c:	701a      	strb	r2, [r3, #0]
    		new_INT_SOURCE1 = (1 << static_cast<uint8_t>(m_cnf.intCnf.int2Source ));
 8002c4e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002c52:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2301      	movs	r3, #1
 8002c62:	4093      	lsls	r3, r2
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002c6a:	f2a3 531f 	subw	r3, r3, #1311	; 0x51f
 8002c6e:	701a      	strb	r2, [r3, #0]
            
            opt.add = INT_SOURCE1_ADD;
 8002c70:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002c74:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002c78:	2266      	movs	r2, #102	; 0x66
 8002c7a:	701a      	strb	r2, [r3, #0]
            if(m_handler->write_registers(&new_INT_SOURCE1, opt) != iPHANDLER_ST::OK){
 8002c7c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002c80:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002c8a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002c8e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f107 020c 	add.w	r2, r7, #12
 8002ca2:	f107 0109 	add.w	r1, r7, #9
 8002ca6:	4798      	blx	r3
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	bf14      	ite	ne
 8002cae:	2301      	movne	r3, #1
 8002cb0:	2300      	moveq	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <_ZN8ICM426888icm4268816write_config_intEv+0x2e8>
                return iIMU_ST::ERROR_COMM;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e026      	b.n	8002d0a <_ZN8ICM426888icm4268816write_config_intEv+0x336>
            }  
		}

        //Enables watermark interrupt on INT1
        opt.add = INT_CONFIG_ADD;
 8002cbc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002cc0:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002cc4:	2214      	movs	r2, #20
 8002cc6:	701a      	strb	r2, [r3, #0]
        if(m_handler->write_registers(&new_INT_CONFIG, opt) != iPHANDLER_ST::OK){
 8002cc8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002ccc:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002cd6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002cda:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f107 020c 	add.w	r2, r7, #12
 8002cee:	f107 010b 	add.w	r1, r7, #11
 8002cf2:	4798      	blx	r3
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf14      	ite	ne
 8002cfa:	2301      	movne	r3, #1
 8002cfc:	2300      	moveq	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <_ZN8ICM426888icm4268816write_config_intEv+0x334>
            return iIMU_ST::ERROR_COMM;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <_ZN8ICM426888icm4268816write_config_intEv+0x336>
        } 

        return iIMU_ST::OK;
 8002d08:	2300      	movs	r3, #0
    }
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f207 572c 	addw	r7, r7, #1324	; 0x52c
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd90      	pop	{r4, r7, pc}
 8002d14:	0800a7d8 	.word	0x0800a7d8

08002d18 <_ZN8ICM426888icm426886enableEv>:


    iIMU_ST icm42688::enable()
    {        
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8002d20:	f107 0308 	add.w	r3, r7, #8
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff f8cc 	bl	8001ec2 <_ZN11PHandlerOptC1Ev>
        
        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff f8e2 	bl	8001ef6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bf14      	ite	ne
 8002d38:	2301      	movne	r3, #1
 8002d3a:	2300      	moveq	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <_ZN8ICM426888icm426886enableEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e038      	b.n	8002db8 <_ZN8ICM426888icm426886enableEv+0xa0>
        }
        
        opt.add = PWR_MGMT0_ADD;
 8002d46:	234e      	movs	r3, #78	; 0x4e
 8002d48:	723b      	strb	r3, [r7, #8]
        opt.size = 1;        
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <_ZN8ICM426888icm426886enableEv+0x48>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002d5e:	e002      	b.n	8002d66 <_ZN8ICM426888icm426886enableEv+0x4e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002d66:	60fb      	str	r3, [r7, #12]
        if(m_handler->write_registers((uint8_t*)&IMU_ENABLE_LOW_NOISE, opt) != iPHANDLER_ST::OK){
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3304      	adds	r3, #4
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f107 0208 	add.w	r2, r7, #8
 8002d7e:	4910      	ldr	r1, [pc, #64]	; (8002dc0 <_ZN8ICM426888icm426886enableEv+0xa8>)
 8002d80:	4798      	blx	r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf14      	ite	ne
 8002d88:	2301      	movne	r3, #1
 8002d8a:	2300      	moveq	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <_ZN8ICM426888icm426886enableEv+0x7e>
            return iIMU_ST::ERROR_COMM;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e010      	b.n	8002db8 <_ZN8ICM426888icm426886enableEv+0xa0>
        } 

        if(write_config() != iIMU_ST::OK){
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3344      	adds	r3, #68	; 0x44
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <_ZN8ICM426888icm426886enableEv+0x9e>
        	return iIMU_ST::ERROR_COMM;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <_ZN8ICM426888icm426886enableEv+0xa0>
        }

        return iIMU_ST::OK;
 8002db6:	2300      	movs	r3, #0

    	//return write_register(PWR_MGMT0_ADD, bankRegister::BANK0, IMU_ENABLE_LOW_NOISE);
    	// Algunos milisegundos deben pasar luego de habilitar la imu para que funcione (leer pag 77 de datasheet)
    }
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	0800a7f0 	.word	0x0800a7f0

08002dc4 <_ZN8ICM426888icm426887disableEv>:



    iIMU_ST icm42688::disable()
	{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8002dcc:	f107 0310 	add.w	r3, r7, #16
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff f876 	bl	8001ec2 <_ZN11PHandlerOptC1Ev>
        uint8_t nullValue = 0x00;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
        
//        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
//            return iIMU_ST::ERROR_COMM;
//        }

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8002dda:	2100      	movs	r1, #0
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff f88a 	bl	8001ef6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <_ZN8ICM426888icm426887disableEv+0x32>
            return iIMU_ST::ERROR_COMM;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e076      	b.n	8002ee4 <_ZN8ICM426888icm426887disableEv+0x120>
        }
        opt.size = 1;
 8002df6:	2301      	movs	r3, #1
 8002df8:	747b      	strb	r3, [r7, #17]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <_ZN8ICM426888icm426887disableEv+0x48>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002e0a:	e002      	b.n	8002e12 <_ZN8ICM426888icm426887disableEv+0x4e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002e12:	617b      	str	r3, [r7, #20]
        

        // Desabilita todos las configuraciones de interrupciones
		opt.add = INT_SOURCE0_ADD;
 8002e14:	2365      	movs	r3, #101	; 0x65
 8002e16:	743b      	strb	r3, [r7, #16]
		if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3304      	adds	r3, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f107 0210 	add.w	r2, r7, #16
 8002e2e:	f107 010f 	add.w	r1, r7, #15
 8002e32:	4798      	blx	r3
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bf14      	ite	ne
 8002e3a:	2301      	movne	r3, #1
 8002e3c:	2300      	moveq	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <_ZN8ICM426888icm426887disableEv+0x84>
			return iIMU_ST::ERROR_COMM;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e04d      	b.n	8002ee4 <_ZN8ICM426888icm426887disableEv+0x120>
		}
		opt.add = INT_SOURCE1_ADD;
 8002e48:	2366      	movs	r3, #102	; 0x66
 8002e4a:	743b      	strb	r3, [r7, #16]
		if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f107 0210 	add.w	r2, r7, #16
 8002e62:	f107 010f 	add.w	r1, r7, #15
 8002e66:	4798      	blx	r3
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bf14      	ite	ne
 8002e6e:	2301      	movne	r3, #1
 8002e70:	2300      	moveq	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <_ZN8ICM426888icm426887disableEv+0xb8>
			return iIMU_ST::ERROR_COMM;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e033      	b.n	8002ee4 <_ZN8ICM426888icm426887disableEv+0x120>
		}
        opt.add = INT_CONFIG_ADD;
 8002e7c:	2314      	movs	r3, #20
 8002e7e:	743b      	strb	r3, [r7, #16]
        if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f107 0210 	add.w	r2, r7, #16
 8002e96:	f107 010f 	add.w	r1, r7, #15
 8002e9a:	4798      	blx	r3
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bf14      	ite	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	2300      	moveq	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <_ZN8ICM426888icm426887disableEv+0xec>
            return iIMU_ST::ERROR_COMM;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e019      	b.n	8002ee4 <_ZN8ICM426888icm426887disableEv+0x120>
        }


        //Low power
        opt.add = PWR_MGMT0_ADD;
 8002eb0:	234e      	movs	r3, #78	; 0x4e
 8002eb2:	743b      	strb	r3, [r7, #16]
        if(m_handler->write_registers((uint8_t*)&IMU_DISABLE, opt) != iPHANDLER_ST::OK){
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f107 0210 	add.w	r2, r7, #16
 8002eca:	4908      	ldr	r1, [pc, #32]	; (8002eec <_ZN8ICM426888icm426887disableEv+0x128>)
 8002ecc:	4798      	blx	r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf14      	ite	ne
 8002ed4:	2301      	movne	r3, #1
 8002ed6:	2300      	moveq	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <_ZN8ICM426888icm426887disableEv+0x11e>
            return iIMU_ST::ERROR_COMM;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <_ZN8ICM426888icm426887disableEv+0x120>
        } 
        return iIMU_ST::OK;
 8002ee2:	2300      	movs	r3, #0
    	
        
        //return write_register(PWR_MGMT0_ADD, bankRegister::BANK0, IMU_DISABLE);
    	// Algunos milisegundos deben pasar luego de habilitar la imu para que funcione (leer pag 77 de datasheet)
	}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	0800a7f1 	.word	0x0800a7f1

08002ef0 <_ZN8ICM426888icm426889load_dataEPh>:


    }

    void icm42688::load_data(uint8_t *buffertData)
    {
 8002ef0:	b5b0      	push	{r4, r5, r7, lr}
 8002ef2:	b08e      	sub	sp, #56	; 0x38
 8002ef4:	af04      	add	r7, sp, #16
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
    	IMUData data;
        data.temp   = convertTempData(buffertData[0], buffertData[1]);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	781a      	ldrb	r2, [r3, #0]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	3301      	adds	r3, #1
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f001 fc0e 	bl	8004728 <_ZN8ICM4268815convertTempDataEhh>
 8002f0c:	eef0 7a40 	vmov.f32	s15, s0
 8002f10:	edc7 7a03 	vstr	s15, [r7, #12]
        data.accelX = convertAccelData(buffertData[2], buffertData[3]);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	3302      	adds	r3, #2
 8002f18:	7819      	ldrb	r1, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	3303      	adds	r3, #3
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff fb34 	bl	8002590 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 8002f28:	eef0 7a40 	vmov.f32	s15, s0
 8002f2c:	edc7 7a07 	vstr	s15, [r7, #28]
        data.accelY = convertAccelData(buffertData[4], buffertData[5]);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	3304      	adds	r3, #4
 8002f34:	7819      	ldrb	r1, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	3305      	adds	r3, #5
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff fb26 	bl	8002590 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 8002f44:	eef0 7a40 	vmov.f32	s15, s0
 8002f48:	edc7 7a08 	vstr	s15, [r7, #32]
        data.accelZ = convertAccelData(buffertData[6], buffertData[7]);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	3306      	adds	r3, #6
 8002f50:	7819      	ldrb	r1, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	3307      	adds	r3, #7
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff fb18 	bl	8002590 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 8002f60:	eef0 7a40 	vmov.f32	s15, s0
 8002f64:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        data.gyroX  = convertGyroData(buffertData[8], buffertData[9]);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	3308      	adds	r3, #8
 8002f6c:	7819      	ldrb	r1, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	3309      	adds	r3, #9
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff fae2 	bl	8002540 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 8002f7c:	eef0 7a40 	vmov.f32	s15, s0
 8002f80:	edc7 7a04 	vstr	s15, [r7, #16]
        data.gyroY  = convertGyroData(buffertData[10], buffertData[11]);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	330a      	adds	r3, #10
 8002f88:	7819      	ldrb	r1, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	330b      	adds	r3, #11
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff fad4 	bl	8002540 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 8002f98:	eef0 7a40 	vmov.f32	s15, s0
 8002f9c:	edc7 7a05 	vstr	s15, [r7, #20]
        data.gyroZ  = convertGyroData(buffertData[12], buffertData[13]);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	7819      	ldrb	r1, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	330d      	adds	r3, #13
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff fac6 	bl	8002540 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 8002fb4:	eef0 7a40 	vmov.f32	s15, s0
 8002fb8:	edc7 7a06 	vstr	s15, [r7, #24]
        imuDataBuffer.write(data);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	1d1d      	adds	r5, r3, #4
 8002fc0:	466c      	mov	r4, sp
 8002fc2:	f107 0318 	add.w	r3, r7, #24
 8002fc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002fcc:	f107 030c 	add.w	r3, r7, #12
 8002fd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	f000 fa3c 	bl	8003450 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_>
    }
 8002fd8:	bf00      	nop
 8002fda:	3728      	adds	r7, #40	; 0x28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bdb0      	pop	{r4, r5, r7, pc}

08002fe0 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST>:

    iIMU_ST icm42688::map_handler_ret_to_iIMU_ret(iPHANDLER_ST iHandlerRet){
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
    	iIMU_ST ret;

    	switch(iHandlerRet){
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d012      	beq.n	8003014 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x34>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	dc09      	bgt.n	8003008 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x28>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x22>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d006      	beq.n	800300e <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x2e>
 8003000:	e002      	b.n	8003008 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x28>
    	case iPHANDLER_ST::OK:
    		ret = iIMU_ST::OK;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
    		break;
 8003006:	e008      	b.n	800301a <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::ERROR:
    	default:
    		ret = iIMU_ST::ERROR_COMM;
 8003008:	2301      	movs	r3, #1
 800300a:	60fb      	str	r3, [r7, #12]
    		break;
 800300c:	e005      	b.n	800301a <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::UNAVAILABLE:
    		ret = iIMU_ST::ERROR_HANDLER_UNAVAILABLE;
 800300e:	2305      	movs	r3, #5
 8003010:	60fb      	str	r3, [r7, #12]
    		break;
 8003012:	e002      	b.n	800301a <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::INVALID:
    		ret = iIMU_ST::ERROR_INVALID_OP;
 8003014:	2303      	movs	r3, #3
 8003016:	60fb      	str	r3, [r7, #12]
    		break;
 8003018:	bf00      	nop

    	}

    	return ret;
 800301a:	68fb      	ldr	r3, [r7, #12]
    }
 800301c:	4618      	mov	r0, r3
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <_ZN11circ_bufferI7IMUDataLm16EtEC1Ev>:
                bool mEmpty_;

        };

        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
        {
            mFull_ = false;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
            mEmpty_ = true;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            mHead_ = 0;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
            mTail_ = 0;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
            mSize_ = 0;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	801a      	strh	r2, [r3, #0]
            
        }
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_>:
            return EXIT_OK;
        }


        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::read(bufferDataType* pData)
 8003064:	b4b0      	push	{r4, r5, r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
        {
            // bufferDataType data = 0;

            if (mEmpty_){
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x18>
                return EXIT_ERROR;
 8003078:	2300      	movs	r3, #0
 800307a:	e040      	b.n	80030fe <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x9a>
                // return data;
            }

            *pData = mBuffer_[mTail_];
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 8003082:	4619      	mov	r1, r3
 8003084:	6838      	ldr	r0, [r7, #0]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	1a5b      	subs	r3, r3, r1
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	4605      	mov	r5, r0
 8003094:	1d1c      	adds	r4, r3, #4
 8003096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800309a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800309e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            mFull_ = false;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

            if(--mSize_ == 0){
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	801a      	strh	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf0c      	ite	eq
 80030be:	2301      	moveq	r3, #1
 80030c0:	2300      	movne	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x6c>
                mEmpty_ = true;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            }

            if(++mTail_ == sCapacity_){
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 80030d6:	3301      	adds	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 80030e6:	2b10      	cmp	r3, #16
 80030e8:	bf0c      	ite	eq
 80030ea:	2301      	moveq	r3, #1
 80030ec:	2300      	movne	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x98>
                mTail_ = 0;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
            } 

            return EXIT_OK;
 80030fc:	2301      	movs	r3, #1
        }
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bcb0      	pop	{r4, r5, r7}
 8003106:	4770      	bx	lr

08003108 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fa33 	bl	8003584 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1EOS2_>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1EOS6_>:
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	e892 0003 	ldmia.w	r2, {r0, r1}
 800313a:	e883 0003 	stmia.w	r3, {r0, r1}
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f103 0208 	add.w	r2, r3, #8
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	3308      	adds	r3, #8
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f7ff ffdc 	bl	8003108 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1EOS2_>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline _GLIBCXX20_CONSTEXPR typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 800315a:	b590      	push	{r4, r7, lr}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 8003166:	68b8      	ldr	r0, [r7, #8]
 8003168:	f000 f9d7 	bl	800351a <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS5_E4typeE>
 800316c:	4604      	mov	r4, r0
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f9de 	bl	8003530 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	4621      	mov	r1, r4
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f9e3 	bl	8003546 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1IJRS1_EEEOS4_DpOT_>
    }
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	bd90      	pop	{r4, r7, pc}

08003188 <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe fce4 	bl	8001b60 <_ZNSt14_Function_baseD1Ev>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<_Functor>, function&>
	operator=(_Functor&& __f)
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
 80031ac:	6838      	ldr	r0, [r7, #0]
 80031ae:	f000 f9f9 	bl	80035a4 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 80031b2:	4602      	mov	r2, r0
 80031b4:	f107 0308 	add.w	r3, r7, #8
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 f9fe 	bl	80035bc <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_>
 80031c0:	f107 0308 	add.w	r3, r7, #8
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fa28 	bl	800361c <_ZNSt8functionIFvvEE4swapERS1_>
 80031cc:	f107 0308 	add.w	r3, r7, #8
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ffd9 	bl	8003188 <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 80031d6:	687b      	ldr	r3, [r7, #4]
	}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <_ZN4iIMUC1EOS_>:
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
 80031ea:	4a05      	ldr	r2, [pc, #20]	; (8003200 <_ZN4iIMUC1EOS_+0x20>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	0800a84c 	.word	0x0800a84c

08003204 <_ZN8ICM426888icm42688C1EOS0_>:
        uint8_t FIFO_CONFIG1 = 0x00;
        uint8_t FIFO_CONFIG2 = 0x00;
        uint8_t FIFO_CONFIG3 = 0x00;
    };

    class icm42688: public iIMU{
 8003204:	b5b0      	push	{r4, r5, r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ffe3 	bl	80031e0 <_ZN4iIMUC1EOS_>
 800321a:	4a46      	ldr	r2, [pc, #280]	; (8003334 <_ZN8ICM426888icm42688C1EOS0_+0x130>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	1d10      	adds	r0, r2, #4
 8003226:	3304      	adds	r3, #4
 8003228:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800322c:	4619      	mov	r1, r3
 800322e:	f007 fa6b 	bl	800a708 <memcpy>
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	f502 74e8 	add.w	r4, r2, #464	; 0x1d0
 800323a:	f503 75e8 	add.w	r5, r3, #464	; 0x1d0
 800323e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003246:	e895 0003 	ldmia.w	r5, {r0, r1}
 800324a:	e884 0003 	stmia.w	r4, {r0, r1}
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f502 74fc 	add.w	r4, r2, #504	; 0x1f8
 8003256:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 800325a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800325c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800325e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	f502 7406 	add.w	r4, r2, #536	; 0x218
 800326e:	f503 7506 	add.w	r5, r3, #536	; 0x218
 8003272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003276:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800327a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8003286:	f502 720e 	add.w	r2, r2, #568	; 0x238
 800328a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800328e:	6018      	str	r0, [r3, #0]
 8003290:	3304      	adds	r3, #4
 8003292:	8019      	strh	r1, [r3, #0]
 8003294:	3302      	adds	r3, #2
 8003296:	0c0a      	lsrs	r2, r1, #16
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	f893 2248 	ldrb.w	r2, [r3, #584]	; 0x248
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f893 2249 	ldrb.w	r2, [r3, #585]	; 0x249
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bdb0      	pop	{r4, r5, r7, pc}
 8003334:	0800a7fc 	.word	0x0800a7fc

08003338 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>:
      constexpr _Head_base(_Head_base&&) = default;
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff5b 	bl	8003204 <_ZN8ICM426888icm42688C1EOS0_>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&&) = default;
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f9b3 	bl	80036d4 <_ZNSt11_Tuple_implILj1EJtEEC1EOS0_>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	1d1a      	adds	r2, r3, #4
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	3304      	adds	r3, #4
 8003376:	4619      	mov	r1, r3
 8003378:	4610      	mov	r0, r2
 800337a:	f7ff ffdd 	bl	8003338 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1EOS2_>:
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ffdd 	bl	8003358 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1EOS2_>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1EOS6_>:
      _Bind(_Bind&&) = default;
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f103 0208 	add.w	r2, r3, #8
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	3308      	adds	r3, #8
 80033c8:	4619      	mov	r1, r3
 80033ca:	4610      	mov	r0, r2
 80033cc:	f7ff ffdc 	bl	8003388 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1EOS2_>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISD_EEE5valueESB_JDpT0_EE4typeEOSB_DpOSI_>:
    bind(_Func&& __f, _BoundArgs&&... __args)
 80033da:	b5b0      	push	{r4, r5, r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	603b      	str	r3, [r7, #0]
					  std::forward<_BoundArgs>(__args)...);
 80033e8:	68b8      	ldr	r0, [r7, #8]
 80033ea:	f000 f938 	bl	800365e <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS5_E4typeE>
 80033ee:	4604      	mov	r4, r0
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f89d 	bl	8003530 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80033f6:	4605      	mov	r5, r0
 80033f8:	6838      	ldr	r0, [r7, #0]
 80033fa:	f000 f93b 	bl	8003674 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80033fe:	4603      	mov	r3, r0
 8003400:	462a      	mov	r2, r5
 8003402:	4621      	mov	r1, r4
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f940 	bl	800368a <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1IJRS1_RtEEEOS4_DpOT_>
    }
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bdb0      	pop	{r4, r5, r7, pc}

08003412 <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>:
	operator=(_Functor&& __f)
 8003412:	b580      	push	{r7, lr}
 8003414:	b086      	sub	sp, #24
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800341c:	6838      	ldr	r0, [r7, #0]
 800341e:	f000 f969 	bl	80036f4 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8003422:	4602      	mov	r2, r0
 8003424:	f107 0308 	add.w	r3, r7, #8
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f96e 	bl	800370c <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_>
 8003430:	f107 0308 	add.w	r3, r7, #8
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f8f0 	bl	800361c <_ZNSt8functionIFvvEE4swapERS1_>
 800343c:	f107 0308 	add.w	r3, r7, #8
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fea1 	bl	8003188 <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 8003446:	687b      	ldr	r3, [r7, #4]
	}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_>:
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::write(bufferDataType data)
 8003450:	b084      	sub	sp, #16
 8003452:	b4b0      	push	{r4, r5, r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	f107 001c 	add.w	r0, r7, #28
 800345e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
            mBuffer_[mHead_] = data;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 8003468:	4619      	mov	r1, r3
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	1a5b      	subs	r3, r3, r1
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	1d1c      	adds	r4, r3, #4
 8003478:	f107 051c 	add.w	r5, r7, #28
 800347c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800347e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003480:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003484:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            mEmpty_ = false;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            if(++mHead_ == sCapacity_){
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 8003496:	3301      	adds	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	bf0c      	ite	eq
 80034aa:	2301      	moveq	r3, #1
 80034ac:	2300      	movne	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x6c>
                mHead_ = 0;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
            if(mFull_ == true){
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d10f      	bne.n	80034e6 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x96>
                mTail_ = mTail_ + 1 == sCapacity_ ? 0 : mTail_ + 1; // mTail_ = ++mTail_ == sCapacity_ ? 0 : mTail_;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 80034cc:	2b0f      	cmp	r3, #15
 80034ce:	d005      	beq.n	80034dc <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x8c>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 80034d6:	3301      	adds	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	e000      	b.n	80034de <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x8e>
 80034dc:	2200      	movs	r2, #0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 80034e4:	e012      	b.n	800350c <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0xbc>
            }else if(++mSize_ == sCapacity_){
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	3301      	adds	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	801a      	strh	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	2b10      	cmp	r3, #16
 80034f8:	bf0c      	ite	eq
 80034fa:	2301      	moveq	r3, #1
 80034fc:	2300      	movne	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0xbc>
                mFull_ = true;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
            return EXIT_OK;
 800350c:	2301      	movs	r3, #1
        }
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	bcb0      	pop	{r4, r5, r7}
 8003516:	b004      	add	sp, #16
 8003518:	4770      	bx	lr

0800351a <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1IJRS1_EEEOS4_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 8003546:	b590      	push	{r4, r7, lr}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 8003552:	68b8      	ldr	r0, [r7, #8]
 8003554:	f000 f90a 	bl	800376c <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_STvEEONSt16remove_referenceIT_E4typeEOS7_>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003560:	e883 0003 	stmia.w	r3, {r0, r1}
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f103 0408 	add.w	r4, r3, #8
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ffe0 	bl	8003530 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003570:	4603      	mov	r3, r0
 8003572:	4619      	mov	r1, r3
 8003574:	4620      	mov	r0, r4
 8003576:	f000 f904 	bl	8003782 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1IJRS1_ELb1ELb1EEEDpOT_>
	{ }
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	bd90      	pop	{r4, r7, pc}

08003584 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fecf 	bl	8003338 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>
      { }
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4618      	mov	r0, r3
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_>:
	function(_Functor&& __f)
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	461a      	mov	r2, r3
 80035ca:	2300      	movs	r3, #0
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	6053      	str	r3, [r2, #4]
 80035d0:	6093      	str	r3, [r2, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fe f9e3 	bl	80019a0 <_ZNSt14_Function_baseC1Ev>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80035e0:	6838      	ldr	r0, [r7, #0]
 80035e2:	f000 f8e1 	bl	80037a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE21_M_not_empty_functionIS8_EEbRKT_>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00e      	beq.n	800360a <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80035ec:	687c      	ldr	r4, [r7, #4]
 80035ee:	6838      	ldr	r0, [r7, #0]
 80035f0:	f7ff ffd8 	bl	80035a4 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 80035f4:	4603      	mov	r3, r0
 80035f6:	4619      	mov	r1, r3
 80035f8:	4620      	mov	r0, r4
 80035fa:	f000 f8e0 	bl	80037be <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a04      	ldr	r2, [pc, #16]	; (8003614 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x58>)
 8003602:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a04      	ldr	r2, [pc, #16]	; (8003618 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x5c>)
 8003608:	609a      	str	r2, [r3, #8]
	}
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	bd90      	pop	{r4, r7, pc}
 8003614:	080037e3 	.word	0x080037e3
 8003618:	08003801 	.word	0x08003801

0800361c <_ZNSt8functionIFvvEE4swapERS1_>:
       *  @param __x A %function with identical call signature.
       *
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x) noexcept
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_functor, __x._M_functor);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	4611      	mov	r1, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f000 f911 	bl	8003854 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f103 0208 	add.w	r2, r3, #8
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	3308      	adds	r3, #8
 800363c:	4619      	mov	r1, r3
 800363e:	4610      	mov	r0, r2
 8003640:	f000 f93a 	bl	80038b8 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f103 020c 	add.w	r2, r3, #12
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	330c      	adds	r3, #12
 800364e:	4619      	mov	r1, r3
 8003650:	4610      	mov	r0, r2
 8003652:	f000 f95b 	bl	800390c <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1IJRS1_RtEEEOS4_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 800368a:	b5b0      	push	{r4, r5, r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 8003698:	68b8      	ldr	r0, [r7, #8]
 800369a:	f000 f956 	bl	800394a <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_SThEEONSt16remove_referenceIT_E4typeEOS7_>
 800369e:	4602      	mov	r2, r0
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f103 0408 	add.w	r4, r3, #8
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff3d 	bl	8003530 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80036b6:	4605      	mov	r5, r0
 80036b8:	6838      	ldr	r0, [r7, #0]
 80036ba:	f7ff ffdb 	bl	8003674 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80036be:	4603      	mov	r3, r0
 80036c0:	461a      	mov	r2, r3
 80036c2:	4629      	mov	r1, r5
 80036c4:	4620      	mov	r0, r4
 80036c6:	f000 f94b 	bl	8003960 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1IRS1_RtLb1EEEOT_OT0_>
	{ }
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bdb0      	pop	{r4, r5, r7, pc}

080036d4 <_ZNSt11_Tuple_implILj1EJtEEC1EOS0_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	8812      	ldrh	r2, [r2, #0]
 80036e4:	801a      	strh	r2, [r3, #0]
      { }
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4618      	mov	r0, r3
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_>:
	function(_Functor&& __f)
 800370c:	b590      	push	{r4, r7, lr}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	461a      	mov	r2, r3
 800371a:	2300      	movs	r3, #0
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	6053      	str	r3, [r2, #4]
 8003720:	6093      	str	r3, [r2, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4618      	mov	r0, r3
 8003726:	f7fe f93b 	bl	80019a0 <_ZNSt14_Function_baseC1Ev>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8003730:	6838      	ldr	r0, [r7, #0]
 8003732:	f000 f92e 	bl	8003992 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE21_M_not_empty_functionIS8_EEbRKT_>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00e      	beq.n	800375a <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 800373c:	687c      	ldr	r4, [r7, #4]
 800373e:	6838      	ldr	r0, [r7, #0]
 8003740:	f7ff ffd8 	bl	80036f4 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8003744:	4603      	mov	r3, r0
 8003746:	4619      	mov	r1, r3
 8003748:	4620      	mov	r0, r4
 800374a:	f000 f92d 	bl	80039a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a04      	ldr	r2, [pc, #16]	; (8003764 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x58>)
 8003752:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a04      	ldr	r2, [pc, #16]	; (8003768 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x5c>)
 8003758:	609a      	str	r2, [r3, #8]
	}
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bd90      	pop	{r4, r7, pc}
 8003764:	080039cd 	.word	0x080039cd
 8003768:	080039eb 	.word	0x080039eb

0800376c <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_STvEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1IJRS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8003782:	b590      	push	{r4, r7, lr}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 800378c:	687c      	ldr	r4, [r7, #4]
 800378e:	6838      	ldr	r0, [r7, #0]
 8003790:	f7ff fece 	bl	8003530 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003794:	4603      	mov	r3, r0
 8003796:	4619      	mov	r1, r3
 8003798:	4620      	mov	r0, r4
 800379a:	f000 f945 	bl	8003a28 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1IRS1_EEOT_>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd90      	pop	{r4, r7, pc}

080037a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	  { return true; }
 80037b0:	2301      	movs	r3, #1
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80037be:	b590      	push	{r4, r7, lr}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80037c8:	6838      	ldr	r0, [r7, #0]
 80037ca:	f7ff feeb 	bl	80035a4 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 80037ce:	4603      	mov	r3, r0
 80037d0:	4622      	mov	r2, r4
 80037d2:	4619      	mov	r1, r3
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f93a 	bl	8003a4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd90      	pop	{r4, r7, pc}

080037e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f94c 	bl	8003a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f966 	bl	8003ac4 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 80037f8:	bf00      	nop
      }
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	4613      	mov	r3, r2
 800380c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d109      	bne.n	8003828 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f965 	bl	8003ae4 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 800381a:	4604      	mov	r4, r0
 800381c:	68b8      	ldr	r0, [r7, #8]
 800381e:	f000 f933 	bl	8003a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8003822:	4603      	mov	r3, r0
 8003824:	6023      	str	r3, [r4, #0]
	    break;
 8003826:	e005      	b.n	8003834 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	461a      	mov	r2, r3
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f964 	bl	8003afc <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 8003834:	2300      	movs	r3, #0
      }
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bd90      	pop	{r4, r7, pc}

0800383e <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff ffed 	bl	800383e <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8003864:	4602      	mov	r2, r0
 8003866:	f107 0308 	add.w	r3, r7, #8
 800386a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800386e:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8003872:	6838      	ldr	r0, [r7, #0]
 8003874:	f7ff ffe3 	bl	800383e <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8003878:	4602      	mov	r2, r0
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003880:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8003884:	f107 0308 	add.w	r3, r7, #8
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff ffd8 	bl	800383e <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800388e:	4602      	mov	r2, r0
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003896:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ffed 	bl	80038a2 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80038c8:	4603      	mov	r3, r0
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80038ce:	6838      	ldr	r0, [r7, #0]
 80038d0:	f7ff ffe7 	bl	80038a2 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80038d4:	4603      	mov	r3, r0
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80038dc:	f107 030c 	add.w	r3, r7, #12
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff ffde 	bl	80038a2 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80038e6:	4603      	mov	r3, r0
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	601a      	str	r2, [r3, #0]
    }
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ffed 	bl	80038f6 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800391c:	4603      	mov	r3, r0
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003922:	6838      	ldr	r0, [r7, #0]
 8003924:	f7ff ffe7 	bl	80038f6 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8003928:	4603      	mov	r3, r0
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003930:	f107 030c 	add.w	r3, r7, #12
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff ffde 	bl	80038f6 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800393a:	4603      	mov	r3, r0
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	601a      	str	r2, [r3, #0]
    }
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_SThEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1IRS1_RtLb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8003960:	b5b0      	push	{r4, r5, r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800396c:	68fc      	ldr	r4, [r7, #12]
 800396e:	68b8      	ldr	r0, [r7, #8]
 8003970:	f7ff fdde 	bl	8003530 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003974:	4605      	mov	r5, r0
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fe7c 	bl	8003674 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	4629      	mov	r1, r5
 8003982:	4620      	mov	r0, r4
 8003984:	f000 f8f4 	bl	8003b70 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1IRS1_JRtEvEEOT_DpOT0_>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bdb0      	pop	{r4, r5, r7, pc}

08003992 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
	  { return true; }
 800399a:	2301      	movs	r3, #1
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80039a8:	b590      	push	{r4, r7, lr}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80039b2:	6838      	ldr	r0, [r7, #0]
 80039b4:	f7ff fe9e 	bl	80036f4 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80039b8:	4603      	mov	r3, r0
 80039ba:	4622      	mov	r2, r4
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8f4 	bl	8003bac <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd90      	pop	{r4, r7, pc}

080039cc <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f906 	bl	8003be6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 80039da:	4603      	mov	r3, r0
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 f920 	bl	8003c22 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 80039e2:	bf00      	nop
      }
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80039ea:	b590      	push	{r4, r7, lr}
 80039ec:	b085      	sub	sp, #20
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	4613      	mov	r3, r2
 80039f6:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d109      	bne.n	8003a12 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f91f 	bl	8003c42 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8003a04:	4604      	mov	r4, r0
 8003a06:	68b8      	ldr	r0, [r7, #8]
 8003a08:	f000 f8ed 	bl	8003be6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	6023      	str	r3, [r4, #0]
	    break;
 8003a10:	e005      	b.n	8003a1e <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	461a      	mov	r2, r3
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f91f 	bl	8003c5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 8003a1e:	2300      	movs	r3, #0
      }
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd90      	pop	{r4, r7, pc}

08003a28 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1IRS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8003a28:	b590      	push	{r4, r7, lr}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8003a32:	687c      	ldr	r4, [r7, #4]
 8003a34:	6838      	ldr	r0, [r7, #0]
 8003a36:	f7ff fd7b 	bl	8003530 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f000 f9f2 	bl	8003e28 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>
	{ }
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd90      	pop	{r4, r7, pc}

08003a4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8003a4e:	b5b0      	push	{r4, r5, r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8003a5a:	68b8      	ldr	r0, [r7, #8]
 8003a5c:	f7ff fda2 	bl	80035a4 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8003a60:	4605      	mov	r5, r0
 8003a62:	f44f 701d 	mov.w	r0, #628	; 0x274
 8003a66:	f006 fa75 	bl	8009f54 <_Znwj>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	461c      	mov	r4, r3
 8003a6e:	4629      	mov	r1, r5
 8003a70:	4620      	mov	r0, r4
 8003a72:	f7ff fb59 	bl	8003128 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1EOS6_>
	    __dest._M_access<_Functor*>()
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f834 	bl	8003ae4 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8003a7c:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8003a7e:	601c      	str	r4, [r3, #0]
	  }
 8003a80:	bf00      	nop
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bdb0      	pop	{r4, r5, r7, pc}

08003a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f9dc 	bl	8003e4e <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERKT_v>
 8003a96:	4603      	mov	r3, r0
 8003a98:	681b      	ldr	r3, [r3, #0]
	}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_vES3_EEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	7138      	strb	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003aac:	6838      	ldr	r0, [r7, #0]
 8003aae:	f000 f9da 	bl	8003e66 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 f9e1 	bl	8003e7c <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEclIJES2_EET0_DpOT_>
 8003aba:	4603      	mov	r3, r0
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8003ac4:	b590      	push	{r4, r7, lr}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f9ca 	bl	8003e66 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f7ff ffe3 	bl	8003aa2 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_vES3_EEJEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd90      	pop	{r4, r7, pc}

08003ae4 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>:
      _M_access()
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7fe f821 	bl	8001b34 <_ZNSt9_Any_data9_M_accessEv>
 8003af2:	4603      	mov	r3, r0
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8003afc:	b590      	push	{r4, r7, lr}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d82a      	bhi.n	8003b66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
 8003b10:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1c>)
 8003b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b16:	bf00      	nop
 8003b18:	08003b29 	.word	0x08003b29
 8003b1c:	08003b37 	.word	0x08003b37
 8003b20:	08003b4b 	.word	0x08003b4b
 8003b24:	08003b5d 	.word	0x08003b5d
	      __dest._M_access<const type_info*>() = nullptr;
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f9b9 	bl	8003ea0 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
	      break;
 8003b34:	e017      	b.n	8003b66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f7ff ffd4 	bl	8003ae4 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8003b3c:	4604      	mov	r4, r0
 8003b3e:	68b8      	ldr	r0, [r7, #8]
 8003b40:	f7ff ffa2 	bl	8003a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8003b44:	4603      	mov	r3, r0
 8003b46:	6023      	str	r3, [r4, #0]
	      break;
 8003b48:	e00d      	b.n	8003b66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8003b4a:	68b8      	ldr	r0, [r7, #8]
 8003b4c:	f7ff ff9c 	bl	8003a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8003b50:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8003b52:	4619      	mov	r1, r3
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f9af 	bl	8003eb8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>
	      break;
 8003b5a:	e004      	b.n	8003b66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f9bc 	bl	8003edc <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8003b64:	bf00      	nop
	  return false;
 8003b66:	2300      	movs	r3, #0
	}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd90      	pop	{r4, r7, pc}

08003b70 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1IRS1_JRtEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8003b7c:	68fc      	ldr	r4, [r7, #12]
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff fd78 	bl	8003674 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8003b84:	4603      	mov	r3, r0
 8003b86:	4619      	mov	r1, r3
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f000 f9bc 	bl	8003f06 <_ZNSt11_Tuple_implILj1EJtEEC1IRtEEOT_>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1d1c      	adds	r4, r3, #4
 8003b92:	68b8      	ldr	r0, [r7, #8]
 8003b94:	f7ff fccc 	bl	8003530 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	f000 f943 	bl	8003e28 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>
	{ }
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd90      	pop	{r4, r7, pc}

08003bac <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8003bac:	b5b0      	push	{r4, r5, r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8003bb8:	68b8      	ldr	r0, [r7, #8]
 8003bba:	f7ff fd9b 	bl	80036f4 <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8003bbe:	4605      	mov	r5, r0
 8003bc0:	f44f 701e 	mov.w	r0, #632	; 0x278
 8003bc4:	f006 f9c6 	bl	8009f54 <_Znwj>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	461c      	mov	r4, r3
 8003bcc:	4629      	mov	r1, r5
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f7ff fbea 	bl	80033a8 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1EOS6_>
	    __dest._M_access<_Functor*>()
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f834 	bl	8003c42 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8003bda:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8003bdc:	601c      	str	r4, [r3, #0]
	  }
 8003bde:	bf00      	nop
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bdb0      	pop	{r4, r5, r7, pc}

08003be6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f99c 	bl	8003f2c <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERKT_v>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	681b      	ldr	r3, [r3, #0]
	}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_hES3_tEEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	7138      	strb	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003c0a:	6838      	ldr	r0, [r7, #0]
 8003c0c:	f000 f99a 	bl	8003f44 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8003c10:	4603      	mov	r3, r0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f9a1 	bl	8003f5a <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEclIJES2_EET0_DpOT_>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8003c22:	b590      	push	{r4, r7, lr}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f98a 	bl	8003f44 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8003c30:	4603      	mov	r3, r0
 8003c32:	4619      	mov	r1, r3
 8003c34:	4620      	mov	r0, r4
 8003c36:	f7ff ffe3 	bl	8003c00 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_hES3_tEEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd90      	pop	{r4, r7, pc}

08003c42 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>:
      _M_access()
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd ff72 	bl	8001b34 <_ZNSt9_Any_data9_M_accessEv>
 8003c50:	4603      	mov	r3, r0
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	4613      	mov	r3, r2
 8003c68:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d82a      	bhi.n	8003cc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
 8003c70:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1c>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003c89 	.word	0x08003c89
 8003c7c:	08003c97 	.word	0x08003c97
 8003c80:	08003cab 	.word	0x08003cab
 8003c84:	08003cbd 	.word	0x08003cbd
	      __dest._M_access<const type_info*>() = nullptr;
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f909 	bl	8003ea0 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
	      break;
 8003c94:	e017      	b.n	8003cc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7ff ffd3 	bl	8003c42 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	68b8      	ldr	r0, [r7, #8]
 8003ca0:	f7ff ffa1 	bl	8003be6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	6023      	str	r3, [r4, #0]
	      break;
 8003ca8:	e00d      	b.n	8003cc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8003caa:	68b8      	ldr	r0, [r7, #8]
 8003cac:	f7ff ff9b 	bl	8003be6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8003cb0:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f962 	bl	8003f7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>
	      break;
 8003cba:	e004      	b.n	8003cc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f96f 	bl	8003fa2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8003cc4:	bf00      	nop
	  return false;
 8003cc6:	2300      	movs	r3, #0
	}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd90      	pop	{r4, r7, pc}

08003cd0 <_ZN4iIMUC1ERKS_>:
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
 8003cda:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <_ZN4iIMUC1ERKS_+0x20>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	0800a84c 	.word	0x0800a84c

08003cf4 <_ZN8ICM426888icm42688C1ERKS0_>:
 8003cf4:	b5b0      	push	{r4, r5, r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff ffe3 	bl	8003cd0 <_ZN4iIMUC1ERKS_>
 8003d0a:	4a46      	ldr	r2, [pc, #280]	; (8003e24 <_ZN8ICM426888icm42688C1ERKS0_+0x130>)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	1d10      	adds	r0, r2, #4
 8003d16:	3304      	adds	r3, #4
 8003d18:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	f006 fcf3 	bl	800a708 <memcpy>
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	f502 74e8 	add.w	r4, r2, #464	; 0x1d0
 8003d2a:	f503 75e8 	add.w	r5, r3, #464	; 0x1d0
 8003d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d36:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003d3a:	e884 0003 	stmia.w	r4, {r0, r1}
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	f502 74fc 	add.w	r4, r2, #504	; 0x1f8
 8003d46:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 8003d4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003d52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	f502 7406 	add.w	r4, r2, #536	; 0x218
 8003d5e:	f503 7506 	add.w	r5, r3, #536	; 0x218
 8003d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003d6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8003d76:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8003d7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d7e:	6018      	str	r0, [r3, #0]
 8003d80:	3304      	adds	r3, #4
 8003d82:	8019      	strh	r1, [r3, #0]
 8003d84:	3302      	adds	r3, #2
 8003d86:	0c0a      	lsrs	r2, r1, #16
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	f893 2248 	ldrb.w	r2, [r3, #584]	; 0x248
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f893 2249 	ldrb.w	r2, [r3, #585]	; 0x249
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bdb0      	pop	{r4, r5, r7, pc}
 8003e24:	0800a7fc 	.word	0x0800a7fc

08003e28 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8003e32:	687c      	ldr	r4, [r7, #4]
 8003e34:	6838      	ldr	r0, [r7, #0]
 8003e36:	f7ff fb7b 	bl	8003530 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f7ff ff58 	bl	8003cf4 <_ZN8ICM426888icm42688C1ERKS0_>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd90      	pop	{r4, r7, pc}

08003e4e <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERKT_v>:
      _M_access() const
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd fe77 	bl	8001b4a <_ZNKSt9_Any_data9_M_accessEv>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEclIJES2_EET0_DpOT_>:
	operator()(_Args&&... __args)
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 8003e84:	f000 f8a2 	bl	8003fcc <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	  return this->__call<_Result>(
 8003e88:	f107 030c 	add.w	r3, r7, #12
 8003e8c:	4622      	mov	r2, r4
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f8a3 	bl	8003fdc <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EE6__callIS2_JEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
 8003e96:	4603      	mov	r3, r0
	}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd90      	pop	{r4, r7, pc}

08003ea0 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7fd fe43 	bl	8001b34 <_ZNSt9_Any_data9_M_accessEv>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8003ec2:	6838      	ldr	r0, [r7, #0]
 8003ec4:	f000 f8a7 	bl	8004016 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	4622      	mov	r2, r4
 8003ecc:	4619      	mov	r1, r3
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f8f5 	bl	80040be <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd90      	pop	{r4, r7, pc}

08003edc <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff fdfc 	bl	8003ae4 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8003eec:	4603      	mov	r3, r0
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d004      	beq.n	8003efe <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x22>
 8003ef4:	f44f 711d 	mov.w	r1, #628	; 0x274
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f006 f829 	bl	8009f50 <_ZdlPvj>
	}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <_ZNSt11_Tuple_implILj1EJtEEC1IRtEEOT_>:
	_Tuple_impl(_UHead&& __head)
 8003f06:	b590      	push	{r4, r7, lr}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8003f10:	687c      	ldr	r4, [r7, #4]
 8003f12:	6838      	ldr	r0, [r7, #0]
 8003f14:	f7ff fbae 	bl	8003674 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f000 f8eb 	bl	80040f8 <_ZNSt10_Head_baseILj1EtLb0EEC1IRtEEOT_>
	{ }
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd90      	pop	{r4, r7, pc}

08003f2c <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERKT_v>:
      _M_access() const
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7fd fe08 	bl	8001b4a <_ZNKSt9_Any_data9_M_accessEv>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEclIJES2_EET0_DpOT_>:
	operator()(_Args&&... __args)
 8003f5a:	b590      	push	{r4, r7, lr}
 8003f5c:	b085      	sub	sp, #20
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 8003f62:	f000 f833 	bl	8003fcc <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	  return this->__call<_Result>(
 8003f66:	f107 030c 	add.w	r3, r7, #12
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f8d3 	bl	800411a <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEE6__callIS2_JEJLj0ELj1EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
 8003f74:	4603      	mov	r3, r0
	}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd90      	pop	{r4, r7, pc}

08003f7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8003f7e:	b590      	push	{r4, r7, lr}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8003f88:	6838      	ldr	r0, [r7, #0]
 8003f8a:	f000 f8f1 	bl	8004170 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4622      	mov	r2, r4
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f935 	bl	8004204 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}

08003fa2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff fe48 	bl	8003c42 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d004      	beq.n	8003fc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x22>
 8003fba:	f44f 711e 	mov.w	r1, #632	; 0x278
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f005 ffc6 	bl	8009f50 <_ZdlPvj>
	}
 8003fc4:	bf00      	nop
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8003fd0:	bf00      	nop
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EE6__callIS2_JEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 8003fe8:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3308      	adds	r3, #8
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f925 	bl	800423e <_ZSt3getILj0EJN8ICM426888icm42688EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8003ff4:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 8003ff6:	f107 0314 	add.w	r3, r7, #20
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f92b 	bl	8004258 <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>
 8004002:	4603      	mov	r3, r0
 8004004:	4619      	mov	r1, r3
 8004006:	4620      	mov	r0, r4
 8004008:	f000 f934 	bl	8004274 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
 800400c:	4603      	mov	r3, r0
	}
 800400e:	4618      	mov	r0, r3
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	bd90      	pop	{r4, r7, pc}

08004016 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>:
      constexpr _Head_base(const _Head_base&) = default;
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fe59 	bl	8003cf4 <_ZN8ICM426888icm42688C1ERKS0_>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1ERKS2_>:
      constexpr _Tuple_impl(const _Tuple_impl&) = default;
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	4611      	mov	r1, r2
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ffe5 	bl	800402c <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <_ZNSt5tupleIJN8ICM426888icm42688EEEC1ERKS2_>:
      constexpr tuple(const tuple&) = default;
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ffe5 	bl	800404c <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1ERKS2_>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1ERKS6_>:
      _Bind(const _Bind&) = default;
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800409e:	e883 0003 	stmia.w	r3, {r0, r1}
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f103 0208 	add.w	r2, r3, #8
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	3308      	adds	r3, #8
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f7ff ffdc 	bl	800406c <_ZNSt5tupleIJN8ICM426888icm42688EEEC1ERKS2_>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 80040be:	b5b0      	push	{r4, r5, r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 80040ca:	68b8      	ldr	r0, [r7, #8]
 80040cc:	f7ff ffa3 	bl	8004016 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>
 80040d0:	4605      	mov	r5, r0
 80040d2:	f44f 701d 	mov.w	r0, #628	; 0x274
 80040d6:	f005 ff3d 	bl	8009f54 <_Znwj>
 80040da:	4603      	mov	r3, r0
 80040dc:	461c      	mov	r4, r3
 80040de:	4629      	mov	r1, r5
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7ff ffd3 	bl	800408c <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1ERKS6_>
	    __dest._M_access<_Functor*>()
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f7ff fcfc 	bl	8003ae4 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 80040ec:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 80040ee:	601c      	str	r4, [r3, #0]
	  }
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bdb0      	pop	{r4, r5, r7, pc}

080040f8 <_ZNSt10_Head_baseILj1EtLb0EEC1IRtEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004102:	6838      	ldr	r0, [r7, #0]
 8004104:	f7ff fab6 	bl	8003674 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8004108:	4603      	mov	r3, r0
 800410a:	881a      	ldrh	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	801a      	strh	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEE6__callIS2_JEJLj0ELj1EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 800411a:	b5b0      	push	{r4, r5, r7, lr}
 800411c:	b086      	sub	sp, #24
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 8004126:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3308      	adds	r3, #8
 800412c:	4618      	mov	r0, r3
 800412e:	f000 f8b8 	bl	80042a2 <_ZSt3getILj0EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8004132:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 8004134:	f107 0310 	add.w	r3, r7, #16
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f88c 	bl	8004258 <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>
 8004140:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3308      	adds	r3, #8
 8004146:	4618      	mov	r0, r3
 8004148:	f000 f8b8 	bl	80042bc <_ZSt3getILj1EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 800414c:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 800414e:	f107 0314 	add.w	r3, r7, #20
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	4618      	mov	r0, r3
 8004156:	f000 f8be 	bl	80042d6 <_ZNVKSt3_MuItLb0ELb0EEclIRtSt5tupleIJEEEEOT_S6_RT0_>
 800415a:	4603      	mov	r3, r0
 800415c:	461a      	mov	r2, r3
 800415e:	4629      	mov	r1, r5
 8004160:	4620      	mov	r0, r4
 8004162:	f000 f8c6 	bl	80042f2 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>
 8004166:	4603      	mov	r3, r0
	}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bdb0      	pop	{r4, r5, r7, pc}

08004170 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1ERKS2_>:
      constexpr _Tuple_impl(const _Tuple_impl&) = default;
 8004186:	b580      	push	{r7, lr}
 8004188:	b082      	sub	sp, #8
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	6039      	str	r1, [r7, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	8812      	ldrh	r2, [r2, #0]
 8004196:	801a      	strh	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	1d1a      	adds	r2, r3, #4
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	3304      	adds	r3, #4
 80041a0:	4619      	mov	r1, r3
 80041a2:	4610      	mov	r0, r2
 80041a4:	f7ff ff42 	bl	800402c <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1ERKS2_>:
      constexpr tuple(const tuple&) = default;
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	4611      	mov	r1, r2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff ffdf 	bl	8004186 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1ERKS2_>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1ERKS6_>:
      _Bind(const _Bind&) = default;
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f103 0208 	add.w	r2, r3, #8
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	3308      	adds	r3, #8
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f7ff ffdc 	bl	80041b2 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1ERKS2_>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8004204:	b5b0      	push	{r4, r5, r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8004210:	68b8      	ldr	r0, [r7, #8]
 8004212:	f7ff ffad 	bl	8004170 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>
 8004216:	4605      	mov	r5, r0
 8004218:	f44f 701e 	mov.w	r0, #632	; 0x278
 800421c:	f005 fe9a 	bl	8009f54 <_Znwj>
 8004220:	4603      	mov	r3, r0
 8004222:	461c      	mov	r4, r3
 8004224:	4629      	mov	r1, r5
 8004226:	4620      	mov	r0, r4
 8004228:	f7ff ffd3 	bl	80041d2 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1ERKS6_>
	    __dest._M_access<_Functor*>()
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f7ff fd08 	bl	8003c42 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8004232:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8004234:	601c      	str	r4, [r3, #0]
	  }
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bdb0      	pop	{r4, r5, r7, pc}

0800423e <_ZSt3getILj0EJN8ICM426888icm42688EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4618      	mov	r0, r3
 800424a:	f000 f86e 	bl	800432a <_ZSt12__get_helperILj0EN8ICM426888icm42688EJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 800424e:	4603      	mov	r3, r0
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 8004264:	68b8      	ldr	r0, [r7, #8]
 8004266:	f7ff f963 	bl	8003530 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 800426a:	4603      	mov	r3, r0
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8004274:	b5b0      	push	{r4, r5, r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f85f 	bl	8004342 <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004284:	4604      	mov	r4, r0
 8004286:	6838      	ldr	r0, [r7, #0]
 8004288:	f7ff f952 	bl	8003530 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 800428c:	4603      	mov	r3, r0
 800428e:	461a      	mov	r2, r3
 8004290:	4621      	mov	r1, r4
 8004292:	4628      	mov	r0, r5
 8004294:	f000 f860 	bl	8004358 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>
 8004298:	4603      	mov	r3, r0
    }
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bdb0      	pop	{r4, r5, r7, pc}

080042a2 <_ZSt3getILj0EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 f87a 	bl	80043a6 <_ZSt12__get_helperILj0EN8ICM426888icm42688EJtEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80042b2:	4603      	mov	r3, r0
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <_ZSt3getILj1EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 f879 	bl	80043be <_ZSt12__get_helperILj1EtJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE>
 80042cc:	4603      	mov	r3, r0
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <_ZNVKSt3_MuItLb0ELb0EEclIRtSt5tupleIJEEEEOT_S6_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 80042e2:	68b8      	ldr	r0, [r7, #8]
 80042e4:	f7ff f9c6 	bl	8003674 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80042e8:	4603      	mov	r3, r0
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 80042f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f869 	bl	80043d6 <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004304:	4604      	mov	r4, r0
 8004306:	68b8      	ldr	r0, [r7, #8]
 8004308:	f7ff f912 	bl	8003530 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 800430c:	4605      	mov	r5, r0
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff f9b0 	bl	8003674 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8004314:	4603      	mov	r3, r0
 8004316:	462a      	mov	r2, r5
 8004318:	4621      	mov	r1, r4
 800431a:	4630      	mov	r0, r6
 800431c:	f000 f866 	bl	80043ec <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>
 8004320:	4603      	mov	r3, r0
    }
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800432a <_ZSt12__get_helperILj0EN8ICM426888icm42688EJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f889 	bl	800444a <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEE7_M_headERS2_>
 8004338:	4603      	mov	r3, r0
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	7338      	strb	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f87d 	bl	8004464 <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>
 800436a:	4603      	mov	r3, r0
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	6852      	ldr	r2, [r2, #4]
 8004370:	1052      	asrs	r2, r2, #1
 8004372:	1899      	adds	r1, r3, r2
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	6852      	ldr	r2, [r2, #4]
 8004378:	f002 0201 	and.w	r2, r2, #1
 800437c:	2a00      	cmp	r2, #0
 800437e:	d102      	bne.n	8004386 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x2e>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	e008      	b.n	8004398 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x40>
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	6852      	ldr	r2, [r2, #4]
 800438a:	1052      	asrs	r2, r2, #1
 800438c:	4413      	add	r3, r2
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	4413      	add	r3, r2
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4608      	mov	r0, r1
 800439a:	4798      	blx	r3
 800439c:	4603      	mov	r3, r0
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <_ZSt12__get_helperILj0EN8ICM426888icm42688EJtEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f863 	bl	800447a <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEE7_M_headERS2_>
 80043b4:	4603      	mov	r3, r0
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <_ZSt12__get_helperILj1EtJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f865 	bl	8004496 <_ZNSt11_Tuple_implILj1EJtEE7_M_headERS0_>
 80043cc:	4603      	mov	r3, r0
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
 80043ec:	b5b0      	push	{r4, r5, r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	7338      	strb	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f832 	bl	8004464 <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>
 8004400:	4603      	mov	r3, r0
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	6852      	ldr	r2, [r2, #4]
 8004406:	1052      	asrs	r2, r2, #1
 8004408:	189d      	adds	r5, r3, r2
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	6852      	ldr	r2, [r2, #4]
 800440e:	f002 0201 	and.w	r2, r2, #1
 8004412:	2a00      	cmp	r2, #0
 8004414:	d102      	bne.n	800441c <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x30>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	681c      	ldr	r4, [r3, #0]
 800441a:	e008      	b.n	800442e <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x42>
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	6852      	ldr	r2, [r2, #4]
 8004420:	1052      	asrs	r2, r2, #1
 8004422:	4413      	add	r3, r2
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	4413      	add	r3, r2
 800442c:	681c      	ldr	r4, [r3, #0]
 800442e:	6838      	ldr	r0, [r7, #0]
 8004430:	f7ff f920 	bl	8003674 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8004434:	4603      	mov	r3, r0
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	4619      	mov	r1, r3
 800443c:	4628      	mov	r0, r5
 800443e:	47a0      	blx	r4
 8004440:	4603      	mov	r3, r0
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bdb0      	pop	{r4, r5, r7, pc}

0800444a <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4618      	mov	r0, r3
 8004456:	f000 f82b 	bl	80044b0 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>
 800445a:	4603      	mov	r3, r0
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>:
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Up&&>(__t); }
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800447a:	b580      	push	{r7, lr}
 800447c:	b082      	sub	sp, #8
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3304      	adds	r3, #4
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f812 	bl	80044b0 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>
 800448c:	4603      	mov	r3, r0
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <_ZNSt11_Tuple_implILj1EJtEE7_M_headERS0_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 f810 	bl	80044c6 <_ZNSt10_Head_baseILj1EtLb0EE7_M_headERS0_>
 80044a6:	4603      	mov	r3, r0
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <_ZNSt10_Head_baseILj1EtLb0EE7_M_headERS0_>:
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <_ZN8ICM426888GYRO_CNFlsEhNS0_3FSRE>:
        {
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	6039      	str	r1, [r7, #0]
 80044e6:	71fb      	strb	r3, [r7, #7]
            return  n << static_cast<uint8_t> (fsr);
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	4093      	lsls	r3, r2
        }   
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <_ZN8ICM426889ACCEL_CNFlsEhNS0_3FSRE>:
        {
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	6039      	str	r1, [r7, #0]
 8004506:	71fb      	strb	r3, [r7, #7]
            return  n << static_cast<uint8_t> (fsr);
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	4093      	lsls	r3, r2
        } 
 8004510:	4618      	mov	r0, r3
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>:

namespace ICM42688{

    //float map_gyro_ODR_CNF_to_ODR(const config& cnf){

	float map_gyro_ODR_CNF_to_ODR(GYRO_CNF::ODR gyroODR){
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
        using namespace GYRO_CNF;

        if(gyroODR == ODR::ODR_500){
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b0f      	cmp	r3, #15
 8004528:	d102      	bne.n	8004530 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x14>
            return 500.0f;
 800452a:	eddf 7a29 	vldr	s15, [pc, #164]	; 80045d0 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xb4>
 800452e:	e049      	b.n	80045c4 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        if(gyroODR <= ODR::ODR_1000 && gyroODR >= ODR::ODR_32000){
 8004530:	2106      	movs	r1, #6
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f91e 	bl	8004774 <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d008      	beq.n	8004550 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x34>
 800453e:	2101      	movs	r1, #1
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f92b 	bl	800479c <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x34>
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x36>
 8004550:	2300      	movs	r3, #0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d010      	beq.n	8004578 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x5c>
            return 32000.0f / (1 << (gyroODR - ODR::ODR_32000));
 8004556:	2101      	movs	r1, #1
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f933 	bl	80047c4 <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>
 800455e:	4603      	mov	r3, r0
 8004560:	461a      	mov	r2, r3
 8004562:	2301      	movs	r3, #1
 8004564:	4093      	lsls	r3, r2
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800456e:	eddf 6a19 	vldr	s13, [pc, #100]	; 80045d4 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xb8>
 8004572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004576:	e025      	b.n	80045c4 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        if(gyroODR <= ODR::ODR_12_5 && gyroODR >= ODR::ODR_200){
 8004578:	210b      	movs	r1, #11
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f8fa 	bl	8004774 <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d008      	beq.n	8004598 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7c>
 8004586:	2107      	movs	r1, #7
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f907 	bl	800479c <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7c>
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7e>
 8004598:	2300      	movs	r3, #0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d010      	beq.n	80045c0 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa4>
            return 200.0f /  (1 << (gyroODR - ODR::ODR_200));
 800459e:	2107      	movs	r1, #7
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f90f 	bl	80047c4 <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>
 80045a6:	4603      	mov	r3, r0
 80045a8:	461a      	mov	r2, r3
 80045aa:	2301      	movs	r3, #1
 80045ac:	4093      	lsls	r3, r2
 80045ae:	ee07 3a90 	vmov	s15, r3
 80045b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045b6:	eddf 6a08 	vldr	s13, [pc, #32]	; 80045d8 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xbc>
 80045ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045be:	e001      	b.n	80045c4 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        return -1.0f;
 80045c0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
 80045c4:	eeb0 0a67 	vmov.f32	s0, s15
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	43fa0000 	.word	0x43fa0000
 80045d4:	46fa0000 	.word	0x46fa0000
 80045d8:	43480000 	.word	0x43480000

080045dc <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>:


    //float map_gyro_FSR_CNF_to_FSR(const config& cnf){
	float map_gyro_FSR_CNF_to_FSR(GYRO_CNF::FSR gyroFSR){
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
        using namespace GYRO_CNF;

        if(gyroFSR <= FSR::FSR_15_625){
 80045e4:	2107      	movs	r1, #7
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f8fd 	bl	80047e6 <_ZN8ICM426888GYRO_CNFleENS0_3FSRES1_>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00c      	beq.n	800460c <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x30>
            return 2000.0f / (1 << gyroFSR);
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	2001      	movs	r0, #1
 80045f6:	f7ff ff71 	bl	80044dc <_ZN8ICM426888GYRO_CNFlsEhNS0_3FSRE>
 80045fa:	ee07 0a90 	vmov	s15, r0
 80045fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004602:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004620 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x44>
 8004606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460a:	e001      	b.n	8004610 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x34>
        }

        return -1.0f;
 800460c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    }
 8004610:	eef0 7a47 	vmov.f32	s15, s14
 8004614:	eeb0 0a67 	vmov.f32	s0, s15
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	44fa0000 	.word	0x44fa0000

08004624 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>:

    //float map_accel_ODR_CNF_to_ODR(const config& cnf){
	float map_accel_ODR_CNF_to_ODR(ACCEL_CNF::ODR accelODR){
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
        using namespace ACCEL_CNF;

        if(accelODR == ODR::ODR_500){
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b0f      	cmp	r3, #15
 8004630:	d102      	bne.n	8004638 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x14>
            return 500.0f;
 8004632:	eddf 7a29 	vldr	s15, [pc, #164]	; 80046d8 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xb4>
 8004636:	e049      	b.n	80046cc <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        if(accelODR <= ODR::ODR_1000 && accelODR >= ODR::ODR_32000){
 8004638:	2106      	movs	r1, #6
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f8e7 	bl	800480e <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d008      	beq.n	8004658 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x34>
 8004646:	2101      	movs	r1, #1
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f8f4 	bl	8004836 <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x34>
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x36>
 8004658:	2300      	movs	r3, #0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d010      	beq.n	8004680 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x5c>
            return 32000.0f / (1 << (accelODR - ODR::ODR_32000)) ;
 800465e:	2101      	movs	r1, #1
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f8fc 	bl	800485e <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>
 8004666:	4603      	mov	r3, r0
 8004668:	461a      	mov	r2, r3
 800466a:	2301      	movs	r3, #1
 800466c:	4093      	lsls	r3, r2
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004676:	eddf 6a19 	vldr	s13, [pc, #100]	; 80046dc <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xb8>
 800467a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800467e:	e025      	b.n	80046cc <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        if(accelODR <= ODR::ODR_1_562 && accelODR >= ODR::ODR_200){
 8004680:	210e      	movs	r1, #14
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f8c3 	bl	800480e <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7c>
 800468e:	2107      	movs	r1, #7
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f8d0 	bl	8004836 <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7c>
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7e>
 80046a0:	2300      	movs	r3, #0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d010      	beq.n	80046c8 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa4>
            return 200.0f /  ( 1 << (accelODR - ODR::ODR_200));
 80046a6:	2107      	movs	r1, #7
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f8d8 	bl	800485e <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>
 80046ae:	4603      	mov	r3, r0
 80046b0:	461a      	mov	r2, r3
 80046b2:	2301      	movs	r3, #1
 80046b4:	4093      	lsls	r3, r2
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046be:	eddf 6a08 	vldr	s13, [pc, #32]	; 80046e0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xbc>
 80046c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c6:	e001      	b.n	80046cc <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        return -1.0f;
 80046c8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
 80046cc:	eeb0 0a67 	vmov.f32	s0, s15
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	43fa0000 	.word	0x43fa0000
 80046dc:	46fa0000 	.word	0x46fa0000
 80046e0:	43480000 	.word	0x43480000

080046e4 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>:

    //float map_accel_FSR_CNF_to_FSR(const config& cnf){
	float map_accel_FSR_CNF_to_FSR(ACCEL_CNF::FSR accelFSR){
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
        using namespace ACCEL_CNF;
  
        if(accelFSR <= FSR::FSR_2){
 80046ec:	2103      	movs	r1, #3
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f8c6 	bl	8004880 <_ZN8ICM426889ACCEL_CNFleENS0_3FSRES1_>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00c      	beq.n	8004714 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE+0x30>
            return 16.0f / (1 << accelFSR);
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	2001      	movs	r0, #1
 80046fe:	f7ff fefd 	bl	80044fc <_ZN8ICM426889ACCEL_CNFlsEhNS0_3FSRE>
 8004702:	ee07 0a90 	vmov	s15, r0
 8004706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800470e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004712:	e001      	b.n	8004718 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE+0x34>
        }

        return -1.0f;
 8004714:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    }
 8004718:	eef0 7a47 	vmov.f32	s15, s14
 800471c:	eeb0 0a67 	vmov.f32	s0, s15
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <_ZN8ICM4268815convertTempDataEhh>:

    
    float convertTempData(uint8_t rawTempH, uint8_t rawTempL)
    {
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	460a      	mov	r2, r1
 8004732:	71fb      	strb	r3, [r7, #7]
 8004734:	4613      	mov	r3, r2
 8004736:	71bb      	strb	r3, [r7, #6]
        int16_t temp_data = (rawTempH << 8) |  rawTempL;
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	b21a      	sxth	r2, r3
 800473e:	79bb      	ldrb	r3, [r7, #6]
 8004740:	b21b      	sxth	r3, r3
 8004742:	4313      	orrs	r3, r2
 8004744:	81fb      	strh	r3, [r7, #14]
        return (temp_data / 132.48f + 25);
 8004746:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004752:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004770 <_ZN8ICM4268815convertTempDataEhh+0x48>
 8004756:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800475a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800475e:	ee77 7a87 	vadd.f32	s15, s15, s14
    }
 8004762:	eeb0 0a67 	vmov.f32	s0, s15
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	43047ae1 	.word	0x43047ae1

08004774 <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>:
    /////////////////////////// GYRO_CNF /////////////////////////////////////

    namespace GYRO_CNF {

        bool operator<=(ODR odr1, ODR odr2) 
        {
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) <= static_cast<uint8_t> (odr2);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	b2da      	uxtb	r2, r3
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	429a      	cmp	r2, r3
 8004788:	bf94      	ite	ls
 800478a:	2301      	movls	r3, #1
 800478c:	2300      	movhi	r3, #0
 800478e:	b2db      	uxtb	r3, r3
        }
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>:
        bool operator>=(ODR odr1, ODR odr2) 
        {
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) >= static_cast<uint8_t> (odr2);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	429a      	cmp	r2, r3
 80047b0:	bf2c      	ite	cs
 80047b2:	2301      	movcs	r3, #1
 80047b4:	2300      	movcc	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
        }
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>:
        uint8_t operator-(ODR odr1, ODR odr2)
        {
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) - static_cast<uint8_t> (odr2);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	b2db      	uxtb	r3, r3
        }
 80047da:	4618      	mov	r0, r3
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <_ZN8ICM426888GYRO_CNFleENS0_3FSRES1_>:


        bool operator<=(FSR fsr1, FSR fsr2)
        {
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (fsr1) <= static_cast<uint8_t> (fsr2);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	429a      	cmp	r2, r3
 80047fa:	bf94      	ite	ls
 80047fc:	2301      	movls	r3, #1
 80047fe:	2300      	movhi	r3, #0
 8004800:	b2db      	uxtb	r3, r3
        }
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>:

    /////////////////////////// ACCEL_CNF /////////////////////////////////////
    namespace ACCEL_CNF {

        bool operator<=(ODR odr1, ODR odr2) 
        {
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) <= static_cast<uint8_t> (odr2);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	b2da      	uxtb	r2, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	429a      	cmp	r2, r3
 8004822:	bf94      	ite	ls
 8004824:	2301      	movls	r3, #1
 8004826:	2300      	movhi	r3, #0
 8004828:	b2db      	uxtb	r3, r3
        }
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>:
        bool operator>=(ODR odr1, ODR odr2) 
        {
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) >= static_cast<uint8_t> (odr2);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	b2da      	uxtb	r2, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	429a      	cmp	r2, r3
 800484a:	bf2c      	ite	cs
 800484c:	2301      	movcs	r3, #1
 800484e:	2300      	movcc	r3, #0
 8004850:	b2db      	uxtb	r3, r3
        }
 8004852:	4618      	mov	r0, r3
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>:
        uint8_t operator-(ODR odr1, ODR odr2)
        {
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) - static_cast<uint8_t> (odr2);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	b2db      	uxtb	r3, r3
        }
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <_ZN8ICM426889ACCEL_CNFleENS0_3FSRES1_>:

        bool operator<=(FSR fsr1, FSR fsr2)
        {
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (fsr1) <= static_cast<uint8_t> (fsr2);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	b2da      	uxtb	r2, r3
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	429a      	cmp	r2, r3
 8004894:	bf94      	ite	ls
 8004896:	2301      	movls	r3, #1
 8004898:	2300      	movhi	r3, #0
 800489a:	b2db      	uxtb	r3, r3
        }  
 800489c:	4618      	mov	r0, r3
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80048ac:	f001 fb0d 	bl	8005eca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048b0:	f000 f812 	bl	80048d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048b4:	f7fc ff80 	bl	80017b8 <MX_GPIO_Init>
  MX_SPI2_Init();
 80048b8:	f000 fbee 	bl	8005098 <MX_SPI2_Init>
  MX_I2C4_Init();
 80048bc:	f7fd f89a 	bl	80019f4 <MX_I2C4_Init>
  MX_CAN1_Init();
 80048c0:	f7fc fe6e 	bl	80015a0 <MX_CAN1_Init>
  MX_CAN2_Init();
 80048c4:	f7fc fea4 	bl	8001610 <MX_CAN2_Init>
  MX_TIM5_Init();
 80048c8:	f001 f8a8 	bl	8005a1c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //HAL_Delay(2000);

  system_init();
 80048cc:	f000 fd20 	bl	8005310 <_Z11system_initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  system_run_active_mode();
 80048d0:	f000 fd42 	bl	8005358 <_Z22system_run_active_modev>
 80048d4:	e7fc      	b.n	80048d0 <main+0x28>
	...

080048d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b094      	sub	sp, #80	; 0x50
 80048dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048de:	f107 0320 	add.w	r3, r7, #32
 80048e2:	2230      	movs	r2, #48	; 0x30
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f005 fe86 	bl	800a5f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048ec:	f107 030c 	add.w	r3, r7, #12
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	60da      	str	r2, [r3, #12]
 80048fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048fc:	4b33      	ldr	r3, [pc, #204]	; (80049cc <_Z18SystemClock_Configv+0xf4>)
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	4a32      	ldr	r2, [pc, #200]	; (80049cc <_Z18SystemClock_Configv+0xf4>)
 8004902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004906:	6413      	str	r3, [r2, #64]	; 0x40
 8004908:	4b30      	ldr	r3, [pc, #192]	; (80049cc <_Z18SystemClock_Configv+0xf4>)
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004914:	4b2e      	ldr	r3, [pc, #184]	; (80049d0 <_Z18SystemClock_Configv+0xf8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a2d      	ldr	r2, [pc, #180]	; (80049d0 <_Z18SystemClock_Configv+0xf8>)
 800491a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	4b2b      	ldr	r3, [pc, #172]	; (80049d0 <_Z18SystemClock_Configv+0xf8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800492c:	2309      	movs	r3, #9
 800492e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004936:	2301      	movs	r3, #1
 8004938:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800493a:	2302      	movs	r3, #2
 800493c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800493e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004942:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8004944:	2306      	movs	r3, #6
 8004946:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8004948:	23d8      	movs	r3, #216	; 0xd8
 800494a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800494c:	2302      	movs	r3, #2
 800494e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004950:	2309      	movs	r3, #9
 8004952:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004954:	f107 0320 	add.w	r3, r7, #32
 8004958:	4618      	mov	r0, r3
 800495a:	f002 ff51 	bl	8007800 <HAL_RCC_OscConfig>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	bf14      	ite	ne
 8004964:	2301      	movne	r3, #1
 8004966:	2300      	moveq	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <_Z18SystemClock_Configv+0x9a>
  {
    Error_Handler();
 800496e:	f000 f831 	bl	80049d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004972:	f002 fef5 	bl	8007760 <HAL_PWREx_EnableOverDrive>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf14      	ite	ne
 800497c:	2301      	movne	r3, #1
 800497e:	2300      	moveq	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 8004986:	f000 f825 	bl	80049d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800498a:	230f      	movs	r3, #15
 800498c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800498e:	2302      	movs	r3, #2
 8004990:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004996:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800499a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800499c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80049a2:	f107 030c 	add.w	r3, r7, #12
 80049a6:	2107      	movs	r1, #7
 80049a8:	4618      	mov	r0, r3
 80049aa:	f003 f9cd 	bl	8007d48 <HAL_RCC_ClockConfig>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bf14      	ite	ne
 80049b4:	2301      	movne	r3, #1
 80049b6:	2300      	moveq	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <_Z18SystemClock_Configv+0xea>
  {
    Error_Handler();
 80049be:	f000 f809 	bl	80049d4 <Error_Handler>
  }
}
 80049c2:	bf00      	nop
 80049c4:	3750      	adds	r7, #80	; 0x50
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40007000 	.word	0x40007000

080049d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049d8:	b672      	cpsid	i
}
 80049da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049dc:	e7fe      	b.n	80049dc <Error_Handler+0x8>
	...

080049e0 <_Z20fail_silent_mode_runv>:

#define LED_FAIL_SILENT_GPIO_Port LED1_GPIO_Port
#define LED_FAIL_SILENT_GPIO_Pin  LED1_Pin

void fail_silent_mode_run(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
	gpio ledFailSilent(LED_FAIL_SILENT_GPIO_Port, LED_FAIL_SILENT_GPIO_Pin);
 80049e6:	463b      	mov	r3, r7
 80049e8:	2210      	movs	r2, #16
 80049ea:	4905      	ldr	r1, [pc, #20]	; (8004a00 <_Z20fail_silent_mode_runv+0x20>)
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fc ff8b 	bl	8001908 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>


	ledFailSilent.write(GPIO_ST::HIGH);
 80049f2:	463b      	mov	r3, r7
 80049f4:	2101      	movs	r1, #1
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fc ffac 	bl	8001954 <_ZN5STM324gpio5writeE7GPIO_ST>

	while(1)
 80049fc:	e7fe      	b.n	80049fc <_Z20fail_silent_mode_runv+0x1c>
 80049fe:	bf00      	nop
 8004a00:	40021000 	.word	0x40021000

08004a04 <_ZN9iPHandler12add_read_bitEhbb>:
    static uint8_t add_read_bit(uint8_t reg, bool normalMode = true, bool rwBitInFront = true)
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	71fb      	strb	r3, [r7, #7]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	71bb      	strb	r3, [r7, #6]
 8004a12:	4613      	mov	r3, r2
 8004a14:	717b      	strb	r3, [r7, #5]
    	if(rwBitInFront){
 8004a16:	797b      	ldrb	r3, [r7, #5]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d009      	beq.n	8004a30 <_ZN9iPHandler12add_read_bitEhbb+0x2c>
    		return normalMode ? (reg | (1 << 7)) : reg;
 8004a1c:	79bb      	ldrb	r3, [r7, #6]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d004      	beq.n	8004a2c <_ZN9iPHandler12add_read_bitEhbb+0x28>
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	e00f      	b.n	8004a4c <_ZN9iPHandler12add_read_bitEhbb+0x48>
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	e00d      	b.n	8004a4c <_ZN9iPHandler12add_read_bitEhbb+0x48>
    		return normalMode ? (reg << 1) | 0x01 : reg << 1;
 8004a30:	79bb      	ldrb	r3, [r7, #6]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d007      	beq.n	8004a46 <_ZN9iPHandler12add_read_bitEhbb+0x42>
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	b25b      	sxtb	r3, r3
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	b25b      	sxtb	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	e002      	b.n	8004a4c <_ZN9iPHandler12add_read_bitEhbb+0x48>
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	b2db      	uxtb	r3, r3
    }
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <_ZN9iPHandler13add_write_bitEhbb>:
    static uint8_t add_write_bit(uint8_t reg, bool normalMode = true, bool rwBitInFront = true)
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71fb      	strb	r3, [r7, #7]
 8004a62:	460b      	mov	r3, r1
 8004a64:	71bb      	strb	r3, [r7, #6]
 8004a66:	4613      	mov	r3, r2
 8004a68:	717b      	strb	r3, [r7, #5]
    	if(rwBitInFront){
 8004a6a:	797b      	ldrb	r3, [r7, #5]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d009      	beq.n	8004a84 <_ZN9iPHandler13add_write_bitEhbb+0x2c>
    		return normalMode ? reg : (reg | (1 << 7));
 8004a70:	79bb      	ldrb	r3, [r7, #6]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <_ZN9iPHandler13add_write_bitEhbb+0x22>
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	e012      	b.n	8004aa0 <_ZN9iPHandler13add_write_bitEhbb+0x48>
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	e00d      	b.n	8004aa0 <_ZN9iPHandler13add_write_bitEhbb+0x48>
    		return normalMode ? reg << 1 : (reg  << 0x01 | 1);
 8004a84:	79bb      	ldrb	r3, [r7, #6]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <_ZN9iPHandler13add_write_bitEhbb+0x3a>
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	e006      	b.n	8004aa0 <_ZN9iPHandler13add_write_bitEhbb+0x48>
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	b25b      	sxtb	r3, r3
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	b25b      	sxtb	r3, r3
 8004a9e:	b2db      	uxtb	r3, r3
    }
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <_Z15normal_mode_runv>:
#define DELTA_T_ATTITUDE_ESTIMATOR_S 0.1

static bool run = false;

void normal_mode_run(void)
{
 8004aac:	b590      	push	{r4, r7, lr}
 8004aae:	f2ad 4db4 	subw	sp, sp, #1204	; 0x4b4
 8004ab2:	af06      	add	r7, sp, #24
	taskCNIreceiveData_t   taskCNIreceiveAttitudeData3;
	//taskCNIreceiveData_t   taskCNIreceiveCompareAttitudeData3;
#endif

	// Inicialización de la IMU =====================================
	gpio imuCS(ICM42688_CS_GPIO_PORT, ICM42688_CS_PIN);
 8004ab4:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004ab8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004abc:	49b7      	ldr	r1, [pc, #732]	; (8004d9c <_Z15normal_mode_runv+0x2f0>)
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fc ff22 	bl	8001908 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

	phandler_spi<> spi2(&hspi2, &imuCS, COMM_MODE::BLCK);
 8004ac4:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8004ac8:	f507 7038 	add.w	r0, r7, #736	; 0x2e0
 8004acc:	2300      	movs	r3, #0
 8004ace:	49b4      	ldr	r1, [pc, #720]	; (8004da0 <_Z15normal_mode_runv+0x2f4>)
 8004ad0:	f000 f99e 	bl	8004e10 <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE>

	ICM42688::config_FIFO icmFifoCnf =
 8004ad4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004ad8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004adc:	2201      	movs	r2, #1
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004ae4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ae8:	2200      	movs	r2, #0
 8004aea:	605a      	str	r2, [r3, #4]
	{
		  .watermark = 1,
		  .mode = ICM42688::FIFO_MODE::BYPASS,
	};

	ICM42688::config_INT icmIntCnf =
 8004aec:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004af0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004af4:	4aab      	ldr	r2, [pc, #684]	; (8004da4 <_Z15normal_mode_runv+0x2f8>)
 8004af6:	461c      	mov	r4, r3
 8004af8:	4613      	mov	r3, r2
 8004afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			//.int1Mode = ICM42688::INT_MODE::PULSED_PP_HIGH,
			.int2Source = ICM42688::INT_SOURCE::DISABLED,
			.int2Mode = ICM42688::INT_MODE::DISABLED,
	};

	ICM42688::Config icmCnf =
 8004b00:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004b04:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004b08:	4618      	mov	r0, r3
 8004b0a:	2328      	movs	r3, #40	; 0x28
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	2100      	movs	r1, #0
 8004b10:	f005 fd72 	bl	800a5f8 <memset>
 8004b14:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004b18:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004b24:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004b28:	2206      	movs	r2, #6
 8004b2a:	605a      	str	r2, [r3, #4]
 8004b2c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004b30:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004b34:	2202      	movs	r2, #2
 8004b36:	609a      	str	r2, [r3, #8]
 8004b38:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004b3c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004b40:	2206      	movs	r2, #6
 8004b42:	60da      	str	r2, [r3, #12]
		.gyroODR 					= ICM42688::GYRO_CNF::ODR::ODR_1000,
		.accelFSR 					= ICM42688::ACCEL_CNF::FSR::FSR_4,
		.accelODR 					= ICM42688::ACCEL_CNF::ODR::ODR_1000,
		.fifoCnf					= icmFifoCnf,
		.intCnf						= icmIntCnf,
	};
 8004b44:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004b48:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004b4c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004b50:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8004b54:	3310      	adds	r3, #16
 8004b56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b5a:	e883 0003 	stmia.w	r3, {r0, r1}
 8004b5e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004b62:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004b66:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004b6a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004b6e:	f103 0418 	add.w	r4, r3, #24
 8004b72:	4613      	mov	r3, r2
 8004b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	ICM42688::icm42688 imu(icmCnf, &spi2, &imuCS);
 8004b7a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004b7e:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8004b82:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 8004b86:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004b8a:	f7fd f97b 	bl	8001e84 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioE>

	// Inicialización del LED para calibración de la IMU==============
	STM32::gpio ledIMUcalibration(LED_IMU_CALIBRATION_GPIO_PORT, LED_IMU_CALIBRATION_GPIO_PIN);
 8004b8e:	f107 031c 	add.w	r3, r7, #28
 8004b92:	2210      	movs	r2, #16
 8004b94:	4984      	ldr	r1, [pc, #528]	; (8004da8 <_Z15normal_mode_runv+0x2fc>)
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fc feb6 	bl	8001908 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

	// Inicialización del LED heartbeat==============================
	STM32::gpio ledHeartbeat(LED_HEARTBEAT_GPIO_PORT, LED_HEARTBEAT_GPIO_PIN);
 8004b9c:	1d3b      	adds	r3, r7, #4
 8004b9e:	2208      	movs	r2, #8
 8004ba0:	4982      	ldr	r1, [pc, #520]	; (8004dac <_Z15normal_mode_runv+0x300>)
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fc feb0 	bl	8001908 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

	// Inicialización de la CNI ==============================
	CNI_constructor(&hcan1);
 8004ba8:	4881      	ldr	r0, [pc, #516]	; (8004db0 <_Z15normal_mode_runv+0x304>)
 8004baa:	f7fc f951 	bl	8000e50 <_Z15CNI_constructorP19__CAN_HandleTypeDef>

	// Inicialización del attitude estimator ==============================
	attitudeEstimator_constructor(ALPHA_ATTITUDE_ESTIMATOR, DELTA_T_ATTITUDE_ESTIMATOR_S);
 8004bae:	eddf 0a81 	vldr	s1, [pc, #516]	; 8004db4 <_Z15normal_mode_runv+0x308>
 8004bb2:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8004db8 <_Z15normal_mode_runv+0x30c>
 8004bb6:	f7fc fbdd 	bl	8001374 <_Z29attitudeEstimator_constructorff>

	// Creación de las tareas========================================
	taskWatchdog_constructor(&taskWatchdog, DELAY_TASK_WATCHDOG_TICKS_NORMAL, PERIOD_TASK_WATCHDOG_TICKS_NORMAL, WCET_TASK_WATCHDOG_US, BCET_TASK_WATCHDOG_US,
 8004bba:	f507 608d 	add.w	r0, r7, #1128	; 0x468
 8004bbe:	4b7f      	ldr	r3, [pc, #508]	; (8004dbc <_Z15normal_mode_runv+0x310>)
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	2364      	movs	r3, #100	; 0x64
 8004bc8:	2201      	movs	r2, #1
 8004bca:	2100      	movs	r1, #0
 8004bcc:	f000 fede 	bl	800598c <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>
			&hiwdg);

	taskHeartbeat_constructor(&taskHeartbeat, DELAY_TASK_HEARTBEAT_TICKS_NORMAL, PERIOD_TASK_HEARTBEAT_TICKS_NORMAL, WCET_TASK_HEARTBEAT_US, BCET_TASK_HEARTBEAT_US,
 8004bd0:	f507 6090 	add.w	r0, r7, #1152	; 0x480
 8004bd4:	1d3b      	adds	r3, r7, #4
 8004bd6:	9301      	str	r3, [sp, #4]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	2364      	movs	r3, #100	; 0x64
 8004bde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004be2:	2100      	movs	r1, #0
 8004be4:	f000 fd10 	bl	8005608 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>
			&ledHeartbeat);
// ==================== Datos IMU raw ====================
	taskIMUgetData_constructor(&taskIMUgetData, DELAY_TASK_IMU_TICKS_NORMAL, PERIOD_TASK_IMU_TICKS_NORMAL, WCET_TASK_IMU_US, BCET_TASK_IMU_US,
 8004be8:	f207 400c 	addw	r0, r7, #1036	; 0x40c
 8004bec:	2307      	movs	r3, #7
 8004bee:	9303      	str	r3, [sp, #12]
 8004bf0:	f107 031c 	add.w	r3, r7, #28
 8004bf4:	9302      	str	r3, [sp, #8]
 8004bf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004bfa:	9301      	str	r3, [sp, #4]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	2364      	movs	r3, #100	; 0x64
 8004c02:	2264      	movs	r2, #100	; 0x64
 8004c04:	2101      	movs	r1, #1
 8004c06:	f000 fd35 	bl	8005674 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688EPN5STM324gpioEm>
			&imu, &ledIMUcalibration, HANDLE_MSG_CNI_SEND_IMU_DATA);

	taskCNIsendData_constructor(&taskCNIsendIMUdata, DELAY_TASK_CNI_SEND_IMU_TICKS_NORMAL, PERIOD_TASK_CNI_SEND_IMU_TICKS_NORMAL, WCET_TASK_CNI_SEND_IMU_US, BCET_TASK_CNI_SEND_IMU_US,
 8004c0a:	f507 707d 	add.w	r0, r7, #1012	; 0x3f4
 8004c0e:	2307      	movs	r3, #7
 8004c10:	9301      	str	r3, [sp, #4]
 8004c12:	2300      	movs	r3, #0
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	2364      	movs	r3, #100	; 0x64
 8004c18:	2264      	movs	r2, #100	; 0x64
 8004c1a:	2104      	movs	r1, #4
 8004c1c:	f000 fbe6 	bl	80053ec <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>
			HANDLE_MSG_CNI_SEND_IMU_DATA);
// =======================================================
// =================== Datos attitude  ===================
	taskEstimateAttitude_constructor(&taskEstimateAttitude, DELAY_TASK_ESTIMATE_ATTITUDE_TICKS_NORMAL, PERIOD_TASK_ESTIMATE_ATTITUDE_TICKS_NORMAL, WCET_TASK_ESTIMATE_ATTITUDE_US, BCET_TASK_ESTIMATE_ATTITUDE_US,
 8004c20:	f507 7077 	add.w	r0, r7, #988	; 0x3dc
 8004c24:	230c      	movs	r3, #12
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	2364      	movs	r3, #100	; 0x64
 8004c2e:	2264      	movs	r2, #100	; 0x64
 8004c30:	2105      	movs	r1, #5
 8004c32:	f000 fcb3 	bl	800559c <_Z32taskEstimateAttitude_constructorP22taskEstimateAttitude_tmmmmm>
			HANDLE_MSG_CNI_SEND_ATTITUDE_DATA);

	taskCNIsendData_constructor(&taskCNIsendAttitudeData, DELAY_TASK_CNI_SEND_ATTITUDE_TICKS_NORMAL, PERIOD_TASK_CNI_SEND_ATTITUDE_TICKS_NORMAL, WCET_TASK_CNI_SEND_ATTITUDE_US, BCET_TASK_CNI_SEND_ATTITUDE_US,
 8004c36:	f507 7071 	add.w	r0, r7, #964	; 0x3c4
 8004c3a:	230c      	movs	r3, #12
 8004c3c:	9301      	str	r3, [sp, #4]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	2364      	movs	r3, #100	; 0x64
 8004c44:	2264      	movs	r2, #100	; 0x64
 8004c46:	2108      	movs	r1, #8
 8004c48:	f000 fbd0 	bl	80053ec <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>
			HANDLE_MSG_CNI_SEND_ATTITUDE_DATA);
#if SETTINGS_NODE_ID!=1
	taskCNIreceiveData_constructor(&taskCNIreceiveAttitudeData1, DELAY_TASK_CNI_RECEIVE_ATTITUDE_1_TICKS_NORMAL, PERIOD_TASK_CNI_RECEIVE_ATTITUDE_1_TICKS_NORMAL, WCET_TASK_CNI_RECEIVE_ATTITUDE_1_US, BCET_TASK_CNI_RECEIVE_ATTITUDE_1_US,
 8004c4c:	f507 705c 	add.w	r0, r7, #880	; 0x370
 8004c50:	230a      	movs	r3, #10
 8004c52:	9301      	str	r3, [sp, #4]
 8004c54:	2300      	movs	r3, #0
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	2364      	movs	r3, #100	; 0x64
 8004c5a:	2264      	movs	r2, #100	; 0x64
 8004c5c:	2106      	movs	r1, #6
 8004c5e:	f000 fb9d 	bl	800539c <_Z30taskCNIreceiveData_constructorP20taskCNIreceiveData_tmmmmm>
			HANDLE_MSG_CNI_ATTITUDE_1);
#endif
#if SETTINGS_NODE_ID!=2
	taskCNIreceiveData_constructor(&taskCNIreceiveAttitudeData2, DELAY_TASK_CNI_RECEIVE_ATTITUDE_2_TICKS_NORMAL, PERIOD_TASK_CNI_RECEIVE_ATTITUDE_2_TICKS_NORMAL, WCET_TASK_CNI_RECEIVE_ATTITUDE_2_US, BCET_TASK_CNI_RECEIVE_ATTITUDE_2_US,
 8004c62:	f507 7056 	add.w	r0, r7, #856	; 0x358
 8004c66:	230b      	movs	r3, #11
 8004c68:	9301      	str	r3, [sp, #4]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	2364      	movs	r3, #100	; 0x64
 8004c70:	2264      	movs	r2, #100	; 0x64
 8004c72:	2107      	movs	r1, #7
 8004c74:	f000 fb92 	bl	800539c <_Z30taskCNIreceiveData_constructorP20taskCNIreceiveData_tmmmmm>
	taskCNIreceiveData_constructor(&taskCNIreceiveAttitudeData3, DELAY_TASK_CNI_RECEIVE_ATTITUDE_3_TICKS_NORMAL, PERIOD_TASK_CNI_RECEIVE_ATTITUDE_3_TICKS_NORMAL, WCET_TASK_CNI_RECEIVE_ATTITUDE_3_US, BCET_TASK_CNI_RECEIVE_ATTITUDE_3_US,
			HANDLE_MSG_CNI_ATTITUDE_3);
#endif
// =======================================================
//================== Comparacion attitude ================
	taskCompareAttitude_constructor(&taskCompareAttitudeData, DELAY_TASK_COMPARE_ATTITUDE_TICKS_NORMAL, PERIOD_TASK_COMPARE_ATTITUDE_TICKS_NORMAL, WCET_TASK_COMPARE_ATTITUDE_US, BCET_TASK_COMPARE_ATTITUDE_US,
 8004c78:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8004c7c:	2313      	movs	r3, #19
 8004c7e:	9304      	str	r3, [sp, #16]
 8004c80:	230c      	movs	r3, #12
 8004c82:	9303      	str	r3, [sp, #12]
 8004c84:	230b      	movs	r3, #11
 8004c86:	9302      	str	r3, [sp, #8]
 8004c88:	230a      	movs	r3, #10
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	2364      	movs	r3, #100	; 0x64
 8004c92:	2264      	movs	r2, #100	; 0x64
 8004c94:	2109      	movs	r1, #9
 8004c96:	f000 fbdb 	bl	8005450 <_Z31taskCompareAttitude_constructorP21taskCompareAttitude_tmmmmmmmm>
			HANDLE_MSG_CNI_ATTITUDE_1, HANDLE_MSG_CNI_ATTITUDE_2, HANDLE_MSG_CNI_ATTITUDE_3, HANDLE_MSG_CNI_COMPARE_ATTITUDE);

	taskCNIsendData_constructor(&taskCNIsendCompareAttitudeData, DELAY_TASK_CNI_SEND_COMPARE_ATTITUDE_TICKS_NORMAL, PERIOD_TASK_CNI_SEND_COMPARE_ATTITUDE_TICKS_NORMAL, WCET_TASK_CNI_SEND_COMPARE_ATTITUDE_US, BCET_TASK_CNI_SEND_COMPARE_ATTITUDE_US,
 8004c9a:	f507 7062 	add.w	r0, r7, #904	; 0x388
 8004c9e:	2313      	movs	r3, #19
 8004ca0:	9301      	str	r3, [sp, #4]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	2364      	movs	r3, #100	; 0x64
 8004ca8:	2264      	movs	r2, #100	; 0x64
 8004caa:	210c      	movs	r1, #12
 8004cac:	f000 fb9e 	bl	80053ec <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>
			HANDLE_MSG_CNI_COMPARE_ATTITUDE);
// =======================================================
//================== Syncronización ================
	taskTimeTriggeredSync_constructor(&taskPeriodicSync, DELAY_TASK_SYNC_TICKS_NORMAL, PERIOD_TASK_SYNC_TICKS_NORMAL, WCET_TASK_SYNC_US, BCET_TASK_SYNC_US,
 8004cb0:	f507 6089 	add.w	r0, r7, #1096	; 0x448
 8004cb4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004cb8:	9303      	str	r3, [sp, #12]
 8004cba:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004cbe:	9302      	str	r3, [sp, #8]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	9301      	str	r3, [sp, #4]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	2364      	movs	r3, #100	; 0x64
 8004cca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cce:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8004cd2:	f001 f83b 	bl	8005d4c <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm>
			HANDLE_MSG_CNI_SYNC, EXPECTED_SYNC_TIMESTAMP_TICKS, DELAY_SYNC_TICKS);
// =======================================================

	// Inicialización del scheduler =================================
	timeTriggeredScheduler_constructor(&htim5, MICROTICKS_IN_MACROTICK);
 8004cd6:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004cda:	4839      	ldr	r0, [pc, #228]	; (8004dc0 <_Z15normal_mode_runv+0x314>)
 8004cdc:	f000 ff24 	bl	8005b28 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm>
	timeTriggeredScheduler_init();
 8004ce0:	f000 ff4c 	bl	8005b7c <_Z27timeTriggeredScheduler_initv>

	CNI_init();
 8004ce4:	f7fc f8d0 	bl	8000e88 <_Z8CNI_initv>

	taskHeartbeat_start(&taskHeartbeat);
 8004ce8:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fca5 	bl	800563c <_Z19taskHeartbeat_startP15taskHeartbeat_t>
	taskIMUgetData_start(&taskIMUgetData);
 8004cf2:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fcdc 	bl	80056b4 <_Z20taskIMUgetData_startP16taskIMUgetData_t>
	taskCNIsendData_start(&taskCNIsendIMUdata);
 8004cfc:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fb8d 	bl	8005420 <_Z21taskCNIsendData_startP17taskCNIsendData_t>


	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskHeartbeat);
 8004d06:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fff6 	bl	8005cfc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskWatchdog);
 8004d10:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 fff1 	bl	8005cfc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskPeriodicSync);
 8004d1a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 ffec 	bl	8005cfc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskIMUgetData);
 8004d24:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 ffe7 	bl	8005cfc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIsendIMUdata);
 8004d2e:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 ffe2 	bl	8005cfc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskEstimateAttitude);
 8004d38:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 ffdd 	bl	8005cfc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIsendAttitudeData);
 8004d42:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 ffd8 	bl	8005cfc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
#if SETTINGS_NODE_ID!=1
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIreceiveAttitudeData1);
 8004d4c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 ffd3 	bl	8005cfc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
#endif
#if SETTINGS_NODE_ID!=2
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIreceiveAttitudeData2);
 8004d56:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 ffce 	bl	8005cfc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
#endif
#if SETTINGS_NODE_ID!=3
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIreceiveAttitudeData3);
#endif
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCompareAttitudeData);
 8004d60:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 ffc9 	bl	8005cfc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIsendCompareAttitudeData);
 8004d6a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 ffc4 	bl	8005cfc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	CNI_start();
 8004d74:	f7fc f8ae 	bl	8000ed4 <_Z9CNI_startv>

	// Se queda acá esperando hasta que uno presione el botón para comenzar
	while(!run)
 8004d78:	bf00      	nop
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <_Z15normal_mode_runv+0x318>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	f083 0301 	eor.w	r3, r3, #1
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f8      	bne.n	8004d7a <_Z15normal_mode_runv+0x2ce>
	}

#if IS_MASTER
	CNI_send_msg(HANDLE_MSG_CNI_SYNC);
#endif
	taskWatchdog_start(&taskWatchdog);
 8004d88:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fe2b 	bl	80059e8 <_Z18taskWatchdog_startP14taskWatchdog_t>

	timeTriggeredScheduler_start();
 8004d92:	f000 ff0b 	bl	8005bac <_Z28timeTriggeredScheduler_startv>

	while(1)
	{
		timeTriggeredScheduler_dispatch();
 8004d96:	f000 ff15 	bl	8005bc4 <_Z31timeTriggeredScheduler_dispatchv>
 8004d9a:	e7fc      	b.n	8004d96 <_Z15normal_mode_runv+0x2ea>
 8004d9c:	40020400 	.word	0x40020400
 8004da0:	200003e0 	.word	0x200003e0
 8004da4:	0800a7e0 	.word	0x0800a7e0
 8004da8:	40021400 	.word	0x40021400
 8004dac:	40021000 	.word	0x40021000
 8004db0:	20000324 	.word	0x20000324
 8004db4:	3dcccccd 	.word	0x3dcccccd
 8004db8:	3ccccccd 	.word	0x3ccccccd
 8004dbc:	200003cc 	.word	0x200003cc
 8004dc0:	2000044c 	.word	0x2000044c
 8004dc4:	200003dc 	.word	0x200003dc

08004dc8 <HAL_CAN_RxFifo0MsgPendingCallback>:
    	run = true;
    }
}
#else
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8004dd0:	2102      	movs	r1, #2
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f001 fdc4 	bl	8006960 <HAL_CAN_DeactivateNotification>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8004dd8:	2014      	movs	r0, #20
 8004dda:	f002 f940 	bl	800705e <HAL_NVIC_DisableIRQ>
	run = true;
 8004dde:	4b03      	ldr	r3, [pc, #12]	; (8004dec <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8004de0:	2201      	movs	r2, #1
 8004de2:	701a      	strb	r2, [r3, #0]
}
 8004de4:	bf00      	nop
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	200003dc 	.word	0x200003dc

08004df0 <_ZN9iPHandlerC1Ev>:
class iPHandler {
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	4a04      	ldr	r2, [pc, #16]	; (8004e0c <_ZN9iPHandlerC1Ev+0x1c>)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	0800a8ac 	.word	0x0800a8ac

08004e10 <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE>:

template <uint8_t BufferSize = 32>
class PHandlerSPI : public iPHandler {
public:

	PHandlerSPI(SPI_HandleTypeDef* spiHandler, gpio *cs, COMM_MODE mode)
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
		: m_handler(spiHandler)
		, m_cs(cs)
		, m_mode(mode)
		, m_size(0)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff ffe5 	bl	8004df0 <_ZN9iPHandlerC1Ev>
 8004e26:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE+0x64>)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	601a      	str	r2, [r3, #0]
		: m_handler(spiHandler)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	60da      	str	r2, [r3, #12]
		, m_cs(cs)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	611a      	str	r2, [r3, #16]
		, m_mode(mode)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	615a      	str	r2, [r3, #20]
		, m_size(0)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		{

			m_mutex = false;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	721a      	strb	r2, [r3, #8]
			m_cs->write(GPIO_ST::HIGH);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2101      	movs	r1, #1
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fc fd7e 	bl	8001954 <_ZN5STM324gpio5writeE7GPIO_ST>
			m_recvBuffer = &m_rxBuffer[1];
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f103 0219 	add.w	r2, r3, #25
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	605a      	str	r2, [r3, #4]
			//m_blockDelay = delay == 0 ? HAL_MAX_DELAY : delay;
			m_blockDelay = 5000;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e68:	65da      	str	r2, [r3, #92]	; 0x5c
		}
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	0800a89c 	.word	0x0800a89c

08004e78 <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt>:
		: PHandlerSPI(spiHandler, cs, COMM_MODE::BLCK)
		{}


	//iHANDLER_ST read_registers(uint8_t add, uint8_t size, void *cs, COMM_MODE mode)
	iPHANDLER_ST read_registers(const PHandlerOpt &opt) override
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
	{
		//SPI_ST ret = SPI_ST::OK;

		if(opt.size > BufferSize-1){
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	785b      	ldrb	r3, [r3, #1]
 8004e86:	2b1f      	cmp	r3, #31
 8004e88:	d901      	bls.n	8004e8e <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt+0x16>
				return iPHANDLER_ST::ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e029      	b.n	8004ee2 <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt+0x6a>
		//if(m_mutex == true){
		//	return iHANDLER_ST::UNAVAILABLE;
		//}
		//m_mutex = true;

		m_txBuffer[0] = add_read_bit(opt.add, opt.rw, opt.rwFront);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	7818      	ldrb	r0, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	7b19      	ldrb	r1, [r3, #12]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	7b5b      	ldrb	r3, [r3, #13]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f7ff fdb2 	bl	8004a04 <_ZN9iPHandler12add_read_bitEhbb>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		m_mode = opt.mode;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	615a      	str	r2, [r3, #20]
		m_size = opt.size + 1;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	785b      	ldrb	r3, [r3, #1]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		m_cs = static_cast<gpio*>(opt.slave);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	611a      	str	r2, [r3, #16]
		m_recvBuffer = &m_rxBuffer[opt.addSize]; // recvBuffer apunta a donde comienza la recepción de SPI según el largo del address (en bytes)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	7b9b      	ldrb	r3, [r3, #14]
 8004ecc:	3318      	adds	r3, #24
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	441a      	add	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	605a      	str	r2, [r3, #4]

		return start_transmition();
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f842 	bl	8004f62 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	bf00      	nop
	}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt>:

	//iHANDLER_ST write_registers(uint8_t add, uint8_t *data, uint8_t size, void *cs, COMM_MODE mode)
	iPHANDLER_ST write_registers(uint8_t *data, const PHandlerOpt &opt) override
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	607a      	str	r2, [r7, #4]
	{
		//SPI_ST ret = SPI_ST::OK;

		if(opt.size > BufferSize-1){
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	785b      	ldrb	r3, [r3, #1]
 8004efa:	2b1f      	cmp	r3, #31
 8004efc:	d901      	bls.n	8004f02 <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt+0x18>
				return iPHANDLER_ST::ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e02b      	b.n	8004f5a <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt+0x70>
		//if(m_mutex == true){
		//	return iHANDLER_ST::UNAVAILABLE;
		//}
		//m_mutex = true;

		m_txBuffer[0] = add_write_bit(opt.add, opt.rw, opt.rwFront);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	7818      	ldrb	r0, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	7b19      	ldrb	r1, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	7b5b      	ldrb	r3, [r3, #13]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f7ff fda2 	bl	8004a58 <_ZN9iPHandler13add_write_bitEhbb>
 8004f14:	4603      	mov	r3, r0
 8004f16:	461a      	mov	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		memcpy(m_txBuffer + 1, data, opt.size);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3338      	adds	r3, #56	; 0x38
 8004f22:	1c58      	adds	r0, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	785b      	ldrb	r3, [r3, #1]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	f005 fbec 	bl	800a708 <memcpy>
		m_mode = opt.mode;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	615a      	str	r2, [r3, #20]
		m_size = opt.size + 1;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	785b      	ldrb	r3, [r3, #1]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		m_cs = static_cast<gpio*>(opt.slave);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	611a      	str	r2, [r3, #16]

		return start_transmition();
 8004f4e:	2100      	movs	r1, #0
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f806 	bl	8004f62 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>
 8004f56:	4603      	mov	r3, r0
 8004f58:	bf00      	nop
	}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>:




	iPHANDLER_ST start_transmition(void *fn_pointer = nullptr ) // arreglar cuando se use la DMA
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
	{
		iPHANDLER_ST ret = iPHANDLER_ST::OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]
		//m_spiHandler.m_csPin = m_cs;

		m_cs->write(GPIO_ST::LOW);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	2100      	movs	r1, #0
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fc fcec 	bl	8001954 <_ZN5STM324gpio5writeE7GPIO_ST>
		switch (m_mode)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d021      	beq.n	8004fc8 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x66>
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	dc21      	bgt.n	8004fcc <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x6a>
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x30>
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d019      	beq.n	8004fc4 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x62>
 8004f90:	e01c      	b.n	8004fcc <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x6a>
		{
		case COMM_MODE::BLCK:

			ret = transmit(m_txBuffer, m_rxBuffer, m_size);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f103 0218 	add.w	r2, r3, #24
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f81e 	bl	8004fe8 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t>
 8004fac:	60f8      	str	r0, [r7, #12]
			m_cs->write(GPIO_ST::HIGH);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fc fccd 	bl	8001954 <_ZN5STM324gpio5writeE7GPIO_ST>
			if(ret != iPHANDLER_ST::OK){
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00d      	beq.n	8004fdc <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7a>
				return iPHANDLER_ST::ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e00d      	b.n	8004fe0 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			}
			break;

		case COMM_MODE::IT:
			 return iPHANDLER_ST::INVALID;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e00b      	b.n	8004fe0 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;

		case COMM_MODE::DMA:
			return iPHANDLER_ST::INVALID;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e009      	b.n	8004fe0 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;


		default:
			m_cs->write(GPIO_ST::HIGH);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fc fcbe 	bl	8001954 <_ZN5STM324gpio5writeE7GPIO_ST>
			return iPHANDLER_ST::INVALID;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e001      	b.n	8004fe0 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;
 8004fdc:	bf00      	nop
			break;
		}

		return iPHANDLER_ST::OK;
 8004fde:	2300      	movs	r3, #0
	}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t>:


	   return map_hal_st_to_handler_st(retHal);
   }

   iPHANDLER_ST transmit(uint8_t *pTxData, uint8_t *pRxData, uint16_t size)
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	807b      	strh	r3, [r7, #2]
   {

	   HAL_StatusTypeDef retHal = HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	75fb      	strb	r3, [r7, #23]
	   if(m_cs == nullptr)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t+0x1e>
		   return iPHANDLER_ST::ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e013      	b.n	800502e <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t+0x46>

	   //m_csPin->write(GPIO_ST::LOW);

	   retHal = HAL_SPI_TransmitReceive(
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	68d8      	ldr	r0, [r3, #12]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500e:	887a      	ldrh	r2, [r7, #2]
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	4613      	mov	r3, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	f003 fce3 	bl	80089e2 <HAL_SPI_TransmitReceive>
 800501c:	4603      	mov	r3, r0
 800501e:	75fb      	strb	r3, [r7, #23]
				   size,
				m_blockDelay
			   );
	   //m_csPin->write(GPIO_ST::HIGH);

	   return map_hal_st_to_handler_st(retHal);
 8005020:	7dfb      	ldrb	r3, [r7, #23]
 8005022:	4619      	mov	r1, r3
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 f806 	bl	8005036 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef>
 800502a:	4603      	mov	r3, r0
 800502c:	bf00      	nop

   }
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef>:
   {
	   return iPHANDLER_ST::INVALID;
   }


   iPHANDLER_ST map_hal_st_to_handler_st(HAL_StatusTypeDef st)
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	70fb      	strb	r3, [r7, #3]
   {
	   switch (st){
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef+0x16>
	   case HAL_OK:
		   return iPHANDLER_ST::OK;
 8005048:	2300      	movs	r3, #0
 800504a:	e000      	b.n	800504e <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef+0x18>
		   break;
	   case HAL_TIMEOUT:
	   case HAL_ERROR:
	   default:
		   return iPHANDLER_ST::ERROR;
 800504c:	2301      	movs	r3, #1
		   break;
	   }
   }
 800504e:	4618      	mov	r0, r3
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <_Z22my_copy_array_of_uint8PhPKhm>:
 */

#include "myUtils.h"

void my_copy_array_of_uint8(uint8_t *dest, const uint8_t *src, uint32_t n)
{
 800505a:	b480      	push	{r7}
 800505c:	b087      	sub	sp, #28
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
	uint32_t i;

	for(i = 0; i < n; i++)
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	e00a      	b.n	8005082 <_Z22my_copy_array_of_uint8PhPKhm+0x28>
	{
		dest[i] = src[i];
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	441a      	add	r2, r3
 8005072:	68f9      	ldr	r1, [r7, #12]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	440b      	add	r3, r1
 8005078:	7812      	ldrb	r2, [r2, #0]
 800507a:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < n; i++)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3301      	adds	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d3f0      	bcc.n	800506c <_Z22my_copy_array_of_uint8PhPKhm+0x12>
	}
}
 800508a:	bf00      	nop
 800508c:	bf00      	nop
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800509c:	4b1b      	ldr	r3, [pc, #108]	; (800510c <MX_SPI2_Init+0x74>)
 800509e:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <MX_SPI2_Init+0x78>)
 80050a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80050a2:	4b1a      	ldr	r3, [pc, #104]	; (800510c <MX_SPI2_Init+0x74>)
 80050a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80050a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80050aa:	4b18      	ldr	r3, [pc, #96]	; (800510c <MX_SPI2_Init+0x74>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80050b0:	4b16      	ldr	r3, [pc, #88]	; (800510c <MX_SPI2_Init+0x74>)
 80050b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80050b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80050b8:	4b14      	ldr	r3, [pc, #80]	; (800510c <MX_SPI2_Init+0x74>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80050be:	4b13      	ldr	r3, [pc, #76]	; (800510c <MX_SPI2_Init+0x74>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80050c4:	4b11      	ldr	r3, [pc, #68]	; (800510c <MX_SPI2_Init+0x74>)
 80050c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80050cc:	4b0f      	ldr	r3, [pc, #60]	; (800510c <MX_SPI2_Init+0x74>)
 80050ce:	2220      	movs	r2, #32
 80050d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80050d2:	4b0e      	ldr	r3, [pc, #56]	; (800510c <MX_SPI2_Init+0x74>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80050d8:	4b0c      	ldr	r3, [pc, #48]	; (800510c <MX_SPI2_Init+0x74>)
 80050da:	2200      	movs	r2, #0
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050de:	4b0b      	ldr	r3, [pc, #44]	; (800510c <MX_SPI2_Init+0x74>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80050e4:	4b09      	ldr	r3, [pc, #36]	; (800510c <MX_SPI2_Init+0x74>)
 80050e6:	2207      	movs	r2, #7
 80050e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80050ea:	4b08      	ldr	r3, [pc, #32]	; (800510c <MX_SPI2_Init+0x74>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80050f0:	4b06      	ldr	r3, [pc, #24]	; (800510c <MX_SPI2_Init+0x74>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80050f6:	4805      	ldr	r0, [pc, #20]	; (800510c <MX_SPI2_Init+0x74>)
 80050f8:	f003 fbc8 	bl	800888c <HAL_SPI_Init>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8005102:	f7ff fc67 	bl	80049d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005106:	bf00      	nop
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	200003e0 	.word	0x200003e0
 8005110:	40003800 	.word	0x40003800

08005114 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08a      	sub	sp, #40	; 0x28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800511c:	f107 0314 	add.w	r3, r7, #20
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	605a      	str	r2, [r3, #4]
 8005126:	609a      	str	r2, [r3, #8]
 8005128:	60da      	str	r2, [r3, #12]
 800512a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a17      	ldr	r2, [pc, #92]	; (8005190 <HAL_SPI_MspInit+0x7c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d128      	bne.n	8005188 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005136:	4b17      	ldr	r3, [pc, #92]	; (8005194 <HAL_SPI_MspInit+0x80>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	4a16      	ldr	r2, [pc, #88]	; (8005194 <HAL_SPI_MspInit+0x80>)
 800513c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005140:	6413      	str	r3, [r2, #64]	; 0x40
 8005142:	4b14      	ldr	r3, [pc, #80]	; (8005194 <HAL_SPI_MspInit+0x80>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800514e:	4b11      	ldr	r3, [pc, #68]	; (8005194 <HAL_SPI_MspInit+0x80>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	4a10      	ldr	r2, [pc, #64]	; (8005194 <HAL_SPI_MspInit+0x80>)
 8005154:	f043 0302 	orr.w	r3, r3, #2
 8005158:	6313      	str	r3, [r2, #48]	; 0x30
 800515a:	4b0e      	ldr	r3, [pc, #56]	; (8005194 <HAL_SPI_MspInit+0x80>)
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005166:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800516a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800516c:	2302      	movs	r3, #2
 800516e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005170:	2300      	movs	r3, #0
 8005172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005174:	2303      	movs	r3, #3
 8005176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005178:	2305      	movs	r3, #5
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800517c:	f107 0314 	add.w	r3, r7, #20
 8005180:	4619      	mov	r1, r3
 8005182:	4805      	ldr	r0, [pc, #20]	; (8005198 <HAL_SPI_MspInit+0x84>)
 8005184:	f001 ff86 	bl	8007094 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005188:	bf00      	nop
 800518a:	3728      	adds	r7, #40	; 0x28
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40003800 	.word	0x40003800
 8005194:	40023800 	.word	0x40023800
 8005198:	40020400 	.word	0x40020400

0800519c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80051a2:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <HAL_MspInit+0x44>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	4a0e      	ldr	r2, [pc, #56]	; (80051e0 <HAL_MspInit+0x44>)
 80051a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ac:	6413      	str	r3, [r2, #64]	; 0x40
 80051ae:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <HAL_MspInit+0x44>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b6:	607b      	str	r3, [r7, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ba:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <HAL_MspInit+0x44>)
 80051bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051be:	4a08      	ldr	r2, [pc, #32]	; (80051e0 <HAL_MspInit+0x44>)
 80051c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051c4:	6453      	str	r3, [r2, #68]	; 0x44
 80051c6:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <HAL_MspInit+0x44>)
 80051c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40023800 	.word	0x40023800

080051e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80051e8:	e7fe      	b.n	80051e8 <NMI_Handler+0x4>

080051ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051ea:	b480      	push	{r7}
 80051ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051ee:	e7fe      	b.n	80051ee <HardFault_Handler+0x4>

080051f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051f4:	e7fe      	b.n	80051f4 <MemManage_Handler+0x4>

080051f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051f6:	b480      	push	{r7}
 80051f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051fa:	e7fe      	b.n	80051fa <BusFault_Handler+0x4>

080051fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005200:	e7fe      	b.n	8005200 <UsageFault_Handler+0x4>

08005202 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005202:	b480      	push	{r7}
 8005204:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005206:	bf00      	nop
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005214:	bf00      	nop
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800521e:	b480      	push	{r7}
 8005220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005222:	bf00      	nop
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005230:	f000 fe88 	bl	8005f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005234:	bf00      	nop
 8005236:	bd80      	pop	{r7, pc}

08005238 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800523c:	4802      	ldr	r0, [pc, #8]	; (8005248 <CAN1_RX0_IRQHandler+0x10>)
 800523e:	f001 fbb6 	bl	80069ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005242:	bf00      	nop
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000324 	.word	0x20000324

0800524c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005250:	4802      	ldr	r0, [pc, #8]	; (800525c <TIM5_IRQHandler+0x10>)
 8005252:	f004 f86c 	bl	800932e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	2000044c 	.word	0x2000044c

08005260 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  return 1;
 8005264:	2301      	movs	r3, #1
}
 8005266:	4618      	mov	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <_kill>:

int _kill(int pid, int sig)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800527a:	f005 fa19 	bl	800a6b0 <__errno>
 800527e:	4603      	mov	r3, r0
 8005280:	2216      	movs	r2, #22
 8005282:	601a      	str	r2, [r3, #0]
  return -1;
 8005284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <_exit>:

void _exit (int status)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005298:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff ffe7 	bl	8005270 <_kill>
  while (1) {}    /* Make sure we hang here */
 80052a2:	e7fe      	b.n	80052a2 <_exit+0x12>

080052a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052ac:	4a14      	ldr	r2, [pc, #80]	; (8005300 <_sbrk+0x5c>)
 80052ae:	4b15      	ldr	r3, [pc, #84]	; (8005304 <_sbrk+0x60>)
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052b8:	4b13      	ldr	r3, [pc, #76]	; (8005308 <_sbrk+0x64>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d102      	bne.n	80052c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052c0:	4b11      	ldr	r3, [pc, #68]	; (8005308 <_sbrk+0x64>)
 80052c2:	4a12      	ldr	r2, [pc, #72]	; (800530c <_sbrk+0x68>)
 80052c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052c6:	4b10      	ldr	r3, [pc, #64]	; (8005308 <_sbrk+0x64>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4413      	add	r3, r2
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d207      	bcs.n	80052e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052d4:	f005 f9ec 	bl	800a6b0 <__errno>
 80052d8:	4603      	mov	r3, r0
 80052da:	220c      	movs	r2, #12
 80052dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052e2:	e009      	b.n	80052f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052e4:	4b08      	ldr	r3, [pc, #32]	; (8005308 <_sbrk+0x64>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052ea:	4b07      	ldr	r3, [pc, #28]	; (8005308 <_sbrk+0x64>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4413      	add	r3, r2
 80052f2:	4a05      	ldr	r2, [pc, #20]	; (8005308 <_sbrk+0x64>)
 80052f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052f6:	68fb      	ldr	r3, [r7, #12]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	20050000 	.word	0x20050000
 8005304:	00000400 	.word	0x00000400
 8005308:	20000444 	.word	0x20000444
 800530c:	200006b8 	.word	0x200006b8

08005310 <_Z11system_initv>:
};

static systemMode theSystemMode = FAIL_SILENT;

void system_init(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8005314:	4b0e      	ldr	r3, [pc, #56]	; (8005350 <_Z11system_initv+0x40>)
 8005316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	bf14      	ite	ne
 8005320:	2301      	movne	r3, #1
 8005322:	2300      	moveq	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d009      	beq.n	800533e <_Z11system_initv+0x2e>
	{
		__HAL_RCC_CLEAR_RESET_FLAGS();
 800532a:	4b09      	ldr	r3, [pc, #36]	; (8005350 <_Z11system_initv+0x40>)
 800532c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800532e:	4a08      	ldr	r2, [pc, #32]	; (8005350 <_Z11system_initv+0x40>)
 8005330:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005334:	6753      	str	r3, [r2, #116]	; 0x74

		theSystemMode = FAIL_SILENT;
 8005336:	4b07      	ldr	r3, [pc, #28]	; (8005354 <_Z11system_initv+0x44>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		theSystemMode = NORMAL;
	}
}
 800533c:	e002      	b.n	8005344 <_Z11system_initv+0x34>
		theSystemMode = NORMAL;
 800533e:	4b05      	ldr	r3, [pc, #20]	; (8005354 <_Z11system_initv+0x44>)
 8005340:	2201      	movs	r2, #1
 8005342:	601a      	str	r2, [r3, #0]
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40023800 	.word	0x40023800
 8005354:	20000448 	.word	0x20000448

08005358 <_Z22system_run_active_modev>:

void system_run_active_mode(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
	switch(theSystemMode)
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <_Z22system_run_active_modev+0x1c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d102      	bne.n	800536a <_Z22system_run_active_modev+0x12>
	{
		case NORMAL:
			normal_mode_run();
 8005364:	f7ff fba2 	bl	8004aac <_Z15normal_mode_runv>
			break;
 8005368:	e002      	b.n	8005370 <_Z22system_run_active_modev+0x18>

		default:
		case FAIL_SILENT:
			fail_silent_mode_run();
 800536a:	f7ff fb39 	bl	80049e0 <_Z20fail_silent_mode_runv>
			break;
 800536e:	bf00      	nop
	}
}
 8005370:	bf00      	nop
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20000448 	.word	0x20000448

08005378 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800537c:	4b06      	ldr	r3, [pc, #24]	; (8005398 <SystemInit+0x20>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005382:	4a05      	ldr	r2, [pc, #20]	; (8005398 <SystemInit+0x20>)
 8005384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800538c:	bf00      	nop
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	e000ed00 	.word	0xe000ed00

0800539c <_Z30taskCNIreceiveData_constructorP20taskCNIreceiveData_tmmmmm>:

#include "taskCNIreceiveData.h"
#include "CNI.h"

void taskCNIreceiveData_constructor(taskCNIreceiveData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskCNIreceiveData_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	4904      	ldr	r1, [pc, #16]	; (80053cc <_Z30taskCNIreceiveData_constructorP20taskCNIreceiveData_tmmmmm+0x30>)
 80053ba:	f000 fd3f 	bl	8005e3c <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mHandleMsg_ = handleMsg;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	69fa      	ldr	r2, [r7, #28]
 80053c2:	615a      	str	r2, [r3, #20]
}
 80053c4:	bf00      	nop
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	080053d1 	.word	0x080053d1

080053d0 <_Z25taskCNIreceiveData_updateP20taskCNIreceiveData_t>:
	//TODO: acá podría uno decirle a la CNI que se va a encargar de enviar el mensaje
	// asociado al handleMsg.
}

void taskCNIreceiveData_update(taskCNIreceiveData_t *me)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
	CNI_receive_msg(me->mHandleMsg_);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fb fe1d 	bl	800101c <_Z15CNI_receive_msgm>
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>:

#include "taskCNIsendData.h"
#include "CNI.h"

void taskCNIsendData_constructor(taskCNIsendData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskCNIsendData_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	9301      	str	r3, [sp, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4904      	ldr	r1, [pc, #16]	; (800541c <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm+0x30>)
 800540a:	f000 fd17 	bl	8005e3c <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mHandleMsg_ = handleMsg;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	69fa      	ldr	r2, [r7, #28]
 8005412:	615a      	str	r2, [r3, #20]
}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	08005435 	.word	0x08005435

08005420 <_Z21taskCNIsendData_startP17taskCNIsendData_t>:
	//TODO: hay que hacer que si uno llama a la tarea nuevamente, la tarea simplemente no haga nada.
	timeTriggeredTask_destructor(&me->super);
}

void taskCNIsendData_start(taskCNIsendData_t *me)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	//TODO: acá podría uno decirle a la CNI que se va a encargar de enviar el mensaje
	// asociado al handleMsg.
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <_Z22taskCNIsendData_updateP17taskCNIsendData_t>:

void taskCNIsendData_update(taskCNIsendData_t *me)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	CNI_send_msg(me->mHandleMsg_);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	4618      	mov	r0, r3
 8005442:	f7fb fd59 	bl	8000ef8 <_Z12CNI_send_msgm>
}
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <_Z31taskCompareAttitude_constructorP21taskCompareAttitude_tmmmmmmmm>:

#define LEN_CNI_DATA 8
#define LEN_COMPARE_ATTITUDE_CNI_DATA 24

void taskCompareAttitude_constructor(taskCompareAttitude_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsgAttitude1, uint32_t handleMsgAttitude2, uint32_t handleMsgAttitude3, uint32_t handleMsg)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskCompareAttitude_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4909      	ldr	r1, [pc, #36]	; (8005494 <_Z31taskCompareAttitude_constructorP21taskCompareAttitude_tmmmmmmmm+0x44>)
 800546e:	f000 fce5 	bl	8005e3c <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mHandleMsgAttitude1_ = handleMsgAttitude1;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	69fa      	ldr	r2, [r7, #28]
 8005476:	615a      	str	r2, [r3, #20]
	me->mHandleMsgAttitude2_ = handleMsgAttitude2;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a3a      	ldr	r2, [r7, #32]
 800547c:	619a      	str	r2, [r3, #24]
	me->mHandleMsgAttitude3_ = handleMsgAttitude3;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005482:	61da      	str	r2, [r3, #28]
	me->mHandleMsg_ = handleMsg;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005488:	621a      	str	r2, [r3, #32]
}
 800548a:	bf00      	nop
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	08005499 	.word	0x08005499

08005498 <_Z26taskCompareAttitude_updateP21taskCompareAttitude_t>:
	//TODO: acá podría uno decirle a la CNI que se va a encargar de enviar el mensaje
	// asociado al handleMsg.
}

void taskCompareAttitude_update(taskCompareAttitude_t *me)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b098      	sub	sp, #96	; 0x60
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	uint8_t dataCNI[LEN_CNI_DATA];
	uint8_t dataCNIcompareAttitude[LEN_COMPARE_ATTITUDE_CNI_DATA];
	uint32_t lenDataReadFromCNI = 0;
 80054a0:	2300      	movs	r3, #0
 80054a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	float comparePitch12, compareRoll12;
	float comparePitch13, compareRoll13;
	float comparePitch23, compareRoll23;

	// Leer los datos de pitch y roll de las 3 placas, de la tabla CNI
	CNI_get_msg_content(me->mHandleMsgAttitude1_, dataCNI, LEN_CNI_DATA, &lenDataReadFromCNI);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6958      	ldr	r0, [r3, #20]
 80054a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80054ac:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80054b0:	2208      	movs	r2, #8
 80054b2:	f7fb fee5 	bl	8001280 <_Z19CNI_get_msg_contentmPhmPm>
 80054b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	memcpy(&pitch1, dataCNI, 4);
 80054b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80054ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	memcpy(&roll1, &dataCNI[4], 4);
 80054bc:	637b      	str	r3, [r7, #52]	; 0x34

	CNI_get_msg_content(me->mHandleMsgAttitude2_, dataCNI, LEN_CNI_DATA, &lenDataReadFromCNI);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6998      	ldr	r0, [r3, #24]
 80054c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80054c6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80054ca:	2208      	movs	r2, #8
 80054cc:	f7fb fed8 	bl	8001280 <_Z19CNI_get_msg_contentmPhmPm>
 80054d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	memcpy(&pitch2, dataCNI, 4);
 80054d2:	633b      	str	r3, [r7, #48]	; 0x30
 80054d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	memcpy(&roll2, &dataCNI[4], 4);
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c

	CNI_get_msg_content(me->mHandleMsgAttitude3_, dataCNI, LEN_CNI_DATA, &lenDataReadFromCNI);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69d8      	ldr	r0, [r3, #28]
 80054dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80054e0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80054e4:	2208      	movs	r2, #8
 80054e6:	f7fb fecb 	bl	8001280 <_Z19CNI_get_msg_contentmPhmPm>
 80054ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	memcpy(&pitch3, dataCNI, 4);
 80054ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	memcpy(&roll3, &dataCNI[4], 4);
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24

	// Calcular los residuos 12, 13, 23
	comparePitch12 = fabs(pitch1 - pitch2);
 80054f2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80054f6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80054fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054fe:	eef0 7ae7 	vabs.f32	s15, s15
 8005502:	edc7 7a08 	vstr	s15, [r7, #32]
	comparePitch13 = fabs(pitch1 - pitch3);
 8005506:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800550a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800550e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005512:	eef0 7ae7 	vabs.f32	s15, s15
 8005516:	edc7 7a06 	vstr	s15, [r7, #24]
	comparePitch23 = fabs(pitch2 - pitch3);
 800551a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800551e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005526:	eef0 7ae7 	vabs.f32	s15, s15
 800552a:	edc7 7a04 	vstr	s15, [r7, #16]
	compareRoll12  = fabs(roll1  - roll2);
 800552e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005532:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800553a:	eef0 7ae7 	vabs.f32	s15, s15
 800553e:	edc7 7a07 	vstr	s15, [r7, #28]
	compareRoll13  = fabs(roll1  - roll3);
 8005542:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005546:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800554a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800554e:	eef0 7ae7 	vabs.f32	s15, s15
 8005552:	edc7 7a05 	vstr	s15, [r7, #20]
	compareRoll23  = fabs(roll2  - roll3);
 8005556:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800555a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800555e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005562:	eef0 7ae7 	vabs.f32	s15, s15
 8005566:	edc7 7a03 	vstr	s15, [r7, #12]
 800556a:	6a3b      	ldr	r3, [r7, #32]

	// Convertir los datos en bytes
	memcpy(dataCNIcompareAttitude     , &comparePitch12 , 4);
 800556c:	643b      	str	r3, [r7, #64]	; 0x40
 800556e:	69fb      	ldr	r3, [r7, #28]
	memcpy(&dataCNIcompareAttitude[4] , &compareRoll12  , 4);
 8005570:	647b      	str	r3, [r7, #68]	; 0x44
 8005572:	69bb      	ldr	r3, [r7, #24]
	memcpy(&dataCNIcompareAttitude[8] , &comparePitch13 , 4);
 8005574:	64bb      	str	r3, [r7, #72]	; 0x48
 8005576:	697b      	ldr	r3, [r7, #20]
	memcpy(&dataCNIcompareAttitude[12], &compareRoll13  , 4);
 8005578:	64fb      	str	r3, [r7, #76]	; 0x4c
 800557a:	693b      	ldr	r3, [r7, #16]
	memcpy(&dataCNIcompareAttitude[16], &comparePitch23 , 4);
 800557c:	653b      	str	r3, [r7, #80]	; 0x50
 800557e:	68fb      	ldr	r3, [r7, #12]
	memcpy(&dataCNIcompareAttitude[20], &compareRoll23  , 4);
 8005580:	657b      	str	r3, [r7, #84]	; 0x54

	// Actualizar los valores en la CNI
	CNI_update_msg_content(me->mHandleMsg_, dataCNIcompareAttitude, LEN_COMPARE_ATTITUDE_CNI_DATA);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800558a:	2218      	movs	r2, #24
 800558c:	4618      	mov	r0, r3
 800558e:	f7fb fddb 	bl	8001148 <_Z22CNI_update_msg_contentmPhm>
}
 8005592:	bf00      	nop
 8005594:	3760      	adds	r7, #96	; 0x60
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <_Z32taskEstimateAttitude_constructorP22taskEstimateAttitude_tmmmmm>:
#include "CNI.h"

#define LEN_ATTITUDE_CNI_DATA 8

void taskEstimateAttitude_constructor(taskEstimateAttitude_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskEstimateAttitude_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	9301      	str	r3, [sp, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	4904      	ldr	r1, [pc, #16]	; (80055cc <_Z32taskEstimateAttitude_constructorP22taskEstimateAttitude_tmmmmm+0x30>)
 80055ba:	f000 fc3f 	bl	8005e3c <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mHandleMsg_ = handleMsg;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	615a      	str	r2, [r3, #20]
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	080055d1 	.word	0x080055d1

080055d0 <_Z27taskEstimateAttitude_updateP22taskEstimateAttitude_t>:
	//TODO: acá podría uno decirle a la CNI que se va a encargar de enviar el mensaje
	// asociado al handleMsg.
}

void taskEstimateAttitude_update(taskEstimateAttitude_t *me)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	attitudeData_t outputData;
	uint8_t dataForCni[LEN_ATTITUDE_CNI_DATA];

	attitudeEstimator_update();
 80055d8:	f7fb ff1e 	bl	8001418 <_Z24attitudeEstimator_updatev>

	// Convertir los datos del estimador en bytes
	attitudeEstimator_read_data(&outputData);
 80055dc:	f107 0310 	add.w	r3, r7, #16
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fb ffc9 	bl	8001578 <_Z27attitudeEstimator_read_dataP14attitudeData_t>
 80055e6:	693b      	ldr	r3, [r7, #16]
	memcpy(dataForCni    , &outputData.mPitch_, 4);
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	697b      	ldr	r3, [r7, #20]
	memcpy(&dataForCni[4], &outputData.mRoll_ , 4);
 80055ec:	60fb      	str	r3, [r7, #12]

	// Actualizarlos en la CNI
	CNI_update_msg_content(me->mHandleMsg_, dataForCni, LEN_ATTITUDE_CNI_DATA);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f107 0108 	add.w	r1, r7, #8
 80055f6:	2208      	movs	r2, #8
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fb fda5 	bl	8001148 <_Z22CNI_update_msg_contentmPhm>
}
 80055fe:	bf00      	nop
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>:
 */

#include "taskHeartbeat.h"

void taskHeartbeat_constructor(taskHeartbeat_t *me , uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, STM32::gpio *led)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af02      	add	r7, sp, #8
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskHeartbeat_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	9301      	str	r3, [sp, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4904      	ldr	r1, [pc, #16]	; (8005638 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE+0x30>)
 8005626:	f000 fc09 	bl	8005e3c <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mLED_ = led;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	615a      	str	r2, [r3, #20]
}
 8005630:	bf00      	nop
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	08005659 	.word	0x08005659

0800563c <_Z19taskHeartbeat_startP15taskHeartbeat_t>:
	me->mLED_->write(GPIO_ST::LOW);
	timeTriggeredTask_destructor(&me->super);
}

void taskHeartbeat_start(taskHeartbeat_t *me)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	me->mLED_->write(GPIO_ST::HIGH);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	2101      	movs	r1, #1
 800564a:	4618      	mov	r0, r3
 800564c:	f7fc f982 	bl	8001954 <_ZN5STM324gpio5writeE7GPIO_ST>
}
 8005650:	bf00      	nop
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <_Z20taskHeartbeat_updateP15taskHeartbeat_t>:

void taskHeartbeat_update(taskHeartbeat_t *me)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	me->mLED_->toggle();
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	4618      	mov	r0, r3
 8005666:	f7fc f965 	bl	8001934 <_ZN5STM324gpio6toggleEv>
}
 800566a:	bf00      	nop
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688EPN5STM324gpioEm>:
#define N_CALIBRATION_SAMPLES 100

static void make_imu_data_for_cni(IMUData imuData, uint8_t *dataForCni);

void taskIMUgetData_constructor(taskIMUgetData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, ICM42688::icm42688 *imu, STM32::gpio *led, uint32_t handleMsg)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskIMUgetData_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	4907      	ldr	r1, [pc, #28]	; (80056b0 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688EPN5STM324gpioEm+0x3c>)
 8005692:	f000 fbd3 	bl	8005e3c <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mIMU_ = imu;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	615a      	str	r2, [r3, #20]
	me->mLED_ = led;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a3a      	ldr	r2, [r7, #32]
 80056a0:	635a      	str	r2, [r3, #52]	; 0x34
	me->mHandleMsg_ = handleMsg;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80056a8:	bf00      	nop
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	0800585d 	.word	0x0800585d

080056b4 <_Z20taskIMUgetData_startP16taskIMUgetData_t>:
	timeTriggeredTask_destructor(&me->super);
}

// Ejecuta una rutina de calibración de la IMU
void taskIMUgetData_start(taskIMUgetData_t *me)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08a      	sub	sp, #40	; 0x28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
	IMUData sampleData;
	uint32_t i;

	me->mLED_->write(GPIO_ST::HIGH);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c0:	2101      	movs	r1, #1
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fc f946 	bl	8001954 <_ZN5STM324gpio5writeE7GPIO_ST>

	me->mIMUoffsetData_.accelX = 0;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	629a      	str	r2, [r3, #40]	; 0x28
	me->mIMUoffsetData_.accelY = 0;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	62da      	str	r2, [r3, #44]	; 0x2c
	me->mIMUoffsetData_.accelZ = 0;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
	me->mIMUoffsetData_.gyroX  = 0;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f04f 0200 	mov.w	r2, #0
 80056e6:	61da      	str	r2, [r3, #28]
	me->mIMUoffsetData_.gyroY  = 0;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f04f 0200 	mov.w	r2, #0
 80056ee:	621a      	str	r2, [r3, #32]
	me->mIMUoffsetData_.gyroZ  = 0;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_Delay(1000);
 80056f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056fc:	f000 fc42 	bl	8005f84 <HAL_Delay>

	// Mido "N" muestras
	for(i = 0; i < N_CALIBRATION_SAMPLES ; i++)
 8005700:	2300      	movs	r3, #0
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
 8005704:	e054      	b.n	80057b0 <_Z20taskIMUgetData_startP16taskIMUgetData_t+0xfc>
	{
		me->mIMU_->save_data();
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695a      	ldr	r2, [r3, #20]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4610      	mov	r0, r2
 8005714:	4798      	blx	r3
		me->mIMU_->read_data(&sampleData);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695a      	ldr	r2, [r3, #20]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3310      	adds	r3, #16
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f107 0108 	add.w	r1, r7, #8
 8005728:	4610      	mov	r0, r2
 800572a:	4798      	blx	r3

		me->mIMUoffsetData_.accelX += sampleData.accelX;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005732:	edd7 7a06 	vldr	s15, [r7, #24]
 8005736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		me->mIMUoffsetData_.accelY += sampleData.accelY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005746:	edd7 7a07 	vldr	s15, [r7, #28]
 800574a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		me->mIMUoffsetData_.accelZ += sampleData.accelZ;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800575a:	edd7 7a08 	vldr	s15, [r7, #32]
 800575e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		me->mIMUoffsetData_.gyroX  += sampleData.gyroX;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	ed93 7a07 	vldr	s14, [r3, #28]
 800576e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	edc3 7a07 	vstr	s15, [r3, #28]
		me->mIMUoffsetData_.gyroY  += sampleData.gyroY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	ed93 7a08 	vldr	s14, [r3, #32]
 8005782:	edd7 7a04 	vldr	s15, [r7, #16]
 8005786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	edc3 7a08 	vstr	s15, [r3, #32]
		me->mIMUoffsetData_.gyroZ  += sampleData.gyroZ;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005796:	edd7 7a05 	vldr	s15, [r7, #20]
 800579a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		HAL_Delay(50);
 80057a4:	2032      	movs	r0, #50	; 0x32
 80057a6:	f000 fbed 	bl	8005f84 <HAL_Delay>
	for(i = 0; i < N_CALIBRATION_SAMPLES ; i++)
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	3301      	adds	r3, #1
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	2b63      	cmp	r3, #99	; 0x63
 80057b4:	d9a7      	bls.n	8005706 <_Z20taskIMUgetData_startP16taskIMUgetData_t+0x52>
	}

	// Calculo promedio para saber el offset
	me->mIMUoffsetData_.accelX /= N_CALIBRATION_SAMPLES;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80057bc:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005858 <_Z20taskIMUgetData_startP16taskIMUgetData_t+0x1a4>
 80057c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	me->mIMUoffsetData_.accelY /= N_CALIBRATION_SAMPLES;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80057d0:	eddf 6a21 	vldr	s13, [pc, #132]	; 8005858 <_Z20taskIMUgetData_startP16taskIMUgetData_t+0x1a4>
 80057d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	me->mIMUoffsetData_.accelZ /= N_CALIBRATION_SAMPLES;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80057e4:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8005858 <_Z20taskIMUgetData_startP16taskIMUgetData_t+0x1a4>
 80057e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	me->mIMUoffsetData_.accelZ -= 1.0;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80057f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	me->mIMUoffsetData_.gyroX  /= N_CALIBRATION_SAMPLES;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	ed93 7a07 	vldr	s14, [r3, #28]
 800580c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005858 <_Z20taskIMUgetData_startP16taskIMUgetData_t+0x1a4>
 8005810:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	edc3 7a07 	vstr	s15, [r3, #28]
	me->mIMUoffsetData_.gyroY  /= N_CALIBRATION_SAMPLES;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005820:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8005858 <_Z20taskIMUgetData_startP16taskIMUgetData_t+0x1a4>
 8005824:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	edc3 7a08 	vstr	s15, [r3, #32]
	me->mIMUoffsetData_.gyroZ  /= N_CALIBRATION_SAMPLES;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005834:	eddf 6a08 	vldr	s13, [pc, #32]	; 8005858 <_Z20taskIMUgetData_startP16taskIMUgetData_t+0x1a4>
 8005838:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24



	me->mLED_->write(GPIO_ST::LOW);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005846:	2100      	movs	r1, #0
 8005848:	4618      	mov	r0, r3
 800584a:	f7fc f883 	bl	8001954 <_ZN5STM324gpio5writeE7GPIO_ST>
}
 800584e:	bf00      	nop
 8005850:	3728      	adds	r7, #40	; 0x28
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	42c80000 	.word	0x42c80000

0800585c <_Z21taskIMUgetData_updateP16taskIMUgetData_t>:

void taskIMUgetData_update(taskIMUgetData_t *me)
{
 800585c:	b590      	push	{r4, r7, lr}
 800585e:	b095      	sub	sp, #84	; 0x54
 8005860:	af04      	add	r7, sp, #16
 8005862:	6078      	str	r0, [r7, #4]
	uint8_t dataForCni[LEN_IMU_CNI_DATA];
	IMUData imuData;

	me->mIMU_->save_data();
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	695a      	ldr	r2, [r3, #20]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4610      	mov	r0, r2
 8005872:	4798      	blx	r3
	me->mIMU_->read_data(&imuData);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3310      	adds	r3, #16
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f107 010c 	add.w	r1, r7, #12
 8005886:	4610      	mov	r0, r2
 8005888:	4798      	blx	r3

	// Se corrige con los offsets
	imuData.accelX -= me->mIMUoffsetData_.accelX;
 800588a:	ed97 7a07 	vldr	s14, [r7, #28]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005894:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005898:	edc7 7a07 	vstr	s15, [r7, #28]
	imuData.accelY -= me->mIMUoffsetData_.accelY;
 800589c:	ed97 7a08 	vldr	s14, [r7, #32]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80058a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058aa:	edc7 7a08 	vstr	s15, [r7, #32]
	imuData.accelZ -= me->mIMUoffsetData_.accelZ;
 80058ae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80058b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	imuData.gyroX  -= me->mIMUoffsetData_.gyroX;
 80058c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80058ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058ce:	edc7 7a04 	vstr	s15, [r7, #16]
	imuData.gyroY  -= me->mIMUoffsetData_.gyroY;
 80058d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80058dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058e0:	edc7 7a05 	vstr	s15, [r7, #20]
	imuData.gyroZ  -= me->mIMUoffsetData_.gyroZ;
 80058e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80058ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058f2:	edc7 7a06 	vstr	s15, [r7, #24]
	//imuData.accelZ += BIAS_ACCEL_Z;
// ================================================
#endif

	// Se le pasan las mediciones del sensor al attitude estimator
	attitudeEstimator_set_imu_data(imuData);
 80058f6:	466c      	mov	r4, sp
 80058f8:	f107 031c 	add.w	r3, r7, #28
 80058fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005900:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005904:	f107 030c 	add.w	r3, r7, #12
 8005908:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800590a:	f7fb fd69 	bl	80013e0 <_Z30attitudeEstimator_set_imu_data7IMUData>

	// Convertir los datos de la IMU en bytes
	make_imu_data_for_cni(imuData, dataForCni);
 800590e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005912:	9303      	str	r3, [sp, #12]
 8005914:	466c      	mov	r4, sp
 8005916:	f107 031c 	add.w	r3, r7, #28
 800591a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800591e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005922:	f107 030c 	add.w	r3, r7, #12
 8005926:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005928:	f000 f80c 	bl	8005944 <_ZL21make_imu_data_for_cni7IMUDataPh>

	// Actualizarlos en la CNI
	CNI_update_msg_content(me->mHandleMsg_, dataForCni, LEN_IMU_CNI_DATA);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005934:	2218      	movs	r2, #24
 8005936:	4618      	mov	r0, r3
 8005938:	f7fb fc06 	bl	8001148 <_Z22CNI_update_msg_contentmPhm>
}
 800593c:	bf00      	nop
 800593e:	3744      	adds	r7, #68	; 0x44
 8005940:	46bd      	mov	sp, r7
 8005942:	bd90      	pop	{r4, r7, pc}

08005944 <_ZL21make_imu_data_for_cni7IMUDataPh>:

static void make_imu_data_for_cni(IMUData imuData, uint8_t *dataForCni)
{
 8005944:	b084      	sub	sp, #16
 8005946:	b490      	push	{r4, r7}
 8005948:	af00      	add	r7, sp, #0
 800594a:	f107 0408 	add.w	r4, r7, #8
 800594e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005952:	69ba      	ldr	r2, [r7, #24]
	memcpy(dataForCni     , &imuData.accelX, 4);
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[4] , &imuData.accelY, 4);
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	3304      	adds	r3, #4
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[8] , &imuData.accelZ, 4);
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	3308      	adds	r3, #8
 8005964:	6a3a      	ldr	r2, [r7, #32]
 8005966:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[12], &imuData.gyroX , 4);
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	330c      	adds	r3, #12
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[16], &imuData.gyroY , 4);
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	3310      	adds	r3, #16
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[20], &imuData.gyroZ , 4);
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	3314      	adds	r3, #20
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	601a      	str	r2, [r3, #0]
}
 8005980:	bf00      	nop
 8005982:	46bd      	mov	sp, r7
 8005984:	bc90      	pop	{r4, r7}
 8005986:	b004      	add	sp, #16
 8005988:	4770      	bx	lr
	...

0800598c <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>:
 */

#include "taskWatchdog.h"

void taskWatchdog_constructor(taskWatchdog_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, IWDG_HandleTypeDef *hiwdg)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af02      	add	r7, sp, #8
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskWatchdog_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	490d      	ldr	r1, [pc, #52]	; (80059e0 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x54>)
 80059aa:	f000 fa47 	bl	8005e3c <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mHiwdg_ = hiwdg;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	615a      	str	r2, [r3, #20]

	me->mHiwdg_->Instance = IWDG;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	4a0a      	ldr	r2, [pc, #40]	; (80059e4 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x58>)
 80059ba:	601a      	str	r2, [r3, #0]
	me->mHiwdg_->Init.Prescaler = IWDG_PRESCALER_4;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	2200      	movs	r2, #0
 80059c2:	605a      	str	r2, [r3, #4]
	me->mHiwdg_->Init.Window = 4095;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80059cc:	60da      	str	r2, [r3, #12]
	me->mHiwdg_->Init.Reload = 9;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	2209      	movs	r2, #9
 80059d4:	609a      	str	r2, [r3, #8]
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	08005a03 	.word	0x08005a03
 80059e4:	40003000 	.word	0x40003000

080059e8 <_Z18taskWatchdog_startP14taskWatchdog_t>:
{
	timeTriggeredTask_destructor(&me->super);
}

void taskWatchdog_start(taskWatchdog_t *me)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Init(me->mHiwdg_);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f001 fe54 	bl	80076a2 <HAL_IWDG_Init>
}
 80059fa:	bf00      	nop
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <_Z19taskWatchdog_updateP14taskWatchdog_t>:

void taskWatchdog_update(taskWatchdog_t *me)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(me->mHiwdg_);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 fe96 	bl	8007740 <HAL_IWDG_Refresh>
}
 8005a14:	bf00      	nop
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a22:	f107 0310 	add.w	r3, r7, #16
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	605a      	str	r2, [r3, #4]
 8005a2c:	609a      	str	r2, [r3, #8]
 8005a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a30:	1d3b      	adds	r3, r7, #4
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	605a      	str	r2, [r3, #4]
 8005a38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005a3a:	4b1d      	ldr	r3, [pc, #116]	; (8005ab0 <MX_TIM5_Init+0x94>)
 8005a3c:	4a1d      	ldr	r2, [pc, #116]	; (8005ab4 <MX_TIM5_Init+0x98>)
 8005a3e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108-1;
 8005a40:	4b1b      	ldr	r3, [pc, #108]	; (8005ab0 <MX_TIM5_Init+0x94>)
 8005a42:	226b      	movs	r2, #107	; 0x6b
 8005a44:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a46:	4b1a      	ldr	r3, [pc, #104]	; (8005ab0 <MX_TIM5_Init+0x94>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8005a4c:	4b18      	ldr	r3, [pc, #96]	; (8005ab0 <MX_TIM5_Init+0x94>)
 8005a4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a52:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a54:	4b16      	ldr	r3, [pc, #88]	; (8005ab0 <MX_TIM5_Init+0x94>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a5a:	4b15      	ldr	r3, [pc, #84]	; (8005ab0 <MX_TIM5_Init+0x94>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005a60:	4813      	ldr	r0, [pc, #76]	; (8005ab0 <MX_TIM5_Init+0x94>)
 8005a62:	f003 fb59 	bl	8009118 <HAL_TIM_Base_Init>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005a6c:	f7fe ffb2 	bl	80049d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005a76:	f107 0310 	add.w	r3, r7, #16
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	480c      	ldr	r0, [pc, #48]	; (8005ab0 <MX_TIM5_Init+0x94>)
 8005a7e:	f003 fd97 	bl	80095b0 <HAL_TIM_ConfigClockSource>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005a88:	f7fe ffa4 	bl	80049d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005a94:	1d3b      	adds	r3, r7, #4
 8005a96:	4619      	mov	r1, r3
 8005a98:	4805      	ldr	r0, [pc, #20]	; (8005ab0 <MX_TIM5_Init+0x94>)
 8005a9a:	f004 f9a3 	bl	8009de4 <HAL_TIMEx_MasterConfigSynchronization>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005aa4:	f7fe ff96 	bl	80049d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005aa8:	bf00      	nop
 8005aaa:	3720      	adds	r7, #32
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	2000044c 	.word	0x2000044c
 8005ab4:	40000c00 	.word	0x40000c00

08005ab8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <HAL_TIM_Base_MspInit+0x44>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d113      	bne.n	8005af2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005aca:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <HAL_TIM_Base_MspInit+0x48>)
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	4a0c      	ldr	r2, [pc, #48]	; (8005b00 <HAL_TIM_Base_MspInit+0x48>)
 8005ad0:	f043 0308 	orr.w	r3, r3, #8
 8005ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <HAL_TIM_Base_MspInit+0x48>)
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	2032      	movs	r0, #50	; 0x32
 8005ae8:	f001 fa8f 	bl	800700a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005aec:	2032      	movs	r0, #50	; 0x32
 8005aee:	f001 faa8 	bl	8007042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005af2:	bf00      	nop
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40000c00 	.word	0x40000c00
 8005b00:	40023800 	.word	0x40023800

08005b04 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef>:
#include "CNI.h"

static timeTriggeredScheduler_t _instance;

static void timeTriggeredScheduler_tick(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
	_instance.mTicks_++;
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef+0x20>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	3301      	adds	r3, #1
 8005b12:	4a04      	ldr	r2, [pc, #16]	; (8005b24 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef+0x20>)
 8005b14:	6053      	str	r3, [r2, #4]
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000508 	.word	0x20000508

08005b28 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm>:

void timeTriggeredScheduler_constructor(TIM_HandleTypeDef *timer, uint32_t macroTick)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
	uint32_t i;

	_instance.mTimer_ = timer;
 8005b32:	4a11      	ldr	r2, [pc, #68]	; (8005b78 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6013      	str	r3, [r2, #0]

	for(i = 0; i < MAX_NUM_TASKS ; i++)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	e008      	b.n	8005b50 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x28>
	{
		_instance.mTaskList_[i] = 0;
 8005b3e:	4a0e      	ldr	r2, [pc, #56]	; (8005b78 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3302      	adds	r3, #2
 8005b44:	2100      	movs	r1, #0
 8005b46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i = 0; i < MAX_NUM_TASKS ; i++)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b13      	cmp	r3, #19
 8005b54:	d9f3      	bls.n	8005b3e <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x16>
	}

	_instance.mTicks_ = 0;
 8005b56:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	605a      	str	r2, [r3, #4]
	_instance.mMacroTick_ = macroTick;
 8005b5c:	4a06      	ldr	r2, [pc, #24]	; (8005b78 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6593      	str	r3, [r2, #88]	; 0x58
	_instance.mSyncExecuted_ = 0;
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 8005b6a:	bf00      	nop
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	20000508 	.word	0x20000508

08005b7c <_Z27timeTriggeredScheduler_initv>:

void timeTriggeredScheduler_init(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(_instance.mTimer_);
 8005b80:	4b08      	ldr	r3, [pc, #32]	; (8005ba4 <_Z27timeTriggeredScheduler_initv+0x28>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f003 fba3 	bl	80092d0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_RegisterCallback(_instance.mTimer_, HAL_TIM_PERIOD_ELAPSED_CB_ID, timeTriggeredScheduler_tick);
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <_Z27timeTriggeredScheduler_initv+0x28>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a06      	ldr	r2, [pc, #24]	; (8005ba8 <_Z27timeTriggeredScheduler_initv+0x2c>)
 8005b90:	210e      	movs	r1, #14
 8005b92:	4618      	mov	r0, r3
 8005b94:	f003 fe3a 	bl	800980c <HAL_TIM_RegisterCallback>

	_instance.mSyncExecuted_ = 0;
 8005b98:	4b02      	ldr	r3, [pc, #8]	; (8005ba4 <_Z27timeTriggeredScheduler_initv+0x28>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 8005ba0:	bf00      	nop
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	20000508 	.word	0x20000508
 8005ba8:	08005b05 	.word	0x08005b05

08005bac <_Z28timeTriggeredScheduler_startv>:

void timeTriggeredScheduler_start(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(_instance.mTimer_);
 8005bb0:	4b03      	ldr	r3, [pc, #12]	; (8005bc0 <_Z28timeTriggeredScheduler_startv+0x14>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f003 fb13 	bl	80091e0 <HAL_TIM_Base_Start_IT>
}
 8005bba:	bf00      	nop
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000508 	.word	0x20000508

08005bc4 <_Z31timeTriggeredScheduler_dispatchv>:
{
	HAL_TIM_Base_Stop_IT(_instance.mTimer_);
}

void timeTriggeredScheduler_dispatch(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
	uint8_t updateRequired = 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bce:	b672      	cpsid	i
}
 8005bd0:	bf00      	nop
	uint32_t i;
	timeTriggeredTask_t *task;

	__disable_irq();
	if(_instance.mTicks_ > 0)
 8005bd2:	4b49      	ldr	r3, [pc, #292]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	bf14      	ite	ne
 8005bda:	2301      	movne	r3, #1
 8005bdc:	2300      	moveq	r3, #0
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d020      	beq.n	8005c26 <_Z31timeTriggeredScheduler_dispatchv+0x62>
	{
		_instance.mTicks_--;
 8005be4:	4b44      	ldr	r3, [pc, #272]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	4a43      	ldr	r2, [pc, #268]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005bec:	6053      	str	r3, [r2, #4]
		updateRequired = 1;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	73fb      	strb	r3, [r7, #15]
#if !IS_MASTER
		if(_instance.mSyncExecuted_ == 1)
 8005bf2:	4b41      	ldr	r3, [pc, #260]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005bf4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	bf0c      	ite	eq
 8005bfe:	2301      	moveq	r3, #1
 8005c00:	2300      	movne	r3, #0
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00e      	beq.n	8005c26 <_Z31timeTriggeredScheduler_dispatchv+0x62>
		{
			_instance.mSyncExecuted_ = 0;
 8005c08:	4b3b      	ldr	r3, [pc, #236]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			__HAL_TIM_SET_AUTORELOAD(_instance.mTimer_, _instance.mMacroTick_);
 8005c10:	4b39      	ldr	r3, [pc, #228]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a38      	ldr	r2, [pc, #224]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005c18:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c1c:	4b36      	ldr	r3, [pc, #216]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a35      	ldr	r2, [pc, #212]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005c22:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c24:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8005c26:	b662      	cpsie	i
}
 8005c28:	bf00      	nop
#endif
	}

	__enable_irq();

	while(updateRequired)
 8005c2a:	e05d      	b.n	8005ce8 <_Z31timeTriggeredScheduler_dispatchv+0x124>
	{
		for(i = 0; i < MAX_NUM_TASKS; i++)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60bb      	str	r3, [r7, #8]
 8005c30:	e026      	b.n	8005c80 <_Z31timeTriggeredScheduler_dispatchv+0xbc>
		{
			if((task = _instance.mTaskList_[i]))
 8005c32:	4a31      	ldr	r2, [pc, #196]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	3302      	adds	r3, #2
 8005c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c3c:	607b      	str	r3, [r7, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	bf14      	ite	ne
 8005c44:	2301      	movne	r3, #1
 8005c46:	2300      	moveq	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d015      	beq.n	8005c7a <_Z31timeTriggeredScheduler_dispatchv+0xb6>
			{
				//if( (--(me->mTaskList_[i]->mDelayTicks_)) == 0 )
				if( (--(task->mDelayTicks_)) == 0 )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	1e5a      	subs	r2, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	605a      	str	r2, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bf0c      	ite	eq
 8005c60:	2301      	moveq	r3, #1
 8005c62:	2300      	movne	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d007      	beq.n	8005c7a <_Z31timeTriggeredScheduler_dispatchv+0xb6>
				{
					//timeTriggeredTask_update((timeTriggeredTask_t*)(me->mTaskList_[i]));
					(*(task->mTaskHandler_))(task);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	4798      	blx	r3
					//me->mTaskList_[i]->mDelayTicks_ = me->mTaskList_[i]->mPeriodTicks_;
					task->mDelayTicks_ = task->mPeriodTicks_;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	605a      	str	r2, [r3, #4]
		for(i = 0; i < MAX_NUM_TASKS; i++)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	60bb      	str	r3, [r7, #8]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b13      	cmp	r3, #19
 8005c84:	d9d5      	bls.n	8005c32 <_Z31timeTriggeredScheduler_dispatchv+0x6e>
  __ASM volatile ("cpsid i" : : : "memory");
 8005c86:	b672      	cpsid	i
}
 8005c88:	bf00      	nop
			}
		}

		__disable_irq();

		if(_instance.mTicks_ > 0)
 8005c8a:	4b1b      	ldr	r3, [pc, #108]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	bf14      	ite	ne
 8005c92:	2301      	movne	r3, #1
 8005c94:	2300      	moveq	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d021      	beq.n	8005ce0 <_Z31timeTriggeredScheduler_dispatchv+0x11c>
		{
			_instance.mTicks_--;
 8005c9c:	4b16      	ldr	r3, [pc, #88]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	4a15      	ldr	r2, [pc, #84]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005ca4:	6053      	str	r3, [r2, #4]
			updateRequired = 1;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	73fb      	strb	r3, [r7, #15]
#if !IS_MASTER
			if(_instance.mSyncExecuted_ == 1)
 8005caa:	4b13      	ldr	r3, [pc, #76]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005cac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	bf0c      	ite	eq
 8005cb6:	2301      	moveq	r3, #1
 8005cb8:	2300      	movne	r3, #0
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d011      	beq.n	8005ce4 <_Z31timeTriggeredScheduler_dispatchv+0x120>
			{
				_instance.mSyncExecuted_ = 0;
 8005cc0:	4b0d      	ldr	r3, [pc, #52]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				__HAL_TIM_SET_AUTORELOAD(_instance.mTimer_, _instance.mMacroTick_);
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a0a      	ldr	r2, [pc, #40]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005cd0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005cd2:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cd4:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a07      	ldr	r2, [pc, #28]	; (8005cf8 <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005cda:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005cdc:	60da      	str	r2, [r3, #12]
 8005cde:	e001      	b.n	8005ce4 <_Z31timeTriggeredScheduler_dispatchv+0x120>
			}
#endif
		}
		else
		{
			updateRequired = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ce4:	b662      	cpsie	i
}
 8005ce6:	bf00      	nop
	while(updateRequired)
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d19e      	bne.n	8005c2c <_Z31timeTriggeredScheduler_dispatchv+0x68>
		}

		__enable_irq();
	}
	__asm__("wfi");
 8005cee:	bf30      	wfi
}
 8005cf0:	bf00      	nop
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20000508 	.word	0x20000508

08005cfc <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>:

TTschStatus_t timeTriggeredScheduler_add_task(timeTriggeredTask_t *task)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]

	while( (_instance.mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 8005d08:	e002      	b.n	8005d10 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x14>
	{
		i++;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	60fb      	str	r3, [r7, #12]
	while( (_instance.mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 8005d10:	4a0d      	ldr	r2, [pc, #52]	; (8005d48 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x4c>)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3302      	adds	r3, #2
 8005d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x28>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b13      	cmp	r3, #19
 8005d22:	d9f2      	bls.n	8005d0a <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0xe>
	}

	if(i == MAX_NUM_TASKS)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b14      	cmp	r3, #20
 8005d28:	d101      	bne.n	8005d2e <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x32>
	{
		return TTsch_ERROR_MAX_TASKS_REACHED;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e006      	b.n	8005d3c <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x40>
	}

	_instance.mTaskList_[i] = task;
 8005d2e:	4906      	ldr	r1, [pc, #24]	; (8005d48 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x4c>)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3302      	adds	r3, #2
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return TTsch_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	20000508 	.word	0x20000508

08005d4c <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm>:

void taskTimeTriggeredSync_constructor(taskTimeTriggeredSync_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg, uint32_t expectedTimestamp, uint32_t delaySync)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskTimeTriggeredSync_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	9301      	str	r3, [sp, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	4907      	ldr	r1, [pc, #28]	; (8005d88 <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm+0x3c>)
 8005d6a:	f000 f867 	bl	8005e3c <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mHandleMsg_ = handleMsg;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	69fa      	ldr	r2, [r7, #28]
 8005d72:	615a      	str	r2, [r3, #20]
	me->mExpectedTimestamp_ = expectedTimestamp;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a3a      	ldr	r2, [r7, #32]
 8005d78:	619a      	str	r2, [r3, #24]
	me->mDelaySync_ = delaySync;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d7e:	61da      	str	r2, [r3, #28]
}
 8005d80:	bf00      	nop
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	08005d8d 	.word	0x08005d8d

08005d8c <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t>:
{
	// Por ahora no hace nada
}

void taskTimeTriggeredSync_update(taskTimeTriggeredSync_t *me)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
#if !IS_MASTER
	uint32_t timestamp;
	uint32_t deltaTime;

	// Espero a que me llegue el mensaje de sincronización
	if( CNI_receive_msg(me->mHandleMsg_) == CNI_OK )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fb f93f 	bl	800101c <_Z15CNI_receive_msgm>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	bf0c      	ite	eq
 8005da4:	2301      	moveq	r3, #1
 8005da6:	2300      	movne	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d040      	beq.n	8005e30 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xa4>
	{
		// Tomo un timestamp del mensaje recibido
		timestamp = __HAL_TIM_GET_COUNTER(_instance.mTimer_);
 8005dae:	4b22      	ldr	r3, [pc, #136]	; (8005e38 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	60bb      	str	r3, [r7, #8]

		// Comparo ese valor con el valor esperado
		if(timestamp > me->mExpectedTimestamp_)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d919      	bls.n	8005df6 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x6a>
		{
			deltaTime = timestamp - me->mExpectedTimestamp_;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	60fb      	str	r3, [r7, #12]
			if(deltaTime > MAX_DELTA_TIME_MICRO_TICKS)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b64      	cmp	r3, #100	; 0x64
 8005dd0:	d901      	bls.n	8005dd6 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x4a>
			{
				deltaTime = MAX_DELTA_TIME_MICRO_TICKS;
 8005dd2:	2364      	movs	r3, #100	; 0x64
 8005dd4:	60fb      	str	r3, [r7, #12]
			}
			// Actualizo el timer
			__HAL_TIM_SET_AUTORELOAD(_instance.mTimer_, _instance.mMacroTick_ + deltaTime);
 8005dd6:	4b18      	ldr	r3, [pc, #96]	; (8005e38 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8005dd8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8005dda:	4b17      	ldr	r3, [pc, #92]	; (8005e38 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	440a      	add	r2, r1
 8005de4:	62da      	str	r2, [r3, #44]	; 0x2c
 8005de6:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8005de8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8005dea:	4b13      	ldr	r3, [pc, #76]	; (8005e38 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	440a      	add	r2, r1
 8005df2:	60da      	str	r2, [r3, #12]
 8005df4:	e018      	b.n	8005e28 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x9c>
		}
		else
		{
			deltaTime = me->mExpectedTimestamp_ - timestamp;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	60fb      	str	r3, [r7, #12]
			if(deltaTime > MAX_DELTA_TIME_MICRO_TICKS)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b64      	cmp	r3, #100	; 0x64
 8005e04:	d901      	bls.n	8005e0a <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x7e>
			{
				deltaTime = MAX_DELTA_TIME_MICRO_TICKS;
 8005e06:	2364      	movs	r3, #100	; 0x64
 8005e08:	60fb      	str	r3, [r7, #12]
			}
			// Actualizo el timer
			__HAL_TIM_SET_AUTORELOAD(_instance.mTimer_, _instance.mMacroTick_ - deltaTime);
 8005e0a:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8005e0c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8005e0e:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	1a8a      	subs	r2, r1, r2
 8005e18:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e1a:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8005e1c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8005e1e:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	1a8a      	subs	r2, r1, r2
 8005e26:	60da      	str	r2, [r3, #12]
		}

		// Le aviso al scheduler que en el próximo tick, vuelva a dejar el timer como estaba antes
		_instance.mSyncExecuted_ = 1;
 8005e28:	4b03      	ldr	r3, [pc, #12]	; (8005e38 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	// Espero un rato
	while(__HAL_TIM_GET_COUNTER(_instance.mTimer_) < me->mDelaySync_);
	// Envío el mensaje de sync
	CNI_send_msg(me->mHandleMsg_);
#endif
}
 8005e30:	bf00      	nop
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20000508 	.word	0x20000508

08005e3c <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>:
 */

#include "timeTriggeredTask.h"

void timeTriggeredTask_constructor(timeTriggeredTask_t *me, taskHandler_t taskHandler, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
	me->mTaskHandler_ = taskHandler;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	601a      	str	r2, [r3, #0]

	me->mDelayTicks_ = delayTicks + 1;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	605a      	str	r2, [r3, #4]
	me->mPeriodTicks_ = periodTicks;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	609a      	str	r2, [r3, #8]
	me->mWcetMicroSeconds_ = wcetMicroSeconds;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	60da      	str	r2, [r3, #12]
	me->mBcetMicroSeconds_ = bcetMicroSeconds;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	611a      	str	r2, [r3, #16]
}
 8005e6a:	bf00      	nop
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
	...

08005e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005eb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005e7c:	480d      	ldr	r0, [pc, #52]	; (8005eb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005e7e:	490e      	ldr	r1, [pc, #56]	; (8005eb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005e80:	4a0e      	ldr	r2, [pc, #56]	; (8005ebc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e84:	e002      	b.n	8005e8c <LoopCopyDataInit>

08005e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e8a:	3304      	adds	r3, #4

08005e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e90:	d3f9      	bcc.n	8005e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e92:	4a0b      	ldr	r2, [pc, #44]	; (8005ec0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005e94:	4c0b      	ldr	r4, [pc, #44]	; (8005ec4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e98:	e001      	b.n	8005e9e <LoopFillZerobss>

08005e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e9c:	3204      	adds	r2, #4

08005e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ea0:	d3fb      	bcc.n	8005e9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005ea2:	f7ff fa69 	bl	8005378 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ea6:	f004 fc09 	bl	800a6bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005eaa:	f7fe fcfd 	bl	80048a8 <main>
  bx  lr    
 8005eae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005eb0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005eb8:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 8005ebc:	0800a948 	.word	0x0800a948
  ldr r2, =_sbss
 8005ec0:	200002bc 	.word	0x200002bc
  ldr r4, =_ebss
 8005ec4:	200006b8 	.word	0x200006b8

08005ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ec8:	e7fe      	b.n	8005ec8 <ADC_IRQHandler>

08005eca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ece:	2003      	movs	r0, #3
 8005ed0:	f001 f890 	bl	8006ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ed4:	200f      	movs	r0, #15
 8005ed6:	f000 f805 	bl	8005ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005eda:	f7ff f95f 	bl	800519c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005eec:	4b12      	ldr	r3, [pc, #72]	; (8005f38 <HAL_InitTick+0x54>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	4b12      	ldr	r3, [pc, #72]	; (8005f3c <HAL_InitTick+0x58>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f02:	4618      	mov	r0, r3
 8005f04:	f001 f8b9 	bl	800707a <HAL_SYSTICK_Config>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e00e      	b.n	8005f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b0f      	cmp	r3, #15
 8005f16:	d80a      	bhi.n	8005f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f18:	2200      	movs	r2, #0
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f20:	f001 f873 	bl	800700a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f24:	4a06      	ldr	r2, [pc, #24]	; (8005f40 <HAL_InitTick+0x5c>)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e000      	b.n	8005f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	20000260 	.word	0x20000260
 8005f3c:	20000268 	.word	0x20000268
 8005f40:	20000264 	.word	0x20000264

08005f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f48:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <HAL_IncTick+0x20>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <HAL_IncTick+0x24>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4413      	add	r3, r2
 8005f54:	4a04      	ldr	r2, [pc, #16]	; (8005f68 <HAL_IncTick+0x24>)
 8005f56:	6013      	str	r3, [r2, #0]
}
 8005f58:	bf00      	nop
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	20000268 	.word	0x20000268
 8005f68:	20000568 	.word	0x20000568

08005f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8005f70:	4b03      	ldr	r3, [pc, #12]	; (8005f80 <HAL_GetTick+0x14>)
 8005f72:	681b      	ldr	r3, [r3, #0]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	20000568 	.word	0x20000568

08005f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f8c:	f7ff ffee 	bl	8005f6c <HAL_GetTick>
 8005f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f9c:	d005      	beq.n	8005faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f9e:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <HAL_Delay+0x44>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005faa:	bf00      	nop
 8005fac:	f7ff ffde 	bl	8005f6c <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d8f7      	bhi.n	8005fac <HAL_Delay+0x28>
  {
  }
}
 8005fbc:	bf00      	nop
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000268 	.word	0x20000268

08005fcc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e0ed      	b.n	80061ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fb fb48 	bl	8001680 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0201 	orr.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006000:	f7ff ffb4 	bl	8005f6c <HAL_GetTick>
 8006004:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006006:	e012      	b.n	800602e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006008:	f7ff ffb0 	bl	8005f6c <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b0a      	cmp	r3, #10
 8006014:	d90b      	bls.n	800602e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2205      	movs	r2, #5
 8006026:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e0c5      	b.n	80061ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0e5      	beq.n	8006008 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0202 	bic.w	r2, r2, #2
 800604a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800604c:	f7ff ff8e 	bl	8005f6c <HAL_GetTick>
 8006050:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006052:	e012      	b.n	800607a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006054:	f7ff ff8a 	bl	8005f6c <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b0a      	cmp	r3, #10
 8006060:	d90b      	bls.n	800607a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2205      	movs	r2, #5
 8006072:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e09f      	b.n	80061ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e5      	bne.n	8006054 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	7e1b      	ldrb	r3, [r3, #24]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d108      	bne.n	80060a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	e007      	b.n	80060b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	7e5b      	ldrb	r3, [r3, #25]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d108      	bne.n	80060cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	e007      	b.n	80060dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	7e9b      	ldrb	r3, [r3, #26]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d108      	bne.n	80060f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0220 	orr.w	r2, r2, #32
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	e007      	b.n	8006106 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0220 	bic.w	r2, r2, #32
 8006104:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	7edb      	ldrb	r3, [r3, #27]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d108      	bne.n	8006120 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0210 	bic.w	r2, r2, #16
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	e007      	b.n	8006130 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0210 	orr.w	r2, r2, #16
 800612e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	7f1b      	ldrb	r3, [r3, #28]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d108      	bne.n	800614a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0208 	orr.w	r2, r2, #8
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	e007      	b.n	800615a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0208 	bic.w	r2, r2, #8
 8006158:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	7f5b      	ldrb	r3, [r3, #29]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d108      	bne.n	8006174 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f042 0204 	orr.w	r2, r2, #4
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	e007      	b.n	8006184 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0204 	bic.w	r2, r2, #4
 8006182:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	ea42 0103 	orr.w	r1, r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	1e5a      	subs	r2, r3, #1
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061da:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80061dc:	7cfb      	ldrb	r3, [r7, #19]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d003      	beq.n	80061ea <HAL_CAN_ConfigFilter+0x26>
 80061e2:	7cfb      	ldrb	r3, [r7, #19]
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	f040 80be 	bne.w	8006366 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80061ea:	4b65      	ldr	r3, [pc, #404]	; (8006380 <HAL_CAN_ConfigFilter+0x1bc>)
 80061ec:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061f4:	f043 0201 	orr.w	r2, r3, #1
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006204:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	431a      	orrs	r2, r3
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	2201      	movs	r2, #1
 800622c:	fa02 f303 	lsl.w	r3, r2, r3
 8006230:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	43db      	mvns	r3, r3
 800623c:	401a      	ands	r2, r3
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d123      	bne.n	8006294 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	43db      	mvns	r3, r3
 8006256:	401a      	ands	r2, r3
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800626e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	3248      	adds	r2, #72	; 0x48
 8006274:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006288:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800628a:	6979      	ldr	r1, [r7, #20]
 800628c:	3348      	adds	r3, #72	; 0x48
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	440b      	add	r3, r1
 8006292:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d122      	bne.n	80062e2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	431a      	orrs	r2, r3
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80062bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	3248      	adds	r2, #72	; 0x48
 80062c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80062d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80062d8:	6979      	ldr	r1, [r7, #20]
 80062da:	3348      	adds	r3, #72	; 0x48
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	440b      	add	r3, r1
 80062e0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d109      	bne.n	80062fe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	43db      	mvns	r3, r3
 80062f4:	401a      	ands	r2, r3
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80062fc:	e007      	b.n	800630e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	431a      	orrs	r2, r3
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d109      	bne.n	800632a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	43db      	mvns	r3, r3
 8006320:	401a      	ands	r2, r3
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006328:	e007      	b.n	800633a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	431a      	orrs	r2, r3
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d107      	bne.n	8006352 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	431a      	orrs	r2, r3
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006358:	f023 0201 	bic.w	r2, r3, #1
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	e006      	b.n	8006374 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
  }
}
 8006374:	4618      	mov	r0, r3
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	40006400 	.word	0x40006400

08006384 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	d12e      	bne.n	80063f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0201 	bic.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063b0:	f7ff fddc 	bl	8005f6c <HAL_GetTick>
 80063b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80063b6:	e012      	b.n	80063de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80063b8:	f7ff fdd8 	bl	8005f6c <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b0a      	cmp	r3, #10
 80063c4:	d90b      	bls.n	80063de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2205      	movs	r2, #5
 80063d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e012      	b.n	8006404 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e5      	bne.n	80063b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	e006      	b.n	8006404 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
  }
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800640c:	b480      	push	{r7}
 800640e:	b089      	sub	sp, #36	; 0x24
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006420:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800642a:	7ffb      	ldrb	r3, [r7, #31]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d003      	beq.n	8006438 <HAL_CAN_AddTxMessage+0x2c>
 8006430:	7ffb      	ldrb	r3, [r7, #31]
 8006432:	2b02      	cmp	r3, #2
 8006434:	f040 80ad 	bne.w	8006592 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10a      	bne.n	8006458 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006448:	2b00      	cmp	r3, #0
 800644a:	d105      	bne.n	8006458 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 8095 	beq.w	8006582 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	0e1b      	lsrs	r3, r3, #24
 800645c:	f003 0303 	and.w	r3, r3, #3
 8006460:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006462:	2201      	movs	r2, #1
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	409a      	lsls	r2, r3
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10d      	bne.n	8006490 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800647e:	68f9      	ldr	r1, [r7, #12]
 8006480:	6809      	ldr	r1, [r1, #0]
 8006482:	431a      	orrs	r2, r3
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	3318      	adds	r3, #24
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	440b      	add	r3, r1
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	e00f      	b.n	80064b0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800649a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80064a0:	68f9      	ldr	r1, [r7, #12]
 80064a2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80064a4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	3318      	adds	r3, #24
 80064aa:	011b      	lsls	r3, r3, #4
 80064ac:	440b      	add	r3, r1
 80064ae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6819      	ldr	r1, [r3, #0]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	3318      	adds	r3, #24
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	440b      	add	r3, r1
 80064c0:	3304      	adds	r3, #4
 80064c2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	7d1b      	ldrb	r3, [r3, #20]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d111      	bne.n	80064f0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	3318      	adds	r3, #24
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	4413      	add	r3, r2
 80064d8:	3304      	adds	r3, #4
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	6811      	ldr	r1, [r2, #0]
 80064e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	3318      	adds	r3, #24
 80064e8:	011b      	lsls	r3, r3, #4
 80064ea:	440b      	add	r3, r1
 80064ec:	3304      	adds	r3, #4
 80064ee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3307      	adds	r3, #7
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	061a      	lsls	r2, r3, #24
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3306      	adds	r3, #6
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	041b      	lsls	r3, r3, #16
 8006500:	431a      	orrs	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3305      	adds	r3, #5
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	021b      	lsls	r3, r3, #8
 800650a:	4313      	orrs	r3, r2
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	3204      	adds	r2, #4
 8006510:	7812      	ldrb	r2, [r2, #0]
 8006512:	4610      	mov	r0, r2
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	6811      	ldr	r1, [r2, #0]
 8006518:	ea43 0200 	orr.w	r2, r3, r0
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	440b      	add	r3, r1
 8006522:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006526:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3303      	adds	r3, #3
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	061a      	lsls	r2, r3, #24
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3302      	adds	r3, #2
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	041b      	lsls	r3, r3, #16
 8006538:	431a      	orrs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3301      	adds	r3, #1
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	021b      	lsls	r3, r3, #8
 8006542:	4313      	orrs	r3, r2
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	7812      	ldrb	r2, [r2, #0]
 8006548:	4610      	mov	r0, r2
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	6811      	ldr	r1, [r2, #0]
 800654e:	ea43 0200 	orr.w	r2, r3, r0
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	440b      	add	r3, r1
 8006558:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800655c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	3318      	adds	r3, #24
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	4413      	add	r3, r2
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	6811      	ldr	r1, [r2, #0]
 8006570:	f043 0201 	orr.w	r2, r3, #1
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	3318      	adds	r3, #24
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	440b      	add	r3, r1
 800657c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	e00e      	b.n	80065a0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e006      	b.n	80065a0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
  }
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3724      	adds	r7, #36	; 0x24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065bc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d002      	beq.n	80065ca <HAL_CAN_AbortTxRequest+0x1e>
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d128      	bne.n	800661c <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d007      	beq.n	80065e4 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065e2:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d007      	beq.n	80065fe <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065fc:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d007      	beq.n	8006618 <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006616:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	e006      	b.n	800662a <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
  }
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8006636:	b480      	push	{r7}
 8006638:	b085      	sub	sp, #20
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006648:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800664a:	7afb      	ldrb	r3, [r7, #11]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d002      	beq.n	8006656 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006650:	7afb      	ldrb	r3, [r7, #11]
 8006652:	2b02      	cmp	r3, #2
 8006654:	d11d      	bne.n	8006692 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3301      	adds	r3, #1
 8006668:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3301      	adds	r3, #1
 800667c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3301      	adds	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8006692:	68fb      	ldr	r3, [r7, #12]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066b4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d003      	beq.n	80066c4 <HAL_CAN_GetRxMessage+0x24>
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	f040 80f3 	bne.w	80068aa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10e      	bne.n	80066e8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f003 0303 	and.w	r3, r3, #3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d116      	bne.n	8006706 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0e7      	b.n	80068b8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d107      	bne.n	8006706 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e0d8      	b.n	80068b8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	331b      	adds	r3, #27
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	4413      	add	r3, r2
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0204 	and.w	r2, r3, #4
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10c      	bne.n	800673e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	331b      	adds	r3, #27
 800672c:	011b      	lsls	r3, r3, #4
 800672e:	4413      	add	r3, r2
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	0d5b      	lsrs	r3, r3, #21
 8006734:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	e00b      	b.n	8006756 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	331b      	adds	r3, #27
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	4413      	add	r3, r2
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	08db      	lsrs	r3, r3, #3
 800674e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	331b      	adds	r3, #27
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	4413      	add	r3, r2
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0202 	and.w	r2, r3, #2
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	331b      	adds	r3, #27
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	4413      	add	r3, r2
 8006778:	3304      	adds	r3, #4
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 020f 	and.w	r2, r3, #15
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	331b      	adds	r3, #27
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	4413      	add	r3, r2
 8006790:	3304      	adds	r3, #4
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	0a1b      	lsrs	r3, r3, #8
 8006796:	b2da      	uxtb	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	331b      	adds	r3, #27
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	4413      	add	r3, r2
 80067a8:	3304      	adds	r3, #4
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	0c1b      	lsrs	r3, r3, #16
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	4413      	add	r3, r2
 80067be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	0a1a      	lsrs	r2, r3, #8
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	3301      	adds	r3, #1
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	0c1a      	lsrs	r2, r3, #16
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	3302      	adds	r3, #2
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	4413      	add	r3, r2
 8006808:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	0e1a      	lsrs	r2, r3, #24
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	3303      	adds	r3, #3
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	4413      	add	r3, r2
 8006822:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	3304      	adds	r3, #4
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	4413      	add	r3, r2
 800683a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	0a1a      	lsrs	r2, r3, #8
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	3305      	adds	r3, #5
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	011b      	lsls	r3, r3, #4
 8006852:	4413      	add	r3, r2
 8006854:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	0c1a      	lsrs	r2, r3, #16
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	3306      	adds	r3, #6
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	4413      	add	r3, r2
 800686e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	0e1a      	lsrs	r2, r3, #24
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	3307      	adds	r3, #7
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d108      	bne.n	8006896 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0220 	orr.w	r2, r2, #32
 8006892:	60da      	str	r2, [r3, #12]
 8006894:	e007      	b.n	80068a6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f042 0220 	orr.w	r2, r2, #32
 80068a4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	e006      	b.n	80068b8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
  }
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	371c      	adds	r7, #28
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068d8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80068da:	7afb      	ldrb	r3, [r7, #11]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d002      	beq.n	80068e6 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80068e0:	7afb      	ldrb	r3, [r7, #11]
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d10f      	bne.n	8006906 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d106      	bne.n	80068fa <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	e005      	b.n	8006906 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8006906:	68fb      	ldr	r3, [r7, #12]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006924:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006926:	7bfb      	ldrb	r3, [r7, #15]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d002      	beq.n	8006932 <HAL_CAN_ActivateNotification+0x1e>
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	2b02      	cmp	r3, #2
 8006930:	d109      	bne.n	8006946 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6959      	ldr	r1, [r3, #20]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	e006      	b.n	8006954 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
  }
}
 8006954:	4618      	mov	r0, r3
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006970:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d002      	beq.n	800697e <HAL_CAN_DeactivateNotification+0x1e>
 8006978:	7bfb      	ldrb	r3, [r7, #15]
 800697a:	2b02      	cmp	r3, #2
 800697c:	d10a      	bne.n	8006994 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6959      	ldr	r1, [r3, #20]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	43da      	mvns	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	400a      	ands	r2, r1
 800698e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	e006      	b.n	80069a2 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
  }
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b08a      	sub	sp, #40	; 0x28
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d07c      	beq.n	8006aee <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d023      	beq.n	8006a46 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2201      	movs	r2, #1
 8006a04:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f983 	bl	8006d1c <HAL_CAN_TxMailbox0CompleteCallback>
 8006a16:	e016      	b.n	8006a46 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	f003 0304 	and.w	r3, r3, #4
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d004      	beq.n	8006a2c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2a:	e00c      	b.n	8006a46 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d004      	beq.n	8006a40 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3e:	e002      	b.n	8006a46 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f989 	bl	8006d58 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d024      	beq.n	8006a9a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d003      	beq.n	8006a6c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f963 	bl	8006d30 <HAL_CAN_TxMailbox1CompleteCallback>
 8006a6a:	e016      	b.n	8006a9a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d004      	beq.n	8006a80 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7e:	e00c      	b.n	8006a9a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d004      	beq.n	8006a94 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
 8006a92:	e002      	b.n	8006a9a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f969 	bl	8006d6c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d024      	beq.n	8006aee <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006aac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f943 	bl	8006d44 <HAL_CAN_TxMailbox2CompleteCallback>
 8006abe:	e016      	b.n	8006aee <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d004      	beq.n	8006ad4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad2:	e00c      	b.n	8006aee <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae6:	e002      	b.n	8006aee <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f949 	bl	8006d80 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	f003 0308 	and.w	r3, r3, #8
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00c      	beq.n	8006b12 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f003 0310 	and.w	r3, r3, #16
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d007      	beq.n	8006b12 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2210      	movs	r2, #16
 8006b10:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00b      	beq.n	8006b34 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f003 0308 	and.w	r3, r3, #8
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d006      	beq.n	8006b34 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2208      	movs	r2, #8
 8006b2c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f930 	bl	8006d94 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d009      	beq.n	8006b52 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f003 0303 	and.w	r3, r3, #3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7fe f93b 	bl	8004dc8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00c      	beq.n	8006b76 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f003 0310 	and.w	r3, r3, #16
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d007      	beq.n	8006b76 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2210      	movs	r2, #16
 8006b74:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	f003 0320 	and.w	r3, r3, #32
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00b      	beq.n	8006b98 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f003 0308 	and.w	r3, r3, #8
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d006      	beq.n	8006b98 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2208      	movs	r2, #8
 8006b90:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f912 	bl	8006dbc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	f003 0310 	and.w	r3, r3, #16
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f8f9 	bl	8006da8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00b      	beq.n	8006bd8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d006      	beq.n	8006bd8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2210      	movs	r2, #16
 8006bd0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f8fc 	bl	8006dd0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00b      	beq.n	8006bfa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	f003 0308 	and.w	r3, r3, #8
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d006      	beq.n	8006bfa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f8f5 	bl	8006de4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d07b      	beq.n	8006cfc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f003 0304 	and.w	r3, r3, #4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d072      	beq.n	8006cf4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d008      	beq.n	8006c2a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	f043 0301 	orr.w	r3, r3, #1
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d008      	beq.n	8006c46 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	f043 0302 	orr.w	r3, r3, #2
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d008      	beq.n	8006c62 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	f043 0304 	orr.w	r3, r3, #4
 8006c60:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d043      	beq.n	8006cf4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d03e      	beq.n	8006cf4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c7c:	2b60      	cmp	r3, #96	; 0x60
 8006c7e:	d02b      	beq.n	8006cd8 <HAL_CAN_IRQHandler+0x32a>
 8006c80:	2b60      	cmp	r3, #96	; 0x60
 8006c82:	d82e      	bhi.n	8006ce2 <HAL_CAN_IRQHandler+0x334>
 8006c84:	2b50      	cmp	r3, #80	; 0x50
 8006c86:	d022      	beq.n	8006cce <HAL_CAN_IRQHandler+0x320>
 8006c88:	2b50      	cmp	r3, #80	; 0x50
 8006c8a:	d82a      	bhi.n	8006ce2 <HAL_CAN_IRQHandler+0x334>
 8006c8c:	2b40      	cmp	r3, #64	; 0x40
 8006c8e:	d019      	beq.n	8006cc4 <HAL_CAN_IRQHandler+0x316>
 8006c90:	2b40      	cmp	r3, #64	; 0x40
 8006c92:	d826      	bhi.n	8006ce2 <HAL_CAN_IRQHandler+0x334>
 8006c94:	2b30      	cmp	r3, #48	; 0x30
 8006c96:	d010      	beq.n	8006cba <HAL_CAN_IRQHandler+0x30c>
 8006c98:	2b30      	cmp	r3, #48	; 0x30
 8006c9a:	d822      	bhi.n	8006ce2 <HAL_CAN_IRQHandler+0x334>
 8006c9c:	2b10      	cmp	r3, #16
 8006c9e:	d002      	beq.n	8006ca6 <HAL_CAN_IRQHandler+0x2f8>
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d005      	beq.n	8006cb0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006ca4:	e01d      	b.n	8006ce2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	f043 0308 	orr.w	r3, r3, #8
 8006cac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cae:	e019      	b.n	8006ce4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	f043 0310 	orr.w	r3, r3, #16
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cb8:	e014      	b.n	8006ce4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	f043 0320 	orr.w	r3, r3, #32
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cc2:	e00f      	b.n	8006ce4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006ccc:	e00a      	b.n	8006ce4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cd6:	e005      	b.n	8006ce4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006ce0:	e000      	b.n	8006ce4 <HAL_CAN_IRQHandler+0x336>
            break;
 8006ce2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699a      	ldr	r2, [r3, #24]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006cf2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2204      	movs	r2, #4
 8006cfa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d008      	beq.n	8006d14 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f872 	bl	8006df8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006d14:	bf00      	nop
 8006d16:	3728      	adds	r7, #40	; 0x28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e1c:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <__NVIC_SetPriorityGrouping+0x40>)
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e28:	4013      	ands	r3, r2
 8006e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006e34:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <__NVIC_SetPriorityGrouping+0x44>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e3a:	4a04      	ldr	r2, [pc, #16]	; (8006e4c <__NVIC_SetPriorityGrouping+0x40>)
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	60d3      	str	r3, [r2, #12]
}
 8006e40:	bf00      	nop
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	e000ed00 	.word	0xe000ed00
 8006e50:	05fa0000 	.word	0x05fa0000

08006e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e58:	4b04      	ldr	r3, [pc, #16]	; (8006e6c <__NVIC_GetPriorityGrouping+0x18>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	0a1b      	lsrs	r3, r3, #8
 8006e5e:	f003 0307 	and.w	r3, r3, #7
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	e000ed00 	.word	0xe000ed00

08006e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	db0b      	blt.n	8006e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	f003 021f 	and.w	r2, r3, #31
 8006e88:	4907      	ldr	r1, [pc, #28]	; (8006ea8 <__NVIC_EnableIRQ+0x38>)
 8006e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e8e:	095b      	lsrs	r3, r3, #5
 8006e90:	2001      	movs	r0, #1
 8006e92:	fa00 f202 	lsl.w	r2, r0, r2
 8006e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	e000e100 	.word	0xe000e100

08006eac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	db12      	blt.n	8006ee4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	f003 021f 	and.w	r2, r3, #31
 8006ec4:	490a      	ldr	r1, [pc, #40]	; (8006ef0 <__NVIC_DisableIRQ+0x44>)
 8006ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eca:	095b      	lsrs	r3, r3, #5
 8006ecc:	2001      	movs	r0, #1
 8006ece:	fa00 f202 	lsl.w	r2, r0, r2
 8006ed2:	3320      	adds	r3, #32
 8006ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006ed8:	f3bf 8f4f 	dsb	sy
}
 8006edc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006ede:	f3bf 8f6f 	isb	sy
}
 8006ee2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	e000e100 	.word	0xe000e100

08006ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	6039      	str	r1, [r7, #0]
 8006efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	db0a      	blt.n	8006f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	490c      	ldr	r1, [pc, #48]	; (8006f40 <__NVIC_SetPriority+0x4c>)
 8006f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f12:	0112      	lsls	r2, r2, #4
 8006f14:	b2d2      	uxtb	r2, r2
 8006f16:	440b      	add	r3, r1
 8006f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f1c:	e00a      	b.n	8006f34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	4908      	ldr	r1, [pc, #32]	; (8006f44 <__NVIC_SetPriority+0x50>)
 8006f24:	79fb      	ldrb	r3, [r7, #7]
 8006f26:	f003 030f 	and.w	r3, r3, #15
 8006f2a:	3b04      	subs	r3, #4
 8006f2c:	0112      	lsls	r2, r2, #4
 8006f2e:	b2d2      	uxtb	r2, r2
 8006f30:	440b      	add	r3, r1
 8006f32:	761a      	strb	r2, [r3, #24]
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	e000e100 	.word	0xe000e100
 8006f44:	e000ed00 	.word	0xe000ed00

08006f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b089      	sub	sp, #36	; 0x24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	f1c3 0307 	rsb	r3, r3, #7
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	bf28      	it	cs
 8006f66:	2304      	movcs	r3, #4
 8006f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	2b06      	cmp	r3, #6
 8006f70:	d902      	bls.n	8006f78 <NVIC_EncodePriority+0x30>
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	3b03      	subs	r3, #3
 8006f76:	e000      	b.n	8006f7a <NVIC_EncodePriority+0x32>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	fa02 f303 	lsl.w	r3, r2, r3
 8006f86:	43da      	mvns	r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	401a      	ands	r2, r3
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9a:	43d9      	mvns	r1, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fa0:	4313      	orrs	r3, r2
         );
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3724      	adds	r7, #36	; 0x24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
	...

08006fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fc0:	d301      	bcc.n	8006fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e00f      	b.n	8006fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006fc6:	4a0a      	ldr	r2, [pc, #40]	; (8006ff0 <SysTick_Config+0x40>)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006fce:	210f      	movs	r1, #15
 8006fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fd4:	f7ff ff8e 	bl	8006ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006fd8:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <SysTick_Config+0x40>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006fde:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <SysTick_Config+0x40>)
 8006fe0:	2207      	movs	r2, #7
 8006fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	e000e010 	.word	0xe000e010

08006ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff ff05 	bl	8006e0c <__NVIC_SetPriorityGrouping>
}
 8007002:	bf00      	nop
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800700a:	b580      	push	{r7, lr}
 800700c:	b086      	sub	sp, #24
 800700e:	af00      	add	r7, sp, #0
 8007010:	4603      	mov	r3, r0
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	607a      	str	r2, [r7, #4]
 8007016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800701c:	f7ff ff1a 	bl	8006e54 <__NVIC_GetPriorityGrouping>
 8007020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	68b9      	ldr	r1, [r7, #8]
 8007026:	6978      	ldr	r0, [r7, #20]
 8007028:	f7ff ff8e 	bl	8006f48 <NVIC_EncodePriority>
 800702c:	4602      	mov	r2, r0
 800702e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007032:	4611      	mov	r1, r2
 8007034:	4618      	mov	r0, r3
 8007036:	f7ff ff5d 	bl	8006ef4 <__NVIC_SetPriority>
}
 800703a:	bf00      	nop
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b082      	sub	sp, #8
 8007046:	af00      	add	r7, sp, #0
 8007048:	4603      	mov	r3, r0
 800704a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800704c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff ff0d 	bl	8006e70 <__NVIC_EnableIRQ>
}
 8007056:	bf00      	nop
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b082      	sub	sp, #8
 8007062:	af00      	add	r7, sp, #0
 8007064:	4603      	mov	r3, r0
 8007066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff ff1d 	bl	8006eac <__NVIC_DisableIRQ>
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b082      	sub	sp, #8
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff ff94 	bl	8006fb0 <SysTick_Config>
 8007088:	4603      	mov	r3, r0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007094:	b480      	push	{r7}
 8007096:	b089      	sub	sp, #36	; 0x24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800709e:	2300      	movs	r3, #0
 80070a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80070a2:	2300      	movs	r3, #0
 80070a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80070a6:	2300      	movs	r3, #0
 80070a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80070aa:	2300      	movs	r3, #0
 80070ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80070ae:	2300      	movs	r3, #0
 80070b0:	61fb      	str	r3, [r7, #28]
 80070b2:	e175      	b.n	80073a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80070b4:	2201      	movs	r2, #1
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	fa02 f303 	lsl.w	r3, r2, r3
 80070bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4013      	ands	r3, r2
 80070c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	f040 8164 	bne.w	800739a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d005      	beq.n	80070ea <HAL_GPIO_Init+0x56>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f003 0303 	and.w	r3, r3, #3
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d130      	bne.n	800714c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	005b      	lsls	r3, r3, #1
 80070f4:	2203      	movs	r2, #3
 80070f6:	fa02 f303 	lsl.w	r3, r2, r3
 80070fa:	43db      	mvns	r3, r3
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	4013      	ands	r3, r2
 8007100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	005b      	lsls	r3, r3, #1
 800710a:	fa02 f303 	lsl.w	r3, r2, r3
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	4313      	orrs	r3, r2
 8007112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007120:	2201      	movs	r2, #1
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	fa02 f303 	lsl.w	r3, r2, r3
 8007128:	43db      	mvns	r3, r3
 800712a:	69ba      	ldr	r2, [r7, #24]
 800712c:	4013      	ands	r3, r2
 800712e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	091b      	lsrs	r3, r3, #4
 8007136:	f003 0201 	and.w	r2, r3, #1
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	fa02 f303 	lsl.w	r3, r2, r3
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	4313      	orrs	r3, r2
 8007144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f003 0303 	and.w	r3, r3, #3
 8007154:	2b03      	cmp	r3, #3
 8007156:	d017      	beq.n	8007188 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	2203      	movs	r2, #3
 8007164:	fa02 f303 	lsl.w	r3, r2, r3
 8007168:	43db      	mvns	r3, r3
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	4013      	ands	r3, r2
 800716e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	005b      	lsls	r3, r3, #1
 8007178:	fa02 f303 	lsl.w	r3, r2, r3
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	4313      	orrs	r3, r2
 8007180:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f003 0303 	and.w	r3, r3, #3
 8007190:	2b02      	cmp	r3, #2
 8007192:	d123      	bne.n	80071dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	08da      	lsrs	r2, r3, #3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3208      	adds	r2, #8
 800719c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	f003 0307 	and.w	r3, r3, #7
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	220f      	movs	r2, #15
 80071ac:	fa02 f303 	lsl.w	r3, r2, r3
 80071b0:	43db      	mvns	r3, r3
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	4013      	ands	r3, r2
 80071b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	691a      	ldr	r2, [r3, #16]
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	fa02 f303 	lsl.w	r3, r2, r3
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	08da      	lsrs	r2, r3, #3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3208      	adds	r2, #8
 80071d6:	69b9      	ldr	r1, [r7, #24]
 80071d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	2203      	movs	r2, #3
 80071e8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ec:	43db      	mvns	r3, r3
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	4013      	ands	r3, r2
 80071f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f003 0203 	and.w	r2, r3, #3
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	fa02 f303 	lsl.w	r3, r2, r3
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	4313      	orrs	r3, r2
 8007208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 80be 	beq.w	800739a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800721e:	4b66      	ldr	r3, [pc, #408]	; (80073b8 <HAL_GPIO_Init+0x324>)
 8007220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007222:	4a65      	ldr	r2, [pc, #404]	; (80073b8 <HAL_GPIO_Init+0x324>)
 8007224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007228:	6453      	str	r3, [r2, #68]	; 0x44
 800722a:	4b63      	ldr	r3, [pc, #396]	; (80073b8 <HAL_GPIO_Init+0x324>)
 800722c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007236:	4a61      	ldr	r2, [pc, #388]	; (80073bc <HAL_GPIO_Init+0x328>)
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	089b      	lsrs	r3, r3, #2
 800723c:	3302      	adds	r3, #2
 800723e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007242:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	220f      	movs	r2, #15
 800724e:	fa02 f303 	lsl.w	r3, r2, r3
 8007252:	43db      	mvns	r3, r3
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	4013      	ands	r3, r2
 8007258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a58      	ldr	r2, [pc, #352]	; (80073c0 <HAL_GPIO_Init+0x32c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d037      	beq.n	80072d2 <HAL_GPIO_Init+0x23e>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a57      	ldr	r2, [pc, #348]	; (80073c4 <HAL_GPIO_Init+0x330>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d031      	beq.n	80072ce <HAL_GPIO_Init+0x23a>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a56      	ldr	r2, [pc, #344]	; (80073c8 <HAL_GPIO_Init+0x334>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d02b      	beq.n	80072ca <HAL_GPIO_Init+0x236>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a55      	ldr	r2, [pc, #340]	; (80073cc <HAL_GPIO_Init+0x338>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d025      	beq.n	80072c6 <HAL_GPIO_Init+0x232>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a54      	ldr	r2, [pc, #336]	; (80073d0 <HAL_GPIO_Init+0x33c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d01f      	beq.n	80072c2 <HAL_GPIO_Init+0x22e>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a53      	ldr	r2, [pc, #332]	; (80073d4 <HAL_GPIO_Init+0x340>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d019      	beq.n	80072be <HAL_GPIO_Init+0x22a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a52      	ldr	r2, [pc, #328]	; (80073d8 <HAL_GPIO_Init+0x344>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d013      	beq.n	80072ba <HAL_GPIO_Init+0x226>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a51      	ldr	r2, [pc, #324]	; (80073dc <HAL_GPIO_Init+0x348>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00d      	beq.n	80072b6 <HAL_GPIO_Init+0x222>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a50      	ldr	r2, [pc, #320]	; (80073e0 <HAL_GPIO_Init+0x34c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d007      	beq.n	80072b2 <HAL_GPIO_Init+0x21e>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a4f      	ldr	r2, [pc, #316]	; (80073e4 <HAL_GPIO_Init+0x350>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d101      	bne.n	80072ae <HAL_GPIO_Init+0x21a>
 80072aa:	2309      	movs	r3, #9
 80072ac:	e012      	b.n	80072d4 <HAL_GPIO_Init+0x240>
 80072ae:	230a      	movs	r3, #10
 80072b0:	e010      	b.n	80072d4 <HAL_GPIO_Init+0x240>
 80072b2:	2308      	movs	r3, #8
 80072b4:	e00e      	b.n	80072d4 <HAL_GPIO_Init+0x240>
 80072b6:	2307      	movs	r3, #7
 80072b8:	e00c      	b.n	80072d4 <HAL_GPIO_Init+0x240>
 80072ba:	2306      	movs	r3, #6
 80072bc:	e00a      	b.n	80072d4 <HAL_GPIO_Init+0x240>
 80072be:	2305      	movs	r3, #5
 80072c0:	e008      	b.n	80072d4 <HAL_GPIO_Init+0x240>
 80072c2:	2304      	movs	r3, #4
 80072c4:	e006      	b.n	80072d4 <HAL_GPIO_Init+0x240>
 80072c6:	2303      	movs	r3, #3
 80072c8:	e004      	b.n	80072d4 <HAL_GPIO_Init+0x240>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e002      	b.n	80072d4 <HAL_GPIO_Init+0x240>
 80072ce:	2301      	movs	r3, #1
 80072d0:	e000      	b.n	80072d4 <HAL_GPIO_Init+0x240>
 80072d2:	2300      	movs	r3, #0
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	f002 0203 	and.w	r2, r2, #3
 80072da:	0092      	lsls	r2, r2, #2
 80072dc:	4093      	lsls	r3, r2
 80072de:	69ba      	ldr	r2, [r7, #24]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80072e4:	4935      	ldr	r1, [pc, #212]	; (80073bc <HAL_GPIO_Init+0x328>)
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	089b      	lsrs	r3, r3, #2
 80072ea:	3302      	adds	r3, #2
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80072f2:	4b3d      	ldr	r3, [pc, #244]	; (80073e8 <HAL_GPIO_Init+0x354>)
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	43db      	mvns	r3, r3
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	4013      	ands	r3, r2
 8007300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	4313      	orrs	r3, r2
 8007314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007316:	4a34      	ldr	r2, [pc, #208]	; (80073e8 <HAL_GPIO_Init+0x354>)
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800731c:	4b32      	ldr	r3, [pc, #200]	; (80073e8 <HAL_GPIO_Init+0x354>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	43db      	mvns	r3, r3
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	4013      	ands	r3, r2
 800732a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	4313      	orrs	r3, r2
 800733e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007340:	4a29      	ldr	r2, [pc, #164]	; (80073e8 <HAL_GPIO_Init+0x354>)
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007346:	4b28      	ldr	r3, [pc, #160]	; (80073e8 <HAL_GPIO_Init+0x354>)
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	43db      	mvns	r3, r3
 8007350:	69ba      	ldr	r2, [r7, #24]
 8007352:	4013      	ands	r3, r2
 8007354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	4313      	orrs	r3, r2
 8007368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800736a:	4a1f      	ldr	r2, [pc, #124]	; (80073e8 <HAL_GPIO_Init+0x354>)
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007370:	4b1d      	ldr	r3, [pc, #116]	; (80073e8 <HAL_GPIO_Init+0x354>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	43db      	mvns	r3, r3
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	4013      	ands	r3, r2
 800737e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d003      	beq.n	8007394 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	4313      	orrs	r3, r2
 8007392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007394:	4a14      	ldr	r2, [pc, #80]	; (80073e8 <HAL_GPIO_Init+0x354>)
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	3301      	adds	r3, #1
 800739e:	61fb      	str	r3, [r7, #28]
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	2b0f      	cmp	r3, #15
 80073a4:	f67f ae86 	bls.w	80070b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	3724      	adds	r7, #36	; 0x24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40023800 	.word	0x40023800
 80073bc:	40013800 	.word	0x40013800
 80073c0:	40020000 	.word	0x40020000
 80073c4:	40020400 	.word	0x40020400
 80073c8:	40020800 	.word	0x40020800
 80073cc:	40020c00 	.word	0x40020c00
 80073d0:	40021000 	.word	0x40021000
 80073d4:	40021400 	.word	0x40021400
 80073d8:	40021800 	.word	0x40021800
 80073dc:	40021c00 	.word	0x40021c00
 80073e0:	40022000 	.word	0x40022000
 80073e4:	40022400 	.word	0x40022400
 80073e8:	40013c00 	.word	0x40013c00

080073ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	807b      	strh	r3, [r7, #2]
 80073f8:	4613      	mov	r3, r2
 80073fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80073fc:	787b      	ldrb	r3, [r7, #1]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007402:	887a      	ldrh	r2, [r7, #2]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007408:	e003      	b.n	8007412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800740a:	887b      	ldrh	r3, [r7, #2]
 800740c:	041a      	lsls	r2, r3, #16
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	619a      	str	r2, [r3, #24]
}
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800741e:	b480      	push	{r7}
 8007420:	b085      	sub	sp, #20
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	460b      	mov	r3, r1
 8007428:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007430:	887a      	ldrh	r2, [r7, #2]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4013      	ands	r3, r2
 8007436:	041a      	lsls	r2, r3, #16
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	43d9      	mvns	r1, r3
 800743c:	887b      	ldrh	r3, [r7, #2]
 800743e:	400b      	ands	r3, r1
 8007440:	431a      	orrs	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	619a      	str	r2, [r3, #24]
}
 8007446:	bf00      	nop
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
	...

08007454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e07f      	b.n	8007566 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7fa fafa 	bl	8001a74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2224      	movs	r2, #36	; 0x24
 8007484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0201 	bic.w	r2, r2, #1
 8007496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d107      	bne.n	80074ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689a      	ldr	r2, [r3, #8]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074ca:	609a      	str	r2, [r3, #8]
 80074cc:	e006      	b.n	80074dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689a      	ldr	r2, [r3, #8]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80074da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d104      	bne.n	80074ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6859      	ldr	r1, [r3, #4]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	4b1d      	ldr	r3, [pc, #116]	; (8007570 <HAL_I2C_Init+0x11c>)
 80074fa:	430b      	orrs	r3, r1
 80074fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68da      	ldr	r2, [r3, #12]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800750c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691a      	ldr	r2, [r3, #16]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	69d9      	ldr	r1, [r3, #28]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a1a      	ldr	r2, [r3, #32]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f042 0201 	orr.w	r2, r2, #1
 8007546:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2220      	movs	r2, #32
 8007552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	02008000 	.word	0x02008000

08007574 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b20      	cmp	r3, #32
 8007588:	d138      	bne.n	80075fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007590:	2b01      	cmp	r3, #1
 8007592:	d101      	bne.n	8007598 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007594:	2302      	movs	r3, #2
 8007596:	e032      	b.n	80075fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2224      	movs	r2, #36	; 0x24
 80075a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0201 	bic.w	r2, r2, #1
 80075b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6819      	ldr	r1, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0201 	orr.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	e000      	b.n	80075fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80075fc:	2302      	movs	r3, #2
  }
}
 80075fe:	4618      	mov	r0, r3
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800760a:	b480      	push	{r7}
 800760c:	b085      	sub	sp, #20
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b20      	cmp	r3, #32
 800761e:	d139      	bne.n	8007694 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007626:	2b01      	cmp	r3, #1
 8007628:	d101      	bne.n	800762e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800762a:	2302      	movs	r3, #2
 800762c:	e033      	b.n	8007696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2224      	movs	r2, #36	; 0x24
 800763a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f022 0201 	bic.w	r2, r2, #1
 800764c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800765c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	021b      	lsls	r3, r3, #8
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	e000      	b.n	8007696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007694:	2302      	movs	r3, #2
  }
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e041      	b.n	8007738 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80076bc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f245 5255 	movw	r2, #21845	; 0x5555
 80076c6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	6852      	ldr	r2, [r2, #4]
 80076d0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	6892      	ldr	r2, [r2, #8]
 80076da:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80076dc:	f7fe fc46 	bl	8005f6c <HAL_GetTick>
 80076e0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80076e2:	e00f      	b.n	8007704 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80076e4:	f7fe fc42 	bl	8005f6c <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b31      	cmp	r3, #49	; 0x31
 80076f0:	d908      	bls.n	8007704 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e019      	b.n	8007738 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	f003 0307 	and.w	r3, r3, #7
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e8      	bne.n	80076e4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	691a      	ldr	r2, [r3, #16]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	429a      	cmp	r2, r3
 800771e:	d005      	beq.n	800772c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	68d2      	ldr	r2, [r2, #12]
 8007728:	611a      	str	r2, [r3, #16]
 800772a:	e004      	b.n	8007736 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007734:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007750:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007766:	2300      	movs	r3, #0
 8007768:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800776a:	4b23      	ldr	r3, [pc, #140]	; (80077f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	4a22      	ldr	r2, [pc, #136]	; (80077f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007774:	6413      	str	r3, [r2, #64]	; 0x40
 8007776:	4b20      	ldr	r3, [pc, #128]	; (80077f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800777e:	603b      	str	r3, [r7, #0]
 8007780:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007782:	4b1e      	ldr	r3, [pc, #120]	; (80077fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a1d      	ldr	r2, [pc, #116]	; (80077fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800778c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800778e:	f7fe fbed 	bl	8005f6c <HAL_GetTick>
 8007792:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007794:	e009      	b.n	80077aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007796:	f7fe fbe9 	bl	8005f6c <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077a4:	d901      	bls.n	80077aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e022      	b.n	80077f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80077aa:	4b14      	ldr	r3, [pc, #80]	; (80077fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b6:	d1ee      	bne.n	8007796 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80077b8:	4b10      	ldr	r3, [pc, #64]	; (80077fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a0f      	ldr	r2, [pc, #60]	; (80077fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80077be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077c4:	f7fe fbd2 	bl	8005f6c <HAL_GetTick>
 80077c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80077ca:	e009      	b.n	80077e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80077cc:	f7fe fbce 	bl	8005f6c <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077da:	d901      	bls.n	80077e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e007      	b.n	80077f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80077e0:	4b06      	ldr	r3, [pc, #24]	; (80077fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077ec:	d1ee      	bne.n	80077cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	40023800 	.word	0x40023800
 80077fc:	40007000 	.word	0x40007000

08007800 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007808:	2300      	movs	r3, #0
 800780a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e291      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	f000 8087 	beq.w	8007932 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007824:	4b96      	ldr	r3, [pc, #600]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 030c 	and.w	r3, r3, #12
 800782c:	2b04      	cmp	r3, #4
 800782e:	d00c      	beq.n	800784a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007830:	4b93      	ldr	r3, [pc, #588]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f003 030c 	and.w	r3, r3, #12
 8007838:	2b08      	cmp	r3, #8
 800783a:	d112      	bne.n	8007862 <HAL_RCC_OscConfig+0x62>
 800783c:	4b90      	ldr	r3, [pc, #576]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007848:	d10b      	bne.n	8007862 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800784a:	4b8d      	ldr	r3, [pc, #564]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d06c      	beq.n	8007930 <HAL_RCC_OscConfig+0x130>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d168      	bne.n	8007930 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e26b      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800786a:	d106      	bne.n	800787a <HAL_RCC_OscConfig+0x7a>
 800786c:	4b84      	ldr	r3, [pc, #528]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a83      	ldr	r2, [pc, #524]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	e02e      	b.n	80078d8 <HAL_RCC_OscConfig+0xd8>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10c      	bne.n	800789c <HAL_RCC_OscConfig+0x9c>
 8007882:	4b7f      	ldr	r3, [pc, #508]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a7e      	ldr	r2, [pc, #504]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	4b7c      	ldr	r3, [pc, #496]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a7b      	ldr	r2, [pc, #492]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	e01d      	b.n	80078d8 <HAL_RCC_OscConfig+0xd8>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078a4:	d10c      	bne.n	80078c0 <HAL_RCC_OscConfig+0xc0>
 80078a6:	4b76      	ldr	r3, [pc, #472]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a75      	ldr	r2, [pc, #468]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	4b73      	ldr	r3, [pc, #460]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a72      	ldr	r2, [pc, #456]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	e00b      	b.n	80078d8 <HAL_RCC_OscConfig+0xd8>
 80078c0:	4b6f      	ldr	r3, [pc, #444]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a6e      	ldr	r2, [pc, #440]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	4b6c      	ldr	r3, [pc, #432]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a6b      	ldr	r2, [pc, #428]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d013      	beq.n	8007908 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e0:	f7fe fb44 	bl	8005f6c <HAL_GetTick>
 80078e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078e6:	e008      	b.n	80078fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078e8:	f7fe fb40 	bl	8005f6c <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b64      	cmp	r3, #100	; 0x64
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e21f      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078fa:	4b61      	ldr	r3, [pc, #388]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0f0      	beq.n	80078e8 <HAL_RCC_OscConfig+0xe8>
 8007906:	e014      	b.n	8007932 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007908:	f7fe fb30 	bl	8005f6c <HAL_GetTick>
 800790c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800790e:	e008      	b.n	8007922 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007910:	f7fe fb2c 	bl	8005f6c <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b64      	cmp	r3, #100	; 0x64
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e20b      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007922:	4b57      	ldr	r3, [pc, #348]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f0      	bne.n	8007910 <HAL_RCC_OscConfig+0x110>
 800792e:	e000      	b.n	8007932 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d069      	beq.n	8007a12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800793e:	4b50      	ldr	r3, [pc, #320]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f003 030c 	and.w	r3, r3, #12
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00b      	beq.n	8007962 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800794a:	4b4d      	ldr	r3, [pc, #308]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f003 030c 	and.w	r3, r3, #12
 8007952:	2b08      	cmp	r3, #8
 8007954:	d11c      	bne.n	8007990 <HAL_RCC_OscConfig+0x190>
 8007956:	4b4a      	ldr	r3, [pc, #296]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d116      	bne.n	8007990 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007962:	4b47      	ldr	r3, [pc, #284]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d005      	beq.n	800797a <HAL_RCC_OscConfig+0x17a>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d001      	beq.n	800797a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e1df      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800797a:	4b41      	ldr	r3, [pc, #260]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	493d      	ldr	r1, [pc, #244]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 800798a:	4313      	orrs	r3, r2
 800798c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800798e:	e040      	b.n	8007a12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d023      	beq.n	80079e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007998:	4b39      	ldr	r3, [pc, #228]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a38      	ldr	r2, [pc, #224]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 800799e:	f043 0301 	orr.w	r3, r3, #1
 80079a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a4:	f7fe fae2 	bl	8005f6c <HAL_GetTick>
 80079a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079aa:	e008      	b.n	80079be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079ac:	f7fe fade 	bl	8005f6c <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e1bd      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079be:	4b30      	ldr	r3, [pc, #192]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0f0      	beq.n	80079ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ca:	4b2d      	ldr	r3, [pc, #180]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	4929      	ldr	r1, [pc, #164]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	600b      	str	r3, [r1, #0]
 80079de:	e018      	b.n	8007a12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079e0:	4b27      	ldr	r3, [pc, #156]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a26      	ldr	r2, [pc, #152]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80079e6:	f023 0301 	bic.w	r3, r3, #1
 80079ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ec:	f7fe fabe 	bl	8005f6c <HAL_GetTick>
 80079f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079f2:	e008      	b.n	8007a06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079f4:	f7fe faba 	bl	8005f6c <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d901      	bls.n	8007a06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e199      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a06:	4b1e      	ldr	r3, [pc, #120]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1f0      	bne.n	80079f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 0308 	and.w	r3, r3, #8
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d038      	beq.n	8007a90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d019      	beq.n	8007a5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a26:	4b16      	ldr	r3, [pc, #88]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a2a:	4a15      	ldr	r2, [pc, #84]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007a2c:	f043 0301 	orr.w	r3, r3, #1
 8007a30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a32:	f7fe fa9b 	bl	8005f6c <HAL_GetTick>
 8007a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a38:	e008      	b.n	8007a4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a3a:	f7fe fa97 	bl	8005f6c <HAL_GetTick>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d901      	bls.n	8007a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e176      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a4c:	4b0c      	ldr	r3, [pc, #48]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a50:	f003 0302 	and.w	r3, r3, #2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0f0      	beq.n	8007a3a <HAL_RCC_OscConfig+0x23a>
 8007a58:	e01a      	b.n	8007a90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a5a:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a5e:	4a08      	ldr	r2, [pc, #32]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007a60:	f023 0301 	bic.w	r3, r3, #1
 8007a64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a66:	f7fe fa81 	bl	8005f6c <HAL_GetTick>
 8007a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a6c:	e00a      	b.n	8007a84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a6e:	f7fe fa7d 	bl	8005f6c <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d903      	bls.n	8007a84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e15c      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
 8007a80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a84:	4b91      	ldr	r3, [pc, #580]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1ee      	bne.n	8007a6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 80a4 	beq.w	8007be6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a9e:	4b8b      	ldr	r3, [pc, #556]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10d      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007aaa:	4b88      	ldr	r3, [pc, #544]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	4a87      	ldr	r2, [pc, #540]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ab6:	4b85      	ldr	r3, [pc, #532]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007abe:	60bb      	str	r3, [r7, #8]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ac6:	4b82      	ldr	r3, [pc, #520]	; (8007cd0 <HAL_RCC_OscConfig+0x4d0>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d118      	bne.n	8007b04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007ad2:	4b7f      	ldr	r3, [pc, #508]	; (8007cd0 <HAL_RCC_OscConfig+0x4d0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a7e      	ldr	r2, [pc, #504]	; (8007cd0 <HAL_RCC_OscConfig+0x4d0>)
 8007ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ade:	f7fe fa45 	bl	8005f6c <HAL_GetTick>
 8007ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ae4:	e008      	b.n	8007af8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ae6:	f7fe fa41 	bl	8005f6c <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	2b64      	cmp	r3, #100	; 0x64
 8007af2:	d901      	bls.n	8007af8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e120      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007af8:	4b75      	ldr	r3, [pc, #468]	; (8007cd0 <HAL_RCC_OscConfig+0x4d0>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0f0      	beq.n	8007ae6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d106      	bne.n	8007b1a <HAL_RCC_OscConfig+0x31a>
 8007b0c:	4b6f      	ldr	r3, [pc, #444]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b10:	4a6e      	ldr	r2, [pc, #440]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	6713      	str	r3, [r2, #112]	; 0x70
 8007b18:	e02d      	b.n	8007b76 <HAL_RCC_OscConfig+0x376>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10c      	bne.n	8007b3c <HAL_RCC_OscConfig+0x33c>
 8007b22:	4b6a      	ldr	r3, [pc, #424]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b26:	4a69      	ldr	r2, [pc, #420]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b28:	f023 0301 	bic.w	r3, r3, #1
 8007b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007b2e:	4b67      	ldr	r3, [pc, #412]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b32:	4a66      	ldr	r2, [pc, #408]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b34:	f023 0304 	bic.w	r3, r3, #4
 8007b38:	6713      	str	r3, [r2, #112]	; 0x70
 8007b3a:	e01c      	b.n	8007b76 <HAL_RCC_OscConfig+0x376>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	2b05      	cmp	r3, #5
 8007b42:	d10c      	bne.n	8007b5e <HAL_RCC_OscConfig+0x35e>
 8007b44:	4b61      	ldr	r3, [pc, #388]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b48:	4a60      	ldr	r2, [pc, #384]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b4a:	f043 0304 	orr.w	r3, r3, #4
 8007b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b50:	4b5e      	ldr	r3, [pc, #376]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b54:	4a5d      	ldr	r2, [pc, #372]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b56:	f043 0301 	orr.w	r3, r3, #1
 8007b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b5c:	e00b      	b.n	8007b76 <HAL_RCC_OscConfig+0x376>
 8007b5e:	4b5b      	ldr	r3, [pc, #364]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b62:	4a5a      	ldr	r2, [pc, #360]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	6713      	str	r3, [r2, #112]	; 0x70
 8007b6a:	4b58      	ldr	r3, [pc, #352]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6e:	4a57      	ldr	r2, [pc, #348]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b70:	f023 0304 	bic.w	r3, r3, #4
 8007b74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d015      	beq.n	8007baa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b7e:	f7fe f9f5 	bl	8005f6c <HAL_GetTick>
 8007b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b84:	e00a      	b.n	8007b9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b86:	f7fe f9f1 	bl	8005f6c <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d901      	bls.n	8007b9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e0ce      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b9c:	4b4b      	ldr	r3, [pc, #300]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d0ee      	beq.n	8007b86 <HAL_RCC_OscConfig+0x386>
 8007ba8:	e014      	b.n	8007bd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007baa:	f7fe f9df 	bl	8005f6c <HAL_GetTick>
 8007bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bb0:	e00a      	b.n	8007bc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bb2:	f7fe f9db 	bl	8005f6c <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e0b8      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bc8:	4b40      	ldr	r3, [pc, #256]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1ee      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d105      	bne.n	8007be6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bda:	4b3c      	ldr	r3, [pc, #240]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	4a3b      	ldr	r2, [pc, #236]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007be4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 80a4 	beq.w	8007d38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007bf0:	4b36      	ldr	r3, [pc, #216]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f003 030c 	and.w	r3, r3, #12
 8007bf8:	2b08      	cmp	r3, #8
 8007bfa:	d06b      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d149      	bne.n	8007c98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c04:	4b31      	ldr	r3, [pc, #196]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a30      	ldr	r2, [pc, #192]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c10:	f7fe f9ac 	bl	8005f6c <HAL_GetTick>
 8007c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c18:	f7fe f9a8 	bl	8005f6c <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e087      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c2a:	4b28      	ldr	r3, [pc, #160]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1f0      	bne.n	8007c18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	69da      	ldr	r2, [r3, #28]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	019b      	lsls	r3, r3, #6
 8007c46:	431a      	orrs	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4c:	085b      	lsrs	r3, r3, #1
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	041b      	lsls	r3, r3, #16
 8007c52:	431a      	orrs	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	061b      	lsls	r3, r3, #24
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	4a1b      	ldr	r2, [pc, #108]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c64:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a18      	ldr	r2, [pc, #96]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c70:	f7fe f97c 	bl	8005f6c <HAL_GetTick>
 8007c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c76:	e008      	b.n	8007c8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c78:	f7fe f978 	bl	8005f6c <HAL_GetTick>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d901      	bls.n	8007c8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e057      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c8a:	4b10      	ldr	r3, [pc, #64]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0f0      	beq.n	8007c78 <HAL_RCC_OscConfig+0x478>
 8007c96:	e04f      	b.n	8007d38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c98:	4b0c      	ldr	r3, [pc, #48]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a0b      	ldr	r2, [pc, #44]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca4:	f7fe f962 	bl	8005f6c <HAL_GetTick>
 8007ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007caa:	e008      	b.n	8007cbe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cac:	f7fe f95e 	bl	8005f6c <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d901      	bls.n	8007cbe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e03d      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cbe:	4b03      	ldr	r3, [pc, #12]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1f0      	bne.n	8007cac <HAL_RCC_OscConfig+0x4ac>
 8007cca:	e035      	b.n	8007d38 <HAL_RCC_OscConfig+0x538>
 8007ccc:	40023800 	.word	0x40023800
 8007cd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007cd4:	4b1b      	ldr	r3, [pc, #108]	; (8007d44 <HAL_RCC_OscConfig+0x544>)
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d028      	beq.n	8007d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d121      	bne.n	8007d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d11a      	bne.n	8007d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d04:	4013      	ands	r3, r2
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d111      	bne.n	8007d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1a:	085b      	lsrs	r3, r3, #1
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d107      	bne.n	8007d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d001      	beq.n	8007d38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e000      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	40023800 	.word	0x40023800

08007d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e0d0      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d60:	4b6a      	ldr	r3, [pc, #424]	; (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 030f 	and.w	r3, r3, #15
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d910      	bls.n	8007d90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d6e:	4b67      	ldr	r3, [pc, #412]	; (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f023 020f 	bic.w	r2, r3, #15
 8007d76:	4965      	ldr	r1, [pc, #404]	; (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d7e:	4b63      	ldr	r3, [pc, #396]	; (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 030f 	and.w	r3, r3, #15
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d001      	beq.n	8007d90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e0b8      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d020      	beq.n	8007dde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d005      	beq.n	8007db4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007da8:	4b59      	ldr	r3, [pc, #356]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	4a58      	ldr	r2, [pc, #352]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007db2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0308 	and.w	r3, r3, #8
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d005      	beq.n	8007dcc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007dc0:	4b53      	ldr	r3, [pc, #332]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	4a52      	ldr	r2, [pc, #328]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007dca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dcc:	4b50      	ldr	r3, [pc, #320]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	494d      	ldr	r1, [pc, #308]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d040      	beq.n	8007e6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d107      	bne.n	8007e02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007df2:	4b47      	ldr	r3, [pc, #284]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d115      	bne.n	8007e2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e07f      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d107      	bne.n	8007e1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e0a:	4b41      	ldr	r3, [pc, #260]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d109      	bne.n	8007e2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e073      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e1a:	4b3d      	ldr	r3, [pc, #244]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e06b      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e2a:	4b39      	ldr	r3, [pc, #228]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f023 0203 	bic.w	r2, r3, #3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	4936      	ldr	r1, [pc, #216]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e3c:	f7fe f896 	bl	8005f6c <HAL_GetTick>
 8007e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e42:	e00a      	b.n	8007e5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e44:	f7fe f892 	bl	8005f6c <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d901      	bls.n	8007e5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e053      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e5a:	4b2d      	ldr	r3, [pc, #180]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 020c 	and.w	r2, r3, #12
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d1eb      	bne.n	8007e44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e6c:	4b27      	ldr	r3, [pc, #156]	; (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 030f 	and.w	r3, r3, #15
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d210      	bcs.n	8007e9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e7a:	4b24      	ldr	r3, [pc, #144]	; (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f023 020f 	bic.w	r2, r3, #15
 8007e82:	4922      	ldr	r1, [pc, #136]	; (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e8a:	4b20      	ldr	r3, [pc, #128]	; (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d001      	beq.n	8007e9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e032      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d008      	beq.n	8007eba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ea8:	4b19      	ldr	r3, [pc, #100]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	4916      	ldr	r1, [pc, #88]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0308 	and.w	r3, r3, #8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d009      	beq.n	8007eda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007ec6:	4b12      	ldr	r3, [pc, #72]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	490e      	ldr	r1, [pc, #56]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007eda:	f000 f821 	bl	8007f20 <HAL_RCC_GetSysClockFreq>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	091b      	lsrs	r3, r3, #4
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	490a      	ldr	r1, [pc, #40]	; (8007f14 <HAL_RCC_ClockConfig+0x1cc>)
 8007eec:	5ccb      	ldrb	r3, [r1, r3]
 8007eee:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef2:	4a09      	ldr	r2, [pc, #36]	; (8007f18 <HAL_RCC_ClockConfig+0x1d0>)
 8007ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007ef6:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <HAL_RCC_ClockConfig+0x1d4>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fd fff2 	bl	8005ee4 <HAL_InitTick>

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	40023c00 	.word	0x40023c00
 8007f10:	40023800 	.word	0x40023800
 8007f14:	0800a8b4 	.word	0x0800a8b4
 8007f18:	20000260 	.word	0x20000260
 8007f1c:	20000264 	.word	0x20000264

08007f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f24:	b090      	sub	sp, #64	; 0x40
 8007f26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f30:	2300      	movs	r3, #0
 8007f32:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f38:	4b59      	ldr	r3, [pc, #356]	; (80080a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f003 030c 	and.w	r3, r3, #12
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d00d      	beq.n	8007f60 <HAL_RCC_GetSysClockFreq+0x40>
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	f200 80a1 	bhi.w	800808c <HAL_RCC_GetSysClockFreq+0x16c>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <HAL_RCC_GetSysClockFreq+0x34>
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d003      	beq.n	8007f5a <HAL_RCC_GetSysClockFreq+0x3a>
 8007f52:	e09b      	b.n	800808c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f54:	4b53      	ldr	r3, [pc, #332]	; (80080a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007f56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f58:	e09b      	b.n	8008092 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f5a:	4b53      	ldr	r3, [pc, #332]	; (80080a8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007f5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f5e:	e098      	b.n	8008092 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f60:	4b4f      	ldr	r3, [pc, #316]	; (80080a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f68:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007f6a:	4b4d      	ldr	r3, [pc, #308]	; (80080a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d028      	beq.n	8007fc8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f76:	4b4a      	ldr	r3, [pc, #296]	; (80080a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	099b      	lsrs	r3, r3, #6
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	623b      	str	r3, [r7, #32]
 8007f80:	627a      	str	r2, [r7, #36]	; 0x24
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007f88:	2100      	movs	r1, #0
 8007f8a:	4b47      	ldr	r3, [pc, #284]	; (80080a8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007f8c:	fb03 f201 	mul.w	r2, r3, r1
 8007f90:	2300      	movs	r3, #0
 8007f92:	fb00 f303 	mul.w	r3, r0, r3
 8007f96:	4413      	add	r3, r2
 8007f98:	4a43      	ldr	r2, [pc, #268]	; (80080a8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007f9a:	fba0 1202 	umull	r1, r2, r0, r2
 8007f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fa0:	460a      	mov	r2, r1
 8007fa2:	62ba      	str	r2, [r7, #40]	; 0x28
 8007fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fa6:	4413      	add	r3, r2
 8007fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fac:	2200      	movs	r2, #0
 8007fae:	61bb      	str	r3, [r7, #24]
 8007fb0:	61fa      	str	r2, [r7, #28]
 8007fb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007fba:	f7f8 fdcb 	bl	8000b54 <__aeabi_uldivmod>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fc6:	e053      	b.n	8008070 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fc8:	4b35      	ldr	r3, [pc, #212]	; (80080a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	099b      	lsrs	r3, r3, #6
 8007fce:	2200      	movs	r2, #0
 8007fd0:	613b      	str	r3, [r7, #16]
 8007fd2:	617a      	str	r2, [r7, #20]
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007fda:	f04f 0b00 	mov.w	fp, #0
 8007fde:	4652      	mov	r2, sl
 8007fe0:	465b      	mov	r3, fp
 8007fe2:	f04f 0000 	mov.w	r0, #0
 8007fe6:	f04f 0100 	mov.w	r1, #0
 8007fea:	0159      	lsls	r1, r3, #5
 8007fec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ff0:	0150      	lsls	r0, r2, #5
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	ebb2 080a 	subs.w	r8, r2, sl
 8007ffa:	eb63 090b 	sbc.w	r9, r3, fp
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	f04f 0300 	mov.w	r3, #0
 8008006:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800800a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800800e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008012:	ebb2 0408 	subs.w	r4, r2, r8
 8008016:	eb63 0509 	sbc.w	r5, r3, r9
 800801a:	f04f 0200 	mov.w	r2, #0
 800801e:	f04f 0300 	mov.w	r3, #0
 8008022:	00eb      	lsls	r3, r5, #3
 8008024:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008028:	00e2      	lsls	r2, r4, #3
 800802a:	4614      	mov	r4, r2
 800802c:	461d      	mov	r5, r3
 800802e:	eb14 030a 	adds.w	r3, r4, sl
 8008032:	603b      	str	r3, [r7, #0]
 8008034:	eb45 030b 	adc.w	r3, r5, fp
 8008038:	607b      	str	r3, [r7, #4]
 800803a:	f04f 0200 	mov.w	r2, #0
 800803e:	f04f 0300 	mov.w	r3, #0
 8008042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008046:	4629      	mov	r1, r5
 8008048:	028b      	lsls	r3, r1, #10
 800804a:	4621      	mov	r1, r4
 800804c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008050:	4621      	mov	r1, r4
 8008052:	028a      	lsls	r2, r1, #10
 8008054:	4610      	mov	r0, r2
 8008056:	4619      	mov	r1, r3
 8008058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800805a:	2200      	movs	r2, #0
 800805c:	60bb      	str	r3, [r7, #8]
 800805e:	60fa      	str	r2, [r7, #12]
 8008060:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008064:	f7f8 fd76 	bl	8000b54 <__aeabi_uldivmod>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4613      	mov	r3, r2
 800806e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008070:	4b0b      	ldr	r3, [pc, #44]	; (80080a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	0c1b      	lsrs	r3, r3, #16
 8008076:	f003 0303 	and.w	r3, r3, #3
 800807a:	3301      	adds	r3, #1
 800807c:	005b      	lsls	r3, r3, #1
 800807e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	fbb2 f3f3 	udiv	r3, r2, r3
 8008088:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800808a:	e002      	b.n	8008092 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800808c:	4b05      	ldr	r3, [pc, #20]	; (80080a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800808e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008094:	4618      	mov	r0, r3
 8008096:	3740      	adds	r7, #64	; 0x40
 8008098:	46bd      	mov	sp, r7
 800809a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800809e:	bf00      	nop
 80080a0:	40023800 	.word	0x40023800
 80080a4:	00f42400 	.word	0x00f42400
 80080a8:	00b71b00 	.word	0x00b71b00

080080ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80080b8:	2300      	movs	r3, #0
 80080ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80080c0:	2300      	movs	r3, #0
 80080c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d012      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80080d4:	4b69      	ldr	r3, [pc, #420]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	4a68      	ldr	r2, [pc, #416]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80080de:	6093      	str	r3, [r2, #8]
 80080e0:	4b66      	ldr	r3, [pc, #408]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e8:	4964      	ldr	r1, [pc, #400]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ea:	4313      	orrs	r3, r2
 80080ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80080f6:	2301      	movs	r3, #1
 80080f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d017      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008106:	4b5d      	ldr	r3, [pc, #372]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800810c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008114:	4959      	ldr	r1, [pc, #356]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008116:	4313      	orrs	r3, r2
 8008118:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008124:	d101      	bne.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008126:	2301      	movs	r3, #1
 8008128:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008132:	2301      	movs	r3, #1
 8008134:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d017      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008142:	4b4e      	ldr	r3, [pc, #312]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008148:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008150:	494a      	ldr	r1, [pc, #296]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008152:	4313      	orrs	r3, r2
 8008154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008160:	d101      	bne.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008162:	2301      	movs	r3, #1
 8008164:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800816e:	2301      	movs	r3, #1
 8008170:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800817e:	2301      	movs	r3, #1
 8008180:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 808b 	beq.w	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008190:	4b3a      	ldr	r3, [pc, #232]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008194:	4a39      	ldr	r2, [pc, #228]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800819a:	6413      	str	r3, [r2, #64]	; 0x40
 800819c:	4b37      	ldr	r3, [pc, #220]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800819e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081a4:	60bb      	str	r3, [r7, #8]
 80081a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80081a8:	4b35      	ldr	r3, [pc, #212]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a34      	ldr	r2, [pc, #208]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081b4:	f7fd feda 	bl	8005f6c <HAL_GetTick>
 80081b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80081ba:	e008      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081bc:	f7fd fed6 	bl	8005f6c <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	2b64      	cmp	r3, #100	; 0x64
 80081c8:	d901      	bls.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e357      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80081ce:	4b2c      	ldr	r3, [pc, #176]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d0f0      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80081da:	4b28      	ldr	r3, [pc, #160]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d035      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d02e      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081f8:	4b20      	ldr	r3, [pc, #128]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008200:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008202:	4b1e      	ldr	r3, [pc, #120]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008206:	4a1d      	ldr	r2, [pc, #116]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800820c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800820e:	4b1b      	ldr	r3, [pc, #108]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008212:	4a1a      	ldr	r2, [pc, #104]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008218:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800821a:	4a18      	ldr	r2, [pc, #96]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008220:	4b16      	ldr	r3, [pc, #88]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b01      	cmp	r3, #1
 800822a:	d114      	bne.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800822c:	f7fd fe9e 	bl	8005f6c <HAL_GetTick>
 8008230:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008232:	e00a      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008234:	f7fd fe9a 	bl	8005f6c <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008242:	4293      	cmp	r3, r2
 8008244:	d901      	bls.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e319      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800824a:	4b0c      	ldr	r3, [pc, #48]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0ee      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800825e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008262:	d111      	bne.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008264:	4b05      	ldr	r3, [pc, #20]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008270:	4b04      	ldr	r3, [pc, #16]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008272:	400b      	ands	r3, r1
 8008274:	4901      	ldr	r1, [pc, #4]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008276:	4313      	orrs	r3, r2
 8008278:	608b      	str	r3, [r1, #8]
 800827a:	e00b      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800827c:	40023800 	.word	0x40023800
 8008280:	40007000 	.word	0x40007000
 8008284:	0ffffcff 	.word	0x0ffffcff
 8008288:	4baa      	ldr	r3, [pc, #680]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	4aa9      	ldr	r2, [pc, #676]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800828e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008292:	6093      	str	r3, [r2, #8]
 8008294:	4ba7      	ldr	r3, [pc, #668]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008296:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082a0:	49a4      	ldr	r1, [pc, #656]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0310 	and.w	r3, r3, #16
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d010      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082b2:	4ba0      	ldr	r3, [pc, #640]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082b8:	4a9e      	ldr	r2, [pc, #632]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80082c2:	4b9c      	ldr	r3, [pc, #624]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	4999      	ldr	r1, [pc, #612]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00a      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80082e0:	4b94      	ldr	r3, [pc, #592]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082ee:	4991      	ldr	r1, [pc, #580]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082f0:	4313      	orrs	r3, r2
 80082f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00a      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008302:	4b8c      	ldr	r3, [pc, #560]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008308:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008310:	4988      	ldr	r1, [pc, #544]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008312:	4313      	orrs	r3, r2
 8008314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00a      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008324:	4b83      	ldr	r3, [pc, #524]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800832a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008332:	4980      	ldr	r1, [pc, #512]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008334:	4313      	orrs	r3, r2
 8008336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00a      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008346:	4b7b      	ldr	r3, [pc, #492]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800834c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008354:	4977      	ldr	r1, [pc, #476]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008356:	4313      	orrs	r3, r2
 8008358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00a      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008368:	4b72      	ldr	r3, [pc, #456]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800836a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800836e:	f023 0203 	bic.w	r2, r3, #3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008376:	496f      	ldr	r1, [pc, #444]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008378:	4313      	orrs	r3, r2
 800837a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800838a:	4b6a      	ldr	r3, [pc, #424]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800838c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008390:	f023 020c 	bic.w	r2, r3, #12
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008398:	4966      	ldr	r1, [pc, #408]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800839a:	4313      	orrs	r3, r2
 800839c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00a      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80083ac:	4b61      	ldr	r3, [pc, #388]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ba:	495e      	ldr	r1, [pc, #376]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80083ce:	4b59      	ldr	r3, [pc, #356]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083dc:	4955      	ldr	r1, [pc, #340]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00a      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80083f0:	4b50      	ldr	r3, [pc, #320]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fe:	494d      	ldr	r1, [pc, #308]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008400:	4313      	orrs	r3, r2
 8008402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00a      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008412:	4b48      	ldr	r3, [pc, #288]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008418:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008420:	4944      	ldr	r1, [pc, #272]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008422:	4313      	orrs	r3, r2
 8008424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00a      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008434:	4b3f      	ldr	r3, [pc, #252]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800843a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008442:	493c      	ldr	r1, [pc, #240]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008444:	4313      	orrs	r3, r2
 8008446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00a      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008456:	4b37      	ldr	r3, [pc, #220]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800845c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008464:	4933      	ldr	r1, [pc, #204]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008466:	4313      	orrs	r3, r2
 8008468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00a      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008478:	4b2e      	ldr	r3, [pc, #184]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800847a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800847e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008486:	492b      	ldr	r1, [pc, #172]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008488:	4313      	orrs	r3, r2
 800848a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d011      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800849a:	4b26      	ldr	r3, [pc, #152]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800849c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084a8:	4922      	ldr	r1, [pc, #136]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084aa:	4313      	orrs	r3, r2
 80084ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084b8:	d101      	bne.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80084ba:	2301      	movs	r3, #1
 80084bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0308 	and.w	r3, r3, #8
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80084ca:	2301      	movs	r3, #1
 80084cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00a      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084da:	4b16      	ldr	r3, [pc, #88]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084e8:	4912      	ldr	r1, [pc, #72]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00b      	beq.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80084fc:	4b0d      	ldr	r3, [pc, #52]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008502:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800850c:	4909      	ldr	r1, [pc, #36]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800850e:	4313      	orrs	r3, r2
 8008510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d006      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 80d9 	beq.w	80086da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008528:	4b02      	ldr	r3, [pc, #8]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a01      	ldr	r2, [pc, #4]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800852e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008532:	e001      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008534:	40023800 	.word	0x40023800
 8008538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800853a:	f7fd fd17 	bl	8005f6c <HAL_GetTick>
 800853e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008540:	e008      	b.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008542:	f7fd fd13 	bl	8005f6c <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	2b64      	cmp	r3, #100	; 0x64
 800854e:	d901      	bls.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e194      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008554:	4b6c      	ldr	r3, [pc, #432]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1f0      	bne.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b00      	cmp	r3, #0
 800856a:	d021      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008570:	2b00      	cmp	r3, #0
 8008572:	d11d      	bne.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008574:	4b64      	ldr	r3, [pc, #400]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800857a:	0c1b      	lsrs	r3, r3, #16
 800857c:	f003 0303 	and.w	r3, r3, #3
 8008580:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008582:	4b61      	ldr	r3, [pc, #388]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008588:	0e1b      	lsrs	r3, r3, #24
 800858a:	f003 030f 	and.w	r3, r3, #15
 800858e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	019a      	lsls	r2, r3, #6
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	041b      	lsls	r3, r3, #16
 800859a:	431a      	orrs	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	061b      	lsls	r3, r3, #24
 80085a0:	431a      	orrs	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	071b      	lsls	r3, r3, #28
 80085a8:	4957      	ldr	r1, [pc, #348]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d004      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085c4:	d00a      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d02e      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085da:	d129      	bne.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80085dc:	4b4a      	ldr	r3, [pc, #296]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085e2:	0c1b      	lsrs	r3, r3, #16
 80085e4:	f003 0303 	and.w	r3, r3, #3
 80085e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80085ea:	4b47      	ldr	r3, [pc, #284]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085f0:	0f1b      	lsrs	r3, r3, #28
 80085f2:	f003 0307 	and.w	r3, r3, #7
 80085f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	019a      	lsls	r2, r3, #6
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	041b      	lsls	r3, r3, #16
 8008602:	431a      	orrs	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	061b      	lsls	r3, r3, #24
 800860a:	431a      	orrs	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	071b      	lsls	r3, r3, #28
 8008610:	493d      	ldr	r1, [pc, #244]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008612:	4313      	orrs	r3, r2
 8008614:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008618:	4b3b      	ldr	r3, [pc, #236]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800861a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800861e:	f023 021f 	bic.w	r2, r3, #31
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008626:	3b01      	subs	r3, #1
 8008628:	4937      	ldr	r1, [pc, #220]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800862a:	4313      	orrs	r3, r2
 800862c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d01d      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800863c:	4b32      	ldr	r3, [pc, #200]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800863e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008642:	0e1b      	lsrs	r3, r3, #24
 8008644:	f003 030f 	and.w	r3, r3, #15
 8008648:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800864a:	4b2f      	ldr	r3, [pc, #188]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800864c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008650:	0f1b      	lsrs	r3, r3, #28
 8008652:	f003 0307 	and.w	r3, r3, #7
 8008656:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	019a      	lsls	r2, r3, #6
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	041b      	lsls	r3, r3, #16
 8008664:	431a      	orrs	r2, r3
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	061b      	lsls	r3, r3, #24
 800866a:	431a      	orrs	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	071b      	lsls	r3, r3, #28
 8008670:	4925      	ldr	r1, [pc, #148]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008672:	4313      	orrs	r3, r2
 8008674:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d011      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	019a      	lsls	r2, r3, #6
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	041b      	lsls	r3, r3, #16
 8008690:	431a      	orrs	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	061b      	lsls	r3, r3, #24
 8008698:	431a      	orrs	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	071b      	lsls	r3, r3, #28
 80086a0:	4919      	ldr	r1, [pc, #100]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80086a8:	4b17      	ldr	r3, [pc, #92]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a16      	ldr	r2, [pc, #88]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086b4:	f7fd fc5a 	bl	8005f6c <HAL_GetTick>
 80086b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086ba:	e008      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80086bc:	f7fd fc56 	bl	8005f6c <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	2b64      	cmp	r3, #100	; 0x64
 80086c8:	d901      	bls.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e0d7      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086ce:	4b0e      	ldr	r3, [pc, #56]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0f0      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	f040 80cd 	bne.w	800887c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80086e2:	4b09      	ldr	r3, [pc, #36]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a08      	ldr	r2, [pc, #32]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ee:	f7fd fc3d 	bl	8005f6c <HAL_GetTick>
 80086f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80086f4:	e00a      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80086f6:	f7fd fc39 	bl	8005f6c <HAL_GetTick>
 80086fa:	4602      	mov	r2, r0
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	2b64      	cmp	r3, #100	; 0x64
 8008702:	d903      	bls.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e0ba      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008708:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800870c:	4b5e      	ldr	r3, [pc, #376]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008718:	d0ed      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872a:	2b00      	cmp	r3, #0
 800872c:	d009      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008736:	2b00      	cmp	r3, #0
 8008738:	d02e      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873e:	2b00      	cmp	r3, #0
 8008740:	d12a      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008742:	4b51      	ldr	r3, [pc, #324]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008748:	0c1b      	lsrs	r3, r3, #16
 800874a:	f003 0303 	and.w	r3, r3, #3
 800874e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008750:	4b4d      	ldr	r3, [pc, #308]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008756:	0f1b      	lsrs	r3, r3, #28
 8008758:	f003 0307 	and.w	r3, r3, #7
 800875c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	019a      	lsls	r2, r3, #6
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	041b      	lsls	r3, r3, #16
 8008768:	431a      	orrs	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	061b      	lsls	r3, r3, #24
 8008770:	431a      	orrs	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	071b      	lsls	r3, r3, #28
 8008776:	4944      	ldr	r1, [pc, #272]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008778:	4313      	orrs	r3, r2
 800877a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800877e:	4b42      	ldr	r3, [pc, #264]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008784:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878c:	3b01      	subs	r3, #1
 800878e:	021b      	lsls	r3, r3, #8
 8008790:	493d      	ldr	r1, [pc, #244]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008792:	4313      	orrs	r3, r2
 8008794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d022      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087ac:	d11d      	bne.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80087ae:	4b36      	ldr	r3, [pc, #216]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087b4:	0e1b      	lsrs	r3, r3, #24
 80087b6:	f003 030f 	and.w	r3, r3, #15
 80087ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80087bc:	4b32      	ldr	r3, [pc, #200]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c2:	0f1b      	lsrs	r3, r3, #28
 80087c4:	f003 0307 	and.w	r3, r3, #7
 80087c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	019a      	lsls	r2, r3, #6
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a1b      	ldr	r3, [r3, #32]
 80087d4:	041b      	lsls	r3, r3, #16
 80087d6:	431a      	orrs	r2, r3
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	061b      	lsls	r3, r3, #24
 80087dc:	431a      	orrs	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	071b      	lsls	r3, r3, #28
 80087e2:	4929      	ldr	r1, [pc, #164]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0308 	and.w	r3, r3, #8
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d028      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80087f6:	4b24      	ldr	r3, [pc, #144]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087fc:	0e1b      	lsrs	r3, r3, #24
 80087fe:	f003 030f 	and.w	r3, r3, #15
 8008802:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008804:	4b20      	ldr	r3, [pc, #128]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800880a:	0c1b      	lsrs	r3, r3, #16
 800880c:	f003 0303 	and.w	r3, r3, #3
 8008810:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	019a      	lsls	r2, r3, #6
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	041b      	lsls	r3, r3, #16
 800881c:	431a      	orrs	r2, r3
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	061b      	lsls	r3, r3, #24
 8008822:	431a      	orrs	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	69db      	ldr	r3, [r3, #28]
 8008828:	071b      	lsls	r3, r3, #28
 800882a:	4917      	ldr	r1, [pc, #92]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800882c:	4313      	orrs	r3, r2
 800882e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008832:	4b15      	ldr	r3, [pc, #84]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008838:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	4911      	ldr	r1, [pc, #68]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008842:	4313      	orrs	r3, r2
 8008844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008848:	4b0f      	ldr	r3, [pc, #60]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a0e      	ldr	r2, [pc, #56]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800884e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008854:	f7fd fb8a 	bl	8005f6c <HAL_GetTick>
 8008858:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800885a:	e008      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800885c:	f7fd fb86 	bl	8005f6c <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b64      	cmp	r3, #100	; 0x64
 8008868:	d901      	bls.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e007      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800886e:	4b06      	ldr	r3, [pc, #24]	; (8008888 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800887a:	d1ef      	bne.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3720      	adds	r7, #32
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	40023800 	.word	0x40023800

0800888c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e09d      	b.n	80089da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d108      	bne.n	80088b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088ae:	d009      	beq.n	80088c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	61da      	str	r2, [r3, #28]
 80088b6:	e005      	b.n	80088c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d106      	bne.n	80088e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f7fc fc18 	bl	8005114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2202      	movs	r2, #2
 80088e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008904:	d902      	bls.n	800890c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008906:	2300      	movs	r3, #0
 8008908:	60fb      	str	r3, [r7, #12]
 800890a:	e002      	b.n	8008912 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800890c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008910:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800891a:	d007      	beq.n	800892c <HAL_SPI_Init+0xa0>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008924:	d002      	beq.n	800892c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800893c:	431a      	orrs	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	431a      	orrs	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	431a      	orrs	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800895a:	431a      	orrs	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008964:	431a      	orrs	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a1b      	ldr	r3, [r3, #32]
 800896a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800896e:	ea42 0103 	orr.w	r1, r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008976:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	430a      	orrs	r2, r1
 8008980:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	0c1b      	lsrs	r3, r3, #16
 8008988:	f003 0204 	and.w	r2, r3, #4
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008990:	f003 0310 	and.w	r3, r3, #16
 8008994:	431a      	orrs	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899a:	f003 0308 	and.w	r3, r3, #8
 800899e:	431a      	orrs	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80089a8:	ea42 0103 	orr.w	r1, r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	69da      	ldr	r2, [r3, #28]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b08a      	sub	sp, #40	; 0x28
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	607a      	str	r2, [r7, #4]
 80089ee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80089f0:	2301      	movs	r3, #1
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d101      	bne.n	8008a08 <HAL_SPI_TransmitReceive+0x26>
 8008a04:	2302      	movs	r3, #2
 8008a06:	e1fb      	b.n	8008e00 <HAL_SPI_TransmitReceive+0x41e>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a10:	f7fd faac 	bl	8005f6c <HAL_GetTick>
 8008a14:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a1c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008a24:	887b      	ldrh	r3, [r7, #2]
 8008a26:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008a28:	887b      	ldrh	r3, [r7, #2]
 8008a2a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a2c:	7efb      	ldrb	r3, [r7, #27]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d00e      	beq.n	8008a50 <HAL_SPI_TransmitReceive+0x6e>
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a38:	d106      	bne.n	8008a48 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d102      	bne.n	8008a48 <HAL_SPI_TransmitReceive+0x66>
 8008a42:	7efb      	ldrb	r3, [r7, #27]
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d003      	beq.n	8008a50 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008a48:	2302      	movs	r3, #2
 8008a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008a4e:	e1cd      	b.n	8008dec <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d005      	beq.n	8008a62 <HAL_SPI_TransmitReceive+0x80>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <HAL_SPI_TransmitReceive+0x80>
 8008a5c:	887b      	ldrh	r3, [r7, #2]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d103      	bne.n	8008a6a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008a68:	e1c0      	b.n	8008dec <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	d003      	beq.n	8008a7e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2205      	movs	r2, #5
 8008a7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	887a      	ldrh	r2, [r7, #2]
 8008a8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	887a      	ldrh	r2, [r7, #2]
 8008a96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	887a      	ldrh	r2, [r7, #2]
 8008aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	887a      	ldrh	r2, [r7, #2]
 8008aaa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ac0:	d802      	bhi.n	8008ac8 <HAL_SPI_TransmitReceive+0xe6>
 8008ac2:	8a3b      	ldrh	r3, [r7, #16]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d908      	bls.n	8008ada <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	685a      	ldr	r2, [r3, #4]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008ad6:	605a      	str	r2, [r3, #4]
 8008ad8:	e007      	b.n	8008aea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ae8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af4:	2b40      	cmp	r3, #64	; 0x40
 8008af6:	d007      	beq.n	8008b08 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b10:	d97c      	bls.n	8008c0c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d002      	beq.n	8008b20 <HAL_SPI_TransmitReceive+0x13e>
 8008b1a:	8a7b      	ldrh	r3, [r7, #18]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d169      	bne.n	8008bf4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b24:	881a      	ldrh	r2, [r3, #0]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b30:	1c9a      	adds	r2, r3, #2
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b44:	e056      	b.n	8008bf4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f003 0302 	and.w	r3, r3, #2
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d11b      	bne.n	8008b8c <HAL_SPI_TransmitReceive+0x1aa>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d016      	beq.n	8008b8c <HAL_SPI_TransmitReceive+0x1aa>
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d113      	bne.n	8008b8c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b68:	881a      	ldrh	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b74:	1c9a      	adds	r2, r3, #2
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	3b01      	subs	r3, #1
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d11c      	bne.n	8008bd4 <HAL_SPI_TransmitReceive+0x1f2>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d016      	beq.n	8008bd4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68da      	ldr	r2, [r3, #12]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb0:	b292      	uxth	r2, r2
 8008bb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb8:	1c9a      	adds	r2, r3, #2
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008bd4:	f7fd f9ca 	bl	8005f6c <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d807      	bhi.n	8008bf4 <HAL_SPI_TransmitReceive+0x212>
 8008be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bea:	d003      	beq.n	8008bf4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008bf2:	e0fb      	b.n	8008dec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1a3      	bne.n	8008b46 <HAL_SPI_TransmitReceive+0x164>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d19d      	bne.n	8008b46 <HAL_SPI_TransmitReceive+0x164>
 8008c0a:	e0df      	b.n	8008dcc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d003      	beq.n	8008c1c <HAL_SPI_TransmitReceive+0x23a>
 8008c14:	8a7b      	ldrh	r3, [r7, #18]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	f040 80cb 	bne.w	8008db2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d912      	bls.n	8008c4c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2a:	881a      	ldrh	r2, [r3, #0]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c36:	1c9a      	adds	r2, r3, #2
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	3b02      	subs	r3, #2
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c4a:	e0b2      	b.n	8008db2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	330c      	adds	r3, #12
 8008c56:	7812      	ldrb	r2, [r2, #0]
 8008c58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5e:	1c5a      	adds	r2, r3, #1
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c72:	e09e      	b.n	8008db2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d134      	bne.n	8008cec <HAL_SPI_TransmitReceive+0x30a>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d02f      	beq.n	8008cec <HAL_SPI_TransmitReceive+0x30a>
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d12c      	bne.n	8008cec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d912      	bls.n	8008cc2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca0:	881a      	ldrh	r2, [r3, #0]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cac:	1c9a      	adds	r2, r3, #2
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	3b02      	subs	r3, #2
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008cc0:	e012      	b.n	8008ce8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	330c      	adds	r3, #12
 8008ccc:	7812      	ldrb	r2, [r2, #0]
 8008cce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd4:	1c5a      	adds	r2, r3, #1
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d148      	bne.n	8008d8c <HAL_SPI_TransmitReceive+0x3aa>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d042      	beq.n	8008d8c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d923      	bls.n	8008d5a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68da      	ldr	r2, [r3, #12]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1c:	b292      	uxth	r2, r2
 8008d1e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d24:	1c9a      	adds	r2, r3, #2
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	3b02      	subs	r3, #2
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d81f      	bhi.n	8008d88 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d56:	605a      	str	r2, [r3, #4]
 8008d58:	e016      	b.n	8008d88 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f103 020c 	add.w	r2, r3, #12
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d66:	7812      	ldrb	r2, [r2, #0]
 8008d68:	b2d2      	uxtb	r2, r2
 8008d6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d8c:	f7fd f8ee 	bl	8005f6c <HAL_GetTick>
 8008d90:	4602      	mov	r2, r0
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d803      	bhi.n	8008da4 <HAL_SPI_TransmitReceive+0x3c2>
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008da2:	d102      	bne.n	8008daa <HAL_SPI_TransmitReceive+0x3c8>
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d103      	bne.n	8008db2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008db0:	e01c      	b.n	8008dec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f47f af5b 	bne.w	8008c74 <HAL_SPI_TransmitReceive+0x292>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f47f af54 	bne.w	8008c74 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008dcc:	69fa      	ldr	r2, [r7, #28]
 8008dce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f000 f937 	bl	8009044 <SPI_EndRxTxTransaction>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d006      	beq.n	8008dea <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2220      	movs	r2, #32
 8008de6:	661a      	str	r2, [r3, #96]	; 0x60
 8008de8:	e000      	b.n	8008dec <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008dea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008dfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3728      	adds	r7, #40	; 0x28
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b088      	sub	sp, #32
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	603b      	str	r3, [r7, #0]
 8008e14:	4613      	mov	r3, r2
 8008e16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e18:	f7fd f8a8 	bl	8005f6c <HAL_GetTick>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	1a9b      	subs	r3, r3, r2
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	4413      	add	r3, r2
 8008e26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008e28:	f7fd f8a0 	bl	8005f6c <HAL_GetTick>
 8008e2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008e2e:	4b39      	ldr	r3, [pc, #228]	; (8008f14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	015b      	lsls	r3, r3, #5
 8008e34:	0d1b      	lsrs	r3, r3, #20
 8008e36:	69fa      	ldr	r2, [r7, #28]
 8008e38:	fb02 f303 	mul.w	r3, r2, r3
 8008e3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e3e:	e054      	b.n	8008eea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e46:	d050      	beq.n	8008eea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e48:	f7fd f890 	bl	8005f6c <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	69fa      	ldr	r2, [r7, #28]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d902      	bls.n	8008e5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d13d      	bne.n	8008eda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e76:	d111      	bne.n	8008e9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e80:	d004      	beq.n	8008e8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e8a:	d107      	bne.n	8008e9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ea4:	d10f      	bne.n	8008ec6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ec4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e017      	b.n	8008f0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689a      	ldr	r2, [r3, #8]
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	bf0c      	ite	eq
 8008efa:	2301      	moveq	r3, #1
 8008efc:	2300      	movne	r3, #0
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	461a      	mov	r2, r3
 8008f02:	79fb      	ldrb	r3, [r7, #7]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d19b      	bne.n	8008e40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3720      	adds	r7, #32
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20000260 	.word	0x20000260

08008f18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b08a      	sub	sp, #40	; 0x28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
 8008f24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008f2a:	f7fd f81f 	bl	8005f6c <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f32:	1a9b      	subs	r3, r3, r2
 8008f34:	683a      	ldr	r2, [r7, #0]
 8008f36:	4413      	add	r3, r2
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008f3a:	f7fd f817 	bl	8005f6c <HAL_GetTick>
 8008f3e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	330c      	adds	r3, #12
 8008f46:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008f48:	4b3d      	ldr	r3, [pc, #244]	; (8009040 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4413      	add	r3, r2
 8008f52:	00da      	lsls	r2, r3, #3
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	0d1b      	lsrs	r3, r3, #20
 8008f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f5a:	fb02 f303 	mul.w	r3, r2, r3
 8008f5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008f60:	e060      	b.n	8009024 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008f68:	d107      	bne.n	8008f7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d104      	bne.n	8008f7a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f80:	d050      	beq.n	8009024 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f82:	f7fc fff3 	bl	8005f6c <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d902      	bls.n	8008f98 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d13d      	bne.n	8009014 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008fa6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fb0:	d111      	bne.n	8008fd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fba:	d004      	beq.n	8008fc6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fc4:	d107      	bne.n	8008fd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fde:	d10f      	bne.n	8009000 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ffe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e010      	b.n	8009036 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	3b01      	subs	r3, #1
 8009022:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689a      	ldr	r2, [r3, #8]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	4013      	ands	r3, r2
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	429a      	cmp	r2, r3
 8009032:	d196      	bne.n	8008f62 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3728      	adds	r7, #40	; 0x28
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	20000260 	.word	0x20000260

08009044 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af02      	add	r7, sp, #8
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	2200      	movs	r2, #0
 8009058:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f7ff ff5b 	bl	8008f18 <SPI_WaitFifoStateUntilTimeout>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d007      	beq.n	8009078 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800906c:	f043 0220 	orr.w	r2, r3, #32
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e046      	b.n	8009106 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009078:	4b25      	ldr	r3, [pc, #148]	; (8009110 <SPI_EndRxTxTransaction+0xcc>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a25      	ldr	r2, [pc, #148]	; (8009114 <SPI_EndRxTxTransaction+0xd0>)
 800907e:	fba2 2303 	umull	r2, r3, r2, r3
 8009082:	0d5b      	lsrs	r3, r3, #21
 8009084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009088:	fb02 f303 	mul.w	r3, r2, r3
 800908c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009096:	d112      	bne.n	80090be <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2200      	movs	r2, #0
 80090a0:	2180      	movs	r1, #128	; 0x80
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f7ff feb0 	bl	8008e08 <SPI_WaitFlagStateUntilTimeout>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d016      	beq.n	80090dc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090b2:	f043 0220 	orr.w	r2, r3, #32
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e023      	b.n	8009106 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00a      	beq.n	80090da <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d4:	2b80      	cmp	r3, #128	; 0x80
 80090d6:	d0f2      	beq.n	80090be <SPI_EndRxTxTransaction+0x7a>
 80090d8:	e000      	b.n	80090dc <SPI_EndRxTxTransaction+0x98>
        break;
 80090da:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f7ff ff15 	bl	8008f18 <SPI_WaitFifoStateUntilTimeout>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d007      	beq.n	8009104 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090f8:	f043 0220 	orr.w	r2, r3, #32
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	e000      	b.n	8009106 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20000260 	.word	0x20000260
 8009114:	165e9f81 	.word	0x165e9f81

08009118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e054      	b.n	80091d4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	d111      	bne.n	800915a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fdf2 	bl	8009d28 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009148:	2b00      	cmp	r3, #0
 800914a:	d102      	bne.n	8009152 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a23      	ldr	r2, [pc, #140]	; (80091dc <HAL_TIM_Base_Init+0xc4>)
 8009150:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2202      	movs	r2, #2
 800915e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	3304      	adds	r3, #4
 800916a:	4619      	mov	r1, r3
 800916c:	4610      	mov	r0, r2
 800916e:	f000 fca1 	bl	8009ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	08005ab9 	.word	0x08005ab9

080091e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d001      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e054      	b.n	80092a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68da      	ldr	r2, [r3, #12]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f042 0201 	orr.w	r2, r2, #1
 800920e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a26      	ldr	r2, [pc, #152]	; (80092b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d022      	beq.n	8009260 <HAL_TIM_Base_Start_IT+0x80>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009222:	d01d      	beq.n	8009260 <HAL_TIM_Base_Start_IT+0x80>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a22      	ldr	r2, [pc, #136]	; (80092b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d018      	beq.n	8009260 <HAL_TIM_Base_Start_IT+0x80>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a21      	ldr	r2, [pc, #132]	; (80092b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d013      	beq.n	8009260 <HAL_TIM_Base_Start_IT+0x80>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a1f      	ldr	r2, [pc, #124]	; (80092bc <HAL_TIM_Base_Start_IT+0xdc>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d00e      	beq.n	8009260 <HAL_TIM_Base_Start_IT+0x80>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a1e      	ldr	r2, [pc, #120]	; (80092c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d009      	beq.n	8009260 <HAL_TIM_Base_Start_IT+0x80>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a1c      	ldr	r2, [pc, #112]	; (80092c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d004      	beq.n	8009260 <HAL_TIM_Base_Start_IT+0x80>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a1b      	ldr	r2, [pc, #108]	; (80092c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d115      	bne.n	800928c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	689a      	ldr	r2, [r3, #8]
 8009266:	4b19      	ldr	r3, [pc, #100]	; (80092cc <HAL_TIM_Base_Start_IT+0xec>)
 8009268:	4013      	ands	r3, r2
 800926a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2b06      	cmp	r3, #6
 8009270:	d015      	beq.n	800929e <HAL_TIM_Base_Start_IT+0xbe>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009278:	d011      	beq.n	800929e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f042 0201 	orr.w	r2, r2, #1
 8009288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800928a:	e008      	b.n	800929e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f042 0201 	orr.w	r2, r2, #1
 800929a:	601a      	str	r2, [r3, #0]
 800929c:	e000      	b.n	80092a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800929e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	40010000 	.word	0x40010000
 80092b4:	40000400 	.word	0x40000400
 80092b8:	40000800 	.word	0x40000800
 80092bc:	40000c00 	.word	0x40000c00
 80092c0:	40010400 	.word	0x40010400
 80092c4:	40014000 	.word	0x40014000
 80092c8:	40001800 	.word	0x40001800
 80092cc:	00010007 	.word	0x00010007

080092d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68da      	ldr	r2, [r3, #12]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f022 0201 	bic.w	r2, r2, #1
 80092e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6a1a      	ldr	r2, [r3, #32]
 80092ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80092f2:	4013      	ands	r3, r2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10f      	bne.n	8009318 <HAL_TIM_Base_Stop_IT+0x48>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6a1a      	ldr	r2, [r3, #32]
 80092fe:	f240 4344 	movw	r3, #1092	; 0x444
 8009302:	4013      	ands	r3, r2
 8009304:	2b00      	cmp	r3, #0
 8009306:	d107      	bne.n	8009318 <HAL_TIM_Base_Stop_IT+0x48>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f022 0201 	bic.w	r2, r2, #1
 8009316:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b082      	sub	sp, #8
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	f003 0302 	and.w	r3, r3, #2
 8009340:	2b02      	cmp	r3, #2
 8009342:	d128      	bne.n	8009396 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	f003 0302 	and.w	r3, r3, #2
 800934e:	2b02      	cmp	r3, #2
 8009350:	d121      	bne.n	8009396 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f06f 0202 	mvn.w	r2, #2
 800935a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	f003 0303 	and.w	r3, r3, #3
 800936c:	2b00      	cmp	r3, #0
 800936e:	d005      	beq.n	800937c <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	4798      	blx	r3
 800937a:	e009      	b.n	8009390 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	f003 0304 	and.w	r3, r3, #4
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	d128      	bne.n	80093f6 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f003 0304 	and.w	r3, r3, #4
 80093ae:	2b04      	cmp	r3, #4
 80093b0:	d121      	bne.n	80093f6 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f06f 0204 	mvn.w	r2, #4
 80093ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2202      	movs	r2, #2
 80093c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	699b      	ldr	r3, [r3, #24]
 80093c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d005      	beq.n	80093dc <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	4798      	blx	r3
 80093da:	e009      	b.n	80093f0 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	f003 0308 	and.w	r3, r3, #8
 8009400:	2b08      	cmp	r3, #8
 8009402:	d128      	bne.n	8009456 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	f003 0308 	and.w	r3, r3, #8
 800940e:	2b08      	cmp	r3, #8
 8009410:	d121      	bne.n	8009456 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f06f 0208 	mvn.w	r2, #8
 800941a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2204      	movs	r2, #4
 8009420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	f003 0303 	and.w	r3, r3, #3
 800942c:	2b00      	cmp	r3, #0
 800942e:	d005      	beq.n	800943c <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	4798      	blx	r3
 800943a:	e009      	b.n	8009450 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	f003 0310 	and.w	r3, r3, #16
 8009460:	2b10      	cmp	r3, #16
 8009462:	d128      	bne.n	80094b6 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	f003 0310 	and.w	r3, r3, #16
 800946e:	2b10      	cmp	r3, #16
 8009470:	d121      	bne.n	80094b6 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f06f 0210 	mvn.w	r2, #16
 800947a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2208      	movs	r2, #8
 8009480:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	69db      	ldr	r3, [r3, #28]
 8009488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800948c:	2b00      	cmp	r3, #0
 800948e:	d005      	beq.n	800949c <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	4798      	blx	r3
 800949a:	e009      	b.n	80094b0 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	f003 0301 	and.w	r3, r3, #1
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d110      	bne.n	80094e6 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d109      	bne.n	80094e6 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f06f 0201 	mvn.w	r2, #1
 80094da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f0:	2b80      	cmp	r3, #128	; 0x80
 80094f2:	d110      	bne.n	8009516 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094fe:	2b80      	cmp	r3, #128	; 0x80
 8009500:	d109      	bne.n	8009516 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800950a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009524:	d110      	bne.n	8009548 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009530:	2b80      	cmp	r3, #128	; 0x80
 8009532:	d109      	bne.n	8009548 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800953c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009552:	2b40      	cmp	r3, #64	; 0x40
 8009554:	d110      	bne.n	8009578 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009560:	2b40      	cmp	r3, #64	; 0x40
 8009562:	d109      	bne.n	8009578 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800956c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	f003 0320 	and.w	r3, r3, #32
 8009582:	2b20      	cmp	r3, #32
 8009584:	d110      	bne.n	80095a8 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	f003 0320 	and.w	r3, r3, #32
 8009590:	2b20      	cmp	r3, #32
 8009592:	d109      	bne.n	80095a8 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f06f 0220 	mvn.w	r2, #32
 800959c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095a8:	bf00      	nop
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d101      	bne.n	80095cc <HAL_TIM_ConfigClockSource+0x1c>
 80095c8:	2302      	movs	r3, #2
 80095ca:	e0b4      	b.n	8009736 <HAL_TIM_ConfigClockSource+0x186>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2202      	movs	r2, #2
 80095d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	4b56      	ldr	r3, [pc, #344]	; (8009740 <HAL_TIM_ConfigClockSource+0x190>)
 80095e8:	4013      	ands	r3, r2
 80095ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009604:	d03e      	beq.n	8009684 <HAL_TIM_ConfigClockSource+0xd4>
 8009606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800960a:	f200 8087 	bhi.w	800971c <HAL_TIM_ConfigClockSource+0x16c>
 800960e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009612:	f000 8086 	beq.w	8009722 <HAL_TIM_ConfigClockSource+0x172>
 8009616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961a:	d87f      	bhi.n	800971c <HAL_TIM_ConfigClockSource+0x16c>
 800961c:	2b70      	cmp	r3, #112	; 0x70
 800961e:	d01a      	beq.n	8009656 <HAL_TIM_ConfigClockSource+0xa6>
 8009620:	2b70      	cmp	r3, #112	; 0x70
 8009622:	d87b      	bhi.n	800971c <HAL_TIM_ConfigClockSource+0x16c>
 8009624:	2b60      	cmp	r3, #96	; 0x60
 8009626:	d050      	beq.n	80096ca <HAL_TIM_ConfigClockSource+0x11a>
 8009628:	2b60      	cmp	r3, #96	; 0x60
 800962a:	d877      	bhi.n	800971c <HAL_TIM_ConfigClockSource+0x16c>
 800962c:	2b50      	cmp	r3, #80	; 0x50
 800962e:	d03c      	beq.n	80096aa <HAL_TIM_ConfigClockSource+0xfa>
 8009630:	2b50      	cmp	r3, #80	; 0x50
 8009632:	d873      	bhi.n	800971c <HAL_TIM_ConfigClockSource+0x16c>
 8009634:	2b40      	cmp	r3, #64	; 0x40
 8009636:	d058      	beq.n	80096ea <HAL_TIM_ConfigClockSource+0x13a>
 8009638:	2b40      	cmp	r3, #64	; 0x40
 800963a:	d86f      	bhi.n	800971c <HAL_TIM_ConfigClockSource+0x16c>
 800963c:	2b30      	cmp	r3, #48	; 0x30
 800963e:	d064      	beq.n	800970a <HAL_TIM_ConfigClockSource+0x15a>
 8009640:	2b30      	cmp	r3, #48	; 0x30
 8009642:	d86b      	bhi.n	800971c <HAL_TIM_ConfigClockSource+0x16c>
 8009644:	2b20      	cmp	r3, #32
 8009646:	d060      	beq.n	800970a <HAL_TIM_ConfigClockSource+0x15a>
 8009648:	2b20      	cmp	r3, #32
 800964a:	d867      	bhi.n	800971c <HAL_TIM_ConfigClockSource+0x16c>
 800964c:	2b00      	cmp	r3, #0
 800964e:	d05c      	beq.n	800970a <HAL_TIM_ConfigClockSource+0x15a>
 8009650:	2b10      	cmp	r3, #16
 8009652:	d05a      	beq.n	800970a <HAL_TIM_ConfigClockSource+0x15a>
 8009654:	e062      	b.n	800971c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009666:	f000 fb3f 	bl	8009ce8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009678:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	609a      	str	r2, [r3, #8]
      break;
 8009682:	e04f      	b.n	8009724 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009694:	f000 fb28 	bl	8009ce8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689a      	ldr	r2, [r3, #8]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096a6:	609a      	str	r2, [r3, #8]
      break;
 80096a8:	e03c      	b.n	8009724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096b6:	461a      	mov	r2, r3
 80096b8:	f000 fa9c 	bl	8009bf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2150      	movs	r1, #80	; 0x50
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 faf5 	bl	8009cb2 <TIM_ITRx_SetConfig>
      break;
 80096c8:	e02c      	b.n	8009724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096d6:	461a      	mov	r2, r3
 80096d8:	f000 fabb 	bl	8009c52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2160      	movs	r1, #96	; 0x60
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 fae5 	bl	8009cb2 <TIM_ITRx_SetConfig>
      break;
 80096e8:	e01c      	b.n	8009724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096f6:	461a      	mov	r2, r3
 80096f8:	f000 fa7c 	bl	8009bf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2140      	movs	r1, #64	; 0x40
 8009702:	4618      	mov	r0, r3
 8009704:	f000 fad5 	bl	8009cb2 <TIM_ITRx_SetConfig>
      break;
 8009708:	e00c      	b.n	8009724 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4619      	mov	r1, r3
 8009714:	4610      	mov	r0, r2
 8009716:	f000 facc 	bl	8009cb2 <TIM_ITRx_SetConfig>
      break;
 800971a:	e003      	b.n	8009724 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	73fb      	strb	r3, [r7, #15]
      break;
 8009720:	e000      	b.n	8009724 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009722:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009734:	7bfb      	ldrb	r3, [r7, #15]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	fffeff88 	.word	0xfffeff88

08009744 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800980c:	b480      	push	{r7}
 800980e:	b087      	sub	sp, #28
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	460b      	mov	r3, r1
 8009816:	607a      	str	r2, [r7, #4]
 8009818:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d101      	bne.n	8009828 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e13e      	b.n	8009aa6 <HAL_TIM_RegisterCallback+0x29a>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800982e:	2b01      	cmp	r3, #1
 8009830:	d101      	bne.n	8009836 <HAL_TIM_RegisterCallback+0x2a>
 8009832:	2302      	movs	r3, #2
 8009834:	e137      	b.n	8009aa6 <HAL_TIM_RegisterCallback+0x29a>
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b01      	cmp	r3, #1
 8009848:	f040 80c2 	bne.w	80099d0 <HAL_TIM_RegisterCallback+0x1c4>
  {
    switch (CallbackID)
 800984c:	7afb      	ldrb	r3, [r7, #11]
 800984e:	2b1b      	cmp	r3, #27
 8009850:	f200 80bb 	bhi.w	80099ca <HAL_TIM_RegisterCallback+0x1be>
 8009854:	a201      	add	r2, pc, #4	; (adr r2, 800985c <HAL_TIM_RegisterCallback+0x50>)
 8009856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985a:	bf00      	nop
 800985c:	080098cd 	.word	0x080098cd
 8009860:	080098d5 	.word	0x080098d5
 8009864:	080098dd 	.word	0x080098dd
 8009868:	080098e5 	.word	0x080098e5
 800986c:	080098ed 	.word	0x080098ed
 8009870:	080098f5 	.word	0x080098f5
 8009874:	080098fd 	.word	0x080098fd
 8009878:	08009905 	.word	0x08009905
 800987c:	0800990d 	.word	0x0800990d
 8009880:	08009915 	.word	0x08009915
 8009884:	0800991d 	.word	0x0800991d
 8009888:	08009925 	.word	0x08009925
 800988c:	0800992d 	.word	0x0800992d
 8009890:	08009935 	.word	0x08009935
 8009894:	0800993f 	.word	0x0800993f
 8009898:	08009949 	.word	0x08009949
 800989c:	08009953 	.word	0x08009953
 80098a0:	0800995d 	.word	0x0800995d
 80098a4:	08009967 	.word	0x08009967
 80098a8:	08009971 	.word	0x08009971
 80098ac:	0800997b 	.word	0x0800997b
 80098b0:	08009985 	.word	0x08009985
 80098b4:	0800998f 	.word	0x0800998f
 80098b8:	08009999 	.word	0x08009999
 80098bc:	080099a3 	.word	0x080099a3
 80098c0:	080099ad 	.word	0x080099ad
 80098c4:	080099b7 	.word	0x080099b7
 80098c8:	080099c1 	.word	0x080099c1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80098d2:	e0e3      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80098da:	e0df      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80098e2:	e0db      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80098ea:	e0d7      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80098f2:	e0d3      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80098fa:	e0cf      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009902:	e0cb      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800990a:	e0c7      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009912:	e0c3      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800991a:	e0bf      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009922:	e0bb      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800992a:	e0b7      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009932:	e0b3      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800993c:	e0ae      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8009946:	e0a9      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8009950:	e0a4      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800995a:	e09f      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8009964:	e09a      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800996e:	e095      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8009978:	e090      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8009982:	e08b      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800998c:	e086      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8009996:	e081      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80099a0:	e07c      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80099aa:	e077      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80099b4:	e072      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 80099be:	e06d      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 80099c8:	e068      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	75fb      	strb	r3, [r7, #23]
        break;
 80099ce:	e065      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d15d      	bne.n	8009a98 <HAL_TIM_RegisterCallback+0x28c>
  {
    switch (CallbackID)
 80099dc:	7afb      	ldrb	r3, [r7, #11]
 80099de:	2b0d      	cmp	r3, #13
 80099e0:	d857      	bhi.n	8009a92 <HAL_TIM_RegisterCallback+0x286>
 80099e2:	a201      	add	r2, pc, #4	; (adr r2, 80099e8 <HAL_TIM_RegisterCallback+0x1dc>)
 80099e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e8:	08009a21 	.word	0x08009a21
 80099ec:	08009a29 	.word	0x08009a29
 80099f0:	08009a31 	.word	0x08009a31
 80099f4:	08009a39 	.word	0x08009a39
 80099f8:	08009a41 	.word	0x08009a41
 80099fc:	08009a49 	.word	0x08009a49
 8009a00:	08009a51 	.word	0x08009a51
 8009a04:	08009a59 	.word	0x08009a59
 8009a08:	08009a61 	.word	0x08009a61
 8009a0c:	08009a69 	.word	0x08009a69
 8009a10:	08009a71 	.word	0x08009a71
 8009a14:	08009a79 	.word	0x08009a79
 8009a18:	08009a81 	.word	0x08009a81
 8009a1c:	08009a89 	.word	0x08009a89
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009a26:	e039      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009a2e:	e035      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009a36:	e031      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009a3e:	e02d      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009a46:	e029      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009a4e:	e025      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009a56:	e021      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009a5e:	e01d      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009a66:	e019      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009a6e:	e015      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009a76:	e011      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009a7e:	e00d      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009a86:	e009      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009a90:	e004      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	75fb      	strb	r3, [r7, #23]
        break;
 8009a96:	e001      	b.n	8009a9c <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	371c      	adds	r7, #28
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop

08009ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a40      	ldr	r2, [pc, #256]	; (8009bc8 <TIM_Base_SetConfig+0x114>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d013      	beq.n	8009af4 <TIM_Base_SetConfig+0x40>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ad2:	d00f      	beq.n	8009af4 <TIM_Base_SetConfig+0x40>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a3d      	ldr	r2, [pc, #244]	; (8009bcc <TIM_Base_SetConfig+0x118>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d00b      	beq.n	8009af4 <TIM_Base_SetConfig+0x40>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a3c      	ldr	r2, [pc, #240]	; (8009bd0 <TIM_Base_SetConfig+0x11c>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d007      	beq.n	8009af4 <TIM_Base_SetConfig+0x40>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a3b      	ldr	r2, [pc, #236]	; (8009bd4 <TIM_Base_SetConfig+0x120>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d003      	beq.n	8009af4 <TIM_Base_SetConfig+0x40>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a3a      	ldr	r2, [pc, #232]	; (8009bd8 <TIM_Base_SetConfig+0x124>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d108      	bne.n	8009b06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a2f      	ldr	r2, [pc, #188]	; (8009bc8 <TIM_Base_SetConfig+0x114>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d02b      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b14:	d027      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a2c      	ldr	r2, [pc, #176]	; (8009bcc <TIM_Base_SetConfig+0x118>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d023      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a2b      	ldr	r2, [pc, #172]	; (8009bd0 <TIM_Base_SetConfig+0x11c>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d01f      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a2a      	ldr	r2, [pc, #168]	; (8009bd4 <TIM_Base_SetConfig+0x120>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d01b      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a29      	ldr	r2, [pc, #164]	; (8009bd8 <TIM_Base_SetConfig+0x124>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d017      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a28      	ldr	r2, [pc, #160]	; (8009bdc <TIM_Base_SetConfig+0x128>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d013      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a27      	ldr	r2, [pc, #156]	; (8009be0 <TIM_Base_SetConfig+0x12c>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d00f      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a26      	ldr	r2, [pc, #152]	; (8009be4 <TIM_Base_SetConfig+0x130>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d00b      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a25      	ldr	r2, [pc, #148]	; (8009be8 <TIM_Base_SetConfig+0x134>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d007      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a24      	ldr	r2, [pc, #144]	; (8009bec <TIM_Base_SetConfig+0x138>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d003      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a23      	ldr	r2, [pc, #140]	; (8009bf0 <TIM_Base_SetConfig+0x13c>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d108      	bne.n	8009b78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	689a      	ldr	r2, [r3, #8]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a0a      	ldr	r2, [pc, #40]	; (8009bc8 <TIM_Base_SetConfig+0x114>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d003      	beq.n	8009bac <TIM_Base_SetConfig+0xf8>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a0c      	ldr	r2, [pc, #48]	; (8009bd8 <TIM_Base_SetConfig+0x124>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d103      	bne.n	8009bb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	691a      	ldr	r2, [r3, #16]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	615a      	str	r2, [r3, #20]
}
 8009bba:	bf00      	nop
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	40010000 	.word	0x40010000
 8009bcc:	40000400 	.word	0x40000400
 8009bd0:	40000800 	.word	0x40000800
 8009bd4:	40000c00 	.word	0x40000c00
 8009bd8:	40010400 	.word	0x40010400
 8009bdc:	40014000 	.word	0x40014000
 8009be0:	40014400 	.word	0x40014400
 8009be4:	40014800 	.word	0x40014800
 8009be8:	40001800 	.word	0x40001800
 8009bec:	40001c00 	.word	0x40001c00
 8009bf0:	40002000 	.word	0x40002000

08009bf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b087      	sub	sp, #28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6a1b      	ldr	r3, [r3, #32]
 8009c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	f023 0201 	bic.w	r2, r3, #1
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	011b      	lsls	r3, r3, #4
 8009c24:	693a      	ldr	r2, [r7, #16]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f023 030a 	bic.w	r3, r3, #10
 8009c30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	693a      	ldr	r2, [r7, #16]
 8009c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	621a      	str	r2, [r3, #32]
}
 8009c46:	bf00      	nop
 8009c48:	371c      	adds	r7, #28
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b087      	sub	sp, #28
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	60f8      	str	r0, [r7, #12]
 8009c5a:	60b9      	str	r1, [r7, #8]
 8009c5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	f023 0210 	bic.w	r2, r3, #16
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6a1b      	ldr	r3, [r3, #32]
 8009c74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	031b      	lsls	r3, r3, #12
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	011b      	lsls	r3, r3, #4
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	621a      	str	r2, [r3, #32]
}
 8009ca6:	bf00      	nop
 8009ca8:	371c      	adds	r7, #28
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr

08009cb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009cb2:	b480      	push	{r7}
 8009cb4:	b085      	sub	sp, #20
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	f043 0307 	orr.w	r3, r3, #7
 8009cd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	609a      	str	r2, [r3, #8]
}
 8009cdc:	bf00      	nop
 8009cde:	3714      	adds	r7, #20
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b087      	sub	sp, #28
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	607a      	str	r2, [r7, #4]
 8009cf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	021a      	lsls	r2, r3, #8
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	697a      	ldr	r2, [r7, #20]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	697a      	ldr	r2, [r7, #20]
 8009d1a:	609a      	str	r2, [r3, #8]
}
 8009d1c:	bf00      	nop
 8009d1e:	371c      	adds	r7, #28
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a1e      	ldr	r2, [pc, #120]	; (8009dac <TIM_ResetCallback+0x84>)
 8009d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a1d      	ldr	r2, [pc, #116]	; (8009db0 <TIM_ResetCallback+0x88>)
 8009d3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a1c      	ldr	r2, [pc, #112]	; (8009db4 <TIM_ResetCallback+0x8c>)
 8009d44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a1b      	ldr	r2, [pc, #108]	; (8009db8 <TIM_ResetCallback+0x90>)
 8009d4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a1a      	ldr	r2, [pc, #104]	; (8009dbc <TIM_ResetCallback+0x94>)
 8009d54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a19      	ldr	r2, [pc, #100]	; (8009dc0 <TIM_ResetCallback+0x98>)
 8009d5c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a18      	ldr	r2, [pc, #96]	; (8009dc4 <TIM_ResetCallback+0x9c>)
 8009d64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a17      	ldr	r2, [pc, #92]	; (8009dc8 <TIM_ResetCallback+0xa0>)
 8009d6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a16      	ldr	r2, [pc, #88]	; (8009dcc <TIM_ResetCallback+0xa4>)
 8009d74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a15      	ldr	r2, [pc, #84]	; (8009dd0 <TIM_ResetCallback+0xa8>)
 8009d7c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a14      	ldr	r2, [pc, #80]	; (8009dd4 <TIM_ResetCallback+0xac>)
 8009d84:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a13      	ldr	r2, [pc, #76]	; (8009dd8 <TIM_ResetCallback+0xb0>)
 8009d8c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a12      	ldr	r2, [pc, #72]	; (8009ddc <TIM_ResetCallback+0xb4>)
 8009d94:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a11      	ldr	r2, [pc, #68]	; (8009de0 <TIM_ResetCallback+0xb8>)
 8009d9c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	08009745 	.word	0x08009745
 8009db0:	08009759 	.word	0x08009759
 8009db4:	080097d1 	.word	0x080097d1
 8009db8:	080097e5 	.word	0x080097e5
 8009dbc:	08009781 	.word	0x08009781
 8009dc0:	08009795 	.word	0x08009795
 8009dc4:	0800976d 	.word	0x0800976d
 8009dc8:	080097a9 	.word	0x080097a9
 8009dcc:	080097bd 	.word	0x080097bd
 8009dd0:	080097f9 	.word	0x080097f9
 8009dd4:	08009f01 	.word	0x08009f01
 8009dd8:	08009f15 	.word	0x08009f15
 8009ddc:	08009f29 	.word	0x08009f29
 8009de0:	08009f3d 	.word	0x08009f3d

08009de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d101      	bne.n	8009dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009df8:	2302      	movs	r3, #2
 8009dfa:	e06d      	b.n	8009ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2202      	movs	r2, #2
 8009e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a30      	ldr	r2, [pc, #192]	; (8009ee4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d004      	beq.n	8009e30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a2f      	ldr	r2, [pc, #188]	; (8009ee8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d108      	bne.n	8009e42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a20      	ldr	r2, [pc, #128]	; (8009ee4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d022      	beq.n	8009eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e6e:	d01d      	beq.n	8009eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a1d      	ldr	r2, [pc, #116]	; (8009eec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d018      	beq.n	8009eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a1c      	ldr	r2, [pc, #112]	; (8009ef0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d013      	beq.n	8009eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a1a      	ldr	r2, [pc, #104]	; (8009ef4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d00e      	beq.n	8009eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a15      	ldr	r2, [pc, #84]	; (8009ee8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d009      	beq.n	8009eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a16      	ldr	r2, [pc, #88]	; (8009ef8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d004      	beq.n	8009eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a15      	ldr	r2, [pc, #84]	; (8009efc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d10c      	bne.n	8009ec6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009eb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	68ba      	ldr	r2, [r7, #8]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	40010000 	.word	0x40010000
 8009ee8:	40010400 	.word	0x40010400
 8009eec:	40000400 	.word	0x40000400
 8009ef0:	40000800 	.word	0x40000800
 8009ef4:	40000c00 	.word	0x40000c00
 8009ef8:	40014000 	.word	0x40014000
 8009efc:	40001800 	.word	0x40001800

08009f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <_ZdlPvj>:
 8009f50:	f000 b811 	b.w	8009f76 <_ZdlPv>

08009f54 <_Znwj>:
 8009f54:	2801      	cmp	r0, #1
 8009f56:	bf38      	it	cc
 8009f58:	2001      	movcc	r0, #1
 8009f5a:	b510      	push	{r4, lr}
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f000 fa8e 	bl	800a480 <malloc>
 8009f64:	b100      	cbz	r0, 8009f68 <_Znwj+0x14>
 8009f66:	bd10      	pop	{r4, pc}
 8009f68:	f000 f808 	bl	8009f7c <_ZSt15get_new_handlerv>
 8009f6c:	b908      	cbnz	r0, 8009f72 <_Znwj+0x1e>
 8009f6e:	f000 fa80 	bl	800a472 <abort>
 8009f72:	4780      	blx	r0
 8009f74:	e7f3      	b.n	8009f5e <_Znwj+0xa>

08009f76 <_ZdlPv>:
 8009f76:	f000 ba8b 	b.w	800a490 <free>
	...

08009f7c <_ZSt15get_new_handlerv>:
 8009f7c:	4b02      	ldr	r3, [pc, #8]	; (8009f88 <_ZSt15get_new_handlerv+0xc>)
 8009f7e:	6818      	ldr	r0, [r3, #0]
 8009f80:	f3bf 8f5b 	dmb	ish
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	2000056c 	.word	0x2000056c

08009f8c <atan2>:
 8009f8c:	f000 b800 	b.w	8009f90 <__ieee754_atan2>

08009f90 <__ieee754_atan2>:
 8009f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f94:	ec57 6b11 	vmov	r6, r7, d1
 8009f98:	4273      	negs	r3, r6
 8009f9a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800a118 <__ieee754_atan2+0x188>
 8009f9e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009fa2:	4333      	orrs	r3, r6
 8009fa4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009fa8:	4543      	cmp	r3, r8
 8009faa:	ec51 0b10 	vmov	r0, r1, d0
 8009fae:	ee11 5a10 	vmov	r5, s2
 8009fb2:	d80a      	bhi.n	8009fca <__ieee754_atan2+0x3a>
 8009fb4:	4244      	negs	r4, r0
 8009fb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009fba:	4304      	orrs	r4, r0
 8009fbc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009fc0:	4544      	cmp	r4, r8
 8009fc2:	ee10 9a10 	vmov	r9, s0
 8009fc6:	468e      	mov	lr, r1
 8009fc8:	d907      	bls.n	8009fda <__ieee754_atan2+0x4a>
 8009fca:	4632      	mov	r2, r6
 8009fcc:	463b      	mov	r3, r7
 8009fce:	f7f6 f921 	bl	8000214 <__adddf3>
 8009fd2:	ec41 0b10 	vmov	d0, r0, r1
 8009fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fda:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009fde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009fe2:	4334      	orrs	r4, r6
 8009fe4:	d103      	bne.n	8009fee <__ieee754_atan2+0x5e>
 8009fe6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fea:	f000 b899 	b.w	800a120 <atan>
 8009fee:	17bc      	asrs	r4, r7, #30
 8009ff0:	f004 0402 	and.w	r4, r4, #2
 8009ff4:	ea53 0909 	orrs.w	r9, r3, r9
 8009ff8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009ffc:	d107      	bne.n	800a00e <__ieee754_atan2+0x7e>
 8009ffe:	2c02      	cmp	r4, #2
 800a000:	d05f      	beq.n	800a0c2 <__ieee754_atan2+0x132>
 800a002:	2c03      	cmp	r4, #3
 800a004:	d1e5      	bne.n	8009fd2 <__ieee754_atan2+0x42>
 800a006:	a140      	add	r1, pc, #256	; (adr r1, 800a108 <__ieee754_atan2+0x178>)
 800a008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a00c:	e7e1      	b.n	8009fd2 <__ieee754_atan2+0x42>
 800a00e:	4315      	orrs	r5, r2
 800a010:	d106      	bne.n	800a020 <__ieee754_atan2+0x90>
 800a012:	f1be 0f00 	cmp.w	lr, #0
 800a016:	da5f      	bge.n	800a0d8 <__ieee754_atan2+0x148>
 800a018:	a13d      	add	r1, pc, #244	; (adr r1, 800a110 <__ieee754_atan2+0x180>)
 800a01a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a01e:	e7d8      	b.n	8009fd2 <__ieee754_atan2+0x42>
 800a020:	4542      	cmp	r2, r8
 800a022:	d10f      	bne.n	800a044 <__ieee754_atan2+0xb4>
 800a024:	4293      	cmp	r3, r2
 800a026:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a02a:	d107      	bne.n	800a03c <__ieee754_atan2+0xac>
 800a02c:	2c02      	cmp	r4, #2
 800a02e:	d84c      	bhi.n	800a0ca <__ieee754_atan2+0x13a>
 800a030:	4b33      	ldr	r3, [pc, #204]	; (800a100 <__ieee754_atan2+0x170>)
 800a032:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a036:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a03a:	e7ca      	b.n	8009fd2 <__ieee754_atan2+0x42>
 800a03c:	2c02      	cmp	r4, #2
 800a03e:	d848      	bhi.n	800a0d2 <__ieee754_atan2+0x142>
 800a040:	4b30      	ldr	r3, [pc, #192]	; (800a104 <__ieee754_atan2+0x174>)
 800a042:	e7f6      	b.n	800a032 <__ieee754_atan2+0xa2>
 800a044:	4543      	cmp	r3, r8
 800a046:	d0e4      	beq.n	800a012 <__ieee754_atan2+0x82>
 800a048:	1a9b      	subs	r3, r3, r2
 800a04a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a04e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a052:	da1e      	bge.n	800a092 <__ieee754_atan2+0x102>
 800a054:	2f00      	cmp	r7, #0
 800a056:	da01      	bge.n	800a05c <__ieee754_atan2+0xcc>
 800a058:	323c      	adds	r2, #60	; 0x3c
 800a05a:	db1e      	blt.n	800a09a <__ieee754_atan2+0x10a>
 800a05c:	4632      	mov	r2, r6
 800a05e:	463b      	mov	r3, r7
 800a060:	f7f6 fbb8 	bl	80007d4 <__aeabi_ddiv>
 800a064:	ec41 0b10 	vmov	d0, r0, r1
 800a068:	f000 f9fa 	bl	800a460 <fabs>
 800a06c:	f000 f858 	bl	800a120 <atan>
 800a070:	ec51 0b10 	vmov	r0, r1, d0
 800a074:	2c01      	cmp	r4, #1
 800a076:	d013      	beq.n	800a0a0 <__ieee754_atan2+0x110>
 800a078:	2c02      	cmp	r4, #2
 800a07a:	d015      	beq.n	800a0a8 <__ieee754_atan2+0x118>
 800a07c:	2c00      	cmp	r4, #0
 800a07e:	d0a8      	beq.n	8009fd2 <__ieee754_atan2+0x42>
 800a080:	a317      	add	r3, pc, #92	; (adr r3, 800a0e0 <__ieee754_atan2+0x150>)
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	f7f6 f8c3 	bl	8000210 <__aeabi_dsub>
 800a08a:	a317      	add	r3, pc, #92	; (adr r3, 800a0e8 <__ieee754_atan2+0x158>)
 800a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a090:	e014      	b.n	800a0bc <__ieee754_atan2+0x12c>
 800a092:	a117      	add	r1, pc, #92	; (adr r1, 800a0f0 <__ieee754_atan2+0x160>)
 800a094:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a098:	e7ec      	b.n	800a074 <__ieee754_atan2+0xe4>
 800a09a:	2000      	movs	r0, #0
 800a09c:	2100      	movs	r1, #0
 800a09e:	e7e9      	b.n	800a074 <__ieee754_atan2+0xe4>
 800a0a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	e794      	b.n	8009fd2 <__ieee754_atan2+0x42>
 800a0a8:	a30d      	add	r3, pc, #52	; (adr r3, 800a0e0 <__ieee754_atan2+0x150>)
 800a0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ae:	f7f6 f8af 	bl	8000210 <__aeabi_dsub>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	a10c      	add	r1, pc, #48	; (adr r1, 800a0e8 <__ieee754_atan2+0x158>)
 800a0b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0bc:	f7f6 f8a8 	bl	8000210 <__aeabi_dsub>
 800a0c0:	e787      	b.n	8009fd2 <__ieee754_atan2+0x42>
 800a0c2:	a109      	add	r1, pc, #36	; (adr r1, 800a0e8 <__ieee754_atan2+0x158>)
 800a0c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0c8:	e783      	b.n	8009fd2 <__ieee754_atan2+0x42>
 800a0ca:	a10b      	add	r1, pc, #44	; (adr r1, 800a0f8 <__ieee754_atan2+0x168>)
 800a0cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0d0:	e77f      	b.n	8009fd2 <__ieee754_atan2+0x42>
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	e77c      	b.n	8009fd2 <__ieee754_atan2+0x42>
 800a0d8:	a105      	add	r1, pc, #20	; (adr r1, 800a0f0 <__ieee754_atan2+0x160>)
 800a0da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0de:	e778      	b.n	8009fd2 <__ieee754_atan2+0x42>
 800a0e0:	33145c07 	.word	0x33145c07
 800a0e4:	3ca1a626 	.word	0x3ca1a626
 800a0e8:	54442d18 	.word	0x54442d18
 800a0ec:	400921fb 	.word	0x400921fb
 800a0f0:	54442d18 	.word	0x54442d18
 800a0f4:	3ff921fb 	.word	0x3ff921fb
 800a0f8:	54442d18 	.word	0x54442d18
 800a0fc:	3fe921fb 	.word	0x3fe921fb
 800a100:	0800a8c8 	.word	0x0800a8c8
 800a104:	0800a8e0 	.word	0x0800a8e0
 800a108:	54442d18 	.word	0x54442d18
 800a10c:	c00921fb 	.word	0xc00921fb
 800a110:	54442d18 	.word	0x54442d18
 800a114:	bff921fb 	.word	0xbff921fb
 800a118:	7ff00000 	.word	0x7ff00000
 800a11c:	00000000 	.word	0x00000000

0800a120 <atan>:
 800a120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a124:	ec55 4b10 	vmov	r4, r5, d0
 800a128:	4bc3      	ldr	r3, [pc, #780]	; (800a438 <atan+0x318>)
 800a12a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a12e:	429e      	cmp	r6, r3
 800a130:	46ab      	mov	fp, r5
 800a132:	dd18      	ble.n	800a166 <atan+0x46>
 800a134:	4bc1      	ldr	r3, [pc, #772]	; (800a43c <atan+0x31c>)
 800a136:	429e      	cmp	r6, r3
 800a138:	dc01      	bgt.n	800a13e <atan+0x1e>
 800a13a:	d109      	bne.n	800a150 <atan+0x30>
 800a13c:	b144      	cbz	r4, 800a150 <atan+0x30>
 800a13e:	4622      	mov	r2, r4
 800a140:	462b      	mov	r3, r5
 800a142:	4620      	mov	r0, r4
 800a144:	4629      	mov	r1, r5
 800a146:	f7f6 f865 	bl	8000214 <__adddf3>
 800a14a:	4604      	mov	r4, r0
 800a14c:	460d      	mov	r5, r1
 800a14e:	e006      	b.n	800a15e <atan+0x3e>
 800a150:	f1bb 0f00 	cmp.w	fp, #0
 800a154:	f300 8131 	bgt.w	800a3ba <atan+0x29a>
 800a158:	a59b      	add	r5, pc, #620	; (adr r5, 800a3c8 <atan+0x2a8>)
 800a15a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a15e:	ec45 4b10 	vmov	d0, r4, r5
 800a162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a166:	4bb6      	ldr	r3, [pc, #728]	; (800a440 <atan+0x320>)
 800a168:	429e      	cmp	r6, r3
 800a16a:	dc14      	bgt.n	800a196 <atan+0x76>
 800a16c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a170:	429e      	cmp	r6, r3
 800a172:	dc0d      	bgt.n	800a190 <atan+0x70>
 800a174:	a396      	add	r3, pc, #600	; (adr r3, 800a3d0 <atan+0x2b0>)
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	ee10 0a10 	vmov	r0, s0
 800a17e:	4629      	mov	r1, r5
 800a180:	f7f6 f848 	bl	8000214 <__adddf3>
 800a184:	4baf      	ldr	r3, [pc, #700]	; (800a444 <atan+0x324>)
 800a186:	2200      	movs	r2, #0
 800a188:	f7f6 fc8a 	bl	8000aa0 <__aeabi_dcmpgt>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d1e6      	bne.n	800a15e <atan+0x3e>
 800a190:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a194:	e02b      	b.n	800a1ee <atan+0xce>
 800a196:	f000 f963 	bl	800a460 <fabs>
 800a19a:	4bab      	ldr	r3, [pc, #684]	; (800a448 <atan+0x328>)
 800a19c:	429e      	cmp	r6, r3
 800a19e:	ec55 4b10 	vmov	r4, r5, d0
 800a1a2:	f300 80bf 	bgt.w	800a324 <atan+0x204>
 800a1a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a1aa:	429e      	cmp	r6, r3
 800a1ac:	f300 80a0 	bgt.w	800a2f0 <atan+0x1d0>
 800a1b0:	ee10 2a10 	vmov	r2, s0
 800a1b4:	ee10 0a10 	vmov	r0, s0
 800a1b8:	462b      	mov	r3, r5
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	f7f6 f82a 	bl	8000214 <__adddf3>
 800a1c0:	4ba0      	ldr	r3, [pc, #640]	; (800a444 <atan+0x324>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f7f6 f824 	bl	8000210 <__aeabi_dsub>
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	460f      	mov	r7, r1
 800a1ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	f7f6 f81d 	bl	8000214 <__adddf3>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	4630      	mov	r0, r6
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	f7f6 faf7 	bl	80007d4 <__aeabi_ddiv>
 800a1e6:	f04f 0a00 	mov.w	sl, #0
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	460d      	mov	r5, r1
 800a1ee:	4622      	mov	r2, r4
 800a1f0:	462b      	mov	r3, r5
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	f7f6 f9c3 	bl	8000580 <__aeabi_dmul>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	4680      	mov	r8, r0
 800a200:	4689      	mov	r9, r1
 800a202:	f7f6 f9bd 	bl	8000580 <__aeabi_dmul>
 800a206:	a374      	add	r3, pc, #464	; (adr r3, 800a3d8 <atan+0x2b8>)
 800a208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20c:	4606      	mov	r6, r0
 800a20e:	460f      	mov	r7, r1
 800a210:	f7f6 f9b6 	bl	8000580 <__aeabi_dmul>
 800a214:	a372      	add	r3, pc, #456	; (adr r3, 800a3e0 <atan+0x2c0>)
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	f7f5 fffb 	bl	8000214 <__adddf3>
 800a21e:	4632      	mov	r2, r6
 800a220:	463b      	mov	r3, r7
 800a222:	f7f6 f9ad 	bl	8000580 <__aeabi_dmul>
 800a226:	a370      	add	r3, pc, #448	; (adr r3, 800a3e8 <atan+0x2c8>)
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	f7f5 fff2 	bl	8000214 <__adddf3>
 800a230:	4632      	mov	r2, r6
 800a232:	463b      	mov	r3, r7
 800a234:	f7f6 f9a4 	bl	8000580 <__aeabi_dmul>
 800a238:	a36d      	add	r3, pc, #436	; (adr r3, 800a3f0 <atan+0x2d0>)
 800a23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23e:	f7f5 ffe9 	bl	8000214 <__adddf3>
 800a242:	4632      	mov	r2, r6
 800a244:	463b      	mov	r3, r7
 800a246:	f7f6 f99b 	bl	8000580 <__aeabi_dmul>
 800a24a:	a36b      	add	r3, pc, #428	; (adr r3, 800a3f8 <atan+0x2d8>)
 800a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a250:	f7f5 ffe0 	bl	8000214 <__adddf3>
 800a254:	4632      	mov	r2, r6
 800a256:	463b      	mov	r3, r7
 800a258:	f7f6 f992 	bl	8000580 <__aeabi_dmul>
 800a25c:	a368      	add	r3, pc, #416	; (adr r3, 800a400 <atan+0x2e0>)
 800a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a262:	f7f5 ffd7 	bl	8000214 <__adddf3>
 800a266:	4642      	mov	r2, r8
 800a268:	464b      	mov	r3, r9
 800a26a:	f7f6 f989 	bl	8000580 <__aeabi_dmul>
 800a26e:	a366      	add	r3, pc, #408	; (adr r3, 800a408 <atan+0x2e8>)
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	4680      	mov	r8, r0
 800a276:	4689      	mov	r9, r1
 800a278:	4630      	mov	r0, r6
 800a27a:	4639      	mov	r1, r7
 800a27c:	f7f6 f980 	bl	8000580 <__aeabi_dmul>
 800a280:	a363      	add	r3, pc, #396	; (adr r3, 800a410 <atan+0x2f0>)
 800a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a286:	f7f5 ffc3 	bl	8000210 <__aeabi_dsub>
 800a28a:	4632      	mov	r2, r6
 800a28c:	463b      	mov	r3, r7
 800a28e:	f7f6 f977 	bl	8000580 <__aeabi_dmul>
 800a292:	a361      	add	r3, pc, #388	; (adr r3, 800a418 <atan+0x2f8>)
 800a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a298:	f7f5 ffba 	bl	8000210 <__aeabi_dsub>
 800a29c:	4632      	mov	r2, r6
 800a29e:	463b      	mov	r3, r7
 800a2a0:	f7f6 f96e 	bl	8000580 <__aeabi_dmul>
 800a2a4:	a35e      	add	r3, pc, #376	; (adr r3, 800a420 <atan+0x300>)
 800a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2aa:	f7f5 ffb1 	bl	8000210 <__aeabi_dsub>
 800a2ae:	4632      	mov	r2, r6
 800a2b0:	463b      	mov	r3, r7
 800a2b2:	f7f6 f965 	bl	8000580 <__aeabi_dmul>
 800a2b6:	a35c      	add	r3, pc, #368	; (adr r3, 800a428 <atan+0x308>)
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	f7f5 ffa8 	bl	8000210 <__aeabi_dsub>
 800a2c0:	4632      	mov	r2, r6
 800a2c2:	463b      	mov	r3, r7
 800a2c4:	f7f6 f95c 	bl	8000580 <__aeabi_dmul>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	f7f5 ffa0 	bl	8000214 <__adddf3>
 800a2d4:	4622      	mov	r2, r4
 800a2d6:	462b      	mov	r3, r5
 800a2d8:	f7f6 f952 	bl	8000580 <__aeabi_dmul>
 800a2dc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	d14b      	bne.n	800a37e <atan+0x25e>
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	f7f5 ff91 	bl	8000210 <__aeabi_dsub>
 800a2ee:	e72c      	b.n	800a14a <atan+0x2a>
 800a2f0:	ee10 0a10 	vmov	r0, s0
 800a2f4:	4b53      	ldr	r3, [pc, #332]	; (800a444 <atan+0x324>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	f7f5 ff89 	bl	8000210 <__aeabi_dsub>
 800a2fe:	4b51      	ldr	r3, [pc, #324]	; (800a444 <atan+0x324>)
 800a300:	4606      	mov	r6, r0
 800a302:	460f      	mov	r7, r1
 800a304:	2200      	movs	r2, #0
 800a306:	4620      	mov	r0, r4
 800a308:	4629      	mov	r1, r5
 800a30a:	f7f5 ff83 	bl	8000214 <__adddf3>
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	4630      	mov	r0, r6
 800a314:	4639      	mov	r1, r7
 800a316:	f7f6 fa5d 	bl	80007d4 <__aeabi_ddiv>
 800a31a:	f04f 0a01 	mov.w	sl, #1
 800a31e:	4604      	mov	r4, r0
 800a320:	460d      	mov	r5, r1
 800a322:	e764      	b.n	800a1ee <atan+0xce>
 800a324:	4b49      	ldr	r3, [pc, #292]	; (800a44c <atan+0x32c>)
 800a326:	429e      	cmp	r6, r3
 800a328:	da1d      	bge.n	800a366 <atan+0x246>
 800a32a:	ee10 0a10 	vmov	r0, s0
 800a32e:	4b48      	ldr	r3, [pc, #288]	; (800a450 <atan+0x330>)
 800a330:	2200      	movs	r2, #0
 800a332:	4629      	mov	r1, r5
 800a334:	f7f5 ff6c 	bl	8000210 <__aeabi_dsub>
 800a338:	4b45      	ldr	r3, [pc, #276]	; (800a450 <atan+0x330>)
 800a33a:	4606      	mov	r6, r0
 800a33c:	460f      	mov	r7, r1
 800a33e:	2200      	movs	r2, #0
 800a340:	4620      	mov	r0, r4
 800a342:	4629      	mov	r1, r5
 800a344:	f7f6 f91c 	bl	8000580 <__aeabi_dmul>
 800a348:	4b3e      	ldr	r3, [pc, #248]	; (800a444 <atan+0x324>)
 800a34a:	2200      	movs	r2, #0
 800a34c:	f7f5 ff62 	bl	8000214 <__adddf3>
 800a350:	4602      	mov	r2, r0
 800a352:	460b      	mov	r3, r1
 800a354:	4630      	mov	r0, r6
 800a356:	4639      	mov	r1, r7
 800a358:	f7f6 fa3c 	bl	80007d4 <__aeabi_ddiv>
 800a35c:	f04f 0a02 	mov.w	sl, #2
 800a360:	4604      	mov	r4, r0
 800a362:	460d      	mov	r5, r1
 800a364:	e743      	b.n	800a1ee <atan+0xce>
 800a366:	462b      	mov	r3, r5
 800a368:	ee10 2a10 	vmov	r2, s0
 800a36c:	4939      	ldr	r1, [pc, #228]	; (800a454 <atan+0x334>)
 800a36e:	2000      	movs	r0, #0
 800a370:	f7f6 fa30 	bl	80007d4 <__aeabi_ddiv>
 800a374:	f04f 0a03 	mov.w	sl, #3
 800a378:	4604      	mov	r4, r0
 800a37a:	460d      	mov	r5, r1
 800a37c:	e737      	b.n	800a1ee <atan+0xce>
 800a37e:	4b36      	ldr	r3, [pc, #216]	; (800a458 <atan+0x338>)
 800a380:	4e36      	ldr	r6, [pc, #216]	; (800a45c <atan+0x33c>)
 800a382:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38a:	f7f5 ff41 	bl	8000210 <__aeabi_dsub>
 800a38e:	4622      	mov	r2, r4
 800a390:	462b      	mov	r3, r5
 800a392:	f7f5 ff3d 	bl	8000210 <__aeabi_dsub>
 800a396:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a39a:	4602      	mov	r2, r0
 800a39c:	460b      	mov	r3, r1
 800a39e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a3a2:	f7f5 ff35 	bl	8000210 <__aeabi_dsub>
 800a3a6:	f1bb 0f00 	cmp.w	fp, #0
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	460d      	mov	r5, r1
 800a3ae:	f6bf aed6 	bge.w	800a15e <atan+0x3e>
 800a3b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3b6:	461d      	mov	r5, r3
 800a3b8:	e6d1      	b.n	800a15e <atan+0x3e>
 800a3ba:	a51d      	add	r5, pc, #116	; (adr r5, 800a430 <atan+0x310>)
 800a3bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a3c0:	e6cd      	b.n	800a15e <atan+0x3e>
 800a3c2:	bf00      	nop
 800a3c4:	f3af 8000 	nop.w
 800a3c8:	54442d18 	.word	0x54442d18
 800a3cc:	bff921fb 	.word	0xbff921fb
 800a3d0:	8800759c 	.word	0x8800759c
 800a3d4:	7e37e43c 	.word	0x7e37e43c
 800a3d8:	e322da11 	.word	0xe322da11
 800a3dc:	3f90ad3a 	.word	0x3f90ad3a
 800a3e0:	24760deb 	.word	0x24760deb
 800a3e4:	3fa97b4b 	.word	0x3fa97b4b
 800a3e8:	a0d03d51 	.word	0xa0d03d51
 800a3ec:	3fb10d66 	.word	0x3fb10d66
 800a3f0:	c54c206e 	.word	0xc54c206e
 800a3f4:	3fb745cd 	.word	0x3fb745cd
 800a3f8:	920083ff 	.word	0x920083ff
 800a3fc:	3fc24924 	.word	0x3fc24924
 800a400:	5555550d 	.word	0x5555550d
 800a404:	3fd55555 	.word	0x3fd55555
 800a408:	2c6a6c2f 	.word	0x2c6a6c2f
 800a40c:	bfa2b444 	.word	0xbfa2b444
 800a410:	52defd9a 	.word	0x52defd9a
 800a414:	3fadde2d 	.word	0x3fadde2d
 800a418:	af749a6d 	.word	0xaf749a6d
 800a41c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a420:	fe231671 	.word	0xfe231671
 800a424:	3fbc71c6 	.word	0x3fbc71c6
 800a428:	9998ebc4 	.word	0x9998ebc4
 800a42c:	3fc99999 	.word	0x3fc99999
 800a430:	54442d18 	.word	0x54442d18
 800a434:	3ff921fb 	.word	0x3ff921fb
 800a438:	440fffff 	.word	0x440fffff
 800a43c:	7ff00000 	.word	0x7ff00000
 800a440:	3fdbffff 	.word	0x3fdbffff
 800a444:	3ff00000 	.word	0x3ff00000
 800a448:	3ff2ffff 	.word	0x3ff2ffff
 800a44c:	40038000 	.word	0x40038000
 800a450:	3ff80000 	.word	0x3ff80000
 800a454:	bff00000 	.word	0xbff00000
 800a458:	0800a918 	.word	0x0800a918
 800a45c:	0800a8f8 	.word	0x0800a8f8

0800a460 <fabs>:
 800a460:	ec51 0b10 	vmov	r0, r1, d0
 800a464:	ee10 2a10 	vmov	r2, s0
 800a468:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a46c:	ec43 2b10 	vmov	d0, r2, r3
 800a470:	4770      	bx	lr

0800a472 <abort>:
 800a472:	b508      	push	{r3, lr}
 800a474:	2006      	movs	r0, #6
 800a476:	f000 f8ef 	bl	800a658 <raise>
 800a47a:	2001      	movs	r0, #1
 800a47c:	f7fa ff08 	bl	8005290 <_exit>

0800a480 <malloc>:
 800a480:	4b02      	ldr	r3, [pc, #8]	; (800a48c <malloc+0xc>)
 800a482:	4601      	mov	r1, r0
 800a484:	6818      	ldr	r0, [r3, #0]
 800a486:	f000 b82b 	b.w	800a4e0 <_malloc_r>
 800a48a:	bf00      	nop
 800a48c:	200002b8 	.word	0x200002b8

0800a490 <free>:
 800a490:	4b02      	ldr	r3, [pc, #8]	; (800a49c <free+0xc>)
 800a492:	4601      	mov	r1, r0
 800a494:	6818      	ldr	r0, [r3, #0]
 800a496:	f000 b945 	b.w	800a724 <_free_r>
 800a49a:	bf00      	nop
 800a49c:	200002b8 	.word	0x200002b8

0800a4a0 <sbrk_aligned>:
 800a4a0:	b570      	push	{r4, r5, r6, lr}
 800a4a2:	4e0e      	ldr	r6, [pc, #56]	; (800a4dc <sbrk_aligned+0x3c>)
 800a4a4:	460c      	mov	r4, r1
 800a4a6:	6831      	ldr	r1, [r6, #0]
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	b911      	cbnz	r1, 800a4b2 <sbrk_aligned+0x12>
 800a4ac:	f000 f8f0 	bl	800a690 <_sbrk_r>
 800a4b0:	6030      	str	r0, [r6, #0]
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	f000 f8eb 	bl	800a690 <_sbrk_r>
 800a4ba:	1c43      	adds	r3, r0, #1
 800a4bc:	d00a      	beq.n	800a4d4 <sbrk_aligned+0x34>
 800a4be:	1cc4      	adds	r4, r0, #3
 800a4c0:	f024 0403 	bic.w	r4, r4, #3
 800a4c4:	42a0      	cmp	r0, r4
 800a4c6:	d007      	beq.n	800a4d8 <sbrk_aligned+0x38>
 800a4c8:	1a21      	subs	r1, r4, r0
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f000 f8e0 	bl	800a690 <_sbrk_r>
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	d101      	bne.n	800a4d8 <sbrk_aligned+0x38>
 800a4d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a4d8:	4620      	mov	r0, r4
 800a4da:	bd70      	pop	{r4, r5, r6, pc}
 800a4dc:	20000574 	.word	0x20000574

0800a4e0 <_malloc_r>:
 800a4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4e4:	1ccd      	adds	r5, r1, #3
 800a4e6:	f025 0503 	bic.w	r5, r5, #3
 800a4ea:	3508      	adds	r5, #8
 800a4ec:	2d0c      	cmp	r5, #12
 800a4ee:	bf38      	it	cc
 800a4f0:	250c      	movcc	r5, #12
 800a4f2:	2d00      	cmp	r5, #0
 800a4f4:	4607      	mov	r7, r0
 800a4f6:	db01      	blt.n	800a4fc <_malloc_r+0x1c>
 800a4f8:	42a9      	cmp	r1, r5
 800a4fa:	d905      	bls.n	800a508 <_malloc_r+0x28>
 800a4fc:	230c      	movs	r3, #12
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	2600      	movs	r6, #0
 800a502:	4630      	mov	r0, r6
 800a504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a508:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a5dc <_malloc_r+0xfc>
 800a50c:	f000 f868 	bl	800a5e0 <__malloc_lock>
 800a510:	f8d8 3000 	ldr.w	r3, [r8]
 800a514:	461c      	mov	r4, r3
 800a516:	bb5c      	cbnz	r4, 800a570 <_malloc_r+0x90>
 800a518:	4629      	mov	r1, r5
 800a51a:	4638      	mov	r0, r7
 800a51c:	f7ff ffc0 	bl	800a4a0 <sbrk_aligned>
 800a520:	1c43      	adds	r3, r0, #1
 800a522:	4604      	mov	r4, r0
 800a524:	d155      	bne.n	800a5d2 <_malloc_r+0xf2>
 800a526:	f8d8 4000 	ldr.w	r4, [r8]
 800a52a:	4626      	mov	r6, r4
 800a52c:	2e00      	cmp	r6, #0
 800a52e:	d145      	bne.n	800a5bc <_malloc_r+0xdc>
 800a530:	2c00      	cmp	r4, #0
 800a532:	d048      	beq.n	800a5c6 <_malloc_r+0xe6>
 800a534:	6823      	ldr	r3, [r4, #0]
 800a536:	4631      	mov	r1, r6
 800a538:	4638      	mov	r0, r7
 800a53a:	eb04 0903 	add.w	r9, r4, r3
 800a53e:	f000 f8a7 	bl	800a690 <_sbrk_r>
 800a542:	4581      	cmp	r9, r0
 800a544:	d13f      	bne.n	800a5c6 <_malloc_r+0xe6>
 800a546:	6821      	ldr	r1, [r4, #0]
 800a548:	1a6d      	subs	r5, r5, r1
 800a54a:	4629      	mov	r1, r5
 800a54c:	4638      	mov	r0, r7
 800a54e:	f7ff ffa7 	bl	800a4a0 <sbrk_aligned>
 800a552:	3001      	adds	r0, #1
 800a554:	d037      	beq.n	800a5c6 <_malloc_r+0xe6>
 800a556:	6823      	ldr	r3, [r4, #0]
 800a558:	442b      	add	r3, r5
 800a55a:	6023      	str	r3, [r4, #0]
 800a55c:	f8d8 3000 	ldr.w	r3, [r8]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d038      	beq.n	800a5d6 <_malloc_r+0xf6>
 800a564:	685a      	ldr	r2, [r3, #4]
 800a566:	42a2      	cmp	r2, r4
 800a568:	d12b      	bne.n	800a5c2 <_malloc_r+0xe2>
 800a56a:	2200      	movs	r2, #0
 800a56c:	605a      	str	r2, [r3, #4]
 800a56e:	e00f      	b.n	800a590 <_malloc_r+0xb0>
 800a570:	6822      	ldr	r2, [r4, #0]
 800a572:	1b52      	subs	r2, r2, r5
 800a574:	d41f      	bmi.n	800a5b6 <_malloc_r+0xd6>
 800a576:	2a0b      	cmp	r2, #11
 800a578:	d917      	bls.n	800a5aa <_malloc_r+0xca>
 800a57a:	1961      	adds	r1, r4, r5
 800a57c:	42a3      	cmp	r3, r4
 800a57e:	6025      	str	r5, [r4, #0]
 800a580:	bf18      	it	ne
 800a582:	6059      	strne	r1, [r3, #4]
 800a584:	6863      	ldr	r3, [r4, #4]
 800a586:	bf08      	it	eq
 800a588:	f8c8 1000 	streq.w	r1, [r8]
 800a58c:	5162      	str	r2, [r4, r5]
 800a58e:	604b      	str	r3, [r1, #4]
 800a590:	4638      	mov	r0, r7
 800a592:	f104 060b 	add.w	r6, r4, #11
 800a596:	f000 f829 	bl	800a5ec <__malloc_unlock>
 800a59a:	f026 0607 	bic.w	r6, r6, #7
 800a59e:	1d23      	adds	r3, r4, #4
 800a5a0:	1af2      	subs	r2, r6, r3
 800a5a2:	d0ae      	beq.n	800a502 <_malloc_r+0x22>
 800a5a4:	1b9b      	subs	r3, r3, r6
 800a5a6:	50a3      	str	r3, [r4, r2]
 800a5a8:	e7ab      	b.n	800a502 <_malloc_r+0x22>
 800a5aa:	42a3      	cmp	r3, r4
 800a5ac:	6862      	ldr	r2, [r4, #4]
 800a5ae:	d1dd      	bne.n	800a56c <_malloc_r+0x8c>
 800a5b0:	f8c8 2000 	str.w	r2, [r8]
 800a5b4:	e7ec      	b.n	800a590 <_malloc_r+0xb0>
 800a5b6:	4623      	mov	r3, r4
 800a5b8:	6864      	ldr	r4, [r4, #4]
 800a5ba:	e7ac      	b.n	800a516 <_malloc_r+0x36>
 800a5bc:	4634      	mov	r4, r6
 800a5be:	6876      	ldr	r6, [r6, #4]
 800a5c0:	e7b4      	b.n	800a52c <_malloc_r+0x4c>
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	e7cc      	b.n	800a560 <_malloc_r+0x80>
 800a5c6:	230c      	movs	r3, #12
 800a5c8:	603b      	str	r3, [r7, #0]
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	f000 f80e 	bl	800a5ec <__malloc_unlock>
 800a5d0:	e797      	b.n	800a502 <_malloc_r+0x22>
 800a5d2:	6025      	str	r5, [r4, #0]
 800a5d4:	e7dc      	b.n	800a590 <_malloc_r+0xb0>
 800a5d6:	605b      	str	r3, [r3, #4]
 800a5d8:	deff      	udf	#255	; 0xff
 800a5da:	bf00      	nop
 800a5dc:	20000570 	.word	0x20000570

0800a5e0 <__malloc_lock>:
 800a5e0:	4801      	ldr	r0, [pc, #4]	; (800a5e8 <__malloc_lock+0x8>)
 800a5e2:	f000 b88f 	b.w	800a704 <__retarget_lock_acquire_recursive>
 800a5e6:	bf00      	nop
 800a5e8:	200006b4 	.word	0x200006b4

0800a5ec <__malloc_unlock>:
 800a5ec:	4801      	ldr	r0, [pc, #4]	; (800a5f4 <__malloc_unlock+0x8>)
 800a5ee:	f000 b88a 	b.w	800a706 <__retarget_lock_release_recursive>
 800a5f2:	bf00      	nop
 800a5f4:	200006b4 	.word	0x200006b4

0800a5f8 <memset>:
 800a5f8:	4402      	add	r2, r0
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d100      	bne.n	800a602 <memset+0xa>
 800a600:	4770      	bx	lr
 800a602:	f803 1b01 	strb.w	r1, [r3], #1
 800a606:	e7f9      	b.n	800a5fc <memset+0x4>

0800a608 <_raise_r>:
 800a608:	291f      	cmp	r1, #31
 800a60a:	b538      	push	{r3, r4, r5, lr}
 800a60c:	4604      	mov	r4, r0
 800a60e:	460d      	mov	r5, r1
 800a610:	d904      	bls.n	800a61c <_raise_r+0x14>
 800a612:	2316      	movs	r3, #22
 800a614:	6003      	str	r3, [r0, #0]
 800a616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a61a:	bd38      	pop	{r3, r4, r5, pc}
 800a61c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a61e:	b112      	cbz	r2, 800a626 <_raise_r+0x1e>
 800a620:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a624:	b94b      	cbnz	r3, 800a63a <_raise_r+0x32>
 800a626:	4620      	mov	r0, r4
 800a628:	f000 f830 	bl	800a68c <_getpid_r>
 800a62c:	462a      	mov	r2, r5
 800a62e:	4601      	mov	r1, r0
 800a630:	4620      	mov	r0, r4
 800a632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a636:	f000 b817 	b.w	800a668 <_kill_r>
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d00a      	beq.n	800a654 <_raise_r+0x4c>
 800a63e:	1c59      	adds	r1, r3, #1
 800a640:	d103      	bne.n	800a64a <_raise_r+0x42>
 800a642:	2316      	movs	r3, #22
 800a644:	6003      	str	r3, [r0, #0]
 800a646:	2001      	movs	r0, #1
 800a648:	e7e7      	b.n	800a61a <_raise_r+0x12>
 800a64a:	2400      	movs	r4, #0
 800a64c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a650:	4628      	mov	r0, r5
 800a652:	4798      	blx	r3
 800a654:	2000      	movs	r0, #0
 800a656:	e7e0      	b.n	800a61a <_raise_r+0x12>

0800a658 <raise>:
 800a658:	4b02      	ldr	r3, [pc, #8]	; (800a664 <raise+0xc>)
 800a65a:	4601      	mov	r1, r0
 800a65c:	6818      	ldr	r0, [r3, #0]
 800a65e:	f7ff bfd3 	b.w	800a608 <_raise_r>
 800a662:	bf00      	nop
 800a664:	200002b8 	.word	0x200002b8

0800a668 <_kill_r>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	4d07      	ldr	r5, [pc, #28]	; (800a688 <_kill_r+0x20>)
 800a66c:	2300      	movs	r3, #0
 800a66e:	4604      	mov	r4, r0
 800a670:	4608      	mov	r0, r1
 800a672:	4611      	mov	r1, r2
 800a674:	602b      	str	r3, [r5, #0]
 800a676:	f7fa fdfb 	bl	8005270 <_kill>
 800a67a:	1c43      	adds	r3, r0, #1
 800a67c:	d102      	bne.n	800a684 <_kill_r+0x1c>
 800a67e:	682b      	ldr	r3, [r5, #0]
 800a680:	b103      	cbz	r3, 800a684 <_kill_r+0x1c>
 800a682:	6023      	str	r3, [r4, #0]
 800a684:	bd38      	pop	{r3, r4, r5, pc}
 800a686:	bf00      	nop
 800a688:	200006b0 	.word	0x200006b0

0800a68c <_getpid_r>:
 800a68c:	f7fa bde8 	b.w	8005260 <_getpid>

0800a690 <_sbrk_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4d06      	ldr	r5, [pc, #24]	; (800a6ac <_sbrk_r+0x1c>)
 800a694:	2300      	movs	r3, #0
 800a696:	4604      	mov	r4, r0
 800a698:	4608      	mov	r0, r1
 800a69a:	602b      	str	r3, [r5, #0]
 800a69c:	f7fa fe02 	bl	80052a4 <_sbrk>
 800a6a0:	1c43      	adds	r3, r0, #1
 800a6a2:	d102      	bne.n	800a6aa <_sbrk_r+0x1a>
 800a6a4:	682b      	ldr	r3, [r5, #0]
 800a6a6:	b103      	cbz	r3, 800a6aa <_sbrk_r+0x1a>
 800a6a8:	6023      	str	r3, [r4, #0]
 800a6aa:	bd38      	pop	{r3, r4, r5, pc}
 800a6ac:	200006b0 	.word	0x200006b0

0800a6b0 <__errno>:
 800a6b0:	4b01      	ldr	r3, [pc, #4]	; (800a6b8 <__errno+0x8>)
 800a6b2:	6818      	ldr	r0, [r3, #0]
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	200002b8 	.word	0x200002b8

0800a6bc <__libc_init_array>:
 800a6bc:	b570      	push	{r4, r5, r6, lr}
 800a6be:	4d0d      	ldr	r5, [pc, #52]	; (800a6f4 <__libc_init_array+0x38>)
 800a6c0:	4c0d      	ldr	r4, [pc, #52]	; (800a6f8 <__libc_init_array+0x3c>)
 800a6c2:	1b64      	subs	r4, r4, r5
 800a6c4:	10a4      	asrs	r4, r4, #2
 800a6c6:	2600      	movs	r6, #0
 800a6c8:	42a6      	cmp	r6, r4
 800a6ca:	d109      	bne.n	800a6e0 <__libc_init_array+0x24>
 800a6cc:	4d0b      	ldr	r5, [pc, #44]	; (800a6fc <__libc_init_array+0x40>)
 800a6ce:	4c0c      	ldr	r4, [pc, #48]	; (800a700 <__libc_init_array+0x44>)
 800a6d0:	f000 f874 	bl	800a7bc <_init>
 800a6d4:	1b64      	subs	r4, r4, r5
 800a6d6:	10a4      	asrs	r4, r4, #2
 800a6d8:	2600      	movs	r6, #0
 800a6da:	42a6      	cmp	r6, r4
 800a6dc:	d105      	bne.n	800a6ea <__libc_init_array+0x2e>
 800a6de:	bd70      	pop	{r4, r5, r6, pc}
 800a6e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6e4:	4798      	blx	r3
 800a6e6:	3601      	adds	r6, #1
 800a6e8:	e7ee      	b.n	800a6c8 <__libc_init_array+0xc>
 800a6ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ee:	4798      	blx	r3
 800a6f0:	3601      	adds	r6, #1
 800a6f2:	e7f2      	b.n	800a6da <__libc_init_array+0x1e>
 800a6f4:	0800a940 	.word	0x0800a940
 800a6f8:	0800a940 	.word	0x0800a940
 800a6fc:	0800a940 	.word	0x0800a940
 800a700:	0800a944 	.word	0x0800a944

0800a704 <__retarget_lock_acquire_recursive>:
 800a704:	4770      	bx	lr

0800a706 <__retarget_lock_release_recursive>:
 800a706:	4770      	bx	lr

0800a708 <memcpy>:
 800a708:	440a      	add	r2, r1
 800a70a:	4291      	cmp	r1, r2
 800a70c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a710:	d100      	bne.n	800a714 <memcpy+0xc>
 800a712:	4770      	bx	lr
 800a714:	b510      	push	{r4, lr}
 800a716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a71a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a71e:	4291      	cmp	r1, r2
 800a720:	d1f9      	bne.n	800a716 <memcpy+0xe>
 800a722:	bd10      	pop	{r4, pc}

0800a724 <_free_r>:
 800a724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a726:	2900      	cmp	r1, #0
 800a728:	d044      	beq.n	800a7b4 <_free_r+0x90>
 800a72a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a72e:	9001      	str	r0, [sp, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	f1a1 0404 	sub.w	r4, r1, #4
 800a736:	bfb8      	it	lt
 800a738:	18e4      	addlt	r4, r4, r3
 800a73a:	f7ff ff51 	bl	800a5e0 <__malloc_lock>
 800a73e:	4a1e      	ldr	r2, [pc, #120]	; (800a7b8 <_free_r+0x94>)
 800a740:	9801      	ldr	r0, [sp, #4]
 800a742:	6813      	ldr	r3, [r2, #0]
 800a744:	b933      	cbnz	r3, 800a754 <_free_r+0x30>
 800a746:	6063      	str	r3, [r4, #4]
 800a748:	6014      	str	r4, [r2, #0]
 800a74a:	b003      	add	sp, #12
 800a74c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a750:	f7ff bf4c 	b.w	800a5ec <__malloc_unlock>
 800a754:	42a3      	cmp	r3, r4
 800a756:	d908      	bls.n	800a76a <_free_r+0x46>
 800a758:	6825      	ldr	r5, [r4, #0]
 800a75a:	1961      	adds	r1, r4, r5
 800a75c:	428b      	cmp	r3, r1
 800a75e:	bf01      	itttt	eq
 800a760:	6819      	ldreq	r1, [r3, #0]
 800a762:	685b      	ldreq	r3, [r3, #4]
 800a764:	1949      	addeq	r1, r1, r5
 800a766:	6021      	streq	r1, [r4, #0]
 800a768:	e7ed      	b.n	800a746 <_free_r+0x22>
 800a76a:	461a      	mov	r2, r3
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	b10b      	cbz	r3, 800a774 <_free_r+0x50>
 800a770:	42a3      	cmp	r3, r4
 800a772:	d9fa      	bls.n	800a76a <_free_r+0x46>
 800a774:	6811      	ldr	r1, [r2, #0]
 800a776:	1855      	adds	r5, r2, r1
 800a778:	42a5      	cmp	r5, r4
 800a77a:	d10b      	bne.n	800a794 <_free_r+0x70>
 800a77c:	6824      	ldr	r4, [r4, #0]
 800a77e:	4421      	add	r1, r4
 800a780:	1854      	adds	r4, r2, r1
 800a782:	42a3      	cmp	r3, r4
 800a784:	6011      	str	r1, [r2, #0]
 800a786:	d1e0      	bne.n	800a74a <_free_r+0x26>
 800a788:	681c      	ldr	r4, [r3, #0]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	6053      	str	r3, [r2, #4]
 800a78e:	440c      	add	r4, r1
 800a790:	6014      	str	r4, [r2, #0]
 800a792:	e7da      	b.n	800a74a <_free_r+0x26>
 800a794:	d902      	bls.n	800a79c <_free_r+0x78>
 800a796:	230c      	movs	r3, #12
 800a798:	6003      	str	r3, [r0, #0]
 800a79a:	e7d6      	b.n	800a74a <_free_r+0x26>
 800a79c:	6825      	ldr	r5, [r4, #0]
 800a79e:	1961      	adds	r1, r4, r5
 800a7a0:	428b      	cmp	r3, r1
 800a7a2:	bf04      	itt	eq
 800a7a4:	6819      	ldreq	r1, [r3, #0]
 800a7a6:	685b      	ldreq	r3, [r3, #4]
 800a7a8:	6063      	str	r3, [r4, #4]
 800a7aa:	bf04      	itt	eq
 800a7ac:	1949      	addeq	r1, r1, r5
 800a7ae:	6021      	streq	r1, [r4, #0]
 800a7b0:	6054      	str	r4, [r2, #4]
 800a7b2:	e7ca      	b.n	800a74a <_free_r+0x26>
 800a7b4:	b003      	add	sp, #12
 800a7b6:	bd30      	pop	{r4, r5, pc}
 800a7b8:	20000570 	.word	0x20000570

0800a7bc <_init>:
 800a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7be:	bf00      	nop
 800a7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7c2:	bc08      	pop	{r3}
 800a7c4:	469e      	mov	lr, r3
 800a7c6:	4770      	bx	lr

0800a7c8 <_fini>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	bf00      	nop
 800a7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ce:	bc08      	pop	{r3}
 800a7d0:	469e      	mov	lr, r3
 800a7d2:	4770      	bx	lr
