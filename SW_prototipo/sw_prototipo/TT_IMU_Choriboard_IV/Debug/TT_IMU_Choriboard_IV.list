
TT_IMU_Choriboard_IV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a18  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08008be0  08008be0  00018be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ccc  08008ccc  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  08008ccc  08008ccc  00018ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cd4  08008cd4  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cd4  08008cd4  00018cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cd8  08008cd8  00018cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  08008cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  200001b8  08008e94  000201b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08008e94  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021608  00000000  00000000  0002022b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e4c  00000000  00000000  00041833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab8  00000000  00000000  00047680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001436  00000000  00000000  00049138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d9eb  00000000  00000000  0004a56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000221a9  00000000  00000000  00077f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001001be  00000000  00000000  0009a102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000739c  00000000  00000000  0019a2c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001a165c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001b8 	.word	0x200001b8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008bc8 	.word	0x08008bc8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001bc 	.word	0x200001bc
 8000204:	08008bc8 	.word	0x08008bc8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <_Z15CNI_constructorP19__CAN_HandleTypeDef>:

static CNI_t _instance;


void CNI_constructor(CAN_HandleTypeDef *hcan)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	_instance.mHcan_ = hcan;
 800050c:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6013      	str	r3, [r2, #0]

	_instance.mCANtxHeader_.ExtId = 0;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
	_instance.mCANtxHeader_.IDE = CAN_ID_STD;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
	_instance.mCANtxHeader_.RTR = CAN_RTR_DATA;
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
	_instance.mCANtxHeader_.TransmitGlobalTime = DISABLE;
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000526:	2200      	movs	r2, #0
 8000528:	771a      	strb	r2, [r3, #28]
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	200001d4 	.word	0x200001d4

0800053c <_Z8CNI_initv>:


void CNI_init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i = 0; i < lenCANfilterList ; i++)
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	e00e      	b.n	8000566 <_Z8CNI_initv+0x2a>
	{
		HAL_CAN_ConfigFilter(_instance.mHcan_, &CANfiltersList[i]);
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <_Z8CNI_initv+0x40>)
 800054a:	6818      	ldr	r0, [r3, #0]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	00db      	lsls	r3, r3, #3
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <_Z8CNI_initv+0x44>)
 8000558:	4413      	add	r3, r2
 800055a:	4619      	mov	r1, r3
 800055c:	f004 fbe4 	bl	8004d28 <HAL_CAN_ConfigFilter>
	for(i = 0; i < lenCANfilterList ; i++)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3301      	adds	r3, #1
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <_Z8CNI_initv+0x48>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	d3eb      	bcc.n	8000548 <_Z8CNI_initv+0xc>
	}
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200001d4 	.word	0x200001d4
 8000580:	20000104 	.word	0x20000104
 8000584:	20000158 	.word	0x20000158

08000588 <_Z9CNI_startv>:


void CNI_start(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_CAN_Start(_instance.mHcan_);
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <_Z9CNI_startv+0x20>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f004 fca9 	bl	8004ee8 <HAL_CAN_Start>
#if !IS_MASTER
    HAL_CAN_ActivateNotification(_instance.mHcan_, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <_Z9CNI_startv+0x20>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2102      	movs	r1, #2
 800059c:	4618      	mov	r0, r3
 800059e:	f004 fe31 	bl	8005204 <HAL_CAN_ActivateNotification>
#endif
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200001d4 	.word	0x200001d4

080005ac <_Z12CNI_send_msgm>:


CNI_status_t CNI_send_msg(uint32_t msgHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	uint32_t txMailbox;
	serviceID currentMsgServiceID;
	uint32_t i;

	if(msgHandle >= lenCANmsgList)
 80005b4:	4b42      	ldr	r3, [pc, #264]	; (80006c0 <_Z12CNI_send_msgm+0x114>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d301      	bcc.n	80005c2 <_Z12CNI_send_msgm+0x16>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 80005be:	2301      	movs	r3, #1
 80005c0:	e079      	b.n	80006b6 <_Z12CNI_send_msgm+0x10a>
	}

	if(CANmsgList[msgHandle].mNodeID_ != MY_NODE_ID)
 80005c2:	4940      	ldr	r1, [pc, #256]	; (80006c4 <_Z12CNI_send_msgm+0x118>)
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	4613      	mov	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	440b      	add	r3, r1
 80005d0:	3304      	adds	r3, #4
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d001      	beq.n	80005dc <_Z12CNI_send_msgm+0x30>
	{
		return CNI_MSG_HANDLE_TX_NOT_ALLOWED;
 80005d8:	2302      	movs	r3, #2
 80005da:	e06c      	b.n	80006b6 <_Z12CNI_send_msgm+0x10a>
	}

	// Armar el mensaje
	currentMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 80005dc:	4939      	ldr	r1, [pc, #228]	; (80006c4 <_Z12CNI_send_msgm+0x118>)
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	4613      	mov	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	440b      	add	r3, r1
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	613b      	str	r3, [r7, #16]
	_instance.mCANtxHeader_.StdId = CAN_MSG_MAKE_STD_ID_TX(currentMsgServiceID);
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	f043 0301 	orr.w	r3, r3, #1
 80005f6:	4a34      	ldr	r2, [pc, #208]	; (80006c8 <_Z12CNI_send_msgm+0x11c>)
 80005f8:	6093      	str	r3, [r2, #8]

	// Pasarle el msj al periférico

	// Limpia todos los mensajes pendientes (no debería haber ninguno, pero por las dudas)
	HAL_CAN_AbortTxRequest(_instance.mHcan_,CAN_TX_MAILBOX0|CAN_TX_MAILBOX1|CAN_TX_MAILBOX2);
 80005fa:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <_Z12CNI_send_msgm+0x11c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2107      	movs	r1, #7
 8000600:	4618      	mov	r0, r3
 8000602:	f004 fd85 	bl	8005110 <HAL_CAN_AbortTxRequest>

	// Comenzando por la posición "msgHandle" se recorre la lista de mensajes. Esto es debido
	// a que es posible que se requiera enviar más de un mensaje.
	i = msgHandle;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 800060a:	e02a      	b.n	8000662 <_Z12CNI_send_msgm+0xb6>
	{
		while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 800060c:	bf00      	nop
 800060e:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <_Z12CNI_send_msgm+0x11c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f004 fdc1 	bl	800519a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	bf0c      	ite	eq
 800061e:	2301      	moveq	r3, #1
 8000620:	2300      	movne	r3, #0
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1f2      	bne.n	800060e <_Z12CNI_send_msgm+0x62>

		_instance.mCANtxHeader_.DLC = CANmsgList[i].mLenPayload_;
 8000628:	4926      	ldr	r1, [pc, #152]	; (80006c4 <_Z12CNI_send_msgm+0x118>)
 800062a:	697a      	ldr	r2, [r7, #20]
 800062c:	4613      	mov	r3, r2
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	4413      	add	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	440b      	add	r3, r1
 8000636:	3310      	adds	r3, #16
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a23      	ldr	r2, [pc, #140]	; (80006c8 <_Z12CNI_send_msgm+0x11c>)
 800063c:	6193      	str	r3, [r2, #24]
		HAL_CAN_AddTxMessage(_instance.mHcan_, &_instance.mCANtxHeader_, CANmsgList[i].mPayload_, &txMailbox);
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <_Z12CNI_send_msgm+0x11c>)
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	697a      	ldr	r2, [r7, #20]
 8000644:	4613      	mov	r3, r2
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	4413      	add	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	3308      	adds	r3, #8
 800064e:	4a1d      	ldr	r2, [pc, #116]	; (80006c4 <_Z12CNI_send_msgm+0x118>)
 8000650:	441a      	add	r2, r3
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	491d      	ldr	r1, [pc, #116]	; (80006cc <_Z12CNI_send_msgm+0x120>)
 8000658:	f004 fc8a 	bl	8004f70 <HAL_CAN_AddTxMessage>
		i++;
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	3301      	adds	r3, #1
 8000660:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <_Z12CNI_send_msgm+0x114>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	697a      	ldr	r2, [r7, #20]
 8000668:	429a      	cmp	r2, r3
 800066a:	d215      	bcs.n	8000698 <_Z12CNI_send_msgm+0xec>
 800066c:	4915      	ldr	r1, [pc, #84]	; (80006c4 <_Z12CNI_send_msgm+0x118>)
 800066e:	697a      	ldr	r2, [r7, #20]
 8000670:	4613      	mov	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	440b      	add	r3, r1
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	693a      	ldr	r2, [r7, #16]
 800067e:	429a      	cmp	r2, r3
 8000680:	d10a      	bne.n	8000698 <_Z12CNI_send_msgm+0xec>
 8000682:	4910      	ldr	r1, [pc, #64]	; (80006c4 <_Z12CNI_send_msgm+0x118>)
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	4613      	mov	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4413      	add	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	440b      	add	r3, r1
 8000690:	3304      	adds	r3, #4
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d0b9      	beq.n	800060c <_Z12CNI_send_msgm+0x60>
	}

	// Antes de retornar, se queda esperando a que se terminen de enviar todos los mensajes
	while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 8000698:	bf00      	nop
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <_Z12CNI_send_msgm+0x11c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 fd7b 	bl	800519a <HAL_CAN_GetTxMailboxesFreeLevel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	bf0c      	ite	eq
 80006aa:	2301      	moveq	r3, #1
 80006ac:	2300      	movne	r3, #0
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1f2      	bne.n	800069a <_Z12CNI_send_msgm+0xee>

	return CNI_OK;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000154 	.word	0x20000154
 80006c4:	20000000 	.word	0x20000000
 80006c8:	200001d4 	.word	0x200001d4
 80006cc:	200001dc 	.word	0x200001dc

080006d0 <_Z22CNI_update_msg_contentmPhm>:

	return CNI_OK;
}

CNI_status_t CNI_update_msg_content(uint32_t msgHandle, uint8_t *payload, uint32_t lenPayload)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
	serviceID rxMsgServiceID;
	uint32_t rxNodeID;
	uint32_t auxLenPayload;

	// Chequear si el msgHandle es válido
	if(msgHandle >= lenCANmsgList)
 80006dc:	4b48      	ldr	r3, [pc, #288]	; (8000800 <_Z22CNI_update_msg_contentmPhm+0x130>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d301      	bcc.n	80006ea <_Z22CNI_update_msg_contentmPhm+0x1a>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e086      	b.n	80007f8 <_Z22CNI_update_msg_contentmPhm+0x128>
	}

	if(CANmsgList[msgHandle].mNodeID_ != MY_NODE_ID)
 80006ea:	4946      	ldr	r1, [pc, #280]	; (8000804 <_Z22CNI_update_msg_contentmPhm+0x134>)
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4613      	mov	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	440b      	add	r3, r1
 80006f8:	3304      	adds	r3, #4
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d001      	beq.n	8000704 <_Z22CNI_update_msg_contentmPhm+0x34>
	{
		return CNI_MSG_HANDLE_TX_NOT_ALLOWED;
 8000700:	2302      	movs	r3, #2
 8000702:	e079      	b.n	80007f8 <_Z22CNI_update_msg_contentmPhm+0x128>
	}

	i = msgHandle;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	61fb      	str	r3, [r7, #28]
	rxMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 8000708:	493e      	ldr	r1, [pc, #248]	; (8000804 <_Z22CNI_update_msg_contentmPhm+0x134>)
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	4613      	mov	r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4413      	add	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	440b      	add	r3, r1
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	617b      	str	r3, [r7, #20]
	rxNodeID = CANmsgList[msgHandle].mNodeID_;
 800071a:	493a      	ldr	r1, [pc, #232]	; (8000804 <_Z22CNI_update_msg_contentmPhm+0x134>)
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	4613      	mov	r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	4413      	add	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	440b      	add	r3, r1
 8000728:	3304      	adds	r3, #4
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	613b      	str	r3, [r7, #16]
	auxLenPayload = lenPayload;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	61bb      	str	r3, [r7, #24]

	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID) && (auxLenPayload > 0))
 8000732:	e041      	b.n	80007b8 <_Z22CNI_update_msg_contentmPhm+0xe8>
	{
		if(auxLenPayload > MAX_LEN_PAYLOAD_CAN)
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	2b08      	cmp	r3, #8
 8000738:	d91e      	bls.n	8000778 <_Z22CNI_update_msg_contentmPhm+0xa8>
		{
			//memcpy(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], MAX_LEN_PAYLOAD_CAN);
			my_copy_array_of_uint8(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], MAX_LEN_PAYLOAD_CAN);
 800073a:	69fa      	ldr	r2, [r7, #28]
 800073c:	4613      	mov	r3, r2
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4413      	add	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	3308      	adds	r3, #8
 8000746:	4a2f      	ldr	r2, [pc, #188]	; (8000804 <_Z22CNI_update_msg_contentmPhm+0x134>)
 8000748:	1898      	adds	r0, r3, r2
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	68ba      	ldr	r2, [r7, #8]
 8000752:	4413      	add	r3, r2
 8000754:	2208      	movs	r2, #8
 8000756:	4619      	mov	r1, r3
 8000758:	f003 fd21 	bl	800419e <_Z22my_copy_array_of_uint8PhPKhm>
			CANmsgList[i].mLenPayload_ = MAX_LEN_PAYLOAD_CAN;
 800075c:	4929      	ldr	r1, [pc, #164]	; (8000804 <_Z22CNI_update_msg_contentmPhm+0x134>)
 800075e:	69fa      	ldr	r2, [r7, #28]
 8000760:	4613      	mov	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	440b      	add	r3, r1
 800076a:	3310      	adds	r3, #16
 800076c:	2208      	movs	r2, #8
 800076e:	601a      	str	r2, [r3, #0]
			auxLenPayload-=MAX_LEN_PAYLOAD_CAN;
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	3b08      	subs	r3, #8
 8000774:	61bb      	str	r3, [r7, #24]
 8000776:	e01c      	b.n	80007b2 <_Z22CNI_update_msg_contentmPhm+0xe2>
		}
		else
		{
			//memcpy(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], auxLenPayload);
			my_copy_array_of_uint8(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], auxLenPayload);
 8000778:	69fa      	ldr	r2, [r7, #28]
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	3308      	adds	r3, #8
 8000784:	4a1f      	ldr	r2, [pc, #124]	; (8000804 <_Z22CNI_update_msg_contentmPhm+0x134>)
 8000786:	1898      	adds	r0, r3, r2
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	4413      	add	r3, r2
 8000792:	69ba      	ldr	r2, [r7, #24]
 8000794:	4619      	mov	r1, r3
 8000796:	f003 fd02 	bl	800419e <_Z22my_copy_array_of_uint8PhPKhm>
			CANmsgList[i].mLenPayload_ = auxLenPayload;
 800079a:	491a      	ldr	r1, [pc, #104]	; (8000804 <_Z22CNI_update_msg_contentmPhm+0x134>)
 800079c:	69fa      	ldr	r2, [r7, #28]
 800079e:	4613      	mov	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	440b      	add	r3, r1
 80007a8:	3310      	adds	r3, #16
 80007aa:	69ba      	ldr	r2, [r7, #24]
 80007ac:	601a      	str	r2, [r3, #0]
			auxLenPayload = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
		}
		i++;
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3301      	adds	r3, #1
 80007b6:	61fb      	str	r3, [r7, #28]
	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID) && (auxLenPayload > 0))
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <_Z22CNI_update_msg_contentmPhm+0x130>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	69fa      	ldr	r2, [r7, #28]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d219      	bcs.n	80007f6 <_Z22CNI_update_msg_contentmPhm+0x126>
 80007c2:	4910      	ldr	r1, [pc, #64]	; (8000804 <_Z22CNI_update_msg_contentmPhm+0x134>)
 80007c4:	69fa      	ldr	r2, [r7, #28]
 80007c6:	4613      	mov	r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	440b      	add	r3, r1
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d10e      	bne.n	80007f6 <_Z22CNI_update_msg_contentmPhm+0x126>
 80007d8:	490a      	ldr	r1, [pc, #40]	; (8000804 <_Z22CNI_update_msg_contentmPhm+0x134>)
 80007da:	69fa      	ldr	r2, [r7, #28]
 80007dc:	4613      	mov	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	440b      	add	r3, r1
 80007e6:	3304      	adds	r3, #4
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d102      	bne.n	80007f6 <_Z22CNI_update_msg_contentmPhm+0x126>
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d19e      	bne.n	8000734 <_Z22CNI_update_msg_contentmPhm+0x64>
	}

	return CNI_OK;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000154 	.word	0x20000154
 8000804:	20000000 	.word	0x20000000

08000808 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_CAN1_Init+0x68>)
 800080e:	4a19      	ldr	r2, [pc, #100]	; (8000874 <MX_CAN1_Init+0x6c>)
 8000810:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_CAN1_Init+0x68>)
 8000814:	2206      	movs	r2, #6
 8000816:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_CAN1_Init+0x68>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_CAN1_Init+0x68>)
 8000820:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000824:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_CAN1_Init+0x68>)
 8000828:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800082c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <MX_CAN1_Init+0x68>)
 8000830:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000834:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_CAN1_Init+0x68>)
 8000838:	2200      	movs	r2, #0
 800083a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_CAN1_Init+0x68>)
 800083e:	2200      	movs	r2, #0
 8000840:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_CAN1_Init+0x68>)
 8000844:	2200      	movs	r2, #0
 8000846:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_CAN1_Init+0x68>)
 800084a:	2200      	movs	r2, #0
 800084c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_CAN1_Init+0x68>)
 8000850:	2200      	movs	r2, #0
 8000852:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_CAN1_Init+0x68>)
 8000856:	2200      	movs	r2, #0
 8000858:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_CAN1_Init+0x68>)
 800085c:	f004 f968 	bl	8004b30 <HAL_CAN_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000866:	f003 f9e9 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200001f4 	.word	0x200001f4
 8000874:	40006400 	.word	0x40006400

08000878 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_CAN2_Init+0x68>)
 800087e:	4a19      	ldr	r2, [pc, #100]	; (80008e4 <MX_CAN2_Init+0x6c>)
 8000880:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_CAN2_Init+0x68>)
 8000884:	2206      	movs	r2, #6
 8000886:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_CAN2_Init+0x68>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_CAN2_Init+0x68>)
 8000890:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000894:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_CAN2_Init+0x68>)
 8000898:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800089c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_CAN2_Init+0x68>)
 80008a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008a4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_CAN2_Init+0x68>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_CAN2_Init+0x68>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_CAN2_Init+0x68>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_CAN2_Init+0x68>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_CAN2_Init+0x68>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_CAN2_Init+0x68>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_CAN2_Init+0x68>)
 80008cc:	f004 f930 	bl	8004b30 <HAL_CAN_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 80008d6:	f003 f9b1 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000021c 	.word	0x2000021c
 80008e4:	40006800 	.word	0x40006800

080008e8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a41      	ldr	r2, [pc, #260]	; (8000a0c <HAL_CAN_MspInit+0x124>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d13a      	bne.n	8000980 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800090a:	4b41      	ldr	r3, [pc, #260]	; (8000a10 <HAL_CAN_MspInit+0x128>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3301      	adds	r3, #1
 8000910:	4a3f      	ldr	r2, [pc, #252]	; (8000a10 <HAL_CAN_MspInit+0x128>)
 8000912:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000914:	4b3e      	ldr	r3, [pc, #248]	; (8000a10 <HAL_CAN_MspInit+0x128>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d10b      	bne.n	8000934 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800091c:	4b3d      	ldr	r3, [pc, #244]	; (8000a14 <HAL_CAN_MspInit+0x12c>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a3c      	ldr	r2, [pc, #240]	; (8000a14 <HAL_CAN_MspInit+0x12c>)
 8000922:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b3a      	ldr	r3, [pc, #232]	; (8000a14 <HAL_CAN_MspInit+0x12c>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000930:	61bb      	str	r3, [r7, #24]
 8000932:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000934:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <HAL_CAN_MspInit+0x12c>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	4a36      	ldr	r2, [pc, #216]	; (8000a14 <HAL_CAN_MspInit+0x12c>)
 800093a:	f043 0302 	orr.w	r3, r3, #2
 800093e:	6313      	str	r3, [r2, #48]	; 0x30
 8000940:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <HAL_CAN_MspInit+0x12c>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	f003 0302 	and.w	r3, r3, #2
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800094c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800095e:	2309      	movs	r3, #9
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	482b      	ldr	r0, [pc, #172]	; (8000a18 <HAL_CAN_MspInit+0x130>)
 800096a:	f005 f80b 	bl	8005984 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2014      	movs	r0, #20
 8000974:	f004 ffc1 	bl	80058fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000978:	2014      	movs	r0, #20
 800097a:	f004 ffda 	bl	8005932 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800097e:	e041      	b.n	8000a04 <HAL_CAN_MspInit+0x11c>
  else if(canHandle->Instance==CAN2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a25      	ldr	r2, [pc, #148]	; (8000a1c <HAL_CAN_MspInit+0x134>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d13c      	bne.n	8000a04 <HAL_CAN_MspInit+0x11c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800098a:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <HAL_CAN_MspInit+0x12c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a21      	ldr	r2, [pc, #132]	; (8000a14 <HAL_CAN_MspInit+0x12c>)
 8000990:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <HAL_CAN_MspInit+0x12c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <HAL_CAN_MspInit+0x128>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <HAL_CAN_MspInit+0x128>)
 80009aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_CAN_MspInit+0x128>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d10b      	bne.n	80009cc <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_CAN_MspInit+0x12c>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <HAL_CAN_MspInit+0x12c>)
 80009ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_CAN_MspInit+0x12c>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_CAN_MspInit+0x12c>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <HAL_CAN_MspInit+0x12c>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	6313      	str	r3, [r2, #48]	; 0x30
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_CAN_MspInit+0x12c>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80009e4:	2360      	movs	r3, #96	; 0x60
 80009e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80009f4:	2309      	movs	r3, #9
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4806      	ldr	r0, [pc, #24]	; (8000a18 <HAL_CAN_MspInit+0x130>)
 8000a00:	f004 ffc0 	bl	8005984 <HAL_GPIO_Init>
}
 8000a04:	bf00      	nop
 8000a06:	3730      	adds	r7, #48	; 0x30
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40006400 	.word	0x40006400
 8000a10:	20000244 	.word	0x20000244
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020400 	.word	0x40020400
 8000a1c:	40006800 	.word	0x40006800

08000a20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08c      	sub	sp, #48	; 0x30
 8000a24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a36:	4b49      	ldr	r3, [pc, #292]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a48      	ldr	r2, [pc, #288]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000a3c:	f043 0310 	orr.w	r3, r3, #16
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b46      	ldr	r3, [pc, #280]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	61bb      	str	r3, [r7, #24]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a4e:	4b43      	ldr	r3, [pc, #268]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a42      	ldr	r2, [pc, #264]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000a54:	f043 0320 	orr.w	r3, r3, #32
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b40      	ldr	r3, [pc, #256]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0320 	and.w	r3, r3, #32
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	4b3d      	ldr	r3, [pc, #244]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a3c      	ldr	r2, [pc, #240]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b3a      	ldr	r3, [pc, #232]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	4b37      	ldr	r3, [pc, #220]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a36      	ldr	r2, [pc, #216]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b34      	ldr	r3, [pc, #208]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a30      	ldr	r2, [pc, #192]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a2a      	ldr	r2, [pc, #168]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <MX_GPIO_Init+0x13c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED2_Pin|LED1_Pin|LED7_Pin|LED4_Pin
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	217a      	movs	r1, #122	; 0x7a
 8000aca:	4825      	ldr	r0, [pc, #148]	; (8000b60 <MX_GPIO_Init+0x140>)
 8000acc:	f005 f906 	bl	8005cdc <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED6_Pin|LED8_Pin|LED5_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	211c      	movs	r1, #28
 8000ad4:	4823      	ldr	r0, [pc, #140]	; (8000b64 <MX_GPIO_Init+0x144>)
 8000ad6:	f005 f901 	bl	8005cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae0:	4821      	ldr	r0, [pc, #132]	; (8000b68 <MX_GPIO_Init+0x148>)
 8000ae2:	f005 f8fb 	bl	8005cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED7_Pin|LED4_Pin
 8000ae6:	237a      	movs	r3, #122	; 0x7a
 8000ae8:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4818      	ldr	r0, [pc, #96]	; (8000b60 <MX_GPIO_Init+0x140>)
 8000afe:	f004 ff41 	bl	8005984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED6_Pin|LED8_Pin|LED5_Pin;
 8000b02:	231c      	movs	r3, #28
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4812      	ldr	r0, [pc, #72]	; (8000b64 <MX_GPIO_Init+0x144>)
 8000b1a:	f004 ff33 	bl	8005984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	480c      	ldr	r0, [pc, #48]	; (8000b68 <MX_GPIO_Init+0x148>)
 8000b38:	f004 ff24 	bl	8005984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_SW_Pin;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_SW_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4807      	ldr	r0, [pc, #28]	; (8000b6c <MX_GPIO_Init+0x14c>)
 8000b50:	f004 ff18 	bl	8005984 <HAL_GPIO_Init>

}
 8000b54:	bf00      	nop
 8000b56:	3730      	adds	r7, #48	; 0x30
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40021400 	.word	0x40021400
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40020c00 	.word	0x40020c00

08000b70 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>:
#include "stm32f7xx_hal.h"


namespace STM32{

    gpio::gpio(GPIO_TypeDef* pPortHandler, uint16_t pin)
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	80fb      	strh	r3, [r7, #6]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 f854 	bl	8000c2e <_ZNSt8functionIFvvEEC1Ev>
    {
        m_portHandler = pPortHandler;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	611a      	str	r2, [r3, #16]
        m_pin = pin;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	88fa      	ldrh	r2, [r7, #6]
 8000b90:	829a      	strh	r2, [r3, #20]
    }
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <_ZN5STM324gpio6toggleEv>:
        GPIO_PinState ret = HAL_GPIO_ReadPin(m_portHandler, m_pin);
        return ret == GPIO_PIN_SET ? GPIO_ST::HIGH : GPIO_ST::LOW;
    }

    void gpio::toggle()
    {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
        HAL_GPIO_TogglePin(m_portHandler, m_pin);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	691a      	ldr	r2, [r3, #16]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	8a9b      	ldrh	r3, [r3, #20]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4610      	mov	r0, r2
 8000bb0:	f005 f8ad 	bl	8005d0e <HAL_GPIO_TogglePin>
    }
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_ZN5STM324gpio5writeE7GPIO_ST>:

    void gpio::write(GPIO_ST st)
    {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
        GPIO_PinState pinState = map_hal_st_to_igpio_st(st); 
 8000bc6:	6838      	ldr	r0, [r7, #0]
 8000bc8:	f000 f80e 	bl	8000be8 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(m_portHandler, m_pin, pinState);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6918      	ldr	r0, [r3, #16]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	8a9b      	ldrh	r3, [r3, #20]
 8000bd8:	7bfa      	ldrb	r2, [r7, #15]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f005 f87e 	bl	8005cdc <HAL_GPIO_WritePin>
    }
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>:

    GPIO_PinState gpio::map_hal_st_to_igpio_st(GPIO_ST st)
	{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
		return st == GPIO_ST::HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d101      	bne.n	8000bfa <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x12>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x14>
 8000bfa:	2300      	movs	r3, #0
	}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_ZNSt14_Function_baseC1Ev>:
	  static bool
	  _M_not_empty_function(const _Tp&)
	  { return true; }
      };

    _Function_base() = default;
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	461a      	mov	r2, r3
 8000c14:	2300      	movs	r3, #0
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	6053      	str	r3, [r2, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	6053      	str	r3, [r2, #4]
 8000c40:	6093      	str	r3, [r2, #8]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ffdf 	bl	8000c08 <_ZNSt14_Function_baseC1Ev>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_I2C4_Init+0x74>)
 8000c62:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <MX_I2C4_Init+0x78>)
 8000c64:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_I2C4_Init+0x74>)
 8000c68:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <MX_I2C4_Init+0x7c>)
 8000c6a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_I2C4_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_I2C4_Init+0x74>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_I2C4_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_I2C4_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_I2C4_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_I2C4_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_I2C4_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c96:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <MX_I2C4_Init+0x74>)
 8000c98:	f005 f854 	bl	8005d44 <HAL_I2C_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000ca2:	f002 ffcb 	bl	8003c3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <MX_I2C4_Init+0x74>)
 8000caa:	f005 f8db 	bl	8005e64 <HAL_I2CEx_ConfigAnalogFilter>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000cb4:	f002 ffc2 	bl	8003c3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_I2C4_Init+0x74>)
 8000cbc:	f005 f91d 	bl	8005efa <HAL_I2CEx_ConfigDigitalFilter>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000cc6:	f002 ffb9 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000248 	.word	0x20000248
 8000cd4:	40006000 	.word	0x40006000
 8000cd8:	20404768 	.word	0x20404768

08000cdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b0aa      	sub	sp, #168	; 0xa8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	2284      	movs	r2, #132	; 0x84
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f007 fe81 	bl	8008a04 <memset>
  if(i2cHandle->Instance==I2C4)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a22      	ldr	r2, [pc, #136]	; (8000d90 <HAL_I2C_MspInit+0xb4>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d13d      	bne.n	8000d88 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d10:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 fe3d 	bl	800699c <HAL_RCCEx_PeriphCLKConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000d28:	f002 ff88 	bl	8003c3c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_I2C_MspInit+0xb8>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	4a18      	ldr	r2, [pc, #96]	; (8000d94 <HAL_I2C_MspInit+0xb8>)
 8000d32:	f043 0320 	orr.w	r3, r3, #32
 8000d36:	6313      	str	r3, [r2, #48]	; 0x30
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <HAL_I2C_MspInit+0xb8>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	f003 0320 	and.w	r3, r3, #32
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000d44:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4c:	2312      	movs	r3, #18
 8000d4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d64:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480b      	ldr	r0, [pc, #44]	; (8000d98 <HAL_I2C_MspInit+0xbc>)
 8000d6c:	f004 fe0a 	bl	8005984 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <HAL_I2C_MspInit+0xb8>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <HAL_I2C_MspInit+0xb8>)
 8000d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_I2C_MspInit+0xb8>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000d88:	bf00      	nop
 8000d8a:	37a8      	adds	r7, #168	; 0xa8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40006000 	.word	0x40006000
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40021400 	.word	0x40021400

08000d9c <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
      if (_M_manager)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d005      	beq.n	8000de4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	2203      	movs	r2, #3
 8000de2:	4798      	blx	r3
    }
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_ZN9iPHandler4lockEv>:
    	}else{
    		return normalMode ? reg << 1 : (reg  << 0x01 | 1);
    	}
    }

    bool lock()
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
	{
		if(m_mutex){
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7a1b      	ldrb	r3, [r3, #8]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <_ZN9iPHandler4lockEv+0x14>
			return false;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e003      	b.n	8000e0a <_ZN9iPHandler4lockEv+0x1c>
		}
		m_mutex = true;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2201      	movs	r2, #1
 8000e06:	721a      	strb	r2, [r3, #8]
		return true;
 8000e08:	2301      	movs	r3, #1
	}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <_ZN9iPHandler6unlockEv>:


	bool unlock()
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
	{
		if(!m_mutex){
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7a1b      	ldrb	r3, [r3, #8]
 8000e22:	f083 0301 	eor.w	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <_ZN9iPHandler6unlockEv+0x1a>
			return false;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e003      	b.n	8000e38 <_ZN9iPHandler6unlockEv+0x22>
		}
		m_mutex = false;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	721a      	strb	r2, [r3, #8]
		return true;
 8000e36:	2301      	movs	r3, #1
	}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <_ZN8ICM426888GYRO_CNFlsENS0_3ODREh>:
        constexpr uint32_t operator<<(uint8_t n, ODR odr)
        {
            return  n << static_cast<uint8_t> (odr);
        }
        constexpr uint32_t operator<<(ODR odr, uint8_t n)
        {
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (odr) << n ;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	78fb      	ldrb	r3, [r7, #3]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
        }
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_ZN8ICM426888GYRO_CNFlsENS0_3FSREh>:
        constexpr uint32_t operator<<(uint8_t n, FSR fsr)
        {
            return  n << static_cast<uint8_t> (fsr);
        }   
        constexpr uint32_t operator<<( FSR fsr, uint8_t n)
        {
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (fsr) << n;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	78fb      	ldrb	r3, [r7, #3]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
        } 
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <_ZN8ICM426889ACCEL_CNFlsENS0_3ODREh>:
        constexpr uint32_t operator<<(uint8_t n, ODR odr)
        {
            return  n << static_cast<uint8_t> (odr);
        }
        constexpr uint32_t operator<<( ODR odr, uint8_t n)
        {
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (odr) << n;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	78fb      	ldrb	r3, [r7, #3]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
        }
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_ZN8ICM426889ACCEL_CNFlsENS0_3FSREh>:
        constexpr uint32_t operator<<(uint8_t n, FSR fsr)
        {
            return  n << static_cast<uint8_t> (fsr);
        } 
        constexpr uint32_t operator<<(FSR fsr, uint8_t n)
        {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (fsr) << n;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
        } 
 8000ec8:	4618      	mov	r0, r3
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <_ZN8ICM4268811FIFO_CONFIG13SET_FIFO_MODEENS_9FIFO_MODEE>:
    //FIFOconfig addresses and bits
	constexpr uint8_t FIFO_CONFIG_ADD = 0x16;
	namespace FIFO_CONFIG {
		constexpr uint8_t FIFO_MODE_POS = 0x06;
		constexpr uint8_t FIFO_MODE_MASK = static_cast<uint8_t>(0xC0  << FIFO_MODE_POS);
		constexpr uint8_t SET_FIFO_MODE(FIFO_MODE fifoMode) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
			return  (static_cast<uint8_t>(fifoMode) << FIFO_MODE_POS);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	019b      	lsls	r3, r3, #6
 8000ee2:	b2db      	uxtb	r3, r3
		}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>:
    //Gyro config addresses and bits
    constexpr uint8_t GYRO_CONFIG0_ADD = 0x4F;
    namespace GYRO_CONFIG0 {
        constexpr uint8_t FS_SEL_POS = 0x05;
        constexpr uint8_t FS_SEL_MASK = 0x07  << FS_SEL_POS;
        constexpr uint8_t SET_FSR(uint8_t reg, GYRO_CNF::FSR fsr) {
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
            return  (reg & ~FS_SEL_MASK) | ( fsr << FS_SEL_POS);
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 031f 	and.w	r3, r3, #31
 8000f02:	b2dc      	uxtb	r4, r3
 8000f04:	2105      	movs	r1, #5
 8000f06:	6838      	ldr	r0, [r7, #0]
 8000f08:	f7ff ffae 	bl	8000e68 <_ZN8ICM426888GYRO_CNFlsENS0_3FSREh>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4323      	orrs	r3, r4
 8000f12:	b2db      	uxtb	r3, r3
        }
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd90      	pop	{r4, r7, pc}

08000f1c <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>:

        constexpr uint8_t ODR_POS = 0x00;
        constexpr uint8_t ODR_MASK = 0x0F  << ODR_POS;
        constexpr uint8_t SET_ODR(uint8_t reg, GYRO_CNF::ODR odr) {
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
            return  (reg & ~ODR_MASK) | ( odr << ODR_POS);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f023 030f 	bic.w	r3, r3, #15
 8000f2e:	b2dc      	uxtb	r4, r3
 8000f30:	2100      	movs	r1, #0
 8000f32:	6838      	ldr	r0, [r7, #0]
 8000f34:	f7ff ff86 	bl	8000e44 <_ZN8ICM426888GYRO_CNFlsENS0_3ODREh>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4323      	orrs	r3, r4
 8000f3e:	b2db      	uxtb	r3, r3
        }
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd90      	pop	{r4, r7, pc}

08000f48 <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>:
    //Accel config addresses and bits
    constexpr uint8_t ACCEL_CONFIG0_ADD = 0x50;
    namespace ACCEL_CONFIG0 {
        constexpr uint8_t FS_SEL_POS = 0x05;
        constexpr uint8_t FS_SEL_MASK = 0x07  << FS_SEL_POS;
        constexpr uint8_t SET_FSR(uint8_t reg, ACCEL_CNF::FSR fsr) {
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
            return   (reg & ~FS_SEL_MASK)  | ( fsr << FS_SEL_POS);
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 031f 	and.w	r3, r3, #31
 8000f5a:	b2dc      	uxtb	r4, r3
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	6838      	ldr	r0, [r7, #0]
 8000f60:	f7ff ffa6 	bl	8000eb0 <_ZN8ICM426889ACCEL_CNFlsENS0_3FSREh>
 8000f64:	4603      	mov	r3, r0
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	4323      	orrs	r3, r4
 8000f6a:	b2db      	uxtb	r3, r3
        }
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd90      	pop	{r4, r7, pc}

08000f74 <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>:

        constexpr uint8_t ODR_POS = 0x00;
        constexpr uint8_t ODR_MASK = 0x0F  << ODR_POS;
        constexpr uint8_t SET_ODR(uint8_t reg, ACCEL_CNF::ODR odr) {
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
            return   (reg & ~ODR_MASK) | ( odr << ODR_POS);
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	f023 030f 	bic.w	r3, r3, #15
 8000f86:	b2dc      	uxtb	r4, r3
 8000f88:	2100      	movs	r1, #0
 8000f8a:	6838      	ldr	r0, [r7, #0]
 8000f8c:	f7ff ff7e 	bl	8000e8c <_ZN8ICM426889ACCEL_CNFlsENS0_3ODREh>
 8000f90:	4603      	mov	r3, r0
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	4323      	orrs	r3, r4
 8000f96:	b2db      	uxtb	r3, r3
        }
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd90      	pop	{r4, r7, pc}

08000fa0 <_ZN4iIMUC1Ev>:
 * @brief Define un struct vacio para que se haga un struct herencia del mismo en los archivos de implementación. Esto es para dejar a la implementación la forma en obtener los  datos de la IMU. Por ejemplo, si se tiene 1 IMU con lectura sobre 1 solo eje vs 3 ejes. De esta forma también se podría usar esta interfaz para implementar acelerómetros.
 * 
 */
// struct iImu_data{};

class iIMU {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <_ZN4iIMUC1Ev+0x1c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	08008c54 	.word	0x08008c54

08000fc0 <_ZN8ICM426889RegistersC1Ev>:
namespace ICM42688{

    constexpr uint16_t BUFFER_SIZE = 32;
    constexpr uint16_t IMU_DATA_BUFFER_SIZE = 16;

    struct Registers {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2206      	movs	r2, #6
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2206      	movs	r2, #6
 8000fd2:	705a      	strb	r2, [r3, #1]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2230      	movs	r2, #48	; 0x30
 8000fd8:	709a      	strb	r2, [r3, #2]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	70da      	strb	r2, [r3, #3]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	711a      	strb	r2, [r3, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	715a      	strb	r2, [r3, #5]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	719a      	strb	r2, [r3, #6]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_>:
#include "icm42688_utils.hpp"
#include "icm42688.hpp"

namespace ICM42688{

    icm42688::icm42688( Config& cnf, iPHandler* handler, gpio *cs,
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	603b      	str	r3, [r7, #0]
        , m_handler(handler)
        , m_cs(cs)
        , m_i2cAdd(slaveAdd)
        , m_INT1(INT1)
        , m_INT2(INT2)
        , m_currentBankReg(bankRegister::BANK0)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ffc5 	bl	8000fa0 <_ZN4iIMUC1Ev>
 8001016:	4a34      	ldr	r2, [pc, #208]	; (80010e8 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_+0xe8>)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	601a      	str	r2, [r3, #0]
        : imuDataBuffer()
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3304      	adds	r3, #4
 8001020:	4618      	mov	r0, r3
 8001022:	f001 f935 	bl	8002290 <_ZN11circ_bufferI7IMUDataLm16EtEC1Ev>
        , m_cnf(cnf)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	f503 74e8 	add.w	r4, r3, #464	; 0x1d0
 800102e:	4615      	mov	r5, r2
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001038:	e895 0003 	ldmia.w	r5, {r0, r1}
 800103c:	e884 0003 	stmia.w	r4, {r0, r1}
        , m_currentBankReg(bankRegister::BANK0)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ffba 	bl	8000fc0 <_ZN8ICM426889RegistersC1Ev>
        , m_handler(handler)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
        , m_cs(cs)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        , m_i2cAdd(slaveAdd)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001062:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
        , m_INT1(INT1)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800106a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
        , m_INT2(INT2)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001072:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
        , m_currentBankReg(bankRegister::BANK0)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258

    {
        m_mode = COMM_MODE::BLCK;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2200      	movs	r2, #0
 8001082:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
        m_gyroODRValue    = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800108c:	4618      	mov	r0, r3
 800108e:	f002 fb79 	bl	8003784 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 8001092:	eef0 7a40 	vmov.f32	s15, s0
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_gyroFSRValue    = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fbce 	bl	8003844 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 80010a8:	eef0 7a40 	vmov.f32	s15, s0
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	edc3 7a97 	vstr	s15, [r3, #604]	; 0x25c
        m_accelODRValue   = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 fbe7 	bl	800388c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 80010be:	eef0 7a40 	vmov.f32	s15, s0
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
        m_accelFSRValue   = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 fc3c 	bl	800394c <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 80010d4:	eef0 7a40 	vmov.f32	s15, s0
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264
    }
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bdb0      	pop	{r4, r5, r7, pc}
 80010e8:	08008c04 	.word	0x08008c04

080010ec <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioE>:
        m_spiSet = true;
        //write_config();
        enable();
    }

    icm42688::icm42688(Config& cnf, iPHandler *handlerSpi, gpio *cs)
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
        : icm42688(cnf, handlerSpi, cs, 0xFF, nullptr, nullptr)
 80010fa:	2300      	movs	r3, #0
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	2300      	movs	r3, #0
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	23ff      	movs	r3, #255	; 0xff
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	68b9      	ldr	r1, [r7, #8]
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f7ff ff77 	bl	8001000 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_>
    {
        m_spiSet = true;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
        //write_config();
        enable();
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 ff30 	bl	8001f80 <_ZN8ICM426888icm426886enableEv>
    }
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_ZN11PHandlerOptC1Ev>:
struct PHandlerOpt {
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	731a      	strb	r2, [r3, #12]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	735a      	strb	r2, [r3, #13]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	739a      	strb	r2, [r3, #14]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>:
        enable();
    }


    iIMU_ST icm42688::set_bank_register(bankRegister bankReg)
    {
 800115e:	b580      	push	{r7, lr}
 8001160:	b088      	sub	sp, #32
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
        //iHANDLER_ST retHandler(iHANDLER_ST::OK);
        uint8_t bank;
        PHandlerOpt opt;
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ffdc 	bl	800112a <_ZN11PHandlerOptC1Ev>

        if(m_currentBankReg != bankReg){
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d033      	beq.n	80011e6 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x88>

            bank = static_cast<uint8_t>(bankReg);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	77fb      	strb	r3, [r7, #31]
            opt.add = REG_BANK_SEL_ADD;
 8001182:	2376      	movs	r3, #118	; 0x76
 8001184:	733b      	strb	r3, [r7, #12]
            opt.size = 1;
 8001186:	2301      	movs	r3, #1
 8001188:	737b      	strb	r3, [r7, #13]
            opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x3e>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800119a:	e002      	b.n	80011a2 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x44>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80011a2:	613b      	str	r3, [r7, #16]
            m_TxBuffer[0] = bank;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7ffa      	ldrb	r2, [r7, #31]
 80011a8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

            if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3304      	adds	r3, #4
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80011c4:	f107 020c 	add.w	r2, r7, #12
 80011c8:	4798      	blx	r3
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	bf14      	ite	ne
 80011d0:	2301      	movne	r3, #1
 80011d2:	2300      	moveq	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x80>
            	return iIMU_ST::ERROR_COMM;
 80011da:	2301      	movs	r3, #1
 80011dc:	e004      	b.n	80011e8 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x8a>
            }

            m_currentBankReg = bankReg;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
        }

        return iIMU_ST::OK;
 80011e6:	2300      	movs	r3, #0
    }
 80011e8:	4618      	mov	r0, r3
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_ZN8ICM426888icm426889save_dataEv>:

    /////////////////////////////////////// PUBLIC ///////////////////////////////////////

        
    iIMU_ST icm42688::save_data()
    {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
        iIMU_ST ret = iIMU_ST::OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
        iPHANDLER_ST retHandler(iPHANDLER_ST::OK);
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
        PHandlerOpt opt;
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff90 	bl	800112a <_ZN11PHandlerOptC1Ev>

        ret = set_bank_register(bankRegister::BANK0);
 800120a:	2100      	movs	r1, #0
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ffa6 	bl	800115e <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001212:	61f8      	str	r0, [r7, #28]
        if( ret != iIMU_ST::OK){
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <_ZN8ICM426888icm426889save_dataEv+0x2e>
            return ret;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	e055      	b.n	80012ca <_ZN8ICM426888icm426889save_dataEv+0xda>
        }
        

        opt.add = TEMP_DATA1_ADD;
 800121e:	231d      	movs	r3, #29
 8001220:	723b      	strb	r3, [r7, #8]
        opt.size = IMU_DATA_N_REGS;
 8001222:	230e      	movs	r3, #14
 8001224:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <_ZN8ICM426888icm426889save_dataEv+0x48>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001236:	e002      	b.n	800123e <_ZN8ICM426888icm426889save_dataEv+0x4e>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800123e:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001246:	613b      	str	r3, [r7, #16]


        if(!m_handler->lock()){
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fdcd 	bl	8000dee <_ZN9iPHandler4lockEv>
 8001254:	4603      	mov	r3, r0
 8001256:	f083 0301 	eor.w	r3, r3, #1
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <_ZN8ICM426888icm426889save_dataEv+0x74>
        	return iIMU_ST::ERROR_HANDLER_UNAVAILABLE;
 8001260:	2305      	movs	r3, #5
 8001262:	e032      	b.n	80012ca <_ZN8ICM426888icm426889save_dataEv+0xda>
        }

        retHandler = m_handler->read_registers(opt);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f107 0108 	add.w	r1, r7, #8
 8001278:	4610      	mov	r0, r2
 800127a:	4798      	blx	r3
 800127c:	61b8      	str	r0, [r7, #24]
        if(retHandler != iPHANDLER_ST::OK){
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <_ZN8ICM426888icm426889save_dataEv+0x9e>
            return map_handler_ret_to_iIMU_ret(retHandler);
 8001284:	69b8      	ldr	r0, [r7, #24]
 8001286:	f000 ffdf 	bl	8002248 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST>
 800128a:	4603      	mov	r3, r0
 800128c:	e01d      	b.n	80012ca <_ZN8ICM426888icm426889save_dataEv+0xda>
        }
         

        if(m_mode == COMM_MODE::BLCK){
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001294:	2b00      	cmp	r3, #0
 8001296:	d117      	bne.n	80012c8 <_ZN8ICM426888icm426889save_dataEv+0xd8>
        	memcpy(m_RxBuffer, m_handler->m_recvBuffer, opt.size);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f503 7006 	add.w	r0, r3, #536	; 0x218
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	7a7a      	ldrb	r2, [r7, #9]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f007 fc33 	bl	8008b14 <memcpy>
            m_handler->unlock();
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fdae 	bl	8000e16 <_ZN9iPHandler6unlockEv>
        	//load_data(dummyIMUData, m_RxBuffer);
            load_data(m_RxBuffer);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80012c0:	4619      	mov	r1, r3
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 ff48 	bl	8002158 <_ZN8ICM426888icm426889load_dataEPh>
            //m_handler->m_mutex = false;
        }


        return ret;
 80012c8:	69fb      	ldr	r3, [r7, #28]
    }
 80012ca:	4618      	mov	r0, r3
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_ZN8ICM426888icm4268818save_data_callbackEv>:

    void icm42688::save_data_callback()
    {
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
        //IMUData dummyIMUData;
        load_data(m_handler->m_recvBuffer);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4619      	mov	r1, r3
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 ff37 	bl	8002158 <_ZN8ICM426888icm426889load_dataEPh>
        m_handler->unlock();
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fd90 	bl	8000e16 <_ZN9iPHandler6unlockEv>
        //m_handler->m_mutex = false;
    }
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_ZN8ICM426888icm4268814save_fifo_dataEh>:
    


    iIMU_ST icm42688::save_fifo_data(uint8_t qty)
    {
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	70fb      	strb	r3, [r7, #3]
				return iIMU_ST::ERROR_BUFFER;
			}
        }

        */
        return iIMU_ST::OK;
 800130a:	2300      	movs	r3, #0
        
    }
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <_ZN8ICM426888icm4268823save_fifo_data_callbackEv>:

    void icm42688::save_fifo_data_callback()
    {
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
            dummyIMUData.temp   = convertTempFIFOData(mRxBuffer[FIFO_PACKET_SIZE*i + 13]);
            imuDataBuffer.write(dummyIMUData);
        }
        */
        //return;
    }
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_ZN8ICM426888icm426889read_dataEP7IMUData>:


    iIMU_ST icm42688::read_data(IMUData *pData)
    {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
        if(imuDataBuffer.read(pData) == EXIT_OK){
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3304      	adds	r3, #4
 800133a:	6839      	ldr	r1, [r7, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 ffc5 	bl	80022cc <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_>
 8001342:	4603      	mov	r3, r0
 8001344:	2b01      	cmp	r3, #1
 8001346:	bf0c      	ite	eq
 8001348:	2301      	moveq	r3, #1
 800134a:	2300      	movne	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <_ZN8ICM426888icm426889read_dataEP7IMUData+0x2a>
            return iIMU_ST::OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <_ZN8ICM426888icm426889read_dataEP7IMUData+0x2c>
        }
        return iIMU_ST::ERROR_BUFFER;
 8001356:	2304      	movs	r3, #4
    }
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <_ZN8ICM426888icm4268812set_gyro_odrEh>:


    iIMU_ST icm42688::set_gyro_odr(uint8_t odr) 
    {
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	70fb      	strb	r3, [r7, #3]
        GYRO_CNF::ODR gyroNewODR = static_cast<GYRO_CNF::ODR> (odr);
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fed8 	bl	800112a <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 800137a:	2100      	movs	r1, #0
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff feee 	bl	800115e <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf14      	ite	ne
 8001388:	2301      	movne	r3, #1
 800138a:	2300      	moveq	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <_ZN8ICM426888icm4268812set_gyro_odrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 8001392:	2301      	movs	r3, #1
 8001394:	e04e      	b.n	8001434 <_ZN8ICM426888icm4268812set_gyro_odrEh+0xd4>
        }
        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_ODR(m_reg.GYRO_CONFIG0, gyroNewODR);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 800139c:	69f9      	ldr	r1, [r7, #28]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fdbc 	bl	8000f1c <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>
 80013a4:	4603      	mov	r3, r0
 80013a6:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7efa      	ldrb	r2, [r7, #27]
 80013ac:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = GYRO_CONFIG0_ADD;
 80013b0:	234f      	movs	r3, #79	; 0x4f
 80013b2:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <_ZN8ICM426888icm4268812set_gyro_odrEh+0x6a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80013c8:	e002      	b.n	80013d0 <_ZN8ICM426888icm4268812set_gyro_odrEh+0x70>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80013d0:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80013d8:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3304      	adds	r3, #4
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80013f2:	f107 0208 	add.w	r2, r7, #8
 80013f6:	4798      	blx	r3
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	bf14      	ite	ne
 80013fe:	2301      	movne	r3, #1
 8001400:	2300      	moveq	r3, #0
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <_ZN8ICM426888icm4268812set_gyro_odrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 8001408:	2301      	movs	r3, #1
 800140a:	e013      	b.n	8001434 <_ZN8ICM426888icm4268812set_gyro_odrEh+0xd4>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7efa      	ldrb	r2, [r7, #27]
 8001410:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_cnf.gyroODR = gyroNewODR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        m_gyroODRValue = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8001422:	4618      	mov	r0, r3
 8001424:	f002 f9ae 	bl	8003784 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 8001428:	eef0 7a40 	vmov.f32	s15, s0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260

        return iIMU_ST::OK;
 8001432:	2300      	movs	r3, #0
    }
 8001434:	4618      	mov	r0, r3
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <_ZN8ICM426888icm4268812set_gyro_fsrEh>:


    iIMU_ST icm42688::set_gyro_fsr(uint8_t fsr)
    {
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	70fb      	strb	r3, [r7, #3]
        GYRO_CNF::FSR gyroNewFSR = static_cast<GYRO_CNF::FSR> (fsr);
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fe6a 	bl	800112a <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8001456:	2100      	movs	r1, #0
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fe80 	bl	800115e <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf14      	ite	ne
 8001464:	2301      	movne	r3, #1
 8001466:	2300      	moveq	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 800146e:	2301      	movs	r3, #1
 8001470:	e04e      	b.n	8001510 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xd4>
        }

        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_FSR(m_reg.GYRO_CONFIG0, gyroNewFSR);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8001478:	69f9      	ldr	r1, [r7, #28]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fd38 	bl	8000ef0 <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>
 8001480:	4603      	mov	r3, r0
 8001482:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7efa      	ldrb	r2, [r7, #27]
 8001488:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = GYRO_CONFIG0_ADD;
 800148c:	234f      	movs	r3, #79	; 0x4f
 800148e:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 8001490:	2301      	movs	r3, #1
 8001492:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x6a>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80014a4:	e002      	b.n	80014ac <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x70>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80014ac:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80014b4:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3304      	adds	r3, #4
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80014ce:	f107 0208 	add.w	r2, r7, #8
 80014d2:	4798      	blx	r3
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bf14      	ite	ne
 80014da:	2301      	movne	r3, #1
 80014dc:	2300      	moveq	r3, #0
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e013      	b.n	8001510 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xd4>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7efa      	ldrb	r2, [r7, #27]
 80014ec:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_cnf.gyroFSR = gyroNewFSR; 
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        m_gyroODRValue = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 f9a0 	bl	8003844 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 8001504:	eef0 7a40 	vmov.f32	s15, s0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260

        return iIMU_ST::OK;
 800150e:	2300      	movs	r3, #0

    } 
 8001510:	4618      	mov	r0, r3
 8001512:	3720      	adds	r7, #32
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_ZN8ICM426888icm4268813set_accel_odrEh>:


    iIMU_ST icm42688::set_accel_odr(uint8_t odr)
    {
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	70fb      	strb	r3, [r7, #3]
        ACCEL_CNF::ODR accelNewODR = static_cast<ACCEL_CNF::ODR> (odr);
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fdfc 	bl	800112a <_ZN11PHandlerOptC1Ev>
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8001532:	2100      	movs	r1, #0
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fe12 	bl	800115e <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	bf14      	ite	ne
 8001540:	2301      	movne	r3, #1
 8001542:	2300      	moveq	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <_ZN8ICM426888icm4268813set_accel_odrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 800154a:	2301      	movs	r3, #1
 800154c:	e04e      	b.n	80015ec <_ZN8ICM426888icm4268813set_accel_odrEh+0xd4>
        }

        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_ODR(m_reg.ACCEL_CONFIG0, accelNewODR);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 8001554:	69f9      	ldr	r1, [r7, #28]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fd0c 	bl	8000f74 <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>
 800155c:	4603      	mov	r3, r0
 800155e:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7efa      	ldrb	r2, [r7, #27]
 8001564:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = ACCEL_CONFIG0_ADD;
 8001568:	2350      	movs	r3, #80	; 0x50
 800156a:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 800156c:	2301      	movs	r3, #1
 800156e:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <_ZN8ICM426888icm4268813set_accel_odrEh+0x6a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001580:	e002      	b.n	8001588 <_ZN8ICM426888icm4268813set_accel_odrEh+0x70>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001588:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001590:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3304      	adds	r3, #4
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80015aa:	f107 0208 	add.w	r2, r7, #8
 80015ae:	4798      	blx	r3
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bf14      	ite	ne
 80015b6:	2301      	movne	r3, #1
 80015b8:	2300      	moveq	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <_ZN8ICM426888icm4268813set_accel_odrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e013      	b.n	80015ec <_ZN8ICM426888icm4268813set_accel_odrEh+0xd4>
        }

        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7efa      	ldrb	r2, [r7, #27]
 80015c8:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        m_cnf.accelODR = accelNewODR; 
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        m_accelODRValue = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 f956 	bl	800388c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 80015e0:	eef0 7a40 	vmov.f32	s15, s0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268

        return iIMU_ST::OK;
 80015ea:	2300      	movs	r3, #0
    }
 80015ec:	4618      	mov	r0, r3
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_ZN8ICM426888icm4268813set_accel_fsrEh>:


    iIMU_ST icm42688::set_accel_fsr(uint8_t fsr)
    {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
        ACCEL_CNF::FSR accelNewFSR = static_cast<ACCEL_CNF::FSR> (fsr);
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fd8e 	bl	800112a <_ZN11PHandlerOptC1Ev>
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 800160e:	2100      	movs	r1, #0
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fda4 	bl	800115e <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf14      	ite	ne
 800161c:	2301      	movne	r3, #1
 800161e:	2300      	moveq	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <_ZN8ICM426888icm4268813set_accel_fsrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 8001626:	2301      	movs	r3, #1
 8001628:	e04e      	b.n	80016c8 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xd4>
        }

        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_FSR(m_reg.ACCEL_CONFIG0, accelNewFSR);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 8001630:	69f9      	ldr	r1, [r7, #28]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fc88 	bl	8000f48 <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>
 8001638:	4603      	mov	r3, r0
 800163a:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7efa      	ldrb	r2, [r7, #27]
 8001640:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = ACCEL_CONFIG0_ADD;
 8001644:	2350      	movs	r3, #80	; 0x50
 8001646:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 8001648:	2301      	movs	r3, #1
 800164a:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <_ZN8ICM426888icm4268813set_accel_fsrEh+0x6a>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800165c:	e002      	b.n	8001664 <_ZN8ICM426888icm4268813set_accel_fsrEh+0x70>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001664:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 800166c:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3304      	adds	r3, #4
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001686:	f107 0208 	add.w	r2, r7, #8
 800168a:	4798      	blx	r3
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf14      	ite	ne
 8001692:	2301      	movne	r3, #1
 8001694:	2300      	moveq	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 800169c:	2301      	movs	r3, #1
 800169e:	e013      	b.n	80016c8 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xd4>
        }

        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7efa      	ldrb	r2, [r7, #27]
 80016a4:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        m_cnf.accelFSR = accelNewFSR; 
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
        m_accelFSRValue = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 f948 	bl	800394c <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 80016bc:	eef0 7a40 	vmov.f32	s15, s0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264

        return iIMU_ST::OK;
 80016c6:	2300      	movs	r3, #0
    }
 80016c8:	4618      	mov	r0, r3
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <_ZN8ICM426888icm4268819get_accel_odr_valueEv>:

    float icm42688::get_accel_odr_value()
    {
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
        return m_accelODRValue;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80016de:	ee07 3a90 	vmov	s15, r3
    }
 80016e2:	eeb0 0a67 	vmov.f32	s0, s15
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_ZN8ICM426888icm4268819get_accel_fsr_valueEv>:
    float icm42688::get_accel_fsr_value()
    {
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
        return m_accelFSRValue;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80016fe:	ee07 3a90 	vmov	s15, r3
    }
 8001702:	eeb0 0a67 	vmov.f32	s0, s15
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_ZN8ICM426888icm4268818get_gyro_odr_valueEv>:
    float icm42688::get_gyro_odr_value() 
    {
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
        return m_gyroODRValue;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800171e:	ee07 3a90 	vmov	s15, r3
    }
 8001722:	eeb0 0a67 	vmov.f32	s0, s15
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_ZN8ICM426888icm4268818get_gyro_fsr_valueEv>:
    float icm42688::get_gyro_fsr_value() 
    {
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
        return m_gyroFSRValue;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 800173e:	ee07 3a90 	vmov	s15, r3
    }
 8001742:	eeb0 0a67 	vmov.f32	s0, s15
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_ZN8ICM426888icm4268820get_accel_resolutionEv>:
    
    float icm42688::get_accel_resolution()
    {
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
        return m_accelFSRValue/(1<<15);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	edd3 7a99 	vldr	s15, [r3, #612]	; 0x264
 800175e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001778 <_ZN8ICM426888icm4268820get_accel_resolutionEv+0x28>
 8001762:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001766:	eef0 7a66 	vmov.f32	s15, s13
    }
 800176a:	eeb0 0a67 	vmov.f32	s0, s15
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	47000000 	.word	0x47000000

0800177c <_ZN8ICM426888icm4268819get_gyro_resolutionEv>:
    
    float icm42688::get_gyro_resolution()
    {
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
        return m_gyroFSRValue/(1<<15);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 800178a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80017a4 <_ZN8ICM426888icm4268819get_gyro_resolutionEv+0x28>
 800178e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001792:	eef0 7a66 	vmov.f32	s15, s13
    }
 8001796:	eeb0 0a67 	vmov.f32	s0, s15
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	47000000 	.word	0x47000000

080017a8 <_ZN8ICM426888icm4268815convertGyroDataEhh>:



    float icm42688::convertGyroData(uint8_t rawGyroH, uint8_t rawGyroL)
    {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	ed2d 8b02 	vpush	{d8}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
 80017b8:	4613      	mov	r3, r2
 80017ba:	70bb      	strb	r3, [r7, #2]
        int16_t gyro_data = (rawGyroH << 8)  | rawGyroL;
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	78bb      	ldrb	r3, [r7, #2]
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	81fb      	strh	r3, [r7, #14]
        return gyro_data * get_gyro_resolution();
 80017ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	3340      	adds	r3, #64	; 0x40
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	4798      	blx	r3
 80017e2:	eef0 7a40 	vmov.f32	s15, s0
 80017e6:	ee68 7a27 	vmul.f32	s15, s16, s15

    }
 80017ea:	eeb0 0a67 	vmov.f32	s0, s15
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	ecbd 8b02 	vpop	{d8}
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_ZN8ICM426888icm4268816convertAccelDataEhh>:

    float icm42688::convertAccelData(uint8_t rawAccelH, uint8_t rawAccelL)
    {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	ed2d 8b02 	vpush	{d8}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	70fb      	strb	r3, [r7, #3]
 8001808:	4613      	mov	r3, r2
 800180a:	70bb      	strb	r3, [r7, #2]
        int16_t gyro_data = (rawAccelH << 8)  | rawAccelL;
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	b21a      	sxth	r2, r3
 8001812:	78bb      	ldrb	r3, [r7, #2]
 8001814:	b21b      	sxth	r3, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	81fb      	strh	r3, [r7, #14]
        return gyro_data * get_accel_resolution();
 800181a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	333c      	adds	r3, #60	; 0x3c
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	4798      	blx	r3
 8001832:	eef0 7a40 	vmov.f32	s15, s0
 8001836:	ee68 7a27 	vmul.f32	s15, s16, s15
    }
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	ecbd 8b02 	vpop	{d8}
 8001846:	bd80      	pop	{r7, pc}

08001848 <_ZN8ICM426888icm4268812write_configEv>:

    iIMU_ST icm42688::write_config()
    {
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
        iIMU_ST ret = iIMU_ST::OK; 
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
        
        
        if( (ret = write_config_accel_gyro()) != iIMU_ST::OK){
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f82c 	bl	80018b2 <_ZN8ICM426888icm4268823write_config_accel_gyroEv>
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf14      	ite	ne
 8001862:	2301      	movne	r3, #1
 8001864:	2300      	moveq	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <_ZN8ICM426888icm4268812write_configEv+0x28>
            return ret;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	e01c      	b.n	80018aa <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        if( (ret = write_config_FIFO()) != iIMU_ST::OK){
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f8eb 	bl	8001a4c <_ZN8ICM426888icm4268817write_config_FIFOEv>
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	bf14      	ite	ne
 800187e:	2301      	movne	r3, #1
 8001880:	2300      	moveq	r3, #0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <_ZN8ICM426888icm4268812write_configEv+0x44>
            return ret;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	e00e      	b.n	80018aa <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        if( (ret = write_config_int()) != iIMU_ST::OK){
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f9d5 	bl	8001c3c <_ZN8ICM426888icm4268816write_config_intEv>
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	bf14      	ite	ne
 800189a:	2301      	movne	r3, #1
 800189c:	2300      	moveq	r3, #0
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <_ZN8ICM426888icm4268812write_configEv+0x60>
            return ret;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	e000      	b.n	80018aa <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        return ret;
 80018a8:	68fb      	ldr	r3, [r7, #12]
        
    }
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_ZN8ICM426888icm4268823write_config_accel_gyroEv>:

    iIMU_ST icm42688::write_config_accel_gyro()
    {
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b088      	sub	sp, #32
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fc33 	bl	800112a <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80018c4:	2100      	movs	r1, #0
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fc49 	bl	800115e <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	bf14      	ite	ne
 80018d2:	2301      	movne	r3, #1
 80018d4:	2300      	moveq	r3, #0
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0b1      	b.n	8001a44 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }


        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_FSR(m_reg.GYRO_CONFIG0, m_cnf.gyroFSR);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 2238 	ldrb.w	r2, [r3, #568]	; 0x238
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80018ec:	4619      	mov	r1, r3
 80018ee:	4610      	mov	r0, r2
 80018f0:	f7ff fafe 	bl	8000ef0 <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>
 80018f4:	4603      	mov	r3, r0
 80018f6:	77fb      	strb	r3, [r7, #31]
        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_ODR(new_GYRO_CONFIG0, m_cnf.gyroODR);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 80018fe:	7ffb      	ldrb	r3, [r7, #31]
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fb0a 	bl	8000f1c <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>
 8001908:	4603      	mov	r3, r0
 800190a:	77fb      	strb	r3, [r7, #31]
        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_FSR(m_reg.ACCEL_CONFIG0, m_cnf.accelFSR);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 2239 	ldrb.w	r2, [r3, #569]	; 0x239
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8001918:	4619      	mov	r1, r3
 800191a:	4610      	mov	r0, r2
 800191c:	f7ff fb14 	bl	8000f48 <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>
 8001920:	4603      	mov	r3, r0
 8001922:	77bb      	strb	r3, [r7, #30]
        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_ODR(new_ACCEL_CONFIG0, m_cnf.accelODR);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 800192a:	7fbb      	ldrb	r3, [r7, #30]
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fb20 	bl	8000f74 <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>
 8001934:	4603      	mov	r3, r0
 8001936:	77bb      	strb	r3, [r7, #30]


        //m_TxBuffer[1] = new_ACCEL_CONFIG0;

        opt.size = 1;
 8001938:	2301      	movs	r3, #1
 800193a:	737b      	strb	r3, [r7, #13]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x9c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800194c:	e002      	b.n	8001954 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0xa2>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001954:	613b      	str	r3, [r7, #16]
        opt.mode = m_mode;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 800195c:	617b      	str	r3, [r7, #20]

        opt.add = GYRO_CONFIG0_ADD;
 800195e:	234f      	movs	r3, #79	; 0x4f
 8001960:	733b      	strb	r3, [r7, #12]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7ffa      	ldrb	r2, [r7, #31]
 8001966:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	3304      	adds	r3, #4
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001982:	f107 020c 	add.w	r2, r7, #12
 8001986:	4798      	blx	r3
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	bf14      	ite	ne
 800198e:	2301      	movne	r3, #1
 8001990:	2300      	moveq	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0xea>
            return iIMU_ST::ERROR_COMM;
 8001998:	2301      	movs	r3, #1
 800199a:	e053      	b.n	8001a44 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }

        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7fba      	ldrb	r2, [r7, #30]
 80019a0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
        opt.add = ACCEL_CONFIG0_ADD;
 80019a4:	2350      	movs	r3, #80	; 0x50
 80019a6:	733b      	strb	r3, [r7, #12]
        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	3304      	adds	r3, #4
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80019c0:	f107 020c 	add.w	r2, r7, #12
 80019c4:	4798      	blx	r3
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf14      	ite	ne
 80019cc:	2301      	movne	r3, #1
 80019ce:	2300      	moveq	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x128>
            return iIMU_ST::ERROR_COMM;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e034      	b.n	8001a44 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7ffa      	ldrb	r2, [r7, #31]
 80019de:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7fba      	ldrb	r2, [r7, #30]
 80019e6:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        
        m_gyroODRValue = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80019f0:	4618      	mov	r0, r3
 80019f2:	f001 fec7 	bl	8003784 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 80019f6:	eef0 7a40 	vmov.f32	s15, s0
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_gyroODRValue = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 ff1c 	bl	8003844 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 8001a0c:	eef0 7a40 	vmov.f32	s15, s0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_accelODRValue = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 ff35 	bl	800388c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 8001a22:	eef0 7a40 	vmov.f32	s15, s0
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
        m_accelFSRValue = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8001a32:	4618      	mov	r0, r3
 8001a34:	f001 ff8a 	bl	800394c <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 8001a38:	eef0 7a40 	vmov.f32	s15, s0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264

        return iIMU_ST::OK;
 8001a42:	2300      	movs	r3, #0
    }
 8001a44:	4618      	mov	r0, r3
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_ZN8ICM426888icm4268817write_config_FIFOEv>:
    
    
    iIMU_ST icm42688::write_config_FIFO()
    {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fb66 	bl	800112a <_ZN11PHandlerOptC1Ev>
        uint8_t new_INTF_CONFIG0;
        uint8_t new_FIFO_CONFIG;
        uint8_t new_FIFO_CONFIG1, new_FIFO_CONFIG2, new_FIFO_CONFIG3;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8001a5e:	2100      	movs	r1, #0
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff fb7c 	bl	800115e <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf14      	ite	ne
 8001a6c:	2301      	movne	r3, #1
 8001a6e:	2300      	moveq	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <_ZN8ICM426888icm4268817write_config_FIFOEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e0dc      	b.n	8001c34 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }


        // Configuracion de registro INTF_CONFIG0
        opt.add = INTF_CONFIG0_ADD;
 8001a7a:	234c      	movs	r3, #76	; 0x4c
 8001a7c:	733b      	strb	r3, [r7, #12]
        opt.size = 1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	737b      	strb	r3, [r7, #13]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x48>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001a92:	e002      	b.n	8001a9a <_ZN8ICM426888icm4268817write_config_FIFOEv+0x4e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001a9a:	613b      	str	r3, [r7, #16]
        opt.mode = m_mode;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001aa2:	617b      	str	r3, [r7, #20]

        new_INTF_CONFIG0 = m_reg.INTF_CONFIG0 | FIFO_CNF::FIFO_COUNT_REC;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 8001aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	72fb      	strb	r3, [r7, #11]
        if(m_handler->write_registers(&new_INTF_CONFIG0, opt) != iPHANDLER_ST::OK){
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f107 020c 	add.w	r2, r7, #12
 8001ac8:	f107 010b 	add.w	r1, r7, #11
 8001acc:	4798      	blx	r3
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bf14      	ite	ne
 8001ad4:	2301      	movne	r3, #1
 8001ad6:	2300      	moveq	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x96>
            return iIMU_ST::ERROR_COMM;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0a8      	b.n	8001c34 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }
        m_reg.INTF_CONFIG0 = new_INTF_CONFIG0;
 8001ae2:	7afa      	ldrb	r2, [r7, #11]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a

        // Configuracion de registro FIFO_CONFIG
        opt.add = FIFO_CONFIG_ADD;
 8001aea:	2316      	movs	r3, #22
 8001aec:	733b      	strb	r3, [r7, #12]
        new_FIFO_CONFIG = FIFO_CONFIG::SET_FIFO_MODE(m_cnf.fifoCnf.mode);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff f9ed 	bl	8000ed4 <_ZN8ICM4268811FIFO_CONFIG13SET_FIFO_MODEENS_9FIFO_MODEE>
 8001afa:	4603      	mov	r3, r0
 8001afc:	72bb      	strb	r3, [r7, #10]
        if(m_handler->write_registers(&new_FIFO_CONFIG, opt) != iPHANDLER_ST::OK){
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f107 020c 	add.w	r2, r7, #12
 8001b14:	f107 010a 	add.w	r1, r7, #10
 8001b18:	4798      	blx	r3
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	bf14      	ite	ne
 8001b20:	2301      	movne	r3, #1
 8001b22:	2300      	moveq	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <_ZN8ICM426888icm4268817write_config_FIFOEv+0xe2>
            return iIMU_ST::ERROR_COMM;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e082      	b.n	8001c34 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }        
        m_reg.FIFO_CONFIG = new_FIFO_CONFIG;
 8001b2e:	7aba      	ldrb	r2, [r7, #10]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b


        // Configuracion de los registros FIFO_CONFIG1, FIFO_CONFIG2 y FIFO_CONFIG3
        if(m_cnf.fifoCnf.mode != FIFO_MODE::BYPASS){
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d078      	beq.n	8001c32 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e6>
        	//Sets packets and watermark
        	new_FIFO_CONFIG1 = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	77fb      	strb	r3, [r7, #31]
        	new_FIFO_CONFIG1 = FIFO_CNF::FIFO_TEMP_EN | FIFO_CNF::FIFO_GYRO_EN | FIFO_CNF::FIFO_ACCEL_EN;
 8001b44:	2307      	movs	r3, #7
 8001b46:	77fb      	strb	r3, [r7, #31]
        	new_FIFO_CONFIG2 = m_cnf.fifoCnf.watermark;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 8001b4e:	77bb      	strb	r3, [r7, #30]
        	new_FIFO_CONFIG3 = m_cnf.fifoCnf.watermark >> 8;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	777b      	strb	r3, [r7, #29]

            
             opt.size = 1;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	737b      	strb	r3, [r7, #13]

            opt.add = FIFO_CONFIG1_ADD;
 8001b60:	235f      	movs	r3, #95	; 0x5f
 8001b62:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG1;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7ffa      	ldrb	r2, [r7, #31]
 8001b68:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
            //m_TxBuffer[1] = new_FIFO_CONFIG2;
            //m_TxBuffer[2] = new_FIFO_CONFIG3;

            if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001b84:	f107 020c 	add.w	r2, r7, #12
 8001b88:	4798      	blx	r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf14      	ite	ne
 8001b90:	2301      	movne	r3, #1
 8001b92:	2300      	moveq	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <_ZN8ICM426888icm4268817write_config_FIFOEv+0x152>
                return iIMU_ST::ERROR_COMM;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e04a      	b.n	8001c34 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            opt.add = FIFO_CONFIG2_ADD;
 8001b9e:	2360      	movs	r3, #96	; 0x60
 8001ba0:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG2;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7fba      	ldrb	r2, [r7, #30]
 8001ba6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
             if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001bc2:	f107 020c 	add.w	r2, r7, #12
 8001bc6:	4798      	blx	r3
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bf14      	ite	ne
 8001bce:	2301      	movne	r3, #1
 8001bd0:	2300      	moveq	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <_ZN8ICM426888icm4268817write_config_FIFOEv+0x190>
                return iIMU_ST::ERROR_COMM;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e02b      	b.n	8001c34 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            opt.add = FIFO_CONFIG3_ADD;
 8001bdc:	2361      	movs	r3, #97	; 0x61
 8001bde:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG3;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7f7a      	ldrb	r2, [r7, #29]
 8001be4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
             if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001c00:	f107 020c 	add.w	r2, r7, #12
 8001c04:	4798      	blx	r3
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1ce>
                return iIMU_ST::ERROR_COMM;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00c      	b.n	8001c34 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7ffa      	ldrb	r2, [r7, #31]
 8001c1e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG2;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7fba      	ldrb	r2, [r7, #30]
 8001c26:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG3;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	7f7a      	ldrb	r2, [r7, #29]
 8001c2e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
        }

        return iIMU_ST::OK;
 8001c32:	2300      	movs	r3, #0
    }
 8001c34:	4618      	mov	r0, r3
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_ZN8ICM426888icm4268816write_config_intEv>:


    iIMU_ST icm42688::write_config_int()
    {
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	f2ad 5d2c 	subw	sp, sp, #1324	; 0x52c
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001c48:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001c4c:	6018      	str	r0, [r3, #0]

        PHandlerOpt opt;
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fa69 	bl	800112a <_ZN11PHandlerOptC1Ev>
        uint8_t new_INT_CONFIG = 0x00;
 8001c58:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001c5c:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
        uint8_t new_INT_SOURCE0;
        uint8_t new_INT_SOURCE1;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8001c64:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001c68:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	f7ff fa75 	bl	800115e <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	bf14      	ite	ne
 8001c7a:	2301      	movne	r3, #1
 8001c7c:	2300      	moveq	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <_ZN8ICM426888icm4268816write_config_intEv+0x4c>
            return iIMU_ST::ERROR_COMM;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e174      	b.n	8001f72 <_ZN8ICM426888icm4268816write_config_intEv+0x336>
        }
        
        opt.size = 1;
 8001c88:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001c8c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001c90:	2201      	movs	r2, #1
 8001c92:	705a      	strb	r2, [r3, #1]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001c94:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001c98:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <_ZN8ICM426888icm4268816write_config_intEv+0x7a>
 8001ca6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001caa:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001cb4:	e006      	b.n	8001cc4 <_ZN8ICM426888icm4268816write_config_intEv+0x88>
 8001cb6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001cba:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001cc4:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8001cc8:	f2a2 521c 	subw	r2, r2, #1308	; 0x51c
 8001ccc:	6053      	str	r3, [r2, #4]
        opt.mode = m_mode;
 8001cce:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001cd2:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8001cdc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001ce0:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001ce4:	609a      	str	r2, [r3, #8]


    	if(m_cnf.intCnf.int1Source != INT_SOURCE::DISABLED){
 8001ce6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001cea:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cf8:	f000 80bb 	beq.w	8001e72 <_ZN8ICM426888icm4268816write_config_intEv+0x236>
    		new_INT_CONFIG |= static_cast<uint8_t>(m_cnf.intCnf.int1Mode);
 8001cfc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d00:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d10:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d1e:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001d22:	701a      	strb	r2, [r3, #0]
    		new_INT_SOURCE0 = (1 << static_cast<uint8_t>(m_cnf.intCnf.int1Source ));
 8001d24:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d28:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	2301      	movs	r3, #1
 8001d38:	4093      	lsls	r3, r2
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d40:	f2a3 531e 	subw	r3, r3, #1310	; 0x51e
 8001d44:	701a      	strb	r2, [r3, #0]
            
            opt.add = INT_SOURCE0_ADD;
 8001d46:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d4a:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001d4e:	2265      	movs	r2, #101	; 0x65
 8001d50:	701a      	strb	r2, [r3, #0]
            if(m_handler->write_registers(&new_INT_SOURCE0, opt) != iPHANDLER_ST::OK){
 8001d52:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d56:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001d60:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d64:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	3304      	adds	r3, #4
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f107 020c 	add.w	r2, r7, #12
 8001d78:	f107 010a 	add.w	r1, r7, #10
 8001d7c:	4798      	blx	r3
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf14      	ite	ne
 8001d84:	2301      	movne	r3, #1
 8001d86:	2300      	moveq	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <_ZN8ICM426888icm4268816write_config_intEv+0x156>
                return iIMU_ST::ERROR_COMM;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0ef      	b.n	8001f72 <_ZN8ICM426888icm4268816write_config_intEv+0x336>
            }
            switch(m_cnf.intCnf.int1Source){
 8001d92:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001d96:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d034      	beq.n	8001e0e <_ZN8ICM426888icm4268816write_config_intEv+0x1d2>
            default:
            case INT_SOURCE::DATA_RDY:
            	m_INT1->interrupt_handler = std::bind(&icm42688::save_data, *this);
 8001da4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001da8:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8001db2:	461c      	mov	r4, r3
 8001db4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001db8:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001dc4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001dc8:	2201      	movs	r2, #1
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001dd0:	f5a3 7126 	sub.w	r1, r3, #664	; 0x298
 8001dd4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001dd8:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8001ddc:	460b      	mov	r3, r1
 8001dde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001de2:	e883 0003 	stmia.w	r3, {r0, r1}
 8001de6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001dea:	f2a3 500c 	subw	r0, r3, #1292	; 0x50c
 8001dee:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001df2:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001df6:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	f000 fae1 	bl	80023c2 <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	4620      	mov	r0, r4
 8001e08:	f000 faff 	bl	800240a <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>
				break;
 8001e0c:	e031      	b.n	8001e72 <_ZN8ICM426888icm4268816write_config_intEv+0x236>
            case INT_SOURCE::FIFO_THR:
            	m_INT1->interrupt_handler = std::bind(&icm42688::save_fifo_data, *this, m_cnf.fifoCnf.watermark);
 8001e0e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001e12:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8001e1c:	461c      	mov	r4, r3
 8001e1e:	4a57      	ldr	r2, [pc, #348]	; (8001f7c <_ZN8ICM426888icm4268816write_config_intEv+0x340>)
 8001e20:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001e24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e28:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e2c:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8001e30:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8001e34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e38:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e3c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001e40:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001e4a:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8001e4e:	f5a2 7022 	sub.w	r0, r2, #648	; 0x288
 8001e52:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8001e56:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 8001e5a:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	f000 fbef 	bl	8002642 <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISD_EEE5valueESB_JDpT0_EE4typeEOSB_DpOSI_>
 8001e64:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f000 fc05 	bl	800267a <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>
					break;
 8001e70:	bf00      	nop
            }
    	}

    	if(m_cnf.intCnf.int2Source != INT_SOURCE::DISABLED){
 8001e72:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001e76:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e84:	d04e      	beq.n	8001f24 <_ZN8ICM426888icm4268816write_config_intEv+0x2e8>
    		new_INT_CONFIG |= (static_cast<uint8_t>(m_cnf.intCnf.int2Mode) << 3);
 8001e86:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001e8a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	b25a      	sxtb	r2, r3
 8001e9a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001e9e:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	b25b      	sxtb	r3, r3
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001eb0:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8001eb4:	701a      	strb	r2, [r3, #0]
    		new_INT_SOURCE1 = (1 << static_cast<uint8_t>(m_cnf.intCnf.int2Source ));
 8001eb6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001eba:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2301      	movs	r3, #1
 8001eca:	4093      	lsls	r3, r2
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001ed2:	f2a3 531f 	subw	r3, r3, #1311	; 0x51f
 8001ed6:	701a      	strb	r2, [r3, #0]
            
            opt.add = INT_SOURCE1_ADD;
 8001ed8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001edc:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001ee0:	2266      	movs	r2, #102	; 0x66
 8001ee2:	701a      	strb	r2, [r3, #0]
            if(m_handler->write_registers(&new_INT_SOURCE1, opt) != iPHANDLER_ST::OK){
 8001ee4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001ee8:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001ef2:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001ef6:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	3304      	adds	r3, #4
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f107 020c 	add.w	r2, r7, #12
 8001f0a:	f107 0109 	add.w	r1, r7, #9
 8001f0e:	4798      	blx	r3
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bf14      	ite	ne
 8001f16:	2301      	movne	r3, #1
 8001f18:	2300      	moveq	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <_ZN8ICM426888icm4268816write_config_intEv+0x2e8>
                return iIMU_ST::ERROR_COMM;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e026      	b.n	8001f72 <_ZN8ICM426888icm4268816write_config_intEv+0x336>
            }  
		}

        //Enables watermark interrupt on INT1
        opt.add = INT_CONFIG_ADD;
 8001f24:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001f28:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001f2c:	2214      	movs	r2, #20
 8001f2e:	701a      	strb	r2, [r3, #0]
        if(m_handler->write_registers(&new_INT_CONFIG, opt) != iPHANDLER_ST::OK){
 8001f30:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001f34:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001f3e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001f42:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f107 020c 	add.w	r2, r7, #12
 8001f56:	f107 010b 	add.w	r1, r7, #11
 8001f5a:	4798      	blx	r3
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bf14      	ite	ne
 8001f62:	2301      	movne	r3, #1
 8001f64:	2300      	moveq	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <_ZN8ICM426888icm4268816write_config_intEv+0x334>
            return iIMU_ST::ERROR_COMM;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <_ZN8ICM426888icm4268816write_config_intEv+0x336>
        } 

        return iIMU_ST::OK;
 8001f70:	2300      	movs	r3, #0
    }
 8001f72:	4618      	mov	r0, r3
 8001f74:	f207 572c 	addw	r7, r7, #1324	; 0x52c
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd90      	pop	{r4, r7, pc}
 8001f7c:	08008be0 	.word	0x08008be0

08001f80 <_ZN8ICM426888icm426886enableEv>:


    iIMU_ST icm42688::enable()
    {        
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8001f88:	f107 0308 	add.w	r3, r7, #8
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff f8cc 	bl	800112a <_ZN11PHandlerOptC1Ev>
        
        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8001f92:	2100      	movs	r1, #0
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff f8e2 	bl	800115e <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf14      	ite	ne
 8001fa0:	2301      	movne	r3, #1
 8001fa2:	2300      	moveq	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <_ZN8ICM426888icm426886enableEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e038      	b.n	8002020 <_ZN8ICM426888icm426886enableEv+0xa0>
        }
        
        opt.add = PWR_MGMT0_ADD;
 8001fae:	234e      	movs	r3, #78	; 0x4e
 8001fb0:	723b      	strb	r3, [r7, #8]
        opt.size = 1;        
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <_ZN8ICM426888icm426886enableEv+0x48>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001fc6:	e002      	b.n	8001fce <_ZN8ICM426888icm426886enableEv+0x4e>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001fce:	60fb      	str	r3, [r7, #12]
        if(m_handler->write_registers((uint8_t*)&IMU_ENABLE_LOW_NOISE, opt) != iPHANDLER_ST::OK){
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f107 0208 	add.w	r2, r7, #8
 8001fe6:	4910      	ldr	r1, [pc, #64]	; (8002028 <_ZN8ICM426888icm426886enableEv+0xa8>)
 8001fe8:	4798      	blx	r3
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf14      	ite	ne
 8001ff0:	2301      	movne	r3, #1
 8001ff2:	2300      	moveq	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <_ZN8ICM426888icm426886enableEv+0x7e>
            return iIMU_ST::ERROR_COMM;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e010      	b.n	8002020 <_ZN8ICM426888icm426886enableEv+0xa0>
        } 

        if(write_config() != iIMU_ST::OK){
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3344      	adds	r3, #68	; 0x44
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <_ZN8ICM426888icm426886enableEv+0x9e>
        	return iIMU_ST::ERROR_COMM;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <_ZN8ICM426888icm426886enableEv+0xa0>
        }

        return iIMU_ST::OK;
 800201e:	2300      	movs	r3, #0

    	//return write_register(PWR_MGMT0_ADD, bankRegister::BANK0, IMU_ENABLE_LOW_NOISE);
    	// Algunos milisegundos deben pasar luego de habilitar la imu para que funcione (leer pag 77 de datasheet)
    }
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	08008bf8 	.word	0x08008bf8

0800202c <_ZN8ICM426888icm426887disableEv>:



    iIMU_ST icm42688::disable()
	{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff f876 	bl	800112a <_ZN11PHandlerOptC1Ev>
        uint8_t nullValue = 0x00;
 800203e:	2300      	movs	r3, #0
 8002040:	73fb      	strb	r3, [r7, #15]
        
//        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
//            return iIMU_ST::ERROR_COMM;
//        }

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8002042:	2100      	movs	r1, #0
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff f88a 	bl	800115e <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf14      	ite	ne
 8002050:	2301      	movne	r3, #1
 8002052:	2300      	moveq	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <_ZN8ICM426888icm426887disableEv+0x32>
            return iIMU_ST::ERROR_COMM;
 800205a:	2301      	movs	r3, #1
 800205c:	e076      	b.n	800214c <_ZN8ICM426888icm426887disableEv+0x120>
        }
        opt.size = 1;
 800205e:	2301      	movs	r3, #1
 8002060:	747b      	strb	r3, [r7, #17]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <_ZN8ICM426888icm426887disableEv+0x48>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002072:	e002      	b.n	800207a <_ZN8ICM426888icm426887disableEv+0x4e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800207a:	617b      	str	r3, [r7, #20]
        

        // Desabilita todos las configuraciones de interrupciones
		opt.add = INT_SOURCE0_ADD;
 800207c:	2365      	movs	r3, #101	; 0x65
 800207e:	743b      	strb	r3, [r7, #16]
		if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3304      	adds	r3, #4
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f107 0210 	add.w	r2, r7, #16
 8002096:	f107 010f 	add.w	r1, r7, #15
 800209a:	4798      	blx	r3
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	bf14      	ite	ne
 80020a2:	2301      	movne	r3, #1
 80020a4:	2300      	moveq	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <_ZN8ICM426888icm426887disableEv+0x84>
			return iIMU_ST::ERROR_COMM;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e04d      	b.n	800214c <_ZN8ICM426888icm426887disableEv+0x120>
		}
		opt.add = INT_SOURCE1_ADD;
 80020b0:	2366      	movs	r3, #102	; 0x66
 80020b2:	743b      	strb	r3, [r7, #16]
		if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3304      	adds	r3, #4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f107 0210 	add.w	r2, r7, #16
 80020ca:	f107 010f 	add.w	r1, r7, #15
 80020ce:	4798      	blx	r3
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bf14      	ite	ne
 80020d6:	2301      	movne	r3, #1
 80020d8:	2300      	moveq	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <_ZN8ICM426888icm426887disableEv+0xb8>
			return iIMU_ST::ERROR_COMM;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e033      	b.n	800214c <_ZN8ICM426888icm426887disableEv+0x120>
		}
        opt.add = INT_CONFIG_ADD;
 80020e4:	2314      	movs	r3, #20
 80020e6:	743b      	strb	r3, [r7, #16]
        if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	3304      	adds	r3, #4
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f107 0210 	add.w	r2, r7, #16
 80020fe:	f107 010f 	add.w	r1, r7, #15
 8002102:	4798      	blx	r3
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	bf14      	ite	ne
 800210a:	2301      	movne	r3, #1
 800210c:	2300      	moveq	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <_ZN8ICM426888icm426887disableEv+0xec>
            return iIMU_ST::ERROR_COMM;
 8002114:	2301      	movs	r3, #1
 8002116:	e019      	b.n	800214c <_ZN8ICM426888icm426887disableEv+0x120>
        }


        //Low power
        opt.add = PWR_MGMT0_ADD;
 8002118:	234e      	movs	r3, #78	; 0x4e
 800211a:	743b      	strb	r3, [r7, #16]
        if(m_handler->write_registers((uint8_t*)&IMU_DISABLE, opt) != iPHANDLER_ST::OK){
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	3304      	adds	r3, #4
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f107 0210 	add.w	r2, r7, #16
 8002132:	4908      	ldr	r1, [pc, #32]	; (8002154 <_ZN8ICM426888icm426887disableEv+0x128>)
 8002134:	4798      	blx	r3
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf14      	ite	ne
 800213c:	2301      	movne	r3, #1
 800213e:	2300      	moveq	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <_ZN8ICM426888icm426887disableEv+0x11e>
            return iIMU_ST::ERROR_COMM;
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <_ZN8ICM426888icm426887disableEv+0x120>
        } 
        return iIMU_ST::OK;
 800214a:	2300      	movs	r3, #0
    	
        
        //return write_register(PWR_MGMT0_ADD, bankRegister::BANK0, IMU_DISABLE);
    	// Algunos milisegundos deben pasar luego de habilitar la imu para que funcione (leer pag 77 de datasheet)
	}
 800214c:	4618      	mov	r0, r3
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	08008bf9 	.word	0x08008bf9

08002158 <_ZN8ICM426888icm426889load_dataEPh>:


    }

    void icm42688::load_data(uint8_t *buffertData)
    {
 8002158:	b5b0      	push	{r4, r5, r7, lr}
 800215a:	b08e      	sub	sp, #56	; 0x38
 800215c:	af04      	add	r7, sp, #16
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
    	IMUData data;
        data.temp   = convertTempData(buffertData[0], buffertData[1]);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	3301      	adds	r3, #1
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	4610      	mov	r0, r2
 8002170:	f001 fc0e 	bl	8003990 <_ZN8ICM4268815convertTempDataEhh>
 8002174:	eef0 7a40 	vmov.f32	s15, s0
 8002178:	edc7 7a03 	vstr	s15, [r7, #12]
        data.accelX = convertAccelData(buffertData[2], buffertData[3]);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	3302      	adds	r3, #2
 8002180:	7819      	ldrb	r1, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	3303      	adds	r3, #3
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff fb34 	bl	80017f8 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 8002190:	eef0 7a40 	vmov.f32	s15, s0
 8002194:	edc7 7a07 	vstr	s15, [r7, #28]
        data.accelY = convertAccelData(buffertData[4], buffertData[5]);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	3304      	adds	r3, #4
 800219c:	7819      	ldrb	r1, [r3, #0]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	3305      	adds	r3, #5
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fb26 	bl	80017f8 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 80021ac:	eef0 7a40 	vmov.f32	s15, s0
 80021b0:	edc7 7a08 	vstr	s15, [r7, #32]
        data.accelZ = convertAccelData(buffertData[6], buffertData[7]);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	3306      	adds	r3, #6
 80021b8:	7819      	ldrb	r1, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	3307      	adds	r3, #7
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff fb18 	bl	80017f8 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 80021c8:	eef0 7a40 	vmov.f32	s15, s0
 80021cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        data.gyroX  = convertGyroData(buffertData[8], buffertData[9]);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	3308      	adds	r3, #8
 80021d4:	7819      	ldrb	r1, [r3, #0]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	3309      	adds	r3, #9
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fae2 	bl	80017a8 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 80021e4:	eef0 7a40 	vmov.f32	s15, s0
 80021e8:	edc7 7a04 	vstr	s15, [r7, #16]
        data.gyroY  = convertGyroData(buffertData[10], buffertData[11]);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	330a      	adds	r3, #10
 80021f0:	7819      	ldrb	r1, [r3, #0]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	330b      	adds	r3, #11
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fad4 	bl	80017a8 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 8002200:	eef0 7a40 	vmov.f32	s15, s0
 8002204:	edc7 7a05 	vstr	s15, [r7, #20]
        data.gyroZ  = convertGyroData(buffertData[12], buffertData[13]);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	330c      	adds	r3, #12
 800220c:	7819      	ldrb	r1, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	330d      	adds	r3, #13
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff fac6 	bl	80017a8 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 800221c:	eef0 7a40 	vmov.f32	s15, s0
 8002220:	edc7 7a06 	vstr	s15, [r7, #24]
        imuDataBuffer.write(data);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	1d1d      	adds	r5, r3, #4
 8002228:	466c      	mov	r4, sp
 800222a:	f107 0318 	add.w	r3, r7, #24
 800222e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223a:	4628      	mov	r0, r5
 800223c:	f000 fa3c 	bl	80026b8 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_>
    }
 8002240:	bf00      	nop
 8002242:	3728      	adds	r7, #40	; 0x28
 8002244:	46bd      	mov	sp, r7
 8002246:	bdb0      	pop	{r4, r5, r7, pc}

08002248 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST>:

    iIMU_ST icm42688::map_handler_ret_to_iIMU_ret(iPHANDLER_ST iHandlerRet){
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
    	iIMU_ST ret;

    	switch(iHandlerRet){
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b03      	cmp	r3, #3
 8002254:	d012      	beq.n	800227c <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x34>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b03      	cmp	r3, #3
 800225a:	dc09      	bgt.n	8002270 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x28>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x22>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d006      	beq.n	8002276 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x2e>
 8002268:	e002      	b.n	8002270 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x28>
    	case iPHANDLER_ST::OK:
    		ret = iIMU_ST::OK;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
    		break;
 800226e:	e008      	b.n	8002282 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::ERROR:
    	default:
    		ret = iIMU_ST::ERROR_COMM;
 8002270:	2301      	movs	r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
    		break;
 8002274:	e005      	b.n	8002282 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::UNAVAILABLE:
    		ret = iIMU_ST::ERROR_HANDLER_UNAVAILABLE;
 8002276:	2305      	movs	r3, #5
 8002278:	60fb      	str	r3, [r7, #12]
    		break;
 800227a:	e002      	b.n	8002282 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::INVALID:
    		ret = iIMU_ST::ERROR_INVALID_OP;
 800227c:	2303      	movs	r3, #3
 800227e:	60fb      	str	r3, [r7, #12]
    		break;
 8002280:	bf00      	nop

    	}

    	return ret;
 8002282:	68fb      	ldr	r3, [r7, #12]
    }
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <_ZN11circ_bufferI7IMUDataLm16EtEC1Ev>:
                bool mEmpty_;

        };

        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
        {
            mFull_ = false;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
            mEmpty_ = true;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            mHead_ = 0;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
            mTail_ = 0;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
            mSize_ = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	801a      	strh	r2, [r3, #0]
            
        }
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_>:
            return EXIT_OK;
        }


        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::read(bufferDataType* pData)
 80022cc:	b4b0      	push	{r4, r5, r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
        {
            // bufferDataType data = 0;

            if (mEmpty_){
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x18>
                return EXIT_ERROR;
 80022e0:	2300      	movs	r3, #0
 80022e2:	e040      	b.n	8002366 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x9a>
                // return data;
            }

            *pData = mBuffer_[mTail_];
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 80022ea:	4619      	mov	r1, r3
 80022ec:	6838      	ldr	r0, [r7, #0]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	1a5b      	subs	r3, r3, r1
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	4605      	mov	r5, r0
 80022fc:	1d1c      	adds	r4, r3, #4
 80022fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002302:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002306:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            mFull_ = false;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

            if(--mSize_ == 0){
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	801a      	strh	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	bf0c      	ite	eq
 8002326:	2301      	moveq	r3, #1
 8002328:	2300      	movne	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x6c>
                mEmpty_ = true;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            }

            if(++mTail_ == sCapacity_){
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800233e:	3301      	adds	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800234e:	2b10      	cmp	r3, #16
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x98>
                mTail_ = 0;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
            } 

            return EXIT_OK;
 8002364:	2301      	movs	r3, #1
        }
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	bcb0      	pop	{r4, r5, r7}
 800236e:	4770      	bx	lr

08002370 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f000 fa33 	bl	80027ec <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1EOS2_>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1EOS6_>:
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f103 0208 	add.w	r2, r3, #8
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	3308      	adds	r3, #8
 80023b0:	4619      	mov	r1, r3
 80023b2:	4610      	mov	r0, r2
 80023b4:	f7ff ffdc 	bl	8002370 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1EOS2_>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline _GLIBCXX20_CONSTEXPR typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 80023c2:	b590      	push	{r4, r7, lr}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 80023ce:	68b8      	ldr	r0, [r7, #8]
 80023d0:	f000 f9d7 	bl	8002782 <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS5_E4typeE>
 80023d4:	4604      	mov	r4, r0
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f9de 	bl	8002798 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80023dc:	4603      	mov	r3, r0
 80023de:	461a      	mov	r2, r3
 80023e0:	4621      	mov	r1, r4
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f9e3 	bl	80027ae <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1IJRS1_EEEOS4_DpOT_>
    }
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd90      	pop	{r4, r7, pc}

080023f0 <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fce4 	bl	8000dc8 <_ZNSt14_Function_baseD1Ev>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<_Functor>, function&>
	operator=(_Functor&& __f)
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
 8002414:	6838      	ldr	r0, [r7, #0]
 8002416:	f000 f9f9 	bl	800280c <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 800241a:	4602      	mov	r2, r0
 800241c:	f107 0308 	add.w	r3, r7, #8
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f9fe 	bl	8002824 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_>
 8002428:	f107 0308 	add.w	r3, r7, #8
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fa28 	bl	8002884 <_ZNSt8functionIFvvEE4swapERS1_>
 8002434:	f107 0308 	add.w	r3, r7, #8
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ffd9 	bl	80023f0 <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 800243e:	687b      	ldr	r3, [r7, #4]
	}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_ZN4iIMUC1EOS_>:
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <_ZN4iIMUC1EOS_+0x20>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	08008c54 	.word	0x08008c54

0800246c <_ZN8ICM426888icm42688C1EOS0_>:
        uint8_t FIFO_CONFIG1 = 0x00;
        uint8_t FIFO_CONFIG2 = 0x00;
        uint8_t FIFO_CONFIG3 = 0x00;
    };

    class icm42688: public iIMU{
 800246c:	b5b0      	push	{r4, r5, r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ffe3 	bl	8002448 <_ZN4iIMUC1EOS_>
 8002482:	4a46      	ldr	r2, [pc, #280]	; (800259c <_ZN8ICM426888icm42688C1EOS0_+0x130>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	1d10      	adds	r0, r2, #4
 800248e:	3304      	adds	r3, #4
 8002490:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8002494:	4619      	mov	r1, r3
 8002496:	f006 fb3d 	bl	8008b14 <memcpy>
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	f502 74e8 	add.w	r4, r2, #464	; 0x1d0
 80024a2:	f503 75e8 	add.w	r5, r3, #464	; 0x1d0
 80024a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024b2:	e884 0003 	stmia.w	r4, {r0, r1}
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	f502 74fc 	add.w	r4, r2, #504	; 0x1f8
 80024be:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 80024c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f502 7406 	add.w	r4, r2, #536	; 0x218
 80024d6:	f503 7506 	add.w	r5, r3, #536	; 0x218
 80024da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80024ee:	f502 720e 	add.w	r2, r2, #568	; 0x238
 80024f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024f6:	6018      	str	r0, [r3, #0]
 80024f8:	3304      	adds	r3, #4
 80024fa:	8019      	strh	r1, [r3, #0]
 80024fc:	3302      	adds	r3, #2
 80024fe:	0c0a      	lsrs	r2, r1, #16
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	f893 2248 	ldrb.w	r2, [r3, #584]	; 0x248
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f893 2249 	ldrb.w	r2, [r3, #585]	; 0x249
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bdb0      	pop	{r4, r5, r7, pc}
 800259c:	08008c04 	.word	0x08008c04

080025a0 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>:
      constexpr _Head_base(_Head_base&&) = default;
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff5b 	bl	800246c <_ZN8ICM426888icm42688C1EOS0_>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&&) = default;
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 f9b3 	bl	800293c <_ZNSt11_Tuple_implILj1EJtEEC1EOS0_>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	1d1a      	adds	r2, r3, #4
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	3304      	adds	r3, #4
 80025de:	4619      	mov	r1, r3
 80025e0:	4610      	mov	r0, r2
 80025e2:	f7ff ffdd 	bl	80025a0 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1EOS2_>:
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ffdd 	bl	80025c0 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1EOS2_>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1EOS6_>:
      _Bind(_Bind&&) = default;
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002622:	e883 0003 	stmia.w	r3, {r0, r1}
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f103 0208 	add.w	r2, r3, #8
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	3308      	adds	r3, #8
 8002630:	4619      	mov	r1, r3
 8002632:	4610      	mov	r0, r2
 8002634:	f7ff ffdc 	bl	80025f0 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1EOS2_>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISD_EEE5valueESB_JDpT0_EE4typeEOSB_DpOSI_>:
    bind(_Func&& __f, _BoundArgs&&... __args)
 8002642:	b5b0      	push	{r4, r5, r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	603b      	str	r3, [r7, #0]
					  std::forward<_BoundArgs>(__args)...);
 8002650:	68b8      	ldr	r0, [r7, #8]
 8002652:	f000 f938 	bl	80028c6 <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS5_E4typeE>
 8002656:	4604      	mov	r4, r0
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f89d 	bl	8002798 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 800265e:	4605      	mov	r5, r0
 8002660:	6838      	ldr	r0, [r7, #0]
 8002662:	f000 f93b 	bl	80028dc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8002666:	4603      	mov	r3, r0
 8002668:	462a      	mov	r2, r5
 800266a:	4621      	mov	r1, r4
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 f940 	bl	80028f2 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1IJRS1_RtEEEOS4_DpOT_>
    }
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bdb0      	pop	{r4, r5, r7, pc}

0800267a <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>:
	operator=(_Functor&& __f)
 800267a:	b580      	push	{r7, lr}
 800267c:	b086      	sub	sp, #24
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8002684:	6838      	ldr	r0, [r7, #0]
 8002686:	f000 f969 	bl	800295c <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800268a:	4602      	mov	r2, r0
 800268c:	f107 0308 	add.w	r3, r7, #8
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f96e 	bl	8002974 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_>
 8002698:	f107 0308 	add.w	r3, r7, #8
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f8f0 	bl	8002884 <_ZNSt8functionIFvvEE4swapERS1_>
 80026a4:	f107 0308 	add.w	r3, r7, #8
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fea1 	bl	80023f0 <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 80026ae:	687b      	ldr	r3, [r7, #4]
	}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_>:
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::write(bufferDataType data)
 80026b8:	b084      	sub	sp, #16
 80026ba:	b4b0      	push	{r4, r5, r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	f107 001c 	add.w	r0, r7, #28
 80026c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
            mBuffer_[mHead_] = data;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 80026d0:	4619      	mov	r1, r3
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	1a5b      	subs	r3, r3, r1
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	1d1c      	adds	r4, r3, #4
 80026e0:	f107 051c 	add.w	r5, r7, #28
 80026e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            mEmpty_ = false;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            if(++mHead_ == sCapacity_){
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 80026fe:	3301      	adds	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 800270e:	2b10      	cmp	r3, #16
 8002710:	bf0c      	ite	eq
 8002712:	2301      	moveq	r3, #1
 8002714:	2300      	movne	r3, #0
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x6c>
                mHead_ = 0;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
            if(mFull_ == true){
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800272a:	2b01      	cmp	r3, #1
 800272c:	d10f      	bne.n	800274e <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x96>
                mTail_ = mTail_ + 1 == sCapacity_ ? 0 : mTail_ + 1; // mTail_ = ++mTail_ == sCapacity_ ? 0 : mTail_;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 8002734:	2b0f      	cmp	r3, #15
 8002736:	d005      	beq.n	8002744 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x8c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800273e:	3301      	adds	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	e000      	b.n	8002746 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x8e>
 8002744:	2200      	movs	r2, #0
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 800274c:	e012      	b.n	8002774 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0xbc>
            }else if(++mSize_ == sCapacity_){
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	3301      	adds	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	801a      	strh	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	2b10      	cmp	r3, #16
 8002760:	bf0c      	ite	eq
 8002762:	2301      	moveq	r3, #1
 8002764:	2300      	movne	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0xbc>
                mFull_ = true;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
            return EXIT_OK;
 8002774:	2301      	movs	r3, #1
        }
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bcb0      	pop	{r4, r5, r7}
 800277e:	b004      	add	sp, #16
 8002780:	4770      	bx	lr

08002782 <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1IJRS1_EEEOS4_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 80027ae:	b590      	push	{r4, r7, lr}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 80027ba:	68b8      	ldr	r0, [r7, #8]
 80027bc:	f000 f90a 	bl	80029d4 <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_STvEEONSt16remove_referenceIT_E4typeEOS7_>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f103 0408 	add.w	r4, r3, #8
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff ffe0 	bl	8002798 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80027d8:	4603      	mov	r3, r0
 80027da:	4619      	mov	r1, r3
 80027dc:	4620      	mov	r0, r4
 80027de:	f000 f904 	bl	80029ea <_ZNSt5tupleIJN8ICM426888icm42688EEEC1IJRS1_ELb1ELb1EEEDpOT_>
	{ }
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4618      	mov	r0, r3
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd90      	pop	{r4, r7, pc}

080027ec <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fecf 	bl	80025a0 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>
      { }
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_>:
	function(_Functor&& __f)
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	461a      	mov	r2, r3
 8002832:	2300      	movs	r3, #0
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	6053      	str	r3, [r2, #4]
 8002838:	6093      	str	r3, [r2, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe f9e3 	bl	8000c08 <_ZNSt14_Function_baseC1Ev>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8002848:	6838      	ldr	r0, [r7, #0]
 800284a:	f000 f8e1 	bl	8002a10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE21_M_not_empty_functionIS8_EEbRKT_>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00e      	beq.n	8002872 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8002854:	687c      	ldr	r4, [r7, #4]
 8002856:	6838      	ldr	r0, [r7, #0]
 8002858:	f7ff ffd8 	bl	800280c <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 800285c:	4603      	mov	r3, r0
 800285e:	4619      	mov	r1, r3
 8002860:	4620      	mov	r0, r4
 8002862:	f000 f8e0 	bl	8002a26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a04      	ldr	r2, [pc, #16]	; (800287c <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x58>)
 800286a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a04      	ldr	r2, [pc, #16]	; (8002880 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x5c>)
 8002870:	609a      	str	r2, [r3, #8]
	}
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bd90      	pop	{r4, r7, pc}
 800287c:	08002a4b 	.word	0x08002a4b
 8002880:	08002a69 	.word	0x08002a69

08002884 <_ZNSt8functionIFvvEE4swapERS1_>:
       *  @param __x A %function with identical call signature.
       *
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x) noexcept
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_functor, __x._M_functor);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f000 f911 	bl	8002abc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f103 0208 	add.w	r2, r3, #8
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	3308      	adds	r3, #8
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f000 f93a 	bl	8002b20 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f103 020c 	add.w	r2, r3, #12
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	330c      	adds	r3, #12
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f000 f95b 	bl	8002b74 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1IJRS1_RtEEEOS4_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 80028f2:	b5b0      	push	{r4, r5, r7, lr}
 80028f4:	b084      	sub	sp, #16
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 8002900:	68b8      	ldr	r0, [r7, #8]
 8002902:	f000 f956 	bl	8002bb2 <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_SThEEONSt16remove_referenceIT_E4typeEOS7_>
 8002906:	4602      	mov	r2, r0
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800290e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f103 0408 	add.w	r4, r3, #8
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff3d 	bl	8002798 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 800291e:	4605      	mov	r5, r0
 8002920:	6838      	ldr	r0, [r7, #0]
 8002922:	f7ff ffdb 	bl	80028dc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8002926:	4603      	mov	r3, r0
 8002928:	461a      	mov	r2, r3
 800292a:	4629      	mov	r1, r5
 800292c:	4620      	mov	r0, r4
 800292e:	f000 f94b 	bl	8002bc8 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1IRS1_RtLb1EEEOT_OT0_>
	{ }
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bdb0      	pop	{r4, r5, r7, pc}

0800293c <_ZNSt11_Tuple_implILj1EJtEEC1EOS0_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	8812      	ldrh	r2, [r2, #0]
 800294c:	801a      	strh	r2, [r3, #0]
      { }
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_>:
	function(_Functor&& __f)
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	461a      	mov	r2, r3
 8002982:	2300      	movs	r3, #0
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	6053      	str	r3, [r2, #4]
 8002988:	6093      	str	r3, [r2, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe f93b 	bl	8000c08 <_ZNSt14_Function_baseC1Ev>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8002998:	6838      	ldr	r0, [r7, #0]
 800299a:	f000 f92e 	bl	8002bfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE21_M_not_empty_functionIS8_EEbRKT_>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00e      	beq.n	80029c2 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80029a4:	687c      	ldr	r4, [r7, #4]
 80029a6:	6838      	ldr	r0, [r7, #0]
 80029a8:	f7ff ffd8 	bl	800295c <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80029ac:	4603      	mov	r3, r0
 80029ae:	4619      	mov	r1, r3
 80029b0:	4620      	mov	r0, r4
 80029b2:	f000 f92d 	bl	8002c10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x58>)
 80029ba:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x5c>)
 80029c0:	609a      	str	r2, [r3, #8]
	}
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd90      	pop	{r4, r7, pc}
 80029cc:	08002c35 	.word	0x08002c35
 80029d0:	08002c53 	.word	0x08002c53

080029d4 <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_STvEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <_ZNSt5tupleIJN8ICM426888icm42688EEEC1IJRS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 80029ea:	b590      	push	{r4, r7, lr}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 80029f4:	687c      	ldr	r4, [r7, #4]
 80029f6:	6838      	ldr	r0, [r7, #0]
 80029f8:	f7ff fece 	bl	8002798 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4619      	mov	r1, r3
 8002a00:	4620      	mov	r0, r4
 8002a02:	f000 f945 	bl	8002c90 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1IRS1_EEOT_>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd90      	pop	{r4, r7, pc}

08002a10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	  { return true; }
 8002a18:	2301      	movs	r3, #1
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8002a26:	b590      	push	{r4, r7, lr}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8002a30:	6838      	ldr	r0, [r7, #0]
 8002a32:	f7ff feeb 	bl	800280c <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002a36:	4603      	mov	r3, r0
 8002a38:	4622      	mov	r2, r4
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f93a 	bl	8002cb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd90      	pop	{r4, r7, pc}

08002a4a <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f94c 	bl	8002cf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f966 	bl	8002d2c <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 8002a60:	bf00      	nop
      }
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d109      	bne.n	8002a90 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f965 	bl	8002d4c <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8002a82:	4604      	mov	r4, r0
 8002a84:	68b8      	ldr	r0, [r7, #8]
 8002a86:	f000 f933 	bl	8002cf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6023      	str	r3, [r4, #0]
	    break;
 8002a8e:	e005      	b.n	8002a9c <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	461a      	mov	r2, r3
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f964 	bl	8002d64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 8002a9c:	2300      	movs	r3, #0
      }
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd90      	pop	{r4, r7, pc}

08002aa6 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ffed 	bl	8002aa6 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002acc:	4602      	mov	r2, r0
 8002ace:	f107 0308 	add.w	r3, r7, #8
 8002ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ad6:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8002ada:	6838      	ldr	r0, [r7, #0]
 8002adc:	f7ff ffe3 	bl	8002aa6 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ae8:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8002aec:	f107 0308 	add.w	r3, r7, #8
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ffd8 	bl	8002aa6 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002af6:	4602      	mov	r2, r0
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002afe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ffed 	bl	8002b0a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8002b30:	4603      	mov	r3, r0
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002b36:	6838      	ldr	r0, [r7, #0]
 8002b38:	f7ff ffe7 	bl	8002b0a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002b44:	f107 030c 	add.w	r3, r7, #12
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ffde 	bl	8002b0a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	601a      	str	r2, [r3, #0]
    }
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff ffed 	bl	8002b5e <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8002b84:	4603      	mov	r3, r0
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002b8a:	6838      	ldr	r0, [r7, #0]
 8002b8c:	f7ff ffe7 	bl	8002b5e <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8002b90:	4603      	mov	r3, r0
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002b98:	f107 030c 	add.w	r3, r7, #12
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ffde 	bl	8002b5e <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	601a      	str	r2, [r3, #0]
    }
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_SThEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1IRS1_RtLb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8002bc8:	b5b0      	push	{r4, r5, r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8002bd4:	68fc      	ldr	r4, [r7, #12]
 8002bd6:	68b8      	ldr	r0, [r7, #8]
 8002bd8:	f7ff fdde 	bl	8002798 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002bdc:	4605      	mov	r5, r0
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff fe7c 	bl	80028dc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8002be4:	4603      	mov	r3, r0
 8002be6:	461a      	mov	r2, r3
 8002be8:	4629      	mov	r1, r5
 8002bea:	4620      	mov	r0, r4
 8002bec:	f000 f8f4 	bl	8002dd8 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1IRS1_JRtEvEEOT_DpOT0_>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bdb0      	pop	{r4, r5, r7, pc}

08002bfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
	  { return true; }
 8002c02:	2301      	movs	r3, #1
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8002c1a:	6838      	ldr	r0, [r7, #0]
 8002c1c:	f7ff fe9e 	bl	800295c <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4622      	mov	r2, r4
 8002c24:	4619      	mov	r1, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f8f4 	bl	8002e14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd90      	pop	{r4, r7, pc}

08002c34 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f906 	bl	8002e4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 f920 	bl	8002e8a <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 8002c4a:	bf00      	nop
      }
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002c52:	b590      	push	{r4, r7, lr}
 8002c54:	b085      	sub	sp, #20
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d109      	bne.n	8002c7a <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f91f 	bl	8002eaa <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	68b8      	ldr	r0, [r7, #8]
 8002c70:	f000 f8ed 	bl	8002e4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8002c74:	4603      	mov	r3, r0
 8002c76:	6023      	str	r3, [r4, #0]
	    break;
 8002c78:	e005      	b.n	8002c86 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f91f 	bl	8002ec4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 8002c86:	2300      	movs	r3, #0
      }
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd90      	pop	{r4, r7, pc}

08002c90 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1IRS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8002c9a:	687c      	ldr	r4, [r7, #4]
 8002c9c:	6838      	ldr	r0, [r7, #0]
 8002c9e:	f7ff fd7b 	bl	8002798 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f000 f9f2 	bl	8003090 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>
	{ }
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd90      	pop	{r4, r7, pc}

08002cb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8002cb6:	b5b0      	push	{r4, r5, r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8002cc2:	68b8      	ldr	r0, [r7, #8]
 8002cc4:	f7ff fda2 	bl	800280c <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002cc8:	4605      	mov	r5, r0
 8002cca:	f44f 701d 	mov.w	r0, #628	; 0x274
 8002cce:	f005 fdb9 	bl	8008844 <_Znwj>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	461c      	mov	r4, r3
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f7ff fb59 	bl	8002390 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1EOS6_>
	    __dest._M_access<_Functor*>()
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f834 	bl	8002d4c <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8002ce4:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8002ce6:	601c      	str	r4, [r3, #0]
	  }
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bdb0      	pop	{r4, r5, r7, pc}

08002cf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f9dc 	bl	80030b6 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERKT_v>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	681b      	ldr	r3, [r3, #0]
	}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_vES3_EEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	7138      	strb	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8002d14:	6838      	ldr	r0, [r7, #0]
 8002d16:	f000 f9da 	bl	80030ce <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 f9e1 	bl	80030e4 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEclIJES2_EET0_DpOT_>
 8002d22:	4603      	mov	r3, r0
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f9ca 	bl	80030ce <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4620      	mov	r0, r4
 8002d40:	f7ff ffe3 	bl	8002d0a <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_vES3_EEJEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd90      	pop	{r4, r7, pc}

08002d4c <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>:
      _M_access()
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7fe f821 	bl	8000d9c <_ZNSt9_Any_data9_M_accessEv>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d82a      	bhi.n	8002dce <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1c>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08002d9f 	.word	0x08002d9f
 8002d88:	08002db3 	.word	0x08002db3
 8002d8c:	08002dc5 	.word	0x08002dc5
	      __dest._M_access<const type_info*>() = nullptr;
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f9b9 	bl	8003108 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
	      break;
 8002d9c:	e017      	b.n	8002dce <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f7ff ffd4 	bl	8002d4c <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8002da4:	4604      	mov	r4, r0
 8002da6:	68b8      	ldr	r0, [r7, #8]
 8002da8:	f7ff ffa2 	bl	8002cf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8002dac:	4603      	mov	r3, r0
 8002dae:	6023      	str	r3, [r4, #0]
	      break;
 8002db0:	e00d      	b.n	8002dce <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8002db2:	68b8      	ldr	r0, [r7, #8]
 8002db4:	f7ff ff9c 	bl	8002cf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8002db8:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8002dba:	4619      	mov	r1, r3
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f9af 	bl	8003120 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>
	      break;
 8002dc2:	e004      	b.n	8002dce <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f9bc 	bl	8003144 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8002dcc:	bf00      	nop
	  return false;
 8002dce:	2300      	movs	r3, #0
	}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd90      	pop	{r4, r7, pc}

08002dd8 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1IRS1_JRtEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8002de4:	68fc      	ldr	r4, [r7, #12]
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff fd78 	bl	80028dc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8002dec:	4603      	mov	r3, r0
 8002dee:	4619      	mov	r1, r3
 8002df0:	4620      	mov	r0, r4
 8002df2:	f000 f9bc 	bl	800316e <_ZNSt11_Tuple_implILj1EJtEEC1IRtEEOT_>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1d1c      	adds	r4, r3, #4
 8002dfa:	68b8      	ldr	r0, [r7, #8]
 8002dfc:	f7ff fccc 	bl	8002798 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4619      	mov	r1, r3
 8002e04:	4620      	mov	r0, r4
 8002e06:	f000 f943 	bl	8003090 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>
	{ }
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd90      	pop	{r4, r7, pc}

08002e14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8002e14:	b5b0      	push	{r4, r5, r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8002e20:	68b8      	ldr	r0, [r7, #8]
 8002e22:	f7ff fd9b 	bl	800295c <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002e26:	4605      	mov	r5, r0
 8002e28:	f44f 701e 	mov.w	r0, #632	; 0x278
 8002e2c:	f005 fd0a 	bl	8008844 <_Znwj>
 8002e30:	4603      	mov	r3, r0
 8002e32:	461c      	mov	r4, r3
 8002e34:	4629      	mov	r1, r5
 8002e36:	4620      	mov	r0, r4
 8002e38:	f7ff fbea 	bl	8002610 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1EOS6_>
	    __dest._M_access<_Functor*>()
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f834 	bl	8002eaa <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8002e42:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8002e44:	601c      	str	r4, [r3, #0]
	  }
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bdb0      	pop	{r4, r5, r7, pc}

08002e4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f99c 	bl	8003194 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERKT_v>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	681b      	ldr	r3, [r3, #0]
	}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_hES3_tEEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	7138      	strb	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8002e72:	6838      	ldr	r0, [r7, #0]
 8002e74:	f000 f99a 	bl	80031ac <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f9a1 	bl	80031c2 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEclIJES2_EET0_DpOT_>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002e8a:	b590      	push	{r4, r7, lr}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f98a 	bl	80031ac <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	f7ff ffe3 	bl	8002e68 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_hES3_tEEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd90      	pop	{r4, r7, pc}

08002eaa <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>:
      _M_access()
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fd ff72 	bl	8000d9c <_ZNSt9_Any_data9_M_accessEv>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d82a      	bhi.n	8002f2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
 8002ed8:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1c>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002ef1 	.word	0x08002ef1
 8002ee4:	08002eff 	.word	0x08002eff
 8002ee8:	08002f13 	.word	0x08002f13
 8002eec:	08002f25 	.word	0x08002f25
	      __dest._M_access<const type_info*>() = nullptr;
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f909 	bl	8003108 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
	      break;
 8002efc:	e017      	b.n	8002f2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f7ff ffd3 	bl	8002eaa <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8002f04:	4604      	mov	r4, r0
 8002f06:	68b8      	ldr	r0, [r7, #8]
 8002f08:	f7ff ffa1 	bl	8002e4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	6023      	str	r3, [r4, #0]
	      break;
 8002f10:	e00d      	b.n	8002f2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8002f12:	68b8      	ldr	r0, [r7, #8]
 8002f14:	f7ff ff9b 	bl	8002e4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8002f18:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f962 	bl	80031e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>
	      break;
 8002f22:	e004      	b.n	8002f2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8002f24:	4621      	mov	r1, r4
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f96f 	bl	800320a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8002f2c:	bf00      	nop
	  return false;
 8002f2e:	2300      	movs	r3, #0
	}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd90      	pop	{r4, r7, pc}

08002f38 <_ZN4iIMUC1ERKS_>:
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
 8002f42:	4a05      	ldr	r2, [pc, #20]	; (8002f58 <_ZN4iIMUC1ERKS_+0x20>)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	08008c54 	.word	0x08008c54

08002f5c <_ZN8ICM426888icm42688C1ERKS0_>:
 8002f5c:	b5b0      	push	{r4, r5, r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ffe3 	bl	8002f38 <_ZN4iIMUC1ERKS_>
 8002f72:	4a46      	ldr	r2, [pc, #280]	; (800308c <_ZN8ICM426888icm42688C1ERKS0_+0x130>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	1d10      	adds	r0, r2, #4
 8002f7e:	3304      	adds	r3, #4
 8002f80:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8002f84:	4619      	mov	r1, r3
 8002f86:	f005 fdc5 	bl	8008b14 <memcpy>
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f502 74e8 	add.w	r4, r2, #464	; 0x1d0
 8002f92:	f503 75e8 	add.w	r5, r3, #464	; 0x1d0
 8002f96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002fa2:	e884 0003 	stmia.w	r4, {r0, r1}
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f502 74fc 	add.w	r4, r2, #504	; 0x1f8
 8002fae:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 8002fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fb6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002fba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	f502 7406 	add.w	r4, r2, #536	; 0x218
 8002fc6:	f503 7506 	add.w	r5, r3, #536	; 0x218
 8002fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002fd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8002fde:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8002fe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fe6:	6018      	str	r0, [r3, #0]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	8019      	strh	r1, [r3, #0]
 8002fec:	3302      	adds	r3, #2
 8002fee:	0c0a      	lsrs	r2, r1, #16
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	f893 2248 	ldrb.w	r2, [r3, #584]	; 0x248
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	f893 2249 	ldrb.w	r2, [r3, #585]	; 0x249
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bdb0      	pop	{r4, r5, r7, pc}
 800308c:	08008c04 	.word	0x08008c04

08003090 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800309a:	687c      	ldr	r4, [r7, #4]
 800309c:	6838      	ldr	r0, [r7, #0]
 800309e:	f7ff fb7b 	bl	8002798 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4619      	mov	r1, r3
 80030a6:	4620      	mov	r0, r4
 80030a8:	f7ff ff58 	bl	8002f5c <_ZN8ICM426888icm42688C1ERKS0_>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd90      	pop	{r4, r7, pc}

080030b6 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERKT_v>:
      _M_access() const
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fd fe77 	bl	8000db2 <_ZNKSt9_Any_data9_M_accessEv>
 80030c4:	4603      	mov	r3, r0
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEclIJES2_EET0_DpOT_>:
	operator()(_Args&&... __args)
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 80030ec:	f000 f8a2 	bl	8003234 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	  return this->__call<_Result>(
 80030f0:	f107 030c 	add.w	r3, r7, #12
 80030f4:	4622      	mov	r2, r4
 80030f6:	4619      	mov	r1, r3
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f8a3 	bl	8003244 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EE6__callIS2_JEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
 80030fe:	4603      	mov	r3, r0
	}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	bd90      	pop	{r4, r7, pc}

08003108 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7fd fe43 	bl	8000d9c <_ZNSt9_Any_data9_M_accessEv>
 8003116:	4603      	mov	r3, r0
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800312a:	6838      	ldr	r0, [r7, #0]
 800312c:	f000 f8a7 	bl	800327e <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>
 8003130:	4603      	mov	r3, r0
 8003132:	4622      	mov	r2, r4
 8003134:	4619      	mov	r1, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f8f5 	bl	8003326 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bd90      	pop	{r4, r7, pc}

08003144 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff fdfc 	bl	8002d4c <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8003154:	4603      	mov	r3, r0
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d004      	beq.n	8003166 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x22>
 800315c:	f44f 711d 	mov.w	r1, #628	; 0x274
 8003160:	4618      	mov	r0, r3
 8003162:	f005 fb6d 	bl	8008840 <_ZdlPvj>
	}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <_ZNSt11_Tuple_implILj1EJtEEC1IRtEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800316e:	b590      	push	{r4, r7, lr}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8003178:	687c      	ldr	r4, [r7, #4]
 800317a:	6838      	ldr	r0, [r7, #0]
 800317c:	f7ff fbae 	bl	80028dc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8003180:	4603      	mov	r3, r0
 8003182:	4619      	mov	r1, r3
 8003184:	4620      	mov	r0, r4
 8003186:	f000 f8eb 	bl	8003360 <_ZNSt10_Head_baseILj1EtLb0EEC1IRtEEOT_>
	{ }
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	bd90      	pop	{r4, r7, pc}

08003194 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERKT_v>:
      _M_access() const
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7fd fe08 	bl	8000db2 <_ZNKSt9_Any_data9_M_accessEv>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEclIJES2_EET0_DpOT_>:
	operator()(_Args&&... __args)
 80031c2:	b590      	push	{r4, r7, lr}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 80031ca:	f000 f833 	bl	8003234 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	  return this->__call<_Result>(
 80031ce:	f107 030c 	add.w	r3, r7, #12
 80031d2:	4622      	mov	r2, r4
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f8d3 	bl	8003382 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEE6__callIS2_JEJLj0ELj1EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
 80031dc:	4603      	mov	r3, r0
	}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd90      	pop	{r4, r7, pc}

080031e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80031e6:	b590      	push	{r4, r7, lr}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80031f0:	6838      	ldr	r0, [r7, #0]
 80031f2:	f000 f8f1 	bl	80033d8 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>
 80031f6:	4603      	mov	r3, r0
 80031f8:	4622      	mov	r2, r4
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f935 	bl	800346c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bd90      	pop	{r4, r7, pc}

0800320a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fe48 	bl	8002eaa <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 800321a:	4603      	mov	r3, r0
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d004      	beq.n	800322c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x22>
 8003222:	f44f 711e 	mov.w	r1, #632	; 0x278
 8003226:	4618      	mov	r0, r3
 8003228:	f005 fb0a 	bl	8008840 <_ZdlPvj>
	}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8003238:	bf00      	nop
 800323a:	4618      	mov	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EE6__callIS2_JEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 8003250:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	3308      	adds	r3, #8
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f925 	bl	80034a6 <_ZSt3getILj0EJN8ICM426888icm42688EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 800325c:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 800325e:	f107 0314 	add.w	r3, r7, #20
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f92b 	bl	80034c0 <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>
 800326a:	4603      	mov	r3, r0
 800326c:	4619      	mov	r1, r3
 800326e:	4620      	mov	r0, r4
 8003270:	f000 f934 	bl	80034dc <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
 8003274:	4603      	mov	r3, r0
	}
 8003276:	4618      	mov	r0, r3
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	bd90      	pop	{r4, r7, pc}

0800327e <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>:
      constexpr _Head_base(const _Head_base&) = default;
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fe59 	bl	8002f5c <_ZN8ICM426888icm42688C1ERKS0_>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1ERKS2_>:
      constexpr _Tuple_impl(const _Tuple_impl&) = default;
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ffe5 	bl	8003294 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1ERKS2_>:
      constexpr tuple(const tuple&) = default;
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ffe5 	bl	80032b4 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1ERKS2_>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1ERKS6_>:
      _Bind(const _Bind&) = default;
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003306:	e883 0003 	stmia.w	r3, {r0, r1}
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f103 0208 	add.w	r2, r3, #8
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	3308      	adds	r3, #8
 8003314:	4619      	mov	r1, r3
 8003316:	4610      	mov	r0, r2
 8003318:	f7ff ffdc 	bl	80032d4 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1ERKS2_>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8003326:	b5b0      	push	{r4, r5, r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8003332:	68b8      	ldr	r0, [r7, #8]
 8003334:	f7ff ffa3 	bl	800327e <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>
 8003338:	4605      	mov	r5, r0
 800333a:	f44f 701d 	mov.w	r0, #628	; 0x274
 800333e:	f005 fa81 	bl	8008844 <_Znwj>
 8003342:	4603      	mov	r3, r0
 8003344:	461c      	mov	r4, r3
 8003346:	4629      	mov	r1, r5
 8003348:	4620      	mov	r0, r4
 800334a:	f7ff ffd3 	bl	80032f4 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1ERKS6_>
	    __dest._M_access<_Functor*>()
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f7ff fcfc 	bl	8002d4c <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8003354:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8003356:	601c      	str	r4, [r3, #0]
	  }
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bdb0      	pop	{r4, r5, r7, pc}

08003360 <_ZNSt10_Head_baseILj1EtLb0EEC1IRtEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800336a:	6838      	ldr	r0, [r7, #0]
 800336c:	f7ff fab6 	bl	80028dc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8003370:	4603      	mov	r3, r0
 8003372:	881a      	ldrh	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	801a      	strh	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEE6__callIS2_JEJLj0ELj1EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 8003382:	b5b0      	push	{r4, r5, r7, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 800338e:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	3308      	adds	r3, #8
 8003394:	4618      	mov	r0, r3
 8003396:	f000 f8b8 	bl	800350a <_ZSt3getILj0EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 800339a:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 800339c:	f107 0310 	add.w	r3, r7, #16
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 f88c 	bl	80034c0 <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>
 80033a8:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3308      	adds	r3, #8
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f8b8 	bl	8003524 <_ZSt3getILj1EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80033b4:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 80033b6:	f107 0314 	add.w	r3, r7, #20
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 f8be 	bl	800353e <_ZNVKSt3_MuItLb0ELb0EEclIRtSt5tupleIJEEEEOT_S6_RT0_>
 80033c2:	4603      	mov	r3, r0
 80033c4:	461a      	mov	r2, r3
 80033c6:	4629      	mov	r1, r5
 80033c8:	4620      	mov	r0, r4
 80033ca:	f000 f8c6 	bl	800355a <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>
 80033ce:	4603      	mov	r3, r0
	}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bdb0      	pop	{r4, r5, r7, pc}

080033d8 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1ERKS2_>:
      constexpr _Tuple_impl(const _Tuple_impl&) = default;
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	8812      	ldrh	r2, [r2, #0]
 80033fe:	801a      	strh	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	1d1a      	adds	r2, r3, #4
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	3304      	adds	r3, #4
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f7ff ff42 	bl	8003294 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1ERKS2_>:
      constexpr tuple(const tuple&) = default;
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff ffdf 	bl	80033ee <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1ERKS2_>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1ERKS6_>:
      _Bind(const _Bind&) = default;
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	6039      	str	r1, [r7, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	e892 0003 	ldmia.w	r2, {r0, r1}
 800344c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f103 0208 	add.w	r2, r3, #8
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	3308      	adds	r3, #8
 800345a:	4619      	mov	r1, r3
 800345c:	4610      	mov	r0, r2
 800345e:	f7ff ffdc 	bl	800341a <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1ERKS2_>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4618      	mov	r0, r3
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 800346c:	b5b0      	push	{r4, r5, r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8003478:	68b8      	ldr	r0, [r7, #8]
 800347a:	f7ff ffad 	bl	80033d8 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>
 800347e:	4605      	mov	r5, r0
 8003480:	f44f 701e 	mov.w	r0, #632	; 0x278
 8003484:	f005 f9de 	bl	8008844 <_Znwj>
 8003488:	4603      	mov	r3, r0
 800348a:	461c      	mov	r4, r3
 800348c:	4629      	mov	r1, r5
 800348e:	4620      	mov	r0, r4
 8003490:	f7ff ffd3 	bl	800343a <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1ERKS6_>
	    __dest._M_access<_Functor*>()
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7ff fd08 	bl	8002eaa <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 800349a:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 800349c:	601c      	str	r4, [r3, #0]
	  }
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bdb0      	pop	{r4, r5, r7, pc}

080034a6 <_ZSt3getILj0EJN8ICM426888icm42688EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 f86e 	bl	8003592 <_ZSt12__get_helperILj0EN8ICM426888icm42688EJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80034b6:	4603      	mov	r3, r0
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 80034cc:	68b8      	ldr	r0, [r7, #8]
 80034ce:	f7ff f963 	bl	8002798 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80034d2:	4603      	mov	r3, r0
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 80034dc:	b5b0      	push	{r4, r5, r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f85f 	bl	80035aa <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS6_E4typeE>
 80034ec:	4604      	mov	r4, r0
 80034ee:	6838      	ldr	r0, [r7, #0]
 80034f0:	f7ff f952 	bl	8002798 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80034f4:	4603      	mov	r3, r0
 80034f6:	461a      	mov	r2, r3
 80034f8:	4621      	mov	r1, r4
 80034fa:	4628      	mov	r0, r5
 80034fc:	f000 f860 	bl	80035c0 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>
 8003500:	4603      	mov	r3, r0
    }
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bdb0      	pop	{r4, r5, r7, pc}

0800350a <_ZSt3getILj0EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4618      	mov	r0, r3
 8003516:	f000 f87a 	bl	800360e <_ZSt12__get_helperILj0EN8ICM426888icm42688EJtEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 800351a:	4603      	mov	r3, r0
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <_ZSt3getILj1EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f879 	bl	8003626 <_ZSt12__get_helperILj1EtJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE>
 8003534:	4603      	mov	r3, r0
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <_ZNVKSt3_MuItLb0ELb0EEclIRtSt5tupleIJEEEEOT_S6_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 800354a:	68b8      	ldr	r0, [r7, #8]
 800354c:	f7ff f9c6 	bl	80028dc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8003550:	4603      	mov	r3, r0
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800355a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355c:	b085      	sub	sp, #20
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f869 	bl	800363e <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS6_E4typeE>
 800356c:	4604      	mov	r4, r0
 800356e:	68b8      	ldr	r0, [r7, #8]
 8003570:	f7ff f912 	bl	8002798 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003574:	4605      	mov	r5, r0
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff f9b0 	bl	80028dc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800357c:	4603      	mov	r3, r0
 800357e:	462a      	mov	r2, r5
 8003580:	4621      	mov	r1, r4
 8003582:	4630      	mov	r0, r6
 8003584:	f000 f866 	bl	8003654 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>
 8003588:	4603      	mov	r3, r0
    }
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003592 <_ZSt12__get_helperILj0EN8ICM426888icm42688EJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f889 	bl	80036b2 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEE7_M_headERS2_>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	7338      	strb	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f87d 	bl	80036cc <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>
 80035d2:	4603      	mov	r3, r0
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	6852      	ldr	r2, [r2, #4]
 80035d8:	1052      	asrs	r2, r2, #1
 80035da:	1899      	adds	r1, r3, r2
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	6852      	ldr	r2, [r2, #4]
 80035e0:	f002 0201 	and.w	r2, r2, #1
 80035e4:	2a00      	cmp	r2, #0
 80035e6:	d102      	bne.n	80035ee <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x2e>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	e008      	b.n	8003600 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x40>
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	6852      	ldr	r2, [r2, #4]
 80035f2:	1052      	asrs	r2, r2, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	4413      	add	r3, r2
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4608      	mov	r0, r1
 8003602:	4798      	blx	r3
 8003604:	4603      	mov	r3, r0
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <_ZSt12__get_helperILj0EN8ICM426888icm42688EJtEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f863 	bl	80036e2 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEE7_M_headERS2_>
 800361c:	4603      	mov	r3, r0
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <_ZSt12__get_helperILj1EtJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f865 	bl	80036fe <_ZNSt11_Tuple_implILj1EJtEE7_M_headERS0_>
 8003634:	4603      	mov	r3, r0
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
 8003654:	b5b0      	push	{r4, r5, r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	7338      	strb	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f832 	bl	80036cc <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>
 8003668:	4603      	mov	r3, r0
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	6852      	ldr	r2, [r2, #4]
 800366e:	1052      	asrs	r2, r2, #1
 8003670:	189d      	adds	r5, r3, r2
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	6852      	ldr	r2, [r2, #4]
 8003676:	f002 0201 	and.w	r2, r2, #1
 800367a:	2a00      	cmp	r2, #0
 800367c:	d102      	bne.n	8003684 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x30>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	681c      	ldr	r4, [r3, #0]
 8003682:	e008      	b.n	8003696 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x42>
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	6852      	ldr	r2, [r2, #4]
 8003688:	1052      	asrs	r2, r2, #1
 800368a:	4413      	add	r3, r2
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	4413      	add	r3, r2
 8003694:	681c      	ldr	r4, [r3, #0]
 8003696:	6838      	ldr	r0, [r7, #0]
 8003698:	f7ff f920 	bl	80028dc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800369c:	4603      	mov	r3, r0
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	4619      	mov	r1, r3
 80036a4:	4628      	mov	r0, r5
 80036a6:	47a0      	blx	r4
 80036a8:	4603      	mov	r3, r0
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bdb0      	pop	{r4, r5, r7, pc}

080036b2 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f82b 	bl	8003718 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>:
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Up&&>(__t); }
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f812 	bl	8003718 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>
 80036f4:	4603      	mov	r3, r0
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <_ZNSt11_Tuple_implILj1EJtEE7_M_headERS0_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f810 	bl	800372e <_ZNSt10_Head_baseILj1EtLb0EE7_M_headERS0_>
 800370e:	4603      	mov	r3, r0
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <_ZNSt10_Head_baseILj1EtLb0EE7_M_headERS0_>:
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <_ZN8ICM426888GYRO_CNFlsEhNS0_3FSRE>:
        {
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	6039      	str	r1, [r7, #0]
 800374e:	71fb      	strb	r3, [r7, #7]
            return  n << static_cast<uint8_t> (fsr);
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	4093      	lsls	r3, r2
        }   
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <_ZN8ICM426889ACCEL_CNFlsEhNS0_3FSRE>:
        {
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	6039      	str	r1, [r7, #0]
 800376e:	71fb      	strb	r3, [r7, #7]
            return  n << static_cast<uint8_t> (fsr);
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	4093      	lsls	r3, r2
        } 
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>:

namespace ICM42688{

    //float map_gyro_ODR_CNF_to_ODR(const config& cnf){

	float map_gyro_ODR_CNF_to_ODR(GYRO_CNF::ODR gyroODR){
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
        using namespace GYRO_CNF;

        if(gyroODR == ODR::ODR_500){
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b0f      	cmp	r3, #15
 8003790:	d102      	bne.n	8003798 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x14>
            return 500.0f;
 8003792:	eddf 7a29 	vldr	s15, [pc, #164]	; 8003838 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xb4>
 8003796:	e049      	b.n	800382c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        if(gyroODR <= ODR::ODR_1000 && gyroODR >= ODR::ODR_32000){
 8003798:	2106      	movs	r1, #6
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f91e 	bl	80039dc <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x34>
 80037a6:	2101      	movs	r1, #1
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f92b 	bl	8003a04 <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x34>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x36>
 80037b8:	2300      	movs	r3, #0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d010      	beq.n	80037e0 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x5c>
            return 32000.0f / (1 << (gyroODR - ODR::ODR_32000));
 80037be:	2101      	movs	r1, #1
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f933 	bl	8003a2c <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>
 80037c6:	4603      	mov	r3, r0
 80037c8:	461a      	mov	r2, r3
 80037ca:	2301      	movs	r3, #1
 80037cc:	4093      	lsls	r3, r2
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037d6:	eddf 6a19 	vldr	s13, [pc, #100]	; 800383c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xb8>
 80037da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037de:	e025      	b.n	800382c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        if(gyroODR <= ODR::ODR_12_5 && gyroODR >= ODR::ODR_200){
 80037e0:	210b      	movs	r1, #11
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f8fa 	bl	80039dc <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7c>
 80037ee:	2107      	movs	r1, #7
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f907 	bl	8003a04 <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7c>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7e>
 8003800:	2300      	movs	r3, #0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d010      	beq.n	8003828 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa4>
            return 200.0f /  (1 << (gyroODR - ODR::ODR_200));
 8003806:	2107      	movs	r1, #7
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f90f 	bl	8003a2c <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>
 800380e:	4603      	mov	r3, r0
 8003810:	461a      	mov	r2, r3
 8003812:	2301      	movs	r3, #1
 8003814:	4093      	lsls	r3, r2
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800381e:	eddf 6a08 	vldr	s13, [pc, #32]	; 8003840 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xbc>
 8003822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003826:	e001      	b.n	800382c <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        return -1.0f;
 8003828:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
 800382c:	eeb0 0a67 	vmov.f32	s0, s15
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	43fa0000 	.word	0x43fa0000
 800383c:	46fa0000 	.word	0x46fa0000
 8003840:	43480000 	.word	0x43480000

08003844 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>:


    //float map_gyro_FSR_CNF_to_FSR(const config& cnf){
	float map_gyro_FSR_CNF_to_FSR(GYRO_CNF::FSR gyroFSR){
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
        using namespace GYRO_CNF;

        if(gyroFSR <= FSR::FSR_15_625){
 800384c:	2107      	movs	r1, #7
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f8fd 	bl	8003a4e <_ZN8ICM426888GYRO_CNFleENS0_3FSRES1_>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x30>
            return 2000.0f / (1 << gyroFSR);
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	2001      	movs	r0, #1
 800385e:	f7ff ff71 	bl	8003744 <_ZN8ICM426888GYRO_CNFlsEhNS0_3FSRE>
 8003862:	ee07 0a90 	vmov	s15, r0
 8003866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003888 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x44>
 800386e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003872:	e001      	b.n	8003878 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x34>
        }

        return -1.0f;
 8003874:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    }
 8003878:	eef0 7a47 	vmov.f32	s15, s14
 800387c:	eeb0 0a67 	vmov.f32	s0, s15
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	44fa0000 	.word	0x44fa0000

0800388c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>:

    //float map_accel_ODR_CNF_to_ODR(const config& cnf){
	float map_accel_ODR_CNF_to_ODR(ACCEL_CNF::ODR accelODR){
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
        using namespace ACCEL_CNF;

        if(accelODR == ODR::ODR_500){
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b0f      	cmp	r3, #15
 8003898:	d102      	bne.n	80038a0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x14>
            return 500.0f;
 800389a:	eddf 7a29 	vldr	s15, [pc, #164]	; 8003940 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xb4>
 800389e:	e049      	b.n	8003934 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        if(accelODR <= ODR::ODR_1000 && accelODR >= ODR::ODR_32000){
 80038a0:	2106      	movs	r1, #6
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f8e7 	bl	8003a76 <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x34>
 80038ae:	2101      	movs	r1, #1
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f8f4 	bl	8003a9e <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x34>
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x36>
 80038c0:	2300      	movs	r3, #0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d010      	beq.n	80038e8 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x5c>
            return 32000.0f / (1 << (accelODR - ODR::ODR_32000)) ;
 80038c6:	2101      	movs	r1, #1
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f8fc 	bl	8003ac6 <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>
 80038ce:	4603      	mov	r3, r0
 80038d0:	461a      	mov	r2, r3
 80038d2:	2301      	movs	r3, #1
 80038d4:	4093      	lsls	r3, r2
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038de:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003944 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xb8>
 80038e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038e6:	e025      	b.n	8003934 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        if(accelODR <= ODR::ODR_1_562 && accelODR >= ODR::ODR_200){
 80038e8:	210e      	movs	r1, #14
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f8c3 	bl	8003a76 <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7c>
 80038f6:	2107      	movs	r1, #7
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f8d0 	bl	8003a9e <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7c>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7e>
 8003908:	2300      	movs	r3, #0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d010      	beq.n	8003930 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa4>
            return 200.0f /  ( 1 << (accelODR - ODR::ODR_200));
 800390e:	2107      	movs	r1, #7
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f8d8 	bl	8003ac6 <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>
 8003916:	4603      	mov	r3, r0
 8003918:	461a      	mov	r2, r3
 800391a:	2301      	movs	r3, #1
 800391c:	4093      	lsls	r3, r2
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003926:	eddf 6a08 	vldr	s13, [pc, #32]	; 8003948 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xbc>
 800392a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800392e:	e001      	b.n	8003934 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        return -1.0f;
 8003930:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
 8003934:	eeb0 0a67 	vmov.f32	s0, s15
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	43fa0000 	.word	0x43fa0000
 8003944:	46fa0000 	.word	0x46fa0000
 8003948:	43480000 	.word	0x43480000

0800394c <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>:

    //float map_accel_FSR_CNF_to_FSR(const config& cnf){
	float map_accel_FSR_CNF_to_FSR(ACCEL_CNF::FSR accelFSR){
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
        using namespace ACCEL_CNF;
  
        if(accelFSR <= FSR::FSR_2){
 8003954:	2103      	movs	r1, #3
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f8c6 	bl	8003ae8 <_ZN8ICM426889ACCEL_CNFleENS0_3FSRES1_>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00c      	beq.n	800397c <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE+0x30>
            return 16.0f / (1 << accelFSR);
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	2001      	movs	r0, #1
 8003966:	f7ff fefd 	bl	8003764 <_ZN8ICM426889ACCEL_CNFlsEhNS0_3FSRE>
 800396a:	ee07 0a90 	vmov	s15, r0
 800396e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003972:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8003976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800397a:	e001      	b.n	8003980 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE+0x34>
        }

        return -1.0f;
 800397c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    }
 8003980:	eef0 7a47 	vmov.f32	s15, s14
 8003984:	eeb0 0a67 	vmov.f32	s0, s15
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <_ZN8ICM4268815convertTempDataEhh>:

    
    float convertTempData(uint8_t rawTempH, uint8_t rawTempL)
    {
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	460a      	mov	r2, r1
 800399a:	71fb      	strb	r3, [r7, #7]
 800399c:	4613      	mov	r3, r2
 800399e:	71bb      	strb	r3, [r7, #6]
        int16_t temp_data = (rawTempH << 8) |  rawTempL;
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	b21a      	sxth	r2, r3
 80039a6:	79bb      	ldrb	r3, [r7, #6]
 80039a8:	b21b      	sxth	r3, r3
 80039aa:	4313      	orrs	r3, r2
 80039ac:	81fb      	strh	r3, [r7, #14]
        return (temp_data / 132.48f + 25);
 80039ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039b2:	ee07 3a90 	vmov	s15, r3
 80039b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039ba:	eddf 6a07 	vldr	s13, [pc, #28]	; 80039d8 <_ZN8ICM4268815convertTempDataEhh+0x48>
 80039be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039c2:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80039c6:	ee77 7a87 	vadd.f32	s15, s15, s14
    }
 80039ca:	eeb0 0a67 	vmov.f32	s0, s15
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	43047ae1 	.word	0x43047ae1

080039dc <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>:
    /////////////////////////// GYRO_CNF /////////////////////////////////////

    namespace GYRO_CNF {

        bool operator<=(ODR odr1, ODR odr2) 
        {
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) <= static_cast<uint8_t> (odr2);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	429a      	cmp	r2, r3
 80039f0:	bf94      	ite	ls
 80039f2:	2301      	movls	r3, #1
 80039f4:	2300      	movhi	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
        }
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>:
        bool operator>=(ODR odr1, ODR odr2) 
        {
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) >= static_cast<uint8_t> (odr2);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	429a      	cmp	r2, r3
 8003a18:	bf2c      	ite	cs
 8003a1a:	2301      	movcs	r3, #1
 8003a1c:	2300      	movcc	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
        }
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>:
        uint8_t operator-(ODR odr1, ODR odr2)
        {
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) - static_cast<uint8_t> (odr2);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	b2db      	uxtb	r3, r3
        }
 8003a42:	4618      	mov	r0, r3
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <_ZN8ICM426888GYRO_CNFleENS0_3FSRES1_>:


        bool operator<=(FSR fsr1, FSR fsr2)
        {
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (fsr1) <= static_cast<uint8_t> (fsr2);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	429a      	cmp	r2, r3
 8003a62:	bf94      	ite	ls
 8003a64:	2301      	movls	r3, #1
 8003a66:	2300      	movhi	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
        }
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>:

    /////////////////////////// ACCEL_CNF /////////////////////////////////////
    namespace ACCEL_CNF {

        bool operator<=(ODR odr1, ODR odr2) 
        {
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) <= static_cast<uint8_t> (odr2);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	bf94      	ite	ls
 8003a8c:	2301      	movls	r3, #1
 8003a8e:	2300      	movhi	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
        }
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>:
        bool operator>=(ODR odr1, ODR odr2) 
        {
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) >= static_cast<uint8_t> (odr2);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	bf2c      	ite	cs
 8003ab4:	2301      	movcs	r3, #1
 8003ab6:	2300      	movcc	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
        }
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>:
        uint8_t operator-(ODR odr1, ODR odr2)
        {
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) - static_cast<uint8_t> (odr2);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	b2db      	uxtb	r3, r3
        }
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <_ZN8ICM426889ACCEL_CNFleENS0_3FSRES1_>:

        bool operator<=(FSR fsr1, FSR fsr2)
        {
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (fsr1) <= static_cast<uint8_t> (fsr2);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	429a      	cmp	r2, r3
 8003afc:	bf94      	ite	ls
 8003afe:	2301      	movls	r3, #1
 8003b00:	2300      	movhi	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
        }  
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b14:	f000 ffaf 	bl	8004a76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b18:	f000 f812 	bl	8003b40 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b1c:	f7fc ff80 	bl	8000a20 <MX_GPIO_Init>
  MX_SPI2_Init();
 8003b20:	f000 fb5c 	bl	80041dc <MX_SPI2_Init>
  MX_I2C4_Init();
 8003b24:	f7fd f89a 	bl	8000c5c <MX_I2C4_Init>
  MX_CAN1_Init();
 8003b28:	f7fc fe6e 	bl	8000808 <MX_CAN1_Init>
  MX_CAN2_Init();
 8003b2c:	f7fc fea4 	bl	8000878 <MX_CAN2_Init>
  MX_TIM5_Init();
 8003b30:	f000 fe02 	bl	8004738 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //HAL_Delay(2000);

  system_init();
 8003b34:	f000 fc8e 	bl	8004454 <_Z11system_initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  system_run_active_mode();
 8003b38:	f000 fcb0 	bl	800449c <_Z22system_run_active_modev>
 8003b3c:	e7fc      	b.n	8003b38 <main+0x28>
	...

08003b40 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b094      	sub	sp, #80	; 0x50
 8003b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b46:	f107 0320 	add.w	r3, r7, #32
 8003b4a:	2230      	movs	r2, #48	; 0x30
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f004 ff58 	bl	8008a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b54:	f107 030c 	add.w	r3, r7, #12
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	605a      	str	r2, [r3, #4]
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b64:	4b33      	ldr	r3, [pc, #204]	; (8003c34 <_Z18SystemClock_Configv+0xf4>)
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	4a32      	ldr	r2, [pc, #200]	; (8003c34 <_Z18SystemClock_Configv+0xf4>)
 8003b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b70:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <_Z18SystemClock_Configv+0xf4>)
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b7c:	4b2e      	ldr	r3, [pc, #184]	; (8003c38 <_Z18SystemClock_Configv+0xf8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a2d      	ldr	r2, [pc, #180]	; (8003c38 <_Z18SystemClock_Configv+0xf8>)
 8003b82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <_Z18SystemClock_Configv+0xf8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003b94:	2309      	movs	r3, #9
 8003b96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ba6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003bac:	2306      	movs	r3, #6
 8003bae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003bb0:	23d8      	movs	r3, #216	; 0xd8
 8003bb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003bb8:	2309      	movs	r3, #9
 8003bba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bbc:	f107 0320 	add.w	r3, r7, #32
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f002 fa95 	bl	80060f0 <HAL_RCC_OscConfig>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf14      	ite	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	2300      	moveq	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <_Z18SystemClock_Configv+0x9a>
  {
    Error_Handler();
 8003bd6:	f000 f831 	bl	8003c3c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003bda:	f002 fa39 	bl	8006050 <HAL_PWREx_EnableOverDrive>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	bf14      	ite	ne
 8003be4:	2301      	movne	r3, #1
 8003be6:	2300      	moveq	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 8003bee:	f000 f825 	bl	8003c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bf2:	230f      	movs	r3, #15
 8003bf4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003bfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003c0a:	f107 030c 	add.w	r3, r7, #12
 8003c0e:	2107      	movs	r1, #7
 8003c10:	4618      	mov	r0, r3
 8003c12:	f002 fd11 	bl	8006638 <HAL_RCC_ClockConfig>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf14      	ite	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	2300      	moveq	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <_Z18SystemClock_Configv+0xea>
  {
    Error_Handler();
 8003c26:	f000 f809 	bl	8003c3c <Error_Handler>
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	3750      	adds	r7, #80	; 0x50
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	40007000 	.word	0x40007000

08003c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c40:	b672      	cpsid	i
}
 8003c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c44:	e7fe      	b.n	8003c44 <Error_Handler+0x8>
	...

08003c48 <_Z20fail_silent_mode_runv>:

#define LED_FAIL_SILENT_GPIO_Port LED1_GPIO_Port
#define LED_FAIL_SILENT_GPIO_Pin  LED1_Pin

void fail_silent_mode_run(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
	gpio ledFailSilent(LED_FAIL_SILENT_GPIO_Port, LED_FAIL_SILENT_GPIO_Pin);
 8003c4e:	463b      	mov	r3, r7
 8003c50:	2210      	movs	r2, #16
 8003c52:	4905      	ldr	r1, [pc, #20]	; (8003c68 <_Z20fail_silent_mode_runv+0x20>)
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fc ff8b 	bl	8000b70 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>


	ledFailSilent.write(GPIO_ST::HIGH);
 8003c5a:	463b      	mov	r3, r7
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fc ffac 	bl	8000bbc <_ZN5STM324gpio5writeE7GPIO_ST>

	while(1)
 8003c64:	e7fe      	b.n	8003c64 <_Z20fail_silent_mode_runv+0x1c>
 8003c66:	bf00      	nop
 8003c68:	40021000 	.word	0x40021000

08003c6c <_ZN9iPHandler12add_read_bitEhbb>:
    static uint8_t add_read_bit(uint8_t reg, bool normalMode = true, bool rwBitInFront = true)
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	71fb      	strb	r3, [r7, #7]
 8003c76:	460b      	mov	r3, r1
 8003c78:	71bb      	strb	r3, [r7, #6]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	717b      	strb	r3, [r7, #5]
    	if(rwBitInFront){
 8003c7e:	797b      	ldrb	r3, [r7, #5]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d009      	beq.n	8003c98 <_ZN9iPHandler12add_read_bitEhbb+0x2c>
    		return normalMode ? (reg | (1 << 7)) : reg;
 8003c84:	79bb      	ldrb	r3, [r7, #6]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <_ZN9iPHandler12add_read_bitEhbb+0x28>
 8003c8a:	79fb      	ldrb	r3, [r7, #7]
 8003c8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	e00f      	b.n	8003cb4 <_ZN9iPHandler12add_read_bitEhbb+0x48>
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	e00d      	b.n	8003cb4 <_ZN9iPHandler12add_read_bitEhbb+0x48>
    		return normalMode ? (reg << 1) | 0x01 : reg << 1;
 8003c98:	79bb      	ldrb	r3, [r7, #6]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d007      	beq.n	8003cae <_ZN9iPHandler12add_read_bitEhbb+0x42>
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	b25b      	sxtb	r3, r3
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	b25b      	sxtb	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	e002      	b.n	8003cb4 <_ZN9iPHandler12add_read_bitEhbb+0x48>
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	b2db      	uxtb	r3, r3
    }
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <_ZN9iPHandler13add_write_bitEhbb>:
    static uint8_t add_write_bit(uint8_t reg, bool normalMode = true, bool rwBitInFront = true)
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	71fb      	strb	r3, [r7, #7]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	71bb      	strb	r3, [r7, #6]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	717b      	strb	r3, [r7, #5]
    	if(rwBitInFront){
 8003cd2:	797b      	ldrb	r3, [r7, #5]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d009      	beq.n	8003cec <_ZN9iPHandler13add_write_bitEhbb+0x2c>
    		return normalMode ? reg : (reg | (1 << 7));
 8003cd8:	79bb      	ldrb	r3, [r7, #6]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <_ZN9iPHandler13add_write_bitEhbb+0x22>
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	e012      	b.n	8003d08 <_ZN9iPHandler13add_write_bitEhbb+0x48>
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	e00d      	b.n	8003d08 <_ZN9iPHandler13add_write_bitEhbb+0x48>
    		return normalMode ? reg << 1 : (reg  << 0x01 | 1);
 8003cec:	79bb      	ldrb	r3, [r7, #6]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <_ZN9iPHandler13add_write_bitEhbb+0x3a>
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	e006      	b.n	8003d08 <_ZN9iPHandler13add_write_bitEhbb+0x48>
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	b25b      	sxtb	r3, r3
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	b25b      	sxtb	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
    }
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <_Z15normal_mode_runv>:
#define LED_HEARTBEAT_GPIO_Pin  LED2_Pin

static bool run = false;

void normal_mode_run(void)
{
 8003d14:	b590      	push	{r4, r7, lr}
 8003d16:	f5ad 7d75 	sub.w	sp, sp, #980	; 0x3d4
 8003d1a:	af04      	add	r7, sp, #16
	taskWatchdog_t taskWatchdog;
	taskIMUgetData_t taskIMUgetData;
	taskCNIsendData_t taskCNIsendIMUdata;

	// Inicialización de la IMU =====================================
	gpio imuCS(ICM42688_CS_GPIO_Port, ICM42688_CS_Pin);
 8003d1c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8003d20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d24:	4971      	ldr	r1, [pc, #452]	; (8003eec <_Z15normal_mode_runv+0x1d8>)
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fc ff22 	bl	8000b70 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

	phandler_spi<> spi2(&hspi2, &imuCS, COMM_MODE::BLCK);
 8003d2c:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8003d30:	f507 7032 	add.w	r0, r7, #712	; 0x2c8
 8003d34:	2300      	movs	r3, #0
 8003d36:	496e      	ldr	r1, [pc, #440]	; (8003ef0 <_Z15normal_mode_runv+0x1dc>)
 8003d38:	f000 f90c 	bl	8003f54 <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE>

	ICM42688::config_FIFO icmFifoCnf =
 8003d3c:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003d40:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003d44:	2201      	movs	r2, #1
 8003d46:	801a      	strh	r2, [r3, #0]
 8003d48:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003d4c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003d50:	2200      	movs	r2, #0
 8003d52:	605a      	str	r2, [r3, #4]
	{
		  .watermark = 1,
		  .mode = ICM42688::FIFO_MODE::BYPASS,
	};

	ICM42688::config_INT icmIntCnf =
 8003d54:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003d58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003d5c:	4a65      	ldr	r2, [pc, #404]	; (8003ef4 <_Z15normal_mode_runv+0x1e0>)
 8003d5e:	461c      	mov	r4, r3
 8003d60:	4613      	mov	r3, r2
 8003d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			//.int1Mode = ICM42688::INT_MODE::PULSED_PP_HIGH,
			.int2Source = ICM42688::INT_SOURCE::DISABLED,
			.int2Mode = ICM42688::INT_MODE::DISABLED,
	};

	ICM42688::Config icmCnf =
 8003d68:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003d6c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003d70:	4618      	mov	r0, r3
 8003d72:	2328      	movs	r3, #40	; 0x28
 8003d74:	461a      	mov	r2, r3
 8003d76:	2100      	movs	r1, #0
 8003d78:	f004 fe44 	bl	8008a04 <memset>
 8003d7c:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003d80:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003d84:	2203      	movs	r2, #3
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003d8c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003d90:	2206      	movs	r2, #6
 8003d92:	605a      	str	r2, [r3, #4]
 8003d94:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003d98:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003da4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003da8:	2206      	movs	r2, #6
 8003daa:	60da      	str	r2, [r3, #12]
		.gyroODR 					= ICM42688::GYRO_CNF::ODR::ODR_1000,
		.accelFSR 					= ICM42688::ACCEL_CNF::FSR::FSR_4,
		.accelODR 					= ICM42688::ACCEL_CNF::ODR::ODR_1000,
		.fifoCnf					= icmFifoCnf,
		.intCnf						= icmIntCnf,
	};
 8003dac:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003db0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003db4:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8003db8:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003dbc:	3310      	adds	r3, #16
 8003dbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dc2:	e883 0003 	stmia.w	r3, {r0, r1}
 8003dc6:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8003dca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003dce:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8003dd2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003dd6:	f103 0418 	add.w	r4, r3, #24
 8003dda:	4613      	mov	r3, r2
 8003ddc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	ICM42688::icm42688 imu(icmCnf, &spi2, &imuCS);
 8003de2:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8003de6:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8003dea:	f507 7122 	add.w	r1, r7, #648	; 0x288
 8003dee:	f107 001c 	add.w	r0, r7, #28
 8003df2:	f7fd f97b 	bl	80010ec <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioE>

	// Inicialización del LED heartbeat==============================
	gpio ledHeartbeat(LED_HEARTBEAT_GPIO_Port, LED_HEARTBEAT_GPIO_Pin);
 8003df6:	1d3b      	adds	r3, r7, #4
 8003df8:	2208      	movs	r2, #8
 8003dfa:	493f      	ldr	r1, [pc, #252]	; (8003ef8 <_Z15normal_mode_runv+0x1e4>)
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc feb7 	bl	8000b70 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

	// Inicialización de la CNI ==============================
	CNI_constructor(&hcan1);
 8003e02:	483e      	ldr	r0, [pc, #248]	; (8003efc <_Z15normal_mode_runv+0x1e8>)
 8003e04:	f7fc fb7e 	bl	8000504 <_Z15CNI_constructorP19__CAN_HandleTypeDef>

	// Creación de las tareas========================================
	taskWatchdog_constructor(&taskWatchdog,
 8003e08:	f507 7064 	add.w	r0, r7, #912	; 0x390
 8003e0c:	4b3c      	ldr	r3, [pc, #240]	; (8003f00 <_Z15normal_mode_runv+0x1ec>)
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	2300      	movs	r3, #0
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	2364      	movs	r3, #100	; 0x64
 8003e16:	2201      	movs	r2, #1
 8003e18:	2100      	movs	r1, #0
 8003e1a:	f000 fc45 	bl	80046a8 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>
			PERIOD_TASK_WATCHDOG_TICKS_NORMAL,
			WCET_TASK_WATCHDOG_US,
			BCET_TASK_WATCHDOG_US,
			&hiwdg);

	taskHeartbeat_constructor(&taskHeartbeat,
 8003e1e:	f507 706a 	add.w	r0, r7, #936	; 0x3a8
 8003e22:	1d3b      	adds	r3, r7, #4
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	2300      	movs	r3, #0
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	2364      	movs	r3, #100	; 0x64
 8003e2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e30:	2100      	movs	r1, #0
 8003e32:	f000 fb87 	bl	8004544 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>
		  PERIOD_TASK_HEARTBEAT_TICKS_NORMAL,
		  WCET_TASK_HEARTBEAT_US,
		  BCET_TASK_HEARTBEAT_US,
		  &ledHeartbeat);

	taskIMUgetData_constructor(&taskIMUgetData,
 8003e36:	f507 7056 	add.w	r0, r7, #856	; 0x358
 8003e3a:	2304      	movs	r3, #4
 8003e3c:	9302      	str	r3, [sp, #8]
 8003e3e:	f107 031c 	add.w	r3, r7, #28
 8003e42:	9301      	str	r3, [sp, #4]
 8003e44:	2300      	movs	r3, #0
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	2364      	movs	r3, #100	; 0x64
 8003e4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e4e:	2101      	movs	r1, #1
 8003e50:	f000 fbae 	bl	80045b0 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688Em>
		  PERIOD_TASK_IMU_TICKS_NORMAL,
		  WCET_TASK_IMU_US,
		  BCET_TASK_IMU_US,
		  &imu, HANDLE_MSG_CNI_SEND_IMU_DATA);

	taskCNIsendData_constructor(&taskCNIsendIMUdata,
 8003e54:	f507 7050 	add.w	r0, r7, #832	; 0x340
 8003e58:	2304      	movs	r3, #4
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	2364      	movs	r3, #100	; 0x64
 8003e62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e66:	2103      	movs	r1, #3
 8003e68:	f000 fb3a 	bl	80044e0 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>
		  WCET_TASK_CNI_SEND_IMU_US,
		  BCET_TASK_CNI_SEND_IMU_US,
		  HANDLE_MSG_CNI_SEND_IMU_DATA);

	// Inicialización del scheduler =================================
	timeTriggeredScheduler_constructor(&htim5);
 8003e6c:	4825      	ldr	r0, [pc, #148]	; (8003f04 <_Z15normal_mode_runv+0x1f0>)
 8003e6e:	f000 fce9 	bl	8004844 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDef>
	timeTriggeredScheduler_init();
 8003e72:	f000 fd09 	bl	8004888 <_Z27timeTriggeredScheduler_initv>

	CNI_init();
 8003e76:	f7fc fb61 	bl	800053c <_Z8CNI_initv>

	taskHeartbeat_start(&taskHeartbeat);
 8003e7a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fb7a 	bl	8004578 <_Z19taskHeartbeat_startP15taskHeartbeat_t>
	taskIMUgetData_start(&taskIMUgetData);
 8003e84:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fbaf 	bl	80045ec <_Z20taskIMUgetData_startP16taskIMUgetData_t>
	taskCNIsendData_start(&taskCNIsendIMUdata);
 8003e8e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fb3e 	bl	8004514 <_Z21taskCNIsendData_startP17taskCNIsendData_t>

	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskHeartbeat);
 8003e98:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fd7b 	bl	8004998 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskWatchdog);
 8003ea2:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fd76 	bl	8004998 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskIMUgetData);
 8003eac:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fd71 	bl	8004998 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIsendIMUdata);
 8003eb6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fd6c 	bl	8004998 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>

	CNI_start();
 8003ec0:	f7fc fb62 	bl	8000588 <_Z9CNI_startv>

	// Se queda acá esperando hasta que uno presione el botón para comenzar
	while(!run)
 8003ec4:	e000      	b.n	8003ec8 <_Z15normal_mode_runv+0x1b4>
	{
		__asm__("wfi");
 8003ec6:	bf30      	wfi
	while(!run)
 8003ec8:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <_Z15normal_mode_runv+0x1f4>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	f083 0301 	eor.w	r3, r3, #1
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f7      	bne.n	8003ec6 <_Z15normal_mode_runv+0x1b2>

#if IS_MASTER
	CNI_send_msg(HANDLE_MSG_CNI_SYNC);
#endif

	taskWatchdog_start(&taskWatchdog);
 8003ed6:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fc12 	bl	8004704 <_Z18taskWatchdog_startP14taskWatchdog_t>

	timeTriggeredScheduler_start();
 8003ee0:	f000 fce6 	bl	80048b0 <_Z28timeTriggeredScheduler_startv>

	while(1)
	{
		timeTriggeredScheduler_dispatch();
 8003ee4:	f000 fcf0 	bl	80048c8 <_Z31timeTriggeredScheduler_dispatchv>
 8003ee8:	e7fc      	b.n	8003ee4 <_Z15normal_mode_runv+0x1d0>
 8003eea:	bf00      	nop
 8003eec:	40020400 	.word	0x40020400
 8003ef0:	200002b0 	.word	0x200002b0
 8003ef4:	08008be8 	.word	0x08008be8
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	200001f4 	.word	0x200001f4
 8003f00:	2000029c 	.word	0x2000029c
 8003f04:	2000031c 	.word	0x2000031c
 8003f08:	200002ac 	.word	0x200002ac

08003f0c <HAL_CAN_RxFifo0MsgPendingCallback>:
    	run = true;
    }
}
#else
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003f14:	2102      	movs	r1, #2
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f001 f99a 	bl	8005250 <HAL_CAN_DeactivateNotification>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8003f1c:	2014      	movs	r0, #20
 8003f1e:	f001 fd16 	bl	800594e <HAL_NVIC_DisableIRQ>
	run = true;
 8003f22:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
}
 8003f28:	bf00      	nop
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	200002ac 	.word	0x200002ac

08003f34 <_ZN9iPHandlerC1Ev>:
class iPHandler {
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	4a04      	ldr	r2, [pc, #16]	; (8003f50 <_ZN9iPHandlerC1Ev+0x1c>)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	08008cb4 	.word	0x08008cb4

08003f54 <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE>:

template <uint8_t BufferSize = 32>
class PHandlerSPI : public iPHandler {
public:

	PHandlerSPI(SPI_HandleTypeDef* spiHandler, gpio *cs, COMM_MODE mode)
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
		: m_handler(spiHandler)
		, m_cs(cs)
		, m_mode(mode)
		, m_size(0)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff ffe5 	bl	8003f34 <_ZN9iPHandlerC1Ev>
 8003f6a:	4a13      	ldr	r2, [pc, #76]	; (8003fb8 <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE+0x64>)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	601a      	str	r2, [r3, #0]
		: m_handler(spiHandler)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	60da      	str	r2, [r3, #12]
		, m_cs(cs)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	611a      	str	r2, [r3, #16]
		, m_mode(mode)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	615a      	str	r2, [r3, #20]
		, m_size(0)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		{

			m_mutex = false;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	721a      	strb	r2, [r3, #8]
			m_cs->write(GPIO_ST::HIGH);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	2101      	movs	r1, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fc fe10 	bl	8000bbc <_ZN5STM324gpio5writeE7GPIO_ST>
			m_recvBuffer = &m_rxBuffer[1];
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f103 0219 	add.w	r2, r3, #25
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	605a      	str	r2, [r3, #4]
			//m_blockDelay = delay == 0 ? HAL_MAX_DELAY : delay;
			m_blockDelay = 5000;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fac:	65da      	str	r2, [r3, #92]	; 0x5c
		}
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	08008ca4 	.word	0x08008ca4

08003fbc <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt>:
		: PHandlerSPI(spiHandler, cs, COMM_MODE::BLCK)
		{}


	//iHANDLER_ST read_registers(uint8_t add, uint8_t size, void *cs, COMM_MODE mode)
	iPHANDLER_ST read_registers(const PHandlerOpt &opt) override
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
	{
		//SPI_ST ret = SPI_ST::OK;

		if(opt.size > BufferSize-1){
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	785b      	ldrb	r3, [r3, #1]
 8003fca:	2b1f      	cmp	r3, #31
 8003fcc:	d901      	bls.n	8003fd2 <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt+0x16>
				return iPHANDLER_ST::ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e029      	b.n	8004026 <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt+0x6a>
		//if(m_mutex == true){
		//	return iHANDLER_ST::UNAVAILABLE;
		//}
		//m_mutex = true;

		m_txBuffer[0] = add_read_bit(opt.add, opt.rw, opt.rwFront);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	7818      	ldrb	r0, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	7b19      	ldrb	r1, [r3, #12]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	7b5b      	ldrb	r3, [r3, #13]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f7ff fe44 	bl	8003c6c <_ZN9iPHandler12add_read_bitEhbb>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		m_mode = opt.mode;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	615a      	str	r2, [r3, #20]
		m_size = opt.size + 1;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	785b      	ldrb	r3, [r3, #1]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		m_cs = static_cast<gpio*>(opt.slave);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	611a      	str	r2, [r3, #16]
		m_recvBuffer = &m_rxBuffer[opt.addSize]; // recvBuffer apunta a donde comienza la recepción de SPI según el largo del address (en bytes)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	7b9b      	ldrb	r3, [r3, #14]
 8004010:	3318      	adds	r3, #24
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	441a      	add	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	605a      	str	r2, [r3, #4]

		return start_transmition();
 800401a:	2100      	movs	r1, #0
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f842 	bl	80040a6 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>
 8004022:	4603      	mov	r3, r0
 8004024:	bf00      	nop
	}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt>:

	//iHANDLER_ST write_registers(uint8_t add, uint8_t *data, uint8_t size, void *cs, COMM_MODE mode)
	iPHANDLER_ST write_registers(uint8_t *data, const PHandlerOpt &opt) override
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
	{
		//SPI_ST ret = SPI_ST::OK;

		if(opt.size > BufferSize-1){
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	785b      	ldrb	r3, [r3, #1]
 800403e:	2b1f      	cmp	r3, #31
 8004040:	d901      	bls.n	8004046 <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt+0x18>
				return iPHANDLER_ST::ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e02b      	b.n	800409e <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt+0x70>
		//if(m_mutex == true){
		//	return iHANDLER_ST::UNAVAILABLE;
		//}
		//m_mutex = true;

		m_txBuffer[0] = add_write_bit(opt.add, opt.rw, opt.rwFront);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	7818      	ldrb	r0, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	7b19      	ldrb	r1, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	7b5b      	ldrb	r3, [r3, #13]
 8004052:	461a      	mov	r2, r3
 8004054:	f7ff fe34 	bl	8003cc0 <_ZN9iPHandler13add_write_bitEhbb>
 8004058:	4603      	mov	r3, r0
 800405a:	461a      	mov	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		memcpy(m_txBuffer + 1, data, opt.size);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3338      	adds	r3, #56	; 0x38
 8004066:	1c58      	adds	r0, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	785b      	ldrb	r3, [r3, #1]
 800406c:	461a      	mov	r2, r3
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	f004 fd50 	bl	8008b14 <memcpy>
		m_mode = opt.mode;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	615a      	str	r2, [r3, #20]
		m_size = opt.size + 1;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	785b      	ldrb	r3, [r3, #1]
 8004080:	3301      	adds	r3, #1
 8004082:	b2da      	uxtb	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		m_cs = static_cast<gpio*>(opt.slave);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	611a      	str	r2, [r3, #16]

		return start_transmition();
 8004092:	2100      	movs	r1, #0
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f806 	bl	80040a6 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>
 800409a:	4603      	mov	r3, r0
 800409c:	bf00      	nop
	}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>:




	iPHANDLER_ST start_transmition(void *fn_pointer = nullptr ) // arreglar cuando se use la DMA
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	6039      	str	r1, [r7, #0]
	{
		iPHANDLER_ST ret = iPHANDLER_ST::OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
		//m_spiHandler.m_csPin = m_cs;

		m_cs->write(GPIO_ST::LOW);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2100      	movs	r1, #0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fc fd7e 	bl	8000bbc <_ZN5STM324gpio5writeE7GPIO_ST>
		switch (m_mode)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d021      	beq.n	800410c <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x66>
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	dc21      	bgt.n	8004110 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x6a>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x30>
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d019      	beq.n	8004108 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x62>
 80040d4:	e01c      	b.n	8004110 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x6a>
		{
		case COMM_MODE::BLCK:

			ret = transmit(m_txBuffer, m_rxBuffer, m_size);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f103 0218 	add.w	r2, r3, #24
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f81e 	bl	800412c <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t>
 80040f0:	60f8      	str	r0, [r7, #12]
			m_cs->write(GPIO_ST::HIGH);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2101      	movs	r1, #1
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fc fd5f 	bl	8000bbc <_ZN5STM324gpio5writeE7GPIO_ST>
			if(ret != iPHANDLER_ST::OK){
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00d      	beq.n	8004120 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7a>
				return iPHANDLER_ST::ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e00d      	b.n	8004124 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			}
			break;

		case COMM_MODE::IT:
			 return iPHANDLER_ST::INVALID;
 8004108:	2303      	movs	r3, #3
 800410a:	e00b      	b.n	8004124 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;

		case COMM_MODE::DMA:
			return iPHANDLER_ST::INVALID;
 800410c:	2303      	movs	r3, #3
 800410e:	e009      	b.n	8004124 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;


		default:
			m_cs->write(GPIO_ST::HIGH);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	2101      	movs	r1, #1
 8004116:	4618      	mov	r0, r3
 8004118:	f7fc fd50 	bl	8000bbc <_ZN5STM324gpio5writeE7GPIO_ST>
			return iPHANDLER_ST::INVALID;
 800411c:	2303      	movs	r3, #3
 800411e:	e001      	b.n	8004124 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;
 8004120:	bf00      	nop
			break;
		}

		return iPHANDLER_ST::OK;
 8004122:	2300      	movs	r3, #0
	}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t>:


	   return map_hal_st_to_handler_st(retHal);
   }

   iPHANDLER_ST transmit(uint8_t *pTxData, uint8_t *pRxData, uint16_t size)
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af02      	add	r7, sp, #8
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	807b      	strh	r3, [r7, #2]
   {

	   HAL_StatusTypeDef retHal = HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	75fb      	strb	r3, [r7, #23]
	   if(m_cs == nullptr)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t+0x1e>
		   return iPHANDLER_ST::ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e013      	b.n	8004172 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t+0x46>

	   //m_csPin->write(GPIO_ST::LOW);

	   retHal = HAL_SPI_TransmitReceive(
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68d8      	ldr	r0, [r3, #12]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004152:	887a      	ldrh	r2, [r7, #2]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	4613      	mov	r3, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	f003 f8b9 	bl	80072d2 <HAL_SPI_TransmitReceive>
 8004160:	4603      	mov	r3, r0
 8004162:	75fb      	strb	r3, [r7, #23]
				   size,
				m_blockDelay
			   );
	   //m_csPin->write(GPIO_ST::HIGH);

	   return map_hal_st_to_handler_st(retHal);
 8004164:	7dfb      	ldrb	r3, [r7, #23]
 8004166:	4619      	mov	r1, r3
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f806 	bl	800417a <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef>
 800416e:	4603      	mov	r3, r0
 8004170:	bf00      	nop

   }
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef>:
   {
	   return iPHANDLER_ST::INVALID;
   }


   iPHANDLER_ST map_hal_st_to_handler_st(HAL_StatusTypeDef st)
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	460b      	mov	r3, r1
 8004184:	70fb      	strb	r3, [r7, #3]
   {
	   switch (st){
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef+0x16>
	   case HAL_OK:
		   return iPHANDLER_ST::OK;
 800418c:	2300      	movs	r3, #0
 800418e:	e000      	b.n	8004192 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef+0x18>
		   break;
	   case HAL_TIMEOUT:
	   case HAL_ERROR:
	   default:
		   return iPHANDLER_ST::ERROR;
 8004190:	2301      	movs	r3, #1
		   break;
	   }
   }
 8004192:	4618      	mov	r0, r3
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <_Z22my_copy_array_of_uint8PhPKhm>:
 */

#include "myUtils.h"

void my_copy_array_of_uint8(uint8_t *dest, const uint8_t *src, uint32_t n)
{
 800419e:	b480      	push	{r7}
 80041a0:	b087      	sub	sp, #28
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	607a      	str	r2, [r7, #4]
	uint32_t i;

	for(i = 0; i < n; i++)
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	e00a      	b.n	80041c6 <_Z22my_copy_array_of_uint8PhPKhm+0x28>
	{
		dest[i] = src[i];
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	441a      	add	r2, r3
 80041b6:	68f9      	ldr	r1, [r7, #12]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	440b      	add	r3, r1
 80041bc:	7812      	ldrb	r2, [r2, #0]
 80041be:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < n; i++)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	3301      	adds	r3, #1
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d3f0      	bcc.n	80041b0 <_Z22my_copy_array_of_uint8PhPKhm+0x12>
	}
}
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80041e0:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <MX_SPI2_Init+0x74>)
 80041e2:	4a1c      	ldr	r2, [pc, #112]	; (8004254 <MX_SPI2_Init+0x78>)
 80041e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80041e6:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <MX_SPI2_Init+0x74>)
 80041e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80041ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80041ee:	4b18      	ldr	r3, [pc, #96]	; (8004250 <MX_SPI2_Init+0x74>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80041f4:	4b16      	ldr	r3, [pc, #88]	; (8004250 <MX_SPI2_Init+0x74>)
 80041f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80041fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041fc:	4b14      	ldr	r3, [pc, #80]	; (8004250 <MX_SPI2_Init+0x74>)
 80041fe:	2200      	movs	r2, #0
 8004200:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004202:	4b13      	ldr	r3, [pc, #76]	; (8004250 <MX_SPI2_Init+0x74>)
 8004204:	2201      	movs	r2, #1
 8004206:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004208:	4b11      	ldr	r3, [pc, #68]	; (8004250 <MX_SPI2_Init+0x74>)
 800420a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800420e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004210:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <MX_SPI2_Init+0x74>)
 8004212:	2220      	movs	r2, #32
 8004214:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004216:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <MX_SPI2_Init+0x74>)
 8004218:	2200      	movs	r2, #0
 800421a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800421c:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <MX_SPI2_Init+0x74>)
 800421e:	2200      	movs	r2, #0
 8004220:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004222:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <MX_SPI2_Init+0x74>)
 8004224:	2200      	movs	r2, #0
 8004226:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004228:	4b09      	ldr	r3, [pc, #36]	; (8004250 <MX_SPI2_Init+0x74>)
 800422a:	2207      	movs	r2, #7
 800422c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800422e:	4b08      	ldr	r3, [pc, #32]	; (8004250 <MX_SPI2_Init+0x74>)
 8004230:	2200      	movs	r2, #0
 8004232:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <MX_SPI2_Init+0x74>)
 8004236:	2200      	movs	r2, #0
 8004238:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800423a:	4805      	ldr	r0, [pc, #20]	; (8004250 <MX_SPI2_Init+0x74>)
 800423c:	f002 ff9e 	bl	800717c <HAL_SPI_Init>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8004246:	f7ff fcf9 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	200002b0 	.word	0x200002b0
 8004254:	40003800 	.word	0x40003800

08004258 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	; 0x28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004260:	f107 0314 	add.w	r3, r7, #20
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	609a      	str	r2, [r3, #8]
 800426c:	60da      	str	r2, [r3, #12]
 800426e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a17      	ldr	r2, [pc, #92]	; (80042d4 <HAL_SPI_MspInit+0x7c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d128      	bne.n	80042cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800427a:	4b17      	ldr	r3, [pc, #92]	; (80042d8 <HAL_SPI_MspInit+0x80>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	4a16      	ldr	r2, [pc, #88]	; (80042d8 <HAL_SPI_MspInit+0x80>)
 8004280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004284:	6413      	str	r3, [r2, #64]	; 0x40
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <HAL_SPI_MspInit+0x80>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004292:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <HAL_SPI_MspInit+0x80>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	4a10      	ldr	r2, [pc, #64]	; (80042d8 <HAL_SPI_MspInit+0x80>)
 8004298:	f043 0302 	orr.w	r3, r3, #2
 800429c:	6313      	str	r3, [r2, #48]	; 0x30
 800429e:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <HAL_SPI_MspInit+0x80>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80042aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80042ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b0:	2302      	movs	r3, #2
 80042b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042b8:	2303      	movs	r3, #3
 80042ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042bc:	2305      	movs	r3, #5
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c0:	f107 0314 	add.w	r3, r7, #20
 80042c4:	4619      	mov	r1, r3
 80042c6:	4805      	ldr	r0, [pc, #20]	; (80042dc <HAL_SPI_MspInit+0x84>)
 80042c8:	f001 fb5c 	bl	8005984 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80042cc:	bf00      	nop
 80042ce:	3728      	adds	r7, #40	; 0x28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40003800 	.word	0x40003800
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40020400 	.word	0x40020400

080042e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <HAL_MspInit+0x44>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <HAL_MspInit+0x44>)
 80042ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f0:	6413      	str	r3, [r2, #64]	; 0x40
 80042f2:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <HAL_MspInit+0x44>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fa:	607b      	str	r3, [r7, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042fe:	4b09      	ldr	r3, [pc, #36]	; (8004324 <HAL_MspInit+0x44>)
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	4a08      	ldr	r2, [pc, #32]	; (8004324 <HAL_MspInit+0x44>)
 8004304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004308:	6453      	str	r3, [r2, #68]	; 0x44
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <HAL_MspInit+0x44>)
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800

08004328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800432c:	e7fe      	b.n	800432c <NMI_Handler+0x4>

0800432e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800432e:	b480      	push	{r7}
 8004330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004332:	e7fe      	b.n	8004332 <HardFault_Handler+0x4>

08004334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004338:	e7fe      	b.n	8004338 <MemManage_Handler+0x4>

0800433a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800433a:	b480      	push	{r7}
 800433c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800433e:	e7fe      	b.n	800433e <BusFault_Handler+0x4>

08004340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004344:	e7fe      	b.n	8004344 <UsageFault_Handler+0x4>

08004346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004346:	b480      	push	{r7}
 8004348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800434a:	bf00      	nop
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004362:	b480      	push	{r7}
 8004364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004366:	bf00      	nop
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004374:	f000 fbbc 	bl	8004af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004378:	bf00      	nop
 800437a:	bd80      	pop	{r7, pc}

0800437c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004380:	4802      	ldr	r0, [pc, #8]	; (800438c <CAN1_RX0_IRQHandler+0x10>)
 8004382:	f000 ff8c 	bl	800529e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004386:	bf00      	nop
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	200001f4 	.word	0x200001f4

08004390 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004394:	4802      	ldr	r0, [pc, #8]	; (80043a0 <TIM5_IRQHandler+0x10>)
 8004396:	f003 fc42 	bl	8007c1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	2000031c 	.word	0x2000031c

080043a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  return 1;
 80043a8:	2301      	movs	r3, #1
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <_kill>:

int _kill(int pid, int sig)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80043be:	f004 fb7d 	bl	8008abc <__errno>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2216      	movs	r2, #22
 80043c6:	601a      	str	r2, [r3, #0]
  return -1;
 80043c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <_exit>:

void _exit (int status)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff ffe7 	bl	80043b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80043e6:	e7fe      	b.n	80043e6 <_exit+0x12>

080043e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043f0:	4a14      	ldr	r2, [pc, #80]	; (8004444 <_sbrk+0x5c>)
 80043f2:	4b15      	ldr	r3, [pc, #84]	; (8004448 <_sbrk+0x60>)
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043fc:	4b13      	ldr	r3, [pc, #76]	; (800444c <_sbrk+0x64>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d102      	bne.n	800440a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004404:	4b11      	ldr	r3, [pc, #68]	; (800444c <_sbrk+0x64>)
 8004406:	4a12      	ldr	r2, [pc, #72]	; (8004450 <_sbrk+0x68>)
 8004408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800440a:	4b10      	ldr	r3, [pc, #64]	; (800444c <_sbrk+0x64>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4413      	add	r3, r2
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	429a      	cmp	r2, r3
 8004416:	d207      	bcs.n	8004428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004418:	f004 fb50 	bl	8008abc <__errno>
 800441c:	4603      	mov	r3, r0
 800441e:	220c      	movs	r2, #12
 8004420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004426:	e009      	b.n	800443c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004428:	4b08      	ldr	r3, [pc, #32]	; (800444c <_sbrk+0x64>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800442e:	4b07      	ldr	r3, [pc, #28]	; (800444c <_sbrk+0x64>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	4a05      	ldr	r2, [pc, #20]	; (800444c <_sbrk+0x64>)
 8004438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800443a:	68fb      	ldr	r3, [r7, #12]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20050000 	.word	0x20050000
 8004448:	00000400 	.word	0x00000400
 800444c:	20000314 	.word	0x20000314
 8004450:	20000558 	.word	0x20000558

08004454 <_Z11system_initv>:
};

static systemMode theSystemMode = FAIL_SILENT;

void system_init(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8004458:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <_Z11system_initv+0x40>)
 800445a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	bf14      	ite	ne
 8004464:	2301      	movne	r3, #1
 8004466:	2300      	moveq	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <_Z11system_initv+0x2e>
	{
		__HAL_RCC_CLEAR_RESET_FLAGS();
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <_Z11system_initv+0x40>)
 8004470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004472:	4a08      	ldr	r2, [pc, #32]	; (8004494 <_Z11system_initv+0x40>)
 8004474:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004478:	6753      	str	r3, [r2, #116]	; 0x74

		theSystemMode = FAIL_SILENT;
 800447a:	4b07      	ldr	r3, [pc, #28]	; (8004498 <_Z11system_initv+0x44>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		theSystemMode = NORMAL;
	}
}
 8004480:	e002      	b.n	8004488 <_Z11system_initv+0x34>
		theSystemMode = NORMAL;
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <_Z11system_initv+0x44>)
 8004484:	2201      	movs	r2, #1
 8004486:	601a      	str	r2, [r3, #0]
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40023800 	.word	0x40023800
 8004498:	20000318 	.word	0x20000318

0800449c <_Z22system_run_active_modev>:

void system_run_active_mode(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
	switch(theSystemMode)
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <_Z22system_run_active_modev+0x1c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d102      	bne.n	80044ae <_Z22system_run_active_modev+0x12>
	{
		case NORMAL:
			normal_mode_run();
 80044a8:	f7ff fc34 	bl	8003d14 <_Z15normal_mode_runv>
			break;
 80044ac:	e002      	b.n	80044b4 <_Z22system_run_active_modev+0x18>

		default:
		case FAIL_SILENT:
			fail_silent_mode_run();
 80044ae:	f7ff fbcb 	bl	8003c48 <_Z20fail_silent_mode_runv>
			break;
 80044b2:	bf00      	nop
	}
}
 80044b4:	bf00      	nop
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20000318 	.word	0x20000318

080044bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <SystemInit+0x20>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	4a05      	ldr	r2, [pc, #20]	; (80044dc <SystemInit+0x20>)
 80044c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044d0:	bf00      	nop
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	e000ed00 	.word	0xe000ed00

080044e0 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>:

#include "taskCNIsendData.h"
#include "CNI.h"

void taskCNIsendData_constructor(taskCNIsendData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskCNIsendData_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	4904      	ldr	r1, [pc, #16]	; (8004510 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm+0x30>)
 80044fe:	f000 fa73 	bl	80049e8 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mHandleMsg_ = handleMsg;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	69fa      	ldr	r2, [r7, #28]
 8004506:	615a      	str	r2, [r3, #20]
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	08004529 	.word	0x08004529

08004514 <_Z21taskCNIsendData_startP17taskCNIsendData_t>:
	//TODO: hay que hacer que si uno llama a la tarea nuevamente, la tarea simplemente no haga nada.
	timeTriggeredTask_destructor(&me->super);
}

void taskCNIsendData_start(taskCNIsendData_t *me)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	//TODO: acá podría uno decirle a la CNI que se va a encargar de enviar el mensaje
	// asociado al handleMsg.
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <_Z22taskCNIsendData_updateP17taskCNIsendData_t>:

void taskCNIsendData_update(taskCNIsendData_t *me)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	CNI_send_msg(me->mHandleMsg_);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	4618      	mov	r0, r3
 8004536:	f7fc f839 	bl	80005ac <_Z12CNI_send_msgm>
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>:
 */

#include "taskHeartbeat.h"

void taskHeartbeat_constructor(taskHeartbeat_t *me , uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, gpio *led)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskHeartbeat_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	4904      	ldr	r1, [pc, #16]	; (8004574 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE+0x30>)
 8004562:	f000 fa41 	bl	80049e8 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mLED_ = led;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	615a      	str	r2, [r3, #20]
}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	08004595 	.word	0x08004595

08004578 <_Z19taskHeartbeat_startP15taskHeartbeat_t>:
	me->mLED_->write(GPIO_ST::LOW);
	timeTriggeredTask_destructor(&me->super);
}

void taskHeartbeat_start(taskHeartbeat_t *me)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
	me->mLED_->write(GPIO_ST::HIGH);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f7fc fb18 	bl	8000bbc <_ZN5STM324gpio5writeE7GPIO_ST>
}
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <_Z20taskHeartbeat_updateP15taskHeartbeat_t>:

void taskHeartbeat_update(taskHeartbeat_t *me)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
	me->mLED_->toggle();
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fc fafb 	bl	8000b9c <_ZN5STM324gpio6toggleEv>
}
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688Em>:
#define LEN_IMU_CNI_DATA 24

static void make_imu_data_for_cni(IMUData imuData, uint8_t *dataForCni);

void taskIMUgetData_constructor(taskIMUgetData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, ICM42688::icm42688 *imu, uint32_t handleMsg)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskIMUgetData_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	9301      	str	r3, [sp, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	4906      	ldr	r1, [pc, #24]	; (80045e8 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688Em+0x38>)
 80045ce:	f000 fa0b 	bl	80049e8 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mIMU_ = imu;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	615a      	str	r2, [r3, #20]
	me->mHandleMsg_ = handleMsg;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a3a      	ldr	r2, [r7, #32]
 80045dc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	08004601 	.word	0x08004601

080045ec <_Z20taskIMUgetData_startP16taskIMUgetData_t>:

	timeTriggeredTask_destructor(&me->super);
}

void taskIMUgetData_start(taskIMUgetData_t *me)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
	// Por ahora no hace nada
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <_Z21taskIMUgetData_updateP16taskIMUgetData_t>:

void taskIMUgetData_update(taskIMUgetData_t *me)
{
 8004600:	b590      	push	{r4, r7, lr}
 8004602:	b08d      	sub	sp, #52	; 0x34
 8004604:	af04      	add	r7, sp, #16
 8004606:	6078      	str	r0, [r7, #4]
	uint8_t dataForCni[LEN_IMU_CNI_DATA];

	me->mIMU_->save_data();
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4610      	mov	r0, r2
 8004616:	4798      	blx	r3
	me->mIMU_->read_data(&(me->mIMUdata_));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6958      	ldr	r0, [r3, #20]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3310      	adds	r3, #16
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	3218      	adds	r2, #24
 800462a:	4611      	mov	r1, r2
 800462c:	4798      	blx	r3

	// Convertir los datos de la IMU en bytes
	make_imu_data_for_cni(me->mIMUdata_, dataForCni);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f107 0208 	add.w	r2, r7, #8
 8004634:	9203      	str	r2, [sp, #12]
 8004636:	466c      	mov	r4, sp
 8004638:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800463c:	ca07      	ldmia	r2, {r0, r1, r2}
 800463e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004642:	3318      	adds	r3, #24
 8004644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004646:	f000 f80c 	bl	8004662 <_ZL21make_imu_data_for_cni7IMUDataPh>

	// Actualizarlos en la CNI
	CNI_update_msg_content(me->mHandleMsg_, dataForCni, LEN_IMU_CNI_DATA);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464e:	f107 0108 	add.w	r1, r7, #8
 8004652:	2218      	movs	r2, #24
 8004654:	4618      	mov	r0, r3
 8004656:	f7fc f83b 	bl	80006d0 <_Z22CNI_update_msg_contentmPhm>
}
 800465a:	bf00      	nop
 800465c:	3724      	adds	r7, #36	; 0x24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd90      	pop	{r4, r7, pc}

08004662 <_ZL21make_imu_data_for_cni7IMUDataPh>:

static void make_imu_data_for_cni(IMUData imuData, uint8_t *dataForCni)
{
 8004662:	b084      	sub	sp, #16
 8004664:	b490      	push	{r4, r7}
 8004666:	af00      	add	r7, sp, #0
 8004668:	f107 0408 	add.w	r4, r7, #8
 800466c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004670:	69ba      	ldr	r2, [r7, #24]
	memcpy(dataForCni     , &imuData.accelX, 4);
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[4] , &imuData.accelY, 4);
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	3304      	adds	r3, #4
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[8] , &imuData.accelZ, 4);
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	3308      	adds	r3, #8
 8004682:	6a3a      	ldr	r2, [r7, #32]
 8004684:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[12], &imuData.gyroX , 4);
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	330c      	adds	r3, #12
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[16], &imuData.gyroY , 4);
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	3310      	adds	r3, #16
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[20], &imuData.gyroZ , 4);
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	3314      	adds	r3, #20
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	601a      	str	r2, [r3, #0]
}
 800469e:	bf00      	nop
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc90      	pop	{r4, r7}
 80046a4:	b004      	add	sp, #16
 80046a6:	4770      	bx	lr

080046a8 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>:
 */

#include "taskWatchdog.h"

void taskWatchdog_constructor(taskWatchdog_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, IWDG_HandleTypeDef *hiwdg)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskWatchdog_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	9301      	str	r3, [sp, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	490d      	ldr	r1, [pc, #52]	; (80046fc <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x54>)
 80046c6:	f000 f98f 	bl	80049e8 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mHiwdg_ = hiwdg;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	615a      	str	r2, [r3, #20]

	me->mHiwdg_->Instance = IWDG;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	4a0a      	ldr	r2, [pc, #40]	; (8004700 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x58>)
 80046d6:	601a      	str	r2, [r3, #0]
	me->mHiwdg_->Init.Prescaler = IWDG_PRESCALER_4;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	2200      	movs	r2, #0
 80046de:	605a      	str	r2, [r3, #4]
	me->mHiwdg_->Init.Window = 4095;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80046e8:	60da      	str	r2, [r3, #12]
	me->mHiwdg_->Init.Reload = 9;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	2209      	movs	r2, #9
 80046f0:	609a      	str	r2, [r3, #8]
}
 80046f2:	bf00      	nop
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	0800471f 	.word	0x0800471f
 8004700:	40003000 	.word	0x40003000

08004704 <_Z18taskWatchdog_startP14taskWatchdog_t>:
{
	timeTriggeredTask_destructor(&me->super);
}

void taskWatchdog_start(taskWatchdog_t *me)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Init(me->mHiwdg_);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	4618      	mov	r0, r3
 8004712:	f001 fc3e 	bl	8005f92 <HAL_IWDG_Init>
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <_Z19taskWatchdog_updateP14taskWatchdog_t>:

void taskWatchdog_update(taskWatchdog_t *me)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(me->mHiwdg_);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	4618      	mov	r0, r3
 800472c:	f001 fc80 	bl	8006030 <HAL_IWDG_Refresh>
}
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800473e:	f107 0310 	add.w	r3, r7, #16
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	605a      	str	r2, [r3, #4]
 8004748:	609a      	str	r2, [r3, #8]
 800474a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800474c:	1d3b      	adds	r3, r7, #4
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	605a      	str	r2, [r3, #4]
 8004754:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004756:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <MX_TIM5_Init+0x94>)
 8004758:	4a1d      	ldr	r2, [pc, #116]	; (80047d0 <MX_TIM5_Init+0x98>)
 800475a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108-1;
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <MX_TIM5_Init+0x94>)
 800475e:	226b      	movs	r2, #107	; 0x6b
 8004760:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004762:	4b1a      	ldr	r3, [pc, #104]	; (80047cc <MX_TIM5_Init+0x94>)
 8004764:	2200      	movs	r2, #0
 8004766:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8004768:	4b18      	ldr	r3, [pc, #96]	; (80047cc <MX_TIM5_Init+0x94>)
 800476a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800476e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004770:	4b16      	ldr	r3, [pc, #88]	; (80047cc <MX_TIM5_Init+0x94>)
 8004772:	2200      	movs	r2, #0
 8004774:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004776:	4b15      	ldr	r3, [pc, #84]	; (80047cc <MX_TIM5_Init+0x94>)
 8004778:	2200      	movs	r2, #0
 800477a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800477c:	4813      	ldr	r0, [pc, #76]	; (80047cc <MX_TIM5_Init+0x94>)
 800477e:	f003 f943 	bl	8007a08 <HAL_TIM_Base_Init>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004788:	f7ff fa58 	bl	8003c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800478c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004790:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004792:	f107 0310 	add.w	r3, r7, #16
 8004796:	4619      	mov	r1, r3
 8004798:	480c      	ldr	r0, [pc, #48]	; (80047cc <MX_TIM5_Init+0x94>)
 800479a:	f003 fb81 	bl	8007ea0 <HAL_TIM_ConfigClockSource>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80047a4:	f7ff fa4a 	bl	8003c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047a8:	2300      	movs	r3, #0
 80047aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80047b0:	1d3b      	adds	r3, r7, #4
 80047b2:	4619      	mov	r1, r3
 80047b4:	4805      	ldr	r0, [pc, #20]	; (80047cc <MX_TIM5_Init+0x94>)
 80047b6:	f003 ff8d 	bl	80086d4 <HAL_TIMEx_MasterConfigSynchronization>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80047c0:	f7ff fa3c 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80047c4:	bf00      	nop
 80047c6:	3720      	adds	r7, #32
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	2000031c 	.word	0x2000031c
 80047d0:	40000c00 	.word	0x40000c00

080047d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a0d      	ldr	r2, [pc, #52]	; (8004818 <HAL_TIM_Base_MspInit+0x44>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d113      	bne.n	800480e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80047e6:	4b0d      	ldr	r3, [pc, #52]	; (800481c <HAL_TIM_Base_MspInit+0x48>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	4a0c      	ldr	r2, [pc, #48]	; (800481c <HAL_TIM_Base_MspInit+0x48>)
 80047ec:	f043 0308 	orr.w	r3, r3, #8
 80047f0:	6413      	str	r3, [r2, #64]	; 0x40
 80047f2:	4b0a      	ldr	r3, [pc, #40]	; (800481c <HAL_TIM_Base_MspInit+0x48>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80047fe:	2200      	movs	r2, #0
 8004800:	2100      	movs	r1, #0
 8004802:	2032      	movs	r0, #50	; 0x32
 8004804:	f001 f879 	bl	80058fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004808:	2032      	movs	r0, #50	; 0x32
 800480a:	f001 f892 	bl	8005932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800480e:	bf00      	nop
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40000c00 	.word	0x40000c00
 800481c:	40023800 	.word	0x40023800

08004820 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef>:

static timeTriggeredScheduler_t _instance;
//volatile uint32_t _ticks;

static void timeTriggeredScheduler_tick(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	_instance.mTicks_++;
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef+0x20>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	3301      	adds	r3, #1
 800482e:	4a04      	ldr	r2, [pc, #16]	; (8004840 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef+0x20>)
 8004830:	6053      	str	r3, [r2, #4]
	//_ticks++;
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	200003d8 	.word	0x200003d8

08004844 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDef>:

void timeTriggeredScheduler_constructor(TIM_HandleTypeDef *timer)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	_instance.mTimer_ = timer;
 800484c:	4a0d      	ldr	r2, [pc, #52]	; (8004884 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDef+0x40>)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6013      	str	r3, [r2, #0]

	for(i = 0; i < MAX_NUM_TASKS ; i++)
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e008      	b.n	800486a <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDef+0x26>
	{
		_instance.mTaskList_[i] = 0;
 8004858:	4a0a      	ldr	r2, [pc, #40]	; (8004884 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDef+0x40>)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3302      	adds	r3, #2
 800485e:	2100      	movs	r1, #0
 8004860:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i = 0; i < MAX_NUM_TASKS ; i++)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3301      	adds	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b09      	cmp	r3, #9
 800486e:	d9f3      	bls.n	8004858 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDef+0x14>
	}

	_instance.mTicks_ = 0;
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDef+0x40>)
 8004872:	2200      	movs	r2, #0
 8004874:	605a      	str	r2, [r3, #4]
	//_ticks = 0;
}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	200003d8 	.word	0x200003d8

08004888 <_Z27timeTriggeredScheduler_initv>:

void timeTriggeredScheduler_init(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(_instance.mTimer_);
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <_Z27timeTriggeredScheduler_initv+0x20>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f003 f995 	bl	8007bc0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_RegisterCallback(_instance.mTimer_, HAL_TIM_PERIOD_ELAPSED_CB_ID, timeTriggeredScheduler_tick);
 8004896:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <_Z27timeTriggeredScheduler_initv+0x20>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a04      	ldr	r2, [pc, #16]	; (80048ac <_Z27timeTriggeredScheduler_initv+0x24>)
 800489c:	210e      	movs	r1, #14
 800489e:	4618      	mov	r0, r3
 80048a0:	f003 fc2c 	bl	80080fc <HAL_TIM_RegisterCallback>
}
 80048a4:	bf00      	nop
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	200003d8 	.word	0x200003d8
 80048ac:	08004821 	.word	0x08004821

080048b0 <_Z28timeTriggeredScheduler_startv>:

void timeTriggeredScheduler_start(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(_instance.mTimer_);
 80048b4:	4b03      	ldr	r3, [pc, #12]	; (80048c4 <_Z28timeTriggeredScheduler_startv+0x14>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f003 f909 	bl	8007ad0 <HAL_TIM_Base_Start_IT>
}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	200003d8 	.word	0x200003d8

080048c8 <_Z31timeTriggeredScheduler_dispatchv>:
{
	HAL_TIM_Base_Stop_IT(_instance.mTimer_);
}

void timeTriggeredScheduler_dispatch(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
	uint8_t updateRequired = 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 80048d2:	b672      	cpsid	i
}
 80048d4:	bf00      	nop
	uint32_t i;
	timeTriggeredTask_t *task;

	__disable_irq();
	if(_instance.mTicks_ > 0)
 80048d6:	4b2f      	ldr	r3, [pc, #188]	; (8004994 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bf14      	ite	ne
 80048de:	2301      	movne	r3, #1
 80048e0:	2300      	moveq	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d006      	beq.n	80048f6 <_Z31timeTriggeredScheduler_dispatchv+0x2e>
	{
		_instance.mTicks_--;
 80048e8:	4b2a      	ldr	r3, [pc, #168]	; (8004994 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	4a29      	ldr	r2, [pc, #164]	; (8004994 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 80048f0:	6053      	str	r3, [r2, #4]
		updateRequired = 1;
 80048f2:	2301      	movs	r3, #1
 80048f4:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80048f6:	b662      	cpsie	i
}
 80048f8:	bf00      	nop
	}
	__enable_irq();

	while(updateRequired)
 80048fa:	e043      	b.n	8004984 <_Z31timeTriggeredScheduler_dispatchv+0xbc>
	{
		for(i = 0; i < MAX_NUM_TASKS; i++)
 80048fc:	2300      	movs	r3, #0
 80048fe:	60bb      	str	r3, [r7, #8]
 8004900:	e026      	b.n	8004950 <_Z31timeTriggeredScheduler_dispatchv+0x88>
		{
			if((task = _instance.mTaskList_[i]))
 8004902:	4a24      	ldr	r2, [pc, #144]	; (8004994 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	3302      	adds	r3, #2
 8004908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	bf14      	ite	ne
 8004914:	2301      	movne	r3, #1
 8004916:	2300      	moveq	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d015      	beq.n	800494a <_Z31timeTriggeredScheduler_dispatchv+0x82>
			{
				//if( (--(me->mTaskList_[i]->mDelayTicks_)) == 0 )
				if( (--(task->mDelayTicks_)) == 0 )
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	1e5a      	subs	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	605a      	str	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf0c      	ite	eq
 8004930:	2301      	moveq	r3, #1
 8004932:	2300      	movne	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <_Z31timeTriggeredScheduler_dispatchv+0x82>
				{
					//timeTriggeredTask_update((timeTriggeredTask_t*)(me->mTaskList_[i]));
					(*(task->mTaskHandler_))(task);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
					//me->mTaskList_[i]->mDelayTicks_ = me->mTaskList_[i]->mPeriodTicks_;
					task->mDelayTicks_ = task->mPeriodTicks_;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	605a      	str	r2, [r3, #4]
		for(i = 0; i < MAX_NUM_TASKS; i++)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	3301      	adds	r3, #1
 800494e:	60bb      	str	r3, [r7, #8]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b09      	cmp	r3, #9
 8004954:	d9d5      	bls.n	8004902 <_Z31timeTriggeredScheduler_dispatchv+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8004956:	b672      	cpsid	i
}
 8004958:	bf00      	nop
			}
		}

		__disable_irq();

		if(_instance.mTicks_ > 0)
 800495a:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	bf14      	ite	ne
 8004962:	2301      	movne	r3, #1
 8004964:	2300      	moveq	r3, #0
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d007      	beq.n	800497c <_Z31timeTriggeredScheduler_dispatchv+0xb4>
		{
			_instance.mTicks_--;
 800496c:	4b09      	ldr	r3, [pc, #36]	; (8004994 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	3b01      	subs	r3, #1
 8004972:	4a08      	ldr	r2, [pc, #32]	; (8004994 <_Z31timeTriggeredScheduler_dispatchv+0xcc>)
 8004974:	6053      	str	r3, [r2, #4]
			updateRequired = 1;
 8004976:	2301      	movs	r3, #1
 8004978:	73fb      	strb	r3, [r7, #15]
 800497a:	e001      	b.n	8004980 <_Z31timeTriggeredScheduler_dispatchv+0xb8>
		}
		else
		{
			updateRequired = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004980:	b662      	cpsie	i
}
 8004982:	bf00      	nop
	while(updateRequired)
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1b8      	bne.n	80048fc <_Z31timeTriggeredScheduler_dispatchv+0x34>
		}

		__enable_irq();
	}
	__asm__("wfi");
 800498a:	bf30      	wfi
}
 800498c:	bf00      	nop
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	200003d8 	.word	0x200003d8

08004998 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>:

TTschStatus_t timeTriggeredScheduler_add_task(timeTriggeredTask_t *task)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]

	while( (_instance.mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 80049a4:	e002      	b.n	80049ac <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x14>
	{
		i++;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3301      	adds	r3, #1
 80049aa:	60fb      	str	r3, [r7, #12]
	while( (_instance.mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 80049ac:	4a0d      	ldr	r2, [pc, #52]	; (80049e4 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x4c>)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3302      	adds	r3, #2
 80049b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x28>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2b09      	cmp	r3, #9
 80049be:	d9f2      	bls.n	80049a6 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0xe>
	}

	if(i == MAX_NUM_TASKS)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b0a      	cmp	r3, #10
 80049c4:	d101      	bne.n	80049ca <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x32>
	{
		return TTsch_ERROR_MAX_TASKS_REACHED;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e006      	b.n	80049d8 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x40>
	}

	_instance.mTaskList_[i] = task;
 80049ca:	4906      	ldr	r1, [pc, #24]	; (80049e4 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x4c>)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3302      	adds	r3, #2
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return TTsch_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	200003d8 	.word	0x200003d8

080049e8 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>:
 */

#include "timeTriggeredTask.h"

void timeTriggeredTask_constructor(timeTriggeredTask_t *me, taskHandler_t taskHandler, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
	me->mTaskHandler_ = taskHandler;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	601a      	str	r2, [r3, #0]

	me->mDelayTicks_ = delayTicks + 1;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	605a      	str	r2, [r3, #4]
	me->mPeriodTicks_ = periodTicks;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	609a      	str	r2, [r3, #8]
	me->mWcetMicroSeconds_ = wcetMicroSeconds;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	60da      	str	r2, [r3, #12]
	me->mBcetMicroSeconds_ = bcetMicroSeconds;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	611a      	str	r2, [r3, #16]
}
 8004a16:	bf00      	nop
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a28:	480d      	ldr	r0, [pc, #52]	; (8004a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004a2a:	490e      	ldr	r1, [pc, #56]	; (8004a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004a2c:	4a0e      	ldr	r2, [pc, #56]	; (8004a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a30:	e002      	b.n	8004a38 <LoopCopyDataInit>

08004a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a36:	3304      	adds	r3, #4

08004a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a3c:	d3f9      	bcc.n	8004a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a3e:	4a0b      	ldr	r2, [pc, #44]	; (8004a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004a40:	4c0b      	ldr	r4, [pc, #44]	; (8004a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a44:	e001      	b.n	8004a4a <LoopFillZerobss>

08004a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a48:	3204      	adds	r2, #4

08004a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a4c:	d3fb      	bcc.n	8004a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a4e:	f7ff fd35 	bl	80044bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a52:	f004 f839 	bl	8008ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a56:	f7ff f85b 	bl	8003b10 <main>
  bx  lr    
 8004a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a64:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8004a68:	08008cdc 	.word	0x08008cdc
  ldr r2, =_sbss
 8004a6c:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8004a70:	20000558 	.word	0x20000558

08004a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a74:	e7fe      	b.n	8004a74 <ADC_IRQHandler>

08004a76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a7a:	2003      	movs	r0, #3
 8004a7c:	f000 ff32 	bl	80058e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a80:	200f      	movs	r0, #15
 8004a82:	f000 f805 	bl	8004a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a86:	f7ff fc2b 	bl	80042e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a98:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <HAL_InitTick+0x54>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <HAL_InitTick+0x58>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 ff5b 	bl	800596a <HAL_SYSTICK_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e00e      	b.n	8004adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b0f      	cmp	r3, #15
 8004ac2:	d80a      	bhi.n	8004ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004acc:	f000 ff15 	bl	80058fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ad0:	4a06      	ldr	r2, [pc, #24]	; (8004aec <HAL_InitTick+0x5c>)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e000      	b.n	8004adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	2000015c 	.word	0x2000015c
 8004ae8:	20000164 	.word	0x20000164
 8004aec:	20000160 	.word	0x20000160

08004af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_IncTick+0x20>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_IncTick+0x24>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4413      	add	r3, r2
 8004b00:	4a04      	ldr	r2, [pc, #16]	; (8004b14 <HAL_IncTick+0x24>)
 8004b02:	6013      	str	r3, [r2, #0]
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000164 	.word	0x20000164
 8004b14:	20000408 	.word	0x20000408

08004b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <HAL_GetTick+0x14>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20000408 	.word	0x20000408

08004b30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e0ed      	b.n	8004d1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fb feca 	bl	80008e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b64:	f7ff ffd8 	bl	8004b18 <HAL_GetTick>
 8004b68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b6a:	e012      	b.n	8004b92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b6c:	f7ff ffd4 	bl	8004b18 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b0a      	cmp	r3, #10
 8004b78:	d90b      	bls.n	8004b92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2205      	movs	r2, #5
 8004b8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e0c5      	b.n	8004d1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0e5      	beq.n	8004b6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0202 	bic.w	r2, r2, #2
 8004bae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bb0:	f7ff ffb2 	bl	8004b18 <HAL_GetTick>
 8004bb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004bb6:	e012      	b.n	8004bde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004bb8:	f7ff ffae 	bl	8004b18 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b0a      	cmp	r3, #10
 8004bc4:	d90b      	bls.n	8004bde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2205      	movs	r2, #5
 8004bd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e09f      	b.n	8004d1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e5      	bne.n	8004bb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	7e1b      	ldrb	r3, [r3, #24]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d108      	bne.n	8004c06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	e007      	b.n	8004c16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	7e5b      	ldrb	r3, [r3, #25]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d108      	bne.n	8004c30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	e007      	b.n	8004c40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	7e9b      	ldrb	r3, [r3, #26]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d108      	bne.n	8004c5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0220 	orr.w	r2, r2, #32
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	e007      	b.n	8004c6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0220 	bic.w	r2, r2, #32
 8004c68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	7edb      	ldrb	r3, [r3, #27]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d108      	bne.n	8004c84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0210 	bic.w	r2, r2, #16
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	e007      	b.n	8004c94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0210 	orr.w	r2, r2, #16
 8004c92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	7f1b      	ldrb	r3, [r3, #28]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d108      	bne.n	8004cae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0208 	orr.w	r2, r2, #8
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	e007      	b.n	8004cbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0208 	bic.w	r2, r2, #8
 8004cbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	7f5b      	ldrb	r3, [r3, #29]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d108      	bne.n	8004cd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0204 	orr.w	r2, r2, #4
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	e007      	b.n	8004ce8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0204 	bic.w	r2, r2, #4
 8004ce6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	ea42 0103 	orr.w	r1, r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	1e5a      	subs	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d3e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004d40:	7cfb      	ldrb	r3, [r7, #19]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d003      	beq.n	8004d4e <HAL_CAN_ConfigFilter+0x26>
 8004d46:	7cfb      	ldrb	r3, [r7, #19]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	f040 80be 	bne.w	8004eca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004d4e:	4b65      	ldr	r3, [pc, #404]	; (8004ee4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004d50:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d58:	f043 0201 	orr.w	r2, r3, #1
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d68:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f003 031f 	and.w	r3, r3, #31
 8004d8e:	2201      	movs	r2, #1
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	401a      	ands	r2, r3
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d123      	bne.n	8004df8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	43db      	mvns	r3, r3
 8004dba:	401a      	ands	r2, r3
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004dd2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	3248      	adds	r2, #72	; 0x48
 8004dd8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004dec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004dee:	6979      	ldr	r1, [r7, #20]
 8004df0:	3348      	adds	r3, #72	; 0x48
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	440b      	add	r3, r1
 8004df6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d122      	bne.n	8004e46 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e20:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	3248      	adds	r2, #72	; 0x48
 8004e26:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e3a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e3c:	6979      	ldr	r1, [r7, #20]
 8004e3e:	3348      	adds	r3, #72	; 0x48
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	440b      	add	r3, r1
 8004e44:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d109      	bne.n	8004e62 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	43db      	mvns	r3, r3
 8004e58:	401a      	ands	r2, r3
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004e60:	e007      	b.n	8004e72 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	43db      	mvns	r3, r3
 8004e84:	401a      	ands	r2, r3
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004e8c:	e007      	b.n	8004e9e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d107      	bne.n	8004eb6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ebc:	f023 0201 	bic.w	r2, r3, #1
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e006      	b.n	8004ed8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
  }
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	40006400 	.word	0x40006400

08004ee8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d12e      	bne.n	8004f5a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f14:	f7ff fe00 	bl	8004b18 <HAL_GetTick>
 8004f18:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f1a:	e012      	b.n	8004f42 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f1c:	f7ff fdfc 	bl	8004b18 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b0a      	cmp	r3, #10
 8004f28:	d90b      	bls.n	8004f42 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2205      	movs	r2, #5
 8004f3a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e012      	b.n	8004f68 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e5      	bne.n	8004f1c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e006      	b.n	8004f68 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
  }
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b089      	sub	sp, #36	; 0x24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f84:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f8e:	7ffb      	ldrb	r3, [r7, #31]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d003      	beq.n	8004f9c <HAL_CAN_AddTxMessage+0x2c>
 8004f94:	7ffb      	ldrb	r3, [r7, #31]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	f040 80ad 	bne.w	80050f6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10a      	bne.n	8004fbc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 8095 	beq.w	80050e6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	0e1b      	lsrs	r3, r3, #24
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	409a      	lsls	r2, r3
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10d      	bne.n	8004ff4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004fe2:	68f9      	ldr	r1, [r7, #12]
 8004fe4:	6809      	ldr	r1, [r1, #0]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	3318      	adds	r3, #24
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	440b      	add	r3, r1
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	e00f      	b.n	8005014 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ffe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005004:	68f9      	ldr	r1, [r7, #12]
 8005006:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005008:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	3318      	adds	r3, #24
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	440b      	add	r3, r1
 8005012:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6819      	ldr	r1, [r3, #0]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	3318      	adds	r3, #24
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	440b      	add	r3, r1
 8005024:	3304      	adds	r3, #4
 8005026:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	7d1b      	ldrb	r3, [r3, #20]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d111      	bne.n	8005054 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	3318      	adds	r3, #24
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	4413      	add	r3, r2
 800503c:	3304      	adds	r3, #4
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	6811      	ldr	r1, [r2, #0]
 8005044:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	3318      	adds	r3, #24
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	440b      	add	r3, r1
 8005050:	3304      	adds	r3, #4
 8005052:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3307      	adds	r3, #7
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	061a      	lsls	r2, r3, #24
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3306      	adds	r3, #6
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	041b      	lsls	r3, r3, #16
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	3305      	adds	r3, #5
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	4313      	orrs	r3, r2
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	3204      	adds	r2, #4
 8005074:	7812      	ldrb	r2, [r2, #0]
 8005076:	4610      	mov	r0, r2
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	6811      	ldr	r1, [r2, #0]
 800507c:	ea43 0200 	orr.w	r2, r3, r0
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	440b      	add	r3, r1
 8005086:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800508a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3303      	adds	r3, #3
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	061a      	lsls	r2, r3, #24
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3302      	adds	r3, #2
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	041b      	lsls	r3, r3, #16
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3301      	adds	r3, #1
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	021b      	lsls	r3, r3, #8
 80050a6:	4313      	orrs	r3, r2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	7812      	ldrb	r2, [r2, #0]
 80050ac:	4610      	mov	r0, r2
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	6811      	ldr	r1, [r2, #0]
 80050b2:	ea43 0200 	orr.w	r2, r3, r0
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	440b      	add	r3, r1
 80050bc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80050c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	3318      	adds	r3, #24
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	4413      	add	r3, r2
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	6811      	ldr	r1, [r2, #0]
 80050d4:	f043 0201 	orr.w	r2, r3, #1
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	3318      	adds	r3, #24
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	440b      	add	r3, r1
 80050e0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e00e      	b.n	8005104 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e006      	b.n	8005104 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
  }
}
 8005104:	4618      	mov	r0, r3
 8005106:	3724      	adds	r7, #36	; 0x24
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005120:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d002      	beq.n	800512e <HAL_CAN_AbortTxRequest+0x1e>
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d128      	bne.n	8005180 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005146:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005160:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800517a:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	e006      	b.n	800518e <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
  }
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800519a:	b480      	push	{r7}
 800519c:	b085      	sub	sp, #20
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ac:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80051ae:	7afb      	ldrb	r3, [r7, #11]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d002      	beq.n	80051ba <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80051b4:	7afb      	ldrb	r3, [r7, #11]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d11d      	bne.n	80051f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3301      	adds	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3301      	adds	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3301      	adds	r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80051f6:	68fb      	ldr	r3, [r7, #12]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005214:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d002      	beq.n	8005222 <HAL_CAN_ActivateNotification+0x1e>
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d109      	bne.n	8005236 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6959      	ldr	r1, [r3, #20]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	e006      	b.n	8005244 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
  }
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005260:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d002      	beq.n	800526e <HAL_CAN_DeactivateNotification+0x1e>
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d10a      	bne.n	8005284 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6959      	ldr	r1, [r3, #20]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	43da      	mvns	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	400a      	ands	r2, r1
 800527e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	e006      	b.n	8005292 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b08a      	sub	sp, #40	; 0x28
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80052a6:	2300      	movs	r3, #0
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d07c      	beq.n	80053de <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d023      	beq.n	8005336 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2201      	movs	r2, #1
 80052f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f983 	bl	800560c <HAL_CAN_TxMailbox0CompleteCallback>
 8005306:	e016      	b.n	8005336 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b00      	cmp	r3, #0
 8005310:	d004      	beq.n	800531c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005318:	627b      	str	r3, [r7, #36]	; 0x24
 800531a:	e00c      	b.n	8005336 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d004      	beq.n	8005330 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
 800532e:	e002      	b.n	8005336 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f989 	bl	8005648 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d024      	beq.n	800538a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005348:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f963 	bl	8005620 <HAL_CAN_TxMailbox1CompleteCallback>
 800535a:	e016      	b.n	800538a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005362:	2b00      	cmp	r3, #0
 8005364:	d004      	beq.n	8005370 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
 800536e:	e00c      	b.n	800538a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005376:	2b00      	cmp	r3, #0
 8005378:	d004      	beq.n	8005384 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
 8005382:	e002      	b.n	800538a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f969 	bl	800565c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d024      	beq.n	80053de <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800539c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f943 	bl	8005634 <HAL_CAN_TxMailbox2CompleteCallback>
 80053ae:	e016      	b.n	80053de <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d004      	beq.n	80053c4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
 80053c2:	e00c      	b.n	80053de <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d004      	beq.n	80053d8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
 80053d6:	e002      	b.n	80053de <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f949 	bl	8005670 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00c      	beq.n	8005402 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f003 0310 	and.w	r3, r3, #16
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d007      	beq.n	8005402 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2210      	movs	r2, #16
 8005400:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00b      	beq.n	8005424 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d006      	beq.n	8005424 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2208      	movs	r2, #8
 800541c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f930 	bl	8005684 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d009      	beq.n	8005442 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f003 0303 	and.w	r3, r3, #3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7fe fd65 	bl	8003f0c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00c      	beq.n	8005466 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	2b00      	cmp	r3, #0
 8005454:	d007      	beq.n	8005466 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800545c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2210      	movs	r2, #16
 8005464:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00b      	beq.n	8005488 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d006      	beq.n	8005488 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2208      	movs	r2, #8
 8005480:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f912 	bl	80056ac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f003 0303 	and.w	r3, r3, #3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f8f9 	bl	8005698 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00b      	beq.n	80054c8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f003 0310 	and.w	r3, r3, #16
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d006      	beq.n	80054c8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2210      	movs	r2, #16
 80054c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f8fc 	bl	80056c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00b      	beq.n	80054ea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d006      	beq.n	80054ea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2208      	movs	r2, #8
 80054e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f8f5 	bl	80056d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d07b      	beq.n	80055ec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d072      	beq.n	80055e4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005504:	2b00      	cmp	r3, #0
 8005506:	d008      	beq.n	800551a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005520:	2b00      	cmp	r3, #0
 8005522:	d008      	beq.n	8005536 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	f043 0302 	orr.w	r3, r3, #2
 8005534:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	f043 0304 	orr.w	r3, r3, #4
 8005550:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005558:	2b00      	cmp	r3, #0
 800555a:	d043      	beq.n	80055e4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005562:	2b00      	cmp	r3, #0
 8005564:	d03e      	beq.n	80055e4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800556c:	2b60      	cmp	r3, #96	; 0x60
 800556e:	d02b      	beq.n	80055c8 <HAL_CAN_IRQHandler+0x32a>
 8005570:	2b60      	cmp	r3, #96	; 0x60
 8005572:	d82e      	bhi.n	80055d2 <HAL_CAN_IRQHandler+0x334>
 8005574:	2b50      	cmp	r3, #80	; 0x50
 8005576:	d022      	beq.n	80055be <HAL_CAN_IRQHandler+0x320>
 8005578:	2b50      	cmp	r3, #80	; 0x50
 800557a:	d82a      	bhi.n	80055d2 <HAL_CAN_IRQHandler+0x334>
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	d019      	beq.n	80055b4 <HAL_CAN_IRQHandler+0x316>
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	d826      	bhi.n	80055d2 <HAL_CAN_IRQHandler+0x334>
 8005584:	2b30      	cmp	r3, #48	; 0x30
 8005586:	d010      	beq.n	80055aa <HAL_CAN_IRQHandler+0x30c>
 8005588:	2b30      	cmp	r3, #48	; 0x30
 800558a:	d822      	bhi.n	80055d2 <HAL_CAN_IRQHandler+0x334>
 800558c:	2b10      	cmp	r3, #16
 800558e:	d002      	beq.n	8005596 <HAL_CAN_IRQHandler+0x2f8>
 8005590:	2b20      	cmp	r3, #32
 8005592:	d005      	beq.n	80055a0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005594:	e01d      	b.n	80055d2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	f043 0308 	orr.w	r3, r3, #8
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800559e:	e019      	b.n	80055d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	f043 0310 	orr.w	r3, r3, #16
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055a8:	e014      	b.n	80055d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	f043 0320 	orr.w	r3, r3, #32
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055b2:	e00f      	b.n	80055d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055bc:	e00a      	b.n	80055d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055c6:	e005      	b.n	80055d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055d0:	e000      	b.n	80055d4 <HAL_CAN_IRQHandler+0x336>
            break;
 80055d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80055e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2204      	movs	r2, #4
 80055ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d008      	beq.n	8005604 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f872 	bl	80056e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005604:	bf00      	nop
 8005606:	3728      	adds	r7, #40	; 0x28
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800570c:	4b0b      	ldr	r3, [pc, #44]	; (800573c <__NVIC_SetPriorityGrouping+0x40>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005718:	4013      	ands	r3, r2
 800571a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005724:	4b06      	ldr	r3, [pc, #24]	; (8005740 <__NVIC_SetPriorityGrouping+0x44>)
 8005726:	4313      	orrs	r3, r2
 8005728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800572a:	4a04      	ldr	r2, [pc, #16]	; (800573c <__NVIC_SetPriorityGrouping+0x40>)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	60d3      	str	r3, [r2, #12]
}
 8005730:	bf00      	nop
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	e000ed00 	.word	0xe000ed00
 8005740:	05fa0000 	.word	0x05fa0000

08005744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005748:	4b04      	ldr	r3, [pc, #16]	; (800575c <__NVIC_GetPriorityGrouping+0x18>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	0a1b      	lsrs	r3, r3, #8
 800574e:	f003 0307 	and.w	r3, r3, #7
}
 8005752:	4618      	mov	r0, r3
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	e000ed00 	.word	0xe000ed00

08005760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	4603      	mov	r3, r0
 8005768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800576a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800576e:	2b00      	cmp	r3, #0
 8005770:	db0b      	blt.n	800578a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	f003 021f 	and.w	r2, r3, #31
 8005778:	4907      	ldr	r1, [pc, #28]	; (8005798 <__NVIC_EnableIRQ+0x38>)
 800577a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	2001      	movs	r0, #1
 8005782:	fa00 f202 	lsl.w	r2, r0, r2
 8005786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	e000e100 	.word	0xe000e100

0800579c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	4603      	mov	r3, r0
 80057a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	db12      	blt.n	80057d4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	f003 021f 	and.w	r2, r3, #31
 80057b4:	490a      	ldr	r1, [pc, #40]	; (80057e0 <__NVIC_DisableIRQ+0x44>)
 80057b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	2001      	movs	r0, #1
 80057be:	fa00 f202 	lsl.w	r2, r0, r2
 80057c2:	3320      	adds	r3, #32
 80057c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80057c8:	f3bf 8f4f 	dsb	sy
}
 80057cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80057ce:	f3bf 8f6f 	isb	sy
}
 80057d2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	e000e100 	.word	0xe000e100

080057e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	6039      	str	r1, [r7, #0]
 80057ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	db0a      	blt.n	800580e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	490c      	ldr	r1, [pc, #48]	; (8005830 <__NVIC_SetPriority+0x4c>)
 80057fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005802:	0112      	lsls	r2, r2, #4
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	440b      	add	r3, r1
 8005808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800580c:	e00a      	b.n	8005824 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	b2da      	uxtb	r2, r3
 8005812:	4908      	ldr	r1, [pc, #32]	; (8005834 <__NVIC_SetPriority+0x50>)
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	3b04      	subs	r3, #4
 800581c:	0112      	lsls	r2, r2, #4
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	440b      	add	r3, r1
 8005822:	761a      	strb	r2, [r3, #24]
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	e000e100 	.word	0xe000e100
 8005834:	e000ed00 	.word	0xe000ed00

08005838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005838:	b480      	push	{r7}
 800583a:	b089      	sub	sp, #36	; 0x24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f1c3 0307 	rsb	r3, r3, #7
 8005852:	2b04      	cmp	r3, #4
 8005854:	bf28      	it	cs
 8005856:	2304      	movcs	r3, #4
 8005858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	3304      	adds	r3, #4
 800585e:	2b06      	cmp	r3, #6
 8005860:	d902      	bls.n	8005868 <NVIC_EncodePriority+0x30>
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	3b03      	subs	r3, #3
 8005866:	e000      	b.n	800586a <NVIC_EncodePriority+0x32>
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800586c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43da      	mvns	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	401a      	ands	r2, r3
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005880:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	fa01 f303 	lsl.w	r3, r1, r3
 800588a:	43d9      	mvns	r1, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005890:	4313      	orrs	r3, r2
         );
}
 8005892:	4618      	mov	r0, r3
 8005894:	3724      	adds	r7, #36	; 0x24
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
	...

080058a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058b0:	d301      	bcc.n	80058b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058b2:	2301      	movs	r3, #1
 80058b4:	e00f      	b.n	80058d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058b6:	4a0a      	ldr	r2, [pc, #40]	; (80058e0 <SysTick_Config+0x40>)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058be:	210f      	movs	r1, #15
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058c4:	f7ff ff8e 	bl	80057e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058c8:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <SysTick_Config+0x40>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058ce:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <SysTick_Config+0x40>)
 80058d0:	2207      	movs	r2, #7
 80058d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	e000e010 	.word	0xe000e010

080058e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff ff05 	bl	80056fc <__NVIC_SetPriorityGrouping>
}
 80058f2:	bf00      	nop
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b086      	sub	sp, #24
 80058fe:	af00      	add	r7, sp, #0
 8005900:	4603      	mov	r3, r0
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	607a      	str	r2, [r7, #4]
 8005906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800590c:	f7ff ff1a 	bl	8005744 <__NVIC_GetPriorityGrouping>
 8005910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	6978      	ldr	r0, [r7, #20]
 8005918:	f7ff ff8e 	bl	8005838 <NVIC_EncodePriority>
 800591c:	4602      	mov	r2, r0
 800591e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005922:	4611      	mov	r1, r2
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff ff5d 	bl	80057e4 <__NVIC_SetPriority>
}
 800592a:	bf00      	nop
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	4603      	mov	r3, r0
 800593a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800593c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff ff0d 	bl	8005760 <__NVIC_EnableIRQ>
}
 8005946:	bf00      	nop
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b082      	sub	sp, #8
 8005952:	af00      	add	r7, sp, #0
 8005954:	4603      	mov	r3, r0
 8005956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff ff1d 	bl	800579c <__NVIC_DisableIRQ>
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b082      	sub	sp, #8
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff ff94 	bl	80058a0 <SysTick_Config>
 8005978:	4603      	mov	r3, r0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005984:	b480      	push	{r7}
 8005986:	b089      	sub	sp, #36	; 0x24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800598e:	2300      	movs	r3, #0
 8005990:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005992:	2300      	movs	r3, #0
 8005994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005996:	2300      	movs	r3, #0
 8005998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800599a:	2300      	movs	r3, #0
 800599c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	e175      	b.n	8005c90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80059a4:	2201      	movs	r2, #1
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4013      	ands	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	429a      	cmp	r2, r3
 80059be:	f040 8164 	bne.w	8005c8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d005      	beq.n	80059da <HAL_GPIO_Init+0x56>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d130      	bne.n	8005a3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	2203      	movs	r2, #3
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	43db      	mvns	r3, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4013      	ands	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a10:	2201      	movs	r2, #1
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	091b      	lsrs	r3, r3, #4
 8005a26:	f003 0201 	and.w	r2, r3, #1
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d017      	beq.n	8005a78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	2203      	movs	r2, #3
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 0303 	and.w	r3, r3, #3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d123      	bne.n	8005acc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	08da      	lsrs	r2, r3, #3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3208      	adds	r2, #8
 8005a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	220f      	movs	r2, #15
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	08da      	lsrs	r2, r3, #3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3208      	adds	r2, #8
 8005ac6:	69b9      	ldr	r1, [r7, #24]
 8005ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	43db      	mvns	r3, r3
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f003 0203 	and.w	r2, r3, #3
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 80be 	beq.w	8005c8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b0e:	4b66      	ldr	r3, [pc, #408]	; (8005ca8 <HAL_GPIO_Init+0x324>)
 8005b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b12:	4a65      	ldr	r2, [pc, #404]	; (8005ca8 <HAL_GPIO_Init+0x324>)
 8005b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b18:	6453      	str	r3, [r2, #68]	; 0x44
 8005b1a:	4b63      	ldr	r3, [pc, #396]	; (8005ca8 <HAL_GPIO_Init+0x324>)
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005b26:	4a61      	ldr	r2, [pc, #388]	; (8005cac <HAL_GPIO_Init+0x328>)
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	089b      	lsrs	r3, r3, #2
 8005b2c:	3302      	adds	r3, #2
 8005b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	220f      	movs	r2, #15
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43db      	mvns	r3, r3
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	4013      	ands	r3, r2
 8005b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a58      	ldr	r2, [pc, #352]	; (8005cb0 <HAL_GPIO_Init+0x32c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d037      	beq.n	8005bc2 <HAL_GPIO_Init+0x23e>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a57      	ldr	r2, [pc, #348]	; (8005cb4 <HAL_GPIO_Init+0x330>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d031      	beq.n	8005bbe <HAL_GPIO_Init+0x23a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a56      	ldr	r2, [pc, #344]	; (8005cb8 <HAL_GPIO_Init+0x334>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d02b      	beq.n	8005bba <HAL_GPIO_Init+0x236>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a55      	ldr	r2, [pc, #340]	; (8005cbc <HAL_GPIO_Init+0x338>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d025      	beq.n	8005bb6 <HAL_GPIO_Init+0x232>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a54      	ldr	r2, [pc, #336]	; (8005cc0 <HAL_GPIO_Init+0x33c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d01f      	beq.n	8005bb2 <HAL_GPIO_Init+0x22e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a53      	ldr	r2, [pc, #332]	; (8005cc4 <HAL_GPIO_Init+0x340>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d019      	beq.n	8005bae <HAL_GPIO_Init+0x22a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a52      	ldr	r2, [pc, #328]	; (8005cc8 <HAL_GPIO_Init+0x344>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <HAL_GPIO_Init+0x226>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a51      	ldr	r2, [pc, #324]	; (8005ccc <HAL_GPIO_Init+0x348>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00d      	beq.n	8005ba6 <HAL_GPIO_Init+0x222>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a50      	ldr	r2, [pc, #320]	; (8005cd0 <HAL_GPIO_Init+0x34c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d007      	beq.n	8005ba2 <HAL_GPIO_Init+0x21e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a4f      	ldr	r2, [pc, #316]	; (8005cd4 <HAL_GPIO_Init+0x350>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d101      	bne.n	8005b9e <HAL_GPIO_Init+0x21a>
 8005b9a:	2309      	movs	r3, #9
 8005b9c:	e012      	b.n	8005bc4 <HAL_GPIO_Init+0x240>
 8005b9e:	230a      	movs	r3, #10
 8005ba0:	e010      	b.n	8005bc4 <HAL_GPIO_Init+0x240>
 8005ba2:	2308      	movs	r3, #8
 8005ba4:	e00e      	b.n	8005bc4 <HAL_GPIO_Init+0x240>
 8005ba6:	2307      	movs	r3, #7
 8005ba8:	e00c      	b.n	8005bc4 <HAL_GPIO_Init+0x240>
 8005baa:	2306      	movs	r3, #6
 8005bac:	e00a      	b.n	8005bc4 <HAL_GPIO_Init+0x240>
 8005bae:	2305      	movs	r3, #5
 8005bb0:	e008      	b.n	8005bc4 <HAL_GPIO_Init+0x240>
 8005bb2:	2304      	movs	r3, #4
 8005bb4:	e006      	b.n	8005bc4 <HAL_GPIO_Init+0x240>
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e004      	b.n	8005bc4 <HAL_GPIO_Init+0x240>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e002      	b.n	8005bc4 <HAL_GPIO_Init+0x240>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <HAL_GPIO_Init+0x240>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	f002 0203 	and.w	r2, r2, #3
 8005bca:	0092      	lsls	r2, r2, #2
 8005bcc:	4093      	lsls	r3, r2
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005bd4:	4935      	ldr	r1, [pc, #212]	; (8005cac <HAL_GPIO_Init+0x328>)
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	089b      	lsrs	r3, r3, #2
 8005bda:	3302      	adds	r3, #2
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005be2:	4b3d      	ldr	r3, [pc, #244]	; (8005cd8 <HAL_GPIO_Init+0x354>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	43db      	mvns	r3, r3
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c06:	4a34      	ldr	r2, [pc, #208]	; (8005cd8 <HAL_GPIO_Init+0x354>)
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c0c:	4b32      	ldr	r3, [pc, #200]	; (8005cd8 <HAL_GPIO_Init+0x354>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	43db      	mvns	r3, r3
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c30:	4a29      	ldr	r2, [pc, #164]	; (8005cd8 <HAL_GPIO_Init+0x354>)
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c36:	4b28      	ldr	r3, [pc, #160]	; (8005cd8 <HAL_GPIO_Init+0x354>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	4013      	ands	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c5a:	4a1f      	ldr	r2, [pc, #124]	; (8005cd8 <HAL_GPIO_Init+0x354>)
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c60:	4b1d      	ldr	r3, [pc, #116]	; (8005cd8 <HAL_GPIO_Init+0x354>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c84:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <HAL_GPIO_Init+0x354>)
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	61fb      	str	r3, [r7, #28]
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	2b0f      	cmp	r3, #15
 8005c94:	f67f ae86 	bls.w	80059a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c98:	bf00      	nop
 8005c9a:	bf00      	nop
 8005c9c:	3724      	adds	r7, #36	; 0x24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	40013800 	.word	0x40013800
 8005cb0:	40020000 	.word	0x40020000
 8005cb4:	40020400 	.word	0x40020400
 8005cb8:	40020800 	.word	0x40020800
 8005cbc:	40020c00 	.word	0x40020c00
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40021400 	.word	0x40021400
 8005cc8:	40021800 	.word	0x40021800
 8005ccc:	40021c00 	.word	0x40021c00
 8005cd0:	40022000 	.word	0x40022000
 8005cd4:	40022400 	.word	0x40022400
 8005cd8:	40013c00 	.word	0x40013c00

08005cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	807b      	strh	r3, [r7, #2]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cec:	787b      	ldrb	r3, [r7, #1]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cf2:	887a      	ldrh	r2, [r7, #2]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005cf8:	e003      	b.n	8005d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005cfa:	887b      	ldrh	r3, [r7, #2]
 8005cfc:	041a      	lsls	r2, r3, #16
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	619a      	str	r2, [r3, #24]
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b085      	sub	sp, #20
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	460b      	mov	r3, r1
 8005d18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d20:	887a      	ldrh	r2, [r7, #2]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4013      	ands	r3, r2
 8005d26:	041a      	lsls	r2, r3, #16
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	43d9      	mvns	r1, r3
 8005d2c:	887b      	ldrh	r3, [r7, #2]
 8005d2e:	400b      	ands	r3, r1
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	619a      	str	r2, [r3, #24]
}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
	...

08005d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e07f      	b.n	8005e56 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d106      	bne.n	8005d70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fa ffb6 	bl	8000cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2224      	movs	r2, #36	; 0x24
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0201 	bic.w	r2, r2, #1
 8005d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005da4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d107      	bne.n	8005dbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dba:	609a      	str	r2, [r3, #8]
 8005dbc:	e006      	b.n	8005dcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005dca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d104      	bne.n	8005dde <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ddc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6859      	ldr	r1, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	4b1d      	ldr	r3, [pc, #116]	; (8005e60 <HAL_I2C_Init+0x11c>)
 8005dea:	430b      	orrs	r3, r1
 8005dec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69d9      	ldr	r1, [r3, #28]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a1a      	ldr	r2, [r3, #32]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	02008000 	.word	0x02008000

08005e64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d138      	bne.n	8005eec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e032      	b.n	8005eee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2224      	movs	r2, #36	; 0x24
 8005e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0201 	bic.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005eb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6819      	ldr	r1, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0201 	orr.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	e000      	b.n	8005eee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005eec:	2302      	movs	r3, #2
  }
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b20      	cmp	r3, #32
 8005f0e:	d139      	bne.n	8005f84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e033      	b.n	8005f86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2224      	movs	r2, #36	; 0x24
 8005f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0201 	bic.w	r2, r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	021b      	lsls	r3, r3, #8
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	e000      	b.n	8005f86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f84:	2302      	movs	r3, #2
  }
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e041      	b.n	8006028 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005fac:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f245 5255 	movw	r2, #21845	; 0x5555
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	6852      	ldr	r2, [r2, #4]
 8005fc0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6892      	ldr	r2, [r2, #8]
 8005fca:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005fcc:	f7fe fda4 	bl	8004b18 <HAL_GetTick>
 8005fd0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005fd2:	e00f      	b.n	8005ff4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005fd4:	f7fe fda0 	bl	8004b18 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b31      	cmp	r3, #49	; 0x31
 8005fe0:	d908      	bls.n	8005ff4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e019      	b.n	8006028 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e8      	bne.n	8005fd4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	429a      	cmp	r2, r3
 800600e:	d005      	beq.n	800601c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	68d2      	ldr	r2, [r2, #12]
 8006018:	611a      	str	r2, [r3, #16]
 800601a:	e004      	b.n	8006026 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006024:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006040:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006056:	2300      	movs	r3, #0
 8006058:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800605a:	4b23      	ldr	r3, [pc, #140]	; (80060e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	4a22      	ldr	r2, [pc, #136]	; (80060e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006064:	6413      	str	r3, [r2, #64]	; 0x40
 8006066:	4b20      	ldr	r3, [pc, #128]	; (80060e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800606e:	603b      	str	r3, [r7, #0]
 8006070:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006072:	4b1e      	ldr	r3, [pc, #120]	; (80060ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a1d      	ldr	r2, [pc, #116]	; (80060ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8006078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800607c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800607e:	f7fe fd4b 	bl	8004b18 <HAL_GetTick>
 8006082:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006084:	e009      	b.n	800609a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006086:	f7fe fd47 	bl	8004b18 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006094:	d901      	bls.n	800609a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e022      	b.n	80060e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800609a:	4b14      	ldr	r3, [pc, #80]	; (80060ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a6:	d1ee      	bne.n	8006086 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80060a8:	4b10      	ldr	r3, [pc, #64]	; (80060ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a0f      	ldr	r2, [pc, #60]	; (80060ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80060ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060b4:	f7fe fd30 	bl	8004b18 <HAL_GetTick>
 80060b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80060ba:	e009      	b.n	80060d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80060bc:	f7fe fd2c 	bl	8004b18 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060ca:	d901      	bls.n	80060d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e007      	b.n	80060e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80060d0:	4b06      	ldr	r3, [pc, #24]	; (80060ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060dc:	d1ee      	bne.n	80060bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40023800 	.word	0x40023800
 80060ec:	40007000 	.word	0x40007000

080060f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80060f8:	2300      	movs	r3, #0
 80060fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e291      	b.n	800662a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 8087 	beq.w	8006222 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006114:	4b96      	ldr	r3, [pc, #600]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f003 030c 	and.w	r3, r3, #12
 800611c:	2b04      	cmp	r3, #4
 800611e:	d00c      	beq.n	800613a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006120:	4b93      	ldr	r3, [pc, #588]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f003 030c 	and.w	r3, r3, #12
 8006128:	2b08      	cmp	r3, #8
 800612a:	d112      	bne.n	8006152 <HAL_RCC_OscConfig+0x62>
 800612c:	4b90      	ldr	r3, [pc, #576]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006138:	d10b      	bne.n	8006152 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800613a:	4b8d      	ldr	r3, [pc, #564]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d06c      	beq.n	8006220 <HAL_RCC_OscConfig+0x130>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d168      	bne.n	8006220 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e26b      	b.n	800662a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800615a:	d106      	bne.n	800616a <HAL_RCC_OscConfig+0x7a>
 800615c:	4b84      	ldr	r3, [pc, #528]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a83      	ldr	r2, [pc, #524]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 8006162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	e02e      	b.n	80061c8 <HAL_RCC_OscConfig+0xd8>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10c      	bne.n	800618c <HAL_RCC_OscConfig+0x9c>
 8006172:	4b7f      	ldr	r3, [pc, #508]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a7e      	ldr	r2, [pc, #504]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 8006178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	4b7c      	ldr	r3, [pc, #496]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a7b      	ldr	r2, [pc, #492]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 8006184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006188:	6013      	str	r3, [r2, #0]
 800618a:	e01d      	b.n	80061c8 <HAL_RCC_OscConfig+0xd8>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006194:	d10c      	bne.n	80061b0 <HAL_RCC_OscConfig+0xc0>
 8006196:	4b76      	ldr	r3, [pc, #472]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a75      	ldr	r2, [pc, #468]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 800619c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	4b73      	ldr	r3, [pc, #460]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a72      	ldr	r2, [pc, #456]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 80061a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	e00b      	b.n	80061c8 <HAL_RCC_OscConfig+0xd8>
 80061b0:	4b6f      	ldr	r3, [pc, #444]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a6e      	ldr	r2, [pc, #440]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 80061b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	4b6c      	ldr	r3, [pc, #432]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a6b      	ldr	r2, [pc, #428]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 80061c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d013      	beq.n	80061f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d0:	f7fe fca2 	bl	8004b18 <HAL_GetTick>
 80061d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061d8:	f7fe fc9e 	bl	8004b18 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b64      	cmp	r3, #100	; 0x64
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e21f      	b.n	800662a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ea:	4b61      	ldr	r3, [pc, #388]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0f0      	beq.n	80061d8 <HAL_RCC_OscConfig+0xe8>
 80061f6:	e014      	b.n	8006222 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f8:	f7fe fc8e 	bl	8004b18 <HAL_GetTick>
 80061fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006200:	f7fe fc8a 	bl	8004b18 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b64      	cmp	r3, #100	; 0x64
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e20b      	b.n	800662a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006212:	4b57      	ldr	r3, [pc, #348]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1f0      	bne.n	8006200 <HAL_RCC_OscConfig+0x110>
 800621e:	e000      	b.n	8006222 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d069      	beq.n	8006302 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800622e:	4b50      	ldr	r3, [pc, #320]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 030c 	and.w	r3, r3, #12
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00b      	beq.n	8006252 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800623a:	4b4d      	ldr	r3, [pc, #308]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 030c 	and.w	r3, r3, #12
 8006242:	2b08      	cmp	r3, #8
 8006244:	d11c      	bne.n	8006280 <HAL_RCC_OscConfig+0x190>
 8006246:	4b4a      	ldr	r3, [pc, #296]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d116      	bne.n	8006280 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006252:	4b47      	ldr	r3, [pc, #284]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d005      	beq.n	800626a <HAL_RCC_OscConfig+0x17a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d001      	beq.n	800626a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e1df      	b.n	800662a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800626a:	4b41      	ldr	r3, [pc, #260]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	493d      	ldr	r1, [pc, #244]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 800627a:	4313      	orrs	r3, r2
 800627c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800627e:	e040      	b.n	8006302 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d023      	beq.n	80062d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006288:	4b39      	ldr	r3, [pc, #228]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a38      	ldr	r2, [pc, #224]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 800628e:	f043 0301 	orr.w	r3, r3, #1
 8006292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006294:	f7fe fc40 	bl	8004b18 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800629c:	f7fe fc3c 	bl	8004b18 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e1bd      	b.n	800662a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ae:	4b30      	ldr	r3, [pc, #192]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0f0      	beq.n	800629c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ba:	4b2d      	ldr	r3, [pc, #180]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	4929      	ldr	r1, [pc, #164]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	600b      	str	r3, [r1, #0]
 80062ce:	e018      	b.n	8006302 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062d0:	4b27      	ldr	r3, [pc, #156]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a26      	ldr	r2, [pc, #152]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 80062d6:	f023 0301 	bic.w	r3, r3, #1
 80062da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062dc:	f7fe fc1c 	bl	8004b18 <HAL_GetTick>
 80062e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062e4:	f7fe fc18 	bl	8004b18 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e199      	b.n	800662a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062f6:	4b1e      	ldr	r3, [pc, #120]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f0      	bne.n	80062e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d038      	beq.n	8006380 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d019      	beq.n	800634a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006316:	4b16      	ldr	r3, [pc, #88]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 8006318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631a:	4a15      	ldr	r2, [pc, #84]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 800631c:	f043 0301 	orr.w	r3, r3, #1
 8006320:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006322:	f7fe fbf9 	bl	8004b18 <HAL_GetTick>
 8006326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800632a:	f7fe fbf5 	bl	8004b18 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e176      	b.n	800662a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800633c:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 800633e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f0      	beq.n	800632a <HAL_RCC_OscConfig+0x23a>
 8006348:	e01a      	b.n	8006380 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800634a:	4b09      	ldr	r3, [pc, #36]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 800634c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800634e:	4a08      	ldr	r2, [pc, #32]	; (8006370 <HAL_RCC_OscConfig+0x280>)
 8006350:	f023 0301 	bic.w	r3, r3, #1
 8006354:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006356:	f7fe fbdf 	bl	8004b18 <HAL_GetTick>
 800635a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800635c:	e00a      	b.n	8006374 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800635e:	f7fe fbdb 	bl	8004b18 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d903      	bls.n	8006374 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e15c      	b.n	800662a <HAL_RCC_OscConfig+0x53a>
 8006370:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006374:	4b91      	ldr	r3, [pc, #580]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 8006376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1ee      	bne.n	800635e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 80a4 	beq.w	80064d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800638e:	4b8b      	ldr	r3, [pc, #556]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10d      	bne.n	80063b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800639a:	4b88      	ldr	r3, [pc, #544]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	4a87      	ldr	r2, [pc, #540]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 80063a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a4:	6413      	str	r3, [r2, #64]	; 0x40
 80063a6:	4b85      	ldr	r3, [pc, #532]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ae:	60bb      	str	r3, [r7, #8]
 80063b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063b2:	2301      	movs	r3, #1
 80063b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063b6:	4b82      	ldr	r3, [pc, #520]	; (80065c0 <HAL_RCC_OscConfig+0x4d0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d118      	bne.n	80063f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80063c2:	4b7f      	ldr	r3, [pc, #508]	; (80065c0 <HAL_RCC_OscConfig+0x4d0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a7e      	ldr	r2, [pc, #504]	; (80065c0 <HAL_RCC_OscConfig+0x4d0>)
 80063c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063ce:	f7fe fba3 	bl	8004b18 <HAL_GetTick>
 80063d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063d4:	e008      	b.n	80063e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063d6:	f7fe fb9f 	bl	8004b18 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b64      	cmp	r3, #100	; 0x64
 80063e2:	d901      	bls.n	80063e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e120      	b.n	800662a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063e8:	4b75      	ldr	r3, [pc, #468]	; (80065c0 <HAL_RCC_OscConfig+0x4d0>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d0f0      	beq.n	80063d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d106      	bne.n	800640a <HAL_RCC_OscConfig+0x31a>
 80063fc:	4b6f      	ldr	r3, [pc, #444]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 80063fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006400:	4a6e      	ldr	r2, [pc, #440]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 8006402:	f043 0301 	orr.w	r3, r3, #1
 8006406:	6713      	str	r3, [r2, #112]	; 0x70
 8006408:	e02d      	b.n	8006466 <HAL_RCC_OscConfig+0x376>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10c      	bne.n	800642c <HAL_RCC_OscConfig+0x33c>
 8006412:	4b6a      	ldr	r3, [pc, #424]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 8006414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006416:	4a69      	ldr	r2, [pc, #420]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 8006418:	f023 0301 	bic.w	r3, r3, #1
 800641c:	6713      	str	r3, [r2, #112]	; 0x70
 800641e:	4b67      	ldr	r3, [pc, #412]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 8006420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006422:	4a66      	ldr	r2, [pc, #408]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 8006424:	f023 0304 	bic.w	r3, r3, #4
 8006428:	6713      	str	r3, [r2, #112]	; 0x70
 800642a:	e01c      	b.n	8006466 <HAL_RCC_OscConfig+0x376>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	2b05      	cmp	r3, #5
 8006432:	d10c      	bne.n	800644e <HAL_RCC_OscConfig+0x35e>
 8006434:	4b61      	ldr	r3, [pc, #388]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 8006436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006438:	4a60      	ldr	r2, [pc, #384]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 800643a:	f043 0304 	orr.w	r3, r3, #4
 800643e:	6713      	str	r3, [r2, #112]	; 0x70
 8006440:	4b5e      	ldr	r3, [pc, #376]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 8006442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006444:	4a5d      	ldr	r2, [pc, #372]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 8006446:	f043 0301 	orr.w	r3, r3, #1
 800644a:	6713      	str	r3, [r2, #112]	; 0x70
 800644c:	e00b      	b.n	8006466 <HAL_RCC_OscConfig+0x376>
 800644e:	4b5b      	ldr	r3, [pc, #364]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 8006450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006452:	4a5a      	ldr	r2, [pc, #360]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 8006454:	f023 0301 	bic.w	r3, r3, #1
 8006458:	6713      	str	r3, [r2, #112]	; 0x70
 800645a:	4b58      	ldr	r3, [pc, #352]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 800645c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645e:	4a57      	ldr	r2, [pc, #348]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 8006460:	f023 0304 	bic.w	r3, r3, #4
 8006464:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d015      	beq.n	800649a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800646e:	f7fe fb53 	bl	8004b18 <HAL_GetTick>
 8006472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006474:	e00a      	b.n	800648c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006476:	f7fe fb4f 	bl	8004b18 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	f241 3288 	movw	r2, #5000	; 0x1388
 8006484:	4293      	cmp	r3, r2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e0ce      	b.n	800662a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800648c:	4b4b      	ldr	r3, [pc, #300]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 800648e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0ee      	beq.n	8006476 <HAL_RCC_OscConfig+0x386>
 8006498:	e014      	b.n	80064c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800649a:	f7fe fb3d 	bl	8004b18 <HAL_GetTick>
 800649e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064a0:	e00a      	b.n	80064b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064a2:	f7fe fb39 	bl	8004b18 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d901      	bls.n	80064b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e0b8      	b.n	800662a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064b8:	4b40      	ldr	r3, [pc, #256]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 80064ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1ee      	bne.n	80064a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d105      	bne.n	80064d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ca:	4b3c      	ldr	r3, [pc, #240]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	4a3b      	ldr	r2, [pc, #236]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 80064d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 80a4 	beq.w	8006628 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064e0:	4b36      	ldr	r3, [pc, #216]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 030c 	and.w	r3, r3, #12
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d06b      	beq.n	80065c4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d149      	bne.n	8006588 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064f4:	4b31      	ldr	r3, [pc, #196]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a30      	ldr	r2, [pc, #192]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 80064fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006500:	f7fe fb0a 	bl	8004b18 <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006508:	f7fe fb06 	bl	8004b18 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e087      	b.n	800662a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800651a:	4b28      	ldr	r3, [pc, #160]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f0      	bne.n	8006508 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69da      	ldr	r2, [r3, #28]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	019b      	lsls	r3, r3, #6
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	3b01      	subs	r3, #1
 8006540:	041b      	lsls	r3, r3, #16
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	061b      	lsls	r3, r3, #24
 800654a:	4313      	orrs	r3, r2
 800654c:	4a1b      	ldr	r2, [pc, #108]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 800654e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006552:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006554:	4b19      	ldr	r3, [pc, #100]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a18      	ldr	r2, [pc, #96]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 800655a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800655e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006560:	f7fe fada 	bl	8004b18 <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006568:	f7fe fad6 	bl	8004b18 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e057      	b.n	800662a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800657a:	4b10      	ldr	r3, [pc, #64]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0f0      	beq.n	8006568 <HAL_RCC_OscConfig+0x478>
 8006586:	e04f      	b.n	8006628 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006588:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a0b      	ldr	r2, [pc, #44]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 800658e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006594:	f7fe fac0 	bl	8004b18 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800659c:	f7fe fabc 	bl	8004b18 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e03d      	b.n	800662a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ae:	4b03      	ldr	r3, [pc, #12]	; (80065bc <HAL_RCC_OscConfig+0x4cc>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f0      	bne.n	800659c <HAL_RCC_OscConfig+0x4ac>
 80065ba:	e035      	b.n	8006628 <HAL_RCC_OscConfig+0x538>
 80065bc:	40023800 	.word	0x40023800
 80065c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80065c4:	4b1b      	ldr	r3, [pc, #108]	; (8006634 <HAL_RCC_OscConfig+0x544>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d028      	beq.n	8006624 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065dc:	429a      	cmp	r2, r3
 80065de:	d121      	bne.n	8006624 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d11a      	bne.n	8006624 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065f4:	4013      	ands	r3, r2
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80065fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d111      	bne.n	8006624 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660a:	085b      	lsrs	r3, r3, #1
 800660c:	3b01      	subs	r3, #1
 800660e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006610:	429a      	cmp	r2, r3
 8006612:	d107      	bne.n	8006624 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006620:	429a      	cmp	r2, r3
 8006622:	d001      	beq.n	8006628 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e000      	b.n	800662a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	40023800 	.word	0x40023800

08006638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e0d0      	b.n	80067f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006650:	4b6a      	ldr	r3, [pc, #424]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d910      	bls.n	8006680 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800665e:	4b67      	ldr	r3, [pc, #412]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f023 020f 	bic.w	r2, r3, #15
 8006666:	4965      	ldr	r1, [pc, #404]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	4313      	orrs	r3, r2
 800666c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800666e:	4b63      	ldr	r3, [pc, #396]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 030f 	and.w	r3, r3, #15
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	429a      	cmp	r2, r3
 800667a:	d001      	beq.n	8006680 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e0b8      	b.n	80067f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d020      	beq.n	80066ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006698:	4b59      	ldr	r3, [pc, #356]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	4a58      	ldr	r2, [pc, #352]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 800669e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0308 	and.w	r3, r3, #8
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d005      	beq.n	80066bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066b0:	4b53      	ldr	r3, [pc, #332]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	4a52      	ldr	r2, [pc, #328]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 80066b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066bc:	4b50      	ldr	r3, [pc, #320]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	494d      	ldr	r1, [pc, #308]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d040      	beq.n	800675c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d107      	bne.n	80066f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066e2:	4b47      	ldr	r3, [pc, #284]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d115      	bne.n	800671a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e07f      	b.n	80067f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d107      	bne.n	800670a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066fa:	4b41      	ldr	r3, [pc, #260]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e073      	b.n	80067f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800670a:	4b3d      	ldr	r3, [pc, #244]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e06b      	b.n	80067f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800671a:	4b39      	ldr	r3, [pc, #228]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f023 0203 	bic.w	r2, r3, #3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	4936      	ldr	r1, [pc, #216]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 8006728:	4313      	orrs	r3, r2
 800672a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800672c:	f7fe f9f4 	bl	8004b18 <HAL_GetTick>
 8006730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006732:	e00a      	b.n	800674a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006734:	f7fe f9f0 	bl	8004b18 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006742:	4293      	cmp	r3, r2
 8006744:	d901      	bls.n	800674a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e053      	b.n	80067f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800674a:	4b2d      	ldr	r3, [pc, #180]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 020c 	and.w	r2, r3, #12
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	429a      	cmp	r2, r3
 800675a:	d1eb      	bne.n	8006734 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800675c:	4b27      	ldr	r3, [pc, #156]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 030f 	and.w	r3, r3, #15
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	429a      	cmp	r2, r3
 8006768:	d210      	bcs.n	800678c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800676a:	4b24      	ldr	r3, [pc, #144]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f023 020f 	bic.w	r2, r3, #15
 8006772:	4922      	ldr	r1, [pc, #136]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	4313      	orrs	r3, r2
 8006778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800677a:	4b20      	ldr	r3, [pc, #128]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d001      	beq.n	800678c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e032      	b.n	80067f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d008      	beq.n	80067aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006798:	4b19      	ldr	r3, [pc, #100]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	4916      	ldr	r1, [pc, #88]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d009      	beq.n	80067ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80067b6:	4b12      	ldr	r3, [pc, #72]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	490e      	ldr	r1, [pc, #56]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067ca:	f000 f821 	bl	8006810 <HAL_RCC_GetSysClockFreq>
 80067ce:	4602      	mov	r2, r0
 80067d0:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	091b      	lsrs	r3, r3, #4
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	490a      	ldr	r1, [pc, #40]	; (8006804 <HAL_RCC_ClockConfig+0x1cc>)
 80067dc:	5ccb      	ldrb	r3, [r1, r3]
 80067de:	fa22 f303 	lsr.w	r3, r2, r3
 80067e2:	4a09      	ldr	r2, [pc, #36]	; (8006808 <HAL_RCC_ClockConfig+0x1d0>)
 80067e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80067e6:	4b09      	ldr	r3, [pc, #36]	; (800680c <HAL_RCC_ClockConfig+0x1d4>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fe f950 	bl	8004a90 <HAL_InitTick>

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40023c00 	.word	0x40023c00
 8006800:	40023800 	.word	0x40023800
 8006804:	08008cbc 	.word	0x08008cbc
 8006808:	2000015c 	.word	0x2000015c
 800680c:	20000160 	.word	0x20000160

08006810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006814:	b090      	sub	sp, #64	; 0x40
 8006816:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006818:	2300      	movs	r3, #0
 800681a:	637b      	str	r3, [r7, #52]	; 0x34
 800681c:	2300      	movs	r3, #0
 800681e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006820:	2300      	movs	r3, #0
 8006822:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006828:	4b59      	ldr	r3, [pc, #356]	; (8006990 <HAL_RCC_GetSysClockFreq+0x180>)
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f003 030c 	and.w	r3, r3, #12
 8006830:	2b08      	cmp	r3, #8
 8006832:	d00d      	beq.n	8006850 <HAL_RCC_GetSysClockFreq+0x40>
 8006834:	2b08      	cmp	r3, #8
 8006836:	f200 80a1 	bhi.w	800697c <HAL_RCC_GetSysClockFreq+0x16c>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <HAL_RCC_GetSysClockFreq+0x34>
 800683e:	2b04      	cmp	r3, #4
 8006840:	d003      	beq.n	800684a <HAL_RCC_GetSysClockFreq+0x3a>
 8006842:	e09b      	b.n	800697c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006844:	4b53      	ldr	r3, [pc, #332]	; (8006994 <HAL_RCC_GetSysClockFreq+0x184>)
 8006846:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006848:	e09b      	b.n	8006982 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800684a:	4b53      	ldr	r3, [pc, #332]	; (8006998 <HAL_RCC_GetSysClockFreq+0x188>)
 800684c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800684e:	e098      	b.n	8006982 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006850:	4b4f      	ldr	r3, [pc, #316]	; (8006990 <HAL_RCC_GetSysClockFreq+0x180>)
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006858:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800685a:	4b4d      	ldr	r3, [pc, #308]	; (8006990 <HAL_RCC_GetSysClockFreq+0x180>)
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d028      	beq.n	80068b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006866:	4b4a      	ldr	r3, [pc, #296]	; (8006990 <HAL_RCC_GetSysClockFreq+0x180>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	099b      	lsrs	r3, r3, #6
 800686c:	2200      	movs	r2, #0
 800686e:	623b      	str	r3, [r7, #32]
 8006870:	627a      	str	r2, [r7, #36]	; 0x24
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006878:	2100      	movs	r1, #0
 800687a:	4b47      	ldr	r3, [pc, #284]	; (8006998 <HAL_RCC_GetSysClockFreq+0x188>)
 800687c:	fb03 f201 	mul.w	r2, r3, r1
 8006880:	2300      	movs	r3, #0
 8006882:	fb00 f303 	mul.w	r3, r0, r3
 8006886:	4413      	add	r3, r2
 8006888:	4a43      	ldr	r2, [pc, #268]	; (8006998 <HAL_RCC_GetSysClockFreq+0x188>)
 800688a:	fba0 1202 	umull	r1, r2, r0, r2
 800688e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006890:	460a      	mov	r2, r1
 8006892:	62ba      	str	r2, [r7, #40]	; 0x28
 8006894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006896:	4413      	add	r3, r2
 8006898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800689a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689c:	2200      	movs	r2, #0
 800689e:	61bb      	str	r3, [r7, #24]
 80068a0:	61fa      	str	r2, [r7, #28]
 80068a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80068aa:	f7f9 fcad 	bl	8000208 <__aeabi_uldivmod>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4613      	mov	r3, r2
 80068b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b6:	e053      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068b8:	4b35      	ldr	r3, [pc, #212]	; (8006990 <HAL_RCC_GetSysClockFreq+0x180>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	099b      	lsrs	r3, r3, #6
 80068be:	2200      	movs	r2, #0
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	617a      	str	r2, [r7, #20]
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80068ca:	f04f 0b00 	mov.w	fp, #0
 80068ce:	4652      	mov	r2, sl
 80068d0:	465b      	mov	r3, fp
 80068d2:	f04f 0000 	mov.w	r0, #0
 80068d6:	f04f 0100 	mov.w	r1, #0
 80068da:	0159      	lsls	r1, r3, #5
 80068dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068e0:	0150      	lsls	r0, r2, #5
 80068e2:	4602      	mov	r2, r0
 80068e4:	460b      	mov	r3, r1
 80068e6:	ebb2 080a 	subs.w	r8, r2, sl
 80068ea:	eb63 090b 	sbc.w	r9, r3, fp
 80068ee:	f04f 0200 	mov.w	r2, #0
 80068f2:	f04f 0300 	mov.w	r3, #0
 80068f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80068fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80068fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006902:	ebb2 0408 	subs.w	r4, r2, r8
 8006906:	eb63 0509 	sbc.w	r5, r3, r9
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	f04f 0300 	mov.w	r3, #0
 8006912:	00eb      	lsls	r3, r5, #3
 8006914:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006918:	00e2      	lsls	r2, r4, #3
 800691a:	4614      	mov	r4, r2
 800691c:	461d      	mov	r5, r3
 800691e:	eb14 030a 	adds.w	r3, r4, sl
 8006922:	603b      	str	r3, [r7, #0]
 8006924:	eb45 030b 	adc.w	r3, r5, fp
 8006928:	607b      	str	r3, [r7, #4]
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	f04f 0300 	mov.w	r3, #0
 8006932:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006936:	4629      	mov	r1, r5
 8006938:	028b      	lsls	r3, r1, #10
 800693a:	4621      	mov	r1, r4
 800693c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006940:	4621      	mov	r1, r4
 8006942:	028a      	lsls	r2, r1, #10
 8006944:	4610      	mov	r0, r2
 8006946:	4619      	mov	r1, r3
 8006948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694a:	2200      	movs	r2, #0
 800694c:	60bb      	str	r3, [r7, #8]
 800694e:	60fa      	str	r2, [r7, #12]
 8006950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006954:	f7f9 fc58 	bl	8000208 <__aeabi_uldivmod>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	4613      	mov	r3, r2
 800695e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006960:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <HAL_RCC_GetSysClockFreq+0x180>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	0c1b      	lsrs	r3, r3, #16
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	3301      	adds	r3, #1
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8006970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	fbb2 f3f3 	udiv	r3, r2, r3
 8006978:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800697a:	e002      	b.n	8006982 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800697c:	4b05      	ldr	r3, [pc, #20]	; (8006994 <HAL_RCC_GetSysClockFreq+0x184>)
 800697e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006984:	4618      	mov	r0, r3
 8006986:	3740      	adds	r7, #64	; 0x40
 8006988:	46bd      	mov	sp, r7
 800698a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800698e:	bf00      	nop
 8006990:	40023800 	.word	0x40023800
 8006994:	00f42400 	.word	0x00f42400
 8006998:	00b71b00 	.word	0x00b71b00

0800699c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d012      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069c4:	4b69      	ldr	r3, [pc, #420]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	4a68      	ldr	r2, [pc, #416]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80069ce:	6093      	str	r3, [r2, #8]
 80069d0:	4b66      	ldr	r3, [pc, #408]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d8:	4964      	ldr	r1, [pc, #400]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80069e6:	2301      	movs	r3, #1
 80069e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d017      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069f6:	4b5d      	ldr	r3, [pc, #372]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a04:	4959      	ldr	r1, [pc, #356]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a14:	d101      	bne.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006a16:	2301      	movs	r3, #1
 8006a18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006a22:	2301      	movs	r3, #1
 8006a24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d017      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a32:	4b4e      	ldr	r3, [pc, #312]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a40:	494a      	ldr	r1, [pc, #296]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a50:	d101      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006a52:	2301      	movs	r3, #1
 8006a54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0320 	and.w	r3, r3, #32
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 808b 	beq.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a80:	4b3a      	ldr	r3, [pc, #232]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a84:	4a39      	ldr	r2, [pc, #228]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8006a8c:	4b37      	ldr	r3, [pc, #220]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a94:	60bb      	str	r3, [r7, #8]
 8006a96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a98:	4b35      	ldr	r3, [pc, #212]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a34      	ldr	r2, [pc, #208]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aa4:	f7fe f838 	bl	8004b18 <HAL_GetTick>
 8006aa8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006aaa:	e008      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aac:	f7fe f834 	bl	8004b18 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b64      	cmp	r3, #100	; 0x64
 8006ab8:	d901      	bls.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e357      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006abe:	4b2c      	ldr	r3, [pc, #176]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f0      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006aca:	4b28      	ldr	r3, [pc, #160]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ad2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d035      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d02e      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ae8:	4b20      	ldr	r3, [pc, #128]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006af2:	4b1e      	ldr	r3, [pc, #120]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af6:	4a1d      	ldr	r2, [pc, #116]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006afc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006afe:	4b1b      	ldr	r3, [pc, #108]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	4a1a      	ldr	r2, [pc, #104]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006b0a:	4a18      	ldr	r2, [pc, #96]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b10:	4b16      	ldr	r3, [pc, #88]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d114      	bne.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1c:	f7fd fffc 	bl	8004b18 <HAL_GetTick>
 8006b20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b22:	e00a      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b24:	f7fd fff8 	bl	8004b18 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d901      	bls.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e319      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b3a:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0ee      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b52:	d111      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006b54:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b60:	4b04      	ldr	r3, [pc, #16]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b62:	400b      	ands	r3, r1
 8006b64:	4901      	ldr	r1, [pc, #4]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	608b      	str	r3, [r1, #8]
 8006b6a:	e00b      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	40007000 	.word	0x40007000
 8006b74:	0ffffcff 	.word	0x0ffffcff
 8006b78:	4baa      	ldr	r3, [pc, #680]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	4aa9      	ldr	r2, [pc, #676]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006b82:	6093      	str	r3, [r2, #8]
 8006b84:	4ba7      	ldr	r3, [pc, #668]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b90:	49a4      	ldr	r1, [pc, #656]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0310 	and.w	r3, r3, #16
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d010      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ba2:	4ba0      	ldr	r3, [pc, #640]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ba8:	4a9e      	ldr	r2, [pc, #632]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006bb2:	4b9c      	ldr	r3, [pc, #624]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bb4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbc:	4999      	ldr	r1, [pc, #612]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bd0:	4b94      	ldr	r3, [pc, #592]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bde:	4991      	ldr	r1, [pc, #580]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bf2:	4b8c      	ldr	r3, [pc, #560]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c00:	4988      	ldr	r1, [pc, #544]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00a      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c14:	4b83      	ldr	r3, [pc, #524]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c22:	4980      	ldr	r1, [pc, #512]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00a      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c36:	4b7b      	ldr	r3, [pc, #492]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c44:	4977      	ldr	r1, [pc, #476]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00a      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c58:	4b72      	ldr	r3, [pc, #456]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5e:	f023 0203 	bic.w	r2, r3, #3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c66:	496f      	ldr	r1, [pc, #444]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c7a:	4b6a      	ldr	r3, [pc, #424]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c80:	f023 020c 	bic.w	r2, r3, #12
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c88:	4966      	ldr	r1, [pc, #408]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00a      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c9c:	4b61      	ldr	r3, [pc, #388]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006caa:	495e      	ldr	r1, [pc, #376]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006cbe:	4b59      	ldr	r3, [pc, #356]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ccc:	4955      	ldr	r1, [pc, #340]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00a      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ce0:	4b50      	ldr	r3, [pc, #320]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cee:	494d      	ldr	r1, [pc, #308]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006d02:	4b48      	ldr	r3, [pc, #288]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d08:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d10:	4944      	ldr	r1, [pc, #272]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00a      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006d24:	4b3f      	ldr	r3, [pc, #252]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d32:	493c      	ldr	r1, [pc, #240]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00a      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006d46:	4b37      	ldr	r3, [pc, #220]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d54:	4933      	ldr	r1, [pc, #204]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00a      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d68:	4b2e      	ldr	r3, [pc, #184]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d76:	492b      	ldr	r1, [pc, #172]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d011      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006d8a:	4b26      	ldr	r3, [pc, #152]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d90:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d98:	4922      	ldr	r1, [pc, #136]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006da8:	d101      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006daa:	2301      	movs	r3, #1
 8006dac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0308 	and.w	r3, r3, #8
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00a      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006dca:	4b16      	ldr	r3, [pc, #88]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd8:	4912      	ldr	r1, [pc, #72]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00b      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006dec:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dfc:	4909      	ldr	r1, [pc, #36]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d006      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 80d9 	beq.w	8006fca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e18:	4b02      	ldr	r3, [pc, #8]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a01      	ldr	r2, [pc, #4]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e22:	e001      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006e24:	40023800 	.word	0x40023800
 8006e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e2a:	f7fd fe75 	bl	8004b18 <HAL_GetTick>
 8006e2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e30:	e008      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e32:	f7fd fe71 	bl	8004b18 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	2b64      	cmp	r3, #100	; 0x64
 8006e3e:	d901      	bls.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e194      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e44:	4b6c      	ldr	r3, [pc, #432]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1f0      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d021      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d11d      	bne.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006e64:	4b64      	ldr	r3, [pc, #400]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e6a:	0c1b      	lsrs	r3, r3, #16
 8006e6c:	f003 0303 	and.w	r3, r3, #3
 8006e70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e72:	4b61      	ldr	r3, [pc, #388]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e78:	0e1b      	lsrs	r3, r3, #24
 8006e7a:	f003 030f 	and.w	r3, r3, #15
 8006e7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	019a      	lsls	r2, r3, #6
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	041b      	lsls	r3, r3, #16
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	061b      	lsls	r3, r3, #24
 8006e90:	431a      	orrs	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	071b      	lsls	r3, r3, #28
 8006e98:	4957      	ldr	r1, [pc, #348]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d004      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eb4:	d00a      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d02e      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006eca:	d129      	bne.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006ecc:	4b4a      	ldr	r3, [pc, #296]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed2:	0c1b      	lsrs	r3, r3, #16
 8006ed4:	f003 0303 	and.w	r3, r3, #3
 8006ed8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006eda:	4b47      	ldr	r3, [pc, #284]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee0:	0f1b      	lsrs	r3, r3, #28
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	019a      	lsls	r2, r3, #6
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	041b      	lsls	r3, r3, #16
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	061b      	lsls	r3, r3, #24
 8006efa:	431a      	orrs	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	071b      	lsls	r3, r3, #28
 8006f00:	493d      	ldr	r1, [pc, #244]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f08:	4b3b      	ldr	r3, [pc, #236]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f0e:	f023 021f 	bic.w	r2, r3, #31
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	3b01      	subs	r3, #1
 8006f18:	4937      	ldr	r1, [pc, #220]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d01d      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f2c:	4b32      	ldr	r3, [pc, #200]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f32:	0e1b      	lsrs	r3, r3, #24
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f3a:	4b2f      	ldr	r3, [pc, #188]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f40:	0f1b      	lsrs	r3, r3, #28
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	019a      	lsls	r2, r3, #6
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	041b      	lsls	r3, r3, #16
 8006f54:	431a      	orrs	r2, r3
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	061b      	lsls	r3, r3, #24
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	071b      	lsls	r3, r3, #28
 8006f60:	4925      	ldr	r1, [pc, #148]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d011      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	019a      	lsls	r2, r3, #6
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	041b      	lsls	r3, r3, #16
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	061b      	lsls	r3, r3, #24
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	071b      	lsls	r3, r3, #28
 8006f90:	4919      	ldr	r1, [pc, #100]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f98:	4b17      	ldr	r3, [pc, #92]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a16      	ldr	r2, [pc, #88]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fa4:	f7fd fdb8 	bl	8004b18 <HAL_GetTick>
 8006fa8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006faa:	e008      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006fac:	f7fd fdb4 	bl	8004b18 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b64      	cmp	r3, #100	; 0x64
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e0d7      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fbe:	4b0e      	ldr	r3, [pc, #56]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0f0      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	f040 80cd 	bne.w	800716c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006fd2:	4b09      	ldr	r3, [pc, #36]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a08      	ldr	r2, [pc, #32]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fde:	f7fd fd9b 	bl	8004b18 <HAL_GetTick>
 8006fe2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fe4:	e00a      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006fe6:	f7fd fd97 	bl	8004b18 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b64      	cmp	r3, #100	; 0x64
 8006ff2:	d903      	bls.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e0ba      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006ff8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ffc:	4b5e      	ldr	r3, [pc, #376]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007008:	d0ed      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d009      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007026:	2b00      	cmp	r3, #0
 8007028:	d02e      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702e:	2b00      	cmp	r3, #0
 8007030:	d12a      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007032:	4b51      	ldr	r3, [pc, #324]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007038:	0c1b      	lsrs	r3, r3, #16
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007040:	4b4d      	ldr	r3, [pc, #308]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007046:	0f1b      	lsrs	r3, r3, #28
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	019a      	lsls	r2, r3, #6
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	041b      	lsls	r3, r3, #16
 8007058:	431a      	orrs	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	061b      	lsls	r3, r3, #24
 8007060:	431a      	orrs	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	071b      	lsls	r3, r3, #28
 8007066:	4944      	ldr	r1, [pc, #272]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007068:	4313      	orrs	r3, r2
 800706a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800706e:	4b42      	ldr	r3, [pc, #264]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007074:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707c:	3b01      	subs	r3, #1
 800707e:	021b      	lsls	r3, r3, #8
 8007080:	493d      	ldr	r1, [pc, #244]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007082:	4313      	orrs	r3, r2
 8007084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d022      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800709c:	d11d      	bne.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800709e:	4b36      	ldr	r3, [pc, #216]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a4:	0e1b      	lsrs	r3, r3, #24
 80070a6:	f003 030f 	and.w	r3, r3, #15
 80070aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070ac:	4b32      	ldr	r3, [pc, #200]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b2:	0f1b      	lsrs	r3, r3, #28
 80070b4:	f003 0307 	and.w	r3, r3, #7
 80070b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	019a      	lsls	r2, r3, #6
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	041b      	lsls	r3, r3, #16
 80070c6:	431a      	orrs	r2, r3
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	061b      	lsls	r3, r3, #24
 80070cc:	431a      	orrs	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	071b      	lsls	r3, r3, #28
 80070d2:	4929      	ldr	r1, [pc, #164]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d028      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070e6:	4b24      	ldr	r3, [pc, #144]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ec:	0e1b      	lsrs	r3, r3, #24
 80070ee:	f003 030f 	and.w	r3, r3, #15
 80070f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80070f4:	4b20      	ldr	r3, [pc, #128]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070fa:	0c1b      	lsrs	r3, r3, #16
 80070fc:	f003 0303 	and.w	r3, r3, #3
 8007100:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	019a      	lsls	r2, r3, #6
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	041b      	lsls	r3, r3, #16
 800710c:	431a      	orrs	r2, r3
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	061b      	lsls	r3, r3, #24
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	071b      	lsls	r3, r3, #28
 800711a:	4917      	ldr	r1, [pc, #92]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800711c:	4313      	orrs	r3, r2
 800711e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007122:	4b15      	ldr	r3, [pc, #84]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007128:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007130:	4911      	ldr	r1, [pc, #68]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007132:	4313      	orrs	r3, r2
 8007134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007138:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a0e      	ldr	r2, [pc, #56]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800713e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007144:	f7fd fce8 	bl	8004b18 <HAL_GetTick>
 8007148:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800714a:	e008      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800714c:	f7fd fce4 	bl	8004b18 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b64      	cmp	r3, #100	; 0x64
 8007158:	d901      	bls.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e007      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800715e:	4b06      	ldr	r3, [pc, #24]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800716a:	d1ef      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3720      	adds	r7, #32
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	40023800 	.word	0x40023800

0800717c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e09d      	b.n	80072ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	2b00      	cmp	r3, #0
 8007194:	d108      	bne.n	80071a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800719e:	d009      	beq.n	80071b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	61da      	str	r2, [r3, #28]
 80071a6:	e005      	b.n	80071b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d106      	bne.n	80071d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7fd f842 	bl	8004258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071f4:	d902      	bls.n	80071fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80071f6:	2300      	movs	r3, #0
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	e002      	b.n	8007202 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80071fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007200:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800720a:	d007      	beq.n	800721c <HAL_SPI_Init+0xa0>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007214:	d002      	beq.n	800721c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800722c:	431a      	orrs	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	431a      	orrs	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	431a      	orrs	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800724a:	431a      	orrs	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007254:	431a      	orrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800725e:	ea42 0103 	orr.w	r1, r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007266:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	0c1b      	lsrs	r3, r3, #16
 8007278:	f003 0204 	and.w	r2, r3, #4
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	f003 0310 	and.w	r3, r3, #16
 8007284:	431a      	orrs	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728a:	f003 0308 	and.w	r3, r3, #8
 800728e:	431a      	orrs	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007298:	ea42 0103 	orr.w	r1, r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69da      	ldr	r2, [r3, #28]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b08a      	sub	sp, #40	; 0x28
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	607a      	str	r2, [r7, #4]
 80072de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072e0:	2301      	movs	r3, #1
 80072e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_SPI_TransmitReceive+0x26>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e1fb      	b.n	80076f0 <HAL_SPI_TransmitReceive+0x41e>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007300:	f7fd fc0a 	bl	8004b18 <HAL_GetTick>
 8007304:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800730c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007314:	887b      	ldrh	r3, [r7, #2]
 8007316:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007318:	887b      	ldrh	r3, [r7, #2]
 800731a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800731c:	7efb      	ldrb	r3, [r7, #27]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d00e      	beq.n	8007340 <HAL_SPI_TransmitReceive+0x6e>
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007328:	d106      	bne.n	8007338 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d102      	bne.n	8007338 <HAL_SPI_TransmitReceive+0x66>
 8007332:	7efb      	ldrb	r3, [r7, #27]
 8007334:	2b04      	cmp	r3, #4
 8007336:	d003      	beq.n	8007340 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007338:	2302      	movs	r3, #2
 800733a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800733e:	e1cd      	b.n	80076dc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d005      	beq.n	8007352 <HAL_SPI_TransmitReceive+0x80>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <HAL_SPI_TransmitReceive+0x80>
 800734c:	887b      	ldrh	r3, [r7, #2]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d103      	bne.n	800735a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007358:	e1c0      	b.n	80076dc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b04      	cmp	r3, #4
 8007364:	d003      	beq.n	800736e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2205      	movs	r2, #5
 800736a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	887a      	ldrh	r2, [r7, #2]
 800737e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	887a      	ldrh	r2, [r7, #2]
 8007386:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	887a      	ldrh	r2, [r7, #2]
 8007394:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	887a      	ldrh	r2, [r7, #2]
 800739a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073b0:	d802      	bhi.n	80073b8 <HAL_SPI_TransmitReceive+0xe6>
 80073b2:	8a3b      	ldrh	r3, [r7, #16]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d908      	bls.n	80073ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073c6:	605a      	str	r2, [r3, #4]
 80073c8:	e007      	b.n	80073da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e4:	2b40      	cmp	r3, #64	; 0x40
 80073e6:	d007      	beq.n	80073f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007400:	d97c      	bls.n	80074fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <HAL_SPI_TransmitReceive+0x13e>
 800740a:	8a7b      	ldrh	r3, [r7, #18]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d169      	bne.n	80074e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007414:	881a      	ldrh	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	1c9a      	adds	r2, r3, #2
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800742a:	b29b      	uxth	r3, r3
 800742c:	3b01      	subs	r3, #1
 800742e:	b29a      	uxth	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007434:	e056      	b.n	80074e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b02      	cmp	r3, #2
 8007442:	d11b      	bne.n	800747c <HAL_SPI_TransmitReceive+0x1aa>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007448:	b29b      	uxth	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d016      	beq.n	800747c <HAL_SPI_TransmitReceive+0x1aa>
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	2b01      	cmp	r3, #1
 8007452:	d113      	bne.n	800747c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	881a      	ldrh	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007464:	1c9a      	adds	r2, r3, #2
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800746e:	b29b      	uxth	r3, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b01      	cmp	r3, #1
 8007488:	d11c      	bne.n	80074c4 <HAL_SPI_TransmitReceive+0x1f2>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007490:	b29b      	uxth	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d016      	beq.n	80074c4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68da      	ldr	r2, [r3, #12]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a0:	b292      	uxth	r2, r2
 80074a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	1c9a      	adds	r2, r3, #2
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	3b01      	subs	r3, #1
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074c0:	2301      	movs	r3, #1
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074c4:	f7fd fb28 	bl	8004b18 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d807      	bhi.n	80074e4 <HAL_SPI_TransmitReceive+0x212>
 80074d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074da:	d003      	beq.n	80074e4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80074e2:	e0fb      	b.n	80076dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1a3      	bne.n	8007436 <HAL_SPI_TransmitReceive+0x164>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d19d      	bne.n	8007436 <HAL_SPI_TransmitReceive+0x164>
 80074fa:	e0df      	b.n	80076bc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <HAL_SPI_TransmitReceive+0x23a>
 8007504:	8a7b      	ldrh	r3, [r7, #18]
 8007506:	2b01      	cmp	r3, #1
 8007508:	f040 80cb 	bne.w	80076a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b01      	cmp	r3, #1
 8007514:	d912      	bls.n	800753c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751a:	881a      	ldrh	r2, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007526:	1c9a      	adds	r2, r3, #2
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b02      	subs	r3, #2
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	87da      	strh	r2, [r3, #62]	; 0x3e
 800753a:	e0b2      	b.n	80076a2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	330c      	adds	r3, #12
 8007546:	7812      	ldrb	r2, [r2, #0]
 8007548:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007558:	b29b      	uxth	r3, r3
 800755a:	3b01      	subs	r3, #1
 800755c:	b29a      	uxth	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007562:	e09e      	b.n	80076a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	2b02      	cmp	r3, #2
 8007570:	d134      	bne.n	80075dc <HAL_SPI_TransmitReceive+0x30a>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007576:	b29b      	uxth	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d02f      	beq.n	80075dc <HAL_SPI_TransmitReceive+0x30a>
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	2b01      	cmp	r3, #1
 8007580:	d12c      	bne.n	80075dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007586:	b29b      	uxth	r3, r3
 8007588:	2b01      	cmp	r3, #1
 800758a:	d912      	bls.n	80075b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	881a      	ldrh	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759c:	1c9a      	adds	r2, r3, #2
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	3b02      	subs	r3, #2
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075b0:	e012      	b.n	80075d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	330c      	adds	r3, #12
 80075bc:	7812      	ldrb	r2, [r2, #0]
 80075be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	3b01      	subs	r3, #1
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d148      	bne.n	800767c <HAL_SPI_TransmitReceive+0x3aa>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d042      	beq.n	800767c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d923      	bls.n	800764a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68da      	ldr	r2, [r3, #12]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760c:	b292      	uxth	r2, r2
 800760e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007614:	1c9a      	adds	r2, r3, #2
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b02      	subs	r3, #2
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007632:	b29b      	uxth	r3, r3
 8007634:	2b01      	cmp	r3, #1
 8007636:	d81f      	bhi.n	8007678 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007646:	605a      	str	r2, [r3, #4]
 8007648:	e016      	b.n	8007678 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f103 020c 	add.w	r2, r3, #12
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	7812      	ldrb	r2, [r2, #0]
 8007658:	b2d2      	uxtb	r2, r2
 800765a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b01      	subs	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007678:	2301      	movs	r3, #1
 800767a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800767c:	f7fd fa4c 	bl	8004b18 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007688:	429a      	cmp	r2, r3
 800768a:	d803      	bhi.n	8007694 <HAL_SPI_TransmitReceive+0x3c2>
 800768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007692:	d102      	bne.n	800769a <HAL_SPI_TransmitReceive+0x3c8>
 8007694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007696:	2b00      	cmp	r3, #0
 8007698:	d103      	bne.n	80076a2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80076a0:	e01c      	b.n	80076dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f47f af5b 	bne.w	8007564 <HAL_SPI_TransmitReceive+0x292>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f47f af54 	bne.w	8007564 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076bc:	69fa      	ldr	r2, [r7, #28]
 80076be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 f937 	bl	8007934 <SPI_EndRxTxTransaction>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d006      	beq.n	80076da <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2220      	movs	r2, #32
 80076d6:	661a      	str	r2, [r3, #96]	; 0x60
 80076d8:	e000      	b.n	80076dc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80076da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80076ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3728      	adds	r7, #40	; 0x28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	4613      	mov	r3, r2
 8007706:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007708:	f7fd fa06 	bl	8004b18 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007710:	1a9b      	subs	r3, r3, r2
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	4413      	add	r3, r2
 8007716:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007718:	f7fd f9fe 	bl	8004b18 <HAL_GetTick>
 800771c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800771e:	4b39      	ldr	r3, [pc, #228]	; (8007804 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	015b      	lsls	r3, r3, #5
 8007724:	0d1b      	lsrs	r3, r3, #20
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	fb02 f303 	mul.w	r3, r2, r3
 800772c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800772e:	e054      	b.n	80077da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007736:	d050      	beq.n	80077da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007738:	f7fd f9ee 	bl	8004b18 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	69fa      	ldr	r2, [r7, #28]
 8007744:	429a      	cmp	r2, r3
 8007746:	d902      	bls.n	800774e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d13d      	bne.n	80077ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800775c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007766:	d111      	bne.n	800778c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007770:	d004      	beq.n	800777c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800777a:	d107      	bne.n	800778c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800778a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007794:	d10f      	bne.n	80077b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e017      	b.n	80077fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4013      	ands	r3, r2
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	bf0c      	ite	eq
 80077ea:	2301      	moveq	r3, #1
 80077ec:	2300      	movne	r3, #0
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	79fb      	ldrb	r3, [r7, #7]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d19b      	bne.n	8007730 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3720      	adds	r7, #32
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	2000015c 	.word	0x2000015c

08007808 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b08a      	sub	sp, #40	; 0x28
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007816:	2300      	movs	r3, #0
 8007818:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800781a:	f7fd f97d 	bl	8004b18 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	1a9b      	subs	r3, r3, r2
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	4413      	add	r3, r2
 8007828:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800782a:	f7fd f975 	bl	8004b18 <HAL_GetTick>
 800782e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	330c      	adds	r3, #12
 8007836:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007838:	4b3d      	ldr	r3, [pc, #244]	; (8007930 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	00da      	lsls	r2, r3, #3
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	0d1b      	lsrs	r3, r3, #20
 8007848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800784a:	fb02 f303 	mul.w	r3, r2, r3
 800784e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007850:	e060      	b.n	8007914 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007858:	d107      	bne.n	800786a <SPI_WaitFifoStateUntilTimeout+0x62>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d104      	bne.n	800786a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007868:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007870:	d050      	beq.n	8007914 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007872:	f7fd f951 	bl	8004b18 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787e:	429a      	cmp	r2, r3
 8007880:	d902      	bls.n	8007888 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	2b00      	cmp	r3, #0
 8007886:	d13d      	bne.n	8007904 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685a      	ldr	r2, [r3, #4]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007896:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078a0:	d111      	bne.n	80078c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078aa:	d004      	beq.n	80078b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078b4:	d107      	bne.n	80078c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ce:	d10f      	bne.n	80078f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e010      	b.n	8007926 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	3b01      	subs	r3, #1
 8007912:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689a      	ldr	r2, [r3, #8]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	4013      	ands	r3, r2
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	429a      	cmp	r2, r3
 8007922:	d196      	bne.n	8007852 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3728      	adds	r7, #40	; 0x28
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	2000015c 	.word	0x2000015c

08007934 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b088      	sub	sp, #32
 8007938:	af02      	add	r7, sp, #8
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2200      	movs	r2, #0
 8007948:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f7ff ff5b 	bl	8007808 <SPI_WaitFifoStateUntilTimeout>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d007      	beq.n	8007968 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800795c:	f043 0220 	orr.w	r2, r3, #32
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e046      	b.n	80079f6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007968:	4b25      	ldr	r3, [pc, #148]	; (8007a00 <SPI_EndRxTxTransaction+0xcc>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a25      	ldr	r2, [pc, #148]	; (8007a04 <SPI_EndRxTxTransaction+0xd0>)
 800796e:	fba2 2303 	umull	r2, r3, r2, r3
 8007972:	0d5b      	lsrs	r3, r3, #21
 8007974:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007978:	fb02 f303 	mul.w	r3, r2, r3
 800797c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007986:	d112      	bne.n	80079ae <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2200      	movs	r2, #0
 8007990:	2180      	movs	r1, #128	; 0x80
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f7ff feb0 	bl	80076f8 <SPI_WaitFlagStateUntilTimeout>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d016      	beq.n	80079cc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079a2:	f043 0220 	orr.w	r2, r3, #32
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e023      	b.n	80079f6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c4:	2b80      	cmp	r3, #128	; 0x80
 80079c6:	d0f2      	beq.n	80079ae <SPI_EndRxTxTransaction+0x7a>
 80079c8:	e000      	b.n	80079cc <SPI_EndRxTxTransaction+0x98>
        break;
 80079ca:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f7ff ff15 	bl	8007808 <SPI_WaitFifoStateUntilTimeout>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d007      	beq.n	80079f4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079e8:	f043 0220 	orr.w	r2, r3, #32
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e000      	b.n	80079f6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	2000015c 	.word	0x2000015c
 8007a04:	165e9f81 	.word	0x165e9f81

08007a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e054      	b.n	8007ac4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d111      	bne.n	8007a4a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fdf2 	bl	8008618 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d102      	bne.n	8007a42 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a23      	ldr	r2, [pc, #140]	; (8007acc <HAL_TIM_Base_Init+0xc4>)
 8007a40:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	f000 fca1 	bl	80083a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	080047d5 	.word	0x080047d5

08007ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d001      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e054      	b.n	8007b92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0201 	orr.w	r2, r2, #1
 8007afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a26      	ldr	r2, [pc, #152]	; (8007ba0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d022      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b12:	d01d      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a22      	ldr	r2, [pc, #136]	; (8007ba4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d018      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a21      	ldr	r2, [pc, #132]	; (8007ba8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d013      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a1f      	ldr	r2, [pc, #124]	; (8007bac <HAL_TIM_Base_Start_IT+0xdc>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d00e      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a1e      	ldr	r2, [pc, #120]	; (8007bb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d009      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a1c      	ldr	r2, [pc, #112]	; (8007bb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d004      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x80>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a1b      	ldr	r2, [pc, #108]	; (8007bb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d115      	bne.n	8007b7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689a      	ldr	r2, [r3, #8]
 8007b56:	4b19      	ldr	r3, [pc, #100]	; (8007bbc <HAL_TIM_Base_Start_IT+0xec>)
 8007b58:	4013      	ands	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2b06      	cmp	r3, #6
 8007b60:	d015      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0xbe>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b68:	d011      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f042 0201 	orr.w	r2, r2, #1
 8007b78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b7a:	e008      	b.n	8007b8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0201 	orr.w	r2, r2, #1
 8007b8a:	601a      	str	r2, [r3, #0]
 8007b8c:	e000      	b.n	8007b90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	40010000 	.word	0x40010000
 8007ba4:	40000400 	.word	0x40000400
 8007ba8:	40000800 	.word	0x40000800
 8007bac:	40000c00 	.word	0x40000c00
 8007bb0:	40010400 	.word	0x40010400
 8007bb4:	40014000 	.word	0x40014000
 8007bb8:	40001800 	.word	0x40001800
 8007bbc:	00010007 	.word	0x00010007

08007bc0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0201 	bic.w	r2, r2, #1
 8007bd6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6a1a      	ldr	r2, [r3, #32]
 8007bde:	f241 1311 	movw	r3, #4369	; 0x1111
 8007be2:	4013      	ands	r3, r2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10f      	bne.n	8007c08 <HAL_TIM_Base_Stop_IT+0x48>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6a1a      	ldr	r2, [r3, #32]
 8007bee:	f240 4344 	movw	r3, #1092	; 0x444
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d107      	bne.n	8007c08 <HAL_TIM_Base_Stop_IT+0x48>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 0201 	bic.w	r2, r2, #1
 8007c06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	f003 0302 	and.w	r3, r3, #2
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d128      	bne.n	8007c86 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d121      	bne.n	8007c86 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f06f 0202 	mvn.w	r2, #2
 8007c4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f003 0303 	and.w	r3, r3, #3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d005      	beq.n	8007c6c <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	4798      	blx	r3
 8007c6a:	e009      	b.n	8007c80 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b04      	cmp	r3, #4
 8007c92:	d128      	bne.n	8007ce6 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	f003 0304 	and.w	r3, r3, #4
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d121      	bne.n	8007ce6 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f06f 0204 	mvn.w	r2, #4
 8007caa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	4798      	blx	r3
 8007cca:	e009      	b.n	8007ce0 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	f003 0308 	and.w	r3, r3, #8
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d128      	bne.n	8007d46 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	f003 0308 	and.w	r3, r3, #8
 8007cfe:	2b08      	cmp	r3, #8
 8007d00:	d121      	bne.n	8007d46 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f06f 0208 	mvn.w	r2, #8
 8007d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2204      	movs	r2, #4
 8007d10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	69db      	ldr	r3, [r3, #28]
 8007d18:	f003 0303 	and.w	r3, r3, #3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d005      	beq.n	8007d2c <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	4798      	blx	r3
 8007d2a:	e009      	b.n	8007d40 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	2b10      	cmp	r3, #16
 8007d52:	d128      	bne.n	8007da6 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f003 0310 	and.w	r3, r3, #16
 8007d5e:	2b10      	cmp	r3, #16
 8007d60:	d121      	bne.n	8007da6 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f06f 0210 	mvn.w	r2, #16
 8007d6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2208      	movs	r2, #8
 8007d70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	69db      	ldr	r3, [r3, #28]
 8007d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d005      	beq.n	8007d8c <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	4798      	blx	r3
 8007d8a:	e009      	b.n	8007da0 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d110      	bne.n	8007dd6 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d109      	bne.n	8007dd6 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f06f 0201 	mvn.w	r2, #1
 8007dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de0:	2b80      	cmp	r3, #128	; 0x80
 8007de2:	d110      	bne.n	8007e06 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dee:	2b80      	cmp	r3, #128	; 0x80
 8007df0:	d109      	bne.n	8007e06 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e14:	d110      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e20:	2b80      	cmp	r3, #128	; 0x80
 8007e22:	d109      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e42:	2b40      	cmp	r3, #64	; 0x40
 8007e44:	d110      	bne.n	8007e68 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e50:	2b40      	cmp	r3, #64	; 0x40
 8007e52:	d109      	bne.n	8007e68 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	f003 0320 	and.w	r3, r3, #32
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	d110      	bne.n	8007e98 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f003 0320 	and.w	r3, r3, #32
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	d109      	bne.n	8007e98 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f06f 0220 	mvn.w	r2, #32
 8007e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e98:	bf00      	nop
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d101      	bne.n	8007ebc <HAL_TIM_ConfigClockSource+0x1c>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e0b4      	b.n	8008026 <HAL_TIM_ConfigClockSource+0x186>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	4b56      	ldr	r3, [pc, #344]	; (8008030 <HAL_TIM_ConfigClockSource+0x190>)
 8007ed8:	4013      	ands	r3, r2
 8007eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ef4:	d03e      	beq.n	8007f74 <HAL_TIM_ConfigClockSource+0xd4>
 8007ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007efa:	f200 8087 	bhi.w	800800c <HAL_TIM_ConfigClockSource+0x16c>
 8007efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f02:	f000 8086 	beq.w	8008012 <HAL_TIM_ConfigClockSource+0x172>
 8007f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f0a:	d87f      	bhi.n	800800c <HAL_TIM_ConfigClockSource+0x16c>
 8007f0c:	2b70      	cmp	r3, #112	; 0x70
 8007f0e:	d01a      	beq.n	8007f46 <HAL_TIM_ConfigClockSource+0xa6>
 8007f10:	2b70      	cmp	r3, #112	; 0x70
 8007f12:	d87b      	bhi.n	800800c <HAL_TIM_ConfigClockSource+0x16c>
 8007f14:	2b60      	cmp	r3, #96	; 0x60
 8007f16:	d050      	beq.n	8007fba <HAL_TIM_ConfigClockSource+0x11a>
 8007f18:	2b60      	cmp	r3, #96	; 0x60
 8007f1a:	d877      	bhi.n	800800c <HAL_TIM_ConfigClockSource+0x16c>
 8007f1c:	2b50      	cmp	r3, #80	; 0x50
 8007f1e:	d03c      	beq.n	8007f9a <HAL_TIM_ConfigClockSource+0xfa>
 8007f20:	2b50      	cmp	r3, #80	; 0x50
 8007f22:	d873      	bhi.n	800800c <HAL_TIM_ConfigClockSource+0x16c>
 8007f24:	2b40      	cmp	r3, #64	; 0x40
 8007f26:	d058      	beq.n	8007fda <HAL_TIM_ConfigClockSource+0x13a>
 8007f28:	2b40      	cmp	r3, #64	; 0x40
 8007f2a:	d86f      	bhi.n	800800c <HAL_TIM_ConfigClockSource+0x16c>
 8007f2c:	2b30      	cmp	r3, #48	; 0x30
 8007f2e:	d064      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0x15a>
 8007f30:	2b30      	cmp	r3, #48	; 0x30
 8007f32:	d86b      	bhi.n	800800c <HAL_TIM_ConfigClockSource+0x16c>
 8007f34:	2b20      	cmp	r3, #32
 8007f36:	d060      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0x15a>
 8007f38:	2b20      	cmp	r3, #32
 8007f3a:	d867      	bhi.n	800800c <HAL_TIM_ConfigClockSource+0x16c>
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d05c      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0x15a>
 8007f40:	2b10      	cmp	r3, #16
 8007f42:	d05a      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0x15a>
 8007f44:	e062      	b.n	800800c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f56:	f000 fb3f 	bl	80085d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	609a      	str	r2, [r3, #8]
      break;
 8007f72:	e04f      	b.n	8008014 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f84:	f000 fb28 	bl	80085d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f96:	609a      	str	r2, [r3, #8]
      break;
 8007f98:	e03c      	b.n	8008014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	f000 fa9c 	bl	80084e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2150      	movs	r1, #80	; 0x50
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 faf5 	bl	80085a2 <TIM_ITRx_SetConfig>
      break;
 8007fb8:	e02c      	b.n	8008014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f000 fabb 	bl	8008542 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2160      	movs	r1, #96	; 0x60
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fae5 	bl	80085a2 <TIM_ITRx_SetConfig>
      break;
 8007fd8:	e01c      	b.n	8008014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f000 fa7c 	bl	80084e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2140      	movs	r1, #64	; 0x40
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 fad5 	bl	80085a2 <TIM_ITRx_SetConfig>
      break;
 8007ff8:	e00c      	b.n	8008014 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4619      	mov	r1, r3
 8008004:	4610      	mov	r0, r2
 8008006:	f000 facc 	bl	80085a2 <TIM_ITRx_SetConfig>
      break;
 800800a:	e003      	b.n	8008014 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	73fb      	strb	r3, [r7, #15]
      break;
 8008010:	e000      	b.n	8008014 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008024:	7bfb      	ldrb	r3, [r7, #15]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	fffeff88 	.word	0xfffeff88

08008034 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	460b      	mov	r3, r1
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e13e      	b.n	8008396 <HAL_TIM_RegisterCallback+0x29a>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800811e:	2b01      	cmp	r3, #1
 8008120:	d101      	bne.n	8008126 <HAL_TIM_RegisterCallback+0x2a>
 8008122:	2302      	movs	r3, #2
 8008124:	e137      	b.n	8008396 <HAL_TIM_RegisterCallback+0x29a>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b01      	cmp	r3, #1
 8008138:	f040 80c2 	bne.w	80082c0 <HAL_TIM_RegisterCallback+0x1c4>
  {
    switch (CallbackID)
 800813c:	7afb      	ldrb	r3, [r7, #11]
 800813e:	2b1b      	cmp	r3, #27
 8008140:	f200 80bb 	bhi.w	80082ba <HAL_TIM_RegisterCallback+0x1be>
 8008144:	a201      	add	r2, pc, #4	; (adr r2, 800814c <HAL_TIM_RegisterCallback+0x50>)
 8008146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814a:	bf00      	nop
 800814c:	080081bd 	.word	0x080081bd
 8008150:	080081c5 	.word	0x080081c5
 8008154:	080081cd 	.word	0x080081cd
 8008158:	080081d5 	.word	0x080081d5
 800815c:	080081dd 	.word	0x080081dd
 8008160:	080081e5 	.word	0x080081e5
 8008164:	080081ed 	.word	0x080081ed
 8008168:	080081f5 	.word	0x080081f5
 800816c:	080081fd 	.word	0x080081fd
 8008170:	08008205 	.word	0x08008205
 8008174:	0800820d 	.word	0x0800820d
 8008178:	08008215 	.word	0x08008215
 800817c:	0800821d 	.word	0x0800821d
 8008180:	08008225 	.word	0x08008225
 8008184:	0800822f 	.word	0x0800822f
 8008188:	08008239 	.word	0x08008239
 800818c:	08008243 	.word	0x08008243
 8008190:	0800824d 	.word	0x0800824d
 8008194:	08008257 	.word	0x08008257
 8008198:	08008261 	.word	0x08008261
 800819c:	0800826b 	.word	0x0800826b
 80081a0:	08008275 	.word	0x08008275
 80081a4:	0800827f 	.word	0x0800827f
 80081a8:	08008289 	.word	0x08008289
 80081ac:	08008293 	.word	0x08008293
 80081b0:	0800829d 	.word	0x0800829d
 80081b4:	080082a7 	.word	0x080082a7
 80081b8:	080082b1 	.word	0x080082b1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80081c2:	e0e3      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80081ca:	e0df      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80081d2:	e0db      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80081da:	e0d7      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80081e2:	e0d3      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80081ea:	e0cf      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80081f2:	e0cb      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80081fa:	e0c7      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008202:	e0c3      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800820a:	e0bf      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008212:	e0bb      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800821a:	e0b7      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008222:	e0b3      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800822c:	e0ae      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8008236:	e0a9      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8008240:	e0a4      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800824a:	e09f      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8008254:	e09a      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800825e:	e095      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8008268:	e090      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8008272:	e08b      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800827c:	e086      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8008286:	e081      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8008290:	e07c      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800829a:	e077      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80082a4:	e072      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 80082ae:	e06d      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 80082b8:	e068      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	75fb      	strb	r3, [r7, #23]
        break;
 80082be:	e065      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d15d      	bne.n	8008388 <HAL_TIM_RegisterCallback+0x28c>
  {
    switch (CallbackID)
 80082cc:	7afb      	ldrb	r3, [r7, #11]
 80082ce:	2b0d      	cmp	r3, #13
 80082d0:	d857      	bhi.n	8008382 <HAL_TIM_RegisterCallback+0x286>
 80082d2:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <HAL_TIM_RegisterCallback+0x1dc>)
 80082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d8:	08008311 	.word	0x08008311
 80082dc:	08008319 	.word	0x08008319
 80082e0:	08008321 	.word	0x08008321
 80082e4:	08008329 	.word	0x08008329
 80082e8:	08008331 	.word	0x08008331
 80082ec:	08008339 	.word	0x08008339
 80082f0:	08008341 	.word	0x08008341
 80082f4:	08008349 	.word	0x08008349
 80082f8:	08008351 	.word	0x08008351
 80082fc:	08008359 	.word	0x08008359
 8008300:	08008361 	.word	0x08008361
 8008304:	08008369 	.word	0x08008369
 8008308:	08008371 	.word	0x08008371
 800830c:	08008379 	.word	0x08008379
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008316:	e039      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800831e:	e035      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008326:	e031      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800832e:	e02d      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008336:	e029      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800833e:	e025      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008346:	e021      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800834e:	e01d      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008356:	e019      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800835e:	e015      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008366:	e011      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800836e:	e00d      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008376:	e009      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8008380:	e004      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	75fb      	strb	r3, [r7, #23]
        break;
 8008386:	e001      	b.n	800838c <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008394:	7dfb      	ldrb	r3, [r7, #23]
}
 8008396:	4618      	mov	r0, r3
 8008398:	371c      	adds	r7, #28
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop

080083a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a40      	ldr	r2, [pc, #256]	; (80084b8 <TIM_Base_SetConfig+0x114>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d013      	beq.n	80083e4 <TIM_Base_SetConfig+0x40>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c2:	d00f      	beq.n	80083e4 <TIM_Base_SetConfig+0x40>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a3d      	ldr	r2, [pc, #244]	; (80084bc <TIM_Base_SetConfig+0x118>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d00b      	beq.n	80083e4 <TIM_Base_SetConfig+0x40>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a3c      	ldr	r2, [pc, #240]	; (80084c0 <TIM_Base_SetConfig+0x11c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d007      	beq.n	80083e4 <TIM_Base_SetConfig+0x40>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a3b      	ldr	r2, [pc, #236]	; (80084c4 <TIM_Base_SetConfig+0x120>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d003      	beq.n	80083e4 <TIM_Base_SetConfig+0x40>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a3a      	ldr	r2, [pc, #232]	; (80084c8 <TIM_Base_SetConfig+0x124>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d108      	bne.n	80083f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a2f      	ldr	r2, [pc, #188]	; (80084b8 <TIM_Base_SetConfig+0x114>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d02b      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008404:	d027      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a2c      	ldr	r2, [pc, #176]	; (80084bc <TIM_Base_SetConfig+0x118>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d023      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a2b      	ldr	r2, [pc, #172]	; (80084c0 <TIM_Base_SetConfig+0x11c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d01f      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a2a      	ldr	r2, [pc, #168]	; (80084c4 <TIM_Base_SetConfig+0x120>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d01b      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a29      	ldr	r2, [pc, #164]	; (80084c8 <TIM_Base_SetConfig+0x124>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d017      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a28      	ldr	r2, [pc, #160]	; (80084cc <TIM_Base_SetConfig+0x128>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d013      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a27      	ldr	r2, [pc, #156]	; (80084d0 <TIM_Base_SetConfig+0x12c>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d00f      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a26      	ldr	r2, [pc, #152]	; (80084d4 <TIM_Base_SetConfig+0x130>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00b      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a25      	ldr	r2, [pc, #148]	; (80084d8 <TIM_Base_SetConfig+0x134>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d007      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a24      	ldr	r2, [pc, #144]	; (80084dc <TIM_Base_SetConfig+0x138>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d003      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a23      	ldr	r2, [pc, #140]	; (80084e0 <TIM_Base_SetConfig+0x13c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d108      	bne.n	8008468 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800845c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4313      	orrs	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	4313      	orrs	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a0a      	ldr	r2, [pc, #40]	; (80084b8 <TIM_Base_SetConfig+0x114>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d003      	beq.n	800849c <TIM_Base_SetConfig+0xf8>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a0c      	ldr	r2, [pc, #48]	; (80084c8 <TIM_Base_SetConfig+0x124>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d103      	bne.n	80084a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	691a      	ldr	r2, [r3, #16]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	615a      	str	r2, [r3, #20]
}
 80084aa:	bf00      	nop
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	40010000 	.word	0x40010000
 80084bc:	40000400 	.word	0x40000400
 80084c0:	40000800 	.word	0x40000800
 80084c4:	40000c00 	.word	0x40000c00
 80084c8:	40010400 	.word	0x40010400
 80084cc:	40014000 	.word	0x40014000
 80084d0:	40014400 	.word	0x40014400
 80084d4:	40014800 	.word	0x40014800
 80084d8:	40001800 	.word	0x40001800
 80084dc:	40001c00 	.word	0x40001c00
 80084e0:	40002000 	.word	0x40002000

080084e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	f023 0201 	bic.w	r2, r3, #1
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800850e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	011b      	lsls	r3, r3, #4
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	4313      	orrs	r3, r2
 8008518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f023 030a 	bic.w	r3, r3, #10
 8008520:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	4313      	orrs	r3, r2
 8008528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	621a      	str	r2, [r3, #32]
}
 8008536:	bf00      	nop
 8008538:	371c      	adds	r7, #28
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008542:	b480      	push	{r7}
 8008544:	b087      	sub	sp, #28
 8008546:	af00      	add	r7, sp, #0
 8008548:	60f8      	str	r0, [r7, #12]
 800854a:	60b9      	str	r1, [r7, #8]
 800854c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	f023 0210 	bic.w	r2, r3, #16
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800856c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	031b      	lsls	r3, r3, #12
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	4313      	orrs	r3, r2
 8008576:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800857e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	011b      	lsls	r3, r3, #4
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	4313      	orrs	r3, r2
 8008588:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	621a      	str	r2, [r3, #32]
}
 8008596:	bf00      	nop
 8008598:	371c      	adds	r7, #28
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b085      	sub	sp, #20
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4313      	orrs	r3, r2
 80085c0:	f043 0307 	orr.w	r3, r3, #7
 80085c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	609a      	str	r2, [r3, #8]
}
 80085cc:	bf00      	nop
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085d8:	b480      	push	{r7}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	021a      	lsls	r2, r3, #8
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	431a      	orrs	r2, r3
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4313      	orrs	r3, r2
 8008600:	697a      	ldr	r2, [r7, #20]
 8008602:	4313      	orrs	r3, r2
 8008604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	609a      	str	r2, [r3, #8]
}
 800860c:	bf00      	nop
 800860e:	371c      	adds	r7, #28
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a1e      	ldr	r2, [pc, #120]	; (800869c <TIM_ResetCallback+0x84>)
 8008624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a1d      	ldr	r2, [pc, #116]	; (80086a0 <TIM_ResetCallback+0x88>)
 800862c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a1c      	ldr	r2, [pc, #112]	; (80086a4 <TIM_ResetCallback+0x8c>)
 8008634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a1b      	ldr	r2, [pc, #108]	; (80086a8 <TIM_ResetCallback+0x90>)
 800863c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a1a      	ldr	r2, [pc, #104]	; (80086ac <TIM_ResetCallback+0x94>)
 8008644:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a19      	ldr	r2, [pc, #100]	; (80086b0 <TIM_ResetCallback+0x98>)
 800864c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a18      	ldr	r2, [pc, #96]	; (80086b4 <TIM_ResetCallback+0x9c>)
 8008654:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a17      	ldr	r2, [pc, #92]	; (80086b8 <TIM_ResetCallback+0xa0>)
 800865c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a16      	ldr	r2, [pc, #88]	; (80086bc <TIM_ResetCallback+0xa4>)
 8008664:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a15      	ldr	r2, [pc, #84]	; (80086c0 <TIM_ResetCallback+0xa8>)
 800866c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a14      	ldr	r2, [pc, #80]	; (80086c4 <TIM_ResetCallback+0xac>)
 8008674:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a13      	ldr	r2, [pc, #76]	; (80086c8 <TIM_ResetCallback+0xb0>)
 800867c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a12      	ldr	r2, [pc, #72]	; (80086cc <TIM_ResetCallback+0xb4>)
 8008684:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a11      	ldr	r2, [pc, #68]	; (80086d0 <TIM_ResetCallback+0xb8>)
 800868c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	08008035 	.word	0x08008035
 80086a0:	08008049 	.word	0x08008049
 80086a4:	080080c1 	.word	0x080080c1
 80086a8:	080080d5 	.word	0x080080d5
 80086ac:	08008071 	.word	0x08008071
 80086b0:	08008085 	.word	0x08008085
 80086b4:	0800805d 	.word	0x0800805d
 80086b8:	08008099 	.word	0x08008099
 80086bc:	080080ad 	.word	0x080080ad
 80086c0:	080080e9 	.word	0x080080e9
 80086c4:	080087f1 	.word	0x080087f1
 80086c8:	08008805 	.word	0x08008805
 80086cc:	08008819 	.word	0x08008819
 80086d0:	0800882d 	.word	0x0800882d

080086d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d101      	bne.n	80086ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086e8:	2302      	movs	r3, #2
 80086ea:	e06d      	b.n	80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a30      	ldr	r2, [pc, #192]	; (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d004      	beq.n	8008720 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a2f      	ldr	r2, [pc, #188]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d108      	bne.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008726:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008738:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	4313      	orrs	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a20      	ldr	r2, [pc, #128]	; (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d022      	beq.n	800879c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800875e:	d01d      	beq.n	800879c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a1d      	ldr	r2, [pc, #116]	; (80087dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d018      	beq.n	800879c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a1c      	ldr	r2, [pc, #112]	; (80087e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d013      	beq.n	800879c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a1a      	ldr	r2, [pc, #104]	; (80087e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d00e      	beq.n	800879c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a15      	ldr	r2, [pc, #84]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d009      	beq.n	800879c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a16      	ldr	r2, [pc, #88]	; (80087e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d004      	beq.n	800879c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a15      	ldr	r2, [pc, #84]	; (80087ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d10c      	bne.n	80087b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr
 80087d4:	40010000 	.word	0x40010000
 80087d8:	40010400 	.word	0x40010400
 80087dc:	40000400 	.word	0x40000400
 80087e0:	40000800 	.word	0x40000800
 80087e4:	40000c00 	.word	0x40000c00
 80087e8:	40014000 	.word	0x40014000
 80087ec:	40001800 	.word	0x40001800

080087f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <_ZdlPvj>:
 8008840:	f000 b811 	b.w	8008866 <_ZdlPv>

08008844 <_Znwj>:
 8008844:	2801      	cmp	r0, #1
 8008846:	bf38      	it	cc
 8008848:	2001      	movcc	r0, #1
 800884a:	b510      	push	{r4, lr}
 800884c:	4604      	mov	r4, r0
 800884e:	4620      	mov	r0, r4
 8008850:	f000 f81c 	bl	800888c <malloc>
 8008854:	b100      	cbz	r0, 8008858 <_Znwj+0x14>
 8008856:	bd10      	pop	{r4, pc}
 8008858:	f000 f808 	bl	800886c <_ZSt15get_new_handlerv>
 800885c:	b908      	cbnz	r0, 8008862 <_Znwj+0x1e>
 800885e:	f000 f80d 	bl	800887c <abort>
 8008862:	4780      	blx	r0
 8008864:	e7f3      	b.n	800884e <_Znwj+0xa>

08008866 <_ZdlPv>:
 8008866:	f000 b819 	b.w	800889c <free>
	...

0800886c <_ZSt15get_new_handlerv>:
 800886c:	4b02      	ldr	r3, [pc, #8]	; (8008878 <_ZSt15get_new_handlerv+0xc>)
 800886e:	6818      	ldr	r0, [r3, #0]
 8008870:	f3bf 8f5b 	dmb	ish
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	2000040c 	.word	0x2000040c

0800887c <abort>:
 800887c:	b508      	push	{r3, lr}
 800887e:	2006      	movs	r0, #6
 8008880:	f000 f8f0 	bl	8008a64 <raise>
 8008884:	2001      	movs	r0, #1
 8008886:	f7fb fda5 	bl	80043d4 <_exit>
	...

0800888c <malloc>:
 800888c:	4b02      	ldr	r3, [pc, #8]	; (8008898 <malloc+0xc>)
 800888e:	4601      	mov	r1, r0
 8008890:	6818      	ldr	r0, [r3, #0]
 8008892:	f000 b82b 	b.w	80088ec <_malloc_r>
 8008896:	bf00      	nop
 8008898:	200001b4 	.word	0x200001b4

0800889c <free>:
 800889c:	4b02      	ldr	r3, [pc, #8]	; (80088a8 <free+0xc>)
 800889e:	4601      	mov	r1, r0
 80088a0:	6818      	ldr	r0, [r3, #0]
 80088a2:	f000 b945 	b.w	8008b30 <_free_r>
 80088a6:	bf00      	nop
 80088a8:	200001b4 	.word	0x200001b4

080088ac <sbrk_aligned>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	4e0e      	ldr	r6, [pc, #56]	; (80088e8 <sbrk_aligned+0x3c>)
 80088b0:	460c      	mov	r4, r1
 80088b2:	6831      	ldr	r1, [r6, #0]
 80088b4:	4605      	mov	r5, r0
 80088b6:	b911      	cbnz	r1, 80088be <sbrk_aligned+0x12>
 80088b8:	f000 f8f0 	bl	8008a9c <_sbrk_r>
 80088bc:	6030      	str	r0, [r6, #0]
 80088be:	4621      	mov	r1, r4
 80088c0:	4628      	mov	r0, r5
 80088c2:	f000 f8eb 	bl	8008a9c <_sbrk_r>
 80088c6:	1c43      	adds	r3, r0, #1
 80088c8:	d00a      	beq.n	80088e0 <sbrk_aligned+0x34>
 80088ca:	1cc4      	adds	r4, r0, #3
 80088cc:	f024 0403 	bic.w	r4, r4, #3
 80088d0:	42a0      	cmp	r0, r4
 80088d2:	d007      	beq.n	80088e4 <sbrk_aligned+0x38>
 80088d4:	1a21      	subs	r1, r4, r0
 80088d6:	4628      	mov	r0, r5
 80088d8:	f000 f8e0 	bl	8008a9c <_sbrk_r>
 80088dc:	3001      	adds	r0, #1
 80088de:	d101      	bne.n	80088e4 <sbrk_aligned+0x38>
 80088e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80088e4:	4620      	mov	r0, r4
 80088e6:	bd70      	pop	{r4, r5, r6, pc}
 80088e8:	20000414 	.word	0x20000414

080088ec <_malloc_r>:
 80088ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f0:	1ccd      	adds	r5, r1, #3
 80088f2:	f025 0503 	bic.w	r5, r5, #3
 80088f6:	3508      	adds	r5, #8
 80088f8:	2d0c      	cmp	r5, #12
 80088fa:	bf38      	it	cc
 80088fc:	250c      	movcc	r5, #12
 80088fe:	2d00      	cmp	r5, #0
 8008900:	4607      	mov	r7, r0
 8008902:	db01      	blt.n	8008908 <_malloc_r+0x1c>
 8008904:	42a9      	cmp	r1, r5
 8008906:	d905      	bls.n	8008914 <_malloc_r+0x28>
 8008908:	230c      	movs	r3, #12
 800890a:	603b      	str	r3, [r7, #0]
 800890c:	2600      	movs	r6, #0
 800890e:	4630      	mov	r0, r6
 8008910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008914:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80089e8 <_malloc_r+0xfc>
 8008918:	f000 f868 	bl	80089ec <__malloc_lock>
 800891c:	f8d8 3000 	ldr.w	r3, [r8]
 8008920:	461c      	mov	r4, r3
 8008922:	bb5c      	cbnz	r4, 800897c <_malloc_r+0x90>
 8008924:	4629      	mov	r1, r5
 8008926:	4638      	mov	r0, r7
 8008928:	f7ff ffc0 	bl	80088ac <sbrk_aligned>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	4604      	mov	r4, r0
 8008930:	d155      	bne.n	80089de <_malloc_r+0xf2>
 8008932:	f8d8 4000 	ldr.w	r4, [r8]
 8008936:	4626      	mov	r6, r4
 8008938:	2e00      	cmp	r6, #0
 800893a:	d145      	bne.n	80089c8 <_malloc_r+0xdc>
 800893c:	2c00      	cmp	r4, #0
 800893e:	d048      	beq.n	80089d2 <_malloc_r+0xe6>
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	4631      	mov	r1, r6
 8008944:	4638      	mov	r0, r7
 8008946:	eb04 0903 	add.w	r9, r4, r3
 800894a:	f000 f8a7 	bl	8008a9c <_sbrk_r>
 800894e:	4581      	cmp	r9, r0
 8008950:	d13f      	bne.n	80089d2 <_malloc_r+0xe6>
 8008952:	6821      	ldr	r1, [r4, #0]
 8008954:	1a6d      	subs	r5, r5, r1
 8008956:	4629      	mov	r1, r5
 8008958:	4638      	mov	r0, r7
 800895a:	f7ff ffa7 	bl	80088ac <sbrk_aligned>
 800895e:	3001      	adds	r0, #1
 8008960:	d037      	beq.n	80089d2 <_malloc_r+0xe6>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	442b      	add	r3, r5
 8008966:	6023      	str	r3, [r4, #0]
 8008968:	f8d8 3000 	ldr.w	r3, [r8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d038      	beq.n	80089e2 <_malloc_r+0xf6>
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	42a2      	cmp	r2, r4
 8008974:	d12b      	bne.n	80089ce <_malloc_r+0xe2>
 8008976:	2200      	movs	r2, #0
 8008978:	605a      	str	r2, [r3, #4]
 800897a:	e00f      	b.n	800899c <_malloc_r+0xb0>
 800897c:	6822      	ldr	r2, [r4, #0]
 800897e:	1b52      	subs	r2, r2, r5
 8008980:	d41f      	bmi.n	80089c2 <_malloc_r+0xd6>
 8008982:	2a0b      	cmp	r2, #11
 8008984:	d917      	bls.n	80089b6 <_malloc_r+0xca>
 8008986:	1961      	adds	r1, r4, r5
 8008988:	42a3      	cmp	r3, r4
 800898a:	6025      	str	r5, [r4, #0]
 800898c:	bf18      	it	ne
 800898e:	6059      	strne	r1, [r3, #4]
 8008990:	6863      	ldr	r3, [r4, #4]
 8008992:	bf08      	it	eq
 8008994:	f8c8 1000 	streq.w	r1, [r8]
 8008998:	5162      	str	r2, [r4, r5]
 800899a:	604b      	str	r3, [r1, #4]
 800899c:	4638      	mov	r0, r7
 800899e:	f104 060b 	add.w	r6, r4, #11
 80089a2:	f000 f829 	bl	80089f8 <__malloc_unlock>
 80089a6:	f026 0607 	bic.w	r6, r6, #7
 80089aa:	1d23      	adds	r3, r4, #4
 80089ac:	1af2      	subs	r2, r6, r3
 80089ae:	d0ae      	beq.n	800890e <_malloc_r+0x22>
 80089b0:	1b9b      	subs	r3, r3, r6
 80089b2:	50a3      	str	r3, [r4, r2]
 80089b4:	e7ab      	b.n	800890e <_malloc_r+0x22>
 80089b6:	42a3      	cmp	r3, r4
 80089b8:	6862      	ldr	r2, [r4, #4]
 80089ba:	d1dd      	bne.n	8008978 <_malloc_r+0x8c>
 80089bc:	f8c8 2000 	str.w	r2, [r8]
 80089c0:	e7ec      	b.n	800899c <_malloc_r+0xb0>
 80089c2:	4623      	mov	r3, r4
 80089c4:	6864      	ldr	r4, [r4, #4]
 80089c6:	e7ac      	b.n	8008922 <_malloc_r+0x36>
 80089c8:	4634      	mov	r4, r6
 80089ca:	6876      	ldr	r6, [r6, #4]
 80089cc:	e7b4      	b.n	8008938 <_malloc_r+0x4c>
 80089ce:	4613      	mov	r3, r2
 80089d0:	e7cc      	b.n	800896c <_malloc_r+0x80>
 80089d2:	230c      	movs	r3, #12
 80089d4:	603b      	str	r3, [r7, #0]
 80089d6:	4638      	mov	r0, r7
 80089d8:	f000 f80e 	bl	80089f8 <__malloc_unlock>
 80089dc:	e797      	b.n	800890e <_malloc_r+0x22>
 80089de:	6025      	str	r5, [r4, #0]
 80089e0:	e7dc      	b.n	800899c <_malloc_r+0xb0>
 80089e2:	605b      	str	r3, [r3, #4]
 80089e4:	deff      	udf	#255	; 0xff
 80089e6:	bf00      	nop
 80089e8:	20000410 	.word	0x20000410

080089ec <__malloc_lock>:
 80089ec:	4801      	ldr	r0, [pc, #4]	; (80089f4 <__malloc_lock+0x8>)
 80089ee:	f000 b88f 	b.w	8008b10 <__retarget_lock_acquire_recursive>
 80089f2:	bf00      	nop
 80089f4:	20000554 	.word	0x20000554

080089f8 <__malloc_unlock>:
 80089f8:	4801      	ldr	r0, [pc, #4]	; (8008a00 <__malloc_unlock+0x8>)
 80089fa:	f000 b88a 	b.w	8008b12 <__retarget_lock_release_recursive>
 80089fe:	bf00      	nop
 8008a00:	20000554 	.word	0x20000554

08008a04 <memset>:
 8008a04:	4402      	add	r2, r0
 8008a06:	4603      	mov	r3, r0
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d100      	bne.n	8008a0e <memset+0xa>
 8008a0c:	4770      	bx	lr
 8008a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a12:	e7f9      	b.n	8008a08 <memset+0x4>

08008a14 <_raise_r>:
 8008a14:	291f      	cmp	r1, #31
 8008a16:	b538      	push	{r3, r4, r5, lr}
 8008a18:	4604      	mov	r4, r0
 8008a1a:	460d      	mov	r5, r1
 8008a1c:	d904      	bls.n	8008a28 <_raise_r+0x14>
 8008a1e:	2316      	movs	r3, #22
 8008a20:	6003      	str	r3, [r0, #0]
 8008a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a26:	bd38      	pop	{r3, r4, r5, pc}
 8008a28:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008a2a:	b112      	cbz	r2, 8008a32 <_raise_r+0x1e>
 8008a2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a30:	b94b      	cbnz	r3, 8008a46 <_raise_r+0x32>
 8008a32:	4620      	mov	r0, r4
 8008a34:	f000 f830 	bl	8008a98 <_getpid_r>
 8008a38:	462a      	mov	r2, r5
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a42:	f000 b817 	b.w	8008a74 <_kill_r>
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d00a      	beq.n	8008a60 <_raise_r+0x4c>
 8008a4a:	1c59      	adds	r1, r3, #1
 8008a4c:	d103      	bne.n	8008a56 <_raise_r+0x42>
 8008a4e:	2316      	movs	r3, #22
 8008a50:	6003      	str	r3, [r0, #0]
 8008a52:	2001      	movs	r0, #1
 8008a54:	e7e7      	b.n	8008a26 <_raise_r+0x12>
 8008a56:	2400      	movs	r4, #0
 8008a58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	4798      	blx	r3
 8008a60:	2000      	movs	r0, #0
 8008a62:	e7e0      	b.n	8008a26 <_raise_r+0x12>

08008a64 <raise>:
 8008a64:	4b02      	ldr	r3, [pc, #8]	; (8008a70 <raise+0xc>)
 8008a66:	4601      	mov	r1, r0
 8008a68:	6818      	ldr	r0, [r3, #0]
 8008a6a:	f7ff bfd3 	b.w	8008a14 <_raise_r>
 8008a6e:	bf00      	nop
 8008a70:	200001b4 	.word	0x200001b4

08008a74 <_kill_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4d07      	ldr	r5, [pc, #28]	; (8008a94 <_kill_r+0x20>)
 8008a78:	2300      	movs	r3, #0
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	4608      	mov	r0, r1
 8008a7e:	4611      	mov	r1, r2
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	f7fb fc97 	bl	80043b4 <_kill>
 8008a86:	1c43      	adds	r3, r0, #1
 8008a88:	d102      	bne.n	8008a90 <_kill_r+0x1c>
 8008a8a:	682b      	ldr	r3, [r5, #0]
 8008a8c:	b103      	cbz	r3, 8008a90 <_kill_r+0x1c>
 8008a8e:	6023      	str	r3, [r4, #0]
 8008a90:	bd38      	pop	{r3, r4, r5, pc}
 8008a92:	bf00      	nop
 8008a94:	20000550 	.word	0x20000550

08008a98 <_getpid_r>:
 8008a98:	f7fb bc84 	b.w	80043a4 <_getpid>

08008a9c <_sbrk_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d06      	ldr	r5, [pc, #24]	; (8008ab8 <_sbrk_r+0x1c>)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	602b      	str	r3, [r5, #0]
 8008aa8:	f7fb fc9e 	bl	80043e8 <_sbrk>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d102      	bne.n	8008ab6 <_sbrk_r+0x1a>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	b103      	cbz	r3, 8008ab6 <_sbrk_r+0x1a>
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	20000550 	.word	0x20000550

08008abc <__errno>:
 8008abc:	4b01      	ldr	r3, [pc, #4]	; (8008ac4 <__errno+0x8>)
 8008abe:	6818      	ldr	r0, [r3, #0]
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	200001b4 	.word	0x200001b4

08008ac8 <__libc_init_array>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	4d0d      	ldr	r5, [pc, #52]	; (8008b00 <__libc_init_array+0x38>)
 8008acc:	4c0d      	ldr	r4, [pc, #52]	; (8008b04 <__libc_init_array+0x3c>)
 8008ace:	1b64      	subs	r4, r4, r5
 8008ad0:	10a4      	asrs	r4, r4, #2
 8008ad2:	2600      	movs	r6, #0
 8008ad4:	42a6      	cmp	r6, r4
 8008ad6:	d109      	bne.n	8008aec <__libc_init_array+0x24>
 8008ad8:	4d0b      	ldr	r5, [pc, #44]	; (8008b08 <__libc_init_array+0x40>)
 8008ada:	4c0c      	ldr	r4, [pc, #48]	; (8008b0c <__libc_init_array+0x44>)
 8008adc:	f000 f874 	bl	8008bc8 <_init>
 8008ae0:	1b64      	subs	r4, r4, r5
 8008ae2:	10a4      	asrs	r4, r4, #2
 8008ae4:	2600      	movs	r6, #0
 8008ae6:	42a6      	cmp	r6, r4
 8008ae8:	d105      	bne.n	8008af6 <__libc_init_array+0x2e>
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
 8008aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af0:	4798      	blx	r3
 8008af2:	3601      	adds	r6, #1
 8008af4:	e7ee      	b.n	8008ad4 <__libc_init_array+0xc>
 8008af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008afa:	4798      	blx	r3
 8008afc:	3601      	adds	r6, #1
 8008afe:	e7f2      	b.n	8008ae6 <__libc_init_array+0x1e>
 8008b00:	08008cd4 	.word	0x08008cd4
 8008b04:	08008cd4 	.word	0x08008cd4
 8008b08:	08008cd4 	.word	0x08008cd4
 8008b0c:	08008cd8 	.word	0x08008cd8

08008b10 <__retarget_lock_acquire_recursive>:
 8008b10:	4770      	bx	lr

08008b12 <__retarget_lock_release_recursive>:
 8008b12:	4770      	bx	lr

08008b14 <memcpy>:
 8008b14:	440a      	add	r2, r1
 8008b16:	4291      	cmp	r1, r2
 8008b18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b1c:	d100      	bne.n	8008b20 <memcpy+0xc>
 8008b1e:	4770      	bx	lr
 8008b20:	b510      	push	{r4, lr}
 8008b22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b2a:	4291      	cmp	r1, r2
 8008b2c:	d1f9      	bne.n	8008b22 <memcpy+0xe>
 8008b2e:	bd10      	pop	{r4, pc}

08008b30 <_free_r>:
 8008b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b32:	2900      	cmp	r1, #0
 8008b34:	d044      	beq.n	8008bc0 <_free_r+0x90>
 8008b36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b3a:	9001      	str	r0, [sp, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b42:	bfb8      	it	lt
 8008b44:	18e4      	addlt	r4, r4, r3
 8008b46:	f7ff ff51 	bl	80089ec <__malloc_lock>
 8008b4a:	4a1e      	ldr	r2, [pc, #120]	; (8008bc4 <_free_r+0x94>)
 8008b4c:	9801      	ldr	r0, [sp, #4]
 8008b4e:	6813      	ldr	r3, [r2, #0]
 8008b50:	b933      	cbnz	r3, 8008b60 <_free_r+0x30>
 8008b52:	6063      	str	r3, [r4, #4]
 8008b54:	6014      	str	r4, [r2, #0]
 8008b56:	b003      	add	sp, #12
 8008b58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b5c:	f7ff bf4c 	b.w	80089f8 <__malloc_unlock>
 8008b60:	42a3      	cmp	r3, r4
 8008b62:	d908      	bls.n	8008b76 <_free_r+0x46>
 8008b64:	6825      	ldr	r5, [r4, #0]
 8008b66:	1961      	adds	r1, r4, r5
 8008b68:	428b      	cmp	r3, r1
 8008b6a:	bf01      	itttt	eq
 8008b6c:	6819      	ldreq	r1, [r3, #0]
 8008b6e:	685b      	ldreq	r3, [r3, #4]
 8008b70:	1949      	addeq	r1, r1, r5
 8008b72:	6021      	streq	r1, [r4, #0]
 8008b74:	e7ed      	b.n	8008b52 <_free_r+0x22>
 8008b76:	461a      	mov	r2, r3
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	b10b      	cbz	r3, 8008b80 <_free_r+0x50>
 8008b7c:	42a3      	cmp	r3, r4
 8008b7e:	d9fa      	bls.n	8008b76 <_free_r+0x46>
 8008b80:	6811      	ldr	r1, [r2, #0]
 8008b82:	1855      	adds	r5, r2, r1
 8008b84:	42a5      	cmp	r5, r4
 8008b86:	d10b      	bne.n	8008ba0 <_free_r+0x70>
 8008b88:	6824      	ldr	r4, [r4, #0]
 8008b8a:	4421      	add	r1, r4
 8008b8c:	1854      	adds	r4, r2, r1
 8008b8e:	42a3      	cmp	r3, r4
 8008b90:	6011      	str	r1, [r2, #0]
 8008b92:	d1e0      	bne.n	8008b56 <_free_r+0x26>
 8008b94:	681c      	ldr	r4, [r3, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	6053      	str	r3, [r2, #4]
 8008b9a:	440c      	add	r4, r1
 8008b9c:	6014      	str	r4, [r2, #0]
 8008b9e:	e7da      	b.n	8008b56 <_free_r+0x26>
 8008ba0:	d902      	bls.n	8008ba8 <_free_r+0x78>
 8008ba2:	230c      	movs	r3, #12
 8008ba4:	6003      	str	r3, [r0, #0]
 8008ba6:	e7d6      	b.n	8008b56 <_free_r+0x26>
 8008ba8:	6825      	ldr	r5, [r4, #0]
 8008baa:	1961      	adds	r1, r4, r5
 8008bac:	428b      	cmp	r3, r1
 8008bae:	bf04      	itt	eq
 8008bb0:	6819      	ldreq	r1, [r3, #0]
 8008bb2:	685b      	ldreq	r3, [r3, #4]
 8008bb4:	6063      	str	r3, [r4, #4]
 8008bb6:	bf04      	itt	eq
 8008bb8:	1949      	addeq	r1, r1, r5
 8008bba:	6021      	streq	r1, [r4, #0]
 8008bbc:	6054      	str	r4, [r2, #4]
 8008bbe:	e7ca      	b.n	8008b56 <_free_r+0x26>
 8008bc0:	b003      	add	sp, #12
 8008bc2:	bd30      	pop	{r4, r5, pc}
 8008bc4:	20000410 	.word	0x20000410

08008bc8 <_init>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	bf00      	nop
 8008bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bce:	bc08      	pop	{r3}
 8008bd0:	469e      	mov	lr, r3
 8008bd2:	4770      	bx	lr

08008bd4 <_fini>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	bf00      	nop
 8008bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bda:	bc08      	pop	{r3}
 8008bdc:	469e      	mov	lr, r3
 8008bde:	4770      	bx	lr
