
TT_IMU_Choriboard_IV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a08c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800a258  0800a258  0001a258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3b8  0800a3b8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3b8  0800a3b8  0001a3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3c0  0800a3c0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3c0  0800a3c0  0001a3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3c4  0800a3c4  0001a3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a3c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  200001e0  0800a5a8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  0800a5a8  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022034  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006171  00000000  00000000  00042287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b50  00000000  00000000  000483f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014a1  00000000  00000000  00049f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e53d  00000000  00000000  0004b3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000233d5  00000000  00000000  00079926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101e92  00000000  00000000  0009ccfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007850  00000000  00000000  0019eb90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001a63e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001e0 	.word	0x200001e0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a23c 	.word	0x0800a23c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e4 	.word	0x200001e4
 8000204:	0800a23c 	.word	0x0800a23c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b68:	f000 b970 	b.w	8000e4c <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9e08      	ldr	r6, [sp, #32]
 8000b8a:	460d      	mov	r5, r1
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	460f      	mov	r7, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14a      	bne.n	8000c2a <__udivmoddi4+0xa6>
 8000b94:	428a      	cmp	r2, r1
 8000b96:	4694      	mov	ip, r2
 8000b98:	d965      	bls.n	8000c66 <__udivmoddi4+0xe2>
 8000b9a:	fab2 f382 	clz	r3, r2
 8000b9e:	b143      	cbz	r3, 8000bb2 <__udivmoddi4+0x2e>
 8000ba0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba4:	f1c3 0220 	rsb	r2, r3, #32
 8000ba8:	409f      	lsls	r7, r3
 8000baa:	fa20 f202 	lsr.w	r2, r0, r2
 8000bae:	4317      	orrs	r7, r2
 8000bb0:	409c      	lsls	r4, r3
 8000bb2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bb6:	fa1f f58c 	uxth.w	r5, ip
 8000bba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bbe:	0c22      	lsrs	r2, r4, #16
 8000bc0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bc8:	fb01 f005 	mul.w	r0, r1, r5
 8000bcc:	4290      	cmp	r0, r2
 8000bce:	d90a      	bls.n	8000be6 <__udivmoddi4+0x62>
 8000bd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bd8:	f080 811c 	bcs.w	8000e14 <__udivmoddi4+0x290>
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	f240 8119 	bls.w	8000e14 <__udivmoddi4+0x290>
 8000be2:	3902      	subs	r1, #2
 8000be4:	4462      	add	r2, ip
 8000be6:	1a12      	subs	r2, r2, r0
 8000be8:	b2a4      	uxth	r4, r4
 8000bea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf6:	fb00 f505 	mul.w	r5, r0, r5
 8000bfa:	42a5      	cmp	r5, r4
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x90>
 8000bfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000c02:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x294>
 8000c0a:	42a5      	cmp	r5, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x294>
 8000c10:	4464      	add	r4, ip
 8000c12:	3802      	subs	r0, #2
 8000c14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c18:	1b64      	subs	r4, r4, r5
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	b11e      	cbz	r6, 8000c26 <__udivmoddi4+0xa2>
 8000c1e:	40dc      	lsrs	r4, r3
 8000c20:	2300      	movs	r3, #0
 8000c22:	e9c6 4300 	strd	r4, r3, [r6]
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0xbc>
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	f000 80ed 	beq.w	8000e0e <__udivmoddi4+0x28a>
 8000c34:	2100      	movs	r1, #0
 8000c36:	e9c6 0500 	strd	r0, r5, [r6]
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c40:	fab3 f183 	clz	r1, r3
 8000c44:	2900      	cmp	r1, #0
 8000c46:	d149      	bne.n	8000cdc <__udivmoddi4+0x158>
 8000c48:	42ab      	cmp	r3, r5
 8000c4a:	d302      	bcc.n	8000c52 <__udivmoddi4+0xce>
 8000c4c:	4282      	cmp	r2, r0
 8000c4e:	f200 80f8 	bhi.w	8000e42 <__udivmoddi4+0x2be>
 8000c52:	1a84      	subs	r4, r0, r2
 8000c54:	eb65 0203 	sbc.w	r2, r5, r3
 8000c58:	2001      	movs	r0, #1
 8000c5a:	4617      	mov	r7, r2
 8000c5c:	2e00      	cmp	r6, #0
 8000c5e:	d0e2      	beq.n	8000c26 <__udivmoddi4+0xa2>
 8000c60:	e9c6 4700 	strd	r4, r7, [r6]
 8000c64:	e7df      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xe6>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f382 	clz	r3, r2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f040 8090 	bne.w	8000d94 <__udivmoddi4+0x210>
 8000c74:	1a8a      	subs	r2, r1, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f fe8c 	uxth.w	lr, ip
 8000c7e:	2101      	movs	r1, #1
 8000c80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c84:	fb07 2015 	mls	r0, r7, r5, r2
 8000c88:	0c22      	lsrs	r2, r4, #16
 8000c8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c8e:	fb0e f005 	mul.w	r0, lr, r5
 8000c92:	4290      	cmp	r0, r2
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x124>
 8000c96:	eb1c 0202 	adds.w	r2, ip, r2
 8000c9a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x122>
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	f200 80cb 	bhi.w	8000e3c <__udivmoddi4+0x2b8>
 8000ca6:	4645      	mov	r5, r8
 8000ca8:	1a12      	subs	r2, r2, r0
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cbc:	45a6      	cmp	lr, r4
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x14e>
 8000cc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cc8:	d202      	bcs.n	8000cd0 <__udivmoddi4+0x14c>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f200 80bb 	bhi.w	8000e46 <__udivmoddi4+0x2c2>
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	eba4 040e 	sub.w	r4, r4, lr
 8000cd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cda:	e79f      	b.n	8000c1c <__udivmoddi4+0x98>
 8000cdc:	f1c1 0720 	rsb	r7, r1, #32
 8000ce0:	408b      	lsls	r3, r1
 8000ce2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cea:	fa05 f401 	lsl.w	r4, r5, r1
 8000cee:	fa20 f307 	lsr.w	r3, r0, r7
 8000cf2:	40fd      	lsrs	r5, r7
 8000cf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf8:	4323      	orrs	r3, r4
 8000cfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	fb09 5518 	mls	r5, r9, r8, r5
 8000d06:	0c1c      	lsrs	r4, r3, #16
 8000d08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d10:	42a5      	cmp	r5, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	fa00 f001 	lsl.w	r0, r0, r1
 8000d1a:	d90b      	bls.n	8000d34 <__udivmoddi4+0x1b0>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d24:	f080 8088 	bcs.w	8000e38 <__udivmoddi4+0x2b4>
 8000d28:	42a5      	cmp	r5, r4
 8000d2a:	f240 8085 	bls.w	8000e38 <__udivmoddi4+0x2b4>
 8000d2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d32:	4464      	add	r4, ip
 8000d34:	1b64      	subs	r4, r4, r5
 8000d36:	b29d      	uxth	r5, r3
 8000d38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x1da>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d54:	d26c      	bcs.n	8000e30 <__udivmoddi4+0x2ac>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	d96a      	bls.n	8000e30 <__udivmoddi4+0x2ac>
 8000d5a:	3b02      	subs	r3, #2
 8000d5c:	4464      	add	r4, ip
 8000d5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d62:	fba3 9502 	umull	r9, r5, r3, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	42ac      	cmp	r4, r5
 8000d6c:	46c8      	mov	r8, r9
 8000d6e:	46ae      	mov	lr, r5
 8000d70:	d356      	bcc.n	8000e20 <__udivmoddi4+0x29c>
 8000d72:	d053      	beq.n	8000e1c <__udivmoddi4+0x298>
 8000d74:	b156      	cbz	r6, 8000d8c <__udivmoddi4+0x208>
 8000d76:	ebb0 0208 	subs.w	r2, r0, r8
 8000d7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d82:	40ca      	lsrs	r2, r1
 8000d84:	40cc      	lsrs	r4, r1
 8000d86:	4317      	orrs	r7, r2
 8000d88:	e9c6 7400 	strd	r7, r4, [r6]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	2100      	movs	r1, #0
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	f1c3 0120 	rsb	r1, r3, #32
 8000d98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000da0:	fa25 f101 	lsr.w	r1, r5, r1
 8000da4:	409d      	lsls	r5, r3
 8000da6:	432a      	orrs	r2, r5
 8000da8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dac:	fa1f fe8c 	uxth.w	lr, ip
 8000db0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db4:	fb07 1510 	mls	r5, r7, r0, r1
 8000db8:	0c11      	lsrs	r1, r2, #16
 8000dba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000dc2:	428d      	cmp	r5, r1
 8000dc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x258>
 8000dca:	eb1c 0101 	adds.w	r1, ip, r1
 8000dce:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dd2:	d22f      	bcs.n	8000e34 <__udivmoddi4+0x2b0>
 8000dd4:	428d      	cmp	r5, r1
 8000dd6:	d92d      	bls.n	8000e34 <__udivmoddi4+0x2b0>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4461      	add	r1, ip
 8000ddc:	1b49      	subs	r1, r1, r5
 8000dde:	b292      	uxth	r2, r2
 8000de0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000de4:	fb07 1115 	mls	r1, r7, r5, r1
 8000de8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dec:	fb05 f10e 	mul.w	r1, r5, lr
 8000df0:	4291      	cmp	r1, r2
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x282>
 8000df4:	eb1c 0202 	adds.w	r2, ip, r2
 8000df8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dfc:	d216      	bcs.n	8000e2c <__udivmoddi4+0x2a8>
 8000dfe:	4291      	cmp	r1, r2
 8000e00:	d914      	bls.n	8000e2c <__udivmoddi4+0x2a8>
 8000e02:	3d02      	subs	r5, #2
 8000e04:	4462      	add	r2, ip
 8000e06:	1a52      	subs	r2, r2, r1
 8000e08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e0c:	e738      	b.n	8000c80 <__udivmoddi4+0xfc>
 8000e0e:	4631      	mov	r1, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e708      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000e14:	4639      	mov	r1, r7
 8000e16:	e6e6      	b.n	8000be6 <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x90>
 8000e1c:	4548      	cmp	r0, r9
 8000e1e:	d2a9      	bcs.n	8000d74 <__udivmoddi4+0x1f0>
 8000e20:	ebb9 0802 	subs.w	r8, r9, r2
 8000e24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	e7a3      	b.n	8000d74 <__udivmoddi4+0x1f0>
 8000e2c:	4645      	mov	r5, r8
 8000e2e:	e7ea      	b.n	8000e06 <__udivmoddi4+0x282>
 8000e30:	462b      	mov	r3, r5
 8000e32:	e794      	b.n	8000d5e <__udivmoddi4+0x1da>
 8000e34:	4640      	mov	r0, r8
 8000e36:	e7d1      	b.n	8000ddc <__udivmoddi4+0x258>
 8000e38:	46d0      	mov	r8, sl
 8000e3a:	e77b      	b.n	8000d34 <__udivmoddi4+0x1b0>
 8000e3c:	3d02      	subs	r5, #2
 8000e3e:	4462      	add	r2, ip
 8000e40:	e732      	b.n	8000ca8 <__udivmoddi4+0x124>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e70a      	b.n	8000c5c <__udivmoddi4+0xd8>
 8000e46:	4464      	add	r4, ip
 8000e48:	3802      	subs	r0, #2
 8000e4a:	e742      	b.n	8000cd2 <__udivmoddi4+0x14e>

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <_Z15CNI_constructorP19__CAN_HandleTypeDef>:

static CNI_t _instance;


void CNI_constructor(CAN_HandleTypeDef *hcan)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	_instance.mHcan_ = hcan;
 8000e58:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]

	_instance.mCANtxHeader_.ExtId = 0;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
	_instance.mCANtxHeader_.IDE = CAN_ID_STD;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
	_instance.mCANtxHeader_.RTR = CAN_RTR_DATA;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
	_instance.mCANtxHeader_.TransmitGlobalTime = DISABLE;
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <_Z15CNI_constructorP19__CAN_HandleTypeDef+0x34>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	771a      	strb	r2, [r3, #28]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	200001fc 	.word	0x200001fc

08000e88 <_Z8CNI_initv>:


void CNI_init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i = 0; i < lenCANfilterList ; i++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	e00e      	b.n	8000eb2 <_Z8CNI_initv+0x2a>
	{
		HAL_CAN_ConfigFilter(_instance.mHcan_, &CANfiltersList[i]);
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <_Z8CNI_initv+0x40>)
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <_Z8CNI_initv+0x44>)
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f004 feca 	bl	8005c40 <HAL_CAN_ConfigFilter>
	for(i = 0; i < lenCANfilterList ; i++)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <_Z8CNI_initv+0x48>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d3eb      	bcc.n	8000e94 <_Z8CNI_initv+0xc>
	}
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200001fc 	.word	0x200001fc
 8000ecc:	20000104 	.word	0x20000104
 8000ed0:	20000180 	.word	0x20000180

08000ed4 <_Z9CNI_startv>:


void CNI_start(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	HAL_CAN_Start(_instance.mHcan_);
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <_Z9CNI_startv+0x20>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 ff8f 	bl	8005e00 <HAL_CAN_Start>
#if !IS_MASTER
    HAL_CAN_ActivateNotification(_instance.mHcan_, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <_Z9CNI_startv+0x20>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f005 fa51 	bl	8006390 <HAL_CAN_ActivateNotification>
#endif
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200001fc 	.word	0x200001fc

08000ef8 <_Z12CNI_send_msgm>:


CNI_status_t CNI_send_msg(uint32_t msgHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	uint32_t txMailbox;
	serviceID currentMsgServiceID;
	uint32_t i;

	if(msgHandle >= lenCANmsgList)
 8000f00:	4b42      	ldr	r3, [pc, #264]	; (800100c <_Z12CNI_send_msgm+0x114>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d301      	bcc.n	8000f0e <_Z12CNI_send_msgm+0x16>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e079      	b.n	8001002 <_Z12CNI_send_msgm+0x10a>
	}

	if(CANmsgList[msgHandle].mNodeID_ != MY_NODE_ID)
 8000f0e:	4940      	ldr	r1, [pc, #256]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d001      	beq.n	8000f28 <_Z12CNI_send_msgm+0x30>
	{
		return CNI_MSG_HANDLE_TX_NOT_ALLOWED;
 8000f24:	2302      	movs	r3, #2
 8000f26:	e06c      	b.n	8001002 <_Z12CNI_send_msgm+0x10a>
	}

	// Armar el mensaje
	currentMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 8000f28:	4939      	ldr	r1, [pc, #228]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	613b      	str	r3, [r7, #16]
	_instance.mCANtxHeader_.StdId = CAN_MSG_MAKE_STD_ID_TX(currentMsgServiceID);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	4a34      	ldr	r2, [pc, #208]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000f44:	6093      	str	r3, [r2, #8]

	// Pasarle el msj al periférico

	// Limpia todos los mensajes pendientes (no debería haber ninguno, pero por las dudas)
	HAL_CAN_AbortTxRequest(_instance.mHcan_,CAN_TX_MAILBOX0|CAN_TX_MAILBOX1|CAN_TX_MAILBOX2);
 8000f46:	4b33      	ldr	r3, [pc, #204]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2107      	movs	r1, #7
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f005 f86b 	bl	8006028 <HAL_CAN_AbortTxRequest>

	// Comenzando por la posición "msgHandle" se recorre la lista de mensajes. Esto es debido
	// a que es posible que se requiera enviar más de un mensaje.
	i = msgHandle;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 8000f56:	e02a      	b.n	8000fae <_Z12CNI_send_msgm+0xb6>
	{
		while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 8000f58:	bf00      	nop
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f005 f8a7 	bl	80060b2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	bf0c      	ite	eq
 8000f6a:	2301      	moveq	r3, #1
 8000f6c:	2300      	movne	r3, #0
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1f2      	bne.n	8000f5a <_Z12CNI_send_msgm+0x62>

		_instance.mCANtxHeader_.DLC = CANmsgList[i].mLenPayload_;
 8000f74:	4926      	ldr	r1, [pc, #152]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	3310      	adds	r3, #16
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a23      	ldr	r2, [pc, #140]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000f88:	6193      	str	r3, [r2, #24]
		HAL_CAN_AddTxMessage(_instance.mHcan_, &_instance.mCANtxHeader_, CANmsgList[i].mPayload_, &txMailbox);
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	3308      	adds	r3, #8
 8000f9a:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000f9c:	441a      	add	r2, r3
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	491d      	ldr	r1, [pc, #116]	; (8001018 <_Z12CNI_send_msgm+0x120>)
 8000fa4:	f004 ff70 	bl	8005e88 <HAL_CAN_AddTxMessage>
		i++;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
	while( (i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == currentMsgServiceID) && (CANmsgList[i].mNodeID_ == MY_NODE_ID) )
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <_Z12CNI_send_msgm+0x114>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d215      	bcs.n	8000fe4 <_Z12CNI_send_msgm+0xec>
 8000fb8:	4915      	ldr	r1, [pc, #84]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d10a      	bne.n	8000fe4 <_Z12CNI_send_msgm+0xec>
 8000fce:	4910      	ldr	r1, [pc, #64]	; (8001010 <_Z12CNI_send_msgm+0x118>)
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3304      	adds	r3, #4
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d0b9      	beq.n	8000f58 <_Z12CNI_send_msgm+0x60>
	}

	// Antes de retornar, se queda esperando a que se terminen de enviar todos los mensajes
	while(HAL_CAN_GetTxMailboxesFreeLevel(_instance.mHcan_) == 0);
 8000fe4:	bf00      	nop
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <_Z12CNI_send_msgm+0x11c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 f861 	bl	80060b2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2301      	moveq	r3, #1
 8000ff8:	2300      	movne	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f2      	bne.n	8000fe6 <_Z12CNI_send_msgm+0xee>

	return CNI_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000017c 	.word	0x2000017c
 8001010:	20000000 	.word	0x20000000
 8001014:	200001fc 	.word	0x200001fc
 8001018:	20000204 	.word	0x20000204

0800101c <_Z15CNI_receive_msgm>:


CNI_status_t CNI_receive_msg(uint32_t msgHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	serviceID rxMsgServiceID;
	uint32_t rxNodeID;
	uint32_t i;

	// Chequear si el msgHandle es válido
	if(msgHandle >= lenCANmsgList)
 8001024:	4b45      	ldr	r3, [pc, #276]	; (800113c <_Z15CNI_receive_msgm+0x120>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	429a      	cmp	r2, r3
 800102c:	d301      	bcc.n	8001032 <_Z15CNI_receive_msgm+0x16>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 800102e:	2301      	movs	r3, #1
 8001030:	e080      	b.n	8001134 <_Z15CNI_receive_msgm+0x118>
	}

	if(CANmsgList[msgHandle].mNodeID_ == MY_NODE_ID)
 8001032:	4943      	ldr	r1, [pc, #268]	; (8001140 <_Z15CNI_receive_msgm+0x124>)
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	3304      	adds	r3, #4
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d101      	bne.n	800104c <_Z15CNI_receive_msgm+0x30>
	{
		return CNI_MSG_HANDLE_RX_NOT_ALLOWED;
 8001048:	2303      	movs	r3, #3
 800104a:	e073      	b.n	8001134 <_Z15CNI_receive_msgm+0x118>
	}

	i = msgHandle;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
	rxMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 8001050:	493b      	ldr	r1, [pc, #236]	; (8001140 <_Z15CNI_receive_msgm+0x124>)
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
	rxNodeID = CANmsgList[msgHandle].mNodeID_;
 8001062:	4937      	ldr	r1, [pc, #220]	; (8001140 <_Z15CNI_receive_msgm+0x124>)
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	3304      	adds	r3, #4
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	627b      	str	r3, [r7, #36]	; 0x24

	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID))
 8001076:	e040      	b.n	80010fa <_Z15CNI_receive_msgm+0xde>
	{
		while( (HAL_CAN_GetRxFifoFillLevel(_instance.mHcan_, CAN_RX_FIFO0) == 0) );
 8001078:	bf00      	nop
 800107a:	4b32      	ldr	r3, [pc, #200]	; (8001144 <_Z15CNI_receive_msgm+0x128>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f005 f95d 	bl	8006340 <HAL_CAN_GetRxFifoFillLevel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	bf0c      	ite	eq
 800108c:	2301      	moveq	r3, #1
 800108e:	2300      	movne	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f1      	bne.n	800107a <_Z15CNI_receive_msgm+0x5e>
		HAL_CAN_GetRxMessage(_instance.mHcan_, CAN_RX_FIFO0, &auxCANrxHeader, CANmsgList[i].mPayload_);
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <_Z15CNI_receive_msgm+0x128>)
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	3308      	adds	r3, #8
 80010a6:	4a26      	ldr	r2, [pc, #152]	; (8001140 <_Z15CNI_receive_msgm+0x124>)
 80010a8:	4413      	add	r3, r2
 80010aa:	f107 0208 	add.w	r2, r7, #8
 80010ae:	2100      	movs	r1, #0
 80010b0:	f005 f834 	bl	800611c <HAL_CAN_GetRxMessage>
		if( (rxMsgServiceID == CAN_MSG_GET_SERVICE_ID_FROM_STD_ID(auxCANrxHeader.StdId)) && (rxNodeID == CAN_MSG_GET_NODE_ID_FROM_STD_ID(auxCANrxHeader.StdId)) )
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	08db      	lsrs	r3, r3, #3
 80010b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d113      	bne.n	80010e6 <_Z15CNI_receive_msgm+0xca>
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d10d      	bne.n	80010e6 <_Z15CNI_receive_msgm+0xca>
		{
			CANmsgList[i].mLenPayload_ = auxCANrxHeader.DLC;
 80010ca:	69b9      	ldr	r1, [r7, #24]
 80010cc:	481c      	ldr	r0, [pc, #112]	; (8001140 <_Z15CNI_receive_msgm+0x124>)
 80010ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4403      	add	r3, r0
 80010da:	3310      	adds	r3, #16
 80010dc:	6019      	str	r1, [r3, #0]
			i++;
 80010de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e0:	3301      	adds	r3, #1
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010e4:	e009      	b.n	80010fa <_Z15CNI_receive_msgm+0xde>
		}
		else
		{
			CANmsgList[i].mLenPayload_ = 0;
 80010e6:	4916      	ldr	r1, [pc, #88]	; (8001140 <_Z15CNI_receive_msgm+0x124>)
 80010e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	3310      	adds	r3, #16
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID))
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_Z15CNI_receive_msgm+0x120>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001100:	429a      	cmp	r2, r3
 8001102:	d216      	bcs.n	8001132 <_Z15CNI_receive_msgm+0x116>
 8001104:	490e      	ldr	r1, [pc, #56]	; (8001140 <_Z15CNI_receive_msgm+0x124>)
 8001106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001116:	429a      	cmp	r2, r3
 8001118:	d10b      	bne.n	8001132 <_Z15CNI_receive_msgm+0x116>
 800111a:	4909      	ldr	r1, [pc, #36]	; (8001140 <_Z15CNI_receive_msgm+0x124>)
 800111c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	3304      	adds	r3, #4
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112e:	429a      	cmp	r2, r3
 8001130:	d0a2      	beq.n	8001078 <_Z15CNI_receive_msgm+0x5c>
		}
	}

	return CNI_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3730      	adds	r7, #48	; 0x30
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2000017c 	.word	0x2000017c
 8001140:	20000000 	.word	0x20000000
 8001144:	200001fc 	.word	0x200001fc

08001148 <_Z22CNI_update_msg_contentmPhm>:

CNI_status_t CNI_update_msg_content(uint32_t msgHandle, uint8_t *payload, uint32_t lenPayload)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
	serviceID rxMsgServiceID;
	uint32_t rxNodeID;
	uint32_t auxLenPayload;

	// Chequear si el msgHandle es válido
	if(msgHandle >= lenCANmsgList)
 8001154:	4b48      	ldr	r3, [pc, #288]	; (8001278 <_Z22CNI_update_msg_contentmPhm+0x130>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	429a      	cmp	r2, r3
 800115c:	d301      	bcc.n	8001162 <_Z22CNI_update_msg_contentmPhm+0x1a>
	{
		return CNI_MSG_HANDLE_NOT_VALID;
 800115e:	2301      	movs	r3, #1
 8001160:	e086      	b.n	8001270 <_Z22CNI_update_msg_contentmPhm+0x128>
	}

	if(CANmsgList[msgHandle].mNodeID_ != MY_NODE_ID)
 8001162:	4946      	ldr	r1, [pc, #280]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	3304      	adds	r3, #4
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d001      	beq.n	800117c <_Z22CNI_update_msg_contentmPhm+0x34>
	{
		return CNI_MSG_HANDLE_TX_NOT_ALLOWED;
 8001178:	2302      	movs	r3, #2
 800117a:	e079      	b.n	8001270 <_Z22CNI_update_msg_contentmPhm+0x128>
	}

	i = msgHandle;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	61fb      	str	r3, [r7, #28]
	rxMsgServiceID = CANmsgList[msgHandle].mServiceID_;
 8001180:	493e      	ldr	r1, [pc, #248]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	617b      	str	r3, [r7, #20]
	rxNodeID = CANmsgList[msgHandle].mNodeID_;
 8001192:	493a      	ldr	r1, [pc, #232]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	3304      	adds	r3, #4
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	613b      	str	r3, [r7, #16]
	auxLenPayload = lenPayload;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	61bb      	str	r3, [r7, #24]

	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID) && (auxLenPayload > 0))
 80011aa:	e041      	b.n	8001230 <_Z22CNI_update_msg_contentmPhm+0xe8>
	{
		if(auxLenPayload > MAX_LEN_PAYLOAD_CAN)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d91e      	bls.n	80011f0 <_Z22CNI_update_msg_contentmPhm+0xa8>
		{
			//memcpy(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], MAX_LEN_PAYLOAD_CAN);
			my_copy_array_of_uint8(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], MAX_LEN_PAYLOAD_CAN);
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	3308      	adds	r3, #8
 80011be:	4a2f      	ldr	r2, [pc, #188]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 80011c0:	1898      	adds	r0, r3, r2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	4413      	add	r3, r2
 80011cc:	2208      	movs	r2, #8
 80011ce:	4619      	mov	r1, r3
 80011d0:	f003 fe75 	bl	8004ebe <_Z22my_copy_array_of_uint8PhPKhm>
			CANmsgList[i].mLenPayload_ = MAX_LEN_PAYLOAD_CAN;
 80011d4:	4929      	ldr	r1, [pc, #164]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	3310      	adds	r3, #16
 80011e4:	2208      	movs	r2, #8
 80011e6:	601a      	str	r2, [r3, #0]
			auxLenPayload-=MAX_LEN_PAYLOAD_CAN;
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	3b08      	subs	r3, #8
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	e01c      	b.n	800122a <_Z22CNI_update_msg_contentmPhm+0xe2>
		}
		else
		{
			//memcpy(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], auxLenPayload);
			my_copy_array_of_uint8(CANmsgList[i].mPayload_, &payload[lenPayload-auxLenPayload], auxLenPayload);
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	3308      	adds	r3, #8
 80011fc:	4a1f      	ldr	r2, [pc, #124]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 80011fe:	1898      	adds	r0, r3, r2
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	4413      	add	r3, r2
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4619      	mov	r1, r3
 800120e:	f003 fe56 	bl	8004ebe <_Z22my_copy_array_of_uint8PhPKhm>
			CANmsgList[i].mLenPayload_ = auxLenPayload;
 8001212:	491a      	ldr	r1, [pc, #104]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	3310      	adds	r3, #16
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	601a      	str	r2, [r3, #0]
			auxLenPayload = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
		}
		i++;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3301      	adds	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
	while((i < lenCANmsgList) && (CANmsgList[i].mServiceID_ == rxMsgServiceID) && (CANmsgList[i].mNodeID_ == rxNodeID) && (auxLenPayload > 0))
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_Z22CNI_update_msg_contentmPhm+0x130>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	429a      	cmp	r2, r3
 8001238:	d219      	bcs.n	800126e <_Z22CNI_update_msg_contentmPhm+0x126>
 800123a:	4910      	ldr	r1, [pc, #64]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	d10e      	bne.n	800126e <_Z22CNI_update_msg_contentmPhm+0x126>
 8001250:	490a      	ldr	r1, [pc, #40]	; (800127c <_Z22CNI_update_msg_contentmPhm+0x134>)
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	3304      	adds	r3, #4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d102      	bne.n	800126e <_Z22CNI_update_msg_contentmPhm+0x126>
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d19e      	bne.n	80011ac <_Z22CNI_update_msg_contentmPhm+0x64>
	}

	return CNI_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3720      	adds	r7, #32
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000017c 	.word	0x2000017c
 800127c:	20000000 	.word	0x20000000

08001280 <_Z29attitudeEstimator_constructorff>:
#define PI 3.14159265

static attitudeEstimator_t _instance;

void attitudeEstimator_constructor(float alpha, float deltaT)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	ed87 0a01 	vstr	s0, [r7, #4]
 800128a:	edc7 0a00 	vstr	s1, [r7]
	_instance.mAlpha_ = alpha;
 800128e:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <_Z29attitudeEstimator_constructorff+0x68>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6013      	str	r3, [r2, #0]
	_instance.mDeltaT_ = deltaT;
 8001294:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <_Z29attitudeEstimator_constructorff+0x68>)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	6053      	str	r3, [r2, #4]

	_instance.mOutputData_.mPitch_ = 0.0;
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <_Z29attitudeEstimator_constructorff+0x68>)
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
	_instance.mOutputData_.mRoll_ = 0.0;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <_Z29attitudeEstimator_constructorff+0x68>)
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]

	_instance.mIMUdata_.accelX = 0.0;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <_Z29attitudeEstimator_constructorff+0x68>)
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
	_instance.mIMUdata_.accelY = 0.0;
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <_Z29attitudeEstimator_constructorff+0x68>)
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
	_instance.mIMUdata_.accelZ = 1.0;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <_Z29attitudeEstimator_constructorff+0x68>)
 80012bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28
	_instance.mIMUdata_.gyroX = 0.0;
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <_Z29attitudeEstimator_constructorff+0x68>)
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
	_instance.mIMUdata_.gyroY = 0.0;
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <_Z29attitudeEstimator_constructorff+0x68>)
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
	_instance.mIMUdata_.gyroZ = 0.0;
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <_Z29attitudeEstimator_constructorff+0x68>)
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	2000021c 	.word	0x2000021c

080012ec <_Z30attitudeEstimator_set_imu_data7IMUData>:

void attitudeEstimator_set_imu_data(IMUData imuData)
{
 80012ec:	b084      	sub	sp, #16
 80012ee:	b4b0      	push	{r4, r5, r7}
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	f107 040c 	add.w	r4, r7, #12
 80012f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	_instance.mIMUdata_ = imuData;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <_Z30attitudeEstimator_set_imu_data7IMUData+0x30>)
 80012fc:	f103 0410 	add.w	r4, r3, #16
 8001300:	f107 050c 	add.w	r5, r7, #12
 8001304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001308:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800130c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bcb0      	pop	{r4, r5, r7}
 8001316:	b004      	add	sp, #16
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2000021c 	.word	0x2000021c

08001320 <_Z24attitudeEstimator_updatev>:


//void attitudeEstimator_update(float *accelData, float *gyroData)
void attitudeEstimator_update(void)
{
 8001320:	b5b0      	push	{r4, r5, r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
	//float pitchAccel = atan2(-1 * accelData[POS_ACCEL_X], accelData[POS_ACCEL_Z]) * 180.0 / PI;
	//float rollAccel  = atan2(accelData[POS_ACCEL_Y], accelData[POS_ACCEL_Z]) * 180.0 / PI;

	float pitchAccel = atan2(-1.0 * _instance.mIMUdata_.accelX, _instance.mIMUdata_.accelZ) * 180.0 / PI;
 8001326:	4b54      	ldr	r3, [pc, #336]	; (8001478 <_Z24attitudeEstimator_updatev+0x158>)
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f8d0 	bl	80004d0 <__aeabi_f2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4614      	mov	r4, r2
 8001336:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800133a:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <_Z24attitudeEstimator_updatev+0x158>)
 800133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f8c6 	bl	80004d0 <__aeabi_f2d>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	ec43 2b11 	vmov	d1, r2, r3
 800134c:	ec45 4b10 	vmov	d0, r4, r5
 8001350:	f008 fb5a 	bl	8009a08 <atan2>
 8001354:	ec51 0b10 	vmov	r0, r1, d0
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	4b47      	ldr	r3, [pc, #284]	; (800147c <_Z24attitudeEstimator_updatev+0x15c>)
 800135e:	f7ff f90f 	bl	8000580 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	a341      	add	r3, pc, #260	; (adr r3, 8001470 <_Z24attitudeEstimator_updatev+0x150>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff fa30 	bl	80007d4 <__aeabi_ddiv>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fb9a 	bl	8000ab4 <__aeabi_d2f>
 8001380:	4603      	mov	r3, r0
 8001382:	607b      	str	r3, [r7, #4]
	float rollAccel  = atan2(       _instance.mIMUdata_.accelY, _instance.mIMUdata_.accelZ) * 180.0 / PI;
 8001384:	4b3c      	ldr	r3, [pc, #240]	; (8001478 <_Z24attitudeEstimator_updatev+0x158>)
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8a1 	bl	80004d0 <__aeabi_f2d>
 800138e:	4604      	mov	r4, r0
 8001390:	460d      	mov	r5, r1
 8001392:	4b39      	ldr	r3, [pc, #228]	; (8001478 <_Z24attitudeEstimator_updatev+0x158>)
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f89a 	bl	80004d0 <__aeabi_f2d>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	ec43 2b11 	vmov	d1, r2, r3
 80013a4:	ec45 4b10 	vmov	d0, r4, r5
 80013a8:	f008 fb2e 	bl	8009a08 <atan2>
 80013ac:	ec51 0b10 	vmov	r0, r1, d0
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	4b31      	ldr	r3, [pc, #196]	; (800147c <_Z24attitudeEstimator_updatev+0x15c>)
 80013b6:	f7ff f8e3 	bl	8000580 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	a32b      	add	r3, pc, #172	; (adr r3, 8001470 <_Z24attitudeEstimator_updatev+0x150>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7ff fa04 	bl	80007d4 <__aeabi_ddiv>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	f7ff fb6e 	bl	8000ab4 <__aeabi_d2f>
 80013d8:	4603      	mov	r3, r0
 80013da:	603b      	str	r3, [r7, #0]

	//_instance.mPitch_ = _instance.mAlpha_ * pitchAccel + (1 - _instance.mAlpha_) * (_instance.mDeltaT_ * gyroData[POS_GYRO_Y] + _instance.mPitch_);
	//_instance.mRoll_  = _instance.mAlpha_ * rollAccel  + (1 - _instance.mAlpha_) * (_instance.mDeltaT_ * gyroData[POS_GYRO_X] + _instance.mRoll_);

	_instance.mOutputData_.mPitch_ = _instance.mAlpha_ * pitchAccel + (1 - _instance.mAlpha_) * (_instance.mDeltaT_ * _instance.mIMUdata_.gyroY + _instance.mOutputData_.mPitch_);
 80013dc:	4b26      	ldr	r3, [pc, #152]	; (8001478 <_Z24attitudeEstimator_updatev+0x158>)
 80013de:	ed93 7a00 	vldr	s14, [r3]
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <_Z24attitudeEstimator_updatev+0x158>)
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80013f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <_Z24attitudeEstimator_updatev+0x158>)
 80013fa:	ed93 6a01 	vldr	s12, [r3, #4]
 80013fe:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <_Z24attitudeEstimator_updatev+0x158>)
 8001400:	edd3 7a06 	vldr	s15, [r3, #24]
 8001404:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <_Z24attitudeEstimator_updatev+0x158>)
 800140a:	edd3 7a02 	vldr	s15, [r3, #8]
 800140e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <_Z24attitudeEstimator_updatev+0x158>)
 800141c:	edc3 7a02 	vstr	s15, [r3, #8]
	_instance.mOutputData_.mRoll_  = _instance.mAlpha_ * rollAccel  + (1 - _instance.mAlpha_) * (_instance.mDeltaT_ * _instance.mIMUdata_.gyroX + _instance.mOutputData_.mRoll_);
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <_Z24attitudeEstimator_updatev+0x158>)
 8001422:	ed93 7a00 	vldr	s14, [r3]
 8001426:	edd7 7a00 	vldr	s15, [r7]
 800142a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <_Z24attitudeEstimator_updatev+0x158>)
 8001430:	edd3 7a00 	vldr	s15, [r3]
 8001434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001438:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <_Z24attitudeEstimator_updatev+0x158>)
 800143e:	ed93 6a01 	vldr	s12, [r3, #4]
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <_Z24attitudeEstimator_updatev+0x158>)
 8001444:	edd3 7a05 	vldr	s15, [r3, #20]
 8001448:	ee26 6a27 	vmul.f32	s12, s12, s15
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <_Z24attitudeEstimator_updatev+0x158>)
 800144e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001452:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <_Z24attitudeEstimator_updatev+0x158>)
 8001460:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bdb0      	pop	{r4, r5, r7, pc}
 800146c:	f3af 8000 	nop.w
 8001470:	53c8d4f1 	.word	0x53c8d4f1
 8001474:	400921fb 	.word	0x400921fb
 8001478:	2000021c 	.word	0x2000021c
 800147c:	40668000 	.word	0x40668000

08001480 <_Z27attitudeEstimator_read_dataP14attitudeData_t>:

void attitudeEstimator_read_data(attitudeData_t *outputData)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	(*outputData) = _instance.mOutputData_;
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <_Z27attitudeEstimator_read_dataP14attitudeData_t+0x24>)
 800148c:	3308      	adds	r3, #8
 800148e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001492:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	2000021c 	.word	0x2000021c

080014a8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_CAN1_Init+0x68>)
 80014ae:	4a19      	ldr	r2, [pc, #100]	; (8001514 <MX_CAN1_Init+0x6c>)
 80014b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <MX_CAN1_Init+0x68>)
 80014b4:	2206      	movs	r2, #6
 80014b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <MX_CAN1_Init+0x68>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_CAN1_Init+0x68>)
 80014c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014c4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_CAN1_Init+0x68>)
 80014c8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80014cc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_CAN1_Init+0x68>)
 80014d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014d4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_CAN1_Init+0x68>)
 80014d8:	2200      	movs	r2, #0
 80014da:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_CAN1_Init+0x68>)
 80014de:	2200      	movs	r2, #0
 80014e0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_CAN1_Init+0x68>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_CAN1_Init+0x68>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_CAN1_Init+0x68>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_CAN1_Init+0x68>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_CAN1_Init+0x68>)
 80014fc:	f004 faa4 	bl	8005a48 <HAL_CAN_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001506:	f003 f9e9 	bl	80048dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000248 	.word	0x20000248
 8001514:	40006400 	.word	0x40006400

08001518 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <MX_CAN2_Init+0x68>)
 800151e:	4a19      	ldr	r2, [pc, #100]	; (8001584 <MX_CAN2_Init+0x6c>)
 8001520:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MX_CAN2_Init+0x68>)
 8001524:	2206      	movs	r2, #6
 8001526:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <MX_CAN2_Init+0x68>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_CAN2_Init+0x68>)
 8001530:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001534:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_CAN2_Init+0x68>)
 8001538:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800153c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <MX_CAN2_Init+0x68>)
 8001540:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001544:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_CAN2_Init+0x68>)
 8001548:	2200      	movs	r2, #0
 800154a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_CAN2_Init+0x68>)
 800154e:	2200      	movs	r2, #0
 8001550:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_CAN2_Init+0x68>)
 8001554:	2200      	movs	r2, #0
 8001556:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_CAN2_Init+0x68>)
 800155a:	2200      	movs	r2, #0
 800155c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_CAN2_Init+0x68>)
 8001560:	2200      	movs	r2, #0
 8001562:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_CAN2_Init+0x68>)
 8001566:	2200      	movs	r2, #0
 8001568:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_CAN2_Init+0x68>)
 800156c:	f004 fa6c 	bl	8005a48 <HAL_CAN_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8001576:	f003 f9b1 	bl	80048dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000270 	.word	0x20000270
 8001584:	40006800 	.word	0x40006800

08001588 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08c      	sub	sp, #48	; 0x30
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a41      	ldr	r2, [pc, #260]	; (80016ac <HAL_CAN_MspInit+0x124>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d13a      	bne.n	8001620 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80015aa:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <HAL_CAN_MspInit+0x128>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	4a3f      	ldr	r2, [pc, #252]	; (80016b0 <HAL_CAN_MspInit+0x128>)
 80015b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80015b4:	4b3e      	ldr	r3, [pc, #248]	; (80016b0 <HAL_CAN_MspInit+0x128>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d10b      	bne.n	80015d4 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80015bc:	4b3d      	ldr	r3, [pc, #244]	; (80016b4 <HAL_CAN_MspInit+0x12c>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	4a3c      	ldr	r2, [pc, #240]	; (80016b4 <HAL_CAN_MspInit+0x12c>)
 80015c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
 80015c8:	4b3a      	ldr	r3, [pc, #232]	; (80016b4 <HAL_CAN_MspInit+0x12c>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d4:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <HAL_CAN_MspInit+0x12c>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	4a36      	ldr	r2, [pc, #216]	; (80016b4 <HAL_CAN_MspInit+0x12c>)
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	6313      	str	r3, [r2, #48]	; 0x30
 80015e0:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <HAL_CAN_MspInit+0x12c>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80015fe:	2309      	movs	r3, #9
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	482b      	ldr	r0, [pc, #172]	; (80016b8 <HAL_CAN_MspInit+0x130>)
 800160a:	f005 fa81 	bl	8006b10 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2014      	movs	r0, #20
 8001614:	f005 fa37 	bl	8006a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001618:	2014      	movs	r0, #20
 800161a:	f005 fa50 	bl	8006abe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800161e:	e041      	b.n	80016a4 <HAL_CAN_MspInit+0x11c>
  else if(canHandle->Instance==CAN2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a25      	ldr	r2, [pc, #148]	; (80016bc <HAL_CAN_MspInit+0x134>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d13c      	bne.n	80016a4 <HAL_CAN_MspInit+0x11c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_CAN_MspInit+0x12c>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a21      	ldr	r2, [pc, #132]	; (80016b4 <HAL_CAN_MspInit+0x12c>)
 8001630:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <HAL_CAN_MspInit+0x12c>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_CAN_MspInit+0x128>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <HAL_CAN_MspInit+0x128>)
 800164a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_CAN_MspInit+0x128>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d10b      	bne.n	800166c <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_CAN_MspInit+0x12c>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	4a16      	ldr	r2, [pc, #88]	; (80016b4 <HAL_CAN_MspInit+0x12c>)
 800165a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800165e:	6413      	str	r3, [r2, #64]	; 0x40
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_CAN_MspInit+0x12c>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_CAN_MspInit+0x12c>)
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <HAL_CAN_MspInit+0x12c>)
 8001672:	f043 0302 	orr.w	r3, r3, #2
 8001676:	6313      	str	r3, [r2, #48]	; 0x30
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_CAN_MspInit+0x12c>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001684:	2360      	movs	r3, #96	; 0x60
 8001686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001694:	2309      	movs	r3, #9
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	; (80016b8 <HAL_CAN_MspInit+0x130>)
 80016a0:	f005 fa36 	bl	8006b10 <HAL_GPIO_Init>
}
 80016a4:	bf00      	nop
 80016a6:	3730      	adds	r7, #48	; 0x30
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40006400 	.word	0x40006400
 80016b0:	20000298 	.word	0x20000298
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40006800 	.word	0x40006800

080016c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08c      	sub	sp, #48	; 0x30
 80016c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016d6:	4b49      	ldr	r3, [pc, #292]	; (80017fc <MX_GPIO_Init+0x13c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a48      	ldr	r2, [pc, #288]	; (80017fc <MX_GPIO_Init+0x13c>)
 80016dc:	f043 0310 	orr.w	r3, r3, #16
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b46      	ldr	r3, [pc, #280]	; (80017fc <MX_GPIO_Init+0x13c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ee:	4b43      	ldr	r3, [pc, #268]	; (80017fc <MX_GPIO_Init+0x13c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a42      	ldr	r2, [pc, #264]	; (80017fc <MX_GPIO_Init+0x13c>)
 80016f4:	f043 0320 	orr.w	r3, r3, #32
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b40      	ldr	r3, [pc, #256]	; (80017fc <MX_GPIO_Init+0x13c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0320 	and.w	r3, r3, #32
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <MX_GPIO_Init+0x13c>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a3c      	ldr	r2, [pc, #240]	; (80017fc <MX_GPIO_Init+0x13c>)
 800170c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <MX_GPIO_Init+0x13c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <MX_GPIO_Init+0x13c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a36      	ldr	r2, [pc, #216]	; (80017fc <MX_GPIO_Init+0x13c>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b34      	ldr	r3, [pc, #208]	; (80017fc <MX_GPIO_Init+0x13c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b31      	ldr	r3, [pc, #196]	; (80017fc <MX_GPIO_Init+0x13c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a30      	ldr	r2, [pc, #192]	; (80017fc <MX_GPIO_Init+0x13c>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <MX_GPIO_Init+0x13c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800174e:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <MX_GPIO_Init+0x13c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a2a      	ldr	r2, [pc, #168]	; (80017fc <MX_GPIO_Init+0x13c>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b28      	ldr	r3, [pc, #160]	; (80017fc <MX_GPIO_Init+0x13c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED2_Pin|LED1_Pin|LED7_Pin|LED4_Pin
 8001766:	2200      	movs	r2, #0
 8001768:	217a      	movs	r1, #122	; 0x7a
 800176a:	4825      	ldr	r0, [pc, #148]	; (8001800 <MX_GPIO_Init+0x140>)
 800176c:	f005 fb7c 	bl	8006e68 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED6_Pin|LED8_Pin|LED5_Pin, GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	211c      	movs	r1, #28
 8001774:	4823      	ldr	r0, [pc, #140]	; (8001804 <MX_GPIO_Init+0x144>)
 8001776:	f005 fb77 	bl	8006e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001780:	4821      	ldr	r0, [pc, #132]	; (8001808 <MX_GPIO_Init+0x148>)
 8001782:	f005 fb71 	bl	8006e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED7_Pin|LED4_Pin
 8001786:	237a      	movs	r3, #122	; 0x7a
 8001788:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	4818      	ldr	r0, [pc, #96]	; (8001800 <MX_GPIO_Init+0x140>)
 800179e:	f005 f9b7 	bl	8006b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED6_Pin|LED8_Pin|LED5_Pin;
 80017a2:	231c      	movs	r3, #28
 80017a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017b2:	f107 031c 	add.w	r3, r7, #28
 80017b6:	4619      	mov	r1, r3
 80017b8:	4812      	ldr	r0, [pc, #72]	; (8001804 <MX_GPIO_Init+0x144>)
 80017ba:	f005 f9a9 	bl	8006b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	480c      	ldr	r0, [pc, #48]	; (8001808 <MX_GPIO_Init+0x148>)
 80017d8:	f005 f99a 	bl	8006b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_SW_Pin;
 80017dc:	2308      	movs	r3, #8
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_SW_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	4619      	mov	r1, r3
 80017ee:	4807      	ldr	r0, [pc, #28]	; (800180c <MX_GPIO_Init+0x14c>)
 80017f0:	f005 f98e 	bl	8006b10 <HAL_GPIO_Init>

}
 80017f4:	bf00      	nop
 80017f6:	3730      	adds	r7, #48	; 0x30
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	40021000 	.word	0x40021000
 8001804:	40021400 	.word	0x40021400
 8001808:	40020400 	.word	0x40020400
 800180c:	40020c00 	.word	0x40020c00

08001810 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>:
#include "stm32f7xx_hal.h"


namespace STM32{

    gpio::gpio(GPIO_TypeDef* pPortHandler, uint16_t pin)
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	4613      	mov	r3, r2
 800181c:	80fb      	strh	r3, [r7, #6]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4618      	mov	r0, r3
 8001822:	f000 f854 	bl	80018ce <_ZNSt8functionIFvvEEC1Ev>
    {
        m_portHandler = pPortHandler;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	611a      	str	r2, [r3, #16]
        m_pin = pin;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	88fa      	ldrh	r2, [r7, #6]
 8001830:	829a      	strh	r2, [r3, #20]
    }
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_ZN5STM324gpio6toggleEv>:
        GPIO_PinState ret = HAL_GPIO_ReadPin(m_portHandler, m_pin);
        return ret == GPIO_PIN_SET ? GPIO_ST::HIGH : GPIO_ST::LOW;
    }

    void gpio::toggle()
    {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
        HAL_GPIO_TogglePin(m_portHandler, m_pin);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	8a9b      	ldrh	r3, [r3, #20]
 800184c:	4619      	mov	r1, r3
 800184e:	4610      	mov	r0, r2
 8001850:	f005 fb23 	bl	8006e9a <HAL_GPIO_TogglePin>
    }
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_ZN5STM324gpio5writeE7GPIO_ST>:

    void gpio::write(GPIO_ST st)
    {
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
        GPIO_PinState pinState = map_hal_st_to_igpio_st(st); 
 8001866:	6838      	ldr	r0, [r7, #0]
 8001868:	f000 f80e 	bl	8001888 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>
 800186c:	4603      	mov	r3, r0
 800186e:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(m_portHandler, m_pin, pinState);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6918      	ldr	r0, [r3, #16]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	8a9b      	ldrh	r3, [r3, #20]
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	4619      	mov	r1, r3
 800187c:	f005 faf4 	bl	8006e68 <HAL_GPIO_WritePin>
    }
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST>:

    GPIO_PinState gpio::map_hal_st_to_igpio_st(GPIO_ST st)
	{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
		return st == GPIO_ST::HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x12>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <_ZN5STM324gpio22map_hal_st_to_igpio_stE7GPIO_ST+0x14>
 800189a:	2300      	movs	r3, #0
	}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_ZNSt14_Function_baseC1Ev>:
	  static bool
	  _M_not_empty_function(const _Tp&)
	  { return true; }
      };

    _Function_base() = default;
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	461a      	mov	r2, r3
 80018b4:	2300      	movs	r3, #0
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	6053      	str	r3, [r2, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	461a      	mov	r2, r3
 80018da:	2300      	movs	r3, #0
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	6053      	str	r3, [r2, #4]
 80018e0:	6093      	str	r3, [r2, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ffdf 	bl	80018a8 <_ZNSt14_Function_baseC1Ev>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <MX_I2C4_Init+0x74>)
 8001902:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <MX_I2C4_Init+0x78>)
 8001904:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <MX_I2C4_Init+0x74>)
 8001908:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <MX_I2C4_Init+0x7c>)
 800190a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <MX_I2C4_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <MX_I2C4_Init+0x74>)
 8001914:	2201      	movs	r2, #1
 8001916:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <MX_I2C4_Init+0x74>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <MX_I2C4_Init+0x74>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <MX_I2C4_Init+0x74>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <MX_I2C4_Init+0x74>)
 800192c:	2200      	movs	r2, #0
 800192e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <MX_I2C4_Init+0x74>)
 8001932:	2200      	movs	r2, #0
 8001934:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001936:	480e      	ldr	r0, [pc, #56]	; (8001970 <MX_I2C4_Init+0x74>)
 8001938:	f005 faca 	bl	8006ed0 <HAL_I2C_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001942:	f002 ffcb 	bl	80048dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001946:	2100      	movs	r1, #0
 8001948:	4809      	ldr	r0, [pc, #36]	; (8001970 <MX_I2C4_Init+0x74>)
 800194a:	f005 fb51 	bl	8006ff0 <HAL_I2CEx_ConfigAnalogFilter>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001954:	f002 ffc2 	bl	80048dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001958:	2100      	movs	r1, #0
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <MX_I2C4_Init+0x74>)
 800195c:	f005 fb93 	bl	8007086 <HAL_I2CEx_ConfigDigitalFilter>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001966:	f002 ffb9 	bl	80048dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000029c 	.word	0x2000029c
 8001974:	40006000 	.word	0x40006000
 8001978:	20404768 	.word	0x20404768

0800197c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b0aa      	sub	sp, #168	; 0xa8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	2284      	movs	r2, #132	; 0x84
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f008 fb6b 	bl	800a078 <memset>
  if(i2cHandle->Instance==I2C4)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a22      	ldr	r2, [pc, #136]	; (8001a30 <HAL_I2C_MspInit+0xb4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d13d      	bne.n	8001a28 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80019ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4618      	mov	r0, r3
 80019be:	f006 f8b3 	bl	8007b28 <HAL_RCCEx_PeriphCLKConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80019c8:	f002 ff88 	bl	80048dc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_I2C_MspInit+0xb8>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <HAL_I2C_MspInit+0xb8>)
 80019d2:	f043 0320 	orr.w	r3, r3, #32
 80019d6:	6313      	str	r3, [r2, #48]	; 0x30
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_I2C_MspInit+0xb8>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019e4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ec:	2312      	movs	r3, #18
 80019ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80019fe:	2304      	movs	r3, #4
 8001a00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a04:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a08:	4619      	mov	r1, r3
 8001a0a:	480b      	ldr	r0, [pc, #44]	; (8001a38 <HAL_I2C_MspInit+0xbc>)
 8001a0c:	f005 f880 	bl	8006b10 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_I2C_MspInit+0xb8>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <HAL_I2C_MspInit+0xb8>)
 8001a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_I2C_MspInit+0xb8>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001a28:	bf00      	nop
 8001a2a:	37a8      	adds	r7, #168	; 0xa8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40006000 	.word	0x40006000
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40021400 	.word	0x40021400

08001a3c <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
      if (_M_manager)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	2203      	movs	r2, #3
 8001a82:	4798      	blx	r3
    }
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <_ZN9iPHandler4lockEv>:
    	}else{
    		return normalMode ? reg << 1 : (reg  << 0x01 | 1);
    	}
    }

    bool lock()
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
	{
		if(m_mutex){
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7a1b      	ldrb	r3, [r3, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <_ZN9iPHandler4lockEv+0x14>
			return false;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e003      	b.n	8001aaa <_ZN9iPHandler4lockEv+0x1c>
		}
		m_mutex = true;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	721a      	strb	r2, [r3, #8]
		return true;
 8001aa8:	2301      	movs	r3, #1
	}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_ZN9iPHandler6unlockEv>:


	bool unlock()
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
	{
		if(!m_mutex){
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7a1b      	ldrb	r3, [r3, #8]
 8001ac2:	f083 0301 	eor.w	r3, r3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <_ZN9iPHandler6unlockEv+0x1a>
			return false;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e003      	b.n	8001ad8 <_ZN9iPHandler6unlockEv+0x22>
		}
		m_mutex = false;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	721a      	strb	r2, [r3, #8]
		return true;
 8001ad6:	2301      	movs	r3, #1
	}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_ZN8ICM426888GYRO_CNFlsENS0_3ODREh>:
        constexpr uint32_t operator<<(uint8_t n, ODR odr)
        {
            return  n << static_cast<uint8_t> (odr);
        }
        constexpr uint32_t operator<<(ODR odr, uint8_t n)
        {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (odr) << n ;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
        }
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_ZN8ICM426888GYRO_CNFlsENS0_3FSREh>:
        constexpr uint32_t operator<<(uint8_t n, FSR fsr)
        {
            return  n << static_cast<uint8_t> (fsr);
        }   
        constexpr uint32_t operator<<( FSR fsr, uint8_t n)
        {
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (fsr) << n;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
        } 
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_ZN8ICM426889ACCEL_CNFlsENS0_3ODREh>:
        constexpr uint32_t operator<<(uint8_t n, ODR odr)
        {
            return  n << static_cast<uint8_t> (odr);
        }
        constexpr uint32_t operator<<( ODR odr, uint8_t n)
        {
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (odr) << n;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
        }
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <_ZN8ICM426889ACCEL_CNFlsENS0_3FSREh>:
        constexpr uint32_t operator<<(uint8_t n, FSR fsr)
        {
            return  n << static_cast<uint8_t> (fsr);
        } 
        constexpr uint32_t operator<<(FSR fsr, uint8_t n)
        {
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
            return  static_cast<uint8_t> (fsr) << n;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
        } 
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_ZN8ICM4268811FIFO_CONFIG13SET_FIFO_MODEENS_9FIFO_MODEE>:
    //FIFOconfig addresses and bits
	constexpr uint8_t FIFO_CONFIG_ADD = 0x16;
	namespace FIFO_CONFIG {
		constexpr uint8_t FIFO_MODE_POS = 0x06;
		constexpr uint8_t FIFO_MODE_MASK = static_cast<uint8_t>(0xC0  << FIFO_MODE_POS);
		constexpr uint8_t SET_FIFO_MODE(FIFO_MODE fifoMode) {
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
			return  (static_cast<uint8_t>(fifoMode) << FIFO_MODE_POS);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	019b      	lsls	r3, r3, #6
 8001b82:	b2db      	uxtb	r3, r3
		}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>:
    //Gyro config addresses and bits
    constexpr uint8_t GYRO_CONFIG0_ADD = 0x4F;
    namespace GYRO_CONFIG0 {
        constexpr uint8_t FS_SEL_POS = 0x05;
        constexpr uint8_t FS_SEL_MASK = 0x07  << FS_SEL_POS;
        constexpr uint8_t SET_FSR(uint8_t reg, GYRO_CNF::FSR fsr) {
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
            return  (reg & ~FS_SEL_MASK) | ( fsr << FS_SEL_POS);
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	b2dc      	uxtb	r4, r3
 8001ba4:	2105      	movs	r1, #5
 8001ba6:	6838      	ldr	r0, [r7, #0]
 8001ba8:	f7ff ffae 	bl	8001b08 <_ZN8ICM426888GYRO_CNFlsENS0_3FSREh>
 8001bac:	4603      	mov	r3, r0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4323      	orrs	r3, r4
 8001bb2:	b2db      	uxtb	r3, r3
        }
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd90      	pop	{r4, r7, pc}

08001bbc <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>:

        constexpr uint8_t ODR_POS = 0x00;
        constexpr uint8_t ODR_MASK = 0x0F  << ODR_POS;
        constexpr uint8_t SET_ODR(uint8_t reg, GYRO_CNF::ODR odr) {
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	71fb      	strb	r3, [r7, #7]
            return  (reg & ~ODR_MASK) | ( odr << ODR_POS);
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f023 030f 	bic.w	r3, r3, #15
 8001bce:	b2dc      	uxtb	r4, r3
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	6838      	ldr	r0, [r7, #0]
 8001bd4:	f7ff ff86 	bl	8001ae4 <_ZN8ICM426888GYRO_CNFlsENS0_3ODREh>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4323      	orrs	r3, r4
 8001bde:	b2db      	uxtb	r3, r3
        }
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd90      	pop	{r4, r7, pc}

08001be8 <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>:
    //Accel config addresses and bits
    constexpr uint8_t ACCEL_CONFIG0_ADD = 0x50;
    namespace ACCEL_CONFIG0 {
        constexpr uint8_t FS_SEL_POS = 0x05;
        constexpr uint8_t FS_SEL_MASK = 0x07  << FS_SEL_POS;
        constexpr uint8_t SET_FSR(uint8_t reg, ACCEL_CNF::FSR fsr) {
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
            return   (reg & ~FS_SEL_MASK)  | ( fsr << FS_SEL_POS);
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	b2dc      	uxtb	r4, r3
 8001bfc:	2105      	movs	r1, #5
 8001bfe:	6838      	ldr	r0, [r7, #0]
 8001c00:	f7ff ffa6 	bl	8001b50 <_ZN8ICM426889ACCEL_CNFlsENS0_3FSREh>
 8001c04:	4603      	mov	r3, r0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	4323      	orrs	r3, r4
 8001c0a:	b2db      	uxtb	r3, r3
        }
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}

08001c14 <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>:

        constexpr uint8_t ODR_POS = 0x00;
        constexpr uint8_t ODR_MASK = 0x0F  << ODR_POS;
        constexpr uint8_t SET_ODR(uint8_t reg, ACCEL_CNF::ODR odr) {
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
            return   (reg & ~ODR_MASK) | ( odr << ODR_POS);
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f023 030f 	bic.w	r3, r3, #15
 8001c26:	b2dc      	uxtb	r4, r3
 8001c28:	2100      	movs	r1, #0
 8001c2a:	6838      	ldr	r0, [r7, #0]
 8001c2c:	f7ff ff7e 	bl	8001b2c <_ZN8ICM426889ACCEL_CNFlsENS0_3ODREh>
 8001c30:	4603      	mov	r3, r0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	4323      	orrs	r3, r4
 8001c36:	b2db      	uxtb	r3, r3
        }
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}

08001c40 <_ZN4iIMUC1Ev>:
 * @brief Define un struct vacio para que se haga un struct herencia del mismo en los archivos de implementación. Esto es para dejar a la implementación la forma en obtener los  datos de la IMU. Por ejemplo, si se tiene 1 IMU con lectura sobre 1 solo eje vs 3 ejes. De esta forma también se podría usar esta interfaz para implementar acelerómetros.
 * 
 */
// struct iImu_data{};

class iIMU {
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <_ZN4iIMUC1Ev+0x1c>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	0800a2cc 	.word	0x0800a2cc

08001c60 <_ZN8ICM426889RegistersC1Ev>:
namespace ICM42688{

    constexpr uint16_t BUFFER_SIZE = 32;
    constexpr uint16_t IMU_DATA_BUFFER_SIZE = 16;

    struct Registers {
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2206      	movs	r2, #6
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2206      	movs	r2, #6
 8001c72:	705a      	strb	r2, [r3, #1]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2230      	movs	r2, #48	; 0x30
 8001c78:	709a      	strb	r2, [r3, #2]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	70da      	strb	r2, [r3, #3]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	711a      	strb	r2, [r3, #4]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	715a      	strb	r2, [r3, #5]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	719a      	strb	r2, [r3, #6]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_>:
#include "icm42688_utils.hpp"
#include "icm42688.hpp"

namespace ICM42688{

    icm42688::icm42688( Config& cnf, iPHandler* handler, gpio *cs,
 8001ca0:	b5b0      	push	{r4, r5, r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
        , m_handler(handler)
        , m_cs(cs)
        , m_i2cAdd(slaveAdd)
        , m_INT1(INT1)
        , m_INT2(INT2)
        , m_currentBankReg(bankRegister::BANK0)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ffc5 	bl	8001c40 <_ZN4iIMUC1Ev>
 8001cb6:	4a34      	ldr	r2, [pc, #208]	; (8001d88 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_+0xe8>)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	601a      	str	r2, [r3, #0]
        : imuDataBuffer()
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 f935 	bl	8002f30 <_ZN11circ_bufferI7IMUDataLm16EtEC1Ev>
        , m_cnf(cnf)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	f503 74e8 	add.w	r4, r3, #464	; 0x1d0
 8001cce:	4615      	mov	r5, r2
 8001cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cdc:	e884 0003 	stmia.w	r4, {r0, r1}
        , m_currentBankReg(bankRegister::BANK0)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ffba 	bl	8001c60 <_ZN8ICM426889RegistersC1Ev>
        , m_handler(handler)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
        , m_cs(cs)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        , m_i2cAdd(slaveAdd)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d02:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
        , m_INT1(INT1)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
        , m_INT2(INT2)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d12:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
        , m_currentBankReg(bankRegister::BANK0)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258

    {
        m_mode = COMM_MODE::BLCK;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
        m_gyroODRValue    = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f002 fb79 	bl	8004424 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 8001d32:	eef0 7a40 	vmov.f32	s15, s0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_gyroFSRValue    = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f002 fbce 	bl	80044e4 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 8001d48:	eef0 7a40 	vmov.f32	s15, s0
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	edc3 7a97 	vstr	s15, [r3, #604]	; 0x25c
        m_accelODRValue   = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 fbe7 	bl	800452c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 8001d5e:	eef0 7a40 	vmov.f32	s15, s0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
        m_accelFSRValue   = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f002 fc3c 	bl	80045ec <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 8001d74:	eef0 7a40 	vmov.f32	s15, s0
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264
    }
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bdb0      	pop	{r4, r5, r7, pc}
 8001d88:	0800a27c 	.word	0x0800a27c

08001d8c <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioE>:
        m_spiSet = true;
        //write_config();
        enable();
    }

    icm42688::icm42688(Config& cnf, iPHandler *handlerSpi, gpio *cs)
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af04      	add	r7, sp, #16
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
        : icm42688(cnf, handlerSpi, cs, 0xFF, nullptr, nullptr)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	9302      	str	r3, [sp, #8]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	23ff      	movs	r3, #255	; 0xff
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f7ff ff77 	bl	8001ca0 <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioEhS7_S7_>
    {
        m_spiSet = true;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
        //write_config();
        enable();
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 ff30 	bl	8002c20 <_ZN8ICM426888icm426886enableEv>
    }
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_ZN11PHandlerOptC1Ev>:
struct PHandlerOpt {
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	731a      	strb	r2, [r3, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	735a      	strb	r2, [r3, #13]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	739a      	strb	r2, [r3, #14]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>:
        enable();
    }


    iIMU_ST icm42688::set_bank_register(bankRegister bankReg)
    {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b088      	sub	sp, #32
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
        //iHANDLER_ST retHandler(iHANDLER_ST::OK);
        uint8_t bank;
        PHandlerOpt opt;
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ffdc 	bl	8001dca <_ZN11PHandlerOptC1Ev>

        if(m_currentBankReg != bankReg){
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d033      	beq.n	8001e86 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x88>

            bank = static_cast<uint8_t>(bankReg);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	77fb      	strb	r3, [r7, #31]
            opt.add = REG_BANK_SEL_ADD;
 8001e22:	2376      	movs	r3, #118	; 0x76
 8001e24:	733b      	strb	r3, [r7, #12]
            opt.size = 1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	737b      	strb	r3, [r7, #13]
            opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x3e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001e3a:	e002      	b.n	8001e42 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x44>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001e42:	613b      	str	r3, [r7, #16]
            m_TxBuffer[0] = bank;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7ffa      	ldrb	r2, [r7, #31]
 8001e48:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

            if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8001e64:	f107 020c 	add.w	r2, r7, #12
 8001e68:	4798      	blx	r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x80>
            	return iIMU_ST::ERROR_COMM;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e004      	b.n	8001e88 <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE+0x8a>
            }

            m_currentBankReg = bankReg;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
        }

        return iIMU_ST::OK;
 8001e86:	2300      	movs	r3, #0
    }
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_ZN8ICM426888icm426889save_dataEv>:

    /////////////////////////////////////// PUBLIC ///////////////////////////////////////

        
    iIMU_ST icm42688::save_data()
    {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
        iIMU_ST ret = iIMU_ST::OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
        iPHANDLER_ST retHandler(iPHANDLER_ST::OK);
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61bb      	str	r3, [r7, #24]
        PHandlerOpt opt;
 8001ea0:	f107 0308 	add.w	r3, r7, #8
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff90 	bl	8001dca <_ZN11PHandlerOptC1Ev>

        ret = set_bank_register(bankRegister::BANK0);
 8001eaa:	2100      	movs	r1, #0
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ffa6 	bl	8001dfe <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8001eb2:	61f8      	str	r0, [r7, #28]
        if( ret != iIMU_ST::OK){
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <_ZN8ICM426888icm426889save_dataEv+0x2e>
            return ret;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	e055      	b.n	8001f6a <_ZN8ICM426888icm426889save_dataEv+0xda>
        }
        

        opt.add = TEMP_DATA1_ADD;
 8001ebe:	231d      	movs	r3, #29
 8001ec0:	723b      	strb	r3, [r7, #8]
        opt.size = IMU_DATA_N_REGS;
 8001ec2:	230e      	movs	r3, #14
 8001ec4:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <_ZN8ICM426888icm426889save_dataEv+0x48>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8001ed6:	e002      	b.n	8001ede <_ZN8ICM426888icm426889save_dataEv+0x4e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001ede:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001ee6:	613b      	str	r3, [r7, #16]


        if(!m_handler->lock()){
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fdcd 	bl	8001a8e <_ZN9iPHandler4lockEv>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f083 0301 	eor.w	r3, r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <_ZN8ICM426888icm426889save_dataEv+0x74>
        	return iIMU_ST::ERROR_HANDLER_UNAVAILABLE;
 8001f00:	2305      	movs	r3, #5
 8001f02:	e032      	b.n	8001f6a <_ZN8ICM426888icm426889save_dataEv+0xda>
        }

        retHandler = m_handler->read_registers(opt);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f107 0108 	add.w	r1, r7, #8
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4798      	blx	r3
 8001f1c:	61b8      	str	r0, [r7, #24]
        if(retHandler != iPHANDLER_ST::OK){
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d004      	beq.n	8001f2e <_ZN8ICM426888icm426889save_dataEv+0x9e>
            return map_handler_ret_to_iIMU_ret(retHandler);
 8001f24:	69b8      	ldr	r0, [r7, #24]
 8001f26:	f000 ffdf 	bl	8002ee8 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	e01d      	b.n	8001f6a <_ZN8ICM426888icm426889save_dataEv+0xda>
        }
         

        if(m_mode == COMM_MODE::BLCK){
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d117      	bne.n	8001f68 <_ZN8ICM426888icm426889save_dataEv+0xd8>
        	memcpy(m_RxBuffer, m_handler->m_recvBuffer, opt.size);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f503 7006 	add.w	r0, r3, #536	; 0x218
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	7a7a      	ldrb	r2, [r7, #9]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f008 f91d 	bl	800a188 <memcpy>
            m_handler->unlock();
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fdae 	bl	8001ab6 <_ZN9iPHandler6unlockEv>
        	//load_data(dummyIMUData, m_RxBuffer);
            load_data(m_RxBuffer);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001f60:	4619      	mov	r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 ff48 	bl	8002df8 <_ZN8ICM426888icm426889load_dataEPh>
            //m_handler->m_mutex = false;
        }


        return ret;
 8001f68:	69fb      	ldr	r3, [r7, #28]
    }
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3720      	adds	r7, #32
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_ZN8ICM426888icm4268818save_data_callbackEv>:

    void icm42688::save_data_callback()
    {
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
        //IMUData dummyIMUData;
        load_data(m_handler->m_recvBuffer);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4619      	mov	r1, r3
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 ff37 	bl	8002df8 <_ZN8ICM426888icm426889load_dataEPh>
        m_handler->unlock();
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fd90 	bl	8001ab6 <_ZN9iPHandler6unlockEv>
        //m_handler->m_mutex = false;
    }
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_ZN8ICM426888icm4268814save_fifo_dataEh>:
    


    iIMU_ST icm42688::save_fifo_data(uint8_t qty)
    {
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	70fb      	strb	r3, [r7, #3]
				return iIMU_ST::ERROR_BUFFER;
			}
        }

        */
        return iIMU_ST::OK;
 8001faa:	2300      	movs	r3, #0
        
    }
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <_ZN8ICM426888icm4268823save_fifo_data_callbackEv>:

    void icm42688::save_fifo_data_callback()
    {
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
            dummyIMUData.temp   = convertTempFIFOData(mRxBuffer[FIFO_PACKET_SIZE*i + 13]);
            imuDataBuffer.write(dummyIMUData);
        }
        */
        //return;
    }
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <_ZN8ICM426888icm426889read_dataEP7IMUData>:


    iIMU_ST icm42688::read_data(IMUData *pData)
    {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
        if(imuDataBuffer.read(pData) == EXIT_OK){
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	6839      	ldr	r1, [r7, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 ffc5 	bl	8002f6c <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	bf0c      	ite	eq
 8001fe8:	2301      	moveq	r3, #1
 8001fea:	2300      	movne	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <_ZN8ICM426888icm426889read_dataEP7IMUData+0x2a>
            return iIMU_ST::OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <_ZN8ICM426888icm426889read_dataEP7IMUData+0x2c>
        }
        return iIMU_ST::ERROR_BUFFER;
 8001ff6:	2304      	movs	r3, #4
    }
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_ZN8ICM426888icm4268812set_gyro_odrEh>:


    iIMU_ST icm42688::set_gyro_odr(uint8_t odr) 
    {
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
        GYRO_CNF::ODR gyroNewODR = static_cast<GYRO_CNF::ODR> (odr);
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 8002010:	f107 0308 	add.w	r3, r7, #8
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fed8 	bl	8001dca <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 800201a:	2100      	movs	r1, #0
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff feee 	bl	8001dfe <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf14      	ite	ne
 8002028:	2301      	movne	r3, #1
 800202a:	2300      	moveq	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <_ZN8ICM426888icm4268812set_gyro_odrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 8002032:	2301      	movs	r3, #1
 8002034:	e04e      	b.n	80020d4 <_ZN8ICM426888icm4268812set_gyro_odrEh+0xd4>
        }
        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_ODR(m_reg.GYRO_CONFIG0, gyroNewODR);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 800203c:	69f9      	ldr	r1, [r7, #28]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fdbc 	bl	8001bbc <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>
 8002044:	4603      	mov	r3, r0
 8002046:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7efa      	ldrb	r2, [r7, #27]
 800204c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = GYRO_CONFIG0_ADD;
 8002050:	234f      	movs	r3, #79	; 0x4f
 8002052:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 8002054:	2301      	movs	r3, #1
 8002056:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <_ZN8ICM426888icm4268812set_gyro_odrEh+0x6a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002068:	e002      	b.n	8002070 <_ZN8ICM426888icm4268812set_gyro_odrEh+0x70>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002070:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8002078:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	3304      	adds	r3, #4
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8002092:	f107 0208 	add.w	r2, r7, #8
 8002096:	4798      	blx	r3
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	bf14      	ite	ne
 800209e:	2301      	movne	r3, #1
 80020a0:	2300      	moveq	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <_ZN8ICM426888icm4268812set_gyro_odrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e013      	b.n	80020d4 <_ZN8ICM426888icm4268812set_gyro_odrEh+0xd4>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7efa      	ldrb	r2, [r7, #27]
 80020b0:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_cnf.gyroODR = gyroNewODR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        m_gyroODRValue = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80020c2:	4618      	mov	r0, r3
 80020c4:	f002 f9ae 	bl	8004424 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 80020c8:	eef0 7a40 	vmov.f32	s15, s0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260

        return iIMU_ST::OK;
 80020d2:	2300      	movs	r3, #0
    }
 80020d4:	4618      	mov	r0, r3
 80020d6:	3720      	adds	r7, #32
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_ZN8ICM426888icm4268812set_gyro_fsrEh>:


    iIMU_ST icm42688::set_gyro_fsr(uint8_t fsr)
    {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
        GYRO_CNF::FSR gyroNewFSR = static_cast<GYRO_CNF::FSR> (fsr);
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 80020ec:	f107 0308 	add.w	r3, r7, #8
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fe6a 	bl	8001dca <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80020f6:	2100      	movs	r1, #0
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff fe80 	bl	8001dfe <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf14      	ite	ne
 8002104:	2301      	movne	r3, #1
 8002106:	2300      	moveq	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 800210e:	2301      	movs	r3, #1
 8002110:	e04e      	b.n	80021b0 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xd4>
        }

        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_FSR(m_reg.GYRO_CONFIG0, gyroNewFSR);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8002118:	69f9      	ldr	r1, [r7, #28]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fd38 	bl	8001b90 <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>
 8002120:	4603      	mov	r3, r0
 8002122:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7efa      	ldrb	r2, [r7, #27]
 8002128:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = GYRO_CONFIG0_ADD;
 800212c:	234f      	movs	r3, #79	; 0x4f
 800212e:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 8002130:	2301      	movs	r3, #1
 8002132:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x6a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002144:	e002      	b.n	800214c <_ZN8ICM426888icm4268812set_gyro_fsrEh+0x70>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800214c:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8002154:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3304      	adds	r3, #4
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 800216e:	f107 0208 	add.w	r2, r7, #8
 8002172:	4798      	blx	r3
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	bf14      	ite	ne
 800217a:	2301      	movne	r3, #1
 800217c:	2300      	moveq	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 8002184:	2301      	movs	r3, #1
 8002186:	e013      	b.n	80021b0 <_ZN8ICM426888icm4268812set_gyro_fsrEh+0xd4>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7efa      	ldrb	r2, [r7, #27]
 800218c:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_cnf.gyroFSR = gyroNewFSR; 
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        m_gyroODRValue = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800219e:	4618      	mov	r0, r3
 80021a0:	f002 f9a0 	bl	80044e4 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 80021a4:	eef0 7a40 	vmov.f32	s15, s0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260

        return iIMU_ST::OK;
 80021ae:	2300      	movs	r3, #0

    } 
 80021b0:	4618      	mov	r0, r3
 80021b2:	3720      	adds	r7, #32
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_ZN8ICM426888icm4268813set_accel_odrEh>:


    iIMU_ST icm42688::set_accel_odr(uint8_t odr)
    {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]
        ACCEL_CNF::ODR accelNewODR = static_cast<ACCEL_CNF::ODR> (odr);
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 80021c8:	f107 0308 	add.w	r3, r7, #8
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fdfc 	bl	8001dca <_ZN11PHandlerOptC1Ev>
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80021d2:	2100      	movs	r1, #0
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff fe12 	bl	8001dfe <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf14      	ite	ne
 80021e0:	2301      	movne	r3, #1
 80021e2:	2300      	moveq	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <_ZN8ICM426888icm4268813set_accel_odrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e04e      	b.n	800228c <_ZN8ICM426888icm4268813set_accel_odrEh+0xd4>
        }

        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_ODR(m_reg.ACCEL_CONFIG0, accelNewODR);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 80021f4:	69f9      	ldr	r1, [r7, #28]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fd0c 	bl	8001c14 <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>
 80021fc:	4603      	mov	r3, r0
 80021fe:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7efa      	ldrb	r2, [r7, #27]
 8002204:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = ACCEL_CONFIG0_ADD;
 8002208:	2350      	movs	r3, #80	; 0x50
 800220a:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 800220c:	2301      	movs	r3, #1
 800220e:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <_ZN8ICM426888icm4268813set_accel_odrEh+0x6a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002220:	e002      	b.n	8002228 <_ZN8ICM426888icm4268813set_accel_odrEh+0x70>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002228:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8002230:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3304      	adds	r3, #4
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 800224a:	f107 0208 	add.w	r2, r7, #8
 800224e:	4798      	blx	r3
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	bf14      	ite	ne
 8002256:	2301      	movne	r3, #1
 8002258:	2300      	moveq	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <_ZN8ICM426888icm4268813set_accel_odrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 8002260:	2301      	movs	r3, #1
 8002262:	e013      	b.n	800228c <_ZN8ICM426888icm4268813set_accel_odrEh+0xd4>
        }

        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7efa      	ldrb	r2, [r7, #27]
 8002268:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        m_cnf.accelODR = accelNewODR; 
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        m_accelODRValue = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800227a:	4618      	mov	r0, r3
 800227c:	f002 f956 	bl	800452c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 8002280:	eef0 7a40 	vmov.f32	s15, s0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268

        return iIMU_ST::OK;
 800228a:	2300      	movs	r3, #0
    }
 800228c:	4618      	mov	r0, r3
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <_ZN8ICM426888icm4268813set_accel_fsrEh>:


    iIMU_ST icm42688::set_accel_fsr(uint8_t fsr)
    {
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
        ACCEL_CNF::FSR accelNewFSR = static_cast<ACCEL_CNF::FSR> (fsr);
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	61fb      	str	r3, [r7, #28]
        PHandlerOpt opt;
 80022a4:	f107 0308 	add.w	r3, r7, #8
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fd8e 	bl	8001dca <_ZN11PHandlerOptC1Ev>
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80022ae:	2100      	movs	r1, #0
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff fda4 	bl	8001dfe <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf14      	ite	ne
 80022bc:	2301      	movne	r3, #1
 80022be:	2300      	moveq	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <_ZN8ICM426888icm4268813set_accel_fsrEh+0x36>
            return iIMU_ST::ERROR_COMM;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e04e      	b.n	8002368 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xd4>
        }

        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_FSR(m_reg.ACCEL_CONFIG0, accelNewFSR);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 80022d0:	69f9      	ldr	r1, [r7, #28]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fc88 	bl	8001be8 <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>
 80022d8:	4603      	mov	r3, r0
 80022da:	76fb      	strb	r3, [r7, #27]
        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7efa      	ldrb	r2, [r7, #27]
 80022e0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

        opt.add = ACCEL_CONFIG0_ADD;
 80022e4:	2350      	movs	r3, #80	; 0x50
 80022e6:	723b      	strb	r3, [r7, #8]
        opt.size = 1;
 80022e8:	2301      	movs	r3, #1
 80022ea:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <_ZN8ICM426888icm4268813set_accel_fsrEh+0x6a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80022fc:	e002      	b.n	8002304 <_ZN8ICM426888icm4268813set_accel_fsrEh+0x70>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002304:	60fb      	str	r3, [r7, #12]
        opt.mode = m_mode;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 800230c:	613b      	str	r3, [r7, #16]

        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	3304      	adds	r3, #4
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8002326:	f107 0208 	add.w	r2, r7, #8
 800232a:	4798      	blx	r3
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	bf14      	ite	ne
 8002332:	2301      	movne	r3, #1
 8002334:	2300      	moveq	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xac>
            return iIMU_ST::ERROR_COMM;
 800233c:	2301      	movs	r3, #1
 800233e:	e013      	b.n	8002368 <_ZN8ICM426888icm4268813set_accel_fsrEh+0xd4>
        }

        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	7efa      	ldrb	r2, [r7, #27]
 8002344:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        m_cnf.accelFSR = accelNewFSR; 
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
        m_accelFSRValue = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8002356:	4618      	mov	r0, r3
 8002358:	f002 f948 	bl	80045ec <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 800235c:	eef0 7a40 	vmov.f32	s15, s0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264

        return iIMU_ST::OK;
 8002366:	2300      	movs	r3, #0
    }
 8002368:	4618      	mov	r0, r3
 800236a:	3720      	adds	r7, #32
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <_ZN8ICM426888icm4268819get_accel_odr_valueEv>:

    float icm42688::get_accel_odr_value()
    {
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
        return m_accelODRValue;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800237e:	ee07 3a90 	vmov	s15, r3
    }
 8002382:	eeb0 0a67 	vmov.f32	s0, s15
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <_ZN8ICM426888icm4268819get_accel_fsr_valueEv>:
    float icm42688::get_accel_fsr_value()
    {
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
        return m_accelFSRValue;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 800239e:	ee07 3a90 	vmov	s15, r3
    }
 80023a2:	eeb0 0a67 	vmov.f32	s0, s15
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_ZN8ICM426888icm4268818get_gyro_odr_valueEv>:
    float icm42688::get_gyro_odr_value() 
    {
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
        return m_gyroODRValue;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80023be:	ee07 3a90 	vmov	s15, r3
    }
 80023c2:	eeb0 0a67 	vmov.f32	s0, s15
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_ZN8ICM426888icm4268818get_gyro_fsr_valueEv>:
    float icm42688::get_gyro_fsr_value() 
    {
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
        return m_gyroFSRValue;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 80023de:	ee07 3a90 	vmov	s15, r3
    }
 80023e2:	eeb0 0a67 	vmov.f32	s0, s15
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_ZN8ICM426888icm4268820get_accel_resolutionEv>:
    
    float icm42688::get_accel_resolution()
    {
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
        return m_accelFSRValue/(1<<15);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	edd3 7a99 	vldr	s15, [r3, #612]	; 0x264
 80023fe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002418 <_ZN8ICM426888icm4268820get_accel_resolutionEv+0x28>
 8002402:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002406:	eef0 7a66 	vmov.f32	s15, s13
    }
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	47000000 	.word	0x47000000

0800241c <_ZN8ICM426888icm4268819get_gyro_resolutionEv>:
    
    float icm42688::get_gyro_resolution()
    {
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
        return m_gyroFSRValue/(1<<15);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 800242a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002444 <_ZN8ICM426888icm4268819get_gyro_resolutionEv+0x28>
 800242e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002432:	eef0 7a66 	vmov.f32	s15, s13
    }
 8002436:	eeb0 0a67 	vmov.f32	s0, s15
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	47000000 	.word	0x47000000

08002448 <_ZN8ICM426888icm4268815convertGyroDataEhh>:



    float icm42688::convertGyroData(uint8_t rawGyroH, uint8_t rawGyroL)
    {
 8002448:	b580      	push	{r7, lr}
 800244a:	ed2d 8b02 	vpush	{d8}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
 8002458:	4613      	mov	r3, r2
 800245a:	70bb      	strb	r3, [r7, #2]
        int16_t gyro_data = (rawGyroH << 8)  | rawGyroL;
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	b21a      	sxth	r2, r3
 8002462:	78bb      	ldrb	r3, [r7, #2]
 8002464:	b21b      	sxth	r3, r3
 8002466:	4313      	orrs	r3, r2
 8002468:	81fb      	strh	r3, [r7, #14]
        return gyro_data * get_gyro_resolution();
 800246a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3340      	adds	r3, #64	; 0x40
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	4798      	blx	r3
 8002482:	eef0 7a40 	vmov.f32	s15, s0
 8002486:	ee68 7a27 	vmul.f32	s15, s16, s15

    }
 800248a:	eeb0 0a67 	vmov.f32	s0, s15
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	ecbd 8b02 	vpop	{d8}
 8002496:	bd80      	pop	{r7, pc}

08002498 <_ZN8ICM426888icm4268816convertAccelDataEhh>:

    float icm42688::convertAccelData(uint8_t rawAccelH, uint8_t rawAccelL)
    {
 8002498:	b580      	push	{r7, lr}
 800249a:	ed2d 8b02 	vpush	{d8}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	70fb      	strb	r3, [r7, #3]
 80024a8:	4613      	mov	r3, r2
 80024aa:	70bb      	strb	r3, [r7, #2]
        int16_t gyro_data = (rawAccelH << 8)  | rawAccelL;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	b21a      	sxth	r2, r3
 80024b2:	78bb      	ldrb	r3, [r7, #2]
 80024b4:	b21b      	sxth	r3, r3
 80024b6:	4313      	orrs	r3, r2
 80024b8:	81fb      	strh	r3, [r7, #14]
        return gyro_data * get_accel_resolution();
 80024ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	333c      	adds	r3, #60	; 0x3c
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
 80024d2:	eef0 7a40 	vmov.f32	s15, s0
 80024d6:	ee68 7a27 	vmul.f32	s15, s16, s15
    }
 80024da:	eeb0 0a67 	vmov.f32	s0, s15
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	ecbd 8b02 	vpop	{d8}
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <_ZN8ICM426888icm4268812write_configEv>:

    iIMU_ST icm42688::write_config()
    {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
        iIMU_ST ret = iIMU_ST::OK; 
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
        
        
        if( (ret = write_config_accel_gyro()) != iIMU_ST::OK){
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f82c 	bl	8002552 <_ZN8ICM426888icm4268823write_config_accel_gyroEv>
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	bf14      	ite	ne
 8002502:	2301      	movne	r3, #1
 8002504:	2300      	moveq	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <_ZN8ICM426888icm4268812write_configEv+0x28>
            return ret;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	e01c      	b.n	800254a <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        if( (ret = write_config_FIFO()) != iIMU_ST::OK){
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f8eb 	bl	80026ec <_ZN8ICM426888icm4268817write_config_FIFOEv>
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	bf14      	ite	ne
 800251e:	2301      	movne	r3, #1
 8002520:	2300      	moveq	r3, #0
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <_ZN8ICM426888icm4268812write_configEv+0x44>
            return ret;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	e00e      	b.n	800254a <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        if( (ret = write_config_int()) != iIMU_ST::OK){
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f9d5 	bl	80028dc <_ZN8ICM426888icm4268816write_config_intEv>
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	bf14      	ite	ne
 800253a:	2301      	movne	r3, #1
 800253c:	2300      	moveq	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <_ZN8ICM426888icm4268812write_configEv+0x60>
            return ret;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	e000      	b.n	800254a <_ZN8ICM426888icm4268812write_configEv+0x62>
        }

        return ret;
 8002548:	68fb      	ldr	r3, [r7, #12]
        
    }
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_ZN8ICM426888icm4268823write_config_accel_gyroEv>:

    iIMU_ST icm42688::write_config_accel_gyro()
    {
 8002552:	b580      	push	{r7, lr}
 8002554:	b088      	sub	sp, #32
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 800255a:	f107 030c 	add.w	r3, r7, #12
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fc33 	bl	8001dca <_ZN11PHandlerOptC1Ev>
        uint8_t new_GYRO_CONFIG0;
        uint8_t new_ACCEL_CONFIG0;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8002564:	2100      	movs	r1, #0
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff fc49 	bl	8001dfe <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	bf14      	ite	ne
 8002572:	2301      	movne	r3, #1
 8002574:	2300      	moveq	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 800257c:	2301      	movs	r3, #1
 800257e:	e0b1      	b.n	80026e4 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }


        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_FSR(m_reg.GYRO_CONFIG0, m_cnf.gyroFSR);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 2238 	ldrb.w	r2, [r3, #568]	; 0x238
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800258c:	4619      	mov	r1, r3
 800258e:	4610      	mov	r0, r2
 8002590:	f7ff fafe 	bl	8001b90 <_ZN8ICM4268812GYRO_CONFIG07SET_FSREhNS_8GYRO_CNF3FSRE>
 8002594:	4603      	mov	r3, r0
 8002596:	77fb      	strb	r3, [r7, #31]
        new_GYRO_CONFIG0 = GYRO_CONFIG0::SET_ODR(new_GYRO_CONFIG0, m_cnf.gyroODR);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 800259e:	7ffb      	ldrb	r3, [r7, #31]
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fb0a 	bl	8001bbc <_ZN8ICM4268812GYRO_CONFIG07SET_ODREhNS_8GYRO_CNF3ODRE>
 80025a8:	4603      	mov	r3, r0
 80025aa:	77fb      	strb	r3, [r7, #31]
        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_FSR(m_reg.ACCEL_CONFIG0, m_cnf.accelFSR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 2239 	ldrb.w	r2, [r3, #569]	; 0x239
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f7ff fb14 	bl	8001be8 <_ZN8ICM4268813ACCEL_CONFIG07SET_FSREhNS_9ACCEL_CNF3FSRE>
 80025c0:	4603      	mov	r3, r0
 80025c2:	77bb      	strb	r3, [r7, #30]
        new_ACCEL_CONFIG0 = ACCEL_CONFIG0::SET_ODR(new_ACCEL_CONFIG0, m_cnf.accelODR);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 80025ca:	7fbb      	ldrb	r3, [r7, #30]
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fb20 	bl	8001c14 <_ZN8ICM4268813ACCEL_CONFIG07SET_ODREhNS_9ACCEL_CNF3ODRE>
 80025d4:	4603      	mov	r3, r0
 80025d6:	77bb      	strb	r3, [r7, #30]


        //m_TxBuffer[1] = new_ACCEL_CONFIG0;

        opt.size = 1;
 80025d8:	2301      	movs	r3, #1
 80025da:	737b      	strb	r3, [r7, #13]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x9c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80025ec:	e002      	b.n	80025f4 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0xa2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80025f4:	613b      	str	r3, [r7, #16]
        opt.mode = m_mode;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80025fc:	617b      	str	r3, [r7, #20]

        opt.add = GYRO_CONFIG0_ADD;
 80025fe:	234f      	movs	r3, #79	; 0x4f
 8002600:	733b      	strb	r3, [r7, #12]
        m_TxBuffer[0] = new_GYRO_CONFIG0;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7ffa      	ldrb	r2, [r7, #31]
 8002606:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	3304      	adds	r3, #4
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8002622:	f107 020c 	add.w	r2, r7, #12
 8002626:	4798      	blx	r3
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0xea>
            return iIMU_ST::ERROR_COMM;
 8002638:	2301      	movs	r3, #1
 800263a:	e053      	b.n	80026e4 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }

        m_TxBuffer[0] = new_ACCEL_CONFIG0;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7fba      	ldrb	r2, [r7, #30]
 8002640:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
        opt.add = ACCEL_CONFIG0_ADD;
 8002644:	2350      	movs	r3, #80	; 0x50
 8002646:	733b      	strb	r3, [r7, #12]
        if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3304      	adds	r3, #4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8002660:	f107 020c 	add.w	r2, r7, #12
 8002664:	4798      	blx	r3
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x128>
            return iIMU_ST::ERROR_COMM;
 8002676:	2301      	movs	r3, #1
 8002678:	e034      	b.n	80026e4 <_ZN8ICM426888icm4268823write_config_accel_gyroEv+0x192>
        }

        m_reg.GYRO_CONFIG0 = new_GYRO_CONFIG0;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	7ffa      	ldrb	r2, [r7, #31]
 800267e:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
        m_reg.ACCEL_CONFIG0 = new_ACCEL_CONFIG0;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	7fba      	ldrb	r2, [r7, #30]
 8002686:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
        
        m_gyroODRValue = map_gyro_ODR_CNF_to_ODR(m_cnf.gyroODR);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8002690:	4618      	mov	r0, r3
 8002692:	f001 fec7 	bl	8004424 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>
 8002696:	eef0 7a40 	vmov.f32	s15, s0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_gyroODRValue = map_gyro_FSR_CNF_to_FSR(m_cnf.gyroFSR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80026a6:	4618      	mov	r0, r3
 80026a8:	f001 ff1c 	bl	80044e4 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>
 80026ac:	eef0 7a40 	vmov.f32	s15, s0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	edc3 7a98 	vstr	s15, [r3, #608]	; 0x260
        m_accelODRValue = map_accel_ODR_CNF_to_ODR(m_cnf.accelODR);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80026bc:	4618      	mov	r0, r3
 80026be:	f001 ff35 	bl	800452c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>
 80026c2:	eef0 7a40 	vmov.f32	s15, s0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
        m_accelFSRValue = map_accel_FSR_CNF_to_FSR(m_cnf.accelFSR);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80026d2:	4618      	mov	r0, r3
 80026d4:	f001 ff8a 	bl	80045ec <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>
 80026d8:	eef0 7a40 	vmov.f32	s15, s0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264

        return iIMU_ST::OK;
 80026e2:	2300      	movs	r3, #0
    }
 80026e4:	4618      	mov	r0, r3
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <_ZN8ICM426888icm4268817write_config_FIFOEv>:
    
    
    iIMU_ST icm42688::write_config_FIFO()
    {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fb66 	bl	8001dca <_ZN11PHandlerOptC1Ev>
        uint8_t new_INTF_CONFIG0;
        uint8_t new_FIFO_CONFIG;
        uint8_t new_FIFO_CONFIG1, new_FIFO_CONFIG2, new_FIFO_CONFIG3;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 80026fe:	2100      	movs	r1, #0
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff fb7c 	bl	8001dfe <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf14      	ite	ne
 800270c:	2301      	movne	r3, #1
 800270e:	2300      	moveq	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <_ZN8ICM426888icm4268817write_config_FIFOEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 8002716:	2301      	movs	r3, #1
 8002718:	e0dc      	b.n	80028d4 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }


        // Configuracion de registro INTF_CONFIG0
        opt.add = INTF_CONFIG0_ADD;
 800271a:	234c      	movs	r3, #76	; 0x4c
 800271c:	733b      	strb	r3, [r7, #12]
        opt.size = 1;
 800271e:	2301      	movs	r3, #1
 8002720:	737b      	strb	r3, [r7, #13]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x48>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002732:	e002      	b.n	800273a <_ZN8ICM426888icm4268817write_config_FIFOEv+0x4e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800273a:	613b      	str	r3, [r7, #16]
        opt.mode = m_mode;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8002742:	617b      	str	r3, [r7, #20]

        new_INTF_CONFIG0 = m_reg.INTF_CONFIG0 | FIFO_CNF::FIFO_COUNT_REC;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 800274a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800274e:	b2db      	uxtb	r3, r3
 8002750:	72fb      	strb	r3, [r7, #11]
        if(m_handler->write_registers(&new_INTF_CONFIG0, opt) != iPHANDLER_ST::OK){
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3304      	adds	r3, #4
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f107 020c 	add.w	r2, r7, #12
 8002768:	f107 010b 	add.w	r1, r7, #11
 800276c:	4798      	blx	r3
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf14      	ite	ne
 8002774:	2301      	movne	r3, #1
 8002776:	2300      	moveq	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x96>
            return iIMU_ST::ERROR_COMM;
 800277e:	2301      	movs	r3, #1
 8002780:	e0a8      	b.n	80028d4 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }
        m_reg.INTF_CONFIG0 = new_INTF_CONFIG0;
 8002782:	7afa      	ldrb	r2, [r7, #11]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a

        // Configuracion de registro FIFO_CONFIG
        opt.add = FIFO_CONFIG_ADD;
 800278a:	2316      	movs	r3, #22
 800278c:	733b      	strb	r3, [r7, #12]
        new_FIFO_CONFIG = FIFO_CONFIG::SET_FIFO_MODE(m_cnf.fifoCnf.mode);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff f9ed 	bl	8001b74 <_ZN8ICM4268811FIFO_CONFIG13SET_FIFO_MODEENS_9FIFO_MODEE>
 800279a:	4603      	mov	r3, r0
 800279c:	72bb      	strb	r3, [r7, #10]
        if(m_handler->write_registers(&new_FIFO_CONFIG, opt) != iPHANDLER_ST::OK){
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3304      	adds	r3, #4
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f107 020c 	add.w	r2, r7, #12
 80027b4:	f107 010a 	add.w	r1, r7, #10
 80027b8:	4798      	blx	r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf14      	ite	ne
 80027c0:	2301      	movne	r3, #1
 80027c2:	2300      	moveq	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <_ZN8ICM426888icm4268817write_config_FIFOEv+0xe2>
            return iIMU_ST::ERROR_COMM;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e082      	b.n	80028d4 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
        }        
        m_reg.FIFO_CONFIG = new_FIFO_CONFIG;
 80027ce:	7aba      	ldrb	r2, [r7, #10]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b


        // Configuracion de los registros FIFO_CONFIG1, FIFO_CONFIG2 y FIFO_CONFIG3
        if(m_cnf.fifoCnf.mode != FIFO_MODE::BYPASS){
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d078      	beq.n	80028d2 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e6>
        	//Sets packets and watermark
        	new_FIFO_CONFIG1 = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	77fb      	strb	r3, [r7, #31]
        	new_FIFO_CONFIG1 = FIFO_CNF::FIFO_TEMP_EN | FIFO_CNF::FIFO_GYRO_EN | FIFO_CNF::FIFO_ACCEL_EN;
 80027e4:	2307      	movs	r3, #7
 80027e6:	77fb      	strb	r3, [r7, #31]
        	new_FIFO_CONFIG2 = m_cnf.fifoCnf.watermark;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 80027ee:	77bb      	strb	r3, [r7, #30]
        	new_FIFO_CONFIG3 = m_cnf.fifoCnf.watermark >> 8;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8b3 31e0 	ldrh.w	r3, [r3, #480]	; 0x1e0
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	777b      	strb	r3, [r7, #29]

            
             opt.size = 1;
 80027fc:	2301      	movs	r3, #1
 80027fe:	737b      	strb	r3, [r7, #13]

            opt.add = FIFO_CONFIG1_ADD;
 8002800:	235f      	movs	r3, #95	; 0x5f
 8002802:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG1;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7ffa      	ldrb	r2, [r7, #31]
 8002808:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
            //m_TxBuffer[1] = new_FIFO_CONFIG2;
            //m_TxBuffer[2] = new_FIFO_CONFIG3;

            if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3304      	adds	r3, #4
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8002824:	f107 020c 	add.w	r2, r7, #12
 8002828:	4798      	blx	r3
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf14      	ite	ne
 8002830:	2301      	movne	r3, #1
 8002832:	2300      	moveq	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <_ZN8ICM426888icm4268817write_config_FIFOEv+0x152>
                return iIMU_ST::ERROR_COMM;
 800283a:	2301      	movs	r3, #1
 800283c:	e04a      	b.n	80028d4 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            opt.add = FIFO_CONFIG2_ADD;
 800283e:	2360      	movs	r3, #96	; 0x60
 8002840:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	7fba      	ldrb	r2, [r7, #30]
 8002846:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
             if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3304      	adds	r3, #4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 8002862:	f107 020c 	add.w	r2, r7, #12
 8002866:	4798      	blx	r3
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	bf14      	ite	ne
 800286e:	2301      	movne	r3, #1
 8002870:	2300      	moveq	r3, #0
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <_ZN8ICM426888icm4268817write_config_FIFOEv+0x190>
                return iIMU_ST::ERROR_COMM;
 8002878:	2301      	movs	r3, #1
 800287a:	e02b      	b.n	80028d4 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            opt.add = FIFO_CONFIG3_ADD;
 800287c:	2361      	movs	r3, #97	; 0x61
 800287e:	733b      	strb	r3, [r7, #12]
            m_TxBuffer[0] = new_FIFO_CONFIG3;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7f7a      	ldrb	r2, [r7, #29]
 8002884:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
             if(m_handler->write_registers(m_TxBuffer, opt) != iPHANDLER_ST::OK){
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3304      	adds	r3, #4
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	f502 71fc 	add.w	r1, r2, #504	; 0x1f8
 80028a0:	f107 020c 	add.w	r2, r7, #12
 80028a4:	4798      	blx	r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf14      	ite	ne
 80028ac:	2301      	movne	r3, #1
 80028ae:	2300      	moveq	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1ce>
                return iIMU_ST::ERROR_COMM;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e00c      	b.n	80028d4 <_ZN8ICM426888icm4268817write_config_FIFOEv+0x1e8>
            }

            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7ffa      	ldrb	r2, [r7, #31]
 80028be:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7fba      	ldrb	r2, [r7, #30]
 80028c6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
            m_reg.FIFO_CONFIG1 = new_FIFO_CONFIG3;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7f7a      	ldrb	r2, [r7, #29]
 80028ce:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
        }

        return iIMU_ST::OK;
 80028d2:	2300      	movs	r3, #0
    }
 80028d4:	4618      	mov	r0, r3
 80028d6:	3720      	adds	r7, #32
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <_ZN8ICM426888icm4268816write_config_intEv>:


    iIMU_ST icm42688::write_config_int()
    {
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	f2ad 5d2c 	subw	sp, sp, #1324	; 0x52c
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80028e8:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80028ec:	6018      	str	r0, [r3, #0]

        PHandlerOpt opt;
 80028ee:	f107 030c 	add.w	r3, r7, #12
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fa69 	bl	8001dca <_ZN11PHandlerOptC1Ev>
        uint8_t new_INT_CONFIG = 0x00;
 80028f8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80028fc:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
        uint8_t new_INT_SOURCE0;
        uint8_t new_INT_SOURCE1;

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8002904:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002908:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800290c:	2100      	movs	r1, #0
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	f7ff fa75 	bl	8001dfe <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	bf14      	ite	ne
 800291a:	2301      	movne	r3, #1
 800291c:	2300      	moveq	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <_ZN8ICM426888icm4268816write_config_intEv+0x4c>
            return iIMU_ST::ERROR_COMM;
 8002924:	2301      	movs	r3, #1
 8002926:	e174      	b.n	8002c12 <_ZN8ICM426888icm4268816write_config_intEv+0x336>
        }
        
        opt.size = 1;
 8002928:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800292c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002930:	2201      	movs	r2, #1
 8002932:	705a      	strb	r2, [r3, #1]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002934:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002938:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002942:	2b00      	cmp	r3, #0
 8002944:	d007      	beq.n	8002956 <_ZN8ICM426888icm4268816write_config_intEv+0x7a>
 8002946:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800294a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002954:	e006      	b.n	8002964 <_ZN8ICM426888icm4268816write_config_intEv+0x88>
 8002956:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800295a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002964:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8002968:	f2a2 521c 	subw	r2, r2, #1308	; 0x51c
 800296c:	6053      	str	r3, [r2, #4]
        opt.mode = m_mode;
 800296e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002972:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 800297c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002980:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002984:	609a      	str	r2, [r3, #8]


    	if(m_cnf.intCnf.int1Source != INT_SOURCE::DISABLED){
 8002986:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800298a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002998:	f000 80bb 	beq.w	8002b12 <_ZN8ICM426888icm4268816write_config_intEv+0x236>
    		new_INT_CONFIG |= static_cast<uint8_t>(m_cnf.intCnf.int1Mode);
 800299c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80029a0:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80029b0:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80029be:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 80029c2:	701a      	strb	r2, [r3, #0]
    		new_INT_SOURCE0 = (1 << static_cast<uint8_t>(m_cnf.intCnf.int1Source ));
 80029c4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80029c8:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	2301      	movs	r3, #1
 80029d8:	4093      	lsls	r3, r2
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80029e0:	f2a3 531e 	subw	r3, r3, #1310	; 0x51e
 80029e4:	701a      	strb	r2, [r3, #0]
            
            opt.add = INT_SOURCE0_ADD;
 80029e6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80029ea:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80029ee:	2265      	movs	r2, #101	; 0x65
 80029f0:	701a      	strb	r2, [r3, #0]
            if(m_handler->write_registers(&new_INT_SOURCE0, opt) != iPHANDLER_ST::OK){
 80029f2:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80029f6:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002a00:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a04:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3304      	adds	r3, #4
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f107 020c 	add.w	r2, r7, #12
 8002a18:	f107 010a 	add.w	r1, r7, #10
 8002a1c:	4798      	blx	r3
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf14      	ite	ne
 8002a24:	2301      	movne	r3, #1
 8002a26:	2300      	moveq	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <_ZN8ICM426888icm4268816write_config_intEv+0x156>
                return iIMU_ST::ERROR_COMM;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0ef      	b.n	8002c12 <_ZN8ICM426888icm4268816write_config_intEv+0x336>
            }
            switch(m_cnf.intCnf.int1Source){
 8002a32:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a36:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d034      	beq.n	8002aae <_ZN8ICM426888icm4268816write_config_intEv+0x1d2>
            default:
            case INT_SOURCE::DATA_RDY:
            	m_INT1->interrupt_handler = std::bind(&icm42688::save_data, *this);
 8002a44:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a48:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002a52:	461c      	mov	r4, r3
 8002a54:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a58:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a64:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8002a68:	2201      	movs	r2, #1
 8002a6a:	605a      	str	r2, [r3, #4]
 8002a6c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a70:	f5a3 7126 	sub.w	r1, r3, #664	; 0x298
 8002a74:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a78:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a82:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a86:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a8a:	f2a3 500c 	subw	r0, r3, #1292	; 0x50c
 8002a8e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002a92:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002a96:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	f000 fae1 	bl	8003062 <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 8002aa0:	f107 031c 	add.w	r3, r7, #28
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f000 faff 	bl	80030aa <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>
				break;
 8002aac:	e031      	b.n	8002b12 <_ZN8ICM426888icm4268816write_config_intEv+0x236>
            case INT_SOURCE::FIFO_THR:
            	m_INT1->interrupt_handler = std::bind(&icm42688::save_fifo_data, *this, m_cnf.fifoCnf.watermark);
 8002aae:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002ab2:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002abc:	461c      	mov	r4, r3
 8002abe:	4a57      	ldr	r2, [pc, #348]	; (8002c1c <_ZN8ICM426888icm4268816write_config_intEv+0x340>)
 8002ac0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8002ac4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ac8:	e883 0003 	stmia.w	r3, {r0, r1}
 8002acc:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8002ad0:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8002ad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ad8:	e883 0003 	stmia.w	r3, {r0, r1}
 8002adc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002ae0:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002aea:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8002aee:	f5a2 7022 	sub.w	r0, r2, #648	; 0x288
 8002af2:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8002af6:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 8002afa:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	f000 fbef 	bl	80032e2 <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISD_EEE5valueESB_JDpT0_EE4typeEOSB_DpOSI_>
 8002b04:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	f000 fc05 	bl	800331a <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>
					break;
 8002b10:	bf00      	nop
            }
    	}

    	if(m_cnf.intCnf.int2Source != INT_SOURCE::DISABLED){
 8002b12:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b16:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b24:	d04e      	beq.n	8002bc4 <_ZN8ICM426888icm4268816write_config_intEv+0x2e8>
    		new_INT_CONFIG |= (static_cast<uint8_t>(m_cnf.intCnf.int2Mode) << 3);
 8002b26:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b2a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	b25a      	sxtb	r2, r3
 8002b3a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b3e:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	b25b      	sxtb	r3, r3
 8002b46:	4313      	orrs	r3, r2
 8002b48:	b25b      	sxtb	r3, r3
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b50:	f2a3 531d 	subw	r3, r3, #1309	; 0x51d
 8002b54:	701a      	strb	r2, [r3, #0]
    		new_INT_SOURCE1 = (1 << static_cast<uint8_t>(m_cnf.intCnf.int2Source ));
 8002b56:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b5a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	2301      	movs	r3, #1
 8002b6a:	4093      	lsls	r3, r2
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b72:	f2a3 531f 	subw	r3, r3, #1311	; 0x51f
 8002b76:	701a      	strb	r2, [r3, #0]
            
            opt.add = INT_SOURCE1_ADD;
 8002b78:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b7c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002b80:	2266      	movs	r2, #102	; 0x66
 8002b82:	701a      	strb	r2, [r3, #0]
            if(m_handler->write_registers(&new_INT_SOURCE1, opt) != iPHANDLER_ST::OK){
 8002b84:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b88:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002b92:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b96:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f107 020c 	add.w	r2, r7, #12
 8002baa:	f107 0109 	add.w	r1, r7, #9
 8002bae:	4798      	blx	r3
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf14      	ite	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	2300      	moveq	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <_ZN8ICM426888icm4268816write_config_intEv+0x2e8>
                return iIMU_ST::ERROR_COMM;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e026      	b.n	8002c12 <_ZN8ICM426888icm4268816write_config_intEv+0x336>
            }  
		}

        //Enables watermark interrupt on INT1
        opt.add = INT_CONFIG_ADD;
 8002bc4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002bc8:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002bcc:	2214      	movs	r2, #20
 8002bce:	701a      	strb	r2, [r3, #0]
        if(m_handler->write_registers(&new_INT_CONFIG, opt) != iPHANDLER_ST::OK){
 8002bd0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002bd4:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002bde:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002be2:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f107 020c 	add.w	r2, r7, #12
 8002bf6:	f107 010b 	add.w	r1, r7, #11
 8002bfa:	4798      	blx	r3
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <_ZN8ICM426888icm4268816write_config_intEv+0x334>
            return iIMU_ST::ERROR_COMM;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <_ZN8ICM426888icm4268816write_config_intEv+0x336>
        } 

        return iIMU_ST::OK;
 8002c10:	2300      	movs	r3, #0
    }
 8002c12:	4618      	mov	r0, r3
 8002c14:	f207 572c 	addw	r7, r7, #1324	; 0x52c
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd90      	pop	{r4, r7, pc}
 8002c1c:	0800a258 	.word	0x0800a258

08002c20 <_ZN8ICM426888icm426886enableEv>:


    iIMU_ST icm42688::enable()
    {        
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8002c28:	f107 0308 	add.w	r3, r7, #8
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff f8cc 	bl	8001dca <_ZN11PHandlerOptC1Ev>
        
        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8002c32:	2100      	movs	r1, #0
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff f8e2 	bl	8001dfe <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <_ZN8ICM426888icm426886enableEv+0x2e>
            return iIMU_ST::ERROR_COMM;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e038      	b.n	8002cc0 <_ZN8ICM426888icm426886enableEv+0xa0>
        }
        
        opt.add = PWR_MGMT0_ADD;
 8002c4e:	234e      	movs	r3, #78	; 0x4e
 8002c50:	723b      	strb	r3, [r7, #8]
        opt.size = 1;        
 8002c52:	2301      	movs	r3, #1
 8002c54:	727b      	strb	r3, [r7, #9]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <_ZN8ICM426888icm426886enableEv+0x48>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002c66:	e002      	b.n	8002c6e <_ZN8ICM426888icm426886enableEv+0x4e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002c6e:	60fb      	str	r3, [r7, #12]
        if(m_handler->write_registers((uint8_t*)&IMU_ENABLE_LOW_NOISE, opt) != iPHANDLER_ST::OK){
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f107 0208 	add.w	r2, r7, #8
 8002c86:	4910      	ldr	r1, [pc, #64]	; (8002cc8 <_ZN8ICM426888icm426886enableEv+0xa8>)
 8002c88:	4798      	blx	r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bf14      	ite	ne
 8002c90:	2301      	movne	r3, #1
 8002c92:	2300      	moveq	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <_ZN8ICM426888icm426886enableEv+0x7e>
            return iIMU_ST::ERROR_COMM;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e010      	b.n	8002cc0 <_ZN8ICM426888icm426886enableEv+0xa0>
        } 

        if(write_config() != iIMU_ST::OK){
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3344      	adds	r3, #68	; 0x44
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	4798      	blx	r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf14      	ite	ne
 8002cb0:	2301      	movne	r3, #1
 8002cb2:	2300      	moveq	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <_ZN8ICM426888icm426886enableEv+0x9e>
        	return iIMU_ST::ERROR_COMM;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <_ZN8ICM426888icm426886enableEv+0xa0>
        }

        return iIMU_ST::OK;
 8002cbe:	2300      	movs	r3, #0

    	//return write_register(PWR_MGMT0_ADD, bankRegister::BANK0, IMU_ENABLE_LOW_NOISE);
    	// Algunos milisegundos deben pasar luego de habilitar la imu para que funcione (leer pag 77 de datasheet)
    }
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	0800a270 	.word	0x0800a270

08002ccc <_ZN8ICM426888icm426887disableEv>:



    iIMU_ST icm42688::disable()
	{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
        PHandlerOpt opt;
 8002cd4:	f107 0310 	add.w	r3, r7, #16
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff f876 	bl	8001dca <_ZN11PHandlerOptC1Ev>
        uint8_t nullValue = 0x00;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]
        
//        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
//            return iIMU_ST::ERROR_COMM;
//        }

        if(set_bank_register(bankRegister::BANK0) != iIMU_ST::OK){
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff f88a 	bl	8001dfe <_ZN8ICM426888icm4268817set_bank_registerENS_12bankRegisterE>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <_ZN8ICM426888icm426887disableEv+0x32>
            return iIMU_ST::ERROR_COMM;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e076      	b.n	8002dec <_ZN8ICM426888icm426887disableEv+0x120>
        }
        opt.size = 1;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	747b      	strb	r3, [r7, #17]
        opt.slave = m_spiSet ? static_cast<void*>(m_cs) : static_cast<void*>(&m_i2cAdd);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <_ZN8ICM426888icm426887disableEv+0x48>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002d12:	e002      	b.n	8002d1a <_ZN8ICM426888icm426887disableEv+0x4e>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8002d1a:	617b      	str	r3, [r7, #20]
        

        // Desabilita todos las configuraciones de interrupciones
		opt.add = INT_SOURCE0_ADD;
 8002d1c:	2365      	movs	r3, #101	; 0x65
 8002d1e:	743b      	strb	r3, [r7, #16]
		if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f107 0210 	add.w	r2, r7, #16
 8002d36:	f107 010f 	add.w	r1, r7, #15
 8002d3a:	4798      	blx	r3
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bf14      	ite	ne
 8002d42:	2301      	movne	r3, #1
 8002d44:	2300      	moveq	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <_ZN8ICM426888icm426887disableEv+0x84>
			return iIMU_ST::ERROR_COMM;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e04d      	b.n	8002dec <_ZN8ICM426888icm426887disableEv+0x120>
		}
		opt.add = INT_SOURCE1_ADD;
 8002d50:	2366      	movs	r3, #102	; 0x66
 8002d52:	743b      	strb	r3, [r7, #16]
		if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3304      	adds	r3, #4
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f107 0210 	add.w	r2, r7, #16
 8002d6a:	f107 010f 	add.w	r1, r7, #15
 8002d6e:	4798      	blx	r3
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	bf14      	ite	ne
 8002d76:	2301      	movne	r3, #1
 8002d78:	2300      	moveq	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <_ZN8ICM426888icm426887disableEv+0xb8>
			return iIMU_ST::ERROR_COMM;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e033      	b.n	8002dec <_ZN8ICM426888icm426887disableEv+0x120>
		}
        opt.add = INT_CONFIG_ADD;
 8002d84:	2314      	movs	r3, #20
 8002d86:	743b      	strb	r3, [r7, #16]
        if(m_handler->write_registers(&nullValue, opt) != iPHANDLER_ST::OK){
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	3304      	adds	r3, #4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f107 0210 	add.w	r2, r7, #16
 8002d9e:	f107 010f 	add.w	r1, r7, #15
 8002da2:	4798      	blx	r3
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bf14      	ite	ne
 8002daa:	2301      	movne	r3, #1
 8002dac:	2300      	moveq	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <_ZN8ICM426888icm426887disableEv+0xec>
            return iIMU_ST::ERROR_COMM;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e019      	b.n	8002dec <_ZN8ICM426888icm426887disableEv+0x120>
        }


        //Low power
        opt.add = PWR_MGMT0_ADD;
 8002db8:	234e      	movs	r3, #78	; 0x4e
 8002dba:	743b      	strb	r3, [r7, #16]
        if(m_handler->write_registers((uint8_t*)&IMU_DISABLE, opt) != iPHANDLER_ST::OK){
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f107 0210 	add.w	r2, r7, #16
 8002dd2:	4908      	ldr	r1, [pc, #32]	; (8002df4 <_ZN8ICM426888icm426887disableEv+0x128>)
 8002dd4:	4798      	blx	r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf14      	ite	ne
 8002ddc:	2301      	movne	r3, #1
 8002dde:	2300      	moveq	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <_ZN8ICM426888icm426887disableEv+0x11e>
            return iIMU_ST::ERROR_COMM;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <_ZN8ICM426888icm426887disableEv+0x120>
        } 
        return iIMU_ST::OK;
 8002dea:	2300      	movs	r3, #0
    	
        
        //return write_register(PWR_MGMT0_ADD, bankRegister::BANK0, IMU_DISABLE);
    	// Algunos milisegundos deben pasar luego de habilitar la imu para que funcione (leer pag 77 de datasheet)
	}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3720      	adds	r7, #32
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	0800a271 	.word	0x0800a271

08002df8 <_ZN8ICM426888icm426889load_dataEPh>:


    }

    void icm42688::load_data(uint8_t *buffertData)
    {
 8002df8:	b5b0      	push	{r4, r5, r7, lr}
 8002dfa:	b08e      	sub	sp, #56	; 0x38
 8002dfc:	af04      	add	r7, sp, #16
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
    	IMUData data;
        data.temp   = convertTempData(buffertData[0], buffertData[1]);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	781a      	ldrb	r2, [r3, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f001 fc0e 	bl	8004630 <_ZN8ICM4268815convertTempDataEhh>
 8002e14:	eef0 7a40 	vmov.f32	s15, s0
 8002e18:	edc7 7a03 	vstr	s15, [r7, #12]
        data.accelX = convertAccelData(buffertData[2], buffertData[3]);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	3302      	adds	r3, #2
 8002e20:	7819      	ldrb	r1, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	3303      	adds	r3, #3
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff fb34 	bl	8002498 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 8002e30:	eef0 7a40 	vmov.f32	s15, s0
 8002e34:	edc7 7a07 	vstr	s15, [r7, #28]
        data.accelY = convertAccelData(buffertData[4], buffertData[5]);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	7819      	ldrb	r1, [r3, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	3305      	adds	r3, #5
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff fb26 	bl	8002498 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 8002e4c:	eef0 7a40 	vmov.f32	s15, s0
 8002e50:	edc7 7a08 	vstr	s15, [r7, #32]
        data.accelZ = convertAccelData(buffertData[6], buffertData[7]);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	3306      	adds	r3, #6
 8002e58:	7819      	ldrb	r1, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	3307      	adds	r3, #7
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff fb18 	bl	8002498 <_ZN8ICM426888icm4268816convertAccelDataEhh>
 8002e68:	eef0 7a40 	vmov.f32	s15, s0
 8002e6c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        data.gyroX  = convertGyroData(buffertData[8], buffertData[9]);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	3308      	adds	r3, #8
 8002e74:	7819      	ldrb	r1, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	3309      	adds	r3, #9
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fae2 	bl	8002448 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 8002e84:	eef0 7a40 	vmov.f32	s15, s0
 8002e88:	edc7 7a04 	vstr	s15, [r7, #16]
        data.gyroY  = convertGyroData(buffertData[10], buffertData[11]);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	330a      	adds	r3, #10
 8002e90:	7819      	ldrb	r1, [r3, #0]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	330b      	adds	r3, #11
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff fad4 	bl	8002448 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 8002ea0:	eef0 7a40 	vmov.f32	s15, s0
 8002ea4:	edc7 7a05 	vstr	s15, [r7, #20]
        data.gyroZ  = convertGyroData(buffertData[12], buffertData[13]);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	330c      	adds	r3, #12
 8002eac:	7819      	ldrb	r1, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	330d      	adds	r3, #13
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff fac6 	bl	8002448 <_ZN8ICM426888icm4268815convertGyroDataEhh>
 8002ebc:	eef0 7a40 	vmov.f32	s15, s0
 8002ec0:	edc7 7a06 	vstr	s15, [r7, #24]
        imuDataBuffer.write(data);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	1d1d      	adds	r5, r3, #4
 8002ec8:	466c      	mov	r4, sp
 8002eca:	f107 0318 	add.w	r3, r7, #24
 8002ece:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ed0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ed4:	f107 030c 	add.w	r3, r7, #12
 8002ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eda:	4628      	mov	r0, r5
 8002edc:	f000 fa3c 	bl	8003358 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_>
    }
 8002ee0:	bf00      	nop
 8002ee2:	3728      	adds	r7, #40	; 0x28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bdb0      	pop	{r4, r5, r7, pc}

08002ee8 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST>:

    iIMU_ST icm42688::map_handler_ret_to_iIMU_ret(iPHANDLER_ST iHandlerRet){
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
    	iIMU_ST ret;

    	switch(iHandlerRet){
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d012      	beq.n	8002f1c <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x34>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	dc09      	bgt.n	8002f10 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x28>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x22>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d006      	beq.n	8002f16 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x2e>
 8002f08:	e002      	b.n	8002f10 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x28>
    	case iPHANDLER_ST::OK:
    		ret = iIMU_ST::OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
    		break;
 8002f0e:	e008      	b.n	8002f22 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::ERROR:
    	default:
    		ret = iIMU_ST::ERROR_COMM;
 8002f10:	2301      	movs	r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
    		break;
 8002f14:	e005      	b.n	8002f22 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::UNAVAILABLE:
    		ret = iIMU_ST::ERROR_HANDLER_UNAVAILABLE;
 8002f16:	2305      	movs	r3, #5
 8002f18:	60fb      	str	r3, [r7, #12]
    		break;
 8002f1a:	e002      	b.n	8002f22 <_ZN8ICM426888icm4268827map_handler_ret_to_iIMU_retE12iPHANDLER_ST+0x3a>
    	case iPHANDLER_ST::INVALID:
    		ret = iIMU_ST::ERROR_INVALID_OP;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	60fb      	str	r3, [r7, #12]
    		break;
 8002f20:	bf00      	nop

    	}

    	return ret;
 8002f22:	68fb      	ldr	r3, [r7, #12]
    }
 8002f24:	4618      	mov	r0, r3
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <_ZN11circ_bufferI7IMUDataLm16EtEC1Ev>:
                bool mEmpty_;

        };

        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        circ_buffer<bufferDataType, bufferSize, sizeDataType>::circ_buffer()
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
        {
            mFull_ = false;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
            mEmpty_ = true;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            mHead_ = 0;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
            mTail_ = 0;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
            mSize_ = 0;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	801a      	strh	r2, [r3, #0]
            
        }
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_>:
            return EXIT_OK;
        }


        template<typename bufferDataType, uint32_t bufferSize, typename sizeDataType >
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::read(bufferDataType* pData)
 8002f6c:	b4b0      	push	{r4, r5, r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
        {
            // bufferDataType data = 0;

            if (mEmpty_){
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x18>
                return EXIT_ERROR;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e040      	b.n	8003006 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x9a>
                // return data;
            }

            *pData = mBuffer_[mTail_];
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6838      	ldr	r0, [r7, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	1a5b      	subs	r3, r3, r1
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	1d1c      	adds	r4, r3, #4
 8002f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002fa6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            mFull_ = false;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

            if(--mSize_ == 0){
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	801a      	strh	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	bf0c      	ite	eq
 8002fc6:	2301      	moveq	r3, #1
 8002fc8:	2300      	movne	r3, #0
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x6c>
                mEmpty_ = true;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            }

            if(++mTail_ == sCapacity_){
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 8002fde:	3301      	adds	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	bf0c      	ite	eq
 8002ff2:	2301      	moveq	r3, #1
 8002ff4:	2300      	movne	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <_ZN11circ_bufferI7IMUDataLm16EtE4readEPS0_+0x98>
                mTail_ = 0;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
            } 

            return EXIT_OK;
 8003004:	2301      	movs	r3, #1
        }
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bcb0      	pop	{r4, r5, r7}
 800300e:	4770      	bx	lr

08003010 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fa33 	bl	800348c <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1EOS2_>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1EOS6_>:
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003042:	e883 0003 	stmia.w	r3, {r0, r1}
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f103 0208 	add.w	r2, r3, #8
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	3308      	adds	r3, #8
 8003050:	4619      	mov	r1, r3
 8003052:	4610      	mov	r0, r2
 8003054:	f7ff ffdc 	bl	8003010 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1EOS2_>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline _GLIBCXX20_CONSTEXPR typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 8003062:	b590      	push	{r4, r7, lr}
 8003064:	b085      	sub	sp, #20
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 800306e:	68b8      	ldr	r0, [r7, #8]
 8003070:	f000 f9d7 	bl	8003422 <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS5_E4typeE>
 8003074:	4604      	mov	r4, r0
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f9de 	bl	8003438 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 800307c:	4603      	mov	r3, r0
 800307e:	461a      	mov	r2, r3
 8003080:	4621      	mov	r1, r4
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f9e3 	bl	800344e <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1IJRS1_EEEOS4_DpOT_>
    }
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bd90      	pop	{r4, r7, pc}

08003090 <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe fce4 	bl	8001a68 <_ZNSt14_Function_baseD1Ev>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<_Functor>, function&>
	operator=(_Functor&& __f)
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b086      	sub	sp, #24
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
 80030b4:	6838      	ldr	r0, [r7, #0]
 80030b6:	f000 f9f9 	bl	80034ac <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 80030ba:	4602      	mov	r2, r0
 80030bc:	f107 0308 	add.w	r3, r7, #8
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f9fe 	bl	80034c4 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_>
 80030c8:	f107 0308 	add.w	r3, r7, #8
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fa28 	bl	8003524 <_ZNSt8functionIFvvEE4swapERS1_>
 80030d4:	f107 0308 	add.w	r3, r7, #8
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ffd9 	bl	8003090 <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 80030de:	687b      	ldr	r3, [r7, #4]
	}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <_ZN4iIMUC1EOS_>:
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
 80030f2:	4a05      	ldr	r2, [pc, #20]	; (8003108 <_ZN4iIMUC1EOS_+0x20>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	0800a2cc 	.word	0x0800a2cc

0800310c <_ZN8ICM426888icm42688C1EOS0_>:
        uint8_t FIFO_CONFIG1 = 0x00;
        uint8_t FIFO_CONFIG2 = 0x00;
        uint8_t FIFO_CONFIG3 = 0x00;
    };

    class icm42688: public iIMU{
 800310c:	b5b0      	push	{r4, r5, r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ffe3 	bl	80030e8 <_ZN4iIMUC1EOS_>
 8003122:	4a46      	ldr	r2, [pc, #280]	; (800323c <_ZN8ICM426888icm42688C1EOS0_+0x130>)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	1d10      	adds	r0, r2, #4
 800312e:	3304      	adds	r3, #4
 8003130:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8003134:	4619      	mov	r1, r3
 8003136:	f007 f827 	bl	800a188 <memcpy>
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f502 74e8 	add.w	r4, r2, #464	; 0x1d0
 8003142:	f503 75e8 	add.w	r5, r3, #464	; 0x1d0
 8003146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800314a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800314c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800314e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003152:	e884 0003 	stmia.w	r4, {r0, r1}
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	f502 74fc 	add.w	r4, r2, #504	; 0x1f8
 800315e:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 8003162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003166:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800316a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	f502 7406 	add.w	r4, r2, #536	; 0x218
 8003176:	f503 7506 	add.w	r5, r3, #536	; 0x218
 800317a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800317c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800317e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003182:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800318e:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8003192:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003196:	6018      	str	r0, [r3, #0]
 8003198:	3304      	adds	r3, #4
 800319a:	8019      	strh	r1, [r3, #0]
 800319c:	3302      	adds	r3, #2
 800319e:	0c0a      	lsrs	r2, r1, #16
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	f893 2248 	ldrb.w	r2, [r3, #584]	; 0x248
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	f893 2249 	ldrb.w	r2, [r3, #585]	; 0x249
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bdb0      	pop	{r4, r5, r7, pc}
 800323c:	0800a27c 	.word	0x0800a27c

08003240 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>:
      constexpr _Head_base(_Head_base&&) = default;
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff5b 	bl	800310c <_ZN8ICM426888icm42688C1EOS0_>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&&) = default;
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f000 f9b3 	bl	80035dc <_ZNSt11_Tuple_implILj1EJtEEC1EOS0_>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	1d1a      	adds	r2, r3, #4
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	3304      	adds	r3, #4
 800327e:	4619      	mov	r1, r3
 8003280:	4610      	mov	r0, r2
 8003282:	f7ff ffdd 	bl	8003240 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1EOS2_>:
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ffdd 	bl	8003260 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1EOS2_>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1EOS6_>:
      _Bind(_Bind&&) = default;
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f103 0208 	add.w	r2, r3, #8
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	3308      	adds	r3, #8
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f7ff ffdc 	bl	8003290 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1EOS2_>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <_ZSt4bindIMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISD_EEE5valueESB_JDpT0_EE4typeEOSB_DpOSI_>:
    bind(_Func&& __f, _BoundArgs&&... __args)
 80032e2:	b5b0      	push	{r4, r5, r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	603b      	str	r3, [r7, #0]
					  std::forward<_BoundArgs>(__args)...);
 80032f0:	68b8      	ldr	r0, [r7, #8]
 80032f2:	f000 f938 	bl	8003566 <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS5_E4typeE>
 80032f6:	4604      	mov	r4, r0
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f89d 	bl	8003438 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80032fe:	4605      	mov	r5, r0
 8003300:	6838      	ldr	r0, [r7, #0]
 8003302:	f000 f93b 	bl	800357c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8003306:	4603      	mov	r3, r0
 8003308:	462a      	mov	r2, r5
 800330a:	4621      	mov	r1, r4
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f940 	bl	8003592 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1IJRS1_RtEEEOS4_DpOT_>
    }
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bdb0      	pop	{r4, r5, r7, pc}

0800331a <_ZNSt8functionIFvvEEaSISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEEENSt9enable_ifIXsrNS1_9_CallableIT_NSB_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceISD_E4typeEE4typeES1_E5valueESt5decayISD_EE4type4typeESt15__invoke_resultIRSQ_JEEEE5valueERS1_E4typeEOSD_>:
	operator=(_Functor&& __f)
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8003324:	6838      	ldr	r0, [r7, #0]
 8003326:	f000 f969 	bl	80035fc <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800332a:	4602      	mov	r2, r0
 800332c:	f107 0308 	add.w	r3, r7, #8
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f96e 	bl	8003614 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_>
 8003338:	f107 0308 	add.w	r3, r7, #8
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f8f0 	bl	8003524 <_ZNSt8functionIFvvEE4swapERS1_>
 8003344:	f107 0308 	add.w	r3, r7, #8
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fea1 	bl	8003090 <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 800334e:	687b      	ldr	r3, [r7, #4]
	}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_>:
        bool circ_buffer<bufferDataType, bufferSize, sizeDataType>::write(bufferDataType data)
 8003358:	b084      	sub	sp, #16
 800335a:	b4b0      	push	{r4, r5, r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	f107 001c 	add.w	r0, r7, #28
 8003366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
            mBuffer_[mHead_] = data;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 8003370:	4619      	mov	r1, r3
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	1a5b      	subs	r3, r3, r1
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	1d1c      	adds	r4, r3, #4
 8003380:	f107 051c 	add.w	r5, r7, #28
 8003384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003388:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800338c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            mEmpty_ = false;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
            if(++mHead_ == sCapacity_){
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 800339e:	3301      	adds	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	; 0x1c4
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	bf0c      	ite	eq
 80033b2:	2301      	moveq	r3, #1
 80033b4:	2300      	movne	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x6c>
                mHead_ = 0;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
            if(mFull_ == true){
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d10f      	bne.n	80033ee <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x96>
                mTail_ = mTail_ + 1 == sCapacity_ ? 0 : mTail_ + 1; // mTail_ = ++mTail_ == sCapacity_ ? 0 : mTail_;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 80033d4:	2b0f      	cmp	r3, #15
 80033d6:	d005      	beq.n	80033e4 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x8c>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 80033de:	3301      	adds	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	e000      	b.n	80033e6 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0x8e>
 80033e4:	2200      	movs	r2, #0
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 80033ec:	e012      	b.n	8003414 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0xbc>
            }else if(++mSize_ == sCapacity_){
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	3301      	adds	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	801a      	strh	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	2b10      	cmp	r3, #16
 8003400:	bf0c      	ite	eq
 8003402:	2301      	moveq	r3, #1
 8003404:	2300      	movne	r3, #0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <_ZN11circ_bufferI7IMUDataLm16EtE5writeES0_+0xbc>
                mFull_ = true;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
            return EXIT_OK;
 8003414:	2301      	movs	r3, #1
        }
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bcb0      	pop	{r4, r5, r7}
 800341e:	b004      	add	sp, #16
 8003420:	4770      	bx	lr

08003422 <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1IJRS1_EEEOS4_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 800344e:	b590      	push	{r4, r7, lr}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 800345a:	68b8      	ldr	r0, [r7, #8]
 800345c:	f000 f90a 	bl	8003674 <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_STvEEONSt16remove_referenceIT_E4typeEOS7_>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003468:	e883 0003 	stmia.w	r3, {r0, r1}
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f103 0408 	add.w	r4, r3, #8
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ffe0 	bl	8003438 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003478:	4603      	mov	r3, r0
 800347a:	4619      	mov	r1, r3
 800347c:	4620      	mov	r0, r4
 800347e:	f000 f904 	bl	800368a <_ZNSt5tupleIJN8ICM426888icm42688EEEC1IJRS1_ELb1ELb1EEEDpOT_>
	{ }
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4618      	mov	r0, r3
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	bd90      	pop	{r4, r7, pc}

0800348c <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	4611      	mov	r1, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fecf 	bl	8003240 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1EOS2_>
      { }
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4618      	mov	r0, r3
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_>:
	function(_Functor&& __f)
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	461a      	mov	r2, r3
 80034d2:	2300      	movs	r3, #0
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	6053      	str	r3, [r2, #4]
 80034d8:	6093      	str	r3, [r2, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fe f9e3 	bl	80018a8 <_ZNSt14_Function_baseC1Ev>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80034e8:	6838      	ldr	r0, [r7, #0]
 80034ea:	f000 f8e1 	bl	80036b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE21_M_not_empty_functionIS8_EEbRKT_>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00e      	beq.n	8003512 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80034f4:	687c      	ldr	r4, [r7, #4]
 80034f6:	6838      	ldr	r0, [r7, #0]
 80034f8:	f7ff ffd8 	bl	80034ac <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 80034fc:	4603      	mov	r3, r0
 80034fe:	4619      	mov	r1, r3
 8003500:	4620      	mov	r0, r4
 8003502:	f000 f8e0 	bl	80036c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a04      	ldr	r2, [pc, #16]	; (800351c <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x58>)
 800350a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a04      	ldr	r2, [pc, #16]	; (8003520 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES5_EEvEEOT_+0x5c>)
 8003510:	609a      	str	r2, [r3, #8]
	}
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	bd90      	pop	{r4, r7, pc}
 800351c:	080036eb 	.word	0x080036eb
 8003520:	08003709 	.word	0x08003709

08003524 <_ZNSt8functionIFvvEE4swapERS1_>:
       *  @param __x A %function with identical call signature.
       *
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x) noexcept
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_functor, __x._M_functor);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f000 f911 	bl	800375c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f103 0208 	add.w	r2, r3, #8
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	3308      	adds	r3, #8
 8003544:	4619      	mov	r1, r3
 8003546:	4610      	mov	r0, r2
 8003548:	f000 f93a 	bl	80037c0 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f103 020c 	add.w	r2, r3, #12
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	330c      	adds	r3, #12
 8003556:	4619      	mov	r1, r3
 8003558:	4610      	mov	r0, r2
 800355a:	f000 f95b 	bl	8003814 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <_ZSt7forwardIMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1IJRS1_RtEEEOS4_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 8003592:	b5b0      	push	{r4, r5, r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 80035a0:	68b8      	ldr	r0, [r7, #8]
 80035a2:	f000 f956 	bl	8003852 <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_SThEEONSt16remove_referenceIT_E4typeEOS7_>
 80035a6:	4602      	mov	r2, r0
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f103 0408 	add.w	r4, r3, #8
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ff3d 	bl	8003438 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 80035be:	4605      	mov	r5, r0
 80035c0:	6838      	ldr	r0, [r7, #0]
 80035c2:	f7ff ffdb 	bl	800357c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80035c6:	4603      	mov	r3, r0
 80035c8:	461a      	mov	r2, r3
 80035ca:	4629      	mov	r1, r5
 80035cc:	4620      	mov	r0, r4
 80035ce:	f000 f94b 	bl	8003868 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1IRS1_RtLb1EEEOT_OT0_>
	{ }
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bdb0      	pop	{r4, r5, r7, pc}

080035dc <_ZNSt11_Tuple_implILj1EJtEEC1EOS0_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	8812      	ldrh	r2, [r2, #0]
 80035ec:	801a      	strh	r2, [r3, #0]
      { }
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_>:
	function(_Functor&& __f)
 8003614:	b590      	push	{r4, r7, lr}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	461a      	mov	r2, r3
 8003622:	2300      	movs	r3, #0
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	6053      	str	r3, [r2, #4]
 8003628:	6093      	str	r3, [r2, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4618      	mov	r0, r3
 800362e:	f7fe f93b 	bl	80018a8 <_ZNSt14_Function_baseC1Ev>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8003638:	6838      	ldr	r0, [r7, #0]
 800363a:	f000 f92e 	bl	800389a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE21_M_not_empty_functionIS8_EEbRKT_>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00e      	beq.n	8003662 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8003644:	687c      	ldr	r4, [r7, #4]
 8003646:	6838      	ldr	r0, [r7, #0]
 8003648:	f7ff ffd8 	bl	80035fc <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800364c:	4603      	mov	r3, r0
 800364e:	4619      	mov	r1, r3
 8003650:	4620      	mov	r0, r4
 8003652:	f000 f92d 	bl	80038b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a04      	ldr	r2, [pc, #16]	; (800366c <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x58>)
 800365a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a04      	ldr	r2, [pc, #16]	; (8003670 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES5_tEEvEEOT_+0x5c>)
 8003660:	609a      	str	r2, [r3, #8]
	}
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	bd90      	pop	{r4, r7, pc}
 800366c:	080038d5 	.word	0x080038d5
 8003670:	080038f3 	.word	0x080038f3

08003674 <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_STvEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <_ZNSt5tupleIJN8ICM426888icm42688EEEC1IJRS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 800368a:	b590      	push	{r4, r7, lr}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8003694:	687c      	ldr	r4, [r7, #4]
 8003696:	6838      	ldr	r0, [r7, #0]
 8003698:	f7ff fece 	bl	8003438 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 800369c:	4603      	mov	r3, r0
 800369e:	4619      	mov	r1, r3
 80036a0:	4620      	mov	r0, r4
 80036a2:	f000 f945 	bl	8003930 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1IRS1_EEOT_>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd90      	pop	{r4, r7, pc}

080036b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
	  { return true; }
 80036b8:	2301      	movs	r3, #1
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80036c6:	b590      	push	{r4, r7, lr}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80036d0:	6838      	ldr	r0, [r7, #0]
 80036d2:	f7ff feeb 	bl	80034ac <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 80036d6:	4603      	mov	r3, r0
 80036d8:	4622      	mov	r2, r4
 80036da:	4619      	mov	r1, r3
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f93a 	bl	8003956 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd90      	pop	{r4, r7, pc}

080036ea <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f94c 	bl	8003990 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 80036f8:	4603      	mov	r3, r0
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f966 	bl	80039cc <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 8003700:	bf00      	nop
      }
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8003708:	b590      	push	{r4, r7, lr}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d109      	bne.n	8003730 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f965 	bl	80039ec <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8003722:	4604      	mov	r4, r0
 8003724:	68b8      	ldr	r0, [r7, #8]
 8003726:	f000 f933 	bl	8003990 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 800372a:	4603      	mov	r3, r0
 800372c:	6023      	str	r3, [r4, #0]
	    break;
 800372e:	e005      	b.n	800373c <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8003730:	79fb      	ldrb	r3, [r7, #7]
 8003732:	461a      	mov	r2, r3
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f964 	bl	8003a04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 800373c:	2300      	movs	r3, #0
      }
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	bd90      	pop	{r4, r7, pc}

08003746 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4618      	mov	r0, r3
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff ffed 	bl	8003746 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800376c:	4602      	mov	r2, r0
 800376e:	f107 0308 	add.w	r3, r7, #8
 8003772:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003776:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800377a:	6838      	ldr	r0, [r7, #0]
 800377c:	f7ff ffe3 	bl	8003746 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8003780:	4602      	mov	r2, r0
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003788:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800378c:	f107 0308 	add.w	r3, r7, #8
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ffd8 	bl	8003746 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8003796:	4602      	mov	r2, r0
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800379e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff ffed 	bl	80037aa <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80037d0:	4603      	mov	r3, r0
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80037d6:	6838      	ldr	r0, [r7, #0]
 80037d8:	f7ff ffe7 	bl	80037aa <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80037dc:	4603      	mov	r3, r0
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80037e4:	f107 030c 	add.w	r3, r7, #12
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff ffde 	bl	80037aa <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80037ee:	4603      	mov	r3, r0
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	601a      	str	r2, [r3, #0]
    }
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ffed 	bl	80037fe <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8003824:	4603      	mov	r3, r0
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800382a:	6838      	ldr	r0, [r7, #0]
 800382c:	f7ff ffe7 	bl	80037fe <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8003830:	4603      	mov	r3, r0
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003838:	f107 030c 	add.w	r3, r7, #12
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ffde 	bl	80037fe <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8003842:	4603      	mov	r3, r0
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	601a      	str	r2, [r3, #0]
    }
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <_ZSt4moveIRMN8ICM426888icm42688EF7iIMU_SThEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1IRS1_RtLb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8003868:	b5b0      	push	{r4, r5, r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8003874:	68fc      	ldr	r4, [r7, #12]
 8003876:	68b8      	ldr	r0, [r7, #8]
 8003878:	f7ff fdde 	bl	8003438 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 800387c:	4605      	mov	r5, r0
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff fe7c 	bl	800357c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	4629      	mov	r1, r5
 800388a:	4620      	mov	r0, r4
 800388c:	f000 f8f4 	bl	8003a78 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1IRS1_JRtEvEEOT_DpOT0_>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bdb0      	pop	{r4, r5, r7, pc}

0800389a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
	  { return true; }
 80038a2:	2301      	movs	r3, #1
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80038ba:	6838      	ldr	r0, [r7, #0]
 80038bc:	f7ff fe9e 	bl	80035fc <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80038c0:	4603      	mov	r3, r0
 80038c2:	4622      	mov	r2, r4
 80038c4:	4619      	mov	r1, r3
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8f4 	bl	8003ab4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd90      	pop	{r4, r7, pc}

080038d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f906 	bl	8003aee <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 80038e2:	4603      	mov	r3, r0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 f920 	bl	8003b2a <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 80038ea:	bf00      	nop
      }
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80038f2:	b590      	push	{r4, r7, lr}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	4613      	mov	r3, r2
 80038fe:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d109      	bne.n	800391a <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f91f 	bl	8003b4a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 800390c:	4604      	mov	r4, r0
 800390e:	68b8      	ldr	r0, [r7, #8]
 8003910:	f000 f8ed 	bl	8003aee <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8003914:	4603      	mov	r3, r0
 8003916:	6023      	str	r3, [r4, #0]
	    break;
 8003918:	e005      	b.n	8003926 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	461a      	mov	r2, r3
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f91f 	bl	8003b64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 8003926:	2300      	movs	r3, #0
      }
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	bd90      	pop	{r4, r7, pc}

08003930 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1IRS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800393a:	687c      	ldr	r4, [r7, #4]
 800393c:	6838      	ldr	r0, [r7, #0]
 800393e:	f7ff fd7b 	bl	8003438 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003942:	4603      	mov	r3, r0
 8003944:	4619      	mov	r1, r3
 8003946:	4620      	mov	r0, r4
 8003948:	f000 f9f2 	bl	8003d30 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>
	{ }
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4618      	mov	r0, r3
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	bd90      	pop	{r4, r7, pc}

08003956 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8003956:	b5b0      	push	{r4, r5, r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8003962:	68b8      	ldr	r0, [r7, #8]
 8003964:	f7ff fda2 	bl	80034ac <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS8_E4typeE>
 8003968:	4605      	mov	r5, r0
 800396a:	f44f 701d 	mov.w	r0, #628	; 0x274
 800396e:	f006 f82f 	bl	80099d0 <_Znwj>
 8003972:	4603      	mov	r3, r0
 8003974:	461c      	mov	r4, r3
 8003976:	4629      	mov	r1, r5
 8003978:	4620      	mov	r0, r4
 800397a:	f7ff fb59 	bl	8003030 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1EOS6_>
	    __dest._M_access<_Functor*>()
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f834 	bl	80039ec <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8003984:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8003986:	601c      	str	r4, [r3, #0]
	  }
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bdb0      	pop	{r4, r5, r7, pc}

08003990 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f9dc 	bl	8003d56 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERKT_v>
 800399e:	4603      	mov	r3, r0
 80039a0:	681b      	ldr	r3, [r3, #0]
	}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_vES3_EEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	7138      	strb	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80039b4:	6838      	ldr	r0, [r7, #0]
 80039b6:	f000 f9da 	bl	8003d6e <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 80039ba:	4603      	mov	r3, r0
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 f9e1 	bl	8003d84 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEclIJES2_EET0_DpOT_>
 80039c2:	4603      	mov	r3, r0
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f9ca 	bl	8003d6e <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 80039da:	4603      	mov	r3, r0
 80039dc:	4619      	mov	r1, r3
 80039de:	4620      	mov	r0, r4
 80039e0:	f7ff ffe3 	bl	80039aa <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_vES3_EEJEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd90      	pop	{r4, r7, pc}

080039ec <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>:
      _M_access()
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7fe f821 	bl	8001a3c <_ZNSt9_Any_data9_M_accessEv>
 80039fa:	4603      	mov	r3, r0
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8003a04:	b590      	push	{r4, r7, lr}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d82a      	bhi.n	8003a6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
 8003a18:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1c>)
 8003a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1e:	bf00      	nop
 8003a20:	08003a31 	.word	0x08003a31
 8003a24:	08003a3f 	.word	0x08003a3f
 8003a28:	08003a53 	.word	0x08003a53
 8003a2c:	08003a65 	.word	0x08003a65
	      __dest._M_access<const type_info*>() = nullptr;
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f9b9 	bl	8003da8 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
	      break;
 8003a3c:	e017      	b.n	8003a6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f7ff ffd4 	bl	80039ec <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8003a44:	4604      	mov	r4, r0
 8003a46:	68b8      	ldr	r0, [r7, #8]
 8003a48:	f7ff ffa2 	bl	8003990 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	6023      	str	r3, [r4, #0]
	      break;
 8003a50:	e00d      	b.n	8003a6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8003a52:	68b8      	ldr	r0, [r7, #8]
 8003a54:	f7ff ff9c 	bl	8003990 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE14_M_get_pointerERKSt9_Any_data>
 8003a58:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f9af 	bl	8003dc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>
	      break;
 8003a62:	e004      	b.n	8003a6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8003a64:	4621      	mov	r1, r4
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f9bc 	bl	8003de4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8003a6c:	bf00      	nop
	  return false;
 8003a6e:	2300      	movs	r3, #0
	}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd90      	pop	{r4, r7, pc}

08003a78 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1IRS1_JRtEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8003a78:	b590      	push	{r4, r7, lr}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8003a84:	68fc      	ldr	r4, [r7, #12]
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fd78 	bl	800357c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4620      	mov	r0, r4
 8003a92:	f000 f9bc 	bl	8003e0e <_ZNSt11_Tuple_implILj1EJtEEC1IRtEEOT_>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1d1c      	adds	r4, r3, #4
 8003a9a:	68b8      	ldr	r0, [r7, #8]
 8003a9c:	f7ff fccc 	bl	8003438 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f000 f943 	bl	8003d30 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>
	{ }
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd90      	pop	{r4, r7, pc}

08003ab4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8003ab4:	b5b0      	push	{r4, r5, r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8003ac0:	68b8      	ldr	r0, [r7, #8]
 8003ac2:	f7ff fd9b 	bl	80035fc <_ZSt7forwardISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8003ac6:	4605      	mov	r5, r0
 8003ac8:	f44f 701e 	mov.w	r0, #632	; 0x278
 8003acc:	f005 ff80 	bl	80099d0 <_Znwj>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	461c      	mov	r4, r3
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f7ff fbea 	bl	80032b0 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1EOS6_>
	    __dest._M_access<_Functor*>()
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f834 	bl	8003b4a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8003ae2:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8003ae4:	601c      	str	r4, [r3, #0]
	  }
 8003ae6:	bf00      	nop
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bdb0      	pop	{r4, r5, r7, pc}

08003aee <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f99c 	bl	8003e34 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERKT_v>
 8003afc:	4603      	mov	r3, r0
 8003afe:	681b      	ldr	r3, [r3, #0]
	}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_hES3_tEEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	7138      	strb	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003b12:	6838      	ldr	r0, [r7, #0]
 8003b14:	f000 f99a 	bl	8003e4c <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f9a1 	bl	8003e62 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEclIJES2_EET0_DpOT_>
 8003b20:	4603      	mov	r3, r0
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <_ZSt10__invoke_rIvRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESC_E4typeEOSF_DpOSG_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8003b2a:	b590      	push	{r4, r7, lr}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f98a 	bl	8003e4c <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f7ff ffe3 	bl	8003b08 <_ZSt13__invoke_implI7iIMU_STRSt5_BindIFMN8ICM426888icm42688EFS0_hES3_tEEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd90      	pop	{r4, r7, pc}

08003b4a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>:
      _M_access()
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd ff72 	bl	8001a3c <_ZNSt9_Any_data9_M_accessEv>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8003b64:	b590      	push	{r4, r7, lr}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d82a      	bhi.n	8003bce <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
 8003b78:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1c>)
 8003b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7e:	bf00      	nop
 8003b80:	08003b91 	.word	0x08003b91
 8003b84:	08003b9f 	.word	0x08003b9f
 8003b88:	08003bb3 	.word	0x08003bb3
 8003b8c:	08003bc5 	.word	0x08003bc5
	      __dest._M_access<const type_info*>() = nullptr;
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f909 	bl	8003da8 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
	      break;
 8003b9c:	e017      	b.n	8003bce <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f7ff ffd3 	bl	8003b4a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	68b8      	ldr	r0, [r7, #8]
 8003ba8:	f7ff ffa1 	bl	8003aee <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8003bac:	4603      	mov	r3, r0
 8003bae:	6023      	str	r3, [r4, #0]
	      break;
 8003bb0:	e00d      	b.n	8003bce <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8003bb2:	68b8      	ldr	r0, [r7, #8]
 8003bb4:	f7ff ff9b 	bl	8003aee <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE14_M_get_pointerERKSt9_Any_data>
 8003bb8:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8003bba:	4619      	mov	r1, r3
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f962 	bl	8003e86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>
	      break;
 8003bc2:	e004      	b.n	8003bce <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f96f 	bl	8003eaa <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8003bcc:	bf00      	nop
	  return false;
 8003bce:	2300      	movs	r3, #0
	}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd90      	pop	{r4, r7, pc}

08003bd8 <_ZN4iIMUC1ERKS_>:
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
 8003be2:	4a05      	ldr	r2, [pc, #20]	; (8003bf8 <_ZN4iIMUC1ERKS_+0x20>)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4618      	mov	r0, r3
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	0800a2cc 	.word	0x0800a2cc

08003bfc <_ZN8ICM426888icm42688C1ERKS0_>:
 8003bfc:	b5b0      	push	{r4, r5, r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ffe3 	bl	8003bd8 <_ZN4iIMUC1ERKS_>
 8003c12:	4a46      	ldr	r2, [pc, #280]	; (8003d2c <_ZN8ICM426888icm42688C1ERKS0_+0x130>)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	1d10      	adds	r0, r2, #4
 8003c1e:	3304      	adds	r3, #4
 8003c20:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8003c24:	4619      	mov	r1, r3
 8003c26:	f006 faaf 	bl	800a188 <memcpy>
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	f502 74e8 	add.w	r4, r2, #464	; 0x1d0
 8003c32:	f503 75e8 	add.w	r5, r3, #464	; 0x1d0
 8003c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003c42:	e884 0003 	stmia.w	r4, {r0, r1}
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	f502 74fc 	add.w	r4, r2, #504	; 0x1f8
 8003c4e:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 8003c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003c5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	f502 7406 	add.w	r4, r2, #536	; 0x218
 8003c66:	f503 7506 	add.w	r5, r3, #536	; 0x218
 8003c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c6e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003c72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8003c7e:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8003c82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c86:	6018      	str	r0, [r3, #0]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	8019      	strh	r1, [r3, #0]
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	0c0a      	lsrs	r2, r1, #16
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	f893 2248 	ldrb.w	r2, [r3, #584]	; 0x248
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	f893 2249 	ldrb.w	r2, [r3, #585]	; 0x249
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d2c:	0800a27c 	.word	0x0800a27c

08003d30 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8003d3a:	687c      	ldr	r4, [r7, #4]
 8003d3c:	6838      	ldr	r0, [r7, #0]
 8003d3e:	f7ff fb7b 	bl	8003438 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8003d42:	4603      	mov	r3, r0
 8003d44:	4619      	mov	r1, r3
 8003d46:	4620      	mov	r0, r4
 8003d48:	f7ff ff58 	bl	8003bfc <_ZN8ICM426888icm42688C1ERKS0_>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd90      	pop	{r4, r7, pc}

08003d56 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERKT_v>:
      _M_access() const
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fd fe77 	bl	8001a52 <_ZNKSt9_Any_data9_M_accessEv>
 8003d64:	4603      	mov	r3, r0
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEclIJES2_EET0_DpOT_>:
	operator()(_Args&&... __args)
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 8003d8c:	f000 f8a2 	bl	8003ed4 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	  return this->__call<_Result>(
 8003d90:	f107 030c 	add.w	r3, r7, #12
 8003d94:	4622      	mov	r2, r4
 8003d96:	4619      	mov	r1, r3
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f8a3 	bl	8003ee4 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EE6__callIS2_JEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
 8003d9e:	4603      	mov	r3, r0
	}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd90      	pop	{r4, r7, pc}

08003da8 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7fd fe43 	bl	8001a3c <_ZNSt9_Any_data9_M_accessEv>
 8003db6:	4603      	mov	r3, r0
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8003dc0:	b590      	push	{r4, r7, lr}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8003dca:	6838      	ldr	r0, [r7, #0]
 8003dcc:	f000 f8a7 	bl	8003f1e <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f8f5 	bl	8003fc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd90      	pop	{r4, r7, pc}

08003de4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff fdfc 	bl	80039ec <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8003df4:	4603      	mov	r3, r0
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d004      	beq.n	8003e06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x22>
 8003dfc:	f44f 711d 	mov.w	r1, #628	; 0x274
 8003e00:	4618      	mov	r0, r3
 8003e02:	f005 fde3 	bl	80099cc <_ZdlPvj>
	}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <_ZNSt11_Tuple_implILj1EJtEEC1IRtEEOT_>:
	_Tuple_impl(_UHead&& __head)
 8003e0e:	b590      	push	{r4, r7, lr}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8003e18:	687c      	ldr	r4, [r7, #4]
 8003e1a:	6838      	ldr	r0, [r7, #0]
 8003e1c:	f7ff fbae 	bl	800357c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8003e20:	4603      	mov	r3, r0
 8003e22:	4619      	mov	r1, r3
 8003e24:	4620      	mov	r0, r4
 8003e26:	f000 f8eb 	bl	8004000 <_ZNSt10_Head_baseILj1EtLb0EEC1IRtEEOT_>
	{ }
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd90      	pop	{r4, r7, pc}

08003e34 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERKT_v>:
      _M_access() const
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7fd fe08 	bl	8001a52 <_ZNKSt9_Any_data9_M_accessEv>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <_ZSt7forwardIRSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEclIJES2_EET0_DpOT_>:
	operator()(_Args&&... __args)
 8003e62:	b590      	push	{r4, r7, lr}
 8003e64:	b085      	sub	sp, #20
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 8003e6a:	f000 f833 	bl	8003ed4 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	  return this->__call<_Result>(
 8003e6e:	f107 030c 	add.w	r3, r7, #12
 8003e72:	4622      	mov	r2, r4
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f8d3 	bl	8004022 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEE6__callIS2_JEJLj0ELj1EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
 8003e7c:	4603      	mov	r3, r0
	}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd90      	pop	{r4, r7, pc}

08003e86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE15_M_init_functorIRKS8_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8003e86:	b590      	push	{r4, r7, lr}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8003e90:	6838      	ldr	r0, [r7, #0]
 8003e92:	f000 f8f1 	bl	8004078 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>
 8003e96:	4603      	mov	r3, r0
 8003e98:	4622      	mov	r2, r4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f935 	bl	800410c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd90      	pop	{r4, r7, pc}

08003eaa <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff fe48 	bl	8003b4a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d004      	beq.n	8003ecc <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x22>
 8003ec2:	f44f 711e 	mov.w	r1, #632	; 0x278
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f005 fd80 	bl	80099cc <_ZdlPvj>
	}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8003ed8:	bf00      	nop
 8003eda:	4618      	mov	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EE6__callIS2_JEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 8003ee4:	b590      	push	{r4, r7, lr}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 8003ef0:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f925 	bl	8004146 <_ZSt3getILj0EJN8ICM426888icm42688EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8003efc:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 8003efe:	f107 0314 	add.w	r3, r7, #20
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 f92b 	bl	8004160 <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f000 f934 	bl	800417c <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
 8003f14:	4603      	mov	r3, r0
	}
 8003f16:	4618      	mov	r0, r3
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd90      	pop	{r4, r7, pc}

08003f1e <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>:
      constexpr _Head_base(const _Head_base&) = default;
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff fe59 	bl	8003bfc <_ZN8ICM426888icm42688C1ERKS0_>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1ERKS2_>:
      constexpr _Tuple_impl(const _Tuple_impl&) = default;
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	4611      	mov	r1, r2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff ffe5 	bl	8003f34 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1ERKS2_>:
      constexpr tuple(const tuple&) = default;
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ffe5 	bl	8003f54 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEEC1ERKS2_>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1ERKS6_>:
      _Bind(const _Bind&) = default;
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fa6:	e883 0003 	stmia.w	r3, {r0, r1}
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f103 0208 	add.w	r2, r3, #8
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f7ff ffdc 	bl	8003f74 <_ZNSt5tupleIJN8ICM426888icm42688EEEC1ERKS2_>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8003fc6:	b5b0      	push	{r4, r5, r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8003fd2:	68b8      	ldr	r0, [r7, #8]
 8003fd4:	f7ff ffa3 	bl	8003f1e <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES2_EEEOT_RNSt16remove_referenceISA_E4typeE>
 8003fd8:	4605      	mov	r5, r0
 8003fda:	f44f 701d 	mov.w	r0, #628	; 0x274
 8003fde:	f005 fcf7 	bl	80099d0 <_Znwj>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	461c      	mov	r4, r3
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f7ff ffd3 	bl	8003f94 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES1_EEC1ERKS6_>
	    __dest._M_access<_Functor*>()
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f7ff fcfc 	bl	80039ec <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_STvES3_EEEERT_v>
 8003ff4:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8003ff6:	601c      	str	r4, [r3, #0]
	  }
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bdb0      	pop	{r4, r5, r7, pc}

08004000 <_ZNSt10_Head_baseILj1EtLb0EEC1IRtEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800400a:	6838      	ldr	r0, [r7, #0]
 800400c:	f7ff fab6 	bl	800357c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8004010:	4603      	mov	r3, r0
 8004012:	881a      	ldrh	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	801a      	strh	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEE6__callIS2_JEJLj0ELj1EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 8004022:	b5b0      	push	{r4, r5, r7, lr}
 8004024:	b086      	sub	sp, #24
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 800402e:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3308      	adds	r3, #8
 8004034:	4618      	mov	r0, r3
 8004036:	f000 f8b8 	bl	80041aa <_ZSt3getILj0EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 800403a:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 800403c:	f107 0310 	add.w	r3, r7, #16
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	4618      	mov	r0, r3
 8004044:	f000 f88c 	bl	8004160 <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>
 8004048:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3308      	adds	r3, #8
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f8b8 	bl	80041c4 <_ZSt3getILj1EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8004054:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 8004056:	f107 0314 	add.w	r3, r7, #20
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	4618      	mov	r0, r3
 800405e:	f000 f8be 	bl	80041de <_ZNVKSt3_MuItLb0ELb0EEclIRtSt5tupleIJEEEEOT_S6_RT0_>
 8004062:	4603      	mov	r3, r0
 8004064:	461a      	mov	r2, r3
 8004066:	4629      	mov	r1, r5
 8004068:	4620      	mov	r0, r4
 800406a:	f000 f8c6 	bl	80041fa <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>
 800406e:	4603      	mov	r3, r0
	}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bdb0      	pop	{r4, r5, r7, pc}

08004078 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1ERKS2_>:
      constexpr _Tuple_impl(const _Tuple_impl&) = default;
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	8812      	ldrh	r2, [r2, #0]
 800409e:	801a      	strh	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	1d1a      	adds	r2, r3, #4
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f7ff ff42 	bl	8003f34 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EEC1ERKS2_>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1ERKS2_>:
      constexpr tuple(const tuple&) = default;
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	6039      	str	r1, [r7, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	4611      	mov	r1, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff ffdf 	bl	800408e <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEEC1ERKS2_>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1ERKS6_>:
      _Bind(const _Bind&) = default;
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f103 0208 	add.w	r2, r3, #8
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	3308      	adds	r3, #8
 80040fa:	4619      	mov	r1, r3
 80040fc:	4610      	mov	r0, r2
 80040fe:	f7ff ffdc 	bl	80040ba <_ZNSt5tupleIJN8ICM426888icm42688EtEEC1ERKS2_>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEE9_M_createIRKS8_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 800410c:	b5b0      	push	{r4, r5, r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8004118:	68b8      	ldr	r0, [r7, #8]
 800411a:	f7ff ffad 	bl	8004078 <_ZSt7forwardIRKSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES2_tEEEOT_RNSt16remove_referenceISA_E4typeE>
 800411e:	4605      	mov	r5, r0
 8004120:	f44f 701e 	mov.w	r0, #632	; 0x278
 8004124:	f005 fc54 	bl	80099d0 <_Znwj>
 8004128:	4603      	mov	r3, r0
 800412a:	461c      	mov	r4, r3
 800412c:	4629      	mov	r1, r5
 800412e:	4620      	mov	r0, r4
 8004130:	f7ff ffd3 	bl	80040da <_ZNSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES1_tEEC1ERKS6_>
	    __dest._M_access<_Functor*>()
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f7ff fd08 	bl	8003b4a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN8ICM426888icm42688EF7iIMU_SThES3_tEEEERT_v>
 800413a:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 800413c:	601c      	str	r4, [r3, #0]
	  }
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bdb0      	pop	{r4, r5, r7, pc}

08004146 <_ZSt3getILj0EJN8ICM426888icm42688EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f86e 	bl	8004232 <_ZSt12__get_helperILj0EN8ICM426888icm42688EJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8004156:	4603      	mov	r3, r0
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <_ZNVKSt3_MuIN8ICM426888icm42688ELb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 800416c:	68b8      	ldr	r0, [r7, #8]
 800416e:	f7ff f963 	bl	8003438 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8004172:	4603      	mov	r3, r0
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_STvEJRS1_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800417c:	b5b0      	push	{r4, r5, r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f85f 	bl	800424a <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS6_E4typeE>
 800418c:	4604      	mov	r4, r0
 800418e:	6838      	ldr	r0, [r7, #0]
 8004190:	f7ff f952 	bl	8003438 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8004194:	4603      	mov	r3, r0
 8004196:	461a      	mov	r2, r3
 8004198:	4621      	mov	r1, r4
 800419a:	4628      	mov	r0, r5
 800419c:	f000 f860 	bl	8004260 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>
 80041a0:	4603      	mov	r3, r0
    }
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bdb0      	pop	{r4, r5, r7, pc}

080041aa <_ZSt3getILj0EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 f87a 	bl	80042ae <_ZSt12__get_helperILj0EN8ICM426888icm42688EJtEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80041ba:	4603      	mov	r3, r0
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <_ZSt3getILj1EJN8ICM426888icm42688EtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f879 	bl	80042c6 <_ZSt12__get_helperILj1EtJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE>
 80041d4:	4603      	mov	r3, r0
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <_ZNVKSt3_MuItLb0ELb0EEclIRtSt5tupleIJEEEEOT_S6_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 80041ea:	68b8      	ldr	r0, [r7, #8]
 80041ec:	f7ff f9c6 	bl	800357c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80041f0:	4603      	mov	r3, r0
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <_ZSt8__invokeIRMN8ICM426888icm42688EF7iIMU_SThEJRS1_RtEENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 80041fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041fc:	b085      	sub	sp, #20
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f869 	bl	80042de <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS6_E4typeE>
 800420c:	4604      	mov	r4, r0
 800420e:	68b8      	ldr	r0, [r7, #8]
 8004210:	f7ff f912 	bl	8003438 <_ZSt7forwardIRN8ICM426888icm42688EEOT_RNSt16remove_referenceIS3_E4typeE>
 8004214:	4605      	mov	r5, r0
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff f9b0 	bl	800357c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800421c:	4603      	mov	r3, r0
 800421e:	462a      	mov	r2, r5
 8004220:	4621      	mov	r1, r4
 8004222:	4630      	mov	r0, r6
 8004224:	f000 f866 	bl	80042f4 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>
 8004228:	4603      	mov	r3, r0
    }
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004232 <_ZSt12__get_helperILj0EN8ICM426888icm42688EJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f889 	bl	8004352 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEE7_M_headERS2_>
 8004240:	4603      	mov	r3, r0
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_STvEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	7338      	strb	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f87d 	bl	800436c <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>
 8004272:	4603      	mov	r3, r0
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	6852      	ldr	r2, [r2, #4]
 8004278:	1052      	asrs	r2, r2, #1
 800427a:	1899      	adds	r1, r3, r2
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	6852      	ldr	r2, [r2, #4]
 8004280:	f002 0201 	and.w	r2, r2, #1
 8004284:	2a00      	cmp	r2, #0
 8004286:	d102      	bne.n	800428e <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x2e>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	e008      	b.n	80042a0 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_vERS2_JEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x40>
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	6852      	ldr	r2, [r2, #4]
 8004292:	1052      	asrs	r2, r2, #1
 8004294:	4413      	add	r3, r2
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	4413      	add	r3, r2
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4608      	mov	r0, r1
 80042a2:	4798      	blx	r3
 80042a4:	4603      	mov	r3, r0
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <_ZSt12__get_helperILj0EN8ICM426888icm42688EJtEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f863 	bl	8004382 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEE7_M_headERS2_>
 80042bc:	4603      	mov	r3, r0
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <_ZSt12__get_helperILj1EtJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b082      	sub	sp, #8
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f865 	bl	800439e <_ZNSt11_Tuple_implILj1EJtEE7_M_headERS0_>
 80042d4:	4603      	mov	r3, r0
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <_ZSt7forwardIRMN8ICM426888icm42688EF7iIMU_SThEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
 80042f4:	b5b0      	push	{r4, r5, r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	7338      	strb	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f832 	bl	800436c <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>
 8004308:	4603      	mov	r3, r0
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	6852      	ldr	r2, [r2, #4]
 800430e:	1052      	asrs	r2, r2, #1
 8004310:	189d      	adds	r5, r3, r2
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	6852      	ldr	r2, [r2, #4]
 8004316:	f002 0201 	and.w	r2, r2, #1
 800431a:	2a00      	cmp	r2, #0
 800431c:	d102      	bne.n	8004324 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x30>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	681c      	ldr	r4, [r3, #0]
 8004322:	e008      	b.n	8004336 <_ZSt13__invoke_implI7iIMU_STRMN8ICM426888icm42688EFS0_hERS2_JRtEET_St19__invoke_memfun_refOT0_OT1_DpOT2_+0x42>
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	6852      	ldr	r2, [r2, #4]
 8004328:	1052      	asrs	r2, r2, #1
 800432a:	4413      	add	r3, r2
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	4413      	add	r3, r2
 8004334:	681c      	ldr	r4, [r3, #0]
 8004336:	6838      	ldr	r0, [r7, #0]
 8004338:	f7ff f920 	bl	800357c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800433c:	4603      	mov	r3, r0
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	4619      	mov	r1, r3
 8004344:	4628      	mov	r0, r5
 8004346:	47a0      	blx	r4
 8004348:	4603      	mov	r3, r0
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bdb0      	pop	{r4, r5, r7, pc}

08004352 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4618      	mov	r0, r3
 800435e:	f000 f82b 	bl	80043b8 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>
 8004362:	4603      	mov	r3, r0
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <_ZSt8__invfwdIRN8ICM426888icm42688ES2_EOT0_RNSt16remove_referenceIT_E4typeE>:
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
    { return static_cast<_Up&&>(__t); }
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <_ZNSt11_Tuple_implILj0EJN8ICM426888icm42688EtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3304      	adds	r3, #4
 800438e:	4618      	mov	r0, r3
 8004390:	f000 f812 	bl	80043b8 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>
 8004394:	4603      	mov	r3, r0
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <_ZNSt11_Tuple_implILj1EJtEE7_M_headERS0_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f810 	bl	80043ce <_ZNSt10_Head_baseILj1EtLb0EE7_M_headERS0_>
 80043ae:	4603      	mov	r3, r0
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <_ZNSt10_Head_baseILj0EN8ICM426888icm42688ELb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <_ZNSt10_Head_baseILj1EtLb0EE7_M_headERS0_>:
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4618      	mov	r0, r3
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <_ZN8ICM426888GYRO_CNFlsEhNS0_3FSRE>:
        {
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	6039      	str	r1, [r7, #0]
 80043ee:	71fb      	strb	r3, [r7, #7]
            return  n << static_cast<uint8_t> (fsr);
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	4093      	lsls	r3, r2
        }   
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <_ZN8ICM426889ACCEL_CNFlsEhNS0_3FSRE>:
        {
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	6039      	str	r1, [r7, #0]
 800440e:	71fb      	strb	r3, [r7, #7]
            return  n << static_cast<uint8_t> (fsr);
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	4093      	lsls	r3, r2
        } 
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE>:

namespace ICM42688{

    //float map_gyro_ODR_CNF_to_ODR(const config& cnf){

	float map_gyro_ODR_CNF_to_ODR(GYRO_CNF::ODR gyroODR){
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
        using namespace GYRO_CNF;

        if(gyroODR == ODR::ODR_500){
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b0f      	cmp	r3, #15
 8004430:	d102      	bne.n	8004438 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x14>
            return 500.0f;
 8004432:	eddf 7a29 	vldr	s15, [pc, #164]	; 80044d8 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xb4>
 8004436:	e049      	b.n	80044cc <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        if(gyroODR <= ODR::ODR_1000 && gyroODR >= ODR::ODR_32000){
 8004438:	2106      	movs	r1, #6
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f91e 	bl	800467c <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d008      	beq.n	8004458 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x34>
 8004446:	2101      	movs	r1, #1
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f92b 	bl	80046a4 <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x34>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x36>
 8004458:	2300      	movs	r3, #0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d010      	beq.n	8004480 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x5c>
            return 32000.0f / (1 << (gyroODR - ODR::ODR_32000));
 800445e:	2101      	movs	r1, #1
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f933 	bl	80046cc <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>
 8004466:	4603      	mov	r3, r0
 8004468:	461a      	mov	r2, r3
 800446a:	2301      	movs	r3, #1
 800446c:	4093      	lsls	r3, r2
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004476:	eddf 6a19 	vldr	s13, [pc, #100]	; 80044dc <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xb8>
 800447a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800447e:	e025      	b.n	80044cc <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        if(gyroODR <= ODR::ODR_12_5 && gyroODR >= ODR::ODR_200){
 8004480:	210b      	movs	r1, #11
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f8fa 	bl	800467c <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7c>
 800448e:	2107      	movs	r1, #7
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f907 	bl	80046a4 <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7c>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0x7e>
 80044a0:	2300      	movs	r3, #0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d010      	beq.n	80044c8 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa4>
            return 200.0f /  (1 << (gyroODR - ODR::ODR_200));
 80044a6:	2107      	movs	r1, #7
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f90f 	bl	80046cc <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	2301      	movs	r3, #1
 80044b4:	4093      	lsls	r3, r2
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044be:	eddf 6a08 	vldr	s13, [pc, #32]	; 80044e0 <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xbc>
 80044c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c6:	e001      	b.n	80044cc <_ZN8ICM4268823map_gyro_ODR_CNF_to_ODRENS_8GYRO_CNF3ODRE+0xa8>
        }

        return -1.0f;
 80044c8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
 80044cc:	eeb0 0a67 	vmov.f32	s0, s15
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	43fa0000 	.word	0x43fa0000
 80044dc:	46fa0000 	.word	0x46fa0000
 80044e0:	43480000 	.word	0x43480000

080044e4 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE>:


    //float map_gyro_FSR_CNF_to_FSR(const config& cnf){
	float map_gyro_FSR_CNF_to_FSR(GYRO_CNF::FSR gyroFSR){
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
        using namespace GYRO_CNF;

        if(gyroFSR <= FSR::FSR_15_625){
 80044ec:	2107      	movs	r1, #7
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f8fd 	bl	80046ee <_ZN8ICM426888GYRO_CNFleENS0_3FSRES1_>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00c      	beq.n	8004514 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x30>
            return 2000.0f / (1 << gyroFSR);
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	2001      	movs	r0, #1
 80044fe:	f7ff ff71 	bl	80043e4 <_ZN8ICM426888GYRO_CNFlsEhNS0_3FSRE>
 8004502:	ee07 0a90 	vmov	s15, r0
 8004506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004528 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x44>
 800450e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004512:	e001      	b.n	8004518 <_ZN8ICM4268823map_gyro_FSR_CNF_to_FSRENS_8GYRO_CNF3FSRE+0x34>
        }

        return -1.0f;
 8004514:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    }
 8004518:	eef0 7a47 	vmov.f32	s15, s14
 800451c:	eeb0 0a67 	vmov.f32	s0, s15
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	44fa0000 	.word	0x44fa0000

0800452c <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE>:

    //float map_accel_ODR_CNF_to_ODR(const config& cnf){
	float map_accel_ODR_CNF_to_ODR(ACCEL_CNF::ODR accelODR){
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
        using namespace ACCEL_CNF;

        if(accelODR == ODR::ODR_500){
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b0f      	cmp	r3, #15
 8004538:	d102      	bne.n	8004540 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x14>
            return 500.0f;
 800453a:	eddf 7a29 	vldr	s15, [pc, #164]	; 80045e0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xb4>
 800453e:	e049      	b.n	80045d4 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        if(accelODR <= ODR::ODR_1000 && accelODR >= ODR::ODR_32000){
 8004540:	2106      	movs	r1, #6
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f8e7 	bl	8004716 <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x34>
 800454e:	2101      	movs	r1, #1
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f8f4 	bl	800473e <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x34>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x36>
 8004560:	2300      	movs	r3, #0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d010      	beq.n	8004588 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x5c>
            return 32000.0f / (1 << (accelODR - ODR::ODR_32000)) ;
 8004566:	2101      	movs	r1, #1
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f8fc 	bl	8004766 <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>
 800456e:	4603      	mov	r3, r0
 8004570:	461a      	mov	r2, r3
 8004572:	2301      	movs	r3, #1
 8004574:	4093      	lsls	r3, r2
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800457e:	eddf 6a19 	vldr	s13, [pc, #100]	; 80045e4 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xb8>
 8004582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004586:	e025      	b.n	80045d4 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        if(accelODR <= ODR::ODR_1_562 && accelODR >= ODR::ODR_200){
 8004588:	210e      	movs	r1, #14
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f8c3 	bl	8004716 <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d008      	beq.n	80045a8 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7c>
 8004596:	2107      	movs	r1, #7
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f8d0 	bl	800473e <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7c>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0x7e>
 80045a8:	2300      	movs	r3, #0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d010      	beq.n	80045d0 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa4>
            return 200.0f /  ( 1 << (accelODR - ODR::ODR_200));
 80045ae:	2107      	movs	r1, #7
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f8d8 	bl	8004766 <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>
 80045b6:	4603      	mov	r3, r0
 80045b8:	461a      	mov	r2, r3
 80045ba:	2301      	movs	r3, #1
 80045bc:	4093      	lsls	r3, r2
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045c6:	eddf 6a08 	vldr	s13, [pc, #32]	; 80045e8 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xbc>
 80045ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ce:	e001      	b.n	80045d4 <_ZN8ICM4268824map_accel_ODR_CNF_to_ODRENS_9ACCEL_CNF3ODRE+0xa8>
        }

        return -1.0f;
 80045d0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
 80045d4:	eeb0 0a67 	vmov.f32	s0, s15
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	43fa0000 	.word	0x43fa0000
 80045e4:	46fa0000 	.word	0x46fa0000
 80045e8:	43480000 	.word	0x43480000

080045ec <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE>:

    //float map_accel_FSR_CNF_to_FSR(const config& cnf){
	float map_accel_FSR_CNF_to_FSR(ACCEL_CNF::FSR accelFSR){
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
        using namespace ACCEL_CNF;
  
        if(accelFSR <= FSR::FSR_2){
 80045f4:	2103      	movs	r1, #3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f8c6 	bl	8004788 <_ZN8ICM426889ACCEL_CNFleENS0_3FSRES1_>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00c      	beq.n	800461c <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE+0x30>
            return 16.0f / (1 << accelFSR);
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	2001      	movs	r0, #1
 8004606:	f7ff fefd 	bl	8004404 <_ZN8ICM426889ACCEL_CNFlsEhNS0_3FSRE>
 800460a:	ee07 0a90 	vmov	s15, r0
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004612:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8004616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461a:	e001      	b.n	8004620 <_ZN8ICM4268824map_accel_FSR_CNF_to_FSRENS_9ACCEL_CNF3FSRE+0x34>
        }

        return -1.0f;
 800461c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    }
 8004620:	eef0 7a47 	vmov.f32	s15, s14
 8004624:	eeb0 0a67 	vmov.f32	s0, s15
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <_ZN8ICM4268815convertTempDataEhh>:

    
    float convertTempData(uint8_t rawTempH, uint8_t rawTempL)
    {
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	460a      	mov	r2, r1
 800463a:	71fb      	strb	r3, [r7, #7]
 800463c:	4613      	mov	r3, r2
 800463e:	71bb      	strb	r3, [r7, #6]
        int16_t temp_data = (rawTempH << 8) |  rawTempL;
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	b21a      	sxth	r2, r3
 8004646:	79bb      	ldrb	r3, [r7, #6]
 8004648:	b21b      	sxth	r3, r3
 800464a:	4313      	orrs	r3, r2
 800464c:	81fb      	strh	r3, [r7, #14]
        return (temp_data / 132.48f + 25);
 800464e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800465a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004678 <_ZN8ICM4268815convertTempDataEhh+0x48>
 800465e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004662:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004666:	ee77 7a87 	vadd.f32	s15, s15, s14
    }
 800466a:	eeb0 0a67 	vmov.f32	s0, s15
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	43047ae1 	.word	0x43047ae1

0800467c <_ZN8ICM426888GYRO_CNFleENS0_3ODRES1_>:
    /////////////////////////// GYRO_CNF /////////////////////////////////////

    namespace GYRO_CNF {

        bool operator<=(ODR odr1, ODR odr2) 
        {
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) <= static_cast<uint8_t> (odr2);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	b2da      	uxtb	r2, r3
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	429a      	cmp	r2, r3
 8004690:	bf94      	ite	ls
 8004692:	2301      	movls	r3, #1
 8004694:	2300      	movhi	r3, #0
 8004696:	b2db      	uxtb	r3, r3
        }
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <_ZN8ICM426888GYRO_CNFgeENS0_3ODRES1_>:
        bool operator>=(ODR odr1, ODR odr2) 
        {
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) >= static_cast<uint8_t> (odr2);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	429a      	cmp	r2, r3
 80046b8:	bf2c      	ite	cs
 80046ba:	2301      	movcs	r3, #1
 80046bc:	2300      	movcc	r3, #0
 80046be:	b2db      	uxtb	r3, r3
        }
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <_ZN8ICM426888GYRO_CNFmiENS0_3ODRES1_>:
        uint8_t operator-(ODR odr1, ODR odr2)
        {
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) - static_cast<uint8_t> (odr2);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	b2db      	uxtb	r3, r3
        }
 80046e2:	4618      	mov	r0, r3
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <_ZN8ICM426888GYRO_CNFleENS0_3FSRES1_>:


        bool operator<=(FSR fsr1, FSR fsr2)
        {
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (fsr1) <= static_cast<uint8_t> (fsr2);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	429a      	cmp	r2, r3
 8004702:	bf94      	ite	ls
 8004704:	2301      	movls	r3, #1
 8004706:	2300      	movhi	r3, #0
 8004708:	b2db      	uxtb	r3, r3
        }
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <_ZN8ICM426889ACCEL_CNFleENS0_3ODRES1_>:

    /////////////////////////// ACCEL_CNF /////////////////////////////////////
    namespace ACCEL_CNF {

        bool operator<=(ODR odr1, ODR odr2) 
        {
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) <= static_cast<uint8_t> (odr2);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	b2da      	uxtb	r2, r3
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	429a      	cmp	r2, r3
 800472a:	bf94      	ite	ls
 800472c:	2301      	movls	r3, #1
 800472e:	2300      	movhi	r3, #0
 8004730:	b2db      	uxtb	r3, r3
        }
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <_ZN8ICM426889ACCEL_CNFgeENS0_3ODRES1_>:
        bool operator>=(ODR odr1, ODR odr2) 
        {
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) >= static_cast<uint8_t> (odr2);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	b2da      	uxtb	r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	429a      	cmp	r2, r3
 8004752:	bf2c      	ite	cs
 8004754:	2301      	movcs	r3, #1
 8004756:	2300      	movcc	r3, #0
 8004758:	b2db      	uxtb	r3, r3
        }
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <_ZN8ICM426889ACCEL_CNFmiENS0_3ODRES1_>:
        uint8_t operator-(ODR odr1, ODR odr2)
        {
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (odr1) - static_cast<uint8_t> (odr2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	b2da      	uxtb	r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	b2db      	uxtb	r3, r3
        }
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <_ZN8ICM426889ACCEL_CNFleENS0_3FSRES1_>:

        bool operator<=(FSR fsr1, FSR fsr2)
        {
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
            return static_cast<uint8_t> (fsr1) <= static_cast<uint8_t> (fsr2);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	429a      	cmp	r2, r3
 800479c:	bf94      	ite	ls
 800479e:	2301      	movls	r3, #1
 80047a0:	2300      	movhi	r3, #0
 80047a2:	b2db      	uxtb	r3, r3
        }  
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047b4:	f001 f8eb 	bl	800598e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047b8:	f000 f812 	bl	80047e0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047bc:	f7fc ff80 	bl	80016c0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80047c0:	f000 fb9c 	bl	8004efc <MX_SPI2_Init>
  MX_I2C4_Init();
 80047c4:	f7fd f89a 	bl	80018fc <MX_I2C4_Init>
  MX_CAN1_Init();
 80047c8:	f7fc fe6e 	bl	80014a8 <MX_CAN1_Init>
  MX_CAN2_Init();
 80047cc:	f7fc fea4 	bl	8001518 <MX_CAN2_Init>
  MX_TIM5_Init();
 80047d0:	f000 fe86 	bl	80054e0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //HAL_Delay(2000);

  system_init();
 80047d4:	f000 fcce 	bl	8005174 <_Z11system_initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  system_run_active_mode();
 80047d8:	f000 fcf0 	bl	80051bc <_Z22system_run_active_modev>
 80047dc:	e7fc      	b.n	80047d8 <main+0x28>
	...

080047e0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b094      	sub	sp, #80	; 0x50
 80047e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047e6:	f107 0320 	add.w	r3, r7, #32
 80047ea:	2230      	movs	r2, #48	; 0x30
 80047ec:	2100      	movs	r1, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	f005 fc42 	bl	800a078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047f4:	f107 030c 	add.w	r3, r7, #12
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	60da      	str	r2, [r3, #12]
 8004802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004804:	4b33      	ldr	r3, [pc, #204]	; (80048d4 <_Z18SystemClock_Configv+0xf4>)
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	4a32      	ldr	r2, [pc, #200]	; (80048d4 <_Z18SystemClock_Configv+0xf4>)
 800480a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480e:	6413      	str	r3, [r2, #64]	; 0x40
 8004810:	4b30      	ldr	r3, [pc, #192]	; (80048d4 <_Z18SystemClock_Configv+0xf4>)
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800481c:	4b2e      	ldr	r3, [pc, #184]	; (80048d8 <_Z18SystemClock_Configv+0xf8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a2d      	ldr	r2, [pc, #180]	; (80048d8 <_Z18SystemClock_Configv+0xf8>)
 8004822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	4b2b      	ldr	r3, [pc, #172]	; (80048d8 <_Z18SystemClock_Configv+0xf8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004830:	607b      	str	r3, [r7, #4]
 8004832:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004834:	2309      	movs	r3, #9
 8004836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800483e:	2301      	movs	r3, #1
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004842:	2302      	movs	r3, #2
 8004844:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004846:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800484a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800484c:	2306      	movs	r3, #6
 800484e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8004850:	23d8      	movs	r3, #216	; 0xd8
 8004852:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004854:	2302      	movs	r3, #2
 8004856:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004858:	2309      	movs	r3, #9
 800485a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800485c:	f107 0320 	add.w	r3, r7, #32
 8004860:	4618      	mov	r0, r3
 8004862:	f002 fd0b 	bl	800727c <HAL_RCC_OscConfig>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf14      	ite	ne
 800486c:	2301      	movne	r3, #1
 800486e:	2300      	moveq	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <_Z18SystemClock_Configv+0x9a>
  {
    Error_Handler();
 8004876:	f000 f831 	bl	80048dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800487a:	f002 fcaf 	bl	80071dc <HAL_PWREx_EnableOverDrive>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 800488e:	f000 f825 	bl	80048dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004892:	230f      	movs	r3, #15
 8004894:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004896:	2302      	movs	r3, #2
 8004898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800489e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80048a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80048a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80048aa:	f107 030c 	add.w	r3, r7, #12
 80048ae:	2107      	movs	r1, #7
 80048b0:	4618      	mov	r0, r3
 80048b2:	f002 ff87 	bl	80077c4 <HAL_RCC_ClockConfig>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <_Z18SystemClock_Configv+0xea>
  {
    Error_Handler();
 80048c6:	f000 f809 	bl	80048dc <Error_Handler>
  }
}
 80048ca:	bf00      	nop
 80048cc:	3750      	adds	r7, #80	; 0x50
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40007000 	.word	0x40007000

080048dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048e0:	b672      	cpsid	i
}
 80048e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048e4:	e7fe      	b.n	80048e4 <Error_Handler+0x8>
	...

080048e8 <_Z20fail_silent_mode_runv>:

#define LED_FAIL_SILENT_GPIO_Port LED1_GPIO_Port
#define LED_FAIL_SILENT_GPIO_Pin  LED1_Pin

void fail_silent_mode_run(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
	gpio ledFailSilent(LED_FAIL_SILENT_GPIO_Port, LED_FAIL_SILENT_GPIO_Pin);
 80048ee:	463b      	mov	r3, r7
 80048f0:	2210      	movs	r2, #16
 80048f2:	4905      	ldr	r1, [pc, #20]	; (8004908 <_Z20fail_silent_mode_runv+0x20>)
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fc ff8b 	bl	8001810 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>


	ledFailSilent.write(GPIO_ST::HIGH);
 80048fa:	463b      	mov	r3, r7
 80048fc:	2101      	movs	r1, #1
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fc ffac 	bl	800185c <_ZN5STM324gpio5writeE7GPIO_ST>

	while(1)
 8004904:	e7fe      	b.n	8004904 <_Z20fail_silent_mode_runv+0x1c>
 8004906:	bf00      	nop
 8004908:	40021000 	.word	0x40021000

0800490c <_ZN9iPHandler12add_read_bitEhbb>:
    static uint8_t add_read_bit(uint8_t reg, bool normalMode = true, bool rwBitInFront = true)
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	71fb      	strb	r3, [r7, #7]
 8004916:	460b      	mov	r3, r1
 8004918:	71bb      	strb	r3, [r7, #6]
 800491a:	4613      	mov	r3, r2
 800491c:	717b      	strb	r3, [r7, #5]
    	if(rwBitInFront){
 800491e:	797b      	ldrb	r3, [r7, #5]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d009      	beq.n	8004938 <_ZN9iPHandler12add_read_bitEhbb+0x2c>
    		return normalMode ? (reg | (1 << 7)) : reg;
 8004924:	79bb      	ldrb	r3, [r7, #6]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d004      	beq.n	8004934 <_ZN9iPHandler12add_read_bitEhbb+0x28>
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e00f      	b.n	8004954 <_ZN9iPHandler12add_read_bitEhbb+0x48>
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	e00d      	b.n	8004954 <_ZN9iPHandler12add_read_bitEhbb+0x48>
    		return normalMode ? (reg << 1) | 0x01 : reg << 1;
 8004938:	79bb      	ldrb	r3, [r7, #6]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <_ZN9iPHandler12add_read_bitEhbb+0x42>
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	b25b      	sxtb	r3, r3
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	b25b      	sxtb	r3, r3
 800494a:	b2db      	uxtb	r3, r3
 800494c:	e002      	b.n	8004954 <_ZN9iPHandler12add_read_bitEhbb+0x48>
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	b2db      	uxtb	r3, r3
    }
 8004954:	4618      	mov	r0, r3
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <_ZN9iPHandler13add_write_bitEhbb>:
    static uint8_t add_write_bit(uint8_t reg, bool normalMode = true, bool rwBitInFront = true)
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	71fb      	strb	r3, [r7, #7]
 800496a:	460b      	mov	r3, r1
 800496c:	71bb      	strb	r3, [r7, #6]
 800496e:	4613      	mov	r3, r2
 8004970:	717b      	strb	r3, [r7, #5]
    	if(rwBitInFront){
 8004972:	797b      	ldrb	r3, [r7, #5]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d009      	beq.n	800498c <_ZN9iPHandler13add_write_bitEhbb+0x2c>
    		return normalMode ? reg : (reg | (1 << 7));
 8004978:	79bb      	ldrb	r3, [r7, #6]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <_ZN9iPHandler13add_write_bitEhbb+0x22>
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	e012      	b.n	80049a8 <_ZN9iPHandler13add_write_bitEhbb+0x48>
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004988:	b2db      	uxtb	r3, r3
 800498a:	e00d      	b.n	80049a8 <_ZN9iPHandler13add_write_bitEhbb+0x48>
    		return normalMode ? reg << 1 : (reg  << 0x01 | 1);
 800498c:	79bb      	ldrb	r3, [r7, #6]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <_ZN9iPHandler13add_write_bitEhbb+0x3a>
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	b2db      	uxtb	r3, r3
 8004998:	e006      	b.n	80049a8 <_ZN9iPHandler13add_write_bitEhbb+0x48>
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	b25b      	sxtb	r3, r3
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	b25b      	sxtb	r3, r3
 80049a6:	b2db      	uxtb	r3, r3
    }
 80049a8:	4618      	mov	r0, r3
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <_Z15normal_mode_runv>:
#define DELTA_T_ATTITUDE_ESTIMATOR_S 0.1

static bool run = false;

void normal_mode_run(void)
{
 80049b4:	b590      	push	{r4, r7, lr}
 80049b6:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 80049ba:	af04      	add	r7, sp, #16
	taskEstimateAttitude_t taskEstimateAttitude;
	taskCNIsendData_t      taskCNIsendAttitudeData;


	// Inicialización de la IMU =====================================
	gpio imuCS(ICM42688_CS_GPIO_Port, ICM42688_CS_Pin);
 80049bc:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80049c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049c4:	498f      	ldr	r1, [pc, #572]	; (8004c04 <_Z15normal_mode_runv+0x250>)
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fc ff22 	bl	8001810 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

	phandler_spi<> spi2(&hspi2, &imuCS, COMM_MODE::BLCK);
 80049cc:	f507 7249 	add.w	r2, r7, #804	; 0x324
 80049d0:	f507 7031 	add.w	r0, r7, #708	; 0x2c4
 80049d4:	2300      	movs	r3, #0
 80049d6:	498c      	ldr	r1, [pc, #560]	; (8004c08 <_Z15normal_mode_runv+0x254>)
 80049d8:	f000 f94c 	bl	8004c74 <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE>

	ICM42688::config_FIFO icmFifoCnf =
 80049dc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80049e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80049e4:	2201      	movs	r2, #1
 80049e6:	801a      	strh	r2, [r3, #0]
 80049e8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80049ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80049f0:	2200      	movs	r2, #0
 80049f2:	605a      	str	r2, [r3, #4]
	{
		  .watermark = 1,
		  .mode = ICM42688::FIFO_MODE::BYPASS,
	};

	ICM42688::config_INT icmIntCnf =
 80049f4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80049f8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80049fc:	4a83      	ldr	r2, [pc, #524]	; (8004c0c <_Z15normal_mode_runv+0x258>)
 80049fe:	461c      	mov	r4, r3
 8004a00:	4613      	mov	r3, r2
 8004a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			//.int1Mode = ICM42688::INT_MODE::PULSED_PP_HIGH,
			.int2Source = ICM42688::INT_SOURCE::DISABLED,
			.int2Mode = ICM42688::INT_MODE::DISABLED,
	};

	ICM42688::Config icmCnf =
 8004a08:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004a0c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a10:	4618      	mov	r0, r3
 8004a12:	2328      	movs	r3, #40	; 0x28
 8004a14:	461a      	mov	r2, r3
 8004a16:	2100      	movs	r1, #0
 8004a18:	f005 fb2e 	bl	800a078 <memset>
 8004a1c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004a20:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a24:	2203      	movs	r2, #3
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004a2c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a30:	2206      	movs	r2, #6
 8004a32:	605a      	str	r2, [r3, #4]
 8004a34:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004a38:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	609a      	str	r2, [r3, #8]
 8004a40:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004a44:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a48:	2206      	movs	r2, #6
 8004a4a:	60da      	str	r2, [r3, #12]
		.gyroODR 					= ICM42688::GYRO_CNF::ODR::ODR_1000,
		.accelFSR 					= ICM42688::ACCEL_CNF::FSR::FSR_4,
		.accelODR 					= ICM42688::ACCEL_CNF::ODR::ODR_1000,
		.fifoCnf					= icmFifoCnf,
		.intCnf						= icmIntCnf,
	};
 8004a4c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004a50:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a54:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8004a58:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8004a5c:	3310      	adds	r3, #16
 8004a5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a62:	e883 0003 	stmia.w	r3, {r0, r1}
 8004a66:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004a6a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a6e:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8004a72:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8004a76:	f103 0418 	add.w	r4, r3, #24
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	ICM42688::icm42688 imu(icmCnf, &spi2, &imuCS);
 8004a82:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8004a86:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8004a8a:	f507 7121 	add.w	r1, r7, #644	; 0x284
 8004a8e:	f107 0018 	add.w	r0, r7, #24
 8004a92:	f7fd f97b 	bl	8001d8c <_ZN8ICM426888icm42688C1ERNS_6ConfigEP9iPHandlerPN5STM324gpioE>

	// Inicialización del LED heartbeat==============================
	STM32::gpio ledHeartbeat(LED_HEARTBEAT_GPIO_Port, LED_HEARTBEAT_GPIO_Pin);
 8004a96:	463b      	mov	r3, r7
 8004a98:	2208      	movs	r2, #8
 8004a9a:	495d      	ldr	r1, [pc, #372]	; (8004c10 <_Z15normal_mode_runv+0x25c>)
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fc feb7 	bl	8001810 <_ZN5STM324gpioC1EP12GPIO_TypeDeft>

	// Inicialización de la CNI ==============================
	CNI_constructor(&hcan1);
 8004aa2:	485c      	ldr	r0, [pc, #368]	; (8004c14 <_Z15normal_mode_runv+0x260>)
 8004aa4:	f7fc f9d4 	bl	8000e50 <_Z15CNI_constructorP19__CAN_HandleTypeDef>

	// Inicialización del attitude estimator ==============================
	attitudeEstimator_constructor(ALPHA_ATTITUDE_ESTIMATOR, DELTA_T_ATTITUDE_ESTIMATOR_S);
 8004aa8:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8004c18 <_Z15normal_mode_runv+0x264>
 8004aac:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8004c1c <_Z15normal_mode_runv+0x268>
 8004ab0:	f7fc fbe6 	bl	8001280 <_Z29attitudeEstimator_constructorff>

	// Creación de las tareas========================================
	taskWatchdog_constructor(&taskWatchdog,
 8004ab4:	f507 7070 	add.w	r0, r7, #960	; 0x3c0
 8004ab8:	4b59      	ldr	r3, [pc, #356]	; (8004c20 <_Z15normal_mode_runv+0x26c>)
 8004aba:	9301      	str	r3, [sp, #4]
 8004abc:	2300      	movs	r3, #0
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	2364      	movs	r3, #100	; 0x64
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	f000 fcc3 	bl	8005450 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>
			PERIOD_TASK_WATCHDOG_TICKS_NORMAL,
			WCET_TASK_WATCHDOG_US,
			BCET_TASK_WATCHDOG_US,
			&hiwdg);

	taskHeartbeat_constructor(&taskHeartbeat,
 8004aca:	f507 7076 	add.w	r0, r7, #984	; 0x3d8
 8004ace:	463b      	mov	r3, r7
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	2364      	movs	r3, #100	; 0x64
 8004ad8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004adc:	2100      	movs	r1, #0
 8004ade:	f000 fbf7 	bl	80052d0 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>
			PERIOD_TASK_HEARTBEAT_TICKS_NORMAL,
			WCET_TASK_HEARTBEAT_US,
			BCET_TASK_HEARTBEAT_US,
			&ledHeartbeat);

	taskIMUgetData_constructor(&taskIMUgetData,
 8004ae2:	f507 7061 	add.w	r0, r7, #900	; 0x384
 8004ae6:	2304      	movs	r3, #4
 8004ae8:	9302      	str	r3, [sp, #8]
 8004aea:	f107 0318 	add.w	r3, r7, #24
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	2300      	movs	r3, #0
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	2364      	movs	r3, #100	; 0x64
 8004af6:	2264      	movs	r2, #100	; 0x64
 8004af8:	2101      	movs	r1, #1
 8004afa:	f000 fc1f 	bl	800533c <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688Em>
			PERIOD_TASK_IMU_TICKS_NORMAL,
			WCET_TASK_IMU_US,
			BCET_TASK_IMU_US,
			&imu, HANDLE_MSG_CNI_SEND_IMU_DATA);

	taskCNIsendData_constructor(&taskCNIsendIMUdata,
 8004afe:	f507 705b 	add.w	r0, r7, #876	; 0x36c
 8004b02:	2304      	movs	r3, #4
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	2300      	movs	r3, #0
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	2364      	movs	r3, #100	; 0x64
 8004b0c:	2264      	movs	r2, #100	; 0x64
 8004b0e:	2103      	movs	r1, #3
 8004b10:	f000 fb76 	bl	8005200 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>
			PERIOD_TASK_CNI_SEND_IMU_TICKS_NORMAL,
			WCET_TASK_CNI_SEND_IMU_US,
			BCET_TASK_CNI_SEND_IMU_US,
			HANDLE_MSG_CNI_SEND_IMU_DATA);

	taskEstimateAttitude_constructor(&taskEstimateAttitude,
 8004b14:	f507 7055 	add.w	r0, r7, #852	; 0x354
 8004b18:	230b      	movs	r3, #11
 8004b1a:	9301      	str	r3, [sp, #4]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	2364      	movs	r3, #100	; 0x64
 8004b22:	2264      	movs	r2, #100	; 0x64
 8004b24:	2105      	movs	r1, #5
 8004b26:	f000 fb9d 	bl	8005264 <_Z32taskEstimateAttitude_constructorP22taskEstimateAttitude_tmmmmm>
			PERIOD_TASK_ESTIMATE_ATTITUDE_TICKS_NORMAL,
			WCET_TASK_ESTIMATE_ATTITUDE_US,
			BCET_TASK_ESTIMATE_ATTITUDE_US,
			HANDLE_MSG_CNI_SEND_ATTITUDE_DATA);

	taskCNIsendData_constructor(&taskCNIsendAttitudeData,
 8004b2a:	f507 704f 	add.w	r0, r7, #828	; 0x33c
 8004b2e:	230b      	movs	r3, #11
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	2300      	movs	r3, #0
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	2364      	movs	r3, #100	; 0x64
 8004b38:	2264      	movs	r2, #100	; 0x64
 8004b3a:	2107      	movs	r1, #7
 8004b3c:	f000 fb60 	bl	8005200 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>
			PERIOD_TASK_CNI_SEND_ATTITUDE_TICKS_NORMAL,
			WCET_TASK_CNI_SEND_ATTITUDE_US,
			BCET_TASK_CNI_SEND_ATTITUDE_US,
			HANDLE_MSG_CNI_SEND_ATTITUDE_DATA);

	taskTimeTriggeredSync_constructor(&taskPeriodicSync,
 8004b40:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8004b44:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004b48:	9303      	str	r3, [sp, #12]
 8004b4a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004b4e:	9302      	str	r3, [sp, #8]
 8004b50:	2300      	movs	r3, #0
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	2300      	movs	r3, #0
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	2364      	movs	r3, #100	; 0x64
 8004b5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b5e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8004b62:	f000 fe55 	bl	8005810 <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm>
			HANDLE_MSG_CNI_SYNC,
			EXPECTED_SYNC_TIMESTAMP_TICKS,
			DELAY_SYNC_TICKS);

	// Inicialización del scheduler =================================
	timeTriggeredScheduler_constructor(&htim5, MICROTICKS_IN_MACROTICK);
 8004b66:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004b6a:	482e      	ldr	r0, [pc, #184]	; (8004c24 <_Z15normal_mode_runv+0x270>)
 8004b6c:	f000 fd3e 	bl	80055ec <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm>
	timeTriggeredScheduler_init();
 8004b70:	f000 fd66 	bl	8005640 <_Z27timeTriggeredScheduler_initv>

	CNI_init();
 8004b74:	f7fc f988 	bl	8000e88 <_Z8CNI_initv>

	taskHeartbeat_start(&taskHeartbeat);
 8004b78:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fbc1 	bl	8005304 <_Z19taskHeartbeat_startP15taskHeartbeat_t>
	taskIMUgetData_start(&taskIMUgetData);
 8004b82:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fbf6 	bl	8005378 <_Z20taskIMUgetData_startP16taskIMUgetData_t>
	taskCNIsendData_start(&taskCNIsendIMUdata);
 8004b8c:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fb4f 	bl	8005234 <_Z21taskCNIsendData_startP17taskCNIsendData_t>

	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskHeartbeat);
 8004b96:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fe10 	bl	80057c0 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskWatchdog);
 8004ba0:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fe0b 	bl	80057c0 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskPeriodicSync);
 8004baa:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fe06 	bl	80057c0 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskIMUgetData);
 8004bb4:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fe01 	bl	80057c0 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIsendIMUdata);
 8004bbe:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fdfc 	bl	80057c0 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskEstimateAttitude);
 8004bc8:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fdf7 	bl	80057c0 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>
	timeTriggeredScheduler_add_task((timeTriggeredTask_t*)&taskCNIsendAttitudeData);
 8004bd2:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fdf2 	bl	80057c0 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>

	CNI_start();
 8004bdc:	f7fc f97a 	bl	8000ed4 <_Z9CNI_startv>

	// Se queda acá esperando hasta que uno presione el botón para comenzar
	while(!run)
 8004be0:	bf00      	nop
 8004be2:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <_Z15normal_mode_runv+0x274>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	f083 0301 	eor.w	r3, r3, #1
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f8      	bne.n	8004be2 <_Z15normal_mode_runv+0x22e>
	}

#if IS_MASTER
	CNI_send_msg(HANDLE_MSG_CNI_SYNC);
#endif
	taskWatchdog_start(&taskWatchdog);
 8004bf0:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fc59 	bl	80054ac <_Z18taskWatchdog_startP14taskWatchdog_t>

	timeTriggeredScheduler_start();
 8004bfa:	f000 fd39 	bl	8005670 <_Z28timeTriggeredScheduler_startv>

	while(1)
	{
		timeTriggeredScheduler_dispatch();
 8004bfe:	f000 fd43 	bl	8005688 <_Z31timeTriggeredScheduler_dispatchv>
 8004c02:	e7fc      	b.n	8004bfe <_Z15normal_mode_runv+0x24a>
 8004c04:	40020400 	.word	0x40020400
 8004c08:	20000304 	.word	0x20000304
 8004c0c:	0800a260 	.word	0x0800a260
 8004c10:	40021000 	.word	0x40021000
 8004c14:	20000248 	.word	0x20000248
 8004c18:	3dcccccd 	.word	0x3dcccccd
 8004c1c:	3ccccccd 	.word	0x3ccccccd
 8004c20:	200002f0 	.word	0x200002f0
 8004c24:	20000370 	.word	0x20000370
 8004c28:	20000300 	.word	0x20000300

08004c2c <HAL_CAN_RxFifo0MsgPendingCallback>:
    	run = true;
    }
}
#else
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8004c34:	2102      	movs	r1, #2
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f001 fbd0 	bl	80063dc <HAL_CAN_DeactivateNotification>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8004c3c:	2014      	movs	r0, #20
 8004c3e:	f001 ff4c 	bl	8006ada <HAL_NVIC_DisableIRQ>
	run = true;
 8004c42:	4b03      	ldr	r3, [pc, #12]	; (8004c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	20000300 	.word	0x20000300

08004c54 <_ZN9iPHandlerC1Ev>:
class iPHandler {
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	4a04      	ldr	r2, [pc, #16]	; (8004c70 <_ZN9iPHandlerC1Ev+0x1c>)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	0800a32c 	.word	0x0800a32c

08004c74 <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE>:

template <uint8_t BufferSize = 32>
class PHandlerSPI : public iPHandler {
public:

	PHandlerSPI(SPI_HandleTypeDef* spiHandler, gpio *cs, COMM_MODE mode)
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
		: m_handler(spiHandler)
		, m_cs(cs)
		, m_mode(mode)
		, m_size(0)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff ffe5 	bl	8004c54 <_ZN9iPHandlerC1Ev>
 8004c8a:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <_ZN5STM3211PHandlerSPIILh32EEC1EP19__SPI_HandleTypeDefPNS_4gpioE9COMM_MODE+0x64>)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	601a      	str	r2, [r3, #0]
		: m_handler(spiHandler)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	60da      	str	r2, [r3, #12]
		, m_cs(cs)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	611a      	str	r2, [r3, #16]
		, m_mode(mode)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	615a      	str	r2, [r3, #20]
		, m_size(0)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		{

			m_mutex = false;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	721a      	strb	r2, [r3, #8]
			m_cs->write(GPIO_ST::HIGH);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fc fdd0 	bl	800185c <_ZN5STM324gpio5writeE7GPIO_ST>
			m_recvBuffer = &m_rxBuffer[1];
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f103 0219 	add.w	r2, r3, #25
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	605a      	str	r2, [r3, #4]
			//m_blockDelay = delay == 0 ? HAL_MAX_DELAY : delay;
			m_blockDelay = 5000;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ccc:	65da      	str	r2, [r3, #92]	; 0x5c
		}
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	0800a31c 	.word	0x0800a31c

08004cdc <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt>:
		: PHandlerSPI(spiHandler, cs, COMM_MODE::BLCK)
		{}


	//iHANDLER_ST read_registers(uint8_t add, uint8_t size, void *cs, COMM_MODE mode)
	iPHANDLER_ST read_registers(const PHandlerOpt &opt) override
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
	{
		//SPI_ST ret = SPI_ST::OK;

		if(opt.size > BufferSize-1){
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	785b      	ldrb	r3, [r3, #1]
 8004cea:	2b1f      	cmp	r3, #31
 8004cec:	d901      	bls.n	8004cf2 <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt+0x16>
				return iPHANDLER_ST::ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e029      	b.n	8004d46 <_ZN5STM3211PHandlerSPIILh32EE14read_registersERK11PHandlerOpt+0x6a>
		//if(m_mutex == true){
		//	return iHANDLER_ST::UNAVAILABLE;
		//}
		//m_mutex = true;

		m_txBuffer[0] = add_read_bit(opt.add, opt.rw, opt.rwFront);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	7818      	ldrb	r0, [r3, #0]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	7b19      	ldrb	r1, [r3, #12]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	7b5b      	ldrb	r3, [r3, #13]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f7ff fe04 	bl	800490c <_ZN9iPHandler12add_read_bitEhbb>
 8004d04:	4603      	mov	r3, r0
 8004d06:	461a      	mov	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		m_mode = opt.mode;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	615a      	str	r2, [r3, #20]
		m_size = opt.size + 1;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	785b      	ldrb	r3, [r3, #1]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		m_cs = static_cast<gpio*>(opt.slave);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	611a      	str	r2, [r3, #16]
		m_recvBuffer = &m_rxBuffer[opt.addSize]; // recvBuffer apunta a donde comienza la recepción de SPI según el largo del address (en bytes)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	7b9b      	ldrb	r3, [r3, #14]
 8004d30:	3318      	adds	r3, #24
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	441a      	add	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	605a      	str	r2, [r3, #4]

		return start_transmition();
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f842 	bl	8004dc6 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>
 8004d42:	4603      	mov	r3, r0
 8004d44:	bf00      	nop
	}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt>:

	//iHANDLER_ST write_registers(uint8_t add, uint8_t *data, uint8_t size, void *cs, COMM_MODE mode)
	iPHANDLER_ST write_registers(uint8_t *data, const PHandlerOpt &opt) override
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	607a      	str	r2, [r7, #4]
	{
		//SPI_ST ret = SPI_ST::OK;

		if(opt.size > BufferSize-1){
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	785b      	ldrb	r3, [r3, #1]
 8004d5e:	2b1f      	cmp	r3, #31
 8004d60:	d901      	bls.n	8004d66 <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt+0x18>
				return iPHANDLER_ST::ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e02b      	b.n	8004dbe <_ZN5STM3211PHandlerSPIILh32EE15write_registersEPhRK11PHandlerOpt+0x70>
		//if(m_mutex == true){
		//	return iHANDLER_ST::UNAVAILABLE;
		//}
		//m_mutex = true;

		m_txBuffer[0] = add_write_bit(opt.add, opt.rw, opt.rwFront);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	7818      	ldrb	r0, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	7b19      	ldrb	r1, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	7b5b      	ldrb	r3, [r3, #13]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f7ff fdf4 	bl	8004960 <_ZN9iPHandler13add_write_bitEhbb>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		memcpy(m_txBuffer + 1, data, opt.size);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	3338      	adds	r3, #56	; 0x38
 8004d86:	1c58      	adds	r0, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	785b      	ldrb	r3, [r3, #1]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	68b9      	ldr	r1, [r7, #8]
 8004d90:	f005 f9fa 	bl	800a188 <memcpy>
		m_mode = opt.mode;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	615a      	str	r2, [r3, #20]
		m_size = opt.size + 1;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	785b      	ldrb	r3, [r3, #1]
 8004da0:	3301      	adds	r3, #1
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		m_cs = static_cast<gpio*>(opt.slave);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	611a      	str	r2, [r3, #16]

		return start_transmition();
 8004db2:	2100      	movs	r1, #0
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f806 	bl	8004dc6 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	bf00      	nop
	}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv>:




	iPHANDLER_ST start_transmition(void *fn_pointer = nullptr ) // arreglar cuando se use la DMA
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
	{
		iPHANDLER_ST ret = iPHANDLER_ST::OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]
		//m_spiHandler.m_csPin = m_cs;

		m_cs->write(GPIO_ST::LOW);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fc fd3e 	bl	800185c <_ZN5STM324gpio5writeE7GPIO_ST>
		switch (m_mode)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d021      	beq.n	8004e2c <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x66>
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	dc21      	bgt.n	8004e30 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x6a>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x30>
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d019      	beq.n	8004e28 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x62>
 8004df4:	e01c      	b.n	8004e30 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x6a>
		{
		case COMM_MODE::BLCK:

			ret = transmit(m_txBuffer, m_rxBuffer, m_size);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f103 0218 	add.w	r2, r3, #24
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f81e 	bl	8004e4c <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t>
 8004e10:	60f8      	str	r0, [r7, #12]
			m_cs->write(GPIO_ST::HIGH);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2101      	movs	r1, #1
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fc fd1f 	bl	800185c <_ZN5STM324gpio5writeE7GPIO_ST>
			if(ret != iPHANDLER_ST::OK){
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00d      	beq.n	8004e40 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7a>
				return iPHANDLER_ST::ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e00d      	b.n	8004e44 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			}
			break;

		case COMM_MODE::IT:
			 return iPHANDLER_ST::INVALID;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e00b      	b.n	8004e44 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;

		case COMM_MODE::DMA:
			return iPHANDLER_ST::INVALID;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e009      	b.n	8004e44 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;


		default:
			m_cs->write(GPIO_ST::HIGH);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2101      	movs	r1, #1
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fc fd10 	bl	800185c <_ZN5STM324gpio5writeE7GPIO_ST>
			return iPHANDLER_ST::INVALID;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e001      	b.n	8004e44 <_ZN5STM3211PHandlerSPIILh32EE17start_transmitionEPv+0x7e>
			break;
 8004e40:	bf00      	nop
			break;
		}

		return iPHANDLER_ST::OK;
 8004e42:	2300      	movs	r3, #0
	}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t>:


	   return map_hal_st_to_handler_st(retHal);
   }

   iPHANDLER_ST transmit(uint8_t *pTxData, uint8_t *pRxData, uint16_t size)
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	807b      	strh	r3, [r7, #2]
   {

	   HAL_StatusTypeDef retHal = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	75fb      	strb	r3, [r7, #23]
	   if(m_cs == nullptr)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t+0x1e>
		   return iPHANDLER_ST::ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e013      	b.n	8004e92 <_ZN5STM3211PHandlerSPIILh32EE8transmitEPhS2_t+0x46>

	   //m_csPin->write(GPIO_ST::LOW);

	   retHal = HAL_SPI_TransmitReceive(
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	68d8      	ldr	r0, [r3, #12]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e72:	887a      	ldrh	r2, [r7, #2]
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	4613      	mov	r3, r2
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	68b9      	ldr	r1, [r7, #8]
 8004e7c:	f003 faef 	bl	800845e <HAL_SPI_TransmitReceive>
 8004e80:	4603      	mov	r3, r0
 8004e82:	75fb      	strb	r3, [r7, #23]
				   size,
				m_blockDelay
			   );
	   //m_csPin->write(GPIO_ST::HIGH);

	   return map_hal_st_to_handler_st(retHal);
 8004e84:	7dfb      	ldrb	r3, [r7, #23]
 8004e86:	4619      	mov	r1, r3
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f806 	bl	8004e9a <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	bf00      	nop

   }
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef>:
   {
	   return iPHANDLER_ST::INVALID;
   }


   iPHANDLER_ST map_hal_st_to_handler_st(HAL_StatusTypeDef st)
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	70fb      	strb	r3, [r7, #3]
   {
	   switch (st){
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef+0x16>
	   case HAL_OK:
		   return iPHANDLER_ST::OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e000      	b.n	8004eb2 <_ZN5STM3211PHandlerSPIILh32EE24map_hal_st_to_handler_stE17HAL_StatusTypeDef+0x18>
		   break;
	   case HAL_TIMEOUT:
	   case HAL_ERROR:
	   default:
		   return iPHANDLER_ST::ERROR;
 8004eb0:	2301      	movs	r3, #1
		   break;
	   }
   }
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <_Z22my_copy_array_of_uint8PhPKhm>:
 */

#include "myUtils.h"

void my_copy_array_of_uint8(uint8_t *dest, const uint8_t *src, uint32_t n)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b087      	sub	sp, #28
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	607a      	str	r2, [r7, #4]
	uint32_t i;

	for(i = 0; i < n; i++)
 8004eca:	2300      	movs	r3, #0
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e00a      	b.n	8004ee6 <_Z22my_copy_array_of_uint8PhPKhm+0x28>
	{
		dest[i] = src[i];
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	441a      	add	r2, r3
 8004ed6:	68f9      	ldr	r1, [r7, #12]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	440b      	add	r3, r1
 8004edc:	7812      	ldrb	r2, [r2, #0]
 8004ede:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < n; i++)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d3f0      	bcc.n	8004ed0 <_Z22my_copy_array_of_uint8PhPKhm+0x12>
	}
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	371c      	adds	r7, #28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004f00:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <MX_SPI2_Init+0x74>)
 8004f02:	4a1c      	ldr	r2, [pc, #112]	; (8004f74 <MX_SPI2_Init+0x78>)
 8004f04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004f06:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <MX_SPI2_Init+0x74>)
 8004f08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004f0e:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <MX_SPI2_Init+0x74>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f14:	4b16      	ldr	r3, [pc, #88]	; (8004f70 <MX_SPI2_Init+0x74>)
 8004f16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004f1a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f1c:	4b14      	ldr	r3, [pc, #80]	; (8004f70 <MX_SPI2_Init+0x74>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004f22:	4b13      	ldr	r3, [pc, #76]	; (8004f70 <MX_SPI2_Init+0x74>)
 8004f24:	2201      	movs	r2, #1
 8004f26:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004f28:	4b11      	ldr	r3, [pc, #68]	; (8004f70 <MX_SPI2_Init+0x74>)
 8004f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f2e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004f30:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <MX_SPI2_Init+0x74>)
 8004f32:	2220      	movs	r2, #32
 8004f34:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f36:	4b0e      	ldr	r3, [pc, #56]	; (8004f70 <MX_SPI2_Init+0x74>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <MX_SPI2_Init+0x74>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f42:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <MX_SPI2_Init+0x74>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004f48:	4b09      	ldr	r3, [pc, #36]	; (8004f70 <MX_SPI2_Init+0x74>)
 8004f4a:	2207      	movs	r2, #7
 8004f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004f4e:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <MX_SPI2_Init+0x74>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004f54:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <MX_SPI2_Init+0x74>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004f5a:	4805      	ldr	r0, [pc, #20]	; (8004f70 <MX_SPI2_Init+0x74>)
 8004f5c:	f003 f9d4 	bl	8008308 <HAL_SPI_Init>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8004f66:	f7ff fcb9 	bl	80048dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004f6a:	bf00      	nop
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000304 	.word	0x20000304
 8004f74:	40003800 	.word	0x40003800

08004f78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f80:	f107 0314 	add.w	r3, r7, #20
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	605a      	str	r2, [r3, #4]
 8004f8a:	609a      	str	r2, [r3, #8]
 8004f8c:	60da      	str	r2, [r3, #12]
 8004f8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a17      	ldr	r2, [pc, #92]	; (8004ff4 <HAL_SPI_MspInit+0x7c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d128      	bne.n	8004fec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004f9a:	4b17      	ldr	r3, [pc, #92]	; (8004ff8 <HAL_SPI_MspInit+0x80>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	4a16      	ldr	r2, [pc, #88]	; (8004ff8 <HAL_SPI_MspInit+0x80>)
 8004fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fa6:	4b14      	ldr	r3, [pc, #80]	; (8004ff8 <HAL_SPI_MspInit+0x80>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fb2:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <HAL_SPI_MspInit+0x80>)
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	4a10      	ldr	r2, [pc, #64]	; (8004ff8 <HAL_SPI_MspInit+0x80>)
 8004fb8:	f043 0302 	orr.w	r3, r3, #2
 8004fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004fbe:	4b0e      	ldr	r3, [pc, #56]	; (8004ff8 <HAL_SPI_MspInit+0x80>)
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004fca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004fdc:	2305      	movs	r3, #5
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fe0:	f107 0314 	add.w	r3, r7, #20
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4805      	ldr	r0, [pc, #20]	; (8004ffc <HAL_SPI_MspInit+0x84>)
 8004fe8:	f001 fd92 	bl	8006b10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004fec:	bf00      	nop
 8004fee:	3728      	adds	r7, #40	; 0x28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40003800 	.word	0x40003800
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	40020400 	.word	0x40020400

08005000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005006:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <HAL_MspInit+0x44>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	4a0e      	ldr	r2, [pc, #56]	; (8005044 <HAL_MspInit+0x44>)
 800500c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005010:	6413      	str	r3, [r2, #64]	; 0x40
 8005012:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <HAL_MspInit+0x44>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501a:	607b      	str	r3, [r7, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800501e:	4b09      	ldr	r3, [pc, #36]	; (8005044 <HAL_MspInit+0x44>)
 8005020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005022:	4a08      	ldr	r2, [pc, #32]	; (8005044 <HAL_MspInit+0x44>)
 8005024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005028:	6453      	str	r3, [r2, #68]	; 0x44
 800502a:	4b06      	ldr	r3, [pc, #24]	; (8005044 <HAL_MspInit+0x44>)
 800502c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40023800 	.word	0x40023800

08005048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800504c:	e7fe      	b.n	800504c <NMI_Handler+0x4>

0800504e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800504e:	b480      	push	{r7}
 8005050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005052:	e7fe      	b.n	8005052 <HardFault_Handler+0x4>

08005054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005058:	e7fe      	b.n	8005058 <MemManage_Handler+0x4>

0800505a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800505a:	b480      	push	{r7}
 800505c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800505e:	e7fe      	b.n	800505e <BusFault_Handler+0x4>

08005060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005064:	e7fe      	b.n	8005064 <UsageFault_Handler+0x4>

08005066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005066:	b480      	push	{r7}
 8005068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800506a:	bf00      	nop
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005078:	bf00      	nop
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005082:	b480      	push	{r7}
 8005084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005086:	bf00      	nop
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005094:	f000 fcb8 	bl	8005a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005098:	bf00      	nop
 800509a:	bd80      	pop	{r7, pc}

0800509c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80050a0:	4802      	ldr	r0, [pc, #8]	; (80050ac <CAN1_RX0_IRQHandler+0x10>)
 80050a2:	f001 f9c2 	bl	800642a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80050a6:	bf00      	nop
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000248 	.word	0x20000248

080050b0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80050b4:	4802      	ldr	r0, [pc, #8]	; (80050c0 <TIM5_IRQHandler+0x10>)
 80050b6:	f003 fe78 	bl	8008daa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80050ba:	bf00      	nop
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20000370 	.word	0x20000370

080050c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  return 1;
 80050c8:	2301      	movs	r3, #1
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <_kill>:

int _kill(int pid, int sig)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80050de:	f005 f827 	bl	800a130 <__errno>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2216      	movs	r2, #22
 80050e6:	601a      	str	r2, [r3, #0]
  return -1;
 80050e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <_exit>:

void _exit (int status)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80050fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff ffe7 	bl	80050d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005106:	e7fe      	b.n	8005106 <_exit+0x12>

08005108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005110:	4a14      	ldr	r2, [pc, #80]	; (8005164 <_sbrk+0x5c>)
 8005112:	4b15      	ldr	r3, [pc, #84]	; (8005168 <_sbrk+0x60>)
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800511c:	4b13      	ldr	r3, [pc, #76]	; (800516c <_sbrk+0x64>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d102      	bne.n	800512a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005124:	4b11      	ldr	r3, [pc, #68]	; (800516c <_sbrk+0x64>)
 8005126:	4a12      	ldr	r2, [pc, #72]	; (8005170 <_sbrk+0x68>)
 8005128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800512a:	4b10      	ldr	r3, [pc, #64]	; (800516c <_sbrk+0x64>)
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4413      	add	r3, r2
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	429a      	cmp	r2, r3
 8005136:	d207      	bcs.n	8005148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005138:	f004 fffa 	bl	800a130 <__errno>
 800513c:	4603      	mov	r3, r0
 800513e:	220c      	movs	r2, #12
 8005140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005146:	e009      	b.n	800515c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005148:	4b08      	ldr	r3, [pc, #32]	; (800516c <_sbrk+0x64>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800514e:	4b07      	ldr	r3, [pc, #28]	; (800516c <_sbrk+0x64>)
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4413      	add	r3, r2
 8005156:	4a05      	ldr	r2, [pc, #20]	; (800516c <_sbrk+0x64>)
 8005158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800515a:	68fb      	ldr	r3, [r7, #12]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20050000 	.word	0x20050000
 8005168:	00000400 	.word	0x00000400
 800516c:	20000368 	.word	0x20000368
 8005170:	200005b8 	.word	0x200005b8

08005174 <_Z11system_initv>:
};

static systemMode theSystemMode = FAIL_SILENT;

void system_init(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8005178:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <_Z11system_initv+0x40>)
 800517a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d009      	beq.n	80051a2 <_Z11system_initv+0x2e>
	{
		__HAL_RCC_CLEAR_RESET_FLAGS();
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <_Z11system_initv+0x40>)
 8005190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005192:	4a08      	ldr	r2, [pc, #32]	; (80051b4 <_Z11system_initv+0x40>)
 8005194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005198:	6753      	str	r3, [r2, #116]	; 0x74

		theSystemMode = FAIL_SILENT;
 800519a:	4b07      	ldr	r3, [pc, #28]	; (80051b8 <_Z11system_initv+0x44>)
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		theSystemMode = NORMAL;
	}
}
 80051a0:	e002      	b.n	80051a8 <_Z11system_initv+0x34>
		theSystemMode = NORMAL;
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <_Z11system_initv+0x44>)
 80051a4:	2201      	movs	r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
}
 80051a8:	bf00      	nop
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40023800 	.word	0x40023800
 80051b8:	2000036c 	.word	0x2000036c

080051bc <_Z22system_run_active_modev>:

void system_run_active_mode(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
	switch(theSystemMode)
 80051c0:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <_Z22system_run_active_modev+0x1c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d102      	bne.n	80051ce <_Z22system_run_active_modev+0x12>
	{
		case NORMAL:
			normal_mode_run();
 80051c8:	f7ff fbf4 	bl	80049b4 <_Z15normal_mode_runv>
			break;
 80051cc:	e002      	b.n	80051d4 <_Z22system_run_active_modev+0x18>

		default:
		case FAIL_SILENT:
			fail_silent_mode_run();
 80051ce:	f7ff fb8b 	bl	80048e8 <_Z20fail_silent_mode_runv>
			break;
 80051d2:	bf00      	nop
	}
}
 80051d4:	bf00      	nop
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	2000036c 	.word	0x2000036c

080051dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80051e0:	4b06      	ldr	r3, [pc, #24]	; (80051fc <SystemInit+0x20>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e6:	4a05      	ldr	r2, [pc, #20]	; (80051fc <SystemInit+0x20>)
 80051e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80051f0:	bf00      	nop
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	e000ed00 	.word	0xe000ed00

08005200 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm>:

#include "taskCNIsendData.h"
#include "CNI.h"

void taskCNIsendData_constructor(taskCNIsendData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af02      	add	r7, sp, #8
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskCNIsendData_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	4904      	ldr	r1, [pc, #16]	; (8005230 <_Z27taskCNIsendData_constructorP17taskCNIsendData_tmmmmm+0x30>)
 800521e:	f000 fb6f 	bl	8005900 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mHandleMsg_ = handleMsg;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	615a      	str	r2, [r3, #20]
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	08005249 	.word	0x08005249

08005234 <_Z21taskCNIsendData_startP17taskCNIsendData_t>:
	//TODO: hay que hacer que si uno llama a la tarea nuevamente, la tarea simplemente no haga nada.
	timeTriggeredTask_destructor(&me->super);
}

void taskCNIsendData_start(taskCNIsendData_t *me)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	//TODO: acá podría uno decirle a la CNI que se va a encargar de enviar el mensaje
	// asociado al handleMsg.
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <_Z22taskCNIsendData_updateP17taskCNIsendData_t>:

void taskCNIsendData_update(taskCNIsendData_t *me)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
	CNI_send_msg(me->mHandleMsg_);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	4618      	mov	r0, r3
 8005256:	f7fb fe4f 	bl	8000ef8 <_Z12CNI_send_msgm>
}
 800525a:	bf00      	nop
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <_Z32taskEstimateAttitude_constructorP22taskEstimateAttitude_tmmmmm>:
#include "CNI.h"

#define LEN_ATTITUDE_CNI_DATA 8

void taskEstimateAttitude_constructor(taskEstimateAttitude_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af02      	add	r7, sp, #8
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskEstimateAttitude_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	4904      	ldr	r1, [pc, #16]	; (8005294 <_Z32taskEstimateAttitude_constructorP22taskEstimateAttitude_tmmmmm+0x30>)
 8005282:	f000 fb3d 	bl	8005900 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mHandleMsg_ = handleMsg;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	69fa      	ldr	r2, [r7, #28]
 800528a:	615a      	str	r2, [r3, #20]
}
 800528c:	bf00      	nop
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	08005299 	.word	0x08005299

08005298 <_Z27taskEstimateAttitude_updateP22taskEstimateAttitude_t>:
	//TODO: acá podría uno decirle a la CNI que se va a encargar de enviar el mensaje
	// asociado al handleMsg.
}

void taskEstimateAttitude_update(taskEstimateAttitude_t *me)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	attitudeData_t outputData;
	uint8_t dataForCni[LEN_ATTITUDE_CNI_DATA];

	attitudeEstimator_update();
 80052a0:	f7fc f83e 	bl	8001320 <_Z24attitudeEstimator_updatev>

	// Convertir los datos del estimador en bytes
	attitudeEstimator_read_data(&outputData);
 80052a4:	f107 0310 	add.w	r3, r7, #16
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fc f8e9 	bl	8001480 <_Z27attitudeEstimator_read_dataP14attitudeData_t>
 80052ae:	693b      	ldr	r3, [r7, #16]
	memcpy(dataForCni    , &outputData.mPitch_, 4);
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	697b      	ldr	r3, [r7, #20]
	memcpy(&dataForCni[4], &outputData.mRoll_ , 4);
 80052b4:	60fb      	str	r3, [r7, #12]

	// Actualizarlos en la CNI
	CNI_update_msg_content(me->mHandleMsg_, dataForCni, LEN_ATTITUDE_CNI_DATA);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f107 0108 	add.w	r1, r7, #8
 80052be:	2208      	movs	r2, #8
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fb ff41 	bl	8001148 <_Z22CNI_update_msg_contentmPhm>
}
 80052c6:	bf00      	nop
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE>:
 */

#include "taskHeartbeat.h"

void taskHeartbeat_constructor(taskHeartbeat_t *me , uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, STM32::gpio *led)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af02      	add	r7, sp, #8
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskHeartbeat_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	4904      	ldr	r1, [pc, #16]	; (8005300 <_Z25taskHeartbeat_constructorP15taskHeartbeat_tmmmmPN5STM324gpioE+0x30>)
 80052ee:	f000 fb07 	bl	8005900 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mLED_ = led;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	615a      	str	r2, [r3, #20]
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	08005321 	.word	0x08005321

08005304 <_Z19taskHeartbeat_startP15taskHeartbeat_t>:
	me->mLED_->write(GPIO_ST::LOW);
	timeTriggeredTask_destructor(&me->super);
}

void taskHeartbeat_start(taskHeartbeat_t *me)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	me->mLED_->write(GPIO_ST::HIGH);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	2101      	movs	r1, #1
 8005312:	4618      	mov	r0, r3
 8005314:	f7fc faa2 	bl	800185c <_ZN5STM324gpio5writeE7GPIO_ST>
}
 8005318:	bf00      	nop
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <_Z20taskHeartbeat_updateP15taskHeartbeat_t>:

void taskHeartbeat_update(taskHeartbeat_t *me)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	me->mLED_->toggle();
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	4618      	mov	r0, r3
 800532e:	f7fc fa85 	bl	800183c <_ZN5STM324gpio6toggleEv>
}
 8005332:	bf00      	nop
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688Em>:
#define LEN_IMU_CNI_DATA 24

static void make_imu_data_for_cni(IMUData imuData, uint8_t *dataForCni);

void taskIMUgetData_constructor(taskIMUgetData_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, ICM42688::icm42688 *imu, uint32_t handleMsg)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af02      	add	r7, sp, #8
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskIMUgetData_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	9301      	str	r3, [sp, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	4906      	ldr	r1, [pc, #24]	; (8005374 <_Z26taskIMUgetData_constructorP16taskIMUgetData_tmmmmPN8ICM426888icm42688Em+0x38>)
 800535a:	f000 fad1 	bl	8005900 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>

	me->mIMU_ = imu;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	615a      	str	r2, [r3, #20]
	me->mHandleMsg_ = handleMsg;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a3a      	ldr	r2, [r7, #32]
 8005368:	619a      	str	r2, [r3, #24]
}
 800536a:	bf00      	nop
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	0800538d 	.word	0x0800538d

08005378 <_Z20taskIMUgetData_startP16taskIMUgetData_t>:

	timeTriggeredTask_destructor(&me->super);
}

void taskIMUgetData_start(taskIMUgetData_t *me)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	// Por ahora no hace nada
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <_Z21taskIMUgetData_updateP16taskIMUgetData_t>:

void taskIMUgetData_update(taskIMUgetData_t *me)
{
 800538c:	b590      	push	{r4, r7, lr}
 800538e:	b095      	sub	sp, #84	; 0x54
 8005390:	af04      	add	r7, sp, #16
 8005392:	6078      	str	r0, [r7, #4]
	uint8_t dataForCni[LEN_IMU_CNI_DATA];
	IMUData imuData;

	me->mIMU_->save_data();
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	695a      	ldr	r2, [r3, #20]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4610      	mov	r0, r2
 80053a2:	4798      	blx	r3
	//me->mIMU_->read_data(&(me->mIMUdata_));
	me->mIMU_->read_data(&imuData);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	695a      	ldr	r2, [r3, #20]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3310      	adds	r3, #16
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f107 010c 	add.w	r1, r7, #12
 80053b6:	4610      	mov	r0, r2
 80053b8:	4798      	blx	r3

	// Se le pasan las mediciones del sensor al attitude estimator
	attitudeEstimator_set_imu_data(imuData);
 80053ba:	466c      	mov	r4, sp
 80053bc:	f107 031c 	add.w	r3, r7, #28
 80053c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80053c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80053c8:	f107 030c 	add.w	r3, r7, #12
 80053cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053ce:	f7fb ff8d 	bl	80012ec <_Z30attitudeEstimator_set_imu_data7IMUData>

	// Convertir los datos de la IMU en bytes
	//make_imu_data_for_cni(me->mIMUdata_, dataForCni);
	make_imu_data_for_cni(imuData, dataForCni);
 80053d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053d6:	9303      	str	r3, [sp, #12]
 80053d8:	466c      	mov	r4, sp
 80053da:	f107 031c 	add.w	r3, r7, #28
 80053de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80053e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80053e6:	f107 030c 	add.w	r3, r7, #12
 80053ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053ec:	f000 f80c 	bl	8005408 <_ZL21make_imu_data_for_cni7IMUDataPh>

	// Actualizarlos en la CNI
	CNI_update_msg_content(me->mHandleMsg_, dataForCni, LEN_IMU_CNI_DATA);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80053f8:	2218      	movs	r2, #24
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fb fea4 	bl	8001148 <_Z22CNI_update_msg_contentmPhm>
}
 8005400:	bf00      	nop
 8005402:	3744      	adds	r7, #68	; 0x44
 8005404:	46bd      	mov	sp, r7
 8005406:	bd90      	pop	{r4, r7, pc}

08005408 <_ZL21make_imu_data_for_cni7IMUDataPh>:

static void make_imu_data_for_cni(IMUData imuData, uint8_t *dataForCni)
{
 8005408:	b084      	sub	sp, #16
 800540a:	b490      	push	{r4, r7}
 800540c:	af00      	add	r7, sp, #0
 800540e:	f107 0408 	add.w	r4, r7, #8
 8005412:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005416:	69ba      	ldr	r2, [r7, #24]
	memcpy(dataForCni     , &imuData.accelX, 4);
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[4] , &imuData.accelY, 4);
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	3304      	adds	r3, #4
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[8] , &imuData.accelZ, 4);
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	3308      	adds	r3, #8
 8005428:	6a3a      	ldr	r2, [r7, #32]
 800542a:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[12], &imuData.gyroX , 4);
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	330c      	adds	r3, #12
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[16], &imuData.gyroY , 4);
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	3310      	adds	r3, #16
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	601a      	str	r2, [r3, #0]
	memcpy(&dataForCni[20], &imuData.gyroZ , 4);
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	3314      	adds	r3, #20
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	601a      	str	r2, [r3, #0]
}
 8005444:	bf00      	nop
 8005446:	46bd      	mov	sp, r7
 8005448:	bc90      	pop	{r4, r7}
 800544a:	b004      	add	sp, #16
 800544c:	4770      	bx	lr
	...

08005450 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef>:
 */

#include "taskWatchdog.h"

void taskWatchdog_constructor(taskWatchdog_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, IWDG_HandleTypeDef *hiwdg)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskWatchdog_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	490d      	ldr	r1, [pc, #52]	; (80054a4 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x54>)
 800546e:	f000 fa47 	bl	8005900 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mHiwdg_ = hiwdg;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	69fa      	ldr	r2, [r7, #28]
 8005476:	615a      	str	r2, [r3, #20]

	me->mHiwdg_->Instance = IWDG;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	4a0a      	ldr	r2, [pc, #40]	; (80054a8 <_Z24taskWatchdog_constructorP14taskWatchdog_tmmmmP18IWDG_HandleTypeDef+0x58>)
 800547e:	601a      	str	r2, [r3, #0]
	me->mHiwdg_->Init.Prescaler = IWDG_PRESCALER_4;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	2200      	movs	r2, #0
 8005486:	605a      	str	r2, [r3, #4]
	me->mHiwdg_->Init.Window = 4095;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005490:	60da      	str	r2, [r3, #12]
	me->mHiwdg_->Init.Reload = 9;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	2209      	movs	r2, #9
 8005498:	609a      	str	r2, [r3, #8]
}
 800549a:	bf00      	nop
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	080054c7 	.word	0x080054c7
 80054a8:	40003000 	.word	0x40003000

080054ac <_Z18taskWatchdog_startP14taskWatchdog_t>:
{
	timeTriggeredTask_destructor(&me->super);
}

void taskWatchdog_start(taskWatchdog_t *me)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Init(me->mHiwdg_);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f001 fe30 	bl	800711e <HAL_IWDG_Init>
}
 80054be:	bf00      	nop
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <_Z19taskWatchdog_updateP14taskWatchdog_t>:

void taskWatchdog_update(taskWatchdog_t *me)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(me->mHiwdg_);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f001 fe72 	bl	80071bc <HAL_IWDG_Refresh>
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054e6:	f107 0310 	add.w	r3, r7, #16
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	605a      	str	r2, [r3, #4]
 80054f0:	609a      	str	r2, [r3, #8]
 80054f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054f4:	1d3b      	adds	r3, r7, #4
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	605a      	str	r2, [r3, #4]
 80054fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80054fe:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <MX_TIM5_Init+0x94>)
 8005500:	4a1d      	ldr	r2, [pc, #116]	; (8005578 <MX_TIM5_Init+0x98>)
 8005502:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108-1;
 8005504:	4b1b      	ldr	r3, [pc, #108]	; (8005574 <MX_TIM5_Init+0x94>)
 8005506:	226b      	movs	r2, #107	; 0x6b
 8005508:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800550a:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <MX_TIM5_Init+0x94>)
 800550c:	2200      	movs	r2, #0
 800550e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8005510:	4b18      	ldr	r3, [pc, #96]	; (8005574 <MX_TIM5_Init+0x94>)
 8005512:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005516:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005518:	4b16      	ldr	r3, [pc, #88]	; (8005574 <MX_TIM5_Init+0x94>)
 800551a:	2200      	movs	r2, #0
 800551c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800551e:	4b15      	ldr	r3, [pc, #84]	; (8005574 <MX_TIM5_Init+0x94>)
 8005520:	2200      	movs	r2, #0
 8005522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005524:	4813      	ldr	r0, [pc, #76]	; (8005574 <MX_TIM5_Init+0x94>)
 8005526:	f003 fb35 	bl	8008b94 <HAL_TIM_Base_Init>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005530:	f7ff f9d4 	bl	80048dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005538:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800553a:	f107 0310 	add.w	r3, r7, #16
 800553e:	4619      	mov	r1, r3
 8005540:	480c      	ldr	r0, [pc, #48]	; (8005574 <MX_TIM5_Init+0x94>)
 8005542:	f003 fd73 	bl	800902c <HAL_TIM_ConfigClockSource>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800554c:	f7ff f9c6 	bl	80048dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005550:	2300      	movs	r3, #0
 8005552:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005558:	1d3b      	adds	r3, r7, #4
 800555a:	4619      	mov	r1, r3
 800555c:	4805      	ldr	r0, [pc, #20]	; (8005574 <MX_TIM5_Init+0x94>)
 800555e:	f004 f97f 	bl	8009860 <HAL_TIMEx_MasterConfigSynchronization>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005568:	f7ff f9b8 	bl	80048dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800556c:	bf00      	nop
 800556e:	3720      	adds	r7, #32
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	20000370 	.word	0x20000370
 8005578:	40000c00 	.word	0x40000c00

0800557c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a0d      	ldr	r2, [pc, #52]	; (80055c0 <HAL_TIM_Base_MspInit+0x44>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d113      	bne.n	80055b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800558e:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <HAL_TIM_Base_MspInit+0x48>)
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	4a0c      	ldr	r2, [pc, #48]	; (80055c4 <HAL_TIM_Base_MspInit+0x48>)
 8005594:	f043 0308 	orr.w	r3, r3, #8
 8005598:	6413      	str	r3, [r2, #64]	; 0x40
 800559a:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <HAL_TIM_Base_MspInit+0x48>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80055a6:	2200      	movs	r2, #0
 80055a8:	2100      	movs	r1, #0
 80055aa:	2032      	movs	r0, #50	; 0x32
 80055ac:	f001 fa6b 	bl	8006a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80055b0:	2032      	movs	r0, #50	; 0x32
 80055b2:	f001 fa84 	bl	8006abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80055b6:	bf00      	nop
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	40000c00 	.word	0x40000c00
 80055c4:	40023800 	.word	0x40023800

080055c8 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef>:
#include "CNI.h"

static timeTriggeredScheduler_t _instance;

static void timeTriggeredScheduler_tick(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
	_instance.mTicks_++;
 80055d0:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef+0x20>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	3301      	adds	r3, #1
 80055d6:	4a04      	ldr	r2, [pc, #16]	; (80055e8 <_ZL27timeTriggeredScheduler_tickP19__TIM_HandleTypeDef+0x20>)
 80055d8:	6053      	str	r3, [r2, #4]
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	2000042c 	.word	0x2000042c

080055ec <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm>:

void timeTriggeredScheduler_constructor(TIM_HandleTypeDef *timer, uint32_t macroTick)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
	uint32_t i;

	_instance.mTimer_ = timer;
 80055f6:	4a11      	ldr	r2, [pc, #68]	; (800563c <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6013      	str	r3, [r2, #0]

	for(i = 0; i < MAX_NUM_TASKS ; i++)
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e008      	b.n	8005614 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x28>
	{
		_instance.mTaskList_[i] = 0;
 8005602:	4a0e      	ldr	r2, [pc, #56]	; (800563c <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3302      	adds	r3, #2
 8005608:	2100      	movs	r1, #0
 800560a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i = 0; i < MAX_NUM_TASKS ; i++)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3301      	adds	r3, #1
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b09      	cmp	r3, #9
 8005618:	d9f3      	bls.n	8005602 <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x16>
	}

	_instance.mTicks_ = 0;
 800561a:	4b08      	ldr	r3, [pc, #32]	; (800563c <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 800561c:	2200      	movs	r2, #0
 800561e:	605a      	str	r2, [r3, #4]
	_instance.mMacroTick_ = macroTick;
 8005620:	4a06      	ldr	r2, [pc, #24]	; (800563c <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6313      	str	r3, [r2, #48]	; 0x30
	_instance.mSyncExecuted_ = 0;
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <_Z34timeTriggeredScheduler_constructorP19__TIM_HandleTypeDefm+0x50>)
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	2000042c 	.word	0x2000042c

08005640 <_Z27timeTriggeredScheduler_initv>:

void timeTriggeredScheduler_init(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(_instance.mTimer_);
 8005644:	4b08      	ldr	r3, [pc, #32]	; (8005668 <_Z27timeTriggeredScheduler_initv+0x28>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f003 fb7f 	bl	8008d4c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_RegisterCallback(_instance.mTimer_, HAL_TIM_PERIOD_ELAPSED_CB_ID, timeTriggeredScheduler_tick);
 800564e:	4b06      	ldr	r3, [pc, #24]	; (8005668 <_Z27timeTriggeredScheduler_initv+0x28>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a06      	ldr	r2, [pc, #24]	; (800566c <_Z27timeTriggeredScheduler_initv+0x2c>)
 8005654:	210e      	movs	r1, #14
 8005656:	4618      	mov	r0, r3
 8005658:	f003 fe16 	bl	8009288 <HAL_TIM_RegisterCallback>

	_instance.mSyncExecuted_ = 0;
 800565c:	4b02      	ldr	r3, [pc, #8]	; (8005668 <_Z27timeTriggeredScheduler_initv+0x28>)
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8005664:	bf00      	nop
 8005666:	bd80      	pop	{r7, pc}
 8005668:	2000042c 	.word	0x2000042c
 800566c:	080055c9 	.word	0x080055c9

08005670 <_Z28timeTriggeredScheduler_startv>:

void timeTriggeredScheduler_start(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(_instance.mTimer_);
 8005674:	4b03      	ldr	r3, [pc, #12]	; (8005684 <_Z28timeTriggeredScheduler_startv+0x14>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	f003 faef 	bl	8008c5c <HAL_TIM_Base_Start_IT>
}
 800567e:	bf00      	nop
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	2000042c 	.word	0x2000042c

08005688 <_Z31timeTriggeredScheduler_dispatchv>:
{
	HAL_TIM_Base_Stop_IT(_instance.mTimer_);
}

void timeTriggeredScheduler_dispatch(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
	uint8_t updateRequired = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8005692:	b672      	cpsid	i
}
 8005694:	bf00      	nop
	uint32_t i;
	timeTriggeredTask_t *task;

	__disable_irq();
	if(_instance.mTicks_ > 0)
 8005696:	4b49      	ldr	r3, [pc, #292]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	bf14      	ite	ne
 800569e:	2301      	movne	r3, #1
 80056a0:	2300      	moveq	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d020      	beq.n	80056ea <_Z31timeTriggeredScheduler_dispatchv+0x62>
	{
		_instance.mTicks_--;
 80056a8:	4b44      	ldr	r3, [pc, #272]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	4a43      	ldr	r2, [pc, #268]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 80056b0:	6053      	str	r3, [r2, #4]
		updateRequired = 1;
 80056b2:	2301      	movs	r3, #1
 80056b4:	73fb      	strb	r3, [r7, #15]
#if !IS_MASTER
		if(_instance.mSyncExecuted_ == 1)
 80056b6:	4b41      	ldr	r3, [pc, #260]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 80056b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b01      	cmp	r3, #1
 80056c0:	bf0c      	ite	eq
 80056c2:	2301      	moveq	r3, #1
 80056c4:	2300      	movne	r3, #0
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00e      	beq.n	80056ea <_Z31timeTriggeredScheduler_dispatchv+0x62>
		{
			_instance.mSyncExecuted_ = 0;
 80056cc:	4b3b      	ldr	r3, [pc, #236]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_AUTORELOAD(_instance.mTimer_, _instance.mMacroTick_);
 80056d4:	4b39      	ldr	r3, [pc, #228]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a38      	ldr	r2, [pc, #224]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 80056dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80056de:	62da      	str	r2, [r3, #44]	; 0x2c
 80056e0:	4b36      	ldr	r3, [pc, #216]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a35      	ldr	r2, [pc, #212]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 80056e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80056e8:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80056ea:	b662      	cpsie	i
}
 80056ec:	bf00      	nop
#endif
	}

	__enable_irq();

	while(updateRequired)
 80056ee:	e05d      	b.n	80057ac <_Z31timeTriggeredScheduler_dispatchv+0x124>
	{
		for(i = 0; i < MAX_NUM_TASKS; i++)
 80056f0:	2300      	movs	r3, #0
 80056f2:	60bb      	str	r3, [r7, #8]
 80056f4:	e026      	b.n	8005744 <_Z31timeTriggeredScheduler_dispatchv+0xbc>
		{
			if((task = _instance.mTaskList_[i]))
 80056f6:	4a31      	ldr	r2, [pc, #196]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	3302      	adds	r3, #2
 80056fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005700:	607b      	str	r3, [r7, #4]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d015      	beq.n	800573e <_Z31timeTriggeredScheduler_dispatchv+0xb6>
			{
				//if( (--(me->mTaskList_[i]->mDelayTicks_)) == 0 )
				if( (--(task->mDelayTicks_)) == 0 )
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	1e5a      	subs	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	605a      	str	r2, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	bf0c      	ite	eq
 8005724:	2301      	moveq	r3, #1
 8005726:	2300      	movne	r3, #0
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d007      	beq.n	800573e <_Z31timeTriggeredScheduler_dispatchv+0xb6>
				{
					//timeTriggeredTask_update((timeTriggeredTask_t*)(me->mTaskList_[i]));
					(*(task->mTaskHandler_))(task);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
					//me->mTaskList_[i]->mDelayTicks_ = me->mTaskList_[i]->mPeriodTicks_;
					task->mDelayTicks_ = task->mPeriodTicks_;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	605a      	str	r2, [r3, #4]
		for(i = 0; i < MAX_NUM_TASKS; i++)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	3301      	adds	r3, #1
 8005742:	60bb      	str	r3, [r7, #8]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b09      	cmp	r3, #9
 8005748:	d9d5      	bls.n	80056f6 <_Z31timeTriggeredScheduler_dispatchv+0x6e>
  __ASM volatile ("cpsid i" : : : "memory");
 800574a:	b672      	cpsid	i
}
 800574c:	bf00      	nop
			}
		}

		__disable_irq();

		if(_instance.mTicks_ > 0)
 800574e:	4b1b      	ldr	r3, [pc, #108]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf14      	ite	ne
 8005756:	2301      	movne	r3, #1
 8005758:	2300      	moveq	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d021      	beq.n	80057a4 <_Z31timeTriggeredScheduler_dispatchv+0x11c>
		{
			_instance.mTicks_--;
 8005760:	4b16      	ldr	r3, [pc, #88]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	3b01      	subs	r3, #1
 8005766:	4a15      	ldr	r2, [pc, #84]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005768:	6053      	str	r3, [r2, #4]
			updateRequired = 1;
 800576a:	2301      	movs	r3, #1
 800576c:	73fb      	strb	r3, [r7, #15]
#if !IS_MASTER
			if(_instance.mSyncExecuted_ == 1)
 800576e:	4b13      	ldr	r3, [pc, #76]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005770:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b01      	cmp	r3, #1
 8005778:	bf0c      	ite	eq
 800577a:	2301      	moveq	r3, #1
 800577c:	2300      	movne	r3, #0
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d011      	beq.n	80057a8 <_Z31timeTriggeredScheduler_dispatchv+0x120>
			{
				_instance.mSyncExecuted_ = 0;
 8005784:	4b0d      	ldr	r3, [pc, #52]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_AUTORELOAD(_instance.mTimer_, _instance.mMacroTick_);
 800578c:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 8005794:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c
 8005798:	4b08      	ldr	r3, [pc, #32]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a07      	ldr	r2, [pc, #28]	; (80057bc <_Z31timeTriggeredScheduler_dispatchv+0x134>)
 800579e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80057a0:	60da      	str	r2, [r3, #12]
 80057a2:	e001      	b.n	80057a8 <_Z31timeTriggeredScheduler_dispatchv+0x120>
			}
#endif
		}
		else
		{
			updateRequired = 0;
 80057a4:	2300      	movs	r3, #0
 80057a6:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80057a8:	b662      	cpsie	i
}
 80057aa:	bf00      	nop
	while(updateRequired)
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d19e      	bne.n	80056f0 <_Z31timeTriggeredScheduler_dispatchv+0x68>
		}

		__enable_irq();
	}
	__asm__("wfi");
 80057b2:	bf30      	wfi
}
 80057b4:	bf00      	nop
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	2000042c 	.word	0x2000042c

080057c0 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t>:

TTschStatus_t timeTriggeredScheduler_add_task(timeTriggeredTask_t *task)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]

	while( (_instance.mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 80057cc:	e002      	b.n	80057d4 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x14>
	{
		i++;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3301      	adds	r3, #1
 80057d2:	60fb      	str	r3, [r7, #12]
	while( (_instance.mTaskList_[i] ) && (i < MAX_NUM_TASKS) )
 80057d4:	4a0d      	ldr	r2, [pc, #52]	; (800580c <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x4c>)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3302      	adds	r3, #2
 80057da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x28>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b09      	cmp	r3, #9
 80057e6:	d9f2      	bls.n	80057ce <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0xe>
	}

	if(i == MAX_NUM_TASKS)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b0a      	cmp	r3, #10
 80057ec:	d101      	bne.n	80057f2 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x32>
	{
		return TTsch_ERROR_MAX_TASKS_REACHED;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e006      	b.n	8005800 <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x40>
	}

	_instance.mTaskList_[i] = task;
 80057f2:	4906      	ldr	r1, [pc, #24]	; (800580c <_Z31timeTriggeredScheduler_add_taskP19timeTriggeredTask_t+0x4c>)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3302      	adds	r3, #2
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return TTsch_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	2000042c 	.word	0x2000042c

08005810 <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm>:

void taskTimeTriggeredSync_constructor(taskTimeTriggeredSync_t *me, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds, uint32_t handleMsg, uint32_t expectedTimestamp, uint32_t delaySync)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af02      	add	r7, sp, #8
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
	timeTriggeredTask_constructor(&me->super, (taskHandler_t)&taskTimeTriggeredSync_update, delayTicks, periodTicks, wcetMicroSeconds, bcetMicroSeconds);
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	9301      	str	r3, [sp, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	4907      	ldr	r1, [pc, #28]	; (800584c <_Z33taskTimeTriggeredSync_constructorP23taskTimeTriggeredSync_tmmmmmmm+0x3c>)
 800582e:	f000 f867 	bl	8005900 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>
	me->mHandleMsg_ = handleMsg;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	615a      	str	r2, [r3, #20]
	me->mExpectedTimestamp_ = expectedTimestamp;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a3a      	ldr	r2, [r7, #32]
 800583c:	619a      	str	r2, [r3, #24]
	me->mDelaySync_ = delaySync;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005842:	61da      	str	r2, [r3, #28]
}
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	08005851 	.word	0x08005851

08005850 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t>:
{
	// Por ahora no hace nada
}

void taskTimeTriggeredSync_update(taskTimeTriggeredSync_t *me)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
#if !IS_MASTER
	uint32_t timestamp;
	uint32_t deltaTime;

	// Espero a que me llegue el mensaje de sincronización
	if( CNI_receive_msg(me->mHandleMsg_) == CNI_OK )
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	4618      	mov	r0, r3
 800585e:	f7fb fbdd 	bl	800101c <_Z15CNI_receive_msgm>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf0c      	ite	eq
 8005868:	2301      	moveq	r3, #1
 800586a:	2300      	movne	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d040      	beq.n	80058f4 <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xa4>
	{
		// Tomo un timestamp del mensaje recibido
		timestamp = __HAL_TIM_GET_COUNTER(_instance.mTimer_);
 8005872:	4b22      	ldr	r3, [pc, #136]	; (80058fc <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	60bb      	str	r3, [r7, #8]

		// Comparo ese valor con el valor esperado
		if(timestamp > me->mExpectedTimestamp_)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	429a      	cmp	r2, r3
 8005884:	d919      	bls.n	80058ba <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x6a>
		{
			deltaTime = timestamp - me->mExpectedTimestamp_;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	60fb      	str	r3, [r7, #12]
			if(deltaTime > MAX_DELTA_TIME_MICRO_TICKS)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b64      	cmp	r3, #100	; 0x64
 8005894:	d901      	bls.n	800589a <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x4a>
			{
				deltaTime = MAX_DELTA_TIME_MICRO_TICKS;
 8005896:	2364      	movs	r3, #100	; 0x64
 8005898:	60fb      	str	r3, [r7, #12]
			}
			// Actualizo el timer
			__HAL_TIM_SET_AUTORELOAD(_instance.mTimer_, _instance.mMacroTick_ + deltaTime);
 800589a:	4b18      	ldr	r3, [pc, #96]	; (80058fc <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 800589c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800589e:	4b17      	ldr	r3, [pc, #92]	; (80058fc <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	440a      	add	r2, r1
 80058a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80058aa:	4b14      	ldr	r3, [pc, #80]	; (80058fc <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 80058ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058ae:	4b13      	ldr	r3, [pc, #76]	; (80058fc <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	440a      	add	r2, r1
 80058b6:	60da      	str	r2, [r3, #12]
 80058b8:	e018      	b.n	80058ec <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x9c>
		}
		else
		{
			deltaTime = me->mExpectedTimestamp_ - timestamp;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	60fb      	str	r3, [r7, #12]
			if(deltaTime > MAX_DELTA_TIME_MICRO_TICKS)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b64      	cmp	r3, #100	; 0x64
 80058c8:	d901      	bls.n	80058ce <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0x7e>
			{
				deltaTime = MAX_DELTA_TIME_MICRO_TICKS;
 80058ca:	2364      	movs	r3, #100	; 0x64
 80058cc:	60fb      	str	r3, [r7, #12]
			}
			// Actualizo el timer
			__HAL_TIM_SET_AUTORELOAD(_instance.mTimer_, _instance.mMacroTick_ - deltaTime);
 80058ce:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 80058d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058d2:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	1a8a      	subs	r2, r1, r2
 80058dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80058de:	4b07      	ldr	r3, [pc, #28]	; (80058fc <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 80058e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	1a8a      	subs	r2, r1, r2
 80058ea:	60da      	str	r2, [r3, #12]
		}

		// Le aviso al scheduler que en el próximo tick, vuelva a dejar el timer como estaba antes
		_instance.mSyncExecuted_ = 1;
 80058ec:	4b03      	ldr	r3, [pc, #12]	; (80058fc <_Z28taskTimeTriggeredSync_updateP23taskTimeTriggeredSync_t+0xac>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	// Espero un rato
	while(__HAL_TIM_GET_COUNTER(_instance.mTimer_) < me->mDelaySync_);
	// Envío el mensaje de sync
	CNI_send_msg(me->mHandleMsg_);
#endif
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	2000042c 	.word	0x2000042c

08005900 <_Z29timeTriggeredTask_constructorP19timeTriggeredTask_tPFvPvEmmmm>:
 */

#include "timeTriggeredTask.h"

void timeTriggeredTask_constructor(timeTriggeredTask_t *me, taskHandler_t taskHandler, uint32_t delayTicks, uint32_t periodTicks, uint32_t wcetMicroSeconds, uint32_t bcetMicroSeconds)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
	me->mTaskHandler_ = taskHandler;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	601a      	str	r2, [r3, #0]

	me->mDelayTicks_ = delayTicks + 1;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	605a      	str	r2, [r3, #4]
	me->mPeriodTicks_ = periodTicks;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	609a      	str	r2, [r3, #8]
	me->mWcetMicroSeconds_ = wcetMicroSeconds;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	60da      	str	r2, [r3, #12]
	me->mBcetMicroSeconds_ = bcetMicroSeconds;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	611a      	str	r2, [r3, #16]
}
 800592e:	bf00      	nop
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
	...

0800593c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800593c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005974 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005940:	480d      	ldr	r0, [pc, #52]	; (8005978 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005942:	490e      	ldr	r1, [pc, #56]	; (800597c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005944:	4a0e      	ldr	r2, [pc, #56]	; (8005980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005948:	e002      	b.n	8005950 <LoopCopyDataInit>

0800594a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800594a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800594c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800594e:	3304      	adds	r3, #4

08005950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005954:	d3f9      	bcc.n	800594a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005956:	4a0b      	ldr	r2, [pc, #44]	; (8005984 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005958:	4c0b      	ldr	r4, [pc, #44]	; (8005988 <LoopFillZerobss+0x26>)
  movs r3, #0
 800595a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800595c:	e001      	b.n	8005962 <LoopFillZerobss>

0800595e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800595e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005960:	3204      	adds	r2, #4

08005962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005964:	d3fb      	bcc.n	800595e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005966:	f7ff fc39 	bl	80051dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800596a:	f004 fbe7 	bl	800a13c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800596e:	f7fe ff1f 	bl	80047b0 <main>
  bx  lr    
 8005972:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005974:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800597c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8005980:	0800a3c8 	.word	0x0800a3c8
  ldr r2, =_sbss
 8005984:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8005988:	200005b4 	.word	0x200005b4

0800598c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800598c:	e7fe      	b.n	800598c <ADC_IRQHandler>

0800598e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005992:	2003      	movs	r0, #3
 8005994:	f001 f86c 	bl	8006a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005998:	200f      	movs	r0, #15
 800599a:	f000 f805 	bl	80059a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800599e:	f7ff fb2f 	bl	8005000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80059b0:	4b12      	ldr	r3, [pc, #72]	; (80059fc <HAL_InitTick+0x54>)
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	4b12      	ldr	r3, [pc, #72]	; (8005a00 <HAL_InitTick+0x58>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	4619      	mov	r1, r3
 80059ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059be:	fbb3 f3f1 	udiv	r3, r3, r1
 80059c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c6:	4618      	mov	r0, r3
 80059c8:	f001 f895 	bl	8006af6 <HAL_SYSTICK_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e00e      	b.n	80059f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b0f      	cmp	r3, #15
 80059da:	d80a      	bhi.n	80059f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059dc:	2200      	movs	r2, #0
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059e4:	f001 f84f 	bl	8006a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059e8:	4a06      	ldr	r2, [pc, #24]	; (8005a04 <HAL_InitTick+0x5c>)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	e000      	b.n	80059f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	20000184 	.word	0x20000184
 8005a00:	2000018c 	.word	0x2000018c
 8005a04:	20000188 	.word	0x20000188

08005a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a0c:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <HAL_IncTick+0x20>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <HAL_IncTick+0x24>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4413      	add	r3, r2
 8005a18:	4a04      	ldr	r2, [pc, #16]	; (8005a2c <HAL_IncTick+0x24>)
 8005a1a:	6013      	str	r3, [r2, #0]
}
 8005a1c:	bf00      	nop
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	2000018c 	.word	0x2000018c
 8005a2c:	20000464 	.word	0x20000464

08005a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
  return uwTick;
 8005a34:	4b03      	ldr	r3, [pc, #12]	; (8005a44 <HAL_GetTick+0x14>)
 8005a36:	681b      	ldr	r3, [r3, #0]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	20000464 	.word	0x20000464

08005a48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e0ed      	b.n	8005c36 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d102      	bne.n	8005a6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fb fd8e 	bl	8001588 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a7c:	f7ff ffd8 	bl	8005a30 <HAL_GetTick>
 8005a80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005a82:	e012      	b.n	8005aaa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005a84:	f7ff ffd4 	bl	8005a30 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b0a      	cmp	r3, #10
 8005a90:	d90b      	bls.n	8005aaa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2205      	movs	r2, #5
 8005aa2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e0c5      	b.n	8005c36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0e5      	beq.n	8005a84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0202 	bic.w	r2, r2, #2
 8005ac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ac8:	f7ff ffb2 	bl	8005a30 <HAL_GetTick>
 8005acc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005ace:	e012      	b.n	8005af6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005ad0:	f7ff ffae 	bl	8005a30 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b0a      	cmp	r3, #10
 8005adc:	d90b      	bls.n	8005af6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2205      	movs	r2, #5
 8005aee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e09f      	b.n	8005c36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e5      	bne.n	8005ad0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	7e1b      	ldrb	r3, [r3, #24]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d108      	bne.n	8005b1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e007      	b.n	8005b2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	7e5b      	ldrb	r3, [r3, #25]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d108      	bne.n	8005b48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	e007      	b.n	8005b58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	7e9b      	ldrb	r3, [r3, #26]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d108      	bne.n	8005b72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0220 	orr.w	r2, r2, #32
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	e007      	b.n	8005b82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0220 	bic.w	r2, r2, #32
 8005b80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	7edb      	ldrb	r3, [r3, #27]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d108      	bne.n	8005b9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0210 	bic.w	r2, r2, #16
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	e007      	b.n	8005bac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0210 	orr.w	r2, r2, #16
 8005baa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	7f1b      	ldrb	r3, [r3, #28]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d108      	bne.n	8005bc6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0208 	orr.w	r2, r2, #8
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	e007      	b.n	8005bd6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0208 	bic.w	r2, r2, #8
 8005bd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	7f5b      	ldrb	r3, [r3, #29]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d108      	bne.n	8005bf0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0204 	orr.w	r2, r2, #4
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e007      	b.n	8005c00 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0204 	bic.w	r2, r2, #4
 8005bfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	ea42 0103 	orr.w	r1, r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	1e5a      	subs	r2, r3, #1
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c56:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005c58:	7cfb      	ldrb	r3, [r7, #19]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d003      	beq.n	8005c66 <HAL_CAN_ConfigFilter+0x26>
 8005c5e:	7cfb      	ldrb	r3, [r7, #19]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	f040 80be 	bne.w	8005de2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005c66:	4b65      	ldr	r3, [pc, #404]	; (8005dfc <HAL_CAN_ConfigFilter+0x1bc>)
 8005c68:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c70:	f043 0201 	orr.w	r2, r3, #1
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c80:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	021b      	lsls	r3, r3, #8
 8005c96:	431a      	orrs	r2, r3
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	f003 031f 	and.w	r3, r3, #31
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	43db      	mvns	r3, r3
 8005cb8:	401a      	ands	r2, r3
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d123      	bne.n	8005d10 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	401a      	ands	r2, r3
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005cea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	3248      	adds	r2, #72	; 0x48
 8005cf0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005d04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005d06:	6979      	ldr	r1, [r7, #20]
 8005d08:	3348      	adds	r3, #72	; 0x48
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	440b      	add	r3, r1
 8005d0e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d122      	bne.n	8005d5e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	431a      	orrs	r2, r3
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005d38:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	3248      	adds	r2, #72	; 0x48
 8005d3e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005d52:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005d54:	6979      	ldr	r1, [r7, #20]
 8005d56:	3348      	adds	r3, #72	; 0x48
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	440b      	add	r3, r1
 8005d5c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d109      	bne.n	8005d7a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	401a      	ands	r2, r3
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005d78:	e007      	b.n	8005d8a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	431a      	orrs	r2, r3
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	401a      	ands	r2, r3
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005da4:	e007      	b.n	8005db6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d107      	bne.n	8005dce <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005dd4:	f023 0201 	bic.w	r2, r3, #1
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	e006      	b.n	8005df0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
  }
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	371c      	adds	r7, #28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	40006400 	.word	0x40006400

08005e00 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d12e      	bne.n	8005e72 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0201 	bic.w	r2, r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e2c:	f7ff fe00 	bl	8005a30 <HAL_GetTick>
 8005e30:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005e32:	e012      	b.n	8005e5a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005e34:	f7ff fdfc 	bl	8005a30 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b0a      	cmp	r3, #10
 8005e40:	d90b      	bls.n	8005e5a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2205      	movs	r2, #5
 8005e52:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e012      	b.n	8005e80 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e5      	bne.n	8005e34 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e006      	b.n	8005e80 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
  }
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b089      	sub	sp, #36	; 0x24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e9c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005ea6:	7ffb      	ldrb	r3, [r7, #31]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d003      	beq.n	8005eb4 <HAL_CAN_AddTxMessage+0x2c>
 8005eac:	7ffb      	ldrb	r3, [r7, #31]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	f040 80ad 	bne.w	800600e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10a      	bne.n	8005ed4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d105      	bne.n	8005ed4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 8095 	beq.w	8005ffe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	0e1b      	lsrs	r3, r3, #24
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005ede:	2201      	movs	r2, #1
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10d      	bne.n	8005f0c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005efa:	68f9      	ldr	r1, [r7, #12]
 8005efc:	6809      	ldr	r1, [r1, #0]
 8005efe:	431a      	orrs	r2, r3
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	3318      	adds	r3, #24
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	440b      	add	r3, r1
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	e00f      	b.n	8005f2c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f16:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f1c:	68f9      	ldr	r1, [r7, #12]
 8005f1e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005f20:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	3318      	adds	r3, #24
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	440b      	add	r3, r1
 8005f2a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6819      	ldr	r1, [r3, #0]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	3318      	adds	r3, #24
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	440b      	add	r3, r1
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	7d1b      	ldrb	r3, [r3, #20]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d111      	bne.n	8005f6c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	3318      	adds	r3, #24
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	4413      	add	r3, r2
 8005f54:	3304      	adds	r3, #4
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	6811      	ldr	r1, [r2, #0]
 8005f5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	3318      	adds	r3, #24
 8005f64:	011b      	lsls	r3, r3, #4
 8005f66:	440b      	add	r3, r1
 8005f68:	3304      	adds	r3, #4
 8005f6a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3307      	adds	r3, #7
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	061a      	lsls	r2, r3, #24
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3306      	adds	r3, #6
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	041b      	lsls	r3, r3, #16
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	3305      	adds	r3, #5
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	021b      	lsls	r3, r3, #8
 8005f86:	4313      	orrs	r3, r2
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	3204      	adds	r2, #4
 8005f8c:	7812      	ldrb	r2, [r2, #0]
 8005f8e:	4610      	mov	r0, r2
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	6811      	ldr	r1, [r2, #0]
 8005f94:	ea43 0200 	orr.w	r2, r3, r0
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	440b      	add	r3, r1
 8005f9e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005fa2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3303      	adds	r3, #3
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	061a      	lsls	r2, r3, #24
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3302      	adds	r3, #2
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	041b      	lsls	r3, r3, #16
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	021b      	lsls	r3, r3, #8
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	7812      	ldrb	r2, [r2, #0]
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	6811      	ldr	r1, [r2, #0]
 8005fca:	ea43 0200 	orr.w	r2, r3, r0
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	440b      	add	r3, r1
 8005fd4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005fd8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	3318      	adds	r3, #24
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	4413      	add	r3, r2
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	6811      	ldr	r1, [r2, #0]
 8005fec:	f043 0201 	orr.w	r2, r3, #1
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	3318      	adds	r3, #24
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	440b      	add	r3, r1
 8005ff8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e00e      	b.n	800601c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e006      	b.n	800601c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
  }
}
 800601c:	4618      	mov	r0, r3
 800601e:	3724      	adds	r7, #36	; 0x24
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006038:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800603a:	7bfb      	ldrb	r3, [r7, #15]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d002      	beq.n	8006046 <HAL_CAN_AbortTxRequest+0x1e>
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	2b02      	cmp	r3, #2
 8006044:	d128      	bne.n	8006098 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d007      	beq.n	8006060 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800605e:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d007      	beq.n	800607a <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006078:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b00      	cmp	r3, #0
 8006082:	d007      	beq.n	8006094 <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006092:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8006094:	2300      	movs	r3, #0
 8006096:	e006      	b.n	80060a6 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
  }
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b085      	sub	sp, #20
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060c4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80060c6:	7afb      	ldrb	r3, [r7, #11]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d002      	beq.n	80060d2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80060cc:	7afb      	ldrb	r3, [r7, #11]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d11d      	bne.n	800610e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3301      	adds	r3, #1
 80060e4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3301      	adds	r3, #1
 80060f8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3301      	adds	r3, #1
 800610c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800610e:	68fb      	ldr	r3, [r7, #12]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006130:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006132:	7dfb      	ldrb	r3, [r7, #23]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d003      	beq.n	8006140 <HAL_CAN_GetRxMessage+0x24>
 8006138:	7dfb      	ldrb	r3, [r7, #23]
 800613a:	2b02      	cmp	r3, #2
 800613c:	f040 80f3 	bne.w	8006326 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10e      	bne.n	8006164 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f003 0303 	and.w	r3, r3, #3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d116      	bne.n	8006182 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e0e7      	b.n	8006334 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d107      	bne.n	8006182 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e0d8      	b.n	8006334 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	331b      	adds	r3, #27
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	4413      	add	r3, r2
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0204 	and.w	r2, r3, #4
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10c      	bne.n	80061ba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	331b      	adds	r3, #27
 80061a8:	011b      	lsls	r3, r3, #4
 80061aa:	4413      	add	r3, r2
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	0d5b      	lsrs	r3, r3, #21
 80061b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	e00b      	b.n	80061d2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	331b      	adds	r3, #27
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	4413      	add	r3, r2
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	08db      	lsrs	r3, r3, #3
 80061ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	331b      	adds	r3, #27
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	4413      	add	r3, r2
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0202 	and.w	r2, r3, #2
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	331b      	adds	r3, #27
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	4413      	add	r3, r2
 80061f4:	3304      	adds	r3, #4
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 020f 	and.w	r2, r3, #15
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	331b      	adds	r3, #27
 8006208:	011b      	lsls	r3, r3, #4
 800620a:	4413      	add	r3, r2
 800620c:	3304      	adds	r3, #4
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	0a1b      	lsrs	r3, r3, #8
 8006212:	b2da      	uxtb	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	331b      	adds	r3, #27
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	4413      	add	r3, r2
 8006224:	3304      	adds	r3, #4
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	0c1b      	lsrs	r3, r3, #16
 800622a:	b29a      	uxth	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	4413      	add	r3, r2
 800623a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	b2da      	uxtb	r2, r3
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	4413      	add	r3, r2
 8006250:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	0a1a      	lsrs	r2, r3, #8
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	3301      	adds	r3, #1
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	4413      	add	r3, r2
 800626a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	0c1a      	lsrs	r2, r3, #16
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	3302      	adds	r3, #2
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	4413      	add	r3, r2
 8006284:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	0e1a      	lsrs	r2, r3, #24
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	3303      	adds	r3, #3
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	4413      	add	r3, r2
 800629e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	3304      	adds	r3, #4
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	0a1a      	lsrs	r2, r3, #8
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	3305      	adds	r3, #5
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	0c1a      	lsrs	r2, r3, #16
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	3306      	adds	r3, #6
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	0e1a      	lsrs	r2, r3, #24
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	3307      	adds	r3, #7
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d108      	bne.n	8006312 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0220 	orr.w	r2, r2, #32
 800630e:	60da      	str	r2, [r3, #12]
 8006310:	e007      	b.n	8006322 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f042 0220 	orr.w	r2, r2, #32
 8006320:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	e006      	b.n	8006334 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
  }
}
 8006334:	4618      	mov	r0, r3
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006354:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006356:	7afb      	ldrb	r3, [r7, #11]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d002      	beq.n	8006362 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800635c:	7afb      	ldrb	r3, [r7, #11]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d10f      	bne.n	8006382 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d106      	bne.n	8006376 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	e005      	b.n	8006382 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f003 0303 	and.w	r3, r3, #3
 8006380:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8006382:	68fb      	ldr	r3, [r7, #12]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063a0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d002      	beq.n	80063ae <HAL_CAN_ActivateNotification+0x1e>
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d109      	bne.n	80063c2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6959      	ldr	r1, [r3, #20]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	e006      	b.n	80063d0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
  }
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063ec:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d002      	beq.n	80063fa <HAL_CAN_DeactivateNotification+0x1e>
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d10a      	bne.n	8006410 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6959      	ldr	r1, [r3, #20]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	43da      	mvns	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	400a      	ands	r2, r1
 800640a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	e006      	b.n	800641e <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
  }
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b08a      	sub	sp, #40	; 0x28
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006432:	2300      	movs	r3, #0
 8006434:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	d07c      	beq.n	800656a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d023      	beq.n	80064c2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2201      	movs	r2, #1
 8006480:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f983 	bl	8006798 <HAL_CAN_TxMailbox0CompleteCallback>
 8006492:	e016      	b.n	80064c2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	f003 0304 	and.w	r3, r3, #4
 800649a:	2b00      	cmp	r3, #0
 800649c:	d004      	beq.n	80064a8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
 80064a6:	e00c      	b.n	80064c2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d004      	beq.n	80064bc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ba:	e002      	b.n	80064c2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f989 	bl	80067d4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d024      	beq.n	8006516 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f963 	bl	80067ac <HAL_CAN_TxMailbox1CompleteCallback>
 80064e6:	e016      	b.n	8006516 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
 80064fa:	e00c      	b.n	8006516 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006502:	2b00      	cmp	r3, #0
 8006504:	d004      	beq.n	8006510 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800650c:	627b      	str	r3, [r7, #36]	; 0x24
 800650e:	e002      	b.n	8006516 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f969 	bl	80067e8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d024      	beq.n	800656a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006528:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f943 	bl	80067c0 <HAL_CAN_TxMailbox2CompleteCallback>
 800653a:	e016      	b.n	800656a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d004      	beq.n	8006550 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
 800654e:	e00c      	b.n	800656a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d004      	beq.n	8006564 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
 8006562:	e002      	b.n	800656a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f949 	bl	80067fc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	f003 0308 	and.w	r3, r3, #8
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00c      	beq.n	800658e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f003 0310 	and.w	r3, r3, #16
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006584:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2210      	movs	r2, #16
 800658c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00b      	beq.n	80065b0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f003 0308 	and.w	r3, r3, #8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d006      	beq.n	80065b0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2208      	movs	r2, #8
 80065a8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f930 	bl	8006810 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d009      	beq.n	80065ce <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f003 0303 	and.w	r3, r3, #3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7fe fb2f 	bl	8004c2c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00c      	beq.n	80065f2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d007      	beq.n	80065f2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2210      	movs	r2, #16
 80065f0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00b      	beq.n	8006614 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d006      	beq.n	8006614 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2208      	movs	r2, #8
 800660c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f912 	bl	8006838 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	f003 0310 	and.w	r3, r3, #16
 800661a:	2b00      	cmp	r3, #0
 800661c:	d009      	beq.n	8006632 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f8f9 	bl	8006824 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	f003 0310 	and.w	r3, r3, #16
 8006642:	2b00      	cmp	r3, #0
 8006644:	d006      	beq.n	8006654 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2210      	movs	r2, #16
 800664c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f8fc 	bl	800684c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00b      	beq.n	8006676 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	f003 0308 	and.w	r3, r3, #8
 8006664:	2b00      	cmp	r3, #0
 8006666:	d006      	beq.n	8006676 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2208      	movs	r2, #8
 800666e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f8f5 	bl	8006860 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d07b      	beq.n	8006778 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b00      	cmp	r3, #0
 8006688:	d072      	beq.n	8006770 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006690:	2b00      	cmp	r3, #0
 8006692:	d008      	beq.n	80066a6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	f043 0301 	orr.w	r3, r3, #1
 80066a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d008      	beq.n	80066c2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	f043 0302 	orr.w	r3, r3, #2
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d008      	beq.n	80066de <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	f043 0304 	orr.w	r3, r3, #4
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d043      	beq.n	8006770 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d03e      	beq.n	8006770 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066f8:	2b60      	cmp	r3, #96	; 0x60
 80066fa:	d02b      	beq.n	8006754 <HAL_CAN_IRQHandler+0x32a>
 80066fc:	2b60      	cmp	r3, #96	; 0x60
 80066fe:	d82e      	bhi.n	800675e <HAL_CAN_IRQHandler+0x334>
 8006700:	2b50      	cmp	r3, #80	; 0x50
 8006702:	d022      	beq.n	800674a <HAL_CAN_IRQHandler+0x320>
 8006704:	2b50      	cmp	r3, #80	; 0x50
 8006706:	d82a      	bhi.n	800675e <HAL_CAN_IRQHandler+0x334>
 8006708:	2b40      	cmp	r3, #64	; 0x40
 800670a:	d019      	beq.n	8006740 <HAL_CAN_IRQHandler+0x316>
 800670c:	2b40      	cmp	r3, #64	; 0x40
 800670e:	d826      	bhi.n	800675e <HAL_CAN_IRQHandler+0x334>
 8006710:	2b30      	cmp	r3, #48	; 0x30
 8006712:	d010      	beq.n	8006736 <HAL_CAN_IRQHandler+0x30c>
 8006714:	2b30      	cmp	r3, #48	; 0x30
 8006716:	d822      	bhi.n	800675e <HAL_CAN_IRQHandler+0x334>
 8006718:	2b10      	cmp	r3, #16
 800671a:	d002      	beq.n	8006722 <HAL_CAN_IRQHandler+0x2f8>
 800671c:	2b20      	cmp	r3, #32
 800671e:	d005      	beq.n	800672c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006720:	e01d      	b.n	800675e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	f043 0308 	orr.w	r3, r3, #8
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800672a:	e019      	b.n	8006760 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	f043 0310 	orr.w	r3, r3, #16
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006734:	e014      	b.n	8006760 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	f043 0320 	orr.w	r3, r3, #32
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800673e:	e00f      	b.n	8006760 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006748:	e00a      	b.n	8006760 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006750:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006752:	e005      	b.n	8006760 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800675c:	e000      	b.n	8006760 <HAL_CAN_IRQHandler+0x336>
            break;
 800675e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800676e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2204      	movs	r2, #4
 8006776:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	2b00      	cmp	r3, #0
 800677c:	d008      	beq.n	8006790 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	431a      	orrs	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f872 	bl	8006874 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006790:	bf00      	nop
 8006792:	3728      	adds	r7, #40	; 0x28
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <__NVIC_SetPriorityGrouping+0x40>)
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80068a4:	4013      	ands	r3, r2
 80068a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80068b0:	4b06      	ldr	r3, [pc, #24]	; (80068cc <__NVIC_SetPriorityGrouping+0x44>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068b6:	4a04      	ldr	r2, [pc, #16]	; (80068c8 <__NVIC_SetPriorityGrouping+0x40>)
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	60d3      	str	r3, [r2, #12]
}
 80068bc:	bf00      	nop
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	e000ed00 	.word	0xe000ed00
 80068cc:	05fa0000 	.word	0x05fa0000

080068d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068d4:	4b04      	ldr	r3, [pc, #16]	; (80068e8 <__NVIC_GetPriorityGrouping+0x18>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	0a1b      	lsrs	r3, r3, #8
 80068da:	f003 0307 	and.w	r3, r3, #7
}
 80068de:	4618      	mov	r0, r3
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	e000ed00 	.word	0xe000ed00

080068ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	4603      	mov	r3, r0
 80068f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	db0b      	blt.n	8006916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068fe:	79fb      	ldrb	r3, [r7, #7]
 8006900:	f003 021f 	and.w	r2, r3, #31
 8006904:	4907      	ldr	r1, [pc, #28]	; (8006924 <__NVIC_EnableIRQ+0x38>)
 8006906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800690a:	095b      	lsrs	r3, r3, #5
 800690c:	2001      	movs	r0, #1
 800690e:	fa00 f202 	lsl.w	r2, r0, r2
 8006912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	e000e100 	.word	0xe000e100

08006928 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	4603      	mov	r3, r0
 8006930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006936:	2b00      	cmp	r3, #0
 8006938:	db12      	blt.n	8006960 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800693a:	79fb      	ldrb	r3, [r7, #7]
 800693c:	f003 021f 	and.w	r2, r3, #31
 8006940:	490a      	ldr	r1, [pc, #40]	; (800696c <__NVIC_DisableIRQ+0x44>)
 8006942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006946:	095b      	lsrs	r3, r3, #5
 8006948:	2001      	movs	r0, #1
 800694a:	fa00 f202 	lsl.w	r2, r0, r2
 800694e:	3320      	adds	r3, #32
 8006950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006954:	f3bf 8f4f 	dsb	sy
}
 8006958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800695a:	f3bf 8f6f 	isb	sy
}
 800695e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	e000e100 	.word	0xe000e100

08006970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	4603      	mov	r3, r0
 8006978:	6039      	str	r1, [r7, #0]
 800697a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800697c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006980:	2b00      	cmp	r3, #0
 8006982:	db0a      	blt.n	800699a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	b2da      	uxtb	r2, r3
 8006988:	490c      	ldr	r1, [pc, #48]	; (80069bc <__NVIC_SetPriority+0x4c>)
 800698a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800698e:	0112      	lsls	r2, r2, #4
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	440b      	add	r3, r1
 8006994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006998:	e00a      	b.n	80069b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	b2da      	uxtb	r2, r3
 800699e:	4908      	ldr	r1, [pc, #32]	; (80069c0 <__NVIC_SetPriority+0x50>)
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	f003 030f 	and.w	r3, r3, #15
 80069a6:	3b04      	subs	r3, #4
 80069a8:	0112      	lsls	r2, r2, #4
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	440b      	add	r3, r1
 80069ae:	761a      	strb	r2, [r3, #24]
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	e000e100 	.word	0xe000e100
 80069c0:	e000ed00 	.word	0xe000ed00

080069c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b089      	sub	sp, #36	; 0x24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	f1c3 0307 	rsb	r3, r3, #7
 80069de:	2b04      	cmp	r3, #4
 80069e0:	bf28      	it	cs
 80069e2:	2304      	movcs	r3, #4
 80069e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	3304      	adds	r3, #4
 80069ea:	2b06      	cmp	r3, #6
 80069ec:	d902      	bls.n	80069f4 <NVIC_EncodePriority+0x30>
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	3b03      	subs	r3, #3
 80069f2:	e000      	b.n	80069f6 <NVIC_EncodePriority+0x32>
 80069f4:	2300      	movs	r3, #0
 80069f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006a02:	43da      	mvns	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	401a      	ands	r2, r3
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	fa01 f303 	lsl.w	r3, r1, r3
 8006a16:	43d9      	mvns	r1, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a1c:	4313      	orrs	r3, r2
         );
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3724      	adds	r7, #36	; 0x24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
	...

08006a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a3c:	d301      	bcc.n	8006a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e00f      	b.n	8006a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a42:	4a0a      	ldr	r2, [pc, #40]	; (8006a6c <SysTick_Config+0x40>)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3b01      	subs	r3, #1
 8006a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a4a:	210f      	movs	r1, #15
 8006a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a50:	f7ff ff8e 	bl	8006970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a54:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <SysTick_Config+0x40>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a5a:	4b04      	ldr	r3, [pc, #16]	; (8006a6c <SysTick_Config+0x40>)
 8006a5c:	2207      	movs	r2, #7
 8006a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	e000e010 	.word	0xe000e010

08006a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7ff ff05 	bl	8006888 <__NVIC_SetPriorityGrouping>
}
 8006a7e:	bf00      	nop
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b086      	sub	sp, #24
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	607a      	str	r2, [r7, #4]
 8006a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a98:	f7ff ff1a 	bl	80068d0 <__NVIC_GetPriorityGrouping>
 8006a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	68b9      	ldr	r1, [r7, #8]
 8006aa2:	6978      	ldr	r0, [r7, #20]
 8006aa4:	f7ff ff8e 	bl	80069c4 <NVIC_EncodePriority>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aae:	4611      	mov	r1, r2
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7ff ff5d 	bl	8006970 <__NVIC_SetPriority>
}
 8006ab6:	bf00      	nop
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b082      	sub	sp, #8
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7ff ff0d 	bl	80068ec <__NVIC_EnableIRQ>
}
 8006ad2:	bf00      	nop
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff ff1d 	bl	8006928 <__NVIC_DisableIRQ>
}
 8006aee:	bf00      	nop
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b082      	sub	sp, #8
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7ff ff94 	bl	8006a2c <SysTick_Config>
 8006b04:	4603      	mov	r3, r0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b089      	sub	sp, #36	; 0x24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006b22:	2300      	movs	r3, #0
 8006b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006b26:	2300      	movs	r3, #0
 8006b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	e175      	b.n	8006e1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006b30:	2201      	movs	r2, #1
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	fa02 f303 	lsl.w	r3, r2, r3
 8006b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4013      	ands	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	f040 8164 	bne.w	8006e16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d005      	beq.n	8006b66 <HAL_GPIO_Init+0x56>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d130      	bne.n	8006bc8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	2203      	movs	r2, #3
 8006b72:	fa02 f303 	lsl.w	r3, r2, r3
 8006b76:	43db      	mvns	r3, r3
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	43db      	mvns	r3, r3
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	091b      	lsrs	r3, r3, #4
 8006bb2:	f003 0201 	and.w	r2, r3, #1
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f003 0303 	and.w	r3, r3, #3
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	d017      	beq.n	8006c04 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	2203      	movs	r2, #3
 8006be0:	fa02 f303 	lsl.w	r3, r2, r3
 8006be4:	43db      	mvns	r3, r3
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	4013      	ands	r3, r2
 8006bea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f003 0303 	and.w	r3, r3, #3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d123      	bne.n	8006c58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	08da      	lsrs	r2, r3, #3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3208      	adds	r2, #8
 8006c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	f003 0307 	and.w	r3, r3, #7
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	220f      	movs	r2, #15
 8006c28:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	4013      	ands	r3, r2
 8006c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	fa02 f303 	lsl.w	r3, r2, r3
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	08da      	lsrs	r2, r3, #3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3208      	adds	r2, #8
 8006c52:	69b9      	ldr	r1, [r7, #24]
 8006c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	2203      	movs	r2, #3
 8006c64:	fa02 f303 	lsl.w	r3, r2, r3
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f003 0203 	and.w	r2, r3, #3
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 80be 	beq.w	8006e16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c9a:	4b66      	ldr	r3, [pc, #408]	; (8006e34 <HAL_GPIO_Init+0x324>)
 8006c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9e:	4a65      	ldr	r2, [pc, #404]	; (8006e34 <HAL_GPIO_Init+0x324>)
 8006ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ca6:	4b63      	ldr	r3, [pc, #396]	; (8006e34 <HAL_GPIO_Init+0x324>)
 8006ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006cb2:	4a61      	ldr	r2, [pc, #388]	; (8006e38 <HAL_GPIO_Init+0x328>)
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	089b      	lsrs	r3, r3, #2
 8006cb8:	3302      	adds	r3, #2
 8006cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	f003 0303 	and.w	r3, r3, #3
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	220f      	movs	r2, #15
 8006cca:	fa02 f303 	lsl.w	r3, r2, r3
 8006cce:	43db      	mvns	r3, r3
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a58      	ldr	r2, [pc, #352]	; (8006e3c <HAL_GPIO_Init+0x32c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d037      	beq.n	8006d4e <HAL_GPIO_Init+0x23e>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a57      	ldr	r2, [pc, #348]	; (8006e40 <HAL_GPIO_Init+0x330>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d031      	beq.n	8006d4a <HAL_GPIO_Init+0x23a>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a56      	ldr	r2, [pc, #344]	; (8006e44 <HAL_GPIO_Init+0x334>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d02b      	beq.n	8006d46 <HAL_GPIO_Init+0x236>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a55      	ldr	r2, [pc, #340]	; (8006e48 <HAL_GPIO_Init+0x338>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d025      	beq.n	8006d42 <HAL_GPIO_Init+0x232>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a54      	ldr	r2, [pc, #336]	; (8006e4c <HAL_GPIO_Init+0x33c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d01f      	beq.n	8006d3e <HAL_GPIO_Init+0x22e>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a53      	ldr	r2, [pc, #332]	; (8006e50 <HAL_GPIO_Init+0x340>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d019      	beq.n	8006d3a <HAL_GPIO_Init+0x22a>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a52      	ldr	r2, [pc, #328]	; (8006e54 <HAL_GPIO_Init+0x344>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d013      	beq.n	8006d36 <HAL_GPIO_Init+0x226>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a51      	ldr	r2, [pc, #324]	; (8006e58 <HAL_GPIO_Init+0x348>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d00d      	beq.n	8006d32 <HAL_GPIO_Init+0x222>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a50      	ldr	r2, [pc, #320]	; (8006e5c <HAL_GPIO_Init+0x34c>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d007      	beq.n	8006d2e <HAL_GPIO_Init+0x21e>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a4f      	ldr	r2, [pc, #316]	; (8006e60 <HAL_GPIO_Init+0x350>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d101      	bne.n	8006d2a <HAL_GPIO_Init+0x21a>
 8006d26:	2309      	movs	r3, #9
 8006d28:	e012      	b.n	8006d50 <HAL_GPIO_Init+0x240>
 8006d2a:	230a      	movs	r3, #10
 8006d2c:	e010      	b.n	8006d50 <HAL_GPIO_Init+0x240>
 8006d2e:	2308      	movs	r3, #8
 8006d30:	e00e      	b.n	8006d50 <HAL_GPIO_Init+0x240>
 8006d32:	2307      	movs	r3, #7
 8006d34:	e00c      	b.n	8006d50 <HAL_GPIO_Init+0x240>
 8006d36:	2306      	movs	r3, #6
 8006d38:	e00a      	b.n	8006d50 <HAL_GPIO_Init+0x240>
 8006d3a:	2305      	movs	r3, #5
 8006d3c:	e008      	b.n	8006d50 <HAL_GPIO_Init+0x240>
 8006d3e:	2304      	movs	r3, #4
 8006d40:	e006      	b.n	8006d50 <HAL_GPIO_Init+0x240>
 8006d42:	2303      	movs	r3, #3
 8006d44:	e004      	b.n	8006d50 <HAL_GPIO_Init+0x240>
 8006d46:	2302      	movs	r3, #2
 8006d48:	e002      	b.n	8006d50 <HAL_GPIO_Init+0x240>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e000      	b.n	8006d50 <HAL_GPIO_Init+0x240>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	69fa      	ldr	r2, [r7, #28]
 8006d52:	f002 0203 	and.w	r2, r2, #3
 8006d56:	0092      	lsls	r2, r2, #2
 8006d58:	4093      	lsls	r3, r2
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006d60:	4935      	ldr	r1, [pc, #212]	; (8006e38 <HAL_GPIO_Init+0x328>)
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	089b      	lsrs	r3, r3, #2
 8006d66:	3302      	adds	r3, #2
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d6e:	4b3d      	ldr	r3, [pc, #244]	; (8006e64 <HAL_GPIO_Init+0x354>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	43db      	mvns	r3, r3
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d92:	4a34      	ldr	r2, [pc, #208]	; (8006e64 <HAL_GPIO_Init+0x354>)
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006d98:	4b32      	ldr	r3, [pc, #200]	; (8006e64 <HAL_GPIO_Init+0x354>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	43db      	mvns	r3, r3
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	4013      	ands	r3, r2
 8006da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006dbc:	4a29      	ldr	r2, [pc, #164]	; (8006e64 <HAL_GPIO_Init+0x354>)
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006dc2:	4b28      	ldr	r3, [pc, #160]	; (8006e64 <HAL_GPIO_Init+0x354>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	43db      	mvns	r3, r3
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	4013      	ands	r3, r2
 8006dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006de6:	4a1f      	ldr	r2, [pc, #124]	; (8006e64 <HAL_GPIO_Init+0x354>)
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006dec:	4b1d      	ldr	r3, [pc, #116]	; (8006e64 <HAL_GPIO_Init+0x354>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	43db      	mvns	r3, r3
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e10:	4a14      	ldr	r2, [pc, #80]	; (8006e64 <HAL_GPIO_Init+0x354>)
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	61fb      	str	r3, [r7, #28]
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	2b0f      	cmp	r3, #15
 8006e20:	f67f ae86 	bls.w	8006b30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop
 8006e28:	3724      	adds	r7, #36	; 0x24
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40023800 	.word	0x40023800
 8006e38:	40013800 	.word	0x40013800
 8006e3c:	40020000 	.word	0x40020000
 8006e40:	40020400 	.word	0x40020400
 8006e44:	40020800 	.word	0x40020800
 8006e48:	40020c00 	.word	0x40020c00
 8006e4c:	40021000 	.word	0x40021000
 8006e50:	40021400 	.word	0x40021400
 8006e54:	40021800 	.word	0x40021800
 8006e58:	40021c00 	.word	0x40021c00
 8006e5c:	40022000 	.word	0x40022000
 8006e60:	40022400 	.word	0x40022400
 8006e64:	40013c00 	.word	0x40013c00

08006e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	807b      	strh	r3, [r7, #2]
 8006e74:	4613      	mov	r3, r2
 8006e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e78:	787b      	ldrb	r3, [r7, #1]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e7e:	887a      	ldrh	r2, [r7, #2]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006e84:	e003      	b.n	8006e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006e86:	887b      	ldrh	r3, [r7, #2]
 8006e88:	041a      	lsls	r2, r3, #16
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	619a      	str	r2, [r3, #24]
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006eac:	887a      	ldrh	r2, [r7, #2]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	041a      	lsls	r2, r3, #16
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	43d9      	mvns	r1, r3
 8006eb8:	887b      	ldrh	r3, [r7, #2]
 8006eba:	400b      	ands	r3, r1
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	619a      	str	r2, [r3, #24]
}
 8006ec2:	bf00      	nop
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
	...

08006ed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e07f      	b.n	8006fe2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d106      	bne.n	8006efc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7fa fd40 	bl	800197c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2224      	movs	r2, #36	; 0x24
 8006f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0201 	bic.w	r2, r2, #1
 8006f12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d107      	bne.n	8006f4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f46:	609a      	str	r2, [r3, #8]
 8006f48:	e006      	b.n	8006f58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689a      	ldr	r2, [r3, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006f56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d104      	bne.n	8006f6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6859      	ldr	r1, [r3, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	4b1d      	ldr	r3, [pc, #116]	; (8006fec <HAL_I2C_Init+0x11c>)
 8006f76:	430b      	orrs	r3, r1
 8006f78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	691a      	ldr	r2, [r3, #16]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	69d9      	ldr	r1, [r3, #28]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a1a      	ldr	r2, [r3, #32]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0201 	orr.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	02008000 	.word	0x02008000

08006ff0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b20      	cmp	r3, #32
 8007004:	d138      	bne.n	8007078 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800700c:	2b01      	cmp	r3, #1
 800700e:	d101      	bne.n	8007014 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007010:	2302      	movs	r3, #2
 8007012:	e032      	b.n	800707a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2224      	movs	r2, #36	; 0x24
 8007020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 0201 	bic.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007042:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6819      	ldr	r1, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0201 	orr.w	r2, r2, #1
 8007062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	e000      	b.n	800707a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007078:	2302      	movs	r3, #2
  }
}
 800707a:	4618      	mov	r0, r3
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b20      	cmp	r3, #32
 800709a:	d139      	bne.n	8007110 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e033      	b.n	8007112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2224      	movs	r2, #36	; 0x24
 80070b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0201 	bic.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80070d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	021b      	lsls	r3, r3, #8
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0201 	orr.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	e000      	b.n	8007112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007110:	2302      	movs	r3, #2
  }
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b084      	sub	sp, #16
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e041      	b.n	80071b4 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007138:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f245 5255 	movw	r2, #21845	; 0x5555
 8007142:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	6852      	ldr	r2, [r2, #4]
 800714c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	6892      	ldr	r2, [r2, #8]
 8007156:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007158:	f7fe fc6a 	bl	8005a30 <HAL_GetTick>
 800715c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800715e:	e00f      	b.n	8007180 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007160:	f7fe fc66 	bl	8005a30 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b31      	cmp	r3, #49	; 0x31
 800716c:	d908      	bls.n	8007180 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f003 0307 	and.w	r3, r3, #7
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e019      	b.n	80071b4 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e8      	bne.n	8007160 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	691a      	ldr	r2, [r3, #16]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	429a      	cmp	r2, r3
 800719a:	d005      	beq.n	80071a8 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	68d2      	ldr	r2, [r2, #12]
 80071a4:	611a      	str	r2, [r3, #16]
 80071a6:	e004      	b.n	80071b2 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80071b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80071cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80071e6:	4b23      	ldr	r3, [pc, #140]	; (8007274 <HAL_PWREx_EnableOverDrive+0x98>)
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	4a22      	ldr	r2, [pc, #136]	; (8007274 <HAL_PWREx_EnableOverDrive+0x98>)
 80071ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071f0:	6413      	str	r3, [r2, #64]	; 0x40
 80071f2:	4b20      	ldr	r3, [pc, #128]	; (8007274 <HAL_PWREx_EnableOverDrive+0x98>)
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80071fe:	4b1e      	ldr	r3, [pc, #120]	; (8007278 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a1d      	ldr	r2, [pc, #116]	; (8007278 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007208:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800720a:	f7fe fc11 	bl	8005a30 <HAL_GetTick>
 800720e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007210:	e009      	b.n	8007226 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007212:	f7fe fc0d 	bl	8005a30 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007220:	d901      	bls.n	8007226 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e022      	b.n	800726c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007226:	4b14      	ldr	r3, [pc, #80]	; (8007278 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800722e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007232:	d1ee      	bne.n	8007212 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007234:	4b10      	ldr	r3, [pc, #64]	; (8007278 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a0f      	ldr	r2, [pc, #60]	; (8007278 <HAL_PWREx_EnableOverDrive+0x9c>)
 800723a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800723e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007240:	f7fe fbf6 	bl	8005a30 <HAL_GetTick>
 8007244:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007246:	e009      	b.n	800725c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007248:	f7fe fbf2 	bl	8005a30 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007256:	d901      	bls.n	800725c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e007      	b.n	800726c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800725c:	4b06      	ldr	r3, [pc, #24]	; (8007278 <HAL_PWREx_EnableOverDrive+0x9c>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007264:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007268:	d1ee      	bne.n	8007248 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40023800 	.word	0x40023800
 8007278:	40007000 	.word	0x40007000

0800727c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007284:	2300      	movs	r3, #0
 8007286:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e291      	b.n	80077b6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 8087 	beq.w	80073ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80072a0:	4b96      	ldr	r3, [pc, #600]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f003 030c 	and.w	r3, r3, #12
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d00c      	beq.n	80072c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072ac:	4b93      	ldr	r3, [pc, #588]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f003 030c 	and.w	r3, r3, #12
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d112      	bne.n	80072de <HAL_RCC_OscConfig+0x62>
 80072b8:	4b90      	ldr	r3, [pc, #576]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072c4:	d10b      	bne.n	80072de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072c6:	4b8d      	ldr	r3, [pc, #564]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d06c      	beq.n	80073ac <HAL_RCC_OscConfig+0x130>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d168      	bne.n	80073ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e26b      	b.n	80077b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072e6:	d106      	bne.n	80072f6 <HAL_RCC_OscConfig+0x7a>
 80072e8:	4b84      	ldr	r3, [pc, #528]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a83      	ldr	r2, [pc, #524]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80072ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	e02e      	b.n	8007354 <HAL_RCC_OscConfig+0xd8>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10c      	bne.n	8007318 <HAL_RCC_OscConfig+0x9c>
 80072fe:	4b7f      	ldr	r3, [pc, #508]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a7e      	ldr	r2, [pc, #504]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 8007304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007308:	6013      	str	r3, [r2, #0]
 800730a:	4b7c      	ldr	r3, [pc, #496]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a7b      	ldr	r2, [pc, #492]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 8007310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	e01d      	b.n	8007354 <HAL_RCC_OscConfig+0xd8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007320:	d10c      	bne.n	800733c <HAL_RCC_OscConfig+0xc0>
 8007322:	4b76      	ldr	r3, [pc, #472]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a75      	ldr	r2, [pc, #468]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 8007328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	4b73      	ldr	r3, [pc, #460]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a72      	ldr	r2, [pc, #456]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 8007334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	e00b      	b.n	8007354 <HAL_RCC_OscConfig+0xd8>
 800733c:	4b6f      	ldr	r3, [pc, #444]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a6e      	ldr	r2, [pc, #440]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 8007342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	4b6c      	ldr	r3, [pc, #432]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a6b      	ldr	r2, [pc, #428]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 800734e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d013      	beq.n	8007384 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800735c:	f7fe fb68 	bl	8005a30 <HAL_GetTick>
 8007360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007362:	e008      	b.n	8007376 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007364:	f7fe fb64 	bl	8005a30 <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	2b64      	cmp	r3, #100	; 0x64
 8007370:	d901      	bls.n	8007376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e21f      	b.n	80077b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007376:	4b61      	ldr	r3, [pc, #388]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0f0      	beq.n	8007364 <HAL_RCC_OscConfig+0xe8>
 8007382:	e014      	b.n	80073ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007384:	f7fe fb54 	bl	8005a30 <HAL_GetTick>
 8007388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800738a:	e008      	b.n	800739e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800738c:	f7fe fb50 	bl	8005a30 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b64      	cmp	r3, #100	; 0x64
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e20b      	b.n	80077b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800739e:	4b57      	ldr	r3, [pc, #348]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1f0      	bne.n	800738c <HAL_RCC_OscConfig+0x110>
 80073aa:	e000      	b.n	80073ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d069      	beq.n	800748e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80073ba:	4b50      	ldr	r3, [pc, #320]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f003 030c 	and.w	r3, r3, #12
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00b      	beq.n	80073de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073c6:	4b4d      	ldr	r3, [pc, #308]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 030c 	and.w	r3, r3, #12
 80073ce:	2b08      	cmp	r3, #8
 80073d0:	d11c      	bne.n	800740c <HAL_RCC_OscConfig+0x190>
 80073d2:	4b4a      	ldr	r3, [pc, #296]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d116      	bne.n	800740c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073de:	4b47      	ldr	r3, [pc, #284]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d005      	beq.n	80073f6 <HAL_RCC_OscConfig+0x17a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d001      	beq.n	80073f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e1df      	b.n	80077b6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073f6:	4b41      	ldr	r3, [pc, #260]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	493d      	ldr	r1, [pc, #244]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 8007406:	4313      	orrs	r3, r2
 8007408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800740a:	e040      	b.n	800748e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d023      	beq.n	800745c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007414:	4b39      	ldr	r3, [pc, #228]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a38      	ldr	r2, [pc, #224]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 800741a:	f043 0301 	orr.w	r3, r3, #1
 800741e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007420:	f7fe fb06 	bl	8005a30 <HAL_GetTick>
 8007424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007426:	e008      	b.n	800743a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007428:	f7fe fb02 	bl	8005a30 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d901      	bls.n	800743a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e1bd      	b.n	80077b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800743a:	4b30      	ldr	r3, [pc, #192]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d0f0      	beq.n	8007428 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007446:	4b2d      	ldr	r3, [pc, #180]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	4929      	ldr	r1, [pc, #164]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 8007456:	4313      	orrs	r3, r2
 8007458:	600b      	str	r3, [r1, #0]
 800745a:	e018      	b.n	800748e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800745c:	4b27      	ldr	r3, [pc, #156]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a26      	ldr	r2, [pc, #152]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 8007462:	f023 0301 	bic.w	r3, r3, #1
 8007466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007468:	f7fe fae2 	bl	8005a30 <HAL_GetTick>
 800746c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800746e:	e008      	b.n	8007482 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007470:	f7fe fade 	bl	8005a30 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	2b02      	cmp	r3, #2
 800747c:	d901      	bls.n	8007482 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e199      	b.n	80077b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007482:	4b1e      	ldr	r3, [pc, #120]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1f0      	bne.n	8007470 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	2b00      	cmp	r3, #0
 8007498:	d038      	beq.n	800750c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d019      	beq.n	80074d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074a2:	4b16      	ldr	r3, [pc, #88]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80074a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074a6:	4a15      	ldr	r2, [pc, #84]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80074a8:	f043 0301 	orr.w	r3, r3, #1
 80074ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ae:	f7fe fabf 	bl	8005a30 <HAL_GetTick>
 80074b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074b4:	e008      	b.n	80074c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074b6:	f7fe fabb 	bl	8005a30 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e176      	b.n	80077b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074c8:	4b0c      	ldr	r3, [pc, #48]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80074ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0f0      	beq.n	80074b6 <HAL_RCC_OscConfig+0x23a>
 80074d4:	e01a      	b.n	800750c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074d6:	4b09      	ldr	r3, [pc, #36]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80074d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074da:	4a08      	ldr	r2, [pc, #32]	; (80074fc <HAL_RCC_OscConfig+0x280>)
 80074dc:	f023 0301 	bic.w	r3, r3, #1
 80074e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e2:	f7fe faa5 	bl	8005a30 <HAL_GetTick>
 80074e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074e8:	e00a      	b.n	8007500 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ea:	f7fe faa1 	bl	8005a30 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d903      	bls.n	8007500 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e15c      	b.n	80077b6 <HAL_RCC_OscConfig+0x53a>
 80074fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007500:	4b91      	ldr	r3, [pc, #580]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 8007502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1ee      	bne.n	80074ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 80a4 	beq.w	8007662 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800751a:	4b8b      	ldr	r3, [pc, #556]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10d      	bne.n	8007542 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007526:	4b88      	ldr	r3, [pc, #544]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	4a87      	ldr	r2, [pc, #540]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 800752c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007530:	6413      	str	r3, [r2, #64]	; 0x40
 8007532:	4b85      	ldr	r3, [pc, #532]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800753a:	60bb      	str	r3, [r7, #8]
 800753c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800753e:	2301      	movs	r3, #1
 8007540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007542:	4b82      	ldr	r3, [pc, #520]	; (800774c <HAL_RCC_OscConfig+0x4d0>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754a:	2b00      	cmp	r3, #0
 800754c:	d118      	bne.n	8007580 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800754e:	4b7f      	ldr	r3, [pc, #508]	; (800774c <HAL_RCC_OscConfig+0x4d0>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a7e      	ldr	r2, [pc, #504]	; (800774c <HAL_RCC_OscConfig+0x4d0>)
 8007554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800755a:	f7fe fa69 	bl	8005a30 <HAL_GetTick>
 800755e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007560:	e008      	b.n	8007574 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007562:	f7fe fa65 	bl	8005a30 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	2b64      	cmp	r3, #100	; 0x64
 800756e:	d901      	bls.n	8007574 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e120      	b.n	80077b6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007574:	4b75      	ldr	r3, [pc, #468]	; (800774c <HAL_RCC_OscConfig+0x4d0>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0f0      	beq.n	8007562 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d106      	bne.n	8007596 <HAL_RCC_OscConfig+0x31a>
 8007588:	4b6f      	ldr	r3, [pc, #444]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 800758a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758c:	4a6e      	ldr	r2, [pc, #440]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 800758e:	f043 0301 	orr.w	r3, r3, #1
 8007592:	6713      	str	r3, [r2, #112]	; 0x70
 8007594:	e02d      	b.n	80075f2 <HAL_RCC_OscConfig+0x376>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10c      	bne.n	80075b8 <HAL_RCC_OscConfig+0x33c>
 800759e:	4b6a      	ldr	r3, [pc, #424]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a2:	4a69      	ldr	r2, [pc, #420]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 80075a4:	f023 0301 	bic.w	r3, r3, #1
 80075a8:	6713      	str	r3, [r2, #112]	; 0x70
 80075aa:	4b67      	ldr	r3, [pc, #412]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 80075ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ae:	4a66      	ldr	r2, [pc, #408]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 80075b0:	f023 0304 	bic.w	r3, r3, #4
 80075b4:	6713      	str	r3, [r2, #112]	; 0x70
 80075b6:	e01c      	b.n	80075f2 <HAL_RCC_OscConfig+0x376>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	2b05      	cmp	r3, #5
 80075be:	d10c      	bne.n	80075da <HAL_RCC_OscConfig+0x35e>
 80075c0:	4b61      	ldr	r3, [pc, #388]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 80075c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c4:	4a60      	ldr	r2, [pc, #384]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 80075c6:	f043 0304 	orr.w	r3, r3, #4
 80075ca:	6713      	str	r3, [r2, #112]	; 0x70
 80075cc:	4b5e      	ldr	r3, [pc, #376]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 80075ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d0:	4a5d      	ldr	r2, [pc, #372]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 80075d2:	f043 0301 	orr.w	r3, r3, #1
 80075d6:	6713      	str	r3, [r2, #112]	; 0x70
 80075d8:	e00b      	b.n	80075f2 <HAL_RCC_OscConfig+0x376>
 80075da:	4b5b      	ldr	r3, [pc, #364]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 80075dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075de:	4a5a      	ldr	r2, [pc, #360]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 80075e0:	f023 0301 	bic.w	r3, r3, #1
 80075e4:	6713      	str	r3, [r2, #112]	; 0x70
 80075e6:	4b58      	ldr	r3, [pc, #352]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 80075e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ea:	4a57      	ldr	r2, [pc, #348]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 80075ec:	f023 0304 	bic.w	r3, r3, #4
 80075f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d015      	beq.n	8007626 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075fa:	f7fe fa19 	bl	8005a30 <HAL_GetTick>
 80075fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007600:	e00a      	b.n	8007618 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007602:	f7fe fa15 	bl	8005a30 <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007610:	4293      	cmp	r3, r2
 8007612:	d901      	bls.n	8007618 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e0ce      	b.n	80077b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007618:	4b4b      	ldr	r3, [pc, #300]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 800761a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d0ee      	beq.n	8007602 <HAL_RCC_OscConfig+0x386>
 8007624:	e014      	b.n	8007650 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007626:	f7fe fa03 	bl	8005a30 <HAL_GetTick>
 800762a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800762c:	e00a      	b.n	8007644 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800762e:	f7fe f9ff 	bl	8005a30 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	f241 3288 	movw	r2, #5000	; 0x1388
 800763c:	4293      	cmp	r3, r2
 800763e:	d901      	bls.n	8007644 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e0b8      	b.n	80077b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007644:	4b40      	ldr	r3, [pc, #256]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 8007646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1ee      	bne.n	800762e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007650:	7dfb      	ldrb	r3, [r7, #23]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d105      	bne.n	8007662 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007656:	4b3c      	ldr	r3, [pc, #240]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	4a3b      	ldr	r2, [pc, #236]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 800765c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007660:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 80a4 	beq.w	80077b4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800766c:	4b36      	ldr	r3, [pc, #216]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f003 030c 	and.w	r3, r3, #12
 8007674:	2b08      	cmp	r3, #8
 8007676:	d06b      	beq.n	8007750 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	2b02      	cmp	r3, #2
 800767e:	d149      	bne.n	8007714 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007680:	4b31      	ldr	r3, [pc, #196]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a30      	ldr	r2, [pc, #192]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 8007686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800768a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800768c:	f7fe f9d0 	bl	8005a30 <HAL_GetTick>
 8007690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007692:	e008      	b.n	80076a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007694:	f7fe f9cc 	bl	8005a30 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d901      	bls.n	80076a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e087      	b.n	80077b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076a6:	4b28      	ldr	r3, [pc, #160]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1f0      	bne.n	8007694 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	69da      	ldr	r2, [r3, #28]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c0:	019b      	lsls	r3, r3, #6
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c8:	085b      	lsrs	r3, r3, #1
 80076ca:	3b01      	subs	r3, #1
 80076cc:	041b      	lsls	r3, r3, #16
 80076ce:	431a      	orrs	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	061b      	lsls	r3, r3, #24
 80076d6:	4313      	orrs	r3, r2
 80076d8:	4a1b      	ldr	r2, [pc, #108]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 80076da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076de:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076e0:	4b19      	ldr	r3, [pc, #100]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a18      	ldr	r2, [pc, #96]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 80076e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ec:	f7fe f9a0 	bl	8005a30 <HAL_GetTick>
 80076f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076f2:	e008      	b.n	8007706 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076f4:	f7fe f99c 	bl	8005a30 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d901      	bls.n	8007706 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e057      	b.n	80077b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007706:	4b10      	ldr	r3, [pc, #64]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0f0      	beq.n	80076f4 <HAL_RCC_OscConfig+0x478>
 8007712:	e04f      	b.n	80077b4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007714:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a0b      	ldr	r2, [pc, #44]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 800771a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800771e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007720:	f7fe f986 	bl	8005a30 <HAL_GetTick>
 8007724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007726:	e008      	b.n	800773a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007728:	f7fe f982 	bl	8005a30 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	2b02      	cmp	r3, #2
 8007734:	d901      	bls.n	800773a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e03d      	b.n	80077b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800773a:	4b03      	ldr	r3, [pc, #12]	; (8007748 <HAL_RCC_OscConfig+0x4cc>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1f0      	bne.n	8007728 <HAL_RCC_OscConfig+0x4ac>
 8007746:	e035      	b.n	80077b4 <HAL_RCC_OscConfig+0x538>
 8007748:	40023800 	.word	0x40023800
 800774c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007750:	4b1b      	ldr	r3, [pc, #108]	; (80077c0 <HAL_RCC_OscConfig+0x544>)
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d028      	beq.n	80077b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007768:	429a      	cmp	r2, r3
 800776a:	d121      	bne.n	80077b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007776:	429a      	cmp	r2, r3
 8007778:	d11a      	bne.n	80077b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007780:	4013      	ands	r3, r2
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007786:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007788:	4293      	cmp	r3, r2
 800778a:	d111      	bne.n	80077b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007796:	085b      	lsrs	r3, r3, #1
 8007798:	3b01      	subs	r3, #1
 800779a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800779c:	429a      	cmp	r2, r3
 800779e:	d107      	bne.n	80077b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d001      	beq.n	80077b4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e000      	b.n	80077b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40023800 	.word	0x40023800

080077c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e0d0      	b.n	800797e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077dc:	4b6a      	ldr	r3, [pc, #424]	; (8007988 <HAL_RCC_ClockConfig+0x1c4>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d910      	bls.n	800780c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ea:	4b67      	ldr	r3, [pc, #412]	; (8007988 <HAL_RCC_ClockConfig+0x1c4>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f023 020f 	bic.w	r2, r3, #15
 80077f2:	4965      	ldr	r1, [pc, #404]	; (8007988 <HAL_RCC_ClockConfig+0x1c4>)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077fa:	4b63      	ldr	r3, [pc, #396]	; (8007988 <HAL_RCC_ClockConfig+0x1c4>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d001      	beq.n	800780c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e0b8      	b.n	800797e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d020      	beq.n	800785a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007824:	4b59      	ldr	r3, [pc, #356]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	4a58      	ldr	r2, [pc, #352]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 800782a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800782e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0308 	and.w	r3, r3, #8
 8007838:	2b00      	cmp	r3, #0
 800783a:	d005      	beq.n	8007848 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800783c:	4b53      	ldr	r3, [pc, #332]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	4a52      	ldr	r2, [pc, #328]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 8007842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007846:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007848:	4b50      	ldr	r3, [pc, #320]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	494d      	ldr	r1, [pc, #308]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 8007856:	4313      	orrs	r3, r2
 8007858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d040      	beq.n	80078e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d107      	bne.n	800787e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800786e:	4b47      	ldr	r3, [pc, #284]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d115      	bne.n	80078a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e07f      	b.n	800797e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2b02      	cmp	r3, #2
 8007884:	d107      	bne.n	8007896 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007886:	4b41      	ldr	r3, [pc, #260]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d109      	bne.n	80078a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e073      	b.n	800797e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007896:	4b3d      	ldr	r3, [pc, #244]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e06b      	b.n	800797e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078a6:	4b39      	ldr	r3, [pc, #228]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f023 0203 	bic.w	r2, r3, #3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	4936      	ldr	r1, [pc, #216]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078b8:	f7fe f8ba 	bl	8005a30 <HAL_GetTick>
 80078bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078be:	e00a      	b.n	80078d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078c0:	f7fe f8b6 	bl	8005a30 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d901      	bls.n	80078d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e053      	b.n	800797e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078d6:	4b2d      	ldr	r3, [pc, #180]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f003 020c 	and.w	r2, r3, #12
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d1eb      	bne.n	80078c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078e8:	4b27      	ldr	r3, [pc, #156]	; (8007988 <HAL_RCC_ClockConfig+0x1c4>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 030f 	and.w	r3, r3, #15
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d210      	bcs.n	8007918 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078f6:	4b24      	ldr	r3, [pc, #144]	; (8007988 <HAL_RCC_ClockConfig+0x1c4>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f023 020f 	bic.w	r2, r3, #15
 80078fe:	4922      	ldr	r1, [pc, #136]	; (8007988 <HAL_RCC_ClockConfig+0x1c4>)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	4313      	orrs	r3, r2
 8007904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007906:	4b20      	ldr	r3, [pc, #128]	; (8007988 <HAL_RCC_ClockConfig+0x1c4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 030f 	and.w	r3, r3, #15
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d001      	beq.n	8007918 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e032      	b.n	800797e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d008      	beq.n	8007936 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007924:	4b19      	ldr	r3, [pc, #100]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	4916      	ldr	r1, [pc, #88]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 8007932:	4313      	orrs	r3, r2
 8007934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0308 	and.w	r3, r3, #8
 800793e:	2b00      	cmp	r3, #0
 8007940:	d009      	beq.n	8007956 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007942:	4b12      	ldr	r3, [pc, #72]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	00db      	lsls	r3, r3, #3
 8007950:	490e      	ldr	r1, [pc, #56]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 8007952:	4313      	orrs	r3, r2
 8007954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007956:	f000 f821 	bl	800799c <HAL_RCC_GetSysClockFreq>
 800795a:	4602      	mov	r2, r0
 800795c:	4b0b      	ldr	r3, [pc, #44]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	091b      	lsrs	r3, r3, #4
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	490a      	ldr	r1, [pc, #40]	; (8007990 <HAL_RCC_ClockConfig+0x1cc>)
 8007968:	5ccb      	ldrb	r3, [r1, r3]
 800796a:	fa22 f303 	lsr.w	r3, r2, r3
 800796e:	4a09      	ldr	r2, [pc, #36]	; (8007994 <HAL_RCC_ClockConfig+0x1d0>)
 8007970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007972:	4b09      	ldr	r3, [pc, #36]	; (8007998 <HAL_RCC_ClockConfig+0x1d4>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe f816 	bl	80059a8 <HAL_InitTick>

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	40023c00 	.word	0x40023c00
 800798c:	40023800 	.word	0x40023800
 8007990:	0800a334 	.word	0x0800a334
 8007994:	20000184 	.word	0x20000184
 8007998:	20000188 	.word	0x20000188

0800799c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800799c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079a0:	b090      	sub	sp, #64	; 0x40
 80079a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	637b      	str	r3, [r7, #52]	; 0x34
 80079a8:	2300      	movs	r3, #0
 80079aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079ac:	2300      	movs	r3, #0
 80079ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079b4:	4b59      	ldr	r3, [pc, #356]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x180>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f003 030c 	and.w	r3, r3, #12
 80079bc:	2b08      	cmp	r3, #8
 80079be:	d00d      	beq.n	80079dc <HAL_RCC_GetSysClockFreq+0x40>
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	f200 80a1 	bhi.w	8007b08 <HAL_RCC_GetSysClockFreq+0x16c>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <HAL_RCC_GetSysClockFreq+0x34>
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d003      	beq.n	80079d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80079ce:	e09b      	b.n	8007b08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079d0:	4b53      	ldr	r3, [pc, #332]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x184>)
 80079d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80079d4:	e09b      	b.n	8007b0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079d6:	4b53      	ldr	r3, [pc, #332]	; (8007b24 <HAL_RCC_GetSysClockFreq+0x188>)
 80079d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80079da:	e098      	b.n	8007b0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079dc:	4b4f      	ldr	r3, [pc, #316]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x180>)
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079e4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80079e6:	4b4d      	ldr	r3, [pc, #308]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x180>)
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d028      	beq.n	8007a44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079f2:	4b4a      	ldr	r3, [pc, #296]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x180>)
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	099b      	lsrs	r3, r3, #6
 80079f8:	2200      	movs	r2, #0
 80079fa:	623b      	str	r3, [r7, #32]
 80079fc:	627a      	str	r2, [r7, #36]	; 0x24
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007a04:	2100      	movs	r1, #0
 8007a06:	4b47      	ldr	r3, [pc, #284]	; (8007b24 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a08:	fb03 f201 	mul.w	r2, r3, r1
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	fb00 f303 	mul.w	r3, r0, r3
 8007a12:	4413      	add	r3, r2
 8007a14:	4a43      	ldr	r2, [pc, #268]	; (8007b24 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a16:	fba0 1202 	umull	r1, r2, r0, r2
 8007a1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a1c:	460a      	mov	r2, r1
 8007a1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a22:	4413      	add	r3, r2
 8007a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a28:	2200      	movs	r2, #0
 8007a2a:	61bb      	str	r3, [r7, #24]
 8007a2c:	61fa      	str	r2, [r7, #28]
 8007a2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007a36:	f7f9 f88d 	bl	8000b54 <__aeabi_uldivmod>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4613      	mov	r3, r2
 8007a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a42:	e053      	b.n	8007aec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a44:	4b35      	ldr	r3, [pc, #212]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x180>)
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	099b      	lsrs	r3, r3, #6
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	613b      	str	r3, [r7, #16]
 8007a4e:	617a      	str	r2, [r7, #20]
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007a56:	f04f 0b00 	mov.w	fp, #0
 8007a5a:	4652      	mov	r2, sl
 8007a5c:	465b      	mov	r3, fp
 8007a5e:	f04f 0000 	mov.w	r0, #0
 8007a62:	f04f 0100 	mov.w	r1, #0
 8007a66:	0159      	lsls	r1, r3, #5
 8007a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a6c:	0150      	lsls	r0, r2, #5
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	ebb2 080a 	subs.w	r8, r2, sl
 8007a76:	eb63 090b 	sbc.w	r9, r3, fp
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	f04f 0300 	mov.w	r3, #0
 8007a82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007a86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007a8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007a8e:	ebb2 0408 	subs.w	r4, r2, r8
 8007a92:	eb63 0509 	sbc.w	r5, r3, r9
 8007a96:	f04f 0200 	mov.w	r2, #0
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	00eb      	lsls	r3, r5, #3
 8007aa0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007aa4:	00e2      	lsls	r2, r4, #3
 8007aa6:	4614      	mov	r4, r2
 8007aa8:	461d      	mov	r5, r3
 8007aaa:	eb14 030a 	adds.w	r3, r4, sl
 8007aae:	603b      	str	r3, [r7, #0]
 8007ab0:	eb45 030b 	adc.w	r3, r5, fp
 8007ab4:	607b      	str	r3, [r7, #4]
 8007ab6:	f04f 0200 	mov.w	r2, #0
 8007aba:	f04f 0300 	mov.w	r3, #0
 8007abe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	028b      	lsls	r3, r1, #10
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007acc:	4621      	mov	r1, r4
 8007ace:	028a      	lsls	r2, r1, #10
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	60bb      	str	r3, [r7, #8]
 8007ada:	60fa      	str	r2, [r7, #12]
 8007adc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ae0:	f7f9 f838 	bl	8000b54 <__aeabi_uldivmod>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4613      	mov	r3, r2
 8007aea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007aec:	4b0b      	ldr	r3, [pc, #44]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x180>)
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	0c1b      	lsrs	r3, r3, #16
 8007af2:	f003 0303 	and.w	r3, r3, #3
 8007af6:	3301      	adds	r3, #1
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007afc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b06:	e002      	b.n	8007b0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b08:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3740      	adds	r7, #64	; 0x40
 8007b14:	46bd      	mov	sp, r7
 8007b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b1a:	bf00      	nop
 8007b1c:	40023800 	.word	0x40023800
 8007b20:	00f42400 	.word	0x00f42400
 8007b24:	00b71b00 	.word	0x00b71b00

08007b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007b30:	2300      	movs	r3, #0
 8007b32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007b40:	2300      	movs	r3, #0
 8007b42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d012      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b50:	4b69      	ldr	r3, [pc, #420]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	4a68      	ldr	r2, [pc, #416]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007b5a:	6093      	str	r3, [r2, #8]
 8007b5c:	4b66      	ldr	r3, [pc, #408]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b64:	4964      	ldr	r1, [pc, #400]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007b72:	2301      	movs	r3, #1
 8007b74:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d017      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b82:	4b5d      	ldr	r3, [pc, #372]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b90:	4959      	ldr	r1, [pc, #356]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ba0:	d101      	bne.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d017      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007bbe:	4b4e      	ldr	r3, [pc, #312]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bcc:	494a      	ldr	r1, [pc, #296]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bdc:	d101      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007bde:	2301      	movs	r3, #1
 8007be0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007bea:	2301      	movs	r3, #1
 8007bec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 808b 	beq.w	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c0c:	4b3a      	ldr	r3, [pc, #232]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c10:	4a39      	ldr	r2, [pc, #228]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c16:	6413      	str	r3, [r2, #64]	; 0x40
 8007c18:	4b37      	ldr	r3, [pc, #220]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c20:	60bb      	str	r3, [r7, #8]
 8007c22:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c24:	4b35      	ldr	r3, [pc, #212]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a34      	ldr	r2, [pc, #208]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c30:	f7fd fefe 	bl	8005a30 <HAL_GetTick>
 8007c34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007c36:	e008      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c38:	f7fd fefa 	bl	8005a30 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b64      	cmp	r3, #100	; 0x64
 8007c44:	d901      	bls.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e357      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007c4a:	4b2c      	ldr	r3, [pc, #176]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0f0      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c56:	4b28      	ldr	r3, [pc, #160]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d035      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d02e      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c74:	4b20      	ldr	r3, [pc, #128]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c7e:	4b1e      	ldr	r3, [pc, #120]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c82:	4a1d      	ldr	r2, [pc, #116]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c88:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c8a:	4b1b      	ldr	r3, [pc, #108]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c8e:	4a1a      	ldr	r2, [pc, #104]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007c96:	4a18      	ldr	r2, [pc, #96]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c9c:	4b16      	ldr	r3, [pc, #88]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d114      	bne.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca8:	f7fd fec2 	bl	8005a30 <HAL_GetTick>
 8007cac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cae:	e00a      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cb0:	f7fd febe 	bl	8005a30 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d901      	bls.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e319      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cc6:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0ee      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cde:	d111      	bne.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007ce0:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007cec:	4b04      	ldr	r3, [pc, #16]	; (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007cee:	400b      	ands	r3, r1
 8007cf0:	4901      	ldr	r1, [pc, #4]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	608b      	str	r3, [r1, #8]
 8007cf6:	e00b      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007cf8:	40023800 	.word	0x40023800
 8007cfc:	40007000 	.word	0x40007000
 8007d00:	0ffffcff 	.word	0x0ffffcff
 8007d04:	4baa      	ldr	r3, [pc, #680]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	4aa9      	ldr	r2, [pc, #676]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007d0e:	6093      	str	r3, [r2, #8]
 8007d10:	4ba7      	ldr	r3, [pc, #668]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d1c:	49a4      	ldr	r1, [pc, #656]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0310 	and.w	r3, r3, #16
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d010      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d2e:	4ba0      	ldr	r3, [pc, #640]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d34:	4a9e      	ldr	r2, [pc, #632]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007d3e:	4b9c      	ldr	r3, [pc, #624]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d40:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	4999      	ldr	r1, [pc, #612]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00a      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d5c:	4b94      	ldr	r3, [pc, #592]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d6a:	4991      	ldr	r1, [pc, #580]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d7e:	4b8c      	ldr	r3, [pc, #560]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d8c:	4988      	ldr	r1, [pc, #544]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00a      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007da0:	4b83      	ldr	r3, [pc, #524]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dae:	4980      	ldr	r1, [pc, #512]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007dc2:	4b7b      	ldr	r3, [pc, #492]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd0:	4977      	ldr	r1, [pc, #476]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00a      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007de4:	4b72      	ldr	r3, [pc, #456]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dea:	f023 0203 	bic.w	r2, r3, #3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df2:	496f      	ldr	r1, [pc, #444]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007df4:	4313      	orrs	r3, r2
 8007df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00a      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e06:	4b6a      	ldr	r3, [pc, #424]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e0c:	f023 020c 	bic.w	r2, r3, #12
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e14:	4966      	ldr	r1, [pc, #408]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00a      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e28:	4b61      	ldr	r3, [pc, #388]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e36:	495e      	ldr	r1, [pc, #376]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e4a:	4b59      	ldr	r3, [pc, #356]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e50:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e58:	4955      	ldr	r1, [pc, #340]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00a      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e6c:	4b50      	ldr	r3, [pc, #320]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e7a:	494d      	ldr	r1, [pc, #308]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00a      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007e8e:	4b48      	ldr	r3, [pc, #288]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e9c:	4944      	ldr	r1, [pc, #272]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00a      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007eb0:	4b3f      	ldr	r3, [pc, #252]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ebe:	493c      	ldr	r1, [pc, #240]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00a      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007ed2:	4b37      	ldr	r3, [pc, #220]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee0:	4933      	ldr	r1, [pc, #204]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00a      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ef4:	4b2e      	ldr	r3, [pc, #184]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f02:	492b      	ldr	r1, [pc, #172]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d011      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007f16:	4b26      	ldr	r3, [pc, #152]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f24:	4922      	ldr	r1, [pc, #136]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f34:	d101      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007f36:	2301      	movs	r3, #1
 8007f38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007f46:	2301      	movs	r3, #1
 8007f48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f56:	4b16      	ldr	r3, [pc, #88]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f64:	4912      	ldr	r1, [pc, #72]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00b      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f78:	4b0d      	ldr	r3, [pc, #52]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f88:	4909      	ldr	r1, [pc, #36]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d006      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 80d9 	beq.w	8008156 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007fa4:	4b02      	ldr	r3, [pc, #8]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a01      	ldr	r2, [pc, #4]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007faa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fae:	e001      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007fb0:	40023800 	.word	0x40023800
 8007fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fb6:	f7fd fd3b 	bl	8005a30 <HAL_GetTick>
 8007fba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007fbc:	e008      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007fbe:	f7fd fd37 	bl	8005a30 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	2b64      	cmp	r3, #100	; 0x64
 8007fca:	d901      	bls.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e194      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007fd0:	4b6c      	ldr	r3, [pc, #432]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1f0      	bne.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d021      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d11d      	bne.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ff0:	4b64      	ldr	r3, [pc, #400]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ff6:	0c1b      	lsrs	r3, r3, #16
 8007ff8:	f003 0303 	and.w	r3, r3, #3
 8007ffc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007ffe:	4b61      	ldr	r3, [pc, #388]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008004:	0e1b      	lsrs	r3, r3, #24
 8008006:	f003 030f 	and.w	r3, r3, #15
 800800a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	019a      	lsls	r2, r3, #6
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	041b      	lsls	r3, r3, #16
 8008016:	431a      	orrs	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	061b      	lsls	r3, r3, #24
 800801c:	431a      	orrs	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	071b      	lsls	r3, r3, #28
 8008024:	4957      	ldr	r1, [pc, #348]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008026:	4313      	orrs	r3, r2
 8008028:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d004      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008040:	d00a      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800804a:	2b00      	cmp	r3, #0
 800804c:	d02e      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008056:	d129      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008058:	4b4a      	ldr	r3, [pc, #296]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800805a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800805e:	0c1b      	lsrs	r3, r3, #16
 8008060:	f003 0303 	and.w	r3, r3, #3
 8008064:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008066:	4b47      	ldr	r3, [pc, #284]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800806c:	0f1b      	lsrs	r3, r3, #28
 800806e:	f003 0307 	and.w	r3, r3, #7
 8008072:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	019a      	lsls	r2, r3, #6
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	041b      	lsls	r3, r3, #16
 800807e:	431a      	orrs	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	061b      	lsls	r3, r3, #24
 8008086:	431a      	orrs	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	071b      	lsls	r3, r3, #28
 800808c:	493d      	ldr	r1, [pc, #244]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800808e:	4313      	orrs	r3, r2
 8008090:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008094:	4b3b      	ldr	r3, [pc, #236]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800809a:	f023 021f 	bic.w	r2, r3, #31
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	3b01      	subs	r3, #1
 80080a4:	4937      	ldr	r1, [pc, #220]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01d      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80080b8:	4b32      	ldr	r3, [pc, #200]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080be:	0e1b      	lsrs	r3, r3, #24
 80080c0:	f003 030f 	and.w	r3, r3, #15
 80080c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80080c6:	4b2f      	ldr	r3, [pc, #188]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080cc:	0f1b      	lsrs	r3, r3, #28
 80080ce:	f003 0307 	and.w	r3, r3, #7
 80080d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	019a      	lsls	r2, r3, #6
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	041b      	lsls	r3, r3, #16
 80080e0:	431a      	orrs	r2, r3
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	061b      	lsls	r3, r3, #24
 80080e6:	431a      	orrs	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	071b      	lsls	r3, r3, #28
 80080ec:	4925      	ldr	r1, [pc, #148]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d011      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	019a      	lsls	r2, r3, #6
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	041b      	lsls	r3, r3, #16
 800810c:	431a      	orrs	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	061b      	lsls	r3, r3, #24
 8008114:	431a      	orrs	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	071b      	lsls	r3, r3, #28
 800811c:	4919      	ldr	r1, [pc, #100]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800811e:	4313      	orrs	r3, r2
 8008120:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008124:	4b17      	ldr	r3, [pc, #92]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a16      	ldr	r2, [pc, #88]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800812a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800812e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008130:	f7fd fc7e 	bl	8005a30 <HAL_GetTick>
 8008134:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008136:	e008      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008138:	f7fd fc7a 	bl	8005a30 <HAL_GetTick>
 800813c:	4602      	mov	r2, r0
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	2b64      	cmp	r3, #100	; 0x64
 8008144:	d901      	bls.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e0d7      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800814a:	4b0e      	ldr	r3, [pc, #56]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0f0      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	2b01      	cmp	r3, #1
 800815a:	f040 80cd 	bne.w	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800815e:	4b09      	ldr	r3, [pc, #36]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a08      	ldr	r2, [pc, #32]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800816a:	f7fd fc61 	bl	8005a30 <HAL_GetTick>
 800816e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008170:	e00a      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008172:	f7fd fc5d 	bl	8005a30 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b64      	cmp	r3, #100	; 0x64
 800817e:	d903      	bls.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e0ba      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008184:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008188:	4b5e      	ldr	r3, [pc, #376]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008194:	d0ed      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d009      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d02e      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d12a      	bne.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80081be:	4b51      	ldr	r3, [pc, #324]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c4:	0c1b      	lsrs	r3, r3, #16
 80081c6:	f003 0303 	and.w	r3, r3, #3
 80081ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80081cc:	4b4d      	ldr	r3, [pc, #308]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d2:	0f1b      	lsrs	r3, r3, #28
 80081d4:	f003 0307 	and.w	r3, r3, #7
 80081d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	019a      	lsls	r2, r3, #6
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	041b      	lsls	r3, r3, #16
 80081e4:	431a      	orrs	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	061b      	lsls	r3, r3, #24
 80081ec:	431a      	orrs	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	071b      	lsls	r3, r3, #28
 80081f2:	4944      	ldr	r1, [pc, #272]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80081fa:	4b42      	ldr	r3, [pc, #264]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008200:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008208:	3b01      	subs	r3, #1
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	493d      	ldr	r1, [pc, #244]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800820e:	4313      	orrs	r3, r2
 8008210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d022      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008228:	d11d      	bne.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800822a:	4b36      	ldr	r3, [pc, #216]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800822c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008230:	0e1b      	lsrs	r3, r3, #24
 8008232:	f003 030f 	and.w	r3, r3, #15
 8008236:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008238:	4b32      	ldr	r3, [pc, #200]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800823a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800823e:	0f1b      	lsrs	r3, r3, #28
 8008240:	f003 0307 	and.w	r3, r3, #7
 8008244:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	019a      	lsls	r2, r3, #6
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	041b      	lsls	r3, r3, #16
 8008252:	431a      	orrs	r2, r3
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	061b      	lsls	r3, r3, #24
 8008258:	431a      	orrs	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	071b      	lsls	r3, r3, #28
 800825e:	4929      	ldr	r1, [pc, #164]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008260:	4313      	orrs	r3, r2
 8008262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0308 	and.w	r3, r3, #8
 800826e:	2b00      	cmp	r3, #0
 8008270:	d028      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008272:	4b24      	ldr	r3, [pc, #144]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008278:	0e1b      	lsrs	r3, r3, #24
 800827a:	f003 030f 	and.w	r3, r3, #15
 800827e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008280:	4b20      	ldr	r3, [pc, #128]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008286:	0c1b      	lsrs	r3, r3, #16
 8008288:	f003 0303 	and.w	r3, r3, #3
 800828c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	019a      	lsls	r2, r3, #6
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	041b      	lsls	r3, r3, #16
 8008298:	431a      	orrs	r2, r3
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	061b      	lsls	r3, r3, #24
 800829e:	431a      	orrs	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	071b      	lsls	r3, r3, #28
 80082a6:	4917      	ldr	r1, [pc, #92]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082a8:	4313      	orrs	r3, r2
 80082aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80082ae:	4b15      	ldr	r3, [pc, #84]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082bc:	4911      	ldr	r1, [pc, #68]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80082c4:	4b0f      	ldr	r3, [pc, #60]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a0e      	ldr	r2, [pc, #56]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082d0:	f7fd fbae 	bl	8005a30 <HAL_GetTick>
 80082d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80082d6:	e008      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80082d8:	f7fd fbaa 	bl	8005a30 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	2b64      	cmp	r3, #100	; 0x64
 80082e4:	d901      	bls.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e007      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80082ea:	4b06      	ldr	r3, [pc, #24]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082f6:	d1ef      	bne.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3720      	adds	r7, #32
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	40023800 	.word	0x40023800

08008308 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e09d      	b.n	8008456 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	2b00      	cmp	r3, #0
 8008320:	d108      	bne.n	8008334 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800832a:	d009      	beq.n	8008340 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	61da      	str	r2, [r3, #28]
 8008332:	e005      	b.n	8008340 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d106      	bne.n	8008360 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7fc fe0c 	bl	8004f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008376:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008380:	d902      	bls.n	8008388 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008382:	2300      	movs	r3, #0
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	e002      	b.n	800838e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800838c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008396:	d007      	beq.n	80083a8 <HAL_SPI_Init+0xa0>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083a0:	d002      	beq.n	80083a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80083b8:	431a      	orrs	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	431a      	orrs	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	431a      	orrs	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083d6:	431a      	orrs	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083e0:	431a      	orrs	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a1b      	ldr	r3, [r3, #32]
 80083e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ea:	ea42 0103 	orr.w	r1, r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	0c1b      	lsrs	r3, r3, #16
 8008404:	f003 0204 	and.w	r2, r3, #4
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	f003 0310 	and.w	r3, r3, #16
 8008410:	431a      	orrs	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008416:	f003 0308 	and.w	r3, r3, #8
 800841a:	431a      	orrs	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008424:	ea42 0103 	orr.w	r1, r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	69da      	ldr	r2, [r3, #28]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008444:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b08a      	sub	sp, #40	; 0x28
 8008462:	af00      	add	r7, sp, #0
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	607a      	str	r2, [r7, #4]
 800846a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800846c:	2301      	movs	r3, #1
 800846e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800847c:	2b01      	cmp	r3, #1
 800847e:	d101      	bne.n	8008484 <HAL_SPI_TransmitReceive+0x26>
 8008480:	2302      	movs	r3, #2
 8008482:	e1fb      	b.n	800887c <HAL_SPI_TransmitReceive+0x41e>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800848c:	f7fd fad0 	bl	8005a30 <HAL_GetTick>
 8008490:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008498:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80084a0:	887b      	ldrh	r3, [r7, #2]
 80084a2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80084a4:	887b      	ldrh	r3, [r7, #2]
 80084a6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80084a8:	7efb      	ldrb	r3, [r7, #27]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d00e      	beq.n	80084cc <HAL_SPI_TransmitReceive+0x6e>
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084b4:	d106      	bne.n	80084c4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d102      	bne.n	80084c4 <HAL_SPI_TransmitReceive+0x66>
 80084be:	7efb      	ldrb	r3, [r7, #27]
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d003      	beq.n	80084cc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80084c4:	2302      	movs	r3, #2
 80084c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80084ca:	e1cd      	b.n	8008868 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d005      	beq.n	80084de <HAL_SPI_TransmitReceive+0x80>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <HAL_SPI_TransmitReceive+0x80>
 80084d8:	887b      	ldrh	r3, [r7, #2]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d103      	bne.n	80084e6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80084e4:	e1c0      	b.n	8008868 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b04      	cmp	r3, #4
 80084f0:	d003      	beq.n	80084fa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2205      	movs	r2, #5
 80084f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	887a      	ldrh	r2, [r7, #2]
 800850a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	887a      	ldrh	r2, [r7, #2]
 8008512:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	887a      	ldrh	r2, [r7, #2]
 8008520:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	887a      	ldrh	r2, [r7, #2]
 8008526:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800853c:	d802      	bhi.n	8008544 <HAL_SPI_TransmitReceive+0xe6>
 800853e:	8a3b      	ldrh	r3, [r7, #16]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d908      	bls.n	8008556 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008552:	605a      	str	r2, [r3, #4]
 8008554:	e007      	b.n	8008566 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008564:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008570:	2b40      	cmp	r3, #64	; 0x40
 8008572:	d007      	beq.n	8008584 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008582:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800858c:	d97c      	bls.n	8008688 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <HAL_SPI_TransmitReceive+0x13e>
 8008596:	8a7b      	ldrh	r3, [r7, #18]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d169      	bne.n	8008670 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a0:	881a      	ldrh	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ac:	1c9a      	adds	r2, r3, #2
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	3b01      	subs	r3, #1
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085c0:	e056      	b.n	8008670 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d11b      	bne.n	8008608 <HAL_SPI_TransmitReceive+0x1aa>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d016      	beq.n	8008608 <HAL_SPI_TransmitReceive+0x1aa>
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d113      	bne.n	8008608 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e4:	881a      	ldrh	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f0:	1c9a      	adds	r2, r3, #2
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	3b01      	subs	r3, #1
 80085fe:	b29a      	uxth	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b01      	cmp	r3, #1
 8008614:	d11c      	bne.n	8008650 <HAL_SPI_TransmitReceive+0x1f2>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800861c:	b29b      	uxth	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d016      	beq.n	8008650 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862c:	b292      	uxth	r2, r2
 800862e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008634:	1c9a      	adds	r2, r3, #2
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008640:	b29b      	uxth	r3, r3
 8008642:	3b01      	subs	r3, #1
 8008644:	b29a      	uxth	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800864c:	2301      	movs	r3, #1
 800864e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008650:	f7fd f9ee 	bl	8005a30 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800865c:	429a      	cmp	r2, r3
 800865e:	d807      	bhi.n	8008670 <HAL_SPI_TransmitReceive+0x212>
 8008660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008666:	d003      	beq.n	8008670 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800866e:	e0fb      	b.n	8008868 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008674:	b29b      	uxth	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1a3      	bne.n	80085c2 <HAL_SPI_TransmitReceive+0x164>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d19d      	bne.n	80085c2 <HAL_SPI_TransmitReceive+0x164>
 8008686:	e0df      	b.n	8008848 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d003      	beq.n	8008698 <HAL_SPI_TransmitReceive+0x23a>
 8008690:	8a7b      	ldrh	r3, [r7, #18]
 8008692:	2b01      	cmp	r3, #1
 8008694:	f040 80cb 	bne.w	800882e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800869c:	b29b      	uxth	r3, r3
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d912      	bls.n	80086c8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a6:	881a      	ldrh	r2, [r3, #0]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b2:	1c9a      	adds	r2, r3, #2
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086bc:	b29b      	uxth	r3, r3
 80086be:	3b02      	subs	r3, #2
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80086c6:	e0b2      	b.n	800882e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	330c      	adds	r3, #12
 80086d2:	7812      	ldrb	r2, [r2, #0]
 80086d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086da:	1c5a      	adds	r2, r3, #1
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	3b01      	subs	r3, #1
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086ee:	e09e      	b.n	800882e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d134      	bne.n	8008768 <HAL_SPI_TransmitReceive+0x30a>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008702:	b29b      	uxth	r3, r3
 8008704:	2b00      	cmp	r3, #0
 8008706:	d02f      	beq.n	8008768 <HAL_SPI_TransmitReceive+0x30a>
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	2b01      	cmp	r3, #1
 800870c:	d12c      	bne.n	8008768 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008712:	b29b      	uxth	r3, r3
 8008714:	2b01      	cmp	r3, #1
 8008716:	d912      	bls.n	800873e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871c:	881a      	ldrh	r2, [r3, #0]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008728:	1c9a      	adds	r2, r3, #2
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008732:	b29b      	uxth	r3, r3
 8008734:	3b02      	subs	r3, #2
 8008736:	b29a      	uxth	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800873c:	e012      	b.n	8008764 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	330c      	adds	r3, #12
 8008748:	7812      	ldrb	r2, [r2, #0]
 800874a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800875a:	b29b      	uxth	r3, r3
 800875c:	3b01      	subs	r3, #1
 800875e:	b29a      	uxth	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f003 0301 	and.w	r3, r3, #1
 8008772:	2b01      	cmp	r3, #1
 8008774:	d148      	bne.n	8008808 <HAL_SPI_TransmitReceive+0x3aa>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800877c:	b29b      	uxth	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d042      	beq.n	8008808 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008788:	b29b      	uxth	r3, r3
 800878a:	2b01      	cmp	r3, #1
 800878c:	d923      	bls.n	80087d6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68da      	ldr	r2, [r3, #12]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008798:	b292      	uxth	r2, r2
 800879a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a0:	1c9a      	adds	r2, r3, #2
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	3b02      	subs	r3, #2
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087be:	b29b      	uxth	r3, r3
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d81f      	bhi.n	8008804 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80087d2:	605a      	str	r2, [r3, #4]
 80087d4:	e016      	b.n	8008804 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f103 020c 	add.w	r2, r3, #12
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e2:	7812      	ldrb	r2, [r2, #0]
 80087e4:	b2d2      	uxtb	r2, r2
 80087e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	3b01      	subs	r3, #1
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008804:	2301      	movs	r3, #1
 8008806:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008808:	f7fd f912 	bl	8005a30 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008814:	429a      	cmp	r2, r3
 8008816:	d803      	bhi.n	8008820 <HAL_SPI_TransmitReceive+0x3c2>
 8008818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800881e:	d102      	bne.n	8008826 <HAL_SPI_TransmitReceive+0x3c8>
 8008820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008822:	2b00      	cmp	r3, #0
 8008824:	d103      	bne.n	800882e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800882c:	e01c      	b.n	8008868 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008832:	b29b      	uxth	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	f47f af5b 	bne.w	80086f0 <HAL_SPI_TransmitReceive+0x292>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008840:	b29b      	uxth	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	f47f af54 	bne.w	80086f0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008848:	69fa      	ldr	r2, [r7, #28]
 800884a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 f937 	bl	8008ac0 <SPI_EndRxTxTransaction>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d006      	beq.n	8008866 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2220      	movs	r2, #32
 8008862:	661a      	str	r2, [r3, #96]	; 0x60
 8008864:	e000      	b.n	8008868 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008866:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800887c:	4618      	mov	r0, r3
 800887e:	3728      	adds	r7, #40	; 0x28
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	603b      	str	r3, [r7, #0]
 8008890:	4613      	mov	r3, r2
 8008892:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008894:	f7fd f8cc 	bl	8005a30 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	4413      	add	r3, r2
 80088a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80088a4:	f7fd f8c4 	bl	8005a30 <HAL_GetTick>
 80088a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80088aa:	4b39      	ldr	r3, [pc, #228]	; (8008990 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	015b      	lsls	r3, r3, #5
 80088b0:	0d1b      	lsrs	r3, r3, #20
 80088b2:	69fa      	ldr	r2, [r7, #28]
 80088b4:	fb02 f303 	mul.w	r3, r2, r3
 80088b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088ba:	e054      	b.n	8008966 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088c2:	d050      	beq.n	8008966 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80088c4:	f7fd f8b4 	bl	8005a30 <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	69fa      	ldr	r2, [r7, #28]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d902      	bls.n	80088da <SPI_WaitFlagStateUntilTimeout+0x56>
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d13d      	bne.n	8008956 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	685a      	ldr	r2, [r3, #4]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80088e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088f2:	d111      	bne.n	8008918 <SPI_WaitFlagStateUntilTimeout+0x94>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088fc:	d004      	beq.n	8008908 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008906:	d107      	bne.n	8008918 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008916:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008920:	d10f      	bne.n	8008942 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008940:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e017      	b.n	8008986 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	3b01      	subs	r3, #1
 8008964:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	4013      	ands	r3, r2
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	429a      	cmp	r2, r3
 8008974:	bf0c      	ite	eq
 8008976:	2301      	moveq	r3, #1
 8008978:	2300      	movne	r3, #0
 800897a:	b2db      	uxtb	r3, r3
 800897c:	461a      	mov	r2, r3
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	429a      	cmp	r2, r3
 8008982:	d19b      	bne.n	80088bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3720      	adds	r7, #32
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	20000184 	.word	0x20000184

08008994 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b08a      	sub	sp, #40	; 0x28
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
 80089a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80089a6:	f7fd f843 	bl	8005a30 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ae:	1a9b      	subs	r3, r3, r2
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	4413      	add	r3, r2
 80089b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80089b6:	f7fd f83b 	bl	8005a30 <HAL_GetTick>
 80089ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	330c      	adds	r3, #12
 80089c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80089c4:	4b3d      	ldr	r3, [pc, #244]	; (8008abc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	4613      	mov	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	00da      	lsls	r2, r3, #3
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	0d1b      	lsrs	r3, r3, #20
 80089d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d6:	fb02 f303 	mul.w	r3, r2, r3
 80089da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80089dc:	e060      	b.n	8008aa0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80089e4:	d107      	bne.n	80089f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d104      	bne.n	80089f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089fc:	d050      	beq.n	8008aa0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089fe:	f7fd f817 	bl	8005a30 <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d902      	bls.n	8008a14 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d13d      	bne.n	8008a90 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	685a      	ldr	r2, [r3, #4]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a2c:	d111      	bne.n	8008a52 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a36:	d004      	beq.n	8008a42 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a40:	d107      	bne.n	8008a52 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a5a:	d10f      	bne.n	8008a7c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e010      	b.n	8008ab2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	689a      	ldr	r2, [r3, #8]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d196      	bne.n	80089de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3728      	adds	r7, #40	; 0x28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	20000184 	.word	0x20000184

08008ac0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b088      	sub	sp, #32
 8008ac4:	af02      	add	r7, sp, #8
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f7ff ff5b 	bl	8008994 <SPI_WaitFifoStateUntilTimeout>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d007      	beq.n	8008af4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ae8:	f043 0220 	orr.w	r2, r3, #32
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e046      	b.n	8008b82 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008af4:	4b25      	ldr	r3, [pc, #148]	; (8008b8c <SPI_EndRxTxTransaction+0xcc>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a25      	ldr	r2, [pc, #148]	; (8008b90 <SPI_EndRxTxTransaction+0xd0>)
 8008afa:	fba2 2303 	umull	r2, r3, r2, r3
 8008afe:	0d5b      	lsrs	r3, r3, #21
 8008b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b04:	fb02 f303 	mul.w	r3, r2, r3
 8008b08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b12:	d112      	bne.n	8008b3a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	2180      	movs	r1, #128	; 0x80
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f7ff feb0 	bl	8008884 <SPI_WaitFlagStateUntilTimeout>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d016      	beq.n	8008b58 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b2e:	f043 0220 	orr.w	r2, r3, #32
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e023      	b.n	8008b82 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00a      	beq.n	8008b56 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	3b01      	subs	r3, #1
 8008b44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b50:	2b80      	cmp	r3, #128	; 0x80
 8008b52:	d0f2      	beq.n	8008b3a <SPI_EndRxTxTransaction+0x7a>
 8008b54:	e000      	b.n	8008b58 <SPI_EndRxTxTransaction+0x98>
        break;
 8008b56:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f7ff ff15 	bl	8008994 <SPI_WaitFifoStateUntilTimeout>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d007      	beq.n	8008b80 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b74:	f043 0220 	orr.w	r2, r3, #32
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e000      	b.n	8008b82 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3718      	adds	r7, #24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20000184 	.word	0x20000184
 8008b90:	165e9f81 	.word	0x165e9f81

08008b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e054      	b.n	8008c50 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d111      	bne.n	8008bd6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fdf2 	bl	80097a4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d102      	bne.n	8008bce <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a23      	ldr	r2, [pc, #140]	; (8008c58 <HAL_TIM_Base_Init+0xc4>)
 8008bcc:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2202      	movs	r2, #2
 8008bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	3304      	adds	r3, #4
 8008be6:	4619      	mov	r1, r3
 8008be8:	4610      	mov	r0, r2
 8008bea:	f000 fca1 	bl	8009530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	0800557d 	.word	0x0800557d

08008c5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d001      	beq.n	8008c74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e054      	b.n	8008d1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2202      	movs	r2, #2
 8008c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68da      	ldr	r2, [r3, #12]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f042 0201 	orr.w	r2, r2, #1
 8008c8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a26      	ldr	r2, [pc, #152]	; (8008d2c <HAL_TIM_Base_Start_IT+0xd0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d022      	beq.n	8008cdc <HAL_TIM_Base_Start_IT+0x80>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c9e:	d01d      	beq.n	8008cdc <HAL_TIM_Base_Start_IT+0x80>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a22      	ldr	r2, [pc, #136]	; (8008d30 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d018      	beq.n	8008cdc <HAL_TIM_Base_Start_IT+0x80>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a21      	ldr	r2, [pc, #132]	; (8008d34 <HAL_TIM_Base_Start_IT+0xd8>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d013      	beq.n	8008cdc <HAL_TIM_Base_Start_IT+0x80>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a1f      	ldr	r2, [pc, #124]	; (8008d38 <HAL_TIM_Base_Start_IT+0xdc>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d00e      	beq.n	8008cdc <HAL_TIM_Base_Start_IT+0x80>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a1e      	ldr	r2, [pc, #120]	; (8008d3c <HAL_TIM_Base_Start_IT+0xe0>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d009      	beq.n	8008cdc <HAL_TIM_Base_Start_IT+0x80>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a1c      	ldr	r2, [pc, #112]	; (8008d40 <HAL_TIM_Base_Start_IT+0xe4>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d004      	beq.n	8008cdc <HAL_TIM_Base_Start_IT+0x80>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a1b      	ldr	r2, [pc, #108]	; (8008d44 <HAL_TIM_Base_Start_IT+0xe8>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d115      	bne.n	8008d08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689a      	ldr	r2, [r3, #8]
 8008ce2:	4b19      	ldr	r3, [pc, #100]	; (8008d48 <HAL_TIM_Base_Start_IT+0xec>)
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b06      	cmp	r3, #6
 8008cec:	d015      	beq.n	8008d1a <HAL_TIM_Base_Start_IT+0xbe>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cf4:	d011      	beq.n	8008d1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f042 0201 	orr.w	r2, r2, #1
 8008d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d06:	e008      	b.n	8008d1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f042 0201 	orr.w	r2, r2, #1
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	e000      	b.n	8008d1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	40010000 	.word	0x40010000
 8008d30:	40000400 	.word	0x40000400
 8008d34:	40000800 	.word	0x40000800
 8008d38:	40000c00 	.word	0x40000c00
 8008d3c:	40010400 	.word	0x40010400
 8008d40:	40014000 	.word	0x40014000
 8008d44:	40001800 	.word	0x40001800
 8008d48:	00010007 	.word	0x00010007

08008d4c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f022 0201 	bic.w	r2, r2, #1
 8008d62:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6a1a      	ldr	r2, [r3, #32]
 8008d6a:	f241 1311 	movw	r3, #4369	; 0x1111
 8008d6e:	4013      	ands	r3, r2
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10f      	bne.n	8008d94 <HAL_TIM_Base_Stop_IT+0x48>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6a1a      	ldr	r2, [r3, #32]
 8008d7a:	f240 4344 	movw	r3, #1092	; 0x444
 8008d7e:	4013      	ands	r3, r2
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d107      	bne.n	8008d94 <HAL_TIM_Base_Stop_IT+0x48>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f022 0201 	bic.w	r2, r2, #1
 8008d92:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	f003 0302 	and.w	r3, r3, #2
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d128      	bne.n	8008e12 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f003 0302 	and.w	r3, r3, #2
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d121      	bne.n	8008e12 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f06f 0202 	mvn.w	r2, #2
 8008dd6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	f003 0303 	and.w	r3, r3, #3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d005      	beq.n	8008df8 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	4798      	blx	r3
 8008df6:	e009      	b.n	8008e0c <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	f003 0304 	and.w	r3, r3, #4
 8008e1c:	2b04      	cmp	r3, #4
 8008e1e:	d128      	bne.n	8008e72 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	f003 0304 	and.w	r3, r3, #4
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	d121      	bne.n	8008e72 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f06f 0204 	mvn.w	r2, #4
 8008e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d005      	beq.n	8008e58 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	4798      	blx	r3
 8008e56:	e009      	b.n	8008e6c <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	f003 0308 	and.w	r3, r3, #8
 8008e7c:	2b08      	cmp	r3, #8
 8008e7e:	d128      	bne.n	8008ed2 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	f003 0308 	and.w	r3, r3, #8
 8008e8a:	2b08      	cmp	r3, #8
 8008e8c:	d121      	bne.n	8008ed2 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f06f 0208 	mvn.w	r2, #8
 8008e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2204      	movs	r2, #4
 8008e9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	f003 0303 	and.w	r3, r3, #3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d005      	beq.n	8008eb8 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	4798      	blx	r3
 8008eb6:	e009      	b.n	8008ecc <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	f003 0310 	and.w	r3, r3, #16
 8008edc:	2b10      	cmp	r3, #16
 8008ede:	d128      	bne.n	8008f32 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	f003 0310 	and.w	r3, r3, #16
 8008eea:	2b10      	cmp	r3, #16
 8008eec:	d121      	bne.n	8008f32 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f06f 0210 	mvn.w	r2, #16
 8008ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2208      	movs	r2, #8
 8008efc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	69db      	ldr	r3, [r3, #28]
 8008f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d005      	beq.n	8008f18 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	4798      	blx	r3
 8008f16:	e009      	b.n	8008f2c <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d110      	bne.n	8008f62 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	f003 0301 	and.w	r3, r3, #1
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d109      	bne.n	8008f62 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f06f 0201 	mvn.w	r2, #1
 8008f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f6c:	2b80      	cmp	r3, #128	; 0x80
 8008f6e:	d110      	bne.n	8008f92 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7a:	2b80      	cmp	r3, #128	; 0x80
 8008f7c:	d109      	bne.n	8008f92 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fa0:	d110      	bne.n	8008fc4 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fac:	2b80      	cmp	r3, #128	; 0x80
 8008fae:	d109      	bne.n	8008fc4 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fce:	2b40      	cmp	r3, #64	; 0x40
 8008fd0:	d110      	bne.n	8008ff4 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fdc:	2b40      	cmp	r3, #64	; 0x40
 8008fde:	d109      	bne.n	8008ff4 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	f003 0320 	and.w	r3, r3, #32
 8008ffe:	2b20      	cmp	r3, #32
 8009000:	d110      	bne.n	8009024 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	f003 0320 	and.w	r3, r3, #32
 800900c:	2b20      	cmp	r3, #32
 800900e:	d109      	bne.n	8009024 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f06f 0220 	mvn.w	r2, #32
 8009018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009040:	2b01      	cmp	r3, #1
 8009042:	d101      	bne.n	8009048 <HAL_TIM_ConfigClockSource+0x1c>
 8009044:	2302      	movs	r3, #2
 8009046:	e0b4      	b.n	80091b2 <HAL_TIM_ConfigClockSource+0x186>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2202      	movs	r2, #2
 8009054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	4b56      	ldr	r3, [pc, #344]	; (80091bc <HAL_TIM_ConfigClockSource+0x190>)
 8009064:	4013      	ands	r3, r2
 8009066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800906e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009080:	d03e      	beq.n	8009100 <HAL_TIM_ConfigClockSource+0xd4>
 8009082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009086:	f200 8087 	bhi.w	8009198 <HAL_TIM_ConfigClockSource+0x16c>
 800908a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800908e:	f000 8086 	beq.w	800919e <HAL_TIM_ConfigClockSource+0x172>
 8009092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009096:	d87f      	bhi.n	8009198 <HAL_TIM_ConfigClockSource+0x16c>
 8009098:	2b70      	cmp	r3, #112	; 0x70
 800909a:	d01a      	beq.n	80090d2 <HAL_TIM_ConfigClockSource+0xa6>
 800909c:	2b70      	cmp	r3, #112	; 0x70
 800909e:	d87b      	bhi.n	8009198 <HAL_TIM_ConfigClockSource+0x16c>
 80090a0:	2b60      	cmp	r3, #96	; 0x60
 80090a2:	d050      	beq.n	8009146 <HAL_TIM_ConfigClockSource+0x11a>
 80090a4:	2b60      	cmp	r3, #96	; 0x60
 80090a6:	d877      	bhi.n	8009198 <HAL_TIM_ConfigClockSource+0x16c>
 80090a8:	2b50      	cmp	r3, #80	; 0x50
 80090aa:	d03c      	beq.n	8009126 <HAL_TIM_ConfigClockSource+0xfa>
 80090ac:	2b50      	cmp	r3, #80	; 0x50
 80090ae:	d873      	bhi.n	8009198 <HAL_TIM_ConfigClockSource+0x16c>
 80090b0:	2b40      	cmp	r3, #64	; 0x40
 80090b2:	d058      	beq.n	8009166 <HAL_TIM_ConfigClockSource+0x13a>
 80090b4:	2b40      	cmp	r3, #64	; 0x40
 80090b6:	d86f      	bhi.n	8009198 <HAL_TIM_ConfigClockSource+0x16c>
 80090b8:	2b30      	cmp	r3, #48	; 0x30
 80090ba:	d064      	beq.n	8009186 <HAL_TIM_ConfigClockSource+0x15a>
 80090bc:	2b30      	cmp	r3, #48	; 0x30
 80090be:	d86b      	bhi.n	8009198 <HAL_TIM_ConfigClockSource+0x16c>
 80090c0:	2b20      	cmp	r3, #32
 80090c2:	d060      	beq.n	8009186 <HAL_TIM_ConfigClockSource+0x15a>
 80090c4:	2b20      	cmp	r3, #32
 80090c6:	d867      	bhi.n	8009198 <HAL_TIM_ConfigClockSource+0x16c>
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d05c      	beq.n	8009186 <HAL_TIM_ConfigClockSource+0x15a>
 80090cc:	2b10      	cmp	r3, #16
 80090ce:	d05a      	beq.n	8009186 <HAL_TIM_ConfigClockSource+0x15a>
 80090d0:	e062      	b.n	8009198 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090e2:	f000 fb3f 	bl	8009764 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	609a      	str	r2, [r3, #8]
      break;
 80090fe:	e04f      	b.n	80091a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009110:	f000 fb28 	bl	8009764 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	689a      	ldr	r2, [r3, #8]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009122:	609a      	str	r2, [r3, #8]
      break;
 8009124:	e03c      	b.n	80091a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009132:	461a      	mov	r2, r3
 8009134:	f000 fa9c 	bl	8009670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2150      	movs	r1, #80	; 0x50
 800913e:	4618      	mov	r0, r3
 8009140:	f000 faf5 	bl	800972e <TIM_ITRx_SetConfig>
      break;
 8009144:	e02c      	b.n	80091a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009152:	461a      	mov	r2, r3
 8009154:	f000 fabb 	bl	80096ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2160      	movs	r1, #96	; 0x60
 800915e:	4618      	mov	r0, r3
 8009160:	f000 fae5 	bl	800972e <TIM_ITRx_SetConfig>
      break;
 8009164:	e01c      	b.n	80091a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009172:	461a      	mov	r2, r3
 8009174:	f000 fa7c 	bl	8009670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2140      	movs	r1, #64	; 0x40
 800917e:	4618      	mov	r0, r3
 8009180:	f000 fad5 	bl	800972e <TIM_ITRx_SetConfig>
      break;
 8009184:	e00c      	b.n	80091a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4619      	mov	r1, r3
 8009190:	4610      	mov	r0, r2
 8009192:	f000 facc 	bl	800972e <TIM_ITRx_SetConfig>
      break;
 8009196:	e003      	b.n	80091a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	73fb      	strb	r3, [r7, #15]
      break;
 800919c:	e000      	b.n	80091a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800919e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	fffeff88 	.word	0xfffeff88

080091c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	460b      	mov	r3, r1
 8009292:	607a      	str	r2, [r7, #4]
 8009294:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e13e      	b.n	8009522 <HAL_TIM_RegisterCallback+0x29a>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d101      	bne.n	80092b2 <HAL_TIM_RegisterCallback+0x2a>
 80092ae:	2302      	movs	r3, #2
 80092b0:	e137      	b.n	8009522 <HAL_TIM_RegisterCallback+0x29a>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	f040 80c2 	bne.w	800944c <HAL_TIM_RegisterCallback+0x1c4>
  {
    switch (CallbackID)
 80092c8:	7afb      	ldrb	r3, [r7, #11]
 80092ca:	2b1b      	cmp	r3, #27
 80092cc:	f200 80bb 	bhi.w	8009446 <HAL_TIM_RegisterCallback+0x1be>
 80092d0:	a201      	add	r2, pc, #4	; (adr r2, 80092d8 <HAL_TIM_RegisterCallback+0x50>)
 80092d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d6:	bf00      	nop
 80092d8:	08009349 	.word	0x08009349
 80092dc:	08009351 	.word	0x08009351
 80092e0:	08009359 	.word	0x08009359
 80092e4:	08009361 	.word	0x08009361
 80092e8:	08009369 	.word	0x08009369
 80092ec:	08009371 	.word	0x08009371
 80092f0:	08009379 	.word	0x08009379
 80092f4:	08009381 	.word	0x08009381
 80092f8:	08009389 	.word	0x08009389
 80092fc:	08009391 	.word	0x08009391
 8009300:	08009399 	.word	0x08009399
 8009304:	080093a1 	.word	0x080093a1
 8009308:	080093a9 	.word	0x080093a9
 800930c:	080093b1 	.word	0x080093b1
 8009310:	080093bb 	.word	0x080093bb
 8009314:	080093c5 	.word	0x080093c5
 8009318:	080093cf 	.word	0x080093cf
 800931c:	080093d9 	.word	0x080093d9
 8009320:	080093e3 	.word	0x080093e3
 8009324:	080093ed 	.word	0x080093ed
 8009328:	080093f7 	.word	0x080093f7
 800932c:	08009401 	.word	0x08009401
 8009330:	0800940b 	.word	0x0800940b
 8009334:	08009415 	.word	0x08009415
 8009338:	0800941f 	.word	0x0800941f
 800933c:	08009429 	.word	0x08009429
 8009340:	08009433 	.word	0x08009433
 8009344:	0800943d 	.word	0x0800943d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800934e:	e0e3      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009356:	e0df      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800935e:	e0db      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009366:	e0d7      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800936e:	e0d3      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009376:	e0cf      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800937e:	e0cb      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009386:	e0c7      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800938e:	e0c3      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009396:	e0bf      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800939e:	e0bb      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80093a6:	e0b7      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80093ae:	e0b3      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 80093b8:	e0ae      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80093c2:	e0a9      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80093cc:	e0a4      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80093d6:	e09f      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80093e0:	e09a      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80093ea:	e095      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80093f4:	e090      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80093fe:	e08b      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8009408:	e086      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8009412:	e081      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800941c:	e07c      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8009426:	e077      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009430:	e072      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 800943a:	e06d      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8009444:	e068      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	75fb      	strb	r3, [r7, #23]
        break;
 800944a:	e065      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	d15d      	bne.n	8009514 <HAL_TIM_RegisterCallback+0x28c>
  {
    switch (CallbackID)
 8009458:	7afb      	ldrb	r3, [r7, #11]
 800945a:	2b0d      	cmp	r3, #13
 800945c:	d857      	bhi.n	800950e <HAL_TIM_RegisterCallback+0x286>
 800945e:	a201      	add	r2, pc, #4	; (adr r2, 8009464 <HAL_TIM_RegisterCallback+0x1dc>)
 8009460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009464:	0800949d 	.word	0x0800949d
 8009468:	080094a5 	.word	0x080094a5
 800946c:	080094ad 	.word	0x080094ad
 8009470:	080094b5 	.word	0x080094b5
 8009474:	080094bd 	.word	0x080094bd
 8009478:	080094c5 	.word	0x080094c5
 800947c:	080094cd 	.word	0x080094cd
 8009480:	080094d5 	.word	0x080094d5
 8009484:	080094dd 	.word	0x080094dd
 8009488:	080094e5 	.word	0x080094e5
 800948c:	080094ed 	.word	0x080094ed
 8009490:	080094f5 	.word	0x080094f5
 8009494:	080094fd 	.word	0x080094fd
 8009498:	08009505 	.word	0x08009505
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80094a2:	e039      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80094aa:	e035      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80094b2:	e031      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80094ba:	e02d      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80094c2:	e029      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80094ca:	e025      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80094d2:	e021      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80094da:	e01d      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80094e2:	e019      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80094ea:	e015      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80094f2:	e011      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80094fa:	e00d      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009502:	e009      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800950c:	e004      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	75fb      	strb	r3, [r7, #23]
        break;
 8009512:	e001      	b.n	8009518 <HAL_TIM_RegisterCallback+0x290>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009520:	7dfb      	ldrb	r3, [r7, #23]
}
 8009522:	4618      	mov	r0, r3
 8009524:	371c      	adds	r7, #28
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop

08009530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a40      	ldr	r2, [pc, #256]	; (8009644 <TIM_Base_SetConfig+0x114>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d013      	beq.n	8009570 <TIM_Base_SetConfig+0x40>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800954e:	d00f      	beq.n	8009570 <TIM_Base_SetConfig+0x40>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a3d      	ldr	r2, [pc, #244]	; (8009648 <TIM_Base_SetConfig+0x118>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d00b      	beq.n	8009570 <TIM_Base_SetConfig+0x40>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a3c      	ldr	r2, [pc, #240]	; (800964c <TIM_Base_SetConfig+0x11c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d007      	beq.n	8009570 <TIM_Base_SetConfig+0x40>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a3b      	ldr	r2, [pc, #236]	; (8009650 <TIM_Base_SetConfig+0x120>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d003      	beq.n	8009570 <TIM_Base_SetConfig+0x40>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a3a      	ldr	r2, [pc, #232]	; (8009654 <TIM_Base_SetConfig+0x124>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d108      	bne.n	8009582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	4313      	orrs	r3, r2
 8009580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a2f      	ldr	r2, [pc, #188]	; (8009644 <TIM_Base_SetConfig+0x114>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d02b      	beq.n	80095e2 <TIM_Base_SetConfig+0xb2>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009590:	d027      	beq.n	80095e2 <TIM_Base_SetConfig+0xb2>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a2c      	ldr	r2, [pc, #176]	; (8009648 <TIM_Base_SetConfig+0x118>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d023      	beq.n	80095e2 <TIM_Base_SetConfig+0xb2>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a2b      	ldr	r2, [pc, #172]	; (800964c <TIM_Base_SetConfig+0x11c>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d01f      	beq.n	80095e2 <TIM_Base_SetConfig+0xb2>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a2a      	ldr	r2, [pc, #168]	; (8009650 <TIM_Base_SetConfig+0x120>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d01b      	beq.n	80095e2 <TIM_Base_SetConfig+0xb2>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a29      	ldr	r2, [pc, #164]	; (8009654 <TIM_Base_SetConfig+0x124>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d017      	beq.n	80095e2 <TIM_Base_SetConfig+0xb2>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a28      	ldr	r2, [pc, #160]	; (8009658 <TIM_Base_SetConfig+0x128>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d013      	beq.n	80095e2 <TIM_Base_SetConfig+0xb2>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a27      	ldr	r2, [pc, #156]	; (800965c <TIM_Base_SetConfig+0x12c>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d00f      	beq.n	80095e2 <TIM_Base_SetConfig+0xb2>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a26      	ldr	r2, [pc, #152]	; (8009660 <TIM_Base_SetConfig+0x130>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d00b      	beq.n	80095e2 <TIM_Base_SetConfig+0xb2>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a25      	ldr	r2, [pc, #148]	; (8009664 <TIM_Base_SetConfig+0x134>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d007      	beq.n	80095e2 <TIM_Base_SetConfig+0xb2>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a24      	ldr	r2, [pc, #144]	; (8009668 <TIM_Base_SetConfig+0x138>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d003      	beq.n	80095e2 <TIM_Base_SetConfig+0xb2>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a23      	ldr	r2, [pc, #140]	; (800966c <TIM_Base_SetConfig+0x13c>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d108      	bne.n	80095f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	4313      	orrs	r3, r2
 8009600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a0a      	ldr	r2, [pc, #40]	; (8009644 <TIM_Base_SetConfig+0x114>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d003      	beq.n	8009628 <TIM_Base_SetConfig+0xf8>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a0c      	ldr	r2, [pc, #48]	; (8009654 <TIM_Base_SetConfig+0x124>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d103      	bne.n	8009630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	691a      	ldr	r2, [r3, #16]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	615a      	str	r2, [r3, #20]
}
 8009636:	bf00      	nop
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	40010000 	.word	0x40010000
 8009648:	40000400 	.word	0x40000400
 800964c:	40000800 	.word	0x40000800
 8009650:	40000c00 	.word	0x40000c00
 8009654:	40010400 	.word	0x40010400
 8009658:	40014000 	.word	0x40014000
 800965c:	40014400 	.word	0x40014400
 8009660:	40014800 	.word	0x40014800
 8009664:	40001800 	.word	0x40001800
 8009668:	40001c00 	.word	0x40001c00
 800966c:	40002000 	.word	0x40002000

08009670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009670:	b480      	push	{r7}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	f023 0201 	bic.w	r2, r3, #1
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800969a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	011b      	lsls	r3, r3, #4
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f023 030a 	bic.w	r3, r3, #10
 80096ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	621a      	str	r2, [r3, #32]
}
 80096c2:	bf00      	nop
 80096c4:	371c      	adds	r7, #28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096ce:	b480      	push	{r7}
 80096d0:	b087      	sub	sp, #28
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	60f8      	str	r0, [r7, #12]
 80096d6:	60b9      	str	r1, [r7, #8]
 80096d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	f023 0210 	bic.w	r2, r3, #16
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	031b      	lsls	r3, r3, #12
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	4313      	orrs	r3, r2
 8009702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800970a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	011b      	lsls	r3, r3, #4
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	4313      	orrs	r3, r2
 8009714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	697a      	ldr	r2, [r7, #20]
 800971a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	621a      	str	r2, [r3, #32]
}
 8009722:	bf00      	nop
 8009724:	371c      	adds	r7, #28
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800972e:	b480      	push	{r7}
 8009730:	b085      	sub	sp, #20
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	4313      	orrs	r3, r2
 800974c:	f043 0307 	orr.w	r3, r3, #7
 8009750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	609a      	str	r2, [r3, #8]
}
 8009758:	bf00      	nop
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
 8009770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800977e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	021a      	lsls	r2, r3, #8
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	431a      	orrs	r2, r3
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	4313      	orrs	r3, r2
 800978c:	697a      	ldr	r2, [r7, #20]
 800978e:	4313      	orrs	r3, r2
 8009790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	609a      	str	r2, [r3, #8]
}
 8009798:	bf00      	nop
 800979a:	371c      	adds	r7, #28
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a1e      	ldr	r2, [pc, #120]	; (8009828 <TIM_ResetCallback+0x84>)
 80097b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a1d      	ldr	r2, [pc, #116]	; (800982c <TIM_ResetCallback+0x88>)
 80097b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a1c      	ldr	r2, [pc, #112]	; (8009830 <TIM_ResetCallback+0x8c>)
 80097c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a1b      	ldr	r2, [pc, #108]	; (8009834 <TIM_ResetCallback+0x90>)
 80097c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a1a      	ldr	r2, [pc, #104]	; (8009838 <TIM_ResetCallback+0x94>)
 80097d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a19      	ldr	r2, [pc, #100]	; (800983c <TIM_ResetCallback+0x98>)
 80097d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a18      	ldr	r2, [pc, #96]	; (8009840 <TIM_ResetCallback+0x9c>)
 80097e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a17      	ldr	r2, [pc, #92]	; (8009844 <TIM_ResetCallback+0xa0>)
 80097e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a16      	ldr	r2, [pc, #88]	; (8009848 <TIM_ResetCallback+0xa4>)
 80097f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a15      	ldr	r2, [pc, #84]	; (800984c <TIM_ResetCallback+0xa8>)
 80097f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a14      	ldr	r2, [pc, #80]	; (8009850 <TIM_ResetCallback+0xac>)
 8009800:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a13      	ldr	r2, [pc, #76]	; (8009854 <TIM_ResetCallback+0xb0>)
 8009808:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a12      	ldr	r2, [pc, #72]	; (8009858 <TIM_ResetCallback+0xb4>)
 8009810:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a11      	ldr	r2, [pc, #68]	; (800985c <TIM_ResetCallback+0xb8>)
 8009818:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr
 8009828:	080091c1 	.word	0x080091c1
 800982c:	080091d5 	.word	0x080091d5
 8009830:	0800924d 	.word	0x0800924d
 8009834:	08009261 	.word	0x08009261
 8009838:	080091fd 	.word	0x080091fd
 800983c:	08009211 	.word	0x08009211
 8009840:	080091e9 	.word	0x080091e9
 8009844:	08009225 	.word	0x08009225
 8009848:	08009239 	.word	0x08009239
 800984c:	08009275 	.word	0x08009275
 8009850:	0800997d 	.word	0x0800997d
 8009854:	08009991 	.word	0x08009991
 8009858:	080099a5 	.word	0x080099a5
 800985c:	080099b9 	.word	0x080099b9

08009860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009870:	2b01      	cmp	r3, #1
 8009872:	d101      	bne.n	8009878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009874:	2302      	movs	r3, #2
 8009876:	e06d      	b.n	8009954 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2202      	movs	r2, #2
 8009884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a30      	ldr	r2, [pc, #192]	; (8009960 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d004      	beq.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a2f      	ldr	r2, [pc, #188]	; (8009964 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d108      	bne.n	80098be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80098b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a20      	ldr	r2, [pc, #128]	; (8009960 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d022      	beq.n	8009928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ea:	d01d      	beq.n	8009928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a1d      	ldr	r2, [pc, #116]	; (8009968 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d018      	beq.n	8009928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a1c      	ldr	r2, [pc, #112]	; (800996c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d013      	beq.n	8009928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a1a      	ldr	r2, [pc, #104]	; (8009970 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d00e      	beq.n	8009928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a15      	ldr	r2, [pc, #84]	; (8009964 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d009      	beq.n	8009928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a16      	ldr	r2, [pc, #88]	; (8009974 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d004      	beq.n	8009928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a15      	ldr	r2, [pc, #84]	; (8009978 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d10c      	bne.n	8009942 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800992e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	4313      	orrs	r3, r2
 8009938:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	40010000 	.word	0x40010000
 8009964:	40010400 	.word	0x40010400
 8009968:	40000400 	.word	0x40000400
 800996c:	40000800 	.word	0x40000800
 8009970:	40000c00 	.word	0x40000c00
 8009974:	40014000 	.word	0x40014000
 8009978:	40001800 	.word	0x40001800

0800997c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <_ZdlPvj>:
 80099cc:	f000 b811 	b.w	80099f2 <_ZdlPv>

080099d0 <_Znwj>:
 80099d0:	2801      	cmp	r0, #1
 80099d2:	bf38      	it	cc
 80099d4:	2001      	movcc	r0, #1
 80099d6:	b510      	push	{r4, lr}
 80099d8:	4604      	mov	r4, r0
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 fa90 	bl	8009f00 <malloc>
 80099e0:	b100      	cbz	r0, 80099e4 <_Znwj+0x14>
 80099e2:	bd10      	pop	{r4, pc}
 80099e4:	f000 f808 	bl	80099f8 <_ZSt15get_new_handlerv>
 80099e8:	b908      	cbnz	r0, 80099ee <_Znwj+0x1e>
 80099ea:	f000 fa82 	bl	8009ef2 <abort>
 80099ee:	4780      	blx	r0
 80099f0:	e7f3      	b.n	80099da <_Znwj+0xa>

080099f2 <_ZdlPv>:
 80099f2:	f000 ba8d 	b.w	8009f10 <free>
	...

080099f8 <_ZSt15get_new_handlerv>:
 80099f8:	4b02      	ldr	r3, [pc, #8]	; (8009a04 <_ZSt15get_new_handlerv+0xc>)
 80099fa:	6818      	ldr	r0, [r3, #0]
 80099fc:	f3bf 8f5b 	dmb	ish
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	20000468 	.word	0x20000468

08009a08 <atan2>:
 8009a08:	f000 b802 	b.w	8009a10 <__ieee754_atan2>
 8009a0c:	0000      	movs	r0, r0
	...

08009a10 <__ieee754_atan2>:
 8009a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a14:	ec57 6b11 	vmov	r6, r7, d1
 8009a18:	4273      	negs	r3, r6
 8009a1a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009b98 <__ieee754_atan2+0x188>
 8009a1e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009a22:	4333      	orrs	r3, r6
 8009a24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009a28:	4543      	cmp	r3, r8
 8009a2a:	ec51 0b10 	vmov	r0, r1, d0
 8009a2e:	ee11 5a10 	vmov	r5, s2
 8009a32:	d80a      	bhi.n	8009a4a <__ieee754_atan2+0x3a>
 8009a34:	4244      	negs	r4, r0
 8009a36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a3a:	4304      	orrs	r4, r0
 8009a3c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009a40:	4544      	cmp	r4, r8
 8009a42:	ee10 9a10 	vmov	r9, s0
 8009a46:	468e      	mov	lr, r1
 8009a48:	d907      	bls.n	8009a5a <__ieee754_atan2+0x4a>
 8009a4a:	4632      	mov	r2, r6
 8009a4c:	463b      	mov	r3, r7
 8009a4e:	f7f6 fbe1 	bl	8000214 <__adddf3>
 8009a52:	ec41 0b10 	vmov	d0, r0, r1
 8009a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a5a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009a5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009a62:	4334      	orrs	r4, r6
 8009a64:	d103      	bne.n	8009a6e <__ieee754_atan2+0x5e>
 8009a66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a6a:	f000 b899 	b.w	8009ba0 <atan>
 8009a6e:	17bc      	asrs	r4, r7, #30
 8009a70:	f004 0402 	and.w	r4, r4, #2
 8009a74:	ea53 0909 	orrs.w	r9, r3, r9
 8009a78:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009a7c:	d107      	bne.n	8009a8e <__ieee754_atan2+0x7e>
 8009a7e:	2c02      	cmp	r4, #2
 8009a80:	d05f      	beq.n	8009b42 <__ieee754_atan2+0x132>
 8009a82:	2c03      	cmp	r4, #3
 8009a84:	d1e5      	bne.n	8009a52 <__ieee754_atan2+0x42>
 8009a86:	a140      	add	r1, pc, #256	; (adr r1, 8009b88 <__ieee754_atan2+0x178>)
 8009a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a8c:	e7e1      	b.n	8009a52 <__ieee754_atan2+0x42>
 8009a8e:	4315      	orrs	r5, r2
 8009a90:	d106      	bne.n	8009aa0 <__ieee754_atan2+0x90>
 8009a92:	f1be 0f00 	cmp.w	lr, #0
 8009a96:	da5f      	bge.n	8009b58 <__ieee754_atan2+0x148>
 8009a98:	a13d      	add	r1, pc, #244	; (adr r1, 8009b90 <__ieee754_atan2+0x180>)
 8009a9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a9e:	e7d8      	b.n	8009a52 <__ieee754_atan2+0x42>
 8009aa0:	4542      	cmp	r2, r8
 8009aa2:	d10f      	bne.n	8009ac4 <__ieee754_atan2+0xb4>
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009aaa:	d107      	bne.n	8009abc <__ieee754_atan2+0xac>
 8009aac:	2c02      	cmp	r4, #2
 8009aae:	d84c      	bhi.n	8009b4a <__ieee754_atan2+0x13a>
 8009ab0:	4b33      	ldr	r3, [pc, #204]	; (8009b80 <__ieee754_atan2+0x170>)
 8009ab2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ab6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009aba:	e7ca      	b.n	8009a52 <__ieee754_atan2+0x42>
 8009abc:	2c02      	cmp	r4, #2
 8009abe:	d848      	bhi.n	8009b52 <__ieee754_atan2+0x142>
 8009ac0:	4b30      	ldr	r3, [pc, #192]	; (8009b84 <__ieee754_atan2+0x174>)
 8009ac2:	e7f6      	b.n	8009ab2 <__ieee754_atan2+0xa2>
 8009ac4:	4543      	cmp	r3, r8
 8009ac6:	d0e4      	beq.n	8009a92 <__ieee754_atan2+0x82>
 8009ac8:	1a9b      	subs	r3, r3, r2
 8009aca:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009ace:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009ad2:	da1e      	bge.n	8009b12 <__ieee754_atan2+0x102>
 8009ad4:	2f00      	cmp	r7, #0
 8009ad6:	da01      	bge.n	8009adc <__ieee754_atan2+0xcc>
 8009ad8:	323c      	adds	r2, #60	; 0x3c
 8009ada:	db1e      	blt.n	8009b1a <__ieee754_atan2+0x10a>
 8009adc:	4632      	mov	r2, r6
 8009ade:	463b      	mov	r3, r7
 8009ae0:	f7f6 fe78 	bl	80007d4 <__aeabi_ddiv>
 8009ae4:	ec41 0b10 	vmov	d0, r0, r1
 8009ae8:	f000 f9fa 	bl	8009ee0 <fabs>
 8009aec:	f000 f858 	bl	8009ba0 <atan>
 8009af0:	ec51 0b10 	vmov	r0, r1, d0
 8009af4:	2c01      	cmp	r4, #1
 8009af6:	d013      	beq.n	8009b20 <__ieee754_atan2+0x110>
 8009af8:	2c02      	cmp	r4, #2
 8009afa:	d015      	beq.n	8009b28 <__ieee754_atan2+0x118>
 8009afc:	2c00      	cmp	r4, #0
 8009afe:	d0a8      	beq.n	8009a52 <__ieee754_atan2+0x42>
 8009b00:	a317      	add	r3, pc, #92	; (adr r3, 8009b60 <__ieee754_atan2+0x150>)
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	f7f6 fb83 	bl	8000210 <__aeabi_dsub>
 8009b0a:	a317      	add	r3, pc, #92	; (adr r3, 8009b68 <__ieee754_atan2+0x158>)
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	e014      	b.n	8009b3c <__ieee754_atan2+0x12c>
 8009b12:	a117      	add	r1, pc, #92	; (adr r1, 8009b70 <__ieee754_atan2+0x160>)
 8009b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b18:	e7ec      	b.n	8009af4 <__ieee754_atan2+0xe4>
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	e7e9      	b.n	8009af4 <__ieee754_atan2+0xe4>
 8009b20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b24:	4619      	mov	r1, r3
 8009b26:	e794      	b.n	8009a52 <__ieee754_atan2+0x42>
 8009b28:	a30d      	add	r3, pc, #52	; (adr r3, 8009b60 <__ieee754_atan2+0x150>)
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	f7f6 fb6f 	bl	8000210 <__aeabi_dsub>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	a10c      	add	r1, pc, #48	; (adr r1, 8009b68 <__ieee754_atan2+0x158>)
 8009b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b3c:	f7f6 fb68 	bl	8000210 <__aeabi_dsub>
 8009b40:	e787      	b.n	8009a52 <__ieee754_atan2+0x42>
 8009b42:	a109      	add	r1, pc, #36	; (adr r1, 8009b68 <__ieee754_atan2+0x158>)
 8009b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b48:	e783      	b.n	8009a52 <__ieee754_atan2+0x42>
 8009b4a:	a10b      	add	r1, pc, #44	; (adr r1, 8009b78 <__ieee754_atan2+0x168>)
 8009b4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b50:	e77f      	b.n	8009a52 <__ieee754_atan2+0x42>
 8009b52:	2000      	movs	r0, #0
 8009b54:	2100      	movs	r1, #0
 8009b56:	e77c      	b.n	8009a52 <__ieee754_atan2+0x42>
 8009b58:	a105      	add	r1, pc, #20	; (adr r1, 8009b70 <__ieee754_atan2+0x160>)
 8009b5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b5e:	e778      	b.n	8009a52 <__ieee754_atan2+0x42>
 8009b60:	33145c07 	.word	0x33145c07
 8009b64:	3ca1a626 	.word	0x3ca1a626
 8009b68:	54442d18 	.word	0x54442d18
 8009b6c:	400921fb 	.word	0x400921fb
 8009b70:	54442d18 	.word	0x54442d18
 8009b74:	3ff921fb 	.word	0x3ff921fb
 8009b78:	54442d18 	.word	0x54442d18
 8009b7c:	3fe921fb 	.word	0x3fe921fb
 8009b80:	0800a348 	.word	0x0800a348
 8009b84:	0800a360 	.word	0x0800a360
 8009b88:	54442d18 	.word	0x54442d18
 8009b8c:	c00921fb 	.word	0xc00921fb
 8009b90:	54442d18 	.word	0x54442d18
 8009b94:	bff921fb 	.word	0xbff921fb
 8009b98:	7ff00000 	.word	0x7ff00000
 8009b9c:	00000000 	.word	0x00000000

08009ba0 <atan>:
 8009ba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba4:	ec55 4b10 	vmov	r4, r5, d0
 8009ba8:	4bc3      	ldr	r3, [pc, #780]	; (8009eb8 <atan+0x318>)
 8009baa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009bae:	429e      	cmp	r6, r3
 8009bb0:	46ab      	mov	fp, r5
 8009bb2:	dd18      	ble.n	8009be6 <atan+0x46>
 8009bb4:	4bc1      	ldr	r3, [pc, #772]	; (8009ebc <atan+0x31c>)
 8009bb6:	429e      	cmp	r6, r3
 8009bb8:	dc01      	bgt.n	8009bbe <atan+0x1e>
 8009bba:	d109      	bne.n	8009bd0 <atan+0x30>
 8009bbc:	b144      	cbz	r4, 8009bd0 <atan+0x30>
 8009bbe:	4622      	mov	r2, r4
 8009bc0:	462b      	mov	r3, r5
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	f7f6 fb25 	bl	8000214 <__adddf3>
 8009bca:	4604      	mov	r4, r0
 8009bcc:	460d      	mov	r5, r1
 8009bce:	e006      	b.n	8009bde <atan+0x3e>
 8009bd0:	f1bb 0f00 	cmp.w	fp, #0
 8009bd4:	f300 8131 	bgt.w	8009e3a <atan+0x29a>
 8009bd8:	a59b      	add	r5, pc, #620	; (adr r5, 8009e48 <atan+0x2a8>)
 8009bda:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009bde:	ec45 4b10 	vmov	d0, r4, r5
 8009be2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be6:	4bb6      	ldr	r3, [pc, #728]	; (8009ec0 <atan+0x320>)
 8009be8:	429e      	cmp	r6, r3
 8009bea:	dc14      	bgt.n	8009c16 <atan+0x76>
 8009bec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009bf0:	429e      	cmp	r6, r3
 8009bf2:	dc0d      	bgt.n	8009c10 <atan+0x70>
 8009bf4:	a396      	add	r3, pc, #600	; (adr r3, 8009e50 <atan+0x2b0>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	ee10 0a10 	vmov	r0, s0
 8009bfe:	4629      	mov	r1, r5
 8009c00:	f7f6 fb08 	bl	8000214 <__adddf3>
 8009c04:	4baf      	ldr	r3, [pc, #700]	; (8009ec4 <atan+0x324>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	f7f6 ff4a 	bl	8000aa0 <__aeabi_dcmpgt>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d1e6      	bne.n	8009bde <atan+0x3e>
 8009c10:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009c14:	e02b      	b.n	8009c6e <atan+0xce>
 8009c16:	f000 f963 	bl	8009ee0 <fabs>
 8009c1a:	4bab      	ldr	r3, [pc, #684]	; (8009ec8 <atan+0x328>)
 8009c1c:	429e      	cmp	r6, r3
 8009c1e:	ec55 4b10 	vmov	r4, r5, d0
 8009c22:	f300 80bf 	bgt.w	8009da4 <atan+0x204>
 8009c26:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009c2a:	429e      	cmp	r6, r3
 8009c2c:	f300 80a0 	bgt.w	8009d70 <atan+0x1d0>
 8009c30:	ee10 2a10 	vmov	r2, s0
 8009c34:	ee10 0a10 	vmov	r0, s0
 8009c38:	462b      	mov	r3, r5
 8009c3a:	4629      	mov	r1, r5
 8009c3c:	f7f6 faea 	bl	8000214 <__adddf3>
 8009c40:	4ba0      	ldr	r3, [pc, #640]	; (8009ec4 <atan+0x324>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	f7f6 fae4 	bl	8000210 <__aeabi_dsub>
 8009c48:	2200      	movs	r2, #0
 8009c4a:	4606      	mov	r6, r0
 8009c4c:	460f      	mov	r7, r1
 8009c4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c52:	4620      	mov	r0, r4
 8009c54:	4629      	mov	r1, r5
 8009c56:	f7f6 fadd 	bl	8000214 <__adddf3>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4630      	mov	r0, r6
 8009c60:	4639      	mov	r1, r7
 8009c62:	f7f6 fdb7 	bl	80007d4 <__aeabi_ddiv>
 8009c66:	f04f 0a00 	mov.w	sl, #0
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	460d      	mov	r5, r1
 8009c6e:	4622      	mov	r2, r4
 8009c70:	462b      	mov	r3, r5
 8009c72:	4620      	mov	r0, r4
 8009c74:	4629      	mov	r1, r5
 8009c76:	f7f6 fc83 	bl	8000580 <__aeabi_dmul>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4680      	mov	r8, r0
 8009c80:	4689      	mov	r9, r1
 8009c82:	f7f6 fc7d 	bl	8000580 <__aeabi_dmul>
 8009c86:	a374      	add	r3, pc, #464	; (adr r3, 8009e58 <atan+0x2b8>)
 8009c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	460f      	mov	r7, r1
 8009c90:	f7f6 fc76 	bl	8000580 <__aeabi_dmul>
 8009c94:	a372      	add	r3, pc, #456	; (adr r3, 8009e60 <atan+0x2c0>)
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	f7f6 fabb 	bl	8000214 <__adddf3>
 8009c9e:	4632      	mov	r2, r6
 8009ca0:	463b      	mov	r3, r7
 8009ca2:	f7f6 fc6d 	bl	8000580 <__aeabi_dmul>
 8009ca6:	a370      	add	r3, pc, #448	; (adr r3, 8009e68 <atan+0x2c8>)
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	f7f6 fab2 	bl	8000214 <__adddf3>
 8009cb0:	4632      	mov	r2, r6
 8009cb2:	463b      	mov	r3, r7
 8009cb4:	f7f6 fc64 	bl	8000580 <__aeabi_dmul>
 8009cb8:	a36d      	add	r3, pc, #436	; (adr r3, 8009e70 <atan+0x2d0>)
 8009cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbe:	f7f6 faa9 	bl	8000214 <__adddf3>
 8009cc2:	4632      	mov	r2, r6
 8009cc4:	463b      	mov	r3, r7
 8009cc6:	f7f6 fc5b 	bl	8000580 <__aeabi_dmul>
 8009cca:	a36b      	add	r3, pc, #428	; (adr r3, 8009e78 <atan+0x2d8>)
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	f7f6 faa0 	bl	8000214 <__adddf3>
 8009cd4:	4632      	mov	r2, r6
 8009cd6:	463b      	mov	r3, r7
 8009cd8:	f7f6 fc52 	bl	8000580 <__aeabi_dmul>
 8009cdc:	a368      	add	r3, pc, #416	; (adr r3, 8009e80 <atan+0x2e0>)
 8009cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce2:	f7f6 fa97 	bl	8000214 <__adddf3>
 8009ce6:	4642      	mov	r2, r8
 8009ce8:	464b      	mov	r3, r9
 8009cea:	f7f6 fc49 	bl	8000580 <__aeabi_dmul>
 8009cee:	a366      	add	r3, pc, #408	; (adr r3, 8009e88 <atan+0x2e8>)
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	4680      	mov	r8, r0
 8009cf6:	4689      	mov	r9, r1
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	4639      	mov	r1, r7
 8009cfc:	f7f6 fc40 	bl	8000580 <__aeabi_dmul>
 8009d00:	a363      	add	r3, pc, #396	; (adr r3, 8009e90 <atan+0x2f0>)
 8009d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d06:	f7f6 fa83 	bl	8000210 <__aeabi_dsub>
 8009d0a:	4632      	mov	r2, r6
 8009d0c:	463b      	mov	r3, r7
 8009d0e:	f7f6 fc37 	bl	8000580 <__aeabi_dmul>
 8009d12:	a361      	add	r3, pc, #388	; (adr r3, 8009e98 <atan+0x2f8>)
 8009d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d18:	f7f6 fa7a 	bl	8000210 <__aeabi_dsub>
 8009d1c:	4632      	mov	r2, r6
 8009d1e:	463b      	mov	r3, r7
 8009d20:	f7f6 fc2e 	bl	8000580 <__aeabi_dmul>
 8009d24:	a35e      	add	r3, pc, #376	; (adr r3, 8009ea0 <atan+0x300>)
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	f7f6 fa71 	bl	8000210 <__aeabi_dsub>
 8009d2e:	4632      	mov	r2, r6
 8009d30:	463b      	mov	r3, r7
 8009d32:	f7f6 fc25 	bl	8000580 <__aeabi_dmul>
 8009d36:	a35c      	add	r3, pc, #368	; (adr r3, 8009ea8 <atan+0x308>)
 8009d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3c:	f7f6 fa68 	bl	8000210 <__aeabi_dsub>
 8009d40:	4632      	mov	r2, r6
 8009d42:	463b      	mov	r3, r7
 8009d44:	f7f6 fc1c 	bl	8000580 <__aeabi_dmul>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4640      	mov	r0, r8
 8009d4e:	4649      	mov	r1, r9
 8009d50:	f7f6 fa60 	bl	8000214 <__adddf3>
 8009d54:	4622      	mov	r2, r4
 8009d56:	462b      	mov	r3, r5
 8009d58:	f7f6 fc12 	bl	8000580 <__aeabi_dmul>
 8009d5c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009d60:	4602      	mov	r2, r0
 8009d62:	460b      	mov	r3, r1
 8009d64:	d14b      	bne.n	8009dfe <atan+0x25e>
 8009d66:	4620      	mov	r0, r4
 8009d68:	4629      	mov	r1, r5
 8009d6a:	f7f6 fa51 	bl	8000210 <__aeabi_dsub>
 8009d6e:	e72c      	b.n	8009bca <atan+0x2a>
 8009d70:	ee10 0a10 	vmov	r0, s0
 8009d74:	4b53      	ldr	r3, [pc, #332]	; (8009ec4 <atan+0x324>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	4629      	mov	r1, r5
 8009d7a:	f7f6 fa49 	bl	8000210 <__aeabi_dsub>
 8009d7e:	4b51      	ldr	r3, [pc, #324]	; (8009ec4 <atan+0x324>)
 8009d80:	4606      	mov	r6, r0
 8009d82:	460f      	mov	r7, r1
 8009d84:	2200      	movs	r2, #0
 8009d86:	4620      	mov	r0, r4
 8009d88:	4629      	mov	r1, r5
 8009d8a:	f7f6 fa43 	bl	8000214 <__adddf3>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	460b      	mov	r3, r1
 8009d92:	4630      	mov	r0, r6
 8009d94:	4639      	mov	r1, r7
 8009d96:	f7f6 fd1d 	bl	80007d4 <__aeabi_ddiv>
 8009d9a:	f04f 0a01 	mov.w	sl, #1
 8009d9e:	4604      	mov	r4, r0
 8009da0:	460d      	mov	r5, r1
 8009da2:	e764      	b.n	8009c6e <atan+0xce>
 8009da4:	4b49      	ldr	r3, [pc, #292]	; (8009ecc <atan+0x32c>)
 8009da6:	429e      	cmp	r6, r3
 8009da8:	da1d      	bge.n	8009de6 <atan+0x246>
 8009daa:	ee10 0a10 	vmov	r0, s0
 8009dae:	4b48      	ldr	r3, [pc, #288]	; (8009ed0 <atan+0x330>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	4629      	mov	r1, r5
 8009db4:	f7f6 fa2c 	bl	8000210 <__aeabi_dsub>
 8009db8:	4b45      	ldr	r3, [pc, #276]	; (8009ed0 <atan+0x330>)
 8009dba:	4606      	mov	r6, r0
 8009dbc:	460f      	mov	r7, r1
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	f7f6 fbdc 	bl	8000580 <__aeabi_dmul>
 8009dc8:	4b3e      	ldr	r3, [pc, #248]	; (8009ec4 <atan+0x324>)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f7f6 fa22 	bl	8000214 <__adddf3>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	4639      	mov	r1, r7
 8009dd8:	f7f6 fcfc 	bl	80007d4 <__aeabi_ddiv>
 8009ddc:	f04f 0a02 	mov.w	sl, #2
 8009de0:	4604      	mov	r4, r0
 8009de2:	460d      	mov	r5, r1
 8009de4:	e743      	b.n	8009c6e <atan+0xce>
 8009de6:	462b      	mov	r3, r5
 8009de8:	ee10 2a10 	vmov	r2, s0
 8009dec:	4939      	ldr	r1, [pc, #228]	; (8009ed4 <atan+0x334>)
 8009dee:	2000      	movs	r0, #0
 8009df0:	f7f6 fcf0 	bl	80007d4 <__aeabi_ddiv>
 8009df4:	f04f 0a03 	mov.w	sl, #3
 8009df8:	4604      	mov	r4, r0
 8009dfa:	460d      	mov	r5, r1
 8009dfc:	e737      	b.n	8009c6e <atan+0xce>
 8009dfe:	4b36      	ldr	r3, [pc, #216]	; (8009ed8 <atan+0x338>)
 8009e00:	4e36      	ldr	r6, [pc, #216]	; (8009edc <atan+0x33c>)
 8009e02:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0a:	f7f6 fa01 	bl	8000210 <__aeabi_dsub>
 8009e0e:	4622      	mov	r2, r4
 8009e10:	462b      	mov	r3, r5
 8009e12:	f7f6 f9fd 	bl	8000210 <__aeabi_dsub>
 8009e16:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009e22:	f7f6 f9f5 	bl	8000210 <__aeabi_dsub>
 8009e26:	f1bb 0f00 	cmp.w	fp, #0
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	460d      	mov	r5, r1
 8009e2e:	f6bf aed6 	bge.w	8009bde <atan+0x3e>
 8009e32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e36:	461d      	mov	r5, r3
 8009e38:	e6d1      	b.n	8009bde <atan+0x3e>
 8009e3a:	a51d      	add	r5, pc, #116	; (adr r5, 8009eb0 <atan+0x310>)
 8009e3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e40:	e6cd      	b.n	8009bde <atan+0x3e>
 8009e42:	bf00      	nop
 8009e44:	f3af 8000 	nop.w
 8009e48:	54442d18 	.word	0x54442d18
 8009e4c:	bff921fb 	.word	0xbff921fb
 8009e50:	8800759c 	.word	0x8800759c
 8009e54:	7e37e43c 	.word	0x7e37e43c
 8009e58:	e322da11 	.word	0xe322da11
 8009e5c:	3f90ad3a 	.word	0x3f90ad3a
 8009e60:	24760deb 	.word	0x24760deb
 8009e64:	3fa97b4b 	.word	0x3fa97b4b
 8009e68:	a0d03d51 	.word	0xa0d03d51
 8009e6c:	3fb10d66 	.word	0x3fb10d66
 8009e70:	c54c206e 	.word	0xc54c206e
 8009e74:	3fb745cd 	.word	0x3fb745cd
 8009e78:	920083ff 	.word	0x920083ff
 8009e7c:	3fc24924 	.word	0x3fc24924
 8009e80:	5555550d 	.word	0x5555550d
 8009e84:	3fd55555 	.word	0x3fd55555
 8009e88:	2c6a6c2f 	.word	0x2c6a6c2f
 8009e8c:	bfa2b444 	.word	0xbfa2b444
 8009e90:	52defd9a 	.word	0x52defd9a
 8009e94:	3fadde2d 	.word	0x3fadde2d
 8009e98:	af749a6d 	.word	0xaf749a6d
 8009e9c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009ea0:	fe231671 	.word	0xfe231671
 8009ea4:	3fbc71c6 	.word	0x3fbc71c6
 8009ea8:	9998ebc4 	.word	0x9998ebc4
 8009eac:	3fc99999 	.word	0x3fc99999
 8009eb0:	54442d18 	.word	0x54442d18
 8009eb4:	3ff921fb 	.word	0x3ff921fb
 8009eb8:	440fffff 	.word	0x440fffff
 8009ebc:	7ff00000 	.word	0x7ff00000
 8009ec0:	3fdbffff 	.word	0x3fdbffff
 8009ec4:	3ff00000 	.word	0x3ff00000
 8009ec8:	3ff2ffff 	.word	0x3ff2ffff
 8009ecc:	40038000 	.word	0x40038000
 8009ed0:	3ff80000 	.word	0x3ff80000
 8009ed4:	bff00000 	.word	0xbff00000
 8009ed8:	0800a398 	.word	0x0800a398
 8009edc:	0800a378 	.word	0x0800a378

08009ee0 <fabs>:
 8009ee0:	ec51 0b10 	vmov	r0, r1, d0
 8009ee4:	ee10 2a10 	vmov	r2, s0
 8009ee8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009eec:	ec43 2b10 	vmov	d0, r2, r3
 8009ef0:	4770      	bx	lr

08009ef2 <abort>:
 8009ef2:	b508      	push	{r3, lr}
 8009ef4:	2006      	movs	r0, #6
 8009ef6:	f000 f8ef 	bl	800a0d8 <raise>
 8009efa:	2001      	movs	r0, #1
 8009efc:	f7fb f8fa 	bl	80050f4 <_exit>

08009f00 <malloc>:
 8009f00:	4b02      	ldr	r3, [pc, #8]	; (8009f0c <malloc+0xc>)
 8009f02:	4601      	mov	r1, r0
 8009f04:	6818      	ldr	r0, [r3, #0]
 8009f06:	f000 b82b 	b.w	8009f60 <_malloc_r>
 8009f0a:	bf00      	nop
 8009f0c:	200001dc 	.word	0x200001dc

08009f10 <free>:
 8009f10:	4b02      	ldr	r3, [pc, #8]	; (8009f1c <free+0xc>)
 8009f12:	4601      	mov	r1, r0
 8009f14:	6818      	ldr	r0, [r3, #0]
 8009f16:	f000 b945 	b.w	800a1a4 <_free_r>
 8009f1a:	bf00      	nop
 8009f1c:	200001dc 	.word	0x200001dc

08009f20 <sbrk_aligned>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	4e0e      	ldr	r6, [pc, #56]	; (8009f5c <sbrk_aligned+0x3c>)
 8009f24:	460c      	mov	r4, r1
 8009f26:	6831      	ldr	r1, [r6, #0]
 8009f28:	4605      	mov	r5, r0
 8009f2a:	b911      	cbnz	r1, 8009f32 <sbrk_aligned+0x12>
 8009f2c:	f000 f8f0 	bl	800a110 <_sbrk_r>
 8009f30:	6030      	str	r0, [r6, #0]
 8009f32:	4621      	mov	r1, r4
 8009f34:	4628      	mov	r0, r5
 8009f36:	f000 f8eb 	bl	800a110 <_sbrk_r>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	d00a      	beq.n	8009f54 <sbrk_aligned+0x34>
 8009f3e:	1cc4      	adds	r4, r0, #3
 8009f40:	f024 0403 	bic.w	r4, r4, #3
 8009f44:	42a0      	cmp	r0, r4
 8009f46:	d007      	beq.n	8009f58 <sbrk_aligned+0x38>
 8009f48:	1a21      	subs	r1, r4, r0
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f000 f8e0 	bl	800a110 <_sbrk_r>
 8009f50:	3001      	adds	r0, #1
 8009f52:	d101      	bne.n	8009f58 <sbrk_aligned+0x38>
 8009f54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009f58:	4620      	mov	r0, r4
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}
 8009f5c:	20000470 	.word	0x20000470

08009f60 <_malloc_r>:
 8009f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f64:	1ccd      	adds	r5, r1, #3
 8009f66:	f025 0503 	bic.w	r5, r5, #3
 8009f6a:	3508      	adds	r5, #8
 8009f6c:	2d0c      	cmp	r5, #12
 8009f6e:	bf38      	it	cc
 8009f70:	250c      	movcc	r5, #12
 8009f72:	2d00      	cmp	r5, #0
 8009f74:	4607      	mov	r7, r0
 8009f76:	db01      	blt.n	8009f7c <_malloc_r+0x1c>
 8009f78:	42a9      	cmp	r1, r5
 8009f7a:	d905      	bls.n	8009f88 <_malloc_r+0x28>
 8009f7c:	230c      	movs	r3, #12
 8009f7e:	603b      	str	r3, [r7, #0]
 8009f80:	2600      	movs	r6, #0
 8009f82:	4630      	mov	r0, r6
 8009f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a05c <_malloc_r+0xfc>
 8009f8c:	f000 f868 	bl	800a060 <__malloc_lock>
 8009f90:	f8d8 3000 	ldr.w	r3, [r8]
 8009f94:	461c      	mov	r4, r3
 8009f96:	bb5c      	cbnz	r4, 8009ff0 <_malloc_r+0x90>
 8009f98:	4629      	mov	r1, r5
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	f7ff ffc0 	bl	8009f20 <sbrk_aligned>
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	d155      	bne.n	800a052 <_malloc_r+0xf2>
 8009fa6:	f8d8 4000 	ldr.w	r4, [r8]
 8009faa:	4626      	mov	r6, r4
 8009fac:	2e00      	cmp	r6, #0
 8009fae:	d145      	bne.n	800a03c <_malloc_r+0xdc>
 8009fb0:	2c00      	cmp	r4, #0
 8009fb2:	d048      	beq.n	800a046 <_malloc_r+0xe6>
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	4631      	mov	r1, r6
 8009fb8:	4638      	mov	r0, r7
 8009fba:	eb04 0903 	add.w	r9, r4, r3
 8009fbe:	f000 f8a7 	bl	800a110 <_sbrk_r>
 8009fc2:	4581      	cmp	r9, r0
 8009fc4:	d13f      	bne.n	800a046 <_malloc_r+0xe6>
 8009fc6:	6821      	ldr	r1, [r4, #0]
 8009fc8:	1a6d      	subs	r5, r5, r1
 8009fca:	4629      	mov	r1, r5
 8009fcc:	4638      	mov	r0, r7
 8009fce:	f7ff ffa7 	bl	8009f20 <sbrk_aligned>
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	d037      	beq.n	800a046 <_malloc_r+0xe6>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	442b      	add	r3, r5
 8009fda:	6023      	str	r3, [r4, #0]
 8009fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d038      	beq.n	800a056 <_malloc_r+0xf6>
 8009fe4:	685a      	ldr	r2, [r3, #4]
 8009fe6:	42a2      	cmp	r2, r4
 8009fe8:	d12b      	bne.n	800a042 <_malloc_r+0xe2>
 8009fea:	2200      	movs	r2, #0
 8009fec:	605a      	str	r2, [r3, #4]
 8009fee:	e00f      	b.n	800a010 <_malloc_r+0xb0>
 8009ff0:	6822      	ldr	r2, [r4, #0]
 8009ff2:	1b52      	subs	r2, r2, r5
 8009ff4:	d41f      	bmi.n	800a036 <_malloc_r+0xd6>
 8009ff6:	2a0b      	cmp	r2, #11
 8009ff8:	d917      	bls.n	800a02a <_malloc_r+0xca>
 8009ffa:	1961      	adds	r1, r4, r5
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	6025      	str	r5, [r4, #0]
 800a000:	bf18      	it	ne
 800a002:	6059      	strne	r1, [r3, #4]
 800a004:	6863      	ldr	r3, [r4, #4]
 800a006:	bf08      	it	eq
 800a008:	f8c8 1000 	streq.w	r1, [r8]
 800a00c:	5162      	str	r2, [r4, r5]
 800a00e:	604b      	str	r3, [r1, #4]
 800a010:	4638      	mov	r0, r7
 800a012:	f104 060b 	add.w	r6, r4, #11
 800a016:	f000 f829 	bl	800a06c <__malloc_unlock>
 800a01a:	f026 0607 	bic.w	r6, r6, #7
 800a01e:	1d23      	adds	r3, r4, #4
 800a020:	1af2      	subs	r2, r6, r3
 800a022:	d0ae      	beq.n	8009f82 <_malloc_r+0x22>
 800a024:	1b9b      	subs	r3, r3, r6
 800a026:	50a3      	str	r3, [r4, r2]
 800a028:	e7ab      	b.n	8009f82 <_malloc_r+0x22>
 800a02a:	42a3      	cmp	r3, r4
 800a02c:	6862      	ldr	r2, [r4, #4]
 800a02e:	d1dd      	bne.n	8009fec <_malloc_r+0x8c>
 800a030:	f8c8 2000 	str.w	r2, [r8]
 800a034:	e7ec      	b.n	800a010 <_malloc_r+0xb0>
 800a036:	4623      	mov	r3, r4
 800a038:	6864      	ldr	r4, [r4, #4]
 800a03a:	e7ac      	b.n	8009f96 <_malloc_r+0x36>
 800a03c:	4634      	mov	r4, r6
 800a03e:	6876      	ldr	r6, [r6, #4]
 800a040:	e7b4      	b.n	8009fac <_malloc_r+0x4c>
 800a042:	4613      	mov	r3, r2
 800a044:	e7cc      	b.n	8009fe0 <_malloc_r+0x80>
 800a046:	230c      	movs	r3, #12
 800a048:	603b      	str	r3, [r7, #0]
 800a04a:	4638      	mov	r0, r7
 800a04c:	f000 f80e 	bl	800a06c <__malloc_unlock>
 800a050:	e797      	b.n	8009f82 <_malloc_r+0x22>
 800a052:	6025      	str	r5, [r4, #0]
 800a054:	e7dc      	b.n	800a010 <_malloc_r+0xb0>
 800a056:	605b      	str	r3, [r3, #4]
 800a058:	deff      	udf	#255	; 0xff
 800a05a:	bf00      	nop
 800a05c:	2000046c 	.word	0x2000046c

0800a060 <__malloc_lock>:
 800a060:	4801      	ldr	r0, [pc, #4]	; (800a068 <__malloc_lock+0x8>)
 800a062:	f000 b88f 	b.w	800a184 <__retarget_lock_acquire_recursive>
 800a066:	bf00      	nop
 800a068:	200005b0 	.word	0x200005b0

0800a06c <__malloc_unlock>:
 800a06c:	4801      	ldr	r0, [pc, #4]	; (800a074 <__malloc_unlock+0x8>)
 800a06e:	f000 b88a 	b.w	800a186 <__retarget_lock_release_recursive>
 800a072:	bf00      	nop
 800a074:	200005b0 	.word	0x200005b0

0800a078 <memset>:
 800a078:	4402      	add	r2, r0
 800a07a:	4603      	mov	r3, r0
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d100      	bne.n	800a082 <memset+0xa>
 800a080:	4770      	bx	lr
 800a082:	f803 1b01 	strb.w	r1, [r3], #1
 800a086:	e7f9      	b.n	800a07c <memset+0x4>

0800a088 <_raise_r>:
 800a088:	291f      	cmp	r1, #31
 800a08a:	b538      	push	{r3, r4, r5, lr}
 800a08c:	4604      	mov	r4, r0
 800a08e:	460d      	mov	r5, r1
 800a090:	d904      	bls.n	800a09c <_raise_r+0x14>
 800a092:	2316      	movs	r3, #22
 800a094:	6003      	str	r3, [r0, #0]
 800a096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a09e:	b112      	cbz	r2, 800a0a6 <_raise_r+0x1e>
 800a0a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0a4:	b94b      	cbnz	r3, 800a0ba <_raise_r+0x32>
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f000 f830 	bl	800a10c <_getpid_r>
 800a0ac:	462a      	mov	r2, r5
 800a0ae:	4601      	mov	r1, r0
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0b6:	f000 b817 	b.w	800a0e8 <_kill_r>
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d00a      	beq.n	800a0d4 <_raise_r+0x4c>
 800a0be:	1c59      	adds	r1, r3, #1
 800a0c0:	d103      	bne.n	800a0ca <_raise_r+0x42>
 800a0c2:	2316      	movs	r3, #22
 800a0c4:	6003      	str	r3, [r0, #0]
 800a0c6:	2001      	movs	r0, #1
 800a0c8:	e7e7      	b.n	800a09a <_raise_r+0x12>
 800a0ca:	2400      	movs	r4, #0
 800a0cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	4798      	blx	r3
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	e7e0      	b.n	800a09a <_raise_r+0x12>

0800a0d8 <raise>:
 800a0d8:	4b02      	ldr	r3, [pc, #8]	; (800a0e4 <raise+0xc>)
 800a0da:	4601      	mov	r1, r0
 800a0dc:	6818      	ldr	r0, [r3, #0]
 800a0de:	f7ff bfd3 	b.w	800a088 <_raise_r>
 800a0e2:	bf00      	nop
 800a0e4:	200001dc 	.word	0x200001dc

0800a0e8 <_kill_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	4d07      	ldr	r5, [pc, #28]	; (800a108 <_kill_r+0x20>)
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	4608      	mov	r0, r1
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	602b      	str	r3, [r5, #0]
 800a0f6:	f7fa ffed 	bl	80050d4 <_kill>
 800a0fa:	1c43      	adds	r3, r0, #1
 800a0fc:	d102      	bne.n	800a104 <_kill_r+0x1c>
 800a0fe:	682b      	ldr	r3, [r5, #0]
 800a100:	b103      	cbz	r3, 800a104 <_kill_r+0x1c>
 800a102:	6023      	str	r3, [r4, #0]
 800a104:	bd38      	pop	{r3, r4, r5, pc}
 800a106:	bf00      	nop
 800a108:	200005ac 	.word	0x200005ac

0800a10c <_getpid_r>:
 800a10c:	f7fa bfda 	b.w	80050c4 <_getpid>

0800a110 <_sbrk_r>:
 800a110:	b538      	push	{r3, r4, r5, lr}
 800a112:	4d06      	ldr	r5, [pc, #24]	; (800a12c <_sbrk_r+0x1c>)
 800a114:	2300      	movs	r3, #0
 800a116:	4604      	mov	r4, r0
 800a118:	4608      	mov	r0, r1
 800a11a:	602b      	str	r3, [r5, #0]
 800a11c:	f7fa fff4 	bl	8005108 <_sbrk>
 800a120:	1c43      	adds	r3, r0, #1
 800a122:	d102      	bne.n	800a12a <_sbrk_r+0x1a>
 800a124:	682b      	ldr	r3, [r5, #0]
 800a126:	b103      	cbz	r3, 800a12a <_sbrk_r+0x1a>
 800a128:	6023      	str	r3, [r4, #0]
 800a12a:	bd38      	pop	{r3, r4, r5, pc}
 800a12c:	200005ac 	.word	0x200005ac

0800a130 <__errno>:
 800a130:	4b01      	ldr	r3, [pc, #4]	; (800a138 <__errno+0x8>)
 800a132:	6818      	ldr	r0, [r3, #0]
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	200001dc 	.word	0x200001dc

0800a13c <__libc_init_array>:
 800a13c:	b570      	push	{r4, r5, r6, lr}
 800a13e:	4d0d      	ldr	r5, [pc, #52]	; (800a174 <__libc_init_array+0x38>)
 800a140:	4c0d      	ldr	r4, [pc, #52]	; (800a178 <__libc_init_array+0x3c>)
 800a142:	1b64      	subs	r4, r4, r5
 800a144:	10a4      	asrs	r4, r4, #2
 800a146:	2600      	movs	r6, #0
 800a148:	42a6      	cmp	r6, r4
 800a14a:	d109      	bne.n	800a160 <__libc_init_array+0x24>
 800a14c:	4d0b      	ldr	r5, [pc, #44]	; (800a17c <__libc_init_array+0x40>)
 800a14e:	4c0c      	ldr	r4, [pc, #48]	; (800a180 <__libc_init_array+0x44>)
 800a150:	f000 f874 	bl	800a23c <_init>
 800a154:	1b64      	subs	r4, r4, r5
 800a156:	10a4      	asrs	r4, r4, #2
 800a158:	2600      	movs	r6, #0
 800a15a:	42a6      	cmp	r6, r4
 800a15c:	d105      	bne.n	800a16a <__libc_init_array+0x2e>
 800a15e:	bd70      	pop	{r4, r5, r6, pc}
 800a160:	f855 3b04 	ldr.w	r3, [r5], #4
 800a164:	4798      	blx	r3
 800a166:	3601      	adds	r6, #1
 800a168:	e7ee      	b.n	800a148 <__libc_init_array+0xc>
 800a16a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a16e:	4798      	blx	r3
 800a170:	3601      	adds	r6, #1
 800a172:	e7f2      	b.n	800a15a <__libc_init_array+0x1e>
 800a174:	0800a3c0 	.word	0x0800a3c0
 800a178:	0800a3c0 	.word	0x0800a3c0
 800a17c:	0800a3c0 	.word	0x0800a3c0
 800a180:	0800a3c4 	.word	0x0800a3c4

0800a184 <__retarget_lock_acquire_recursive>:
 800a184:	4770      	bx	lr

0800a186 <__retarget_lock_release_recursive>:
 800a186:	4770      	bx	lr

0800a188 <memcpy>:
 800a188:	440a      	add	r2, r1
 800a18a:	4291      	cmp	r1, r2
 800a18c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a190:	d100      	bne.n	800a194 <memcpy+0xc>
 800a192:	4770      	bx	lr
 800a194:	b510      	push	{r4, lr}
 800a196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a19a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a19e:	4291      	cmp	r1, r2
 800a1a0:	d1f9      	bne.n	800a196 <memcpy+0xe>
 800a1a2:	bd10      	pop	{r4, pc}

0800a1a4 <_free_r>:
 800a1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1a6:	2900      	cmp	r1, #0
 800a1a8:	d044      	beq.n	800a234 <_free_r+0x90>
 800a1aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ae:	9001      	str	r0, [sp, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f1a1 0404 	sub.w	r4, r1, #4
 800a1b6:	bfb8      	it	lt
 800a1b8:	18e4      	addlt	r4, r4, r3
 800a1ba:	f7ff ff51 	bl	800a060 <__malloc_lock>
 800a1be:	4a1e      	ldr	r2, [pc, #120]	; (800a238 <_free_r+0x94>)
 800a1c0:	9801      	ldr	r0, [sp, #4]
 800a1c2:	6813      	ldr	r3, [r2, #0]
 800a1c4:	b933      	cbnz	r3, 800a1d4 <_free_r+0x30>
 800a1c6:	6063      	str	r3, [r4, #4]
 800a1c8:	6014      	str	r4, [r2, #0]
 800a1ca:	b003      	add	sp, #12
 800a1cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1d0:	f7ff bf4c 	b.w	800a06c <__malloc_unlock>
 800a1d4:	42a3      	cmp	r3, r4
 800a1d6:	d908      	bls.n	800a1ea <_free_r+0x46>
 800a1d8:	6825      	ldr	r5, [r4, #0]
 800a1da:	1961      	adds	r1, r4, r5
 800a1dc:	428b      	cmp	r3, r1
 800a1de:	bf01      	itttt	eq
 800a1e0:	6819      	ldreq	r1, [r3, #0]
 800a1e2:	685b      	ldreq	r3, [r3, #4]
 800a1e4:	1949      	addeq	r1, r1, r5
 800a1e6:	6021      	streq	r1, [r4, #0]
 800a1e8:	e7ed      	b.n	800a1c6 <_free_r+0x22>
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	b10b      	cbz	r3, 800a1f4 <_free_r+0x50>
 800a1f0:	42a3      	cmp	r3, r4
 800a1f2:	d9fa      	bls.n	800a1ea <_free_r+0x46>
 800a1f4:	6811      	ldr	r1, [r2, #0]
 800a1f6:	1855      	adds	r5, r2, r1
 800a1f8:	42a5      	cmp	r5, r4
 800a1fa:	d10b      	bne.n	800a214 <_free_r+0x70>
 800a1fc:	6824      	ldr	r4, [r4, #0]
 800a1fe:	4421      	add	r1, r4
 800a200:	1854      	adds	r4, r2, r1
 800a202:	42a3      	cmp	r3, r4
 800a204:	6011      	str	r1, [r2, #0]
 800a206:	d1e0      	bne.n	800a1ca <_free_r+0x26>
 800a208:	681c      	ldr	r4, [r3, #0]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	6053      	str	r3, [r2, #4]
 800a20e:	440c      	add	r4, r1
 800a210:	6014      	str	r4, [r2, #0]
 800a212:	e7da      	b.n	800a1ca <_free_r+0x26>
 800a214:	d902      	bls.n	800a21c <_free_r+0x78>
 800a216:	230c      	movs	r3, #12
 800a218:	6003      	str	r3, [r0, #0]
 800a21a:	e7d6      	b.n	800a1ca <_free_r+0x26>
 800a21c:	6825      	ldr	r5, [r4, #0]
 800a21e:	1961      	adds	r1, r4, r5
 800a220:	428b      	cmp	r3, r1
 800a222:	bf04      	itt	eq
 800a224:	6819      	ldreq	r1, [r3, #0]
 800a226:	685b      	ldreq	r3, [r3, #4]
 800a228:	6063      	str	r3, [r4, #4]
 800a22a:	bf04      	itt	eq
 800a22c:	1949      	addeq	r1, r1, r5
 800a22e:	6021      	streq	r1, [r4, #0]
 800a230:	6054      	str	r4, [r2, #4]
 800a232:	e7ca      	b.n	800a1ca <_free_r+0x26>
 800a234:	b003      	add	sp, #12
 800a236:	bd30      	pop	{r4, r5, pc}
 800a238:	2000046c 	.word	0x2000046c

0800a23c <_init>:
 800a23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23e:	bf00      	nop
 800a240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a242:	bc08      	pop	{r3}
 800a244:	469e      	mov	lr, r3
 800a246:	4770      	bx	lr

0800a248 <_fini>:
 800a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24a:	bf00      	nop
 800a24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a24e:	bc08      	pop	{r3}
 800a250:	469e      	mov	lr, r3
 800a252:	4770      	bx	lr
